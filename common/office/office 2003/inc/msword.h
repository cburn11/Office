

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* at Sun Feb 19 13:24:05 2012
 */
/* Compiler settings for msword.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __msword_h__
#define __msword_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef ___Application_FWD_DEFINED__
#define ___Application_FWD_DEFINED__
typedef interface _Application _Application;
#endif 	/* ___Application_FWD_DEFINED__ */


#ifndef ___Global_FWD_DEFINED__
#define ___Global_FWD_DEFINED__
typedef interface _Global _Global;
#endif 	/* ___Global_FWD_DEFINED__ */


#ifndef __FontNames_FWD_DEFINED__
#define __FontNames_FWD_DEFINED__
typedef interface FontNames FontNames;
#endif 	/* __FontNames_FWD_DEFINED__ */


#ifndef __Languages_FWD_DEFINED__
#define __Languages_FWD_DEFINED__
typedef interface Languages Languages;
#endif 	/* __Languages_FWD_DEFINED__ */


#ifndef __Language_FWD_DEFINED__
#define __Language_FWD_DEFINED__
typedef interface Language Language;
#endif 	/* __Language_FWD_DEFINED__ */


#ifndef __Documents_FWD_DEFINED__
#define __Documents_FWD_DEFINED__
typedef interface Documents Documents;
#endif 	/* __Documents_FWD_DEFINED__ */


#ifndef ___Document_FWD_DEFINED__
#define ___Document_FWD_DEFINED__
typedef interface _Document _Document;
#endif 	/* ___Document_FWD_DEFINED__ */


#ifndef __Template_FWD_DEFINED__
#define __Template_FWD_DEFINED__
typedef interface Template Template;
#endif 	/* __Template_FWD_DEFINED__ */


#ifndef __Templates_FWD_DEFINED__
#define __Templates_FWD_DEFINED__
typedef interface Templates Templates;
#endif 	/* __Templates_FWD_DEFINED__ */


#ifndef __RoutingSlip_FWD_DEFINED__
#define __RoutingSlip_FWD_DEFINED__
typedef interface RoutingSlip RoutingSlip;
#endif 	/* __RoutingSlip_FWD_DEFINED__ */


#ifndef __Bookmark_FWD_DEFINED__
#define __Bookmark_FWD_DEFINED__
typedef interface Bookmark Bookmark;
#endif 	/* __Bookmark_FWD_DEFINED__ */


#ifndef __Bookmarks_FWD_DEFINED__
#define __Bookmarks_FWD_DEFINED__
typedef interface Bookmarks Bookmarks;
#endif 	/* __Bookmarks_FWD_DEFINED__ */


#ifndef __Variable_FWD_DEFINED__
#define __Variable_FWD_DEFINED__
typedef interface Variable Variable;
#endif 	/* __Variable_FWD_DEFINED__ */


#ifndef __Variables_FWD_DEFINED__
#define __Variables_FWD_DEFINED__
typedef interface Variables Variables;
#endif 	/* __Variables_FWD_DEFINED__ */


#ifndef __RecentFile_FWD_DEFINED__
#define __RecentFile_FWD_DEFINED__
typedef interface RecentFile RecentFile;
#endif 	/* __RecentFile_FWD_DEFINED__ */


#ifndef __RecentFiles_FWD_DEFINED__
#define __RecentFiles_FWD_DEFINED__
typedef interface RecentFiles RecentFiles;
#endif 	/* __RecentFiles_FWD_DEFINED__ */


#ifndef __Window_FWD_DEFINED__
#define __Window_FWD_DEFINED__
typedef interface Window Window;
#endif 	/* __Window_FWD_DEFINED__ */


#ifndef __Windows_FWD_DEFINED__
#define __Windows_FWD_DEFINED__
typedef interface Windows Windows;
#endif 	/* __Windows_FWD_DEFINED__ */


#ifndef __Pane_FWD_DEFINED__
#define __Pane_FWD_DEFINED__
typedef interface Pane Pane;
#endif 	/* __Pane_FWD_DEFINED__ */


#ifndef __Panes_FWD_DEFINED__
#define __Panes_FWD_DEFINED__
typedef interface Panes Panes;
#endif 	/* __Panes_FWD_DEFINED__ */


#ifndef __Range_FWD_DEFINED__
#define __Range_FWD_DEFINED__
typedef interface Range Range;
#endif 	/* __Range_FWD_DEFINED__ */


#ifndef __ListFormat_FWD_DEFINED__
#define __ListFormat_FWD_DEFINED__
typedef interface ListFormat ListFormat;
#endif 	/* __ListFormat_FWD_DEFINED__ */


#ifndef __Find_FWD_DEFINED__
#define __Find_FWD_DEFINED__
typedef interface Find Find;
#endif 	/* __Find_FWD_DEFINED__ */


#ifndef __Replacement_FWD_DEFINED__
#define __Replacement_FWD_DEFINED__
typedef interface Replacement Replacement;
#endif 	/* __Replacement_FWD_DEFINED__ */


#ifndef __Characters_FWD_DEFINED__
#define __Characters_FWD_DEFINED__
typedef interface Characters Characters;
#endif 	/* __Characters_FWD_DEFINED__ */


#ifndef __Words_FWD_DEFINED__
#define __Words_FWD_DEFINED__
typedef interface Words Words;
#endif 	/* __Words_FWD_DEFINED__ */


#ifndef __Sentences_FWD_DEFINED__
#define __Sentences_FWD_DEFINED__
typedef interface Sentences Sentences;
#endif 	/* __Sentences_FWD_DEFINED__ */


#ifndef __Sections_FWD_DEFINED__
#define __Sections_FWD_DEFINED__
typedef interface Sections Sections;
#endif 	/* __Sections_FWD_DEFINED__ */


#ifndef __Section_FWD_DEFINED__
#define __Section_FWD_DEFINED__
typedef interface Section Section;
#endif 	/* __Section_FWD_DEFINED__ */


#ifndef __Paragraphs_FWD_DEFINED__
#define __Paragraphs_FWD_DEFINED__
typedef interface Paragraphs Paragraphs;
#endif 	/* __Paragraphs_FWD_DEFINED__ */


#ifndef __Paragraph_FWD_DEFINED__
#define __Paragraph_FWD_DEFINED__
typedef interface Paragraph Paragraph;
#endif 	/* __Paragraph_FWD_DEFINED__ */


#ifndef __DropCap_FWD_DEFINED__
#define __DropCap_FWD_DEFINED__
typedef interface DropCap DropCap;
#endif 	/* __DropCap_FWD_DEFINED__ */


#ifndef __TabStops_FWD_DEFINED__
#define __TabStops_FWD_DEFINED__
typedef interface TabStops TabStops;
#endif 	/* __TabStops_FWD_DEFINED__ */


#ifndef __TabStop_FWD_DEFINED__
#define __TabStop_FWD_DEFINED__
typedef interface TabStop TabStop;
#endif 	/* __TabStop_FWD_DEFINED__ */


#ifndef ___ParagraphFormat_FWD_DEFINED__
#define ___ParagraphFormat_FWD_DEFINED__
typedef interface _ParagraphFormat _ParagraphFormat;
#endif 	/* ___ParagraphFormat_FWD_DEFINED__ */


#ifndef ___Font_FWD_DEFINED__
#define ___Font_FWD_DEFINED__
typedef interface _Font _Font;
#endif 	/* ___Font_FWD_DEFINED__ */


#ifndef __Table_FWD_DEFINED__
#define __Table_FWD_DEFINED__
typedef interface Table Table;
#endif 	/* __Table_FWD_DEFINED__ */


#ifndef __Row_FWD_DEFINED__
#define __Row_FWD_DEFINED__
typedef interface Row Row;
#endif 	/* __Row_FWD_DEFINED__ */


#ifndef __Column_FWD_DEFINED__
#define __Column_FWD_DEFINED__
typedef interface Column Column;
#endif 	/* __Column_FWD_DEFINED__ */


#ifndef __Cell_FWD_DEFINED__
#define __Cell_FWD_DEFINED__
typedef interface Cell Cell;
#endif 	/* __Cell_FWD_DEFINED__ */


#ifndef __Tables_FWD_DEFINED__
#define __Tables_FWD_DEFINED__
typedef interface Tables Tables;
#endif 	/* __Tables_FWD_DEFINED__ */


#ifndef __Rows_FWD_DEFINED__
#define __Rows_FWD_DEFINED__
typedef interface Rows Rows;
#endif 	/* __Rows_FWD_DEFINED__ */


#ifndef __Columns_FWD_DEFINED__
#define __Columns_FWD_DEFINED__
typedef interface Columns Columns;
#endif 	/* __Columns_FWD_DEFINED__ */


#ifndef __Cells_FWD_DEFINED__
#define __Cells_FWD_DEFINED__
typedef interface Cells Cells;
#endif 	/* __Cells_FWD_DEFINED__ */


#ifndef __AutoCorrect_FWD_DEFINED__
#define __AutoCorrect_FWD_DEFINED__
typedef interface AutoCorrect AutoCorrect;
#endif 	/* __AutoCorrect_FWD_DEFINED__ */


#ifndef __AutoCorrectEntries_FWD_DEFINED__
#define __AutoCorrectEntries_FWD_DEFINED__
typedef interface AutoCorrectEntries AutoCorrectEntries;
#endif 	/* __AutoCorrectEntries_FWD_DEFINED__ */


#ifndef __AutoCorrectEntry_FWD_DEFINED__
#define __AutoCorrectEntry_FWD_DEFINED__
typedef interface AutoCorrectEntry AutoCorrectEntry;
#endif 	/* __AutoCorrectEntry_FWD_DEFINED__ */


#ifndef __FirstLetterExceptions_FWD_DEFINED__
#define __FirstLetterExceptions_FWD_DEFINED__
typedef interface FirstLetterExceptions FirstLetterExceptions;
#endif 	/* __FirstLetterExceptions_FWD_DEFINED__ */


#ifndef __FirstLetterException_FWD_DEFINED__
#define __FirstLetterException_FWD_DEFINED__
typedef interface FirstLetterException FirstLetterException;
#endif 	/* __FirstLetterException_FWD_DEFINED__ */


#ifndef __TwoInitialCapsExceptions_FWD_DEFINED__
#define __TwoInitialCapsExceptions_FWD_DEFINED__
typedef interface TwoInitialCapsExceptions TwoInitialCapsExceptions;
#endif 	/* __TwoInitialCapsExceptions_FWD_DEFINED__ */


#ifndef __TwoInitialCapsException_FWD_DEFINED__
#define __TwoInitialCapsException_FWD_DEFINED__
typedef interface TwoInitialCapsException TwoInitialCapsException;
#endif 	/* __TwoInitialCapsException_FWD_DEFINED__ */


#ifndef __Footnotes_FWD_DEFINED__
#define __Footnotes_FWD_DEFINED__
typedef interface Footnotes Footnotes;
#endif 	/* __Footnotes_FWD_DEFINED__ */


#ifndef __Endnotes_FWD_DEFINED__
#define __Endnotes_FWD_DEFINED__
typedef interface Endnotes Endnotes;
#endif 	/* __Endnotes_FWD_DEFINED__ */


#ifndef __Comments_FWD_DEFINED__
#define __Comments_FWD_DEFINED__
typedef interface Comments Comments;
#endif 	/* __Comments_FWD_DEFINED__ */


#ifndef __Footnote_FWD_DEFINED__
#define __Footnote_FWD_DEFINED__
typedef interface Footnote Footnote;
#endif 	/* __Footnote_FWD_DEFINED__ */


#ifndef __Endnote_FWD_DEFINED__
#define __Endnote_FWD_DEFINED__
typedef interface Endnote Endnote;
#endif 	/* __Endnote_FWD_DEFINED__ */


#ifndef __Comment_FWD_DEFINED__
#define __Comment_FWD_DEFINED__
typedef interface Comment Comment;
#endif 	/* __Comment_FWD_DEFINED__ */


#ifndef __Borders_FWD_DEFINED__
#define __Borders_FWD_DEFINED__
typedef interface Borders Borders;
#endif 	/* __Borders_FWD_DEFINED__ */


#ifndef __Border_FWD_DEFINED__
#define __Border_FWD_DEFINED__
typedef interface Border Border;
#endif 	/* __Border_FWD_DEFINED__ */


#ifndef __Shading_FWD_DEFINED__
#define __Shading_FWD_DEFINED__
typedef interface Shading Shading;
#endif 	/* __Shading_FWD_DEFINED__ */


#ifndef __TextRetrievalMode_FWD_DEFINED__
#define __TextRetrievalMode_FWD_DEFINED__
typedef interface TextRetrievalMode TextRetrievalMode;
#endif 	/* __TextRetrievalMode_FWD_DEFINED__ */


#ifndef __AutoTextEntries_FWD_DEFINED__
#define __AutoTextEntries_FWD_DEFINED__
typedef interface AutoTextEntries AutoTextEntries;
#endif 	/* __AutoTextEntries_FWD_DEFINED__ */


#ifndef __AutoTextEntry_FWD_DEFINED__
#define __AutoTextEntry_FWD_DEFINED__
typedef interface AutoTextEntry AutoTextEntry;
#endif 	/* __AutoTextEntry_FWD_DEFINED__ */


#ifndef __System_FWD_DEFINED__
#define __System_FWD_DEFINED__
typedef interface System System;
#endif 	/* __System_FWD_DEFINED__ */


#ifndef __OLEFormat_FWD_DEFINED__
#define __OLEFormat_FWD_DEFINED__
typedef interface OLEFormat OLEFormat;
#endif 	/* __OLEFormat_FWD_DEFINED__ */


#ifndef __LinkFormat_FWD_DEFINED__
#define __LinkFormat_FWD_DEFINED__
typedef interface LinkFormat LinkFormat;
#endif 	/* __LinkFormat_FWD_DEFINED__ */


#ifndef ___OLEControl_FWD_DEFINED__
#define ___OLEControl_FWD_DEFINED__
typedef interface _OLEControl _OLEControl;
#endif 	/* ___OLEControl_FWD_DEFINED__ */


#ifndef __Fields_FWD_DEFINED__
#define __Fields_FWD_DEFINED__
typedef interface Fields Fields;
#endif 	/* __Fields_FWD_DEFINED__ */


#ifndef __Field_FWD_DEFINED__
#define __Field_FWD_DEFINED__
typedef interface Field Field;
#endif 	/* __Field_FWD_DEFINED__ */


#ifndef __Browser_FWD_DEFINED__
#define __Browser_FWD_DEFINED__
typedef interface Browser Browser;
#endif 	/* __Browser_FWD_DEFINED__ */


#ifndef __Styles_FWD_DEFINED__
#define __Styles_FWD_DEFINED__
typedef interface Styles Styles;
#endif 	/* __Styles_FWD_DEFINED__ */


#ifndef __Style_FWD_DEFINED__
#define __Style_FWD_DEFINED__
typedef interface Style Style;
#endif 	/* __Style_FWD_DEFINED__ */


#ifndef __Frames_FWD_DEFINED__
#define __Frames_FWD_DEFINED__
typedef interface Frames Frames;
#endif 	/* __Frames_FWD_DEFINED__ */


#ifndef __Frame_FWD_DEFINED__
#define __Frame_FWD_DEFINED__
typedef interface Frame Frame;
#endif 	/* __Frame_FWD_DEFINED__ */


#ifndef __FormFields_FWD_DEFINED__
#define __FormFields_FWD_DEFINED__
typedef interface FormFields FormFields;
#endif 	/* __FormFields_FWD_DEFINED__ */


#ifndef __FormField_FWD_DEFINED__
#define __FormField_FWD_DEFINED__
typedef interface FormField FormField;
#endif 	/* __FormField_FWD_DEFINED__ */


#ifndef __TextInput_FWD_DEFINED__
#define __TextInput_FWD_DEFINED__
typedef interface TextInput TextInput;
#endif 	/* __TextInput_FWD_DEFINED__ */


#ifndef __CheckBox_FWD_DEFINED__
#define __CheckBox_FWD_DEFINED__
typedef interface CheckBox CheckBox;
#endif 	/* __CheckBox_FWD_DEFINED__ */


#ifndef __DropDown_FWD_DEFINED__
#define __DropDown_FWD_DEFINED__
typedef interface DropDown DropDown;
#endif 	/* __DropDown_FWD_DEFINED__ */


#ifndef __ListEntries_FWD_DEFINED__
#define __ListEntries_FWD_DEFINED__
typedef interface ListEntries ListEntries;
#endif 	/* __ListEntries_FWD_DEFINED__ */


#ifndef __ListEntry_FWD_DEFINED__
#define __ListEntry_FWD_DEFINED__
typedef interface ListEntry ListEntry;
#endif 	/* __ListEntry_FWD_DEFINED__ */


#ifndef __TablesOfFigures_FWD_DEFINED__
#define __TablesOfFigures_FWD_DEFINED__
typedef interface TablesOfFigures TablesOfFigures;
#endif 	/* __TablesOfFigures_FWD_DEFINED__ */


#ifndef __TableOfFigures_FWD_DEFINED__
#define __TableOfFigures_FWD_DEFINED__
typedef interface TableOfFigures TableOfFigures;
#endif 	/* __TableOfFigures_FWD_DEFINED__ */


#ifndef __MailMerge_FWD_DEFINED__
#define __MailMerge_FWD_DEFINED__
typedef interface MailMerge MailMerge;
#endif 	/* __MailMerge_FWD_DEFINED__ */


#ifndef __MailMergeFields_FWD_DEFINED__
#define __MailMergeFields_FWD_DEFINED__
typedef interface MailMergeFields MailMergeFields;
#endif 	/* __MailMergeFields_FWD_DEFINED__ */


#ifndef __MailMergeField_FWD_DEFINED__
#define __MailMergeField_FWD_DEFINED__
typedef interface MailMergeField MailMergeField;
#endif 	/* __MailMergeField_FWD_DEFINED__ */


#ifndef __MailMergeDataSource_FWD_DEFINED__
#define __MailMergeDataSource_FWD_DEFINED__
typedef interface MailMergeDataSource MailMergeDataSource;
#endif 	/* __MailMergeDataSource_FWD_DEFINED__ */


#ifndef __MailMergeFieldNames_FWD_DEFINED__
#define __MailMergeFieldNames_FWD_DEFINED__
typedef interface MailMergeFieldNames MailMergeFieldNames;
#endif 	/* __MailMergeFieldNames_FWD_DEFINED__ */


#ifndef __MailMergeFieldName_FWD_DEFINED__
#define __MailMergeFieldName_FWD_DEFINED__
typedef interface MailMergeFieldName MailMergeFieldName;
#endif 	/* __MailMergeFieldName_FWD_DEFINED__ */


#ifndef __MailMergeDataFields_FWD_DEFINED__
#define __MailMergeDataFields_FWD_DEFINED__
typedef interface MailMergeDataFields MailMergeDataFields;
#endif 	/* __MailMergeDataFields_FWD_DEFINED__ */


#ifndef __MailMergeDataField_FWD_DEFINED__
#define __MailMergeDataField_FWD_DEFINED__
typedef interface MailMergeDataField MailMergeDataField;
#endif 	/* __MailMergeDataField_FWD_DEFINED__ */


#ifndef __Envelope_FWD_DEFINED__
#define __Envelope_FWD_DEFINED__
typedef interface Envelope Envelope;
#endif 	/* __Envelope_FWD_DEFINED__ */


#ifndef __MailingLabel_FWD_DEFINED__
#define __MailingLabel_FWD_DEFINED__
typedef interface MailingLabel MailingLabel;
#endif 	/* __MailingLabel_FWD_DEFINED__ */


#ifndef __CustomLabels_FWD_DEFINED__
#define __CustomLabels_FWD_DEFINED__
typedef interface CustomLabels CustomLabels;
#endif 	/* __CustomLabels_FWD_DEFINED__ */


#ifndef __CustomLabel_FWD_DEFINED__
#define __CustomLabel_FWD_DEFINED__
typedef interface CustomLabel CustomLabel;
#endif 	/* __CustomLabel_FWD_DEFINED__ */


#ifndef __TablesOfContents_FWD_DEFINED__
#define __TablesOfContents_FWD_DEFINED__
typedef interface TablesOfContents TablesOfContents;
#endif 	/* __TablesOfContents_FWD_DEFINED__ */


#ifndef __TableOfContents_FWD_DEFINED__
#define __TableOfContents_FWD_DEFINED__
typedef interface TableOfContents TableOfContents;
#endif 	/* __TableOfContents_FWD_DEFINED__ */


#ifndef __TablesOfAuthorities_FWD_DEFINED__
#define __TablesOfAuthorities_FWD_DEFINED__
typedef interface TablesOfAuthorities TablesOfAuthorities;
#endif 	/* __TablesOfAuthorities_FWD_DEFINED__ */


#ifndef __TableOfAuthorities_FWD_DEFINED__
#define __TableOfAuthorities_FWD_DEFINED__
typedef interface TableOfAuthorities TableOfAuthorities;
#endif 	/* __TableOfAuthorities_FWD_DEFINED__ */


#ifndef __Dialogs_FWD_DEFINED__
#define __Dialogs_FWD_DEFINED__
typedef interface Dialogs Dialogs;
#endif 	/* __Dialogs_FWD_DEFINED__ */


#ifndef __Dialog_FWD_DEFINED__
#define __Dialog_FWD_DEFINED__
typedef interface Dialog Dialog;
#endif 	/* __Dialog_FWD_DEFINED__ */


#ifndef __PageSetup_FWD_DEFINED__
#define __PageSetup_FWD_DEFINED__
typedef interface PageSetup PageSetup;
#endif 	/* __PageSetup_FWD_DEFINED__ */


#ifndef __LineNumbering_FWD_DEFINED__
#define __LineNumbering_FWD_DEFINED__
typedef interface LineNumbering LineNumbering;
#endif 	/* __LineNumbering_FWD_DEFINED__ */


#ifndef __TextColumns_FWD_DEFINED__
#define __TextColumns_FWD_DEFINED__
typedef interface TextColumns TextColumns;
#endif 	/* __TextColumns_FWD_DEFINED__ */


#ifndef __TextColumn_FWD_DEFINED__
#define __TextColumn_FWD_DEFINED__
typedef interface TextColumn TextColumn;
#endif 	/* __TextColumn_FWD_DEFINED__ */


#ifndef __Selection_FWD_DEFINED__
#define __Selection_FWD_DEFINED__
typedef interface Selection Selection;
#endif 	/* __Selection_FWD_DEFINED__ */


#ifndef __TablesOfAuthoritiesCategories_FWD_DEFINED__
#define __TablesOfAuthoritiesCategories_FWD_DEFINED__
typedef interface TablesOfAuthoritiesCategories TablesOfAuthoritiesCategories;
#endif 	/* __TablesOfAuthoritiesCategories_FWD_DEFINED__ */


#ifndef __TableOfAuthoritiesCategory_FWD_DEFINED__
#define __TableOfAuthoritiesCategory_FWD_DEFINED__
typedef interface TableOfAuthoritiesCategory TableOfAuthoritiesCategory;
#endif 	/* __TableOfAuthoritiesCategory_FWD_DEFINED__ */


#ifndef __CaptionLabels_FWD_DEFINED__
#define __CaptionLabels_FWD_DEFINED__
typedef interface CaptionLabels CaptionLabels;
#endif 	/* __CaptionLabels_FWD_DEFINED__ */


#ifndef __CaptionLabel_FWD_DEFINED__
#define __CaptionLabel_FWD_DEFINED__
typedef interface CaptionLabel CaptionLabel;
#endif 	/* __CaptionLabel_FWD_DEFINED__ */


#ifndef __AutoCaptions_FWD_DEFINED__
#define __AutoCaptions_FWD_DEFINED__
typedef interface AutoCaptions AutoCaptions;
#endif 	/* __AutoCaptions_FWD_DEFINED__ */


#ifndef __AutoCaption_FWD_DEFINED__
#define __AutoCaption_FWD_DEFINED__
typedef interface AutoCaption AutoCaption;
#endif 	/* __AutoCaption_FWD_DEFINED__ */


#ifndef __Indexes_FWD_DEFINED__
#define __Indexes_FWD_DEFINED__
typedef interface Indexes Indexes;
#endif 	/* __Indexes_FWD_DEFINED__ */


#ifndef __Index_FWD_DEFINED__
#define __Index_FWD_DEFINED__
typedef interface Index Index;
#endif 	/* __Index_FWD_DEFINED__ */


#ifndef __AddIn_FWD_DEFINED__
#define __AddIn_FWD_DEFINED__
typedef interface AddIn AddIn;
#endif 	/* __AddIn_FWD_DEFINED__ */


#ifndef __AddIns_FWD_DEFINED__
#define __AddIns_FWD_DEFINED__
typedef interface AddIns AddIns;
#endif 	/* __AddIns_FWD_DEFINED__ */


#ifndef __Revisions_FWD_DEFINED__
#define __Revisions_FWD_DEFINED__
typedef interface Revisions Revisions;
#endif 	/* __Revisions_FWD_DEFINED__ */


#ifndef __Revision_FWD_DEFINED__
#define __Revision_FWD_DEFINED__
typedef interface Revision Revision;
#endif 	/* __Revision_FWD_DEFINED__ */


#ifndef __Task_FWD_DEFINED__
#define __Task_FWD_DEFINED__
typedef interface Task Task;
#endif 	/* __Task_FWD_DEFINED__ */


#ifndef __Tasks_FWD_DEFINED__
#define __Tasks_FWD_DEFINED__
typedef interface Tasks Tasks;
#endif 	/* __Tasks_FWD_DEFINED__ */


#ifndef __HeadersFooters_FWD_DEFINED__
#define __HeadersFooters_FWD_DEFINED__
typedef interface HeadersFooters HeadersFooters;
#endif 	/* __HeadersFooters_FWD_DEFINED__ */


#ifndef __HeaderFooter_FWD_DEFINED__
#define __HeaderFooter_FWD_DEFINED__
typedef interface HeaderFooter HeaderFooter;
#endif 	/* __HeaderFooter_FWD_DEFINED__ */


#ifndef __PageNumbers_FWD_DEFINED__
#define __PageNumbers_FWD_DEFINED__
typedef interface PageNumbers PageNumbers;
#endif 	/* __PageNumbers_FWD_DEFINED__ */


#ifndef __PageNumber_FWD_DEFINED__
#define __PageNumber_FWD_DEFINED__
typedef interface PageNumber PageNumber;
#endif 	/* __PageNumber_FWD_DEFINED__ */


#ifndef __Subdocuments_FWD_DEFINED__
#define __Subdocuments_FWD_DEFINED__
typedef interface Subdocuments Subdocuments;
#endif 	/* __Subdocuments_FWD_DEFINED__ */


#ifndef __Subdocument_FWD_DEFINED__
#define __Subdocument_FWD_DEFINED__
typedef interface Subdocument Subdocument;
#endif 	/* __Subdocument_FWD_DEFINED__ */


#ifndef __HeadingStyles_FWD_DEFINED__
#define __HeadingStyles_FWD_DEFINED__
typedef interface HeadingStyles HeadingStyles;
#endif 	/* __HeadingStyles_FWD_DEFINED__ */


#ifndef __HeadingStyle_FWD_DEFINED__
#define __HeadingStyle_FWD_DEFINED__
typedef interface HeadingStyle HeadingStyle;
#endif 	/* __HeadingStyle_FWD_DEFINED__ */


#ifndef __StoryRanges_FWD_DEFINED__
#define __StoryRanges_FWD_DEFINED__
typedef interface StoryRanges StoryRanges;
#endif 	/* __StoryRanges_FWD_DEFINED__ */


#ifndef __ListLevel_FWD_DEFINED__
#define __ListLevel_FWD_DEFINED__
typedef interface ListLevel ListLevel;
#endif 	/* __ListLevel_FWD_DEFINED__ */


#ifndef __ListLevels_FWD_DEFINED__
#define __ListLevels_FWD_DEFINED__
typedef interface ListLevels ListLevels;
#endif 	/* __ListLevels_FWD_DEFINED__ */


#ifndef __ListTemplate_FWD_DEFINED__
#define __ListTemplate_FWD_DEFINED__
typedef interface ListTemplate ListTemplate;
#endif 	/* __ListTemplate_FWD_DEFINED__ */


#ifndef __ListTemplates_FWD_DEFINED__
#define __ListTemplates_FWD_DEFINED__
typedef interface ListTemplates ListTemplates;
#endif 	/* __ListTemplates_FWD_DEFINED__ */


#ifndef __ListParagraphs_FWD_DEFINED__
#define __ListParagraphs_FWD_DEFINED__
typedef interface ListParagraphs ListParagraphs;
#endif 	/* __ListParagraphs_FWD_DEFINED__ */


#ifndef __List_FWD_DEFINED__
#define __List_FWD_DEFINED__
typedef interface List List;
#endif 	/* __List_FWD_DEFINED__ */


#ifndef __Lists_FWD_DEFINED__
#define __Lists_FWD_DEFINED__
typedef interface Lists Lists;
#endif 	/* __Lists_FWD_DEFINED__ */


#ifndef __ListGallery_FWD_DEFINED__
#define __ListGallery_FWD_DEFINED__
typedef interface ListGallery ListGallery;
#endif 	/* __ListGallery_FWD_DEFINED__ */


#ifndef __ListGalleries_FWD_DEFINED__
#define __ListGalleries_FWD_DEFINED__
typedef interface ListGalleries ListGalleries;
#endif 	/* __ListGalleries_FWD_DEFINED__ */


#ifndef __KeyBindings_FWD_DEFINED__
#define __KeyBindings_FWD_DEFINED__
typedef interface KeyBindings KeyBindings;
#endif 	/* __KeyBindings_FWD_DEFINED__ */


#ifndef __KeysBoundTo_FWD_DEFINED__
#define __KeysBoundTo_FWD_DEFINED__
typedef interface KeysBoundTo KeysBoundTo;
#endif 	/* __KeysBoundTo_FWD_DEFINED__ */


#ifndef __KeyBinding_FWD_DEFINED__
#define __KeyBinding_FWD_DEFINED__
typedef interface KeyBinding KeyBinding;
#endif 	/* __KeyBinding_FWD_DEFINED__ */


#ifndef __FileConverter_FWD_DEFINED__
#define __FileConverter_FWD_DEFINED__
typedef interface FileConverter FileConverter;
#endif 	/* __FileConverter_FWD_DEFINED__ */


#ifndef __FileConverters_FWD_DEFINED__
#define __FileConverters_FWD_DEFINED__
typedef interface FileConverters FileConverters;
#endif 	/* __FileConverters_FWD_DEFINED__ */


#ifndef __SynonymInfo_FWD_DEFINED__
#define __SynonymInfo_FWD_DEFINED__
typedef interface SynonymInfo SynonymInfo;
#endif 	/* __SynonymInfo_FWD_DEFINED__ */


#ifndef __Hyperlinks_FWD_DEFINED__
#define __Hyperlinks_FWD_DEFINED__
typedef interface Hyperlinks Hyperlinks;
#endif 	/* __Hyperlinks_FWD_DEFINED__ */


#ifndef __Hyperlink_FWD_DEFINED__
#define __Hyperlink_FWD_DEFINED__
typedef interface Hyperlink Hyperlink;
#endif 	/* __Hyperlink_FWD_DEFINED__ */


#ifndef __Shapes_FWD_DEFINED__
#define __Shapes_FWD_DEFINED__
typedef interface Shapes Shapes;
#endif 	/* __Shapes_FWD_DEFINED__ */


#ifndef __ShapeRange_FWD_DEFINED__
#define __ShapeRange_FWD_DEFINED__
typedef interface ShapeRange ShapeRange;
#endif 	/* __ShapeRange_FWD_DEFINED__ */


#ifndef __GroupShapes_FWD_DEFINED__
#define __GroupShapes_FWD_DEFINED__
typedef interface GroupShapes GroupShapes;
#endif 	/* __GroupShapes_FWD_DEFINED__ */


#ifndef __Shape_FWD_DEFINED__
#define __Shape_FWD_DEFINED__
typedef interface Shape Shape;
#endif 	/* __Shape_FWD_DEFINED__ */


#ifndef __TextFrame_FWD_DEFINED__
#define __TextFrame_FWD_DEFINED__
typedef interface TextFrame TextFrame;
#endif 	/* __TextFrame_FWD_DEFINED__ */


#ifndef ___LetterContent_FWD_DEFINED__
#define ___LetterContent_FWD_DEFINED__
typedef interface _LetterContent _LetterContent;
#endif 	/* ___LetterContent_FWD_DEFINED__ */


#ifndef __View_FWD_DEFINED__
#define __View_FWD_DEFINED__
typedef interface View View;
#endif 	/* __View_FWD_DEFINED__ */


#ifndef __Zoom_FWD_DEFINED__
#define __Zoom_FWD_DEFINED__
typedef interface Zoom Zoom;
#endif 	/* __Zoom_FWD_DEFINED__ */


#ifndef __Zooms_FWD_DEFINED__
#define __Zooms_FWD_DEFINED__
typedef interface Zooms Zooms;
#endif 	/* __Zooms_FWD_DEFINED__ */


#ifndef __InlineShape_FWD_DEFINED__
#define __InlineShape_FWD_DEFINED__
typedef interface InlineShape InlineShape;
#endif 	/* __InlineShape_FWD_DEFINED__ */


#ifndef __InlineShapes_FWD_DEFINED__
#define __InlineShapes_FWD_DEFINED__
typedef interface InlineShapes InlineShapes;
#endif 	/* __InlineShapes_FWD_DEFINED__ */


#ifndef __SpellingSuggestions_FWD_DEFINED__
#define __SpellingSuggestions_FWD_DEFINED__
typedef interface SpellingSuggestions SpellingSuggestions;
#endif 	/* __SpellingSuggestions_FWD_DEFINED__ */


#ifndef __SpellingSuggestion_FWD_DEFINED__
#define __SpellingSuggestion_FWD_DEFINED__
typedef interface SpellingSuggestion SpellingSuggestion;
#endif 	/* __SpellingSuggestion_FWD_DEFINED__ */


#ifndef __Dictionaries_FWD_DEFINED__
#define __Dictionaries_FWD_DEFINED__
typedef interface Dictionaries Dictionaries;
#endif 	/* __Dictionaries_FWD_DEFINED__ */


#ifndef __HangulHanjaConversionDictionaries_FWD_DEFINED__
#define __HangulHanjaConversionDictionaries_FWD_DEFINED__
typedef interface HangulHanjaConversionDictionaries HangulHanjaConversionDictionaries;
#endif 	/* __HangulHanjaConversionDictionaries_FWD_DEFINED__ */


#ifndef __Dictionary_FWD_DEFINED__
#define __Dictionary_FWD_DEFINED__
typedef interface Dictionary Dictionary;
#endif 	/* __Dictionary_FWD_DEFINED__ */


#ifndef __ReadabilityStatistics_FWD_DEFINED__
#define __ReadabilityStatistics_FWD_DEFINED__
typedef interface ReadabilityStatistics ReadabilityStatistics;
#endif 	/* __ReadabilityStatistics_FWD_DEFINED__ */


#ifndef __ReadabilityStatistic_FWD_DEFINED__
#define __ReadabilityStatistic_FWD_DEFINED__
typedef interface ReadabilityStatistic ReadabilityStatistic;
#endif 	/* __ReadabilityStatistic_FWD_DEFINED__ */


#ifndef __Versions_FWD_DEFINED__
#define __Versions_FWD_DEFINED__
typedef interface Versions Versions;
#endif 	/* __Versions_FWD_DEFINED__ */


#ifndef __Version_FWD_DEFINED__
#define __Version_FWD_DEFINED__
typedef interface Version Version;
#endif 	/* __Version_FWD_DEFINED__ */


#ifndef __Options_FWD_DEFINED__
#define __Options_FWD_DEFINED__
typedef interface Options Options;
#endif 	/* __Options_FWD_DEFINED__ */


#ifndef __MailMessage_FWD_DEFINED__
#define __MailMessage_FWD_DEFINED__
typedef interface MailMessage MailMessage;
#endif 	/* __MailMessage_FWD_DEFINED__ */


#ifndef __ProofreadingErrors_FWD_DEFINED__
#define __ProofreadingErrors_FWD_DEFINED__
typedef interface ProofreadingErrors ProofreadingErrors;
#endif 	/* __ProofreadingErrors_FWD_DEFINED__ */


#ifndef __Mailer_FWD_DEFINED__
#define __Mailer_FWD_DEFINED__
typedef interface Mailer Mailer;
#endif 	/* __Mailer_FWD_DEFINED__ */


#ifndef __WrapFormat_FWD_DEFINED__
#define __WrapFormat_FWD_DEFINED__
typedef interface WrapFormat WrapFormat;
#endif 	/* __WrapFormat_FWD_DEFINED__ */


#ifndef __HangulAndAlphabetExceptions_FWD_DEFINED__
#define __HangulAndAlphabetExceptions_FWD_DEFINED__
typedef interface HangulAndAlphabetExceptions HangulAndAlphabetExceptions;
#endif 	/* __HangulAndAlphabetExceptions_FWD_DEFINED__ */


#ifndef __HangulAndAlphabetException_FWD_DEFINED__
#define __HangulAndAlphabetException_FWD_DEFINED__
typedef interface HangulAndAlphabetException HangulAndAlphabetException;
#endif 	/* __HangulAndAlphabetException_FWD_DEFINED__ */


#ifndef __Adjustments_FWD_DEFINED__
#define __Adjustments_FWD_DEFINED__
typedef interface Adjustments Adjustments;
#endif 	/* __Adjustments_FWD_DEFINED__ */


#ifndef __CalloutFormat_FWD_DEFINED__
#define __CalloutFormat_FWD_DEFINED__
typedef interface CalloutFormat CalloutFormat;
#endif 	/* __CalloutFormat_FWD_DEFINED__ */


#ifndef __ColorFormat_FWD_DEFINED__
#define __ColorFormat_FWD_DEFINED__
typedef interface ColorFormat ColorFormat;
#endif 	/* __ColorFormat_FWD_DEFINED__ */


#ifndef __ConnectorFormat_FWD_DEFINED__
#define __ConnectorFormat_FWD_DEFINED__
typedef interface ConnectorFormat ConnectorFormat;
#endif 	/* __ConnectorFormat_FWD_DEFINED__ */


#ifndef __FillFormat_FWD_DEFINED__
#define __FillFormat_FWD_DEFINED__
typedef interface FillFormat FillFormat;
#endif 	/* __FillFormat_FWD_DEFINED__ */


#ifndef __FreeformBuilder_FWD_DEFINED__
#define __FreeformBuilder_FWD_DEFINED__
typedef interface FreeformBuilder FreeformBuilder;
#endif 	/* __FreeformBuilder_FWD_DEFINED__ */


#ifndef __LineFormat_FWD_DEFINED__
#define __LineFormat_FWD_DEFINED__
typedef interface LineFormat LineFormat;
#endif 	/* __LineFormat_FWD_DEFINED__ */


#ifndef __PictureFormat_FWD_DEFINED__
#define __PictureFormat_FWD_DEFINED__
typedef interface PictureFormat PictureFormat;
#endif 	/* __PictureFormat_FWD_DEFINED__ */


#ifndef __ShadowFormat_FWD_DEFINED__
#define __ShadowFormat_FWD_DEFINED__
typedef interface ShadowFormat ShadowFormat;
#endif 	/* __ShadowFormat_FWD_DEFINED__ */


#ifndef __ShapeNode_FWD_DEFINED__
#define __ShapeNode_FWD_DEFINED__
typedef interface ShapeNode ShapeNode;
#endif 	/* __ShapeNode_FWD_DEFINED__ */


#ifndef __ShapeNodes_FWD_DEFINED__
#define __ShapeNodes_FWD_DEFINED__
typedef interface ShapeNodes ShapeNodes;
#endif 	/* __ShapeNodes_FWD_DEFINED__ */


#ifndef __TextEffectFormat_FWD_DEFINED__
#define __TextEffectFormat_FWD_DEFINED__
typedef interface TextEffectFormat TextEffectFormat;
#endif 	/* __TextEffectFormat_FWD_DEFINED__ */


#ifndef __ThreeDFormat_FWD_DEFINED__
#define __ThreeDFormat_FWD_DEFINED__
typedef interface ThreeDFormat ThreeDFormat;
#endif 	/* __ThreeDFormat_FWD_DEFINED__ */


#ifndef __ApplicationEvents_FWD_DEFINED__
#define __ApplicationEvents_FWD_DEFINED__
typedef interface ApplicationEvents ApplicationEvents;
#endif 	/* __ApplicationEvents_FWD_DEFINED__ */


#ifndef __DocumentEvents_FWD_DEFINED__
#define __DocumentEvents_FWD_DEFINED__
typedef interface DocumentEvents DocumentEvents;
#endif 	/* __DocumentEvents_FWD_DEFINED__ */


#ifndef __OCXEvents_FWD_DEFINED__
#define __OCXEvents_FWD_DEFINED__
typedef interface OCXEvents OCXEvents;
#endif 	/* __OCXEvents_FWD_DEFINED__ */


#ifndef __IApplicationEvents_FWD_DEFINED__
#define __IApplicationEvents_FWD_DEFINED__
typedef interface IApplicationEvents IApplicationEvents;
#endif 	/* __IApplicationEvents_FWD_DEFINED__ */


#ifndef __IApplicationEvents2_FWD_DEFINED__
#define __IApplicationEvents2_FWD_DEFINED__
typedef interface IApplicationEvents2 IApplicationEvents2;
#endif 	/* __IApplicationEvents2_FWD_DEFINED__ */


#ifndef __ApplicationEvents2_FWD_DEFINED__
#define __ApplicationEvents2_FWD_DEFINED__
typedef interface ApplicationEvents2 ApplicationEvents2;
#endif 	/* __ApplicationEvents2_FWD_DEFINED__ */


#ifndef __EmailAuthor_FWD_DEFINED__
#define __EmailAuthor_FWD_DEFINED__
typedef interface EmailAuthor EmailAuthor;
#endif 	/* __EmailAuthor_FWD_DEFINED__ */


#ifndef __EmailOptions_FWD_DEFINED__
#define __EmailOptions_FWD_DEFINED__
typedef interface EmailOptions EmailOptions;
#endif 	/* __EmailOptions_FWD_DEFINED__ */


#ifndef __EmailSignature_FWD_DEFINED__
#define __EmailSignature_FWD_DEFINED__
typedef interface EmailSignature EmailSignature;
#endif 	/* __EmailSignature_FWD_DEFINED__ */


#ifndef __Email_FWD_DEFINED__
#define __Email_FWD_DEFINED__
typedef interface Email Email;
#endif 	/* __Email_FWD_DEFINED__ */


#ifndef __HorizontalLineFormat_FWD_DEFINED__
#define __HorizontalLineFormat_FWD_DEFINED__
typedef interface HorizontalLineFormat HorizontalLineFormat;
#endif 	/* __HorizontalLineFormat_FWD_DEFINED__ */


#ifndef __Frameset_FWD_DEFINED__
#define __Frameset_FWD_DEFINED__
typedef interface Frameset Frameset;
#endif 	/* __Frameset_FWD_DEFINED__ */


#ifndef __DefaultWebOptions_FWD_DEFINED__
#define __DefaultWebOptions_FWD_DEFINED__
typedef interface DefaultWebOptions DefaultWebOptions;
#endif 	/* __DefaultWebOptions_FWD_DEFINED__ */


#ifndef __WebOptions_FWD_DEFINED__
#define __WebOptions_FWD_DEFINED__
typedef interface WebOptions WebOptions;
#endif 	/* __WebOptions_FWD_DEFINED__ */


#ifndef __OtherCorrectionsExceptions_FWD_DEFINED__
#define __OtherCorrectionsExceptions_FWD_DEFINED__
typedef interface OtherCorrectionsExceptions OtherCorrectionsExceptions;
#endif 	/* __OtherCorrectionsExceptions_FWD_DEFINED__ */


#ifndef __OtherCorrectionsException_FWD_DEFINED__
#define __OtherCorrectionsException_FWD_DEFINED__
typedef interface OtherCorrectionsException OtherCorrectionsException;
#endif 	/* __OtherCorrectionsException_FWD_DEFINED__ */


#ifndef __EmailSignatureEntries_FWD_DEFINED__
#define __EmailSignatureEntries_FWD_DEFINED__
typedef interface EmailSignatureEntries EmailSignatureEntries;
#endif 	/* __EmailSignatureEntries_FWD_DEFINED__ */


#ifndef __EmailSignatureEntry_FWD_DEFINED__
#define __EmailSignatureEntry_FWD_DEFINED__
typedef interface EmailSignatureEntry EmailSignatureEntry;
#endif 	/* __EmailSignatureEntry_FWD_DEFINED__ */


#ifndef __HTMLDivision_FWD_DEFINED__
#define __HTMLDivision_FWD_DEFINED__
typedef interface HTMLDivision HTMLDivision;
#endif 	/* __HTMLDivision_FWD_DEFINED__ */


#ifndef __HTMLDivisions_FWD_DEFINED__
#define __HTMLDivisions_FWD_DEFINED__
typedef interface HTMLDivisions HTMLDivisions;
#endif 	/* __HTMLDivisions_FWD_DEFINED__ */


#ifndef __DiagramNode_FWD_DEFINED__
#define __DiagramNode_FWD_DEFINED__
typedef interface DiagramNode DiagramNode;
#endif 	/* __DiagramNode_FWD_DEFINED__ */


#ifndef __DiagramNodeChildren_FWD_DEFINED__
#define __DiagramNodeChildren_FWD_DEFINED__
typedef interface DiagramNodeChildren DiagramNodeChildren;
#endif 	/* __DiagramNodeChildren_FWD_DEFINED__ */


#ifndef __DiagramNodes_FWD_DEFINED__
#define __DiagramNodes_FWD_DEFINED__
typedef interface DiagramNodes DiagramNodes;
#endif 	/* __DiagramNodes_FWD_DEFINED__ */


#ifndef __Diagram_FWD_DEFINED__
#define __Diagram_FWD_DEFINED__
typedef interface Diagram Diagram;
#endif 	/* __Diagram_FWD_DEFINED__ */


#ifndef __CustomProperty_FWD_DEFINED__
#define __CustomProperty_FWD_DEFINED__
typedef interface CustomProperty CustomProperty;
#endif 	/* __CustomProperty_FWD_DEFINED__ */


#ifndef __CustomProperties_FWD_DEFINED__
#define __CustomProperties_FWD_DEFINED__
typedef interface CustomProperties CustomProperties;
#endif 	/* __CustomProperties_FWD_DEFINED__ */


#ifndef __SmartTag_FWD_DEFINED__
#define __SmartTag_FWD_DEFINED__
typedef interface SmartTag SmartTag;
#endif 	/* __SmartTag_FWD_DEFINED__ */


#ifndef __SmartTags_FWD_DEFINED__
#define __SmartTags_FWD_DEFINED__
typedef interface SmartTags SmartTags;
#endif 	/* __SmartTags_FWD_DEFINED__ */


#ifndef __StyleSheet_FWD_DEFINED__
#define __StyleSheet_FWD_DEFINED__
typedef interface StyleSheet StyleSheet;
#endif 	/* __StyleSheet_FWD_DEFINED__ */


#ifndef __StyleSheets_FWD_DEFINED__
#define __StyleSheets_FWD_DEFINED__
typedef interface StyleSheets StyleSheets;
#endif 	/* __StyleSheets_FWD_DEFINED__ */


#ifndef __MappedDataField_FWD_DEFINED__
#define __MappedDataField_FWD_DEFINED__
typedef interface MappedDataField MappedDataField;
#endif 	/* __MappedDataField_FWD_DEFINED__ */


#ifndef __MappedDataFields_FWD_DEFINED__
#define __MappedDataFields_FWD_DEFINED__
typedef interface MappedDataFields MappedDataFields;
#endif 	/* __MappedDataFields_FWD_DEFINED__ */


#ifndef __CanvasShapes_FWD_DEFINED__
#define __CanvasShapes_FWD_DEFINED__
typedef interface CanvasShapes CanvasShapes;
#endif 	/* __CanvasShapes_FWD_DEFINED__ */


#ifndef __TableStyle_FWD_DEFINED__
#define __TableStyle_FWD_DEFINED__
typedef interface TableStyle TableStyle;
#endif 	/* __TableStyle_FWD_DEFINED__ */


#ifndef __ConditionalStyle_FWD_DEFINED__
#define __ConditionalStyle_FWD_DEFINED__
typedef interface ConditionalStyle ConditionalStyle;
#endif 	/* __ConditionalStyle_FWD_DEFINED__ */


#ifndef __FootnoteOptions_FWD_DEFINED__
#define __FootnoteOptions_FWD_DEFINED__
typedef interface FootnoteOptions FootnoteOptions;
#endif 	/* __FootnoteOptions_FWD_DEFINED__ */


#ifndef __EndnoteOptions_FWD_DEFINED__
#define __EndnoteOptions_FWD_DEFINED__
typedef interface EndnoteOptions EndnoteOptions;
#endif 	/* __EndnoteOptions_FWD_DEFINED__ */


#ifndef __Reviewers_FWD_DEFINED__
#define __Reviewers_FWD_DEFINED__
typedef interface Reviewers Reviewers;
#endif 	/* __Reviewers_FWD_DEFINED__ */


#ifndef __Reviewer_FWD_DEFINED__
#define __Reviewer_FWD_DEFINED__
typedef interface Reviewer Reviewer;
#endif 	/* __Reviewer_FWD_DEFINED__ */


#ifndef __TaskPane_FWD_DEFINED__
#define __TaskPane_FWD_DEFINED__
typedef interface TaskPane TaskPane;
#endif 	/* __TaskPane_FWD_DEFINED__ */


#ifndef __TaskPanes_FWD_DEFINED__
#define __TaskPanes_FWD_DEFINED__
typedef interface TaskPanes TaskPanes;
#endif 	/* __TaskPanes_FWD_DEFINED__ */


#ifndef __IApplicationEvents3_FWD_DEFINED__
#define __IApplicationEvents3_FWD_DEFINED__
typedef interface IApplicationEvents3 IApplicationEvents3;
#endif 	/* __IApplicationEvents3_FWD_DEFINED__ */


#ifndef __ApplicationEvents3_FWD_DEFINED__
#define __ApplicationEvents3_FWD_DEFINED__
typedef interface ApplicationEvents3 ApplicationEvents3;
#endif 	/* __ApplicationEvents3_FWD_DEFINED__ */


#ifndef __SmartTagAction_FWD_DEFINED__
#define __SmartTagAction_FWD_DEFINED__
typedef interface SmartTagAction SmartTagAction;
#endif 	/* __SmartTagAction_FWD_DEFINED__ */


#ifndef __SmartTagActions_FWD_DEFINED__
#define __SmartTagActions_FWD_DEFINED__
typedef interface SmartTagActions SmartTagActions;
#endif 	/* __SmartTagActions_FWD_DEFINED__ */


#ifndef __SmartTagRecognizer_FWD_DEFINED__
#define __SmartTagRecognizer_FWD_DEFINED__
typedef interface SmartTagRecognizer SmartTagRecognizer;
#endif 	/* __SmartTagRecognizer_FWD_DEFINED__ */


#ifndef __SmartTagRecognizers_FWD_DEFINED__
#define __SmartTagRecognizers_FWD_DEFINED__
typedef interface SmartTagRecognizers SmartTagRecognizers;
#endif 	/* __SmartTagRecognizers_FWD_DEFINED__ */


#ifndef __SmartTagType_FWD_DEFINED__
#define __SmartTagType_FWD_DEFINED__
typedef interface SmartTagType SmartTagType;
#endif 	/* __SmartTagType_FWD_DEFINED__ */


#ifndef __SmartTagTypes_FWD_DEFINED__
#define __SmartTagTypes_FWD_DEFINED__
typedef interface SmartTagTypes SmartTagTypes;
#endif 	/* __SmartTagTypes_FWD_DEFINED__ */


#ifndef __Line_FWD_DEFINED__
#define __Line_FWD_DEFINED__
typedef interface Line Line;
#endif 	/* __Line_FWD_DEFINED__ */


#ifndef __Lines_FWD_DEFINED__
#define __Lines_FWD_DEFINED__
typedef interface Lines Lines;
#endif 	/* __Lines_FWD_DEFINED__ */


//#ifndef __Rectangle_FWD_DEFINED__
//#define __Rectangle_FWD_DEFINED__
//typedef interface Rectangle Rectangle;
//#endif 	/* __Rectangle_FWD_DEFINED__ */


#ifndef __Rectangles_FWD_DEFINED__
#define __Rectangles_FWD_DEFINED__
typedef interface Rectangles Rectangles;
#endif 	/* __Rectangles_FWD_DEFINED__ */


#ifndef __Break_FWD_DEFINED__
#define __Break_FWD_DEFINED__
typedef interface Break Break;
#endif 	/* __Break_FWD_DEFINED__ */


#ifndef __Breaks_FWD_DEFINED__
#define __Breaks_FWD_DEFINED__
typedef interface Breaks Breaks;
#endif 	/* __Breaks_FWD_DEFINED__ */


#ifndef __Page_FWD_DEFINED__
#define __Page_FWD_DEFINED__
typedef interface Page Page;
#endif 	/* __Page_FWD_DEFINED__ */


#ifndef __Pages_FWD_DEFINED__
#define __Pages_FWD_DEFINED__
typedef interface Pages Pages;
#endif 	/* __Pages_FWD_DEFINED__ */


#ifndef __XMLNode_FWD_DEFINED__
#define __XMLNode_FWD_DEFINED__
typedef interface XMLNode XMLNode;
#endif 	/* __XMLNode_FWD_DEFINED__ */


#ifndef __XMLNodes_FWD_DEFINED__
#define __XMLNodes_FWD_DEFINED__
typedef interface XMLNodes XMLNodes;
#endif 	/* __XMLNodes_FWD_DEFINED__ */


#ifndef __XMLSchemaReference_FWD_DEFINED__
#define __XMLSchemaReference_FWD_DEFINED__
typedef interface XMLSchemaReference XMLSchemaReference;
#endif 	/* __XMLSchemaReference_FWD_DEFINED__ */


#ifndef __XMLSchemaReferences_FWD_DEFINED__
#define __XMLSchemaReferences_FWD_DEFINED__
typedef interface XMLSchemaReferences XMLSchemaReferences;
#endif 	/* __XMLSchemaReferences_FWD_DEFINED__ */


#ifndef __XMLChildNodeSuggestion_FWD_DEFINED__
#define __XMLChildNodeSuggestion_FWD_DEFINED__
typedef interface XMLChildNodeSuggestion XMLChildNodeSuggestion;
#endif 	/* __XMLChildNodeSuggestion_FWD_DEFINED__ */


#ifndef __XMLChildNodeSuggestions_FWD_DEFINED__
#define __XMLChildNodeSuggestions_FWD_DEFINED__
typedef interface XMLChildNodeSuggestions XMLChildNodeSuggestions;
#endif 	/* __XMLChildNodeSuggestions_FWD_DEFINED__ */


#ifndef __XMLNamespace_FWD_DEFINED__
#define __XMLNamespace_FWD_DEFINED__
typedef interface XMLNamespace XMLNamespace;
#endif 	/* __XMLNamespace_FWD_DEFINED__ */


#ifndef __XMLNamespaces_FWD_DEFINED__
#define __XMLNamespaces_FWD_DEFINED__
typedef interface XMLNamespaces XMLNamespaces;
#endif 	/* __XMLNamespaces_FWD_DEFINED__ */


#ifndef __XSLTransform_FWD_DEFINED__
#define __XSLTransform_FWD_DEFINED__
typedef interface XSLTransform XSLTransform;
#endif 	/* __XSLTransform_FWD_DEFINED__ */


#ifndef __XSLTransforms_FWD_DEFINED__
#define __XSLTransforms_FWD_DEFINED__
typedef interface XSLTransforms XSLTransforms;
#endif 	/* __XSLTransforms_FWD_DEFINED__ */


#ifndef __Editors_FWD_DEFINED__
#define __Editors_FWD_DEFINED__
typedef interface Editors Editors;
#endif 	/* __Editors_FWD_DEFINED__ */


#ifndef __Editor_FWD_DEFINED__
#define __Editor_FWD_DEFINED__
typedef interface Editor Editor;
#endif 	/* __Editor_FWD_DEFINED__ */


#ifndef __IApplicationEvents4_FWD_DEFINED__
#define __IApplicationEvents4_FWD_DEFINED__
typedef interface IApplicationEvents4 IApplicationEvents4;
#endif 	/* __IApplicationEvents4_FWD_DEFINED__ */


#ifndef __ApplicationEvents4_FWD_DEFINED__
#define __ApplicationEvents4_FWD_DEFINED__
typedef interface ApplicationEvents4 ApplicationEvents4;
#endif 	/* __ApplicationEvents4_FWD_DEFINED__ */


#ifndef __DocumentEvents2_FWD_DEFINED__
#define __DocumentEvents2_FWD_DEFINED__
typedef interface DocumentEvents2 DocumentEvents2;
#endif 	/* __DocumentEvents2_FWD_DEFINED__ */


#ifndef __Global_FWD_DEFINED__
#define __Global_FWD_DEFINED__

#ifdef __cplusplus
typedef class Global Global;
#else
typedef struct Global Global;
#endif /* __cplusplus */

#endif 	/* __Global_FWD_DEFINED__ */


#ifndef __Application_FWD_DEFINED__
#define __Application_FWD_DEFINED__

#ifdef __cplusplus
typedef class Application Application;
#else
typedef struct Application Application;
#endif /* __cplusplus */

#endif 	/* __Application_FWD_DEFINED__ */


#ifndef __Document_FWD_DEFINED__
#define __Document_FWD_DEFINED__

#ifdef __cplusplus
typedef class Document Document;
#else
typedef struct Document Document;
#endif /* __cplusplus */

#endif 	/* __Document_FWD_DEFINED__ */


#ifndef __Font_FWD_DEFINED__
#define __Font_FWD_DEFINED__

#ifdef __cplusplus
typedef class Font Font;
#else
typedef struct Font Font;
#endif /* __cplusplus */

#endif 	/* __Font_FWD_DEFINED__ */


#ifndef __ParagraphFormat_FWD_DEFINED__
#define __ParagraphFormat_FWD_DEFINED__

#ifdef __cplusplus
typedef class ParagraphFormat ParagraphFormat;
#else
typedef struct ParagraphFormat ParagraphFormat;
#endif /* __cplusplus */

#endif 	/* __ParagraphFormat_FWD_DEFINED__ */


#ifndef __OLEControl_FWD_DEFINED__
#define __OLEControl_FWD_DEFINED__

#ifdef __cplusplus
typedef class OLEControl OLEControl;
#else
typedef struct OLEControl OLEControl;
#endif /* __cplusplus */

#endif 	/* __OLEControl_FWD_DEFINED__ */


#ifndef __LetterContent_FWD_DEFINED__
#define __LetterContent_FWD_DEFINED__

#ifdef __cplusplus
typedef class LetterContent LetterContent;
#else
typedef struct LetterContent LetterContent;
#endif /* __cplusplus */

#endif 	/* __LetterContent_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 



#ifndef __Word_LIBRARY_DEFINED__
#define __Word_LIBRARY_DEFINED__

/* library Word */
/* [helpcontext][helpfile][helpstring][version][uuid] */ 



































































































































































































































































typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0001
    {	wdNoMailSystem	= 0,
	wdMAPI	= 1,
	wdPowerTalk	= 2,
	wdMAPIandPowerTalk	= 3
    } 	WdMailSystem;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0002
    {	wdNormalTemplate	= 0,
	wdGlobalTemplate	= 1,
	wdAttachedTemplate	= 2
    } 	WdTemplateType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0003
    {	wdContinueDisabled	= 0,
	wdResetList	= 1,
	wdContinueList	= 2
    } 	WdContinue;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0004
    {	wdIMEModeNoControl	= 0,
	wdIMEModeOn	= 1,
	wdIMEModeOff	= 2,
	wdIMEModeHiragana	= 4,
	wdIMEModeKatakana	= 5,
	wdIMEModeKatakanaHalf	= 6,
	wdIMEModeAlphaFull	= 7,
	wdIMEModeAlpha	= 8,
	wdIMEModeHangulFull	= 9,
	wdIMEModeHangul	= 10
    } 	WdIMEMode;

typedef /* [public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0005
    {	wdBaselineAlignTop	= 0,
	wdBaselineAlignCenter	= 1,
	wdBaselineAlignBaseline	= 2,
	wdBaselineAlignFarEast50	= 3,
	wdBaselineAlignAuto	= 4
    } 	WdBaselineAlignment;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0006
    {	wdIndexFilterNone	= 0,
	wdIndexFilterAiueo	= 1,
	wdIndexFilterAkasatana	= 2,
	wdIndexFilterChosung	= 3,
	wdIndexFilterLow	= 4,
	wdIndexFilterMedium	= 5,
	wdIndexFilterFull	= 6
    } 	WdIndexFilter;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0007
    {	wdIndexSortByStroke	= 0,
	wdIndexSortBySyllable	= 1
    } 	WdIndexSortBy;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0008
    {	wdJustificationModeExpand	= 0,
	wdJustificationModeCompress	= 1,
	wdJustificationModeCompressKana	= 2
    } 	WdJustificationMode;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0009
    {	wdFarEastLineBreakLevelNormal	= 0,
	wdFarEastLineBreakLevelStrict	= 1,
	wdFarEastLineBreakLevelCustom	= 2
    } 	WdFarEastLineBreakLevel;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0010
    {	wdHangulToHanja	= 0,
	wdHanjaToHangul	= 1
    } 	WdMultipleWordConversionsMode;

typedef /* [public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0011
    {	wdAuto	= 0,
	wdBlack	= 1,
	wdBlue	= 2,
	wdTurquoise	= 3,
	wdBrightGreen	= 4,
	wdPink	= 5,
	wdRed	= 6,
	wdYellow	= 7,
	wdWhite	= 8,
	wdDarkBlue	= 9,
	wdTeal	= 10,
	wdGreen	= 11,
	wdViolet	= 12,
	wdDarkRed	= 13,
	wdDarkYellow	= 14,
	wdGray50	= 15,
	wdGray25	= 16,
	wdByAuthor	= 0xffffffff,
	wdNoHighlight	= 0
    } 	WdColorIndex;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0012
    {	wdTextureNone	= 0,
	wdTexture2Pt5Percent	= 25,
	wdTexture5Percent	= 50,
	wdTexture7Pt5Percent	= 75,
	wdTexture10Percent	= 100,
	wdTexture12Pt5Percent	= 125,
	wdTexture15Percent	= 150,
	wdTexture17Pt5Percent	= 175,
	wdTexture20Percent	= 200,
	wdTexture22Pt5Percent	= 225,
	wdTexture25Percent	= 250,
	wdTexture27Pt5Percent	= 275,
	wdTexture30Percent	= 300,
	wdTexture32Pt5Percent	= 325,
	wdTexture35Percent	= 350,
	wdTexture37Pt5Percent	= 375,
	wdTexture40Percent	= 400,
	wdTexture42Pt5Percent	= 425,
	wdTexture45Percent	= 450,
	wdTexture47Pt5Percent	= 475,
	wdTexture50Percent	= 500,
	wdTexture52Pt5Percent	= 525,
	wdTexture55Percent	= 550,
	wdTexture57Pt5Percent	= 575,
	wdTexture60Percent	= 600,
	wdTexture62Pt5Percent	= 625,
	wdTexture65Percent	= 650,
	wdTexture67Pt5Percent	= 675,
	wdTexture70Percent	= 700,
	wdTexture72Pt5Percent	= 725,
	wdTexture75Percent	= 750,
	wdTexture77Pt5Percent	= 775,
	wdTexture80Percent	= 800,
	wdTexture82Pt5Percent	= 825,
	wdTexture85Percent	= 850,
	wdTexture87Pt5Percent	= 875,
	wdTexture90Percent	= 900,
	wdTexture92Pt5Percent	= 925,
	wdTexture95Percent	= 950,
	wdTexture97Pt5Percent	= 975,
	wdTextureSolid	= 1000,
	wdTextureDarkHorizontal	= 0xffffffff,
	wdTextureDarkVertical	= 0xfffffffe,
	wdTextureDarkDiagonalDown	= 0xfffffffd,
	wdTextureDarkDiagonalUp	= 0xfffffffc,
	wdTextureDarkCross	= 0xfffffffb,
	wdTextureDarkDiagonalCross	= 0xfffffffa,
	wdTextureHorizontal	= 0xfffffff9,
	wdTextureVertical	= 0xfffffff8,
	wdTextureDiagonalDown	= 0xfffffff7,
	wdTextureDiagonalUp	= 0xfffffff6,
	wdTextureCross	= 0xfffffff5,
	wdTextureDiagonalCross	= 0xfffffff4
    } 	WdTextureIndex;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0013
    {	wdUnderlineNone	= 0,
	wdUnderlineSingle	= 1,
	wdUnderlineWords	= 2,
	wdUnderlineDouble	= 3,
	wdUnderlineDotted	= 4,
	wdUnderlineThick	= 6,
	wdUnderlineDash	= 7,
	wdUnderlineDotDash	= 9,
	wdUnderlineDotDotDash	= 10,
	wdUnderlineWavy	= 11,
	wdUnderlineWavyHeavy	= 27,
	wdUnderlineDottedHeavy	= 20,
	wdUnderlineDashHeavy	= 23,
	wdUnderlineDotDashHeavy	= 25,
	wdUnderlineDotDotDashHeavy	= 26,
	wdUnderlineDashLong	= 39,
	wdUnderlineDashLongHeavy	= 55,
	wdUnderlineWavyDouble	= 43
    } 	WdUnderline;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0014
    {	wdEmphasisMarkNone	= 0,
	wdEmphasisMarkOverSolidCircle	= 1,
	wdEmphasisMarkOverComma	= 2,
	wdEmphasisMarkOverWhiteCircle	= 3,
	wdEmphasisMarkUnderSolidCircle	= 4
    } 	WdEmphasisMark;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0015
    {	wdListSeparator	= 17,
	wdDecimalSeparator	= 18,
	wdThousandsSeparator	= 19,
	wdCurrencyCode	= 20,
	wd24HourClock	= 21,
	wdInternationalAM	= 22,
	wdInternationalPM	= 23,
	wdTimeSeparator	= 24,
	wdDateSeparator	= 25,
	wdProductLanguageID	= 26
    } 	WdInternationalIndex;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0016
    {	wdAutoExec	= 0,
	wdAutoNew	= 1,
	wdAutoOpen	= 2,
	wdAutoClose	= 3,
	wdAutoExit	= 4,
	wdAutoSync	= 5
    } 	WdAutoMacros;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0017
    {	wdCaptionPositionAbove	= 0,
	wdCaptionPositionBelow	= 1
    } 	WdCaptionPosition;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0018
    {	wdUS	= 1,
	wdCanada	= 2,
	wdLatinAmerica	= 3,
	wdNetherlands	= 31,
	wdFrance	= 33,
	wdSpain	= 34,
	wdItaly	= 39,
	wdUK	= 44,
	wdDenmark	= 45,
	wdSweden	= 46,
	wdNorway	= 47,
	wdGermany	= 49,
	wdPeru	= 51,
	wdMexico	= 52,
	wdArgentina	= 54,
	wdBrazil	= 55,
	wdChile	= 56,
	wdVenezuela	= 58,
	wdJapan	= 81,
	wdTaiwan	= 886,
	wdChina	= 86,
	wdKorea	= 82,
	wdFinland	= 358,
	wdIceland	= 354
    } 	WdCountry;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0019
    {	wdHeadingSeparatorNone	= 0,
	wdHeadingSeparatorBlankLine	= 1,
	wdHeadingSeparatorLetter	= 2,
	wdHeadingSeparatorLetterLow	= 3,
	wdHeadingSeparatorLetterFull	= 4
    } 	WdHeadingSeparator;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0020
    {	wdSeparatorHyphen	= 0,
	wdSeparatorPeriod	= 1,
	wdSeparatorColon	= 2,
	wdSeparatorEmDash	= 3,
	wdSeparatorEnDash	= 4
    } 	WdSeparatorType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0021
    {	wdAlignPageNumberLeft	= 0,
	wdAlignPageNumberCenter	= 1,
	wdAlignPageNumberRight	= 2,
	wdAlignPageNumberInside	= 3,
	wdAlignPageNumberOutside	= 4
    } 	WdPageNumberAlignment;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0022
    {	wdBorderTop	= 0xffffffff,
	wdBorderLeft	= 0xfffffffe,
	wdBorderBottom	= 0xfffffffd,
	wdBorderRight	= 0xfffffffc,
	wdBorderHorizontal	= 0xfffffffb,
	wdBorderVertical	= 0xfffffffa,
	wdBorderDiagonalDown	= 0xfffffff9,
	wdBorderDiagonalUp	= 0xfffffff8
    } 	WdBorderType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0023
    {	wdFrameTop	= 0xfff0bdc1,
	wdFrameLeft	= 0xfff0bdc2,
	wdFrameBottom	= 0xfff0bdc3,
	wdFrameRight	= 0xfff0bdc4,
	wdFrameCenter	= 0xfff0bdc5,
	wdFrameInside	= 0xfff0bdc6,
	wdFrameOutside	= 0xfff0bdc7
    } 	WdFramePosition;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0024
    {	wdAnimationNone	= 0,
	wdAnimationLasVegasLights	= 1,
	wdAnimationBlinkingBackground	= 2,
	wdAnimationSparkleText	= 3,
	wdAnimationMarchingBlackAnts	= 4,
	wdAnimationMarchingRedAnts	= 5,
	wdAnimationShimmer	= 6
    } 	WdAnimation;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0025
    {	wdNextCase	= 0xffffffff,
	wdLowerCase	= 0,
	wdUpperCase	= 1,
	wdTitleWord	= 2,
	wdTitleSentence	= 4,
	wdToggleCase	= 5,
	wdHalfWidth	= 6,
	wdFullWidth	= 7,
	wdKatakana	= 8,
	wdHiragana	= 9
    } 	WdCharacterCase;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0026
    {	wdSummaryModeHighlight	= 0,
	wdSummaryModeHideAllButSummary	= 1,
	wdSummaryModeInsert	= 2,
	wdSummaryModeCreateNew	= 3
    } 	WdSummaryMode;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0027
    {	wd10Sentences	= 0xfffffffe,
	wd20Sentences	= 0xfffffffd,
	wd100Words	= 0xfffffffc,
	wd500Words	= 0xfffffffb,
	wd10Percent	= 0xfffffffa,
	wd25Percent	= 0xfffffff9,
	wd50Percent	= 0xfffffff8,
	wd75Percent	= 0xfffffff7
    } 	WdSummaryLength;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0028
    {	wdStyleTypeParagraph	= 1,
	wdStyleTypeCharacter	= 2,
	wdStyleTypeTable	= 3,
	wdStyleTypeList	= 4
    } 	WdStyleType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0029
    {	wdCharacter	= 1,
	wdWord	= 2,
	wdSentence	= 3,
	wdParagraph	= 4,
	wdLine	= 5,
	wdStory	= 6,
	wdScreen	= 7,
	wdSection	= 8,
	wdColumn	= 9,
	wdRow	= 10,
	wdWindow	= 11,
	wdCell	= 12,
	wdCharacterFormatting	= 13,
	wdParagraphFormatting	= 14,
	wdTable	= 15,
	wdItem	= 16
    } 	WdUnits;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0030
    {	wdGoToBookmark	= 0xffffffff,
	wdGoToSection	= 0,
	wdGoToPage	= 1,
	wdGoToTable	= 2,
	wdGoToLine	= 3,
	wdGoToFootnote	= 4,
	wdGoToEndnote	= 5,
	wdGoToComment	= 6,
	wdGoToField	= 7,
	wdGoToGraphic	= 8,
	wdGoToObject	= 9,
	wdGoToEquation	= 10,
	wdGoToHeading	= 11,
	wdGoToPercent	= 12,
	wdGoToSpellingError	= 13,
	wdGoToGrammaticalError	= 14,
	wdGoToProofreadingError	= 15
    } 	WdGoToItem;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0031
    {	wdGoToFirst	= 1,
	wdGoToLast	= 0xffffffff,
	wdGoToNext	= 2,
	wdGoToRelative	= 2,
	wdGoToPrevious	= 3,
	wdGoToAbsolute	= 1
    } 	WdGoToDirection;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0032
    {	wdCollapseStart	= 1,
	wdCollapseEnd	= 0
    } 	WdCollapseDirection;

typedef /* [public][public][public][public][public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0033
    {	wdRowHeightAuto	= 0,
	wdRowHeightAtLeast	= 1,
	wdRowHeightExactly	= 2
    } 	WdRowHeightRule;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0034
    {	wdFrameAuto	= 0,
	wdFrameAtLeast	= 1,
	wdFrameExact	= 2
    } 	WdFrameSizeRule;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0035
    {	wdInsertCellsShiftRight	= 0,
	wdInsertCellsShiftDown	= 1,
	wdInsertCellsEntireRow	= 2,
	wdInsertCellsEntireColumn	= 3
    } 	WdInsertCells;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0036
    {	wdDeleteCellsShiftLeft	= 0,
	wdDeleteCellsShiftUp	= 1,
	wdDeleteCellsEntireRow	= 2,
	wdDeleteCellsEntireColumn	= 3
    } 	WdDeleteCells;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0037
    {	wdListApplyToWholeList	= 0,
	wdListApplyToThisPointForward	= 1,
	wdListApplyToSelection	= 2
    } 	WdListApplyTo;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0038
    {	wdAlertsNone	= 0,
	wdAlertsMessageBox	= 0xfffffffe,
	wdAlertsAll	= 0xffffffff
    } 	WdAlertLevel;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0039
    {	wdCursorWait	= 0,
	wdCursorIBeam	= 1,
	wdCursorNormal	= 2,
	wdCursorNorthwestArrow	= 3
    } 	WdCursorType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0040
    {	wdCancelDisabled	= 0,
	wdCancelInterrupt	= 1
    } 	WdEnableCancelKey;

typedef /* [public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0041
    {	wdAdjustNone	= 0,
	wdAdjustProportional	= 1,
	wdAdjustFirstColumn	= 2,
	wdAdjustSameWidth	= 3
    } 	WdRulerStyle;

typedef /* [public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0042
    {	wdAlignParagraphLeft	= 0,
	wdAlignParagraphCenter	= 1,
	wdAlignParagraphRight	= 2,
	wdAlignParagraphJustify	= 3,
	wdAlignParagraphDistribute	= 4,
	wdAlignParagraphJustifyMed	= 5,
	wdAlignParagraphJustifyHi	= 7,
	wdAlignParagraphJustifyLow	= 8,
	wdAlignParagraphThaiJustify	= 9
    } 	WdParagraphAlignment;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0043
    {	wdListLevelAlignLeft	= 0,
	wdListLevelAlignCenter	= 1,
	wdListLevelAlignRight	= 2
    } 	WdListLevelAlignment;

typedef /* [public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0044
    {	wdAlignRowLeft	= 0,
	wdAlignRowCenter	= 1,
	wdAlignRowRight	= 2
    } 	WdRowAlignment;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0045
    {	wdAlignTabLeft	= 0,
	wdAlignTabCenter	= 1,
	wdAlignTabRight	= 2,
	wdAlignTabDecimal	= 3,
	wdAlignTabBar	= 4,
	wdAlignTabList	= 6
    } 	WdTabAlignment;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0046
    {	wdAlignVerticalTop	= 0,
	wdAlignVerticalCenter	= 1,
	wdAlignVerticalJustify	= 2,
	wdAlignVerticalBottom	= 3
    } 	WdVerticalAlignment;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0047
    {	wdCellAlignVerticalTop	= 0,
	wdCellAlignVerticalCenter	= 1,
	wdCellAlignVerticalBottom	= 3
    } 	WdCellVerticalAlignment;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0048
    {	wdTrailingTab	= 0,
	wdTrailingSpace	= 1,
	wdTrailingNone	= 2
    } 	WdTrailingCharacter;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0049
    {	wdBulletGallery	= 1,
	wdNumberGallery	= 2,
	wdOutlineNumberGallery	= 3
    } 	WdListGalleryType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0050
    {	wdListNumberStyleArabic	= 0,
	wdListNumberStyleUppercaseRoman	= 1,
	wdListNumberStyleLowercaseRoman	= 2,
	wdListNumberStyleUppercaseLetter	= 3,
	wdListNumberStyleLowercaseLetter	= 4,
	wdListNumberStyleOrdinal	= 5,
	wdListNumberStyleCardinalText	= 6,
	wdListNumberStyleOrdinalText	= 7,
	wdListNumberStyleKanji	= 10,
	wdListNumberStyleKanjiDigit	= 11,
	wdListNumberStyleAiueoHalfWidth	= 12,
	wdListNumberStyleIrohaHalfWidth	= 13,
	wdListNumberStyleArabicFullWidth	= 14,
	wdListNumberStyleKanjiTraditional	= 16,
	wdListNumberStyleKanjiTraditional2	= 17,
	wdListNumberStyleNumberInCircle	= 18,
	wdListNumberStyleAiueo	= 20,
	wdListNumberStyleIroha	= 21,
	wdListNumberStyleArabicLZ	= 22,
	wdListNumberStyleBullet	= 23,
	wdListNumberStyleGanada	= 24,
	wdListNumberStyleChosung	= 25,
	wdListNumberStyleGBNum1	= 26,
	wdListNumberStyleGBNum2	= 27,
	wdListNumberStyleGBNum3	= 28,
	wdListNumberStyleGBNum4	= 29,
	wdListNumberStyleZodiac1	= 30,
	wdListNumberStyleZodiac2	= 31,
	wdListNumberStyleZodiac3	= 32,
	wdListNumberStyleTradChinNum1	= 33,
	wdListNumberStyleTradChinNum2	= 34,
	wdListNumberStyleTradChinNum3	= 35,
	wdListNumberStyleTradChinNum4	= 36,
	wdListNumberStyleSimpChinNum1	= 37,
	wdListNumberStyleSimpChinNum2	= 38,
	wdListNumberStyleSimpChinNum3	= 39,
	wdListNumberStyleSimpChinNum4	= 40,
	wdListNumberStyleHanjaRead	= 41,
	wdListNumberStyleHanjaReadDigit	= 42,
	wdListNumberStyleHangul	= 43,
	wdListNumberStyleHanja	= 44,
	wdListNumberStyleHebrew1	= 45,
	wdListNumberStyleArabic1	= 46,
	wdListNumberStyleHebrew2	= 47,
	wdListNumberStyleArabic2	= 48,
	wdListNumberStyleHindiLetter1	= 49,
	wdListNumberStyleHindiLetter2	= 50,
	wdListNumberStyleHindiArabic	= 51,
	wdListNumberStyleHindiCardinalText	= 52,
	wdListNumberStyleThaiLetter	= 53,
	wdListNumberStyleThaiArabic	= 54,
	wdListNumberStyleThaiCardinalText	= 55,
	wdListNumberStyleVietCardinalText	= 56,
	wdListNumberStyleLowercaseRussian	= 58,
	wdListNumberStyleUppercaseRussian	= 59,
	wdListNumberStylePictureBullet	= 249,
	wdListNumberStyleLegal	= 253,
	wdListNumberStyleLegalLZ	= 254,
	wdListNumberStyleNone	= 255
    } 	WdListNumberStyle;

typedef /* [public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0051
    {	wdNoteNumberStyleArabic	= 0,
	wdNoteNumberStyleUppercaseRoman	= 1,
	wdNoteNumberStyleLowercaseRoman	= 2,
	wdNoteNumberStyleUppercaseLetter	= 3,
	wdNoteNumberStyleLowercaseLetter	= 4,
	wdNoteNumberStyleSymbol	= 9,
	wdNoteNumberStyleArabicFullWidth	= 14,
	wdNoteNumberStyleKanji	= 10,
	wdNoteNumberStyleKanjiDigit	= 11,
	wdNoteNumberStyleKanjiTraditional	= 16,
	wdNoteNumberStyleNumberInCircle	= 18,
	wdNoteNumberStyleHanjaRead	= 41,
	wdNoteNumberStyleHanjaReadDigit	= 42,
	wdNoteNumberStyleTradChinNum1	= 33,
	wdNoteNumberStyleTradChinNum2	= 34,
	wdNoteNumberStyleSimpChinNum1	= 37,
	wdNoteNumberStyleSimpChinNum2	= 38,
	wdNoteNumberStyleHebrewLetter1	= 45,
	wdNoteNumberStyleArabicLetter1	= 46,
	wdNoteNumberStyleHebrewLetter2	= 47,
	wdNoteNumberStyleArabicLetter2	= 48,
	wdNoteNumberStyleHindiLetter1	= 49,
	wdNoteNumberStyleHindiLetter2	= 50,
	wdNoteNumberStyleHindiArabic	= 51,
	wdNoteNumberStyleHindiCardinalText	= 52,
	wdNoteNumberStyleThaiLetter	= 53,
	wdNoteNumberStyleThaiArabic	= 54,
	wdNoteNumberStyleThaiCardinalText	= 55,
	wdNoteNumberStyleVietCardinalText	= 56
    } 	WdNoteNumberStyle;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0052
    {	wdCaptionNumberStyleArabic	= 0,
	wdCaptionNumberStyleUppercaseRoman	= 1,
	wdCaptionNumberStyleLowercaseRoman	= 2,
	wdCaptionNumberStyleUppercaseLetter	= 3,
	wdCaptionNumberStyleLowercaseLetter	= 4,
	wdCaptionNumberStyleArabicFullWidth	= 14,
	wdCaptionNumberStyleKanji	= 10,
	wdCaptionNumberStyleKanjiDigit	= 11,
	wdCaptionNumberStyleKanjiTraditional	= 16,
	wdCaptionNumberStyleNumberInCircle	= 18,
	wdCaptionNumberStyleGanada	= 24,
	wdCaptionNumberStyleChosung	= 25,
	wdCaptionNumberStyleZodiac1	= 30,
	wdCaptionNumberStyleZodiac2	= 31,
	wdCaptionNumberStyleHanjaRead	= 41,
	wdCaptionNumberStyleHanjaReadDigit	= 42,
	wdCaptionNumberStyleTradChinNum2	= 34,
	wdCaptionNumberStyleTradChinNum3	= 35,
	wdCaptionNumberStyleSimpChinNum2	= 38,
	wdCaptionNumberStyleSimpChinNum3	= 39,
	wdCaptionNumberStyleHebrewLetter1	= 45,
	wdCaptionNumberStyleArabicLetter1	= 46,
	wdCaptionNumberStyleHebrewLetter2	= 47,
	wdCaptionNumberStyleArabicLetter2	= 48,
	wdCaptionNumberStyleHindiLetter1	= 49,
	wdCaptionNumberStyleHindiLetter2	= 50,
	wdCaptionNumberStyleHindiArabic	= 51,
	wdCaptionNumberStyleHindiCardinalText	= 52,
	wdCaptionNumberStyleThaiLetter	= 53,
	wdCaptionNumberStyleThaiArabic	= 54,
	wdCaptionNumberStyleThaiCardinalText	= 55,
	wdCaptionNumberStyleVietCardinalText	= 56
    } 	WdCaptionNumberStyle;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0053
    {	wdPageNumberStyleArabic	= 0,
	wdPageNumberStyleUppercaseRoman	= 1,
	wdPageNumberStyleLowercaseRoman	= 2,
	wdPageNumberStyleUppercaseLetter	= 3,
	wdPageNumberStyleLowercaseLetter	= 4,
	wdPageNumberStyleArabicFullWidth	= 14,
	wdPageNumberStyleKanji	= 10,
	wdPageNumberStyleKanjiDigit	= 11,
	wdPageNumberStyleKanjiTraditional	= 16,
	wdPageNumberStyleNumberInCircle	= 18,
	wdPageNumberStyleHanjaRead	= 41,
	wdPageNumberStyleHanjaReadDigit	= 42,
	wdPageNumberStyleTradChinNum1	= 33,
	wdPageNumberStyleTradChinNum2	= 34,
	wdPageNumberStyleSimpChinNum1	= 37,
	wdPageNumberStyleSimpChinNum2	= 38,
	wdPageNumberStyleHebrewLetter1	= 45,
	wdPageNumberStyleArabicLetter1	= 46,
	wdPageNumberStyleHebrewLetter2	= 47,
	wdPageNumberStyleArabicLetter2	= 48,
	wdPageNumberStyleHindiLetter1	= 49,
	wdPageNumberStyleHindiLetter2	= 50,
	wdPageNumberStyleHindiArabic	= 51,
	wdPageNumberStyleHindiCardinalText	= 52,
	wdPageNumberStyleThaiLetter	= 53,
	wdPageNumberStyleThaiArabic	= 54,
	wdPageNumberStyleThaiCardinalText	= 55,
	wdPageNumberStyleVietCardinalText	= 56,
	wdPageNumberStyleNumberInDash	= 57
    } 	WdPageNumberStyle;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0054
    {	wdStatisticWords	= 0,
	wdStatisticLines	= 1,
	wdStatisticPages	= 2,
	wdStatisticCharacters	= 3,
	wdStatisticParagraphs	= 4,
	wdStatisticCharactersWithSpaces	= 5,
	wdStatisticFarEastCharacters	= 6
    } 	WdStatistic;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0055
    {	wdPropertyTitle	= 1,
	wdPropertySubject	= 2,
	wdPropertyAuthor	= 3,
	wdPropertyKeywords	= 4,
	wdPropertyComments	= 5,
	wdPropertyTemplate	= 6,
	wdPropertyLastAuthor	= 7,
	wdPropertyRevision	= 8,
	wdPropertyAppName	= 9,
	wdPropertyTimeLastPrinted	= 10,
	wdPropertyTimeCreated	= 11,
	wdPropertyTimeLastSaved	= 12,
	wdPropertyVBATotalEdit	= 13,
	wdPropertyPages	= 14,
	wdPropertyWords	= 15,
	wdPropertyCharacters	= 16,
	wdPropertySecurity	= 17,
	wdPropertyCategory	= 18,
	wdPropertyFormat	= 19,
	wdPropertyManager	= 20,
	wdPropertyCompany	= 21,
	wdPropertyBytes	= 22,
	wdPropertyLines	= 23,
	wdPropertyParas	= 24,
	wdPropertySlides	= 25,
	wdPropertyNotes	= 26,
	wdPropertyHiddenSlides	= 27,
	wdPropertyMMClips	= 28,
	wdPropertyHyperlinkBase	= 29,
	wdPropertyCharsWSpaces	= 30
    } 	WdBuiltInProperty;

typedef /* [public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0056
    {	wdLineSpaceSingle	= 0,
	wdLineSpace1pt5	= 1,
	wdLineSpaceDouble	= 2,
	wdLineSpaceAtLeast	= 3,
	wdLineSpaceExactly	= 4,
	wdLineSpaceMultiple	= 5
    } 	WdLineSpacing;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0057
    {	wdNumberParagraph	= 1,
	wdNumberListNum	= 2,
	wdNumberAllNumbers	= 3
    } 	WdNumberType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0058
    {	wdListNoNumbering	= 0,
	wdListListNumOnly	= 1,
	wdListBullet	= 2,
	wdListSimpleNumbering	= 3,
	wdListOutlineNumbering	= 4,
	wdListMixedNumbering	= 5,
	wdListPictureBullet	= 6
    } 	WdListType;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0059
    {	wdMainTextStory	= 1,
	wdFootnotesStory	= 2,
	wdEndnotesStory	= 3,
	wdCommentsStory	= 4,
	wdTextFrameStory	= 5,
	wdEvenPagesHeaderStory	= 6,
	wdPrimaryHeaderStory	= 7,
	wdEvenPagesFooterStory	= 8,
	wdPrimaryFooterStory	= 9,
	wdFirstPageHeaderStory	= 10,
	wdFirstPageFooterStory	= 11,
	wdFootnoteSeparatorStory	= 12,
	wdFootnoteContinuationSeparatorStory	= 13,
	wdFootnoteContinuationNoticeStory	= 14,
	wdEndnoteSeparatorStory	= 15,
	wdEndnoteContinuationSeparatorStory	= 16,
	wdEndnoteContinuationNoticeStory	= 17
    } 	WdStoryType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0060
    {	wdFormatDocument	= 0,
	wdFormatTemplate	= 1,
	wdFormatText	= 2,
	wdFormatTextLineBreaks	= 3,
	wdFormatDOSText	= 4,
	wdFormatDOSTextLineBreaks	= 5,
	wdFormatRTF	= 6,
	wdFormatUnicodeText	= 7,
	wdFormatEncodedText	= 7,
	wdFormatHTML	= 8,
	wdFormatWebArchive	= 9,
	wdFormatFilteredHTML	= 10,
	wdFormatXML	= 11
    } 	WdSaveFormat;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0061
    {	wdOpenFormatAuto	= 0,
	wdOpenFormatDocument	= 1,
	wdOpenFormatTemplate	= 2,
	wdOpenFormatRTF	= 3,
	wdOpenFormatText	= 4,
	wdOpenFormatUnicodeText	= 5,
	wdOpenFormatEncodedText	= 5,
	wdOpenFormatAllWord	= 6,
	wdOpenFormatWebPages	= 7,
	wdOpenFormatXML	= 8
    } 	WdOpenFormat;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0062
    {	wdHeaderFooterPrimary	= 1,
	wdHeaderFooterFirstPage	= 2,
	wdHeaderFooterEvenPages	= 3
    } 	WdHeaderFooterIndex;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0063
    {	wdTOCTemplate	= 0,
	wdTOCClassic	= 1,
	wdTOCDistinctive	= 2,
	wdTOCFancy	= 3,
	wdTOCModern	= 4,
	wdTOCFormal	= 5,
	wdTOCSimple	= 6
    } 	WdTocFormat;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0064
    {	wdTOFTemplate	= 0,
	wdTOFClassic	= 1,
	wdTOFDistinctive	= 2,
	wdTOFCentered	= 3,
	wdTOFFormal	= 4,
	wdTOFSimple	= 5
    } 	WdTofFormat;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0065
    {	wdTOATemplate	= 0,
	wdTOAClassic	= 1,
	wdTOADistinctive	= 2,
	wdTOAFormal	= 3,
	wdTOASimple	= 4
    } 	WdToaFormat;

typedef /* [public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0066
    {	wdLineStyleNone	= 0,
	wdLineStyleSingle	= 1,
	wdLineStyleDot	= 2,
	wdLineStyleDashSmallGap	= 3,
	wdLineStyleDashLargeGap	= 4,
	wdLineStyleDashDot	= 5,
	wdLineStyleDashDotDot	= 6,
	wdLineStyleDouble	= 7,
	wdLineStyleTriple	= 8,
	wdLineStyleThinThickSmallGap	= 9,
	wdLineStyleThickThinSmallGap	= 10,
	wdLineStyleThinThickThinSmallGap	= 11,
	wdLineStyleThinThickMedGap	= 12,
	wdLineStyleThickThinMedGap	= 13,
	wdLineStyleThinThickThinMedGap	= 14,
	wdLineStyleThinThickLargeGap	= 15,
	wdLineStyleThickThinLargeGap	= 16,
	wdLineStyleThinThickThinLargeGap	= 17,
	wdLineStyleSingleWavy	= 18,
	wdLineStyleDoubleWavy	= 19,
	wdLineStyleDashDotStroked	= 20,
	wdLineStyleEmboss3D	= 21,
	wdLineStyleEngrave3D	= 22,
	wdLineStyleOutset	= 23,
	wdLineStyleInset	= 24
    } 	WdLineStyle;

typedef /* [public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0067
    {	wdLineWidth025pt	= 2,
	wdLineWidth050pt	= 4,
	wdLineWidth075pt	= 6,
	wdLineWidth100pt	= 8,
	wdLineWidth150pt	= 12,
	wdLineWidth225pt	= 18,
	wdLineWidth300pt	= 24,
	wdLineWidth450pt	= 36,
	wdLineWidth600pt	= 48
    } 	WdLineWidth;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0068
    {	wdSectionBreakNextPage	= 2,
	wdSectionBreakContinuous	= 3,
	wdSectionBreakEvenPage	= 4,
	wdSectionBreakOddPage	= 5,
	wdLineBreak	= 6,
	wdPageBreak	= 7,
	wdColumnBreak	= 8,
	wdLineBreakClearLeft	= 9,
	wdLineBreakClearRight	= 10,
	wdTextWrappingBreak	= 11
    } 	WdBreakType;

typedef /* [public][public][public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0069
    {	wdTabLeaderSpaces	= 0,
	wdTabLeaderDots	= 1,
	wdTabLeaderDashes	= 2,
	wdTabLeaderLines	= 3,
	wdTabLeaderHeavy	= 4,
	wdTabLeaderMiddleDot	= 5
    } 	WdTabLeader;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0070
    {	wdInches	= 0,
	wdCentimeters	= 1,
	wdMillimeters	= 2,
	wdPoints	= 3,
	wdPicas	= 4
    } 	WdMeasurementUnits;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0071
    {	wdDropNone	= 0,
	wdDropNormal	= 1,
	wdDropMargin	= 2
    } 	WdDropPosition;

typedef /* [public][public][public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0072
    {	wdRestartContinuous	= 0,
	wdRestartSection	= 1,
	wdRestartPage	= 2
    } 	WdNumberingRule;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0073
    {	wdBottomOfPage	= 0,
	wdBeneathText	= 1
    } 	WdFootnoteLocation;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0074
    {	wdEndOfSection	= 0,
	wdEndOfDocument	= 1
    } 	WdEndnoteLocation;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0075
    {	wdSortSeparateByTabs	= 0,
	wdSortSeparateByCommas	= 1,
	wdSortSeparateByDefaultTableSeparator	= 2
    } 	WdSortSeparator;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0076
    {	wdSeparateByParagraphs	= 0,
	wdSeparateByTabs	= 1,
	wdSeparateByCommas	= 2,
	wdSeparateByDefaultListSeparator	= 3
    } 	WdTableFieldSeparator;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0077
    {	wdSortFieldAlphanumeric	= 0,
	wdSortFieldNumeric	= 1,
	wdSortFieldDate	= 2,
	wdSortFieldSyllable	= 3,
	wdSortFieldJapanJIS	= 4,
	wdSortFieldStroke	= 5,
	wdSortFieldKoreaKS	= 6
    } 	WdSortFieldType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0078
    {	wdSortOrderAscending	= 0,
	wdSortOrderDescending	= 1
    } 	WdSortOrder;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0079
    {	wdTableFormatNone	= 0,
	wdTableFormatSimple1	= 1,
	wdTableFormatSimple2	= 2,
	wdTableFormatSimple3	= 3,
	wdTableFormatClassic1	= 4,
	wdTableFormatClassic2	= 5,
	wdTableFormatClassic3	= 6,
	wdTableFormatClassic4	= 7,
	wdTableFormatColorful1	= 8,
	wdTableFormatColorful2	= 9,
	wdTableFormatColorful3	= 10,
	wdTableFormatColumns1	= 11,
	wdTableFormatColumns2	= 12,
	wdTableFormatColumns3	= 13,
	wdTableFormatColumns4	= 14,
	wdTableFormatColumns5	= 15,
	wdTableFormatGrid1	= 16,
	wdTableFormatGrid2	= 17,
	wdTableFormatGrid3	= 18,
	wdTableFormatGrid4	= 19,
	wdTableFormatGrid5	= 20,
	wdTableFormatGrid6	= 21,
	wdTableFormatGrid7	= 22,
	wdTableFormatGrid8	= 23,
	wdTableFormatList1	= 24,
	wdTableFormatList2	= 25,
	wdTableFormatList3	= 26,
	wdTableFormatList4	= 27,
	wdTableFormatList5	= 28,
	wdTableFormatList6	= 29,
	wdTableFormatList7	= 30,
	wdTableFormatList8	= 31,
	wdTableFormat3DEffects1	= 32,
	wdTableFormat3DEffects2	= 33,
	wdTableFormat3DEffects3	= 34,
	wdTableFormatContemporary	= 35,
	wdTableFormatElegant	= 36,
	wdTableFormatProfessional	= 37,
	wdTableFormatSubtle1	= 38,
	wdTableFormatSubtle2	= 39,
	wdTableFormatWeb1	= 40,
	wdTableFormatWeb2	= 41,
	wdTableFormatWeb3	= 42
    } 	WdTableFormat;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0080
    {	wdTableFormatApplyBorders	= 1,
	wdTableFormatApplyShading	= 2,
	wdTableFormatApplyFont	= 4,
	wdTableFormatApplyColor	= 8,
	wdTableFormatApplyAutoFit	= 16,
	wdTableFormatApplyHeadingRows	= 32,
	wdTableFormatApplyLastRow	= 64,
	wdTableFormatApplyFirstColumn	= 128,
	wdTableFormatApplyLastColumn	= 256
    } 	WdTableFormatApply;

typedef /* [public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0081
    {	wdLanguageNone	= 0,
	wdNoProofing	= 1024,
	wdAfrikaans	= 1078,
	wdAlbanian	= 1052,
	wdAmharic	= 1118,
	wdArabicAlgeria	= 5121,
	wdArabicBahrain	= 15361,
	wdArabicEgypt	= 3073,
	wdArabicIraq	= 2049,
	wdArabicJordan	= 11265,
	wdArabicKuwait	= 13313,
	wdArabicLebanon	= 12289,
	wdArabicLibya	= 4097,
	wdArabicMorocco	= 6145,
	wdArabicOman	= 8193,
	wdArabicQatar	= 16385,
	wdArabic	= 1025,
	wdArabicSyria	= 10241,
	wdArabicTunisia	= 7169,
	wdArabicUAE	= 14337,
	wdArabicYemen	= 9217,
	wdArmenian	= 1067,
	wdAssamese	= 1101,
	wdAzeriCyrillic	= 2092,
	wdAzeriLatin	= 1068,
	wdBasque	= 1069,
	wdByelorussian	= 1059,
	wdBengali	= 1093,
	wdBulgarian	= 1026,
	wdBurmese	= 1109,
	wdCatalan	= 1027,
	wdCherokee	= 1116,
	wdChineseHongKongSAR	= 3076,
	wdChineseMacaoSAR	= 5124,
	wdSimplifiedChinese	= 2052,
	wdChineseSingapore	= 4100,
	wdTraditionalChinese	= 1028,
	wdCroatian	= 1050,
	wdCzech	= 1029,
	wdDanish	= 1030,
	wdDivehi	= 1125,
	wdBelgianDutch	= 2067,
	wdDutch	= 1043,
	wdDzongkhaBhutan	= 2129,
	wdEdo	= 1126,
	wdEnglishAUS	= 3081,
	wdEnglishBelize	= 10249,
	wdEnglishCanadian	= 4105,
	wdEnglishCaribbean	= 9225,
	wdEnglishIreland	= 6153,
	wdEnglishJamaica	= 8201,
	wdEnglishNewZealand	= 5129,
	wdEnglishPhilippines	= 13321,
	wdEnglishSouthAfrica	= 7177,
	wdEnglishTrinidadTobago	= 11273,
	wdEnglishUK	= 2057,
	wdEnglishUS	= 1033,
	wdEnglishZimbabwe	= 12297,
	wdEnglishIndonesia	= 14345,
	wdEstonian	= 1061,
	wdFaeroese	= 1080,
	wdFarsi	= 1065,
	wdFilipino	= 1124,
	wdFinnish	= 1035,
	wdFulfulde	= 1127,
	wdBelgianFrench	= 2060,
	wdFrenchCameroon	= 11276,
	wdFrenchCanadian	= 3084,
	wdFrenchCotedIvoire	= 12300,
	wdFrench	= 1036,
	wdFrenchLuxembourg	= 5132,
	wdFrenchMali	= 13324,
	wdFrenchMonaco	= 6156,
	wdFrenchReunion	= 8204,
	wdFrenchSenegal	= 10252,
	wdFrenchMorocco	= 14348,
	wdFrenchHaiti	= 15372,
	wdSwissFrench	= 4108,
	wdFrenchWestIndies	= 7180,
	wdFrenchZaire	= 9228,
	wdFrisianNetherlands	= 1122,
	wdGaelicIreland	= 2108,
	wdGaelicScotland	= 1084,
	wdGalician	= 1110,
	wdGeorgian	= 1079,
	wdGermanAustria	= 3079,
	wdGerman	= 1031,
	wdGermanLiechtenstein	= 5127,
	wdGermanLuxembourg	= 4103,
	wdSwissGerman	= 2055,
	wdGreek	= 1032,
	wdGuarani	= 1140,
	wdGujarati	= 1095,
	wdHausa	= 1128,
	wdHawaiian	= 1141,
	wdHebrew	= 1037,
	wdHindi	= 1081,
	wdHungarian	= 1038,
	wdIbibio	= 1129,
	wdIcelandic	= 1039,
	wdIgbo	= 1136,
	wdIndonesian	= 1057,
	wdInuktitut	= 1117,
	wdItalian	= 1040,
	wdSwissItalian	= 2064,
	wdJapanese	= 1041,
	wdKannada	= 1099,
	wdKanuri	= 1137,
	wdKashmiri	= 1120,
	wdKazakh	= 1087,
	wdKhmer	= 1107,
	wdKirghiz	= 1088,
	wdKonkani	= 1111,
	wdKorean	= 1042,
	wdKyrgyz	= 1088,
	wdLao	= 1108,
	wdLatin	= 1142,
	wdLatvian	= 1062,
	wdLithuanian	= 1063,
	wdMacedonian	= 1071,
	wdMalaysian	= 1086,
	wdMalayBruneiDarussalam	= 2110,
	wdMalayalam	= 1100,
	wdMaltese	= 1082,
	wdManipuri	= 1112,
	wdMarathi	= 1102,
	wdMongolian	= 1104,
	wdNepali	= 1121,
	wdNorwegianBokmol	= 1044,
	wdNorwegianNynorsk	= 2068,
	wdOriya	= 1096,
	wdOromo	= 1138,
	wdPashto	= 1123,
	wdPolish	= 1045,
	wdBrazilianPortuguese	= 1046,
	wdPortuguese	= 2070,
	wdPunjabi	= 1094,
	wdRhaetoRomanic	= 1047,
	wdRomanianMoldova	= 2072,
	wdRomanian	= 1048,
	wdRussianMoldova	= 2073,
	wdRussian	= 1049,
	wdSamiLappish	= 1083,
	wdSanskrit	= 1103,
	wdSerbianCyrillic	= 3098,
	wdSerbianLatin	= 2074,
	wdSinhalese	= 1115,
	wdSindhi	= 1113,
	wdSindhiPakistan	= 2137,
	wdSlovak	= 1051,
	wdSlovenian	= 1060,
	wdSomali	= 1143,
	wdSorbian	= 1070,
	wdSpanishArgentina	= 11274,
	wdSpanishBolivia	= 16394,
	wdSpanishChile	= 13322,
	wdSpanishColombia	= 9226,
	wdSpanishCostaRica	= 5130,
	wdSpanishDominicanRepublic	= 7178,
	wdSpanishEcuador	= 12298,
	wdSpanishElSalvador	= 17418,
	wdSpanishGuatemala	= 4106,
	wdSpanishHonduras	= 18442,
	wdMexicanSpanish	= 2058,
	wdSpanishNicaragua	= 19466,
	wdSpanishPanama	= 6154,
	wdSpanishParaguay	= 15370,
	wdSpanishPeru	= 10250,
	wdSpanishPuertoRico	= 20490,
	wdSpanishModernSort	= 3082,
	wdSpanish	= 1034,
	wdSpanishUruguay	= 14346,
	wdSpanishVenezuela	= 8202,
	wdSesotho	= 1072,
	wdSutu	= 1072,
	wdSwahili	= 1089,
	wdSwedishFinland	= 2077,
	wdSwedish	= 1053,
	wdSyriac	= 1114,
	wdTajik	= 1064,
	wdTamazight	= 1119,
	wdTamazightLatin	= 2143,
	wdTamil	= 1097,
	wdTatar	= 1092,
	wdTelugu	= 1098,
	wdThai	= 1054,
	wdTibetan	= 1105,
	wdTigrignaEthiopic	= 1139,
	wdTigrignaEritrea	= 2163,
	wdTsonga	= 1073,
	wdTswana	= 1074,
	wdTurkish	= 1055,
	wdTurkmen	= 1090,
	wdUkrainian	= 1058,
	wdUrdu	= 1056,
	wdUzbekCyrillic	= 2115,
	wdUzbekLatin	= 1091,
	wdVenda	= 1075,
	wdVietnamese	= 1066,
	wdWelsh	= 1106,
	wdXhosa	= 1076,
	wdYi	= 1144,
	wdYiddish	= 1085,
	wdYoruba	= 1130,
	wdZulu	= 1077
    } 	WdLanguageID;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0082
    {	wdFieldEmpty	= 0xffffffff,
	wdFieldRef	= 3,
	wdFieldIndexEntry	= 4,
	wdFieldFootnoteRef	= 5,
	wdFieldSet	= 6,
	wdFieldIf	= 7,
	wdFieldIndex	= 8,
	wdFieldTOCEntry	= 9,
	wdFieldStyleRef	= 10,
	wdFieldRefDoc	= 11,
	wdFieldSequence	= 12,
	wdFieldTOC	= 13,
	wdFieldInfo	= 14,
	wdFieldTitle	= 15,
	wdFieldSubject	= 16,
	wdFieldAuthor	= 17,
	wdFieldKeyWord	= 18,
	wdFieldComments	= 19,
	wdFieldLastSavedBy	= 20,
	wdFieldCreateDate	= 21,
	wdFieldSaveDate	= 22,
	wdFieldPrintDate	= 23,
	wdFieldRevisionNum	= 24,
	wdFieldEditTime	= 25,
	wdFieldNumPages	= 26,
	wdFieldNumWords	= 27,
	wdFieldNumChars	= 28,
	wdFieldFileName	= 29,
	wdFieldTemplate	= 30,
	wdFieldDate	= 31,
	wdFieldTime	= 32,
	wdFieldPage	= 33,
	wdFieldExpression	= 34,
	wdFieldQuote	= 35,
	wdFieldInclude	= 36,
	wdFieldPageRef	= 37,
	wdFieldAsk	= 38,
	wdFieldFillIn	= 39,
	wdFieldData	= 40,
	wdFieldNext	= 41,
	wdFieldNextIf	= 42,
	wdFieldSkipIf	= 43,
	wdFieldMergeRec	= 44,
	wdFieldDDE	= 45,
	wdFieldDDEAuto	= 46,
	wdFieldGlossary	= 47,
	wdFieldPrint	= 48,
	wdFieldFormula	= 49,
	wdFieldGoToButton	= 50,
	wdFieldMacroButton	= 51,
	wdFieldAutoNumOutline	= 52,
	wdFieldAutoNumLegal	= 53,
	wdFieldAutoNum	= 54,
	wdFieldImport	= 55,
	wdFieldLink	= 56,
	wdFieldSymbol	= 57,
	wdFieldEmbed	= 58,
	wdFieldMergeField	= 59,
	wdFieldUserName	= 60,
	wdFieldUserInitials	= 61,
	wdFieldUserAddress	= 62,
	wdFieldBarCode	= 63,
	wdFieldDocVariable	= 64,
	wdFieldSection	= 65,
	wdFieldSectionPages	= 66,
	wdFieldIncludePicture	= 67,
	wdFieldIncludeText	= 68,
	wdFieldFileSize	= 69,
	wdFieldFormTextInput	= 70,
	wdFieldFormCheckBox	= 71,
	wdFieldNoteRef	= 72,
	wdFieldTOA	= 73,
	wdFieldTOAEntry	= 74,
	wdFieldMergeSeq	= 75,
	wdFieldPrivate	= 77,
	wdFieldDatabase	= 78,
	wdFieldAutoText	= 79,
	wdFieldCompare	= 80,
	wdFieldAddin	= 81,
	wdFieldSubscriber	= 82,
	wdFieldFormDropDown	= 83,
	wdFieldAdvance	= 84,
	wdFieldDocProperty	= 85,
	wdFieldOCX	= 87,
	wdFieldHyperlink	= 88,
	wdFieldAutoTextList	= 89,
	wdFieldListNum	= 90,
	wdFieldHTMLActiveX	= 91,
	wdFieldBidiOutline	= 92,
	wdFieldAddressBlock	= 93,
	wdFieldGreetingLine	= 94,
	wdFieldShape	= 95
    } 	WdFieldType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0083
    {	wdStyleNormal	= 0xffffffff,
	wdStyleEnvelopeAddress	= 0xffffffdb,
	wdStyleEnvelopeReturn	= 0xffffffda,
	wdStyleBodyText	= 0xffffffbd,
	wdStyleHeading1	= 0xfffffffe,
	wdStyleHeading2	= 0xfffffffd,
	wdStyleHeading3	= 0xfffffffc,
	wdStyleHeading4	= 0xfffffffb,
	wdStyleHeading5	= 0xfffffffa,
	wdStyleHeading6	= 0xfffffff9,
	wdStyleHeading7	= 0xfffffff8,
	wdStyleHeading8	= 0xfffffff7,
	wdStyleHeading9	= 0xfffffff6,
	wdStyleIndex1	= 0xfffffff5,
	wdStyleIndex2	= 0xfffffff4,
	wdStyleIndex3	= 0xfffffff3,
	wdStyleIndex4	= 0xfffffff2,
	wdStyleIndex5	= 0xfffffff1,
	wdStyleIndex6	= 0xfffffff0,
	wdStyleIndex7	= 0xffffffef,
	wdStyleIndex8	= 0xffffffee,
	wdStyleIndex9	= 0xffffffed,
	wdStyleTOC1	= 0xffffffec,
	wdStyleTOC2	= 0xffffffeb,
	wdStyleTOC3	= 0xffffffea,
	wdStyleTOC4	= 0xffffffe9,
	wdStyleTOC5	= 0xffffffe8,
	wdStyleTOC6	= 0xffffffe7,
	wdStyleTOC7	= 0xffffffe6,
	wdStyleTOC8	= 0xffffffe5,
	wdStyleTOC9	= 0xffffffe4,
	wdStyleNormalIndent	= 0xffffffe3,
	wdStyleFootnoteText	= 0xffffffe2,
	wdStyleCommentText	= 0xffffffe1,
	wdStyleHeader	= 0xffffffe0,
	wdStyleFooter	= 0xffffffdf,
	wdStyleIndexHeading	= 0xffffffde,
	wdStyleCaption	= 0xffffffdd,
	wdStyleTableOfFigures	= 0xffffffdc,
	wdStyleFootnoteReference	= 0xffffffd9,
	wdStyleCommentReference	= 0xffffffd8,
	wdStyleLineNumber	= 0xffffffd7,
	wdStylePageNumber	= 0xffffffd6,
	wdStyleEndnoteReference	= 0xffffffd5,
	wdStyleEndnoteText	= 0xffffffd4,
	wdStyleTableOfAuthorities	= 0xffffffd3,
	wdStyleMacroText	= 0xffffffd2,
	wdStyleTOAHeading	= 0xffffffd1,
	wdStyleList	= 0xffffffd0,
	wdStyleListBullet	= 0xffffffcf,
	wdStyleListNumber	= 0xffffffce,
	wdStyleList2	= 0xffffffcd,
	wdStyleList3	= 0xffffffcc,
	wdStyleList4	= 0xffffffcb,
	wdStyleList5	= 0xffffffca,
	wdStyleListBullet2	= 0xffffffc9,
	wdStyleListBullet3	= 0xffffffc8,
	wdStyleListBullet4	= 0xffffffc7,
	wdStyleListBullet5	= 0xffffffc6,
	wdStyleListNumber2	= 0xffffffc5,
	wdStyleListNumber3	= 0xffffffc4,
	wdStyleListNumber4	= 0xffffffc3,
	wdStyleListNumber5	= 0xffffffc2,
	wdStyleTitle	= 0xffffffc1,
	wdStyleClosing	= 0xffffffc0,
	wdStyleSignature	= 0xffffffbf,
	wdStyleDefaultParagraphFont	= 0xffffffbe,
	wdStyleBodyTextIndent	= 0xffffffbc,
	wdStyleListContinue	= 0xffffffbb,
	wdStyleListContinue2	= 0xffffffba,
	wdStyleListContinue3	= 0xffffffb9,
	wdStyleListContinue4	= 0xffffffb8,
	wdStyleListContinue5	= 0xffffffb7,
	wdStyleMessageHeader	= 0xffffffb6,
	wdStyleSubtitle	= 0xffffffb5,
	wdStyleSalutation	= 0xffffffb4,
	wdStyleDate	= 0xffffffb3,
	wdStyleBodyTextFirstIndent	= 0xffffffb2,
	wdStyleBodyTextFirstIndent2	= 0xffffffb1,
	wdStyleNoteHeading	= 0xffffffb0,
	wdStyleBodyText2	= 0xffffffaf,
	wdStyleBodyText3	= 0xffffffae,
	wdStyleBodyTextIndent2	= 0xffffffad,
	wdStyleBodyTextIndent3	= 0xffffffac,
	wdStyleBlockQuotation	= 0xffffffab,
	wdStyleHyperlink	= 0xffffffaa,
	wdStyleHyperlinkFollowed	= 0xffffffa9,
	wdStyleStrong	= 0xffffffa8,
	wdStyleEmphasis	= 0xffffffa7,
	wdStyleNavPane	= 0xffffffa6,
	wdStylePlainText	= 0xffffffa5,
	wdStyleHtmlNormal	= 0xffffffa1,
	wdStyleHtmlAcronym	= 0xffffffa0,
	wdStyleHtmlAddress	= 0xffffff9f,
	wdStyleHtmlCite	= 0xffffff9e,
	wdStyleHtmlCode	= 0xffffff9d,
	wdStyleHtmlDfn	= 0xffffff9c,
	wdStyleHtmlKbd	= 0xffffff9b,
	wdStyleHtmlPre	= 0xffffff9a,
	wdStyleHtmlSamp	= 0xffffff99,
	wdStyleHtmlTt	= 0xffffff98,
	wdStyleHtmlVar	= 0xffffff97,
	wdStyleNormalTable	= 0xffffff96
    } 	WdBuiltinStyle;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0084
    {	wdDialogToolsOptionsTabView	= 204,
	wdDialogToolsOptionsTabGeneral	= 203,
	wdDialogToolsOptionsTabEdit	= 224,
	wdDialogToolsOptionsTabPrint	= 208,
	wdDialogToolsOptionsTabSave	= 209,
	wdDialogToolsOptionsTabProofread	= 211,
	wdDialogToolsOptionsTabTrackChanges	= 386,
	wdDialogToolsOptionsTabUserInfo	= 213,
	wdDialogToolsOptionsTabCompatibility	= 525,
	wdDialogToolsOptionsTabTypography	= 739,
	wdDialogToolsOptionsTabFileLocations	= 225,
	wdDialogToolsOptionsTabFuzzy	= 790,
	wdDialogToolsOptionsTabHangulHanjaConversion	= 786,
	wdDialogToolsOptionsTabBidi	= 1029,
	wdDialogToolsOptionsTabSecurity	= 1361,
	wdDialogFilePageSetupTabMargins	= 0x249f0,
	wdDialogFilePageSetupTabPaper	= 0x249f1,
	wdDialogFilePageSetupTabLayout	= 0x249f3,
	wdDialogFilePageSetupTabCharsLines	= 0x249f4,
	wdDialogInsertSymbolTabSymbols	= 0x30d40,
	wdDialogInsertSymbolTabSpecialCharacters	= 0x30d41,
	wdDialogNoteOptionsTabAllFootnotes	= 0x493e0,
	wdDialogNoteOptionsTabAllEndnotes	= 0x493e1,
	wdDialogInsertIndexAndTablesTabIndex	= 0x61a80,
	wdDialogInsertIndexAndTablesTabTableOfContents	= 0x61a81,
	wdDialogInsertIndexAndTablesTabTableOfFigures	= 0x61a82,
	wdDialogInsertIndexAndTablesTabTableOfAuthorities	= 0x61a83,
	wdDialogOrganizerTabStyles	= 0x7a120,
	wdDialogOrganizerTabAutoText	= 0x7a121,
	wdDialogOrganizerTabCommandBars	= 0x7a122,
	wdDialogOrganizerTabMacros	= 0x7a123,
	wdDialogFormatFontTabFont	= 0x927c0,
	wdDialogFormatFontTabCharacterSpacing	= 0x927c1,
	wdDialogFormatFontTabAnimation	= 0x927c2,
	wdDialogFormatBordersAndShadingTabBorders	= 0xaae60,
	wdDialogFormatBordersAndShadingTabPageBorder	= 0xaae61,
	wdDialogFormatBordersAndShadingTabShading	= 0xaae62,
	wdDialogToolsEnvelopesAndLabelsTabEnvelopes	= 0xc3500,
	wdDialogToolsEnvelopesAndLabelsTabLabels	= 0xc3501,
	wdDialogFormatParagraphTabIndentsAndSpacing	= 0xf4240,
	wdDialogFormatParagraphTabTextFlow	= 0xf4241,
	wdDialogFormatParagraphTabTeisai	= 0xf4242,
	wdDialogFormatDrawingObjectTabColorsAndLines	= 0x124f80,
	wdDialogFormatDrawingObjectTabSize	= 0x124f81,
	wdDialogFormatDrawingObjectTabPosition	= 0x124f82,
	wdDialogFormatDrawingObjectTabWrapping	= 0x124f83,
	wdDialogFormatDrawingObjectTabPicture	= 0x124f84,
	wdDialogFormatDrawingObjectTabTextbox	= 0x124f85,
	wdDialogFormatDrawingObjectTabWeb	= 0x124f86,
	wdDialogFormatDrawingObjectTabHR	= 0x124f87,
	wdDialogToolsAutoCorrectExceptionsTabFirstLetter	= 0x155cc0,
	wdDialogToolsAutoCorrectExceptionsTabInitialCaps	= 0x155cc1,
	wdDialogToolsAutoCorrectExceptionsTabHangulAndAlphabet	= 0x155cc2,
	wdDialogToolsAutoCorrectExceptionsTabIac	= 0x155cc3,
	wdDialogFormatBulletsAndNumberingTabBulleted	= 0x16e360,
	wdDialogFormatBulletsAndNumberingTabNumbered	= 0x16e361,
	wdDialogFormatBulletsAndNumberingTabOutlineNumbered	= 0x16e362,
	wdDialogLetterWizardTabLetterFormat	= 0x186a00,
	wdDialogLetterWizardTabRecipientInfo	= 0x186a01,
	wdDialogLetterWizardTabOtherElements	= 0x186a02,
	wdDialogLetterWizardTabSenderInfo	= 0x186a03,
	wdDialogToolsAutoManagerTabAutoCorrect	= 0x19f0a0,
	wdDialogToolsAutoManagerTabAutoFormatAsYouType	= 0x19f0a1,
	wdDialogToolsAutoManagerTabAutoText	= 0x19f0a2,
	wdDialogToolsAutoManagerTabAutoFormat	= 0x19f0a3,
	wdDialogToolsAutoManagerTabSmartTags	= 0x19f0a4,
	wdDialogTablePropertiesTabTable	= 0x1b7740,
	wdDialogTablePropertiesTabRow	= 0x1b7741,
	wdDialogTablePropertiesTabColumn	= 0x1b7742,
	wdDialogTablePropertiesTabCell	= 0x1b7743,
	wdDialogEmailOptionsTabSignature	= 0x1cfde0,
	wdDialogEmailOptionsTabStationary	= 0x1cfde1,
	wdDialogEmailOptionsTabQuoting	= 0x1cfde2,
	wdDialogWebOptionsBrowsers	= 0x1e8480,
	wdDialogWebOptionsGeneral	= 0x1e8480,
	wdDialogWebOptionsFiles	= 0x1e8481,
	wdDialogWebOptionsPictures	= 0x1e8482,
	wdDialogWebOptionsEncoding	= 0x1e8483,
	wdDialogWebOptionsFonts	= 0x1e8484,
	wdDialogToolsOptionsTabAcetate	= 1266,
	wdDialogTemplates	= 0x200b20,
	wdDialogTemplatesXMLSchema	= 0x200b21,
	wdDialogTemplatesXMLExpansionPacks	= 0x200b22,
	wdDialogTemplatesLinkedCSS	= 0x200b23
    } 	WdWordDialogTab;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0085
    {	wdDialogFilePageSetupTabPaperSize	= 0x249f1,
	wdDialogFilePageSetupTabPaperSource	= 0x249f2
    } 	WdWordDialogTabHID;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0086
    {	wdDialogHelpAbout	= 9,
	wdDialogHelpWordPerfectHelp	= 10,
	wdDialogDocumentStatistics	= 78,
	wdDialogFileNew	= 79,
	wdDialogFileOpen	= 80,
	wdDialogMailMergeOpenDataSource	= 81,
	wdDialogMailMergeOpenHeaderSource	= 82,
	wdDialogFileSaveAs	= 84,
	wdDialogFileSummaryInfo	= 86,
	wdDialogToolsTemplates	= 87,
	wdDialogFilePrint	= 88,
	wdDialogFilePrintSetup	= 97,
	wdDialogFileFind	= 99,
	wdDialogFormatAddrFonts	= 103,
	wdDialogEditPasteSpecial	= 111,
	wdDialogEditFind	= 112,
	wdDialogEditReplace	= 117,
	wdDialogEditStyle	= 120,
	wdDialogEditLinks	= 124,
	wdDialogEditObject	= 125,
	wdDialogTableToText	= 128,
	wdDialogTextToTable	= 127,
	wdDialogTableInsertTable	= 129,
	wdDialogTableInsertCells	= 130,
	wdDialogTableInsertRow	= 131,
	wdDialogTableDeleteCells	= 133,
	wdDialogTableSplitCells	= 137,
	wdDialogTableRowHeight	= 142,
	wdDialogTableColumnWidth	= 143,
	wdDialogToolsCustomize	= 152,
	wdDialogInsertBreak	= 159,
	wdDialogInsertSymbol	= 162,
	wdDialogInsertPicture	= 163,
	wdDialogInsertFile	= 164,
	wdDialogInsertDateTime	= 165,
	wdDialogInsertField	= 166,
	wdDialogInsertMergeField	= 167,
	wdDialogInsertBookmark	= 168,
	wdDialogMarkIndexEntry	= 169,
	wdDialogInsertIndex	= 170,
	wdDialogInsertTableOfContents	= 171,
	wdDialogInsertObject	= 172,
	wdDialogToolsCreateEnvelope	= 173,
	wdDialogFormatFont	= 174,
	wdDialogFormatParagraph	= 175,
	wdDialogFormatSectionLayout	= 176,
	wdDialogFormatColumns	= 177,
	wdDialogFileDocumentLayout	= 178,
	wdDialogFilePageSetup	= 178,
	wdDialogFormatTabs	= 179,
	wdDialogFormatStyle	= 180,
	wdDialogFormatDefineStyleFont	= 181,
	wdDialogFormatDefineStylePara	= 182,
	wdDialogFormatDefineStyleTabs	= 183,
	wdDialogFormatDefineStyleFrame	= 184,
	wdDialogFormatDefineStyleBorders	= 185,
	wdDialogFormatDefineStyleLang	= 186,
	wdDialogFormatPicture	= 187,
	wdDialogToolsLanguage	= 188,
	wdDialogFormatBordersAndShading	= 189,
	wdDialogFormatFrame	= 190,
	wdDialogToolsThesaurus	= 194,
	wdDialogToolsHyphenation	= 195,
	wdDialogToolsBulletsNumbers	= 196,
	wdDialogToolsHighlightChanges	= 197,
	wdDialogToolsRevisions	= 197,
	wdDialogToolsCompareDocuments	= 198,
	wdDialogTableSort	= 199,
	wdDialogToolsOptionsGeneral	= 203,
	wdDialogToolsOptionsView	= 204,
	wdDialogToolsAdvancedSettings	= 206,
	wdDialogToolsOptionsPrint	= 208,
	wdDialogToolsOptionsSave	= 209,
	wdDialogToolsOptionsSpellingAndGrammar	= 211,
	wdDialogToolsOptionsUserInfo	= 213,
	wdDialogToolsMacroRecord	= 214,
	wdDialogToolsMacro	= 215,
	wdDialogWindowActivate	= 220,
	wdDialogFormatRetAddrFonts	= 221,
	wdDialogOrganizer	= 222,
	wdDialogToolsOptionsEdit	= 224,
	wdDialogToolsOptionsFileLocations	= 225,
	wdDialogToolsWordCount	= 228,
	wdDialogControlRun	= 235,
	wdDialogInsertPageNumbers	= 294,
	wdDialogFormatPageNumber	= 298,
	wdDialogCopyFile	= 300,
	wdDialogFormatChangeCase	= 322,
	wdDialogUpdateTOC	= 331,
	wdDialogInsertDatabase	= 341,
	wdDialogTableFormula	= 348,
	wdDialogFormFieldOptions	= 353,
	wdDialogInsertCaption	= 357,
	wdDialogInsertCaptionNumbering	= 358,
	wdDialogInsertAutoCaption	= 359,
	wdDialogFormFieldHelp	= 361,
	wdDialogInsertCrossReference	= 367,
	wdDialogInsertFootnote	= 370,
	wdDialogNoteOptions	= 373,
	wdDialogToolsAutoCorrect	= 378,
	wdDialogToolsOptionsTrackChanges	= 386,
	wdDialogConvertObject	= 392,
	wdDialogInsertAddCaption	= 402,
	wdDialogConnect	= 420,
	wdDialogToolsCustomizeKeyboard	= 432,
	wdDialogToolsCustomizeMenus	= 433,
	wdDialogToolsMergeDocuments	= 435,
	wdDialogMarkTableOfContentsEntry	= 442,
	wdDialogFileMacPageSetupGX	= 444,
	wdDialogFilePrintOneCopy	= 445,
	wdDialogEditFrame	= 458,
	wdDialogMarkCitation	= 463,
	wdDialogTableOfContentsOptions	= 470,
	wdDialogInsertTableOfAuthorities	= 471,
	wdDialogInsertTableOfFigures	= 472,
	wdDialogInsertIndexAndTables	= 473,
	wdDialogInsertFormField	= 483,
	wdDialogFormatDropCap	= 488,
	wdDialogToolsCreateLabels	= 489,
	wdDialogToolsProtectDocument	= 503,
	wdDialogFormatStyleGallery	= 505,
	wdDialogToolsAcceptRejectChanges	= 506,
	wdDialogHelpWordPerfectHelpOptions	= 511,
	wdDialogToolsUnprotectDocument	= 521,
	wdDialogToolsOptionsCompatibility	= 525,
	wdDialogTableOfCaptionsOptions	= 551,
	wdDialogTableAutoFormat	= 563,
	wdDialogMailMergeFindRecord	= 569,
	wdDialogReviewAfmtRevisions	= 570,
	wdDialogViewZoom	= 577,
	wdDialogToolsProtectSection	= 578,
	wdDialogFontSubstitution	= 581,
	wdDialogInsertSubdocument	= 583,
	wdDialogNewToolbar	= 586,
	wdDialogToolsEnvelopesAndLabels	= 607,
	wdDialogFormatCallout	= 610,
	wdDialogTableFormatCell	= 612,
	wdDialogToolsCustomizeMenuBar	= 615,
	wdDialogFileRoutingSlip	= 624,
	wdDialogEditTOACategory	= 625,
	wdDialogToolsManageFields	= 631,
	wdDialogDrawSnapToGrid	= 633,
	wdDialogDrawAlign	= 634,
	wdDialogMailMergeCreateDataSource	= 642,
	wdDialogMailMergeCreateHeaderSource	= 643,
	wdDialogMailMerge	= 676,
	wdDialogMailMergeCheck	= 677,
	wdDialogMailMergeHelper	= 680,
	wdDialogMailMergeQueryOptions	= 681,
	wdDialogFileMacPageSetup	= 685,
	wdDialogListCommands	= 723,
	wdDialogEditCreatePublisher	= 732,
	wdDialogEditSubscribeTo	= 733,
	wdDialogEditPublishOptions	= 735,
	wdDialogEditSubscribeOptions	= 736,
	wdDialogFileMacCustomPageSetupGX	= 737,
	wdDialogToolsOptionsTypography	= 739,
	wdDialogToolsAutoCorrectExceptions	= 762,
	wdDialogToolsOptionsAutoFormatAsYouType	= 778,
	wdDialogMailMergeUseAddressBook	= 779,
	wdDialogToolsHangulHanjaConversion	= 784,
	wdDialogToolsOptionsFuzzy	= 790,
	wdDialogEditGoToOld	= 811,
	wdDialogInsertNumber	= 812,
	wdDialogLetterWizard	= 821,
	wdDialogFormatBulletsAndNumbering	= 824,
	wdDialogToolsSpellingAndGrammar	= 828,
	wdDialogToolsCreateDirectory	= 833,
	wdDialogTableWrapping	= 854,
	wdDialogFormatTheme	= 855,
	wdDialogTableProperties	= 861,
	wdDialogEmailOptions	= 863,
	wdDialogCreateAutoText	= 872,
	wdDialogToolsAutoSummarize	= 874,
	wdDialogToolsGrammarSettings	= 885,
	wdDialogEditGoTo	= 896,
	wdDialogWebOptions	= 898,
	wdDialogInsertHyperlink	= 925,
	wdDialogToolsAutoManager	= 915,
	wdDialogFileVersions	= 945,
	wdDialogToolsOptionsAutoFormat	= 959,
	wdDialogFormatDrawingObject	= 960,
	wdDialogToolsOptions	= 974,
	wdDialogFitText	= 983,
	wdDialogEditAutoText	= 985,
	wdDialogPhoneticGuide	= 986,
	wdDialogToolsDictionary	= 989,
	wdDialogFileSaveVersion	= 1007,
	wdDialogToolsOptionsBidi	= 1029,
	wdDialogFrameSetProperties	= 1074,
	wdDialogTableTableOptions	= 1080,
	wdDialogTableCellOptions	= 1081,
	wdDialogIMESetDefault	= 1094,
	wdDialogTCSCTranslator	= 1156,
	wdDialogHorizontalInVertical	= 1160,
	wdDialogTwoLinesInOne	= 1161,
	wdDialogFormatEncloseCharacters	= 1162,
	wdDialogConsistencyChecker	= 1121,
	wdDialogToolsOptionsSmartTag	= 1395,
	wdDialogFormatStylesCustom	= 1248,
	wdDialogCSSLinks	= 1261,
	wdDialogInsertWebComponent	= 1324,
	wdDialogToolsOptionsEditCopyPaste	= 1356,
	wdDialogToolsOptionsSecurity	= 1361,
	wdDialogSearch	= 1363,
	wdDialogShowRepairs	= 1381,
	wdDialogMailMergeInsertAsk	= 4047,
	wdDialogMailMergeInsertFillIn	= 4048,
	wdDialogMailMergeInsertIf	= 4049,
	wdDialogMailMergeInsertNextIf	= 4053,
	wdDialogMailMergeInsertSet	= 4054,
	wdDialogMailMergeInsertSkipIf	= 4055,
	wdDialogMailMergeFieldMapping	= 1304,
	wdDialogMailMergeInsertAddressBlock	= 1305,
	wdDialogMailMergeInsertGreetingLine	= 1306,
	wdDialogMailMergeInsertFields	= 1307,
	wdDialogMailMergeRecipients	= 1308,
	wdDialogMailMergeFindRecipient	= 1326,
	wdDialogMailMergeSetDocumentType	= 1339,
	wdDialogXMLElementAttributes	= 1460,
	wdDialogSchemaLibrary	= 1417,
	wdDialogPermission	= 1469,
	wdDialogMyPermission	= 1437,
	wdDialogXMLOptions	= 1425,
	wdDialogFormattingRestrictions	= 1427
    } 	WdWordDialog;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0087
    {	wdFieldKindNone	= 0,
	wdFieldKindHot	= 1,
	wdFieldKindWarm	= 2,
	wdFieldKindCold	= 3
    } 	WdFieldKind;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0088
    {	wdRegularText	= 0,
	wdNumberText	= 1,
	wdDateText	= 2,
	wdCurrentDateText	= 3,
	wdCurrentTimeText	= 4,
	wdCalculationText	= 5
    } 	WdTextFormFieldType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0089
    {	wdNeverConvert	= 0,
	wdAlwaysConvert	= 1,
	wdAskToNotConvert	= 2,
	wdAskToConvert	= 3
    } 	WdChevronConvertRule;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0090
    {	wdNotAMergeDocument	= 0xffffffff,
	wdFormLetters	= 0,
	wdMailingLabels	= 1,
	wdEnvelopes	= 2,
	wdCatalog	= 3,
	wdEMail	= 4,
	wdFax	= 5,
	wdDirectory	= 3
    } 	WdMailMergeMainDocType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0091
    {	wdNormalDocument	= 0,
	wdMainDocumentOnly	= 1,
	wdMainAndDataSource	= 2,
	wdMainAndHeader	= 3,
	wdMainAndSourceAndHeader	= 4,
	wdDataSource	= 5
    } 	WdMailMergeState;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0092
    {	wdSendToNewDocument	= 0,
	wdSendToPrinter	= 1,
	wdSendToEmail	= 2,
	wdSendToFax	= 3
    } 	WdMailMergeDestination;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0093
    {	wdNoActiveRecord	= 0xffffffff,
	wdNextRecord	= 0xfffffffe,
	wdPreviousRecord	= 0xfffffffd,
	wdFirstRecord	= 0xfffffffc,
	wdLastRecord	= 0xfffffffb,
	wdFirstDataSourceRecord	= 0xfffffffa,
	wdLastDataSourceRecord	= 0xfffffff9,
	wdNextDataSourceRecord	= 0xfffffff8,
	wdPreviousDataSourceRecord	= 0xfffffff7
    } 	WdMailMergeActiveRecord;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0094
    {	wdDefaultFirstRecord	= 1,
	wdDefaultLastRecord	= 0xfffffff0
    } 	WdMailMergeDefaultRecord;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0095
    {	wdNoMergeInfo	= 0xffffffff,
	wdMergeInfoFromWord	= 0,
	wdMergeInfoFromAccessDDE	= 1,
	wdMergeInfoFromExcelDDE	= 2,
	wdMergeInfoFromMSQueryDDE	= 3,
	wdMergeInfoFromODBC	= 4,
	wdMergeInfoFromODSO	= 5
    } 	WdMailMergeDataSource;

typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0096
    {	wdMergeIfEqual	= 0,
	wdMergeIfNotEqual	= 1,
	wdMergeIfLessThan	= 2,
	wdMergeIfGreaterThan	= 3,
	wdMergeIfLessThanOrEqual	= 4,
	wdMergeIfGreaterThanOrEqual	= 5,
	wdMergeIfIsBlank	= 6,
	wdMergeIfIsNotBlank	= 7
    } 	WdMailMergeComparison;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0097
    {	wdSortByName	= 0,
	wdSortByLocation	= 1
    } 	WdBookmarkSortBy;

typedef /* [public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0098
    {	wdWindowStateNormal	= 0,
	wdWindowStateMaximize	= 1,
	wdWindowStateMinimize	= 2
    } 	WdWindowState;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0099
    {	wdLinkNone	= 0,
	wdLinkDataInDoc	= 1,
	wdLinkDataOnDisk	= 2
    } 	WdPictureLinkType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0100
    {	wdLinkTypeOLE	= 0,
	wdLinkTypePicture	= 1,
	wdLinkTypeText	= 2,
	wdLinkTypeReference	= 3,
	wdLinkTypeInclude	= 4,
	wdLinkTypeImport	= 5,
	wdLinkTypeDDE	= 6,
	wdLinkTypeDDEAuto	= 7
    } 	WdLinkType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0101
    {	wdWindowDocument	= 0,
	wdWindowTemplate	= 1
    } 	WdWindowType;

typedef /* [public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0102
    {	wdNormalView	= 1,
	wdOutlineView	= 2,
	wdPrintView	= 3,
	wdPrintPreview	= 4,
	wdMasterView	= 5,
	wdWebView	= 6,
	wdReadingView	= 7
    } 	WdViewType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0103
    {	wdSeekMainDocument	= 0,
	wdSeekPrimaryHeader	= 1,
	wdSeekFirstPageHeader	= 2,
	wdSeekEvenPagesHeader	= 3,
	wdSeekPrimaryFooter	= 4,
	wdSeekFirstPageFooter	= 5,
	wdSeekEvenPagesFooter	= 6,
	wdSeekFootnotes	= 7,
	wdSeekEndnotes	= 8,
	wdSeekCurrentPageHeader	= 9,
	wdSeekCurrentPageFooter	= 10
    } 	WdSeekView;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0104
    {	wdPaneNone	= 0,
	wdPanePrimaryHeader	= 1,
	wdPaneFirstPageHeader	= 2,
	wdPaneEvenPagesHeader	= 3,
	wdPanePrimaryFooter	= 4,
	wdPaneFirstPageFooter	= 5,
	wdPaneEvenPagesFooter	= 6,
	wdPaneFootnotes	= 7,
	wdPaneEndnotes	= 8,
	wdPaneFootnoteContinuationNotice	= 9,
	wdPaneFootnoteContinuationSeparator	= 10,
	wdPaneFootnoteSeparator	= 11,
	wdPaneEndnoteContinuationNotice	= 12,
	wdPaneEndnoteContinuationSeparator	= 13,
	wdPaneEndnoteSeparator	= 14,
	wdPaneComments	= 15,
	wdPaneCurrentPageHeader	= 16,
	wdPaneCurrentPageFooter	= 17,
	wdPaneRevisions	= 18
    } 	WdSpecialPane;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0105
    {	wdPageFitNone	= 0,
	wdPageFitFullPage	= 1,
	wdPageFitBestFit	= 2,
	wdPageFitTextFit	= 3
    } 	WdPageFit;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0106
    {	wdBrowsePage	= 1,
	wdBrowseSection	= 2,
	wdBrowseComment	= 3,
	wdBrowseFootnote	= 4,
	wdBrowseEndnote	= 5,
	wdBrowseField	= 6,
	wdBrowseTable	= 7,
	wdBrowseGraphic	= 8,
	wdBrowseHeading	= 9,
	wdBrowseEdit	= 10,
	wdBrowseFind	= 11,
	wdBrowseGoTo	= 12
    } 	WdBrowseTarget;

typedef /* [public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0107
    {	wdPrinterDefaultBin	= 0,
	wdPrinterUpperBin	= 1,
	wdPrinterOnlyBin	= 1,
	wdPrinterLowerBin	= 2,
	wdPrinterMiddleBin	= 3,
	wdPrinterManualFeed	= 4,
	wdPrinterEnvelopeFeed	= 5,
	wdPrinterManualEnvelopeFeed	= 6,
	wdPrinterAutomaticSheetFeed	= 7,
	wdPrinterTractorFeed	= 8,
	wdPrinterSmallFormatBin	= 9,
	wdPrinterLargeFormatBin	= 10,
	wdPrinterLargeCapacityBin	= 11,
	wdPrinterPaperCassette	= 14,
	wdPrinterFormSource	= 15
    } 	WdPaperTray;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0108
    {	wdOrientPortrait	= 0,
	wdOrientLandscape	= 1
    } 	WdOrientation;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0109
    {	wdNoSelection	= 0,
	wdSelectionIP	= 1,
	wdSelectionNormal	= 2,
	wdSelectionFrame	= 3,
	wdSelectionColumn	= 4,
	wdSelectionRow	= 5,
	wdSelectionBlock	= 6,
	wdSelectionInlineShape	= 7,
	wdSelectionShape	= 8
    } 	WdSelectionType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0110
    {	wdCaptionFigure	= 0xffffffff,
	wdCaptionTable	= 0xfffffffe,
	wdCaptionEquation	= 0xfffffffd
    } 	WdCaptionLabelID;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0111
    {	wdRefTypeNumberedItem	= 0,
	wdRefTypeHeading	= 1,
	wdRefTypeBookmark	= 2,
	wdRefTypeFootnote	= 3,
	wdRefTypeEndnote	= 4
    } 	WdReferenceType;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0112
    {	wdContentText	= 0xffffffff,
	wdNumberRelativeContext	= 0xfffffffe,
	wdNumberNoContext	= 0xfffffffd,
	wdNumberFullContext	= 0xfffffffc,
	wdEntireCaption	= 2,
	wdOnlyLabelAndNumber	= 3,
	wdOnlyCaptionText	= 4,
	wdFootnoteNumber	= 5,
	wdEndnoteNumber	= 6,
	wdPageNumber	= 7,
	wdPosition	= 15,
	wdFootnoteNumberFormatted	= 16,
	wdEndnoteNumberFormatted	= 17
    } 	WdReferenceKind;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0113
    {	wdIndexTemplate	= 0,
	wdIndexClassic	= 1,
	wdIndexFancy	= 2,
	wdIndexModern	= 3,
	wdIndexBulleted	= 4,
	wdIndexFormal	= 5,
	wdIndexSimple	= 6
    } 	WdIndexFormat;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0114
    {	wdIndexIndent	= 0,
	wdIndexRunin	= 1
    } 	WdIndexType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0115
    {	wdWrapNever	= 0,
	wdWrapAlways	= 1,
	wdWrapAsk	= 2
    } 	WdRevisionsWrap;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0116
    {	wdNoRevision	= 0,
	wdRevisionInsert	= 1,
	wdRevisionDelete	= 2,
	wdRevisionProperty	= 3,
	wdRevisionParagraphNumber	= 4,
	wdRevisionDisplayField	= 5,
	wdRevisionReconcile	= 6,
	wdRevisionConflict	= 7,
	wdRevisionStyle	= 8,
	wdRevisionReplace	= 9,
	wdRevisionParagraphProperty	= 10,
	wdRevisionTableProperty	= 11,
	wdRevisionSectionProperty	= 12,
	wdRevisionStyleDefinition	= 13
    } 	WdRevisionType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0117
    {	wdOneAfterAnother	= 0,
	wdAllAtOnce	= 1
    } 	WdRoutingSlipDelivery;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0118
    {	wdNotYetRouted	= 0,
	wdRouteInProgress	= 1,
	wdRouteComplete	= 2
    } 	WdRoutingSlipStatus;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0119
    {	wdSectionContinuous	= 0,
	wdSectionNewColumn	= 1,
	wdSectionNewPage	= 2,
	wdSectionEvenPage	= 3,
	wdSectionOddPage	= 4
    } 	WdSectionStart;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0120
    {	wdDoNotSaveChanges	= 0,
	wdSaveChanges	= 0xffffffff,
	wdPromptToSaveChanges	= 0xfffffffe
    } 	WdSaveOptions;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0121
    {	wdDocumentNotSpecified	= 0,
	wdDocumentLetter	= 1,
	wdDocumentEmail	= 2
    } 	WdDocumentKind;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0122
    {	wdTypeDocument	= 0,
	wdTypeTemplate	= 1,
	wdTypeFrameset	= 2
    } 	WdDocumentType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0123
    {	wdWordDocument	= 0,
	wdOriginalDocumentFormat	= 1,
	wdPromptUser	= 2
    } 	WdOriginalFormat;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0124
    {	wdRelocateUp	= 0,
	wdRelocateDown	= 1
    } 	WdRelocate;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0125
    {	wdInsertedTextMarkNone	= 0,
	wdInsertedTextMarkBold	= 1,
	wdInsertedTextMarkItalic	= 2,
	wdInsertedTextMarkUnderline	= 3,
	wdInsertedTextMarkDoubleUnderline	= 4,
	wdInsertedTextMarkColorOnly	= 5,
	wdInsertedTextMarkStrikeThrough	= 6
    } 	WdInsertedTextMark;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0126
    {	wdRevisedLinesMarkNone	= 0,
	wdRevisedLinesMarkLeftBorder	= 1,
	wdRevisedLinesMarkRightBorder	= 2,
	wdRevisedLinesMarkOutsideBorder	= 3
    } 	WdRevisedLinesMark;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0127
    {	wdDeletedTextMarkHidden	= 0,
	wdDeletedTextMarkStrikeThrough	= 1,
	wdDeletedTextMarkCaret	= 2,
	wdDeletedTextMarkPound	= 3,
	wdDeletedTextMarkNone	= 4,
	wdDeletedTextMarkBold	= 5,
	wdDeletedTextMarkItalic	= 6,
	wdDeletedTextMarkUnderline	= 7,
	wdDeletedTextMarkDoubleUnderline	= 8,
	wdDeletedTextMarkColorOnly	= 9
    } 	WdDeletedTextMark;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0128
    {	wdRevisedPropertiesMarkNone	= 0,
	wdRevisedPropertiesMarkBold	= 1,
	wdRevisedPropertiesMarkItalic	= 2,
	wdRevisedPropertiesMarkUnderline	= 3,
	wdRevisedPropertiesMarkDoubleUnderline	= 4,
	wdRevisedPropertiesMarkColorOnly	= 5,
	wdRevisedPropertiesMarkStrikeThrough	= 6
    } 	WdRevisedPropertiesMark;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0129
    {	wdFieldShadingNever	= 0,
	wdFieldShadingAlways	= 1,
	wdFieldShadingWhenSelected	= 2
    } 	WdFieldShading;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0130
    {	wdDocumentsPath	= 0,
	wdPicturesPath	= 1,
	wdUserTemplatesPath	= 2,
	wdWorkgroupTemplatesPath	= 3,
	wdUserOptionsPath	= 4,
	wdAutoRecoverPath	= 5,
	wdToolsPath	= 6,
	wdTutorialPath	= 7,
	wdStartupPath	= 8,
	wdProgramPath	= 9,
	wdGraphicsFiltersPath	= 10,
	wdTextConvertersPath	= 11,
	wdProofingToolsPath	= 12,
	wdTempFilePath	= 13,
	wdCurrentFolderPath	= 14,
	wdStyleGalleryPath	= 15,
	wdBorderArtPath	= 19
    } 	WdDefaultFilePath;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0131
    {	wdNoTabHangIndent	= 1,
	wdNoSpaceRaiseLower	= 2,
	wdPrintColBlack	= 3,
	wdWrapTrailSpaces	= 4,
	wdNoColumnBalance	= 5,
	wdConvMailMergeEsc	= 6,
	wdSuppressSpBfAfterPgBrk	= 7,
	wdSuppressTopSpacing	= 8,
	wdOrigWordTableRules	= 9,
	wdTransparentMetafiles	= 10,
	wdShowBreaksInFrames	= 11,
	wdSwapBordersFacingPages	= 12,
	wdLeaveBackslashAlone	= 13,
	wdExpandShiftReturn	= 14,
	wdDontULTrailSpace	= 15,
	wdDontBalanceSingleByteDoubleByteWidth	= 16,
	wdSuppressTopSpacingMac5	= 17,
	wdSpacingInWholePoints	= 18,
	wdPrintBodyTextBeforeHeader	= 19,
	wdNoLeading	= 20,
	wdNoSpaceForUL	= 21,
	wdMWSmallCaps	= 22,
	wdNoExtraLineSpacing	= 23,
	wdTruncateFontHeight	= 24,
	wdSubFontBySize	= 25,
	wdUsePrinterMetrics	= 26,
	wdWW6BorderRules	= 27,
	wdExactOnTop	= 28,
	wdSuppressBottomSpacing	= 29,
	wdWPSpaceWidth	= 30,
	wdWPJustification	= 31,
	wdLineWrapLikeWord6	= 32,
	wdShapeLayoutLikeWW8	= 33,
	wdFootnoteLayoutLikeWW8	= 34,
	wdDontUseHTMLParagraphAutoSpacing	= 35,
	wdDontAdjustLineHeightInTable	= 36,
	wdForgetLastTabAlignment	= 37,
	wdAutospaceLikeWW7	= 38,
	wdAlignTablesRowByRow	= 39,
	wdLayoutRawTableWidth	= 40,
	wdLayoutTableRowsApart	= 41,
	wdUseWord97LineBreakingRules	= 42,
	wdDontBreakWrappedTables	= 43,
	wdDontSnapTextToGridInTableWithObjects	= 44,
	wdSelectFieldWithFirstOrLastCharacter	= 45,
	wdApplyBreakingRules	= 46,
	wdDontWrapTextWithPunctuation	= 47,
	wdDontUseAsianBreakRulesInGrid	= 48,
	wdUseWord2002TableStyleRules	= 49,
	wdGrowAutofit	= 50
    } 	WdCompatibility;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0132
    {	wdPaper10x14	= 0,
	wdPaper11x17	= 1,
	wdPaperLetter	= 2,
	wdPaperLetterSmall	= 3,
	wdPaperLegal	= 4,
	wdPaperExecutive	= 5,
	wdPaperA3	= 6,
	wdPaperA4	= 7,
	wdPaperA4Small	= 8,
	wdPaperA5	= 9,
	wdPaperB4	= 10,
	wdPaperB5	= 11,
	wdPaperCSheet	= 12,
	wdPaperDSheet	= 13,
	wdPaperESheet	= 14,
	wdPaperFanfoldLegalGerman	= 15,
	wdPaperFanfoldStdGerman	= 16,
	wdPaperFanfoldUS	= 17,
	wdPaperFolio	= 18,
	wdPaperLedger	= 19,
	wdPaperNote	= 20,
	wdPaperQuarto	= 21,
	wdPaperStatement	= 22,
	wdPaperTabloid	= 23,
	wdPaperEnvelope9	= 24,
	wdPaperEnvelope10	= 25,
	wdPaperEnvelope11	= 26,
	wdPaperEnvelope12	= 27,
	wdPaperEnvelope14	= 28,
	wdPaperEnvelopeB4	= 29,
	wdPaperEnvelopeB5	= 30,
	wdPaperEnvelopeB6	= 31,
	wdPaperEnvelopeC3	= 32,
	wdPaperEnvelopeC4	= 33,
	wdPaperEnvelopeC5	= 34,
	wdPaperEnvelopeC6	= 35,
	wdPaperEnvelopeC65	= 36,
	wdPaperEnvelopeDL	= 37,
	wdPaperEnvelopeItaly	= 38,
	wdPaperEnvelopeMonarch	= 39,
	wdPaperEnvelopePersonal	= 40,
	wdPaperCustom	= 41
    } 	WdPaperSize;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0133
    {	wdCustomLabelLetter	= 0,
	wdCustomLabelLetterLS	= 1,
	wdCustomLabelA4	= 2,
	wdCustomLabelA4LS	= 3,
	wdCustomLabelA5	= 4,
	wdCustomLabelA5LS	= 5,
	wdCustomLabelB5	= 6,
	wdCustomLabelMini	= 7,
	wdCustomLabelFanfold	= 8,
	wdCustomLabelVertHalfSheet	= 9,
	wdCustomLabelVertHalfSheetLS	= 10,
	wdCustomLabelHigaki	= 11,
	wdCustomLabelHigakiLS	= 12,
	wdCustomLabelB4JIS	= 13
    } 	WdCustomLabelPageSize;

typedef /* [public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0134
    {	wdNoProtection	= 0xffffffff,
	wdAllowOnlyRevisions	= 0,
	wdAllowOnlyComments	= 1,
	wdAllowOnlyFormFields	= 2,
	wdAllowOnlyReading	= 3
    } 	WdProtectionType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0135
    {	wdAdjective	= 0,
	wdNoun	= 1,
	wdAdverb	= 2,
	wdVerb	= 3,
	wdPronoun	= 4,
	wdConjunction	= 5,
	wdPreposition	= 6,
	wdInterjection	= 7,
	wdIdiom	= 8,
	wdOther	= 9
    } 	WdPartOfSpeech;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0136
    {	wdSubscriberBestFormat	= 0,
	wdSubscriberRTF	= 1,
	wdSubscriberText	= 2,
	wdSubscriberPict	= 4
    } 	WdSubscriberFormats;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0137
    {	wdPublisher	= 0,
	wdSubscriber	= 1
    } 	WdEditionType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0138
    {	wdCancelPublisher	= 0,
	wdSendPublisher	= 1,
	wdSelectPublisher	= 2,
	wdAutomaticUpdate	= 3,
	wdManualUpdate	= 4,
	wdChangeAttributes	= 5,
	wdUpdateSubscriber	= 6,
	wdOpenSource	= 7
    } 	WdEditionOption;

typedef /* [public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0139
    {	wdRelativeHorizontalPositionMargin	= 0,
	wdRelativeHorizontalPositionPage	= 1,
	wdRelativeHorizontalPositionColumn	= 2,
	wdRelativeHorizontalPositionCharacter	= 3
    } 	WdRelativeHorizontalPosition;

typedef /* [public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0140
    {	wdRelativeVerticalPositionMargin	= 0,
	wdRelativeVerticalPositionPage	= 1,
	wdRelativeVerticalPositionParagraph	= 2,
	wdRelativeVerticalPositionLine	= 3
    } 	WdRelativeVerticalPosition;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0141
    {	wdHelp	= 0,
	wdHelpAbout	= 1,
	wdHelpActiveWindow	= 2,
	wdHelpContents	= 3,
	wdHelpExamplesAndDemos	= 4,
	wdHelpIndex	= 5,
	wdHelpKeyboard	= 6,
	wdHelpPSSHelp	= 7,
	wdHelpQuickPreview	= 8,
	wdHelpSearch	= 9,
	wdHelpUsingHelp	= 10,
	wdHelpIchitaro	= 11,
	wdHelpPE2	= 12,
	wdHelpHWP	= 13
    } 	WdHelpType;

typedef /* [public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0142
    {	wdKeyCategoryNil	= 0xffffffff,
	wdKeyCategoryDisable	= 0,
	wdKeyCategoryCommand	= 1,
	wdKeyCategoryMacro	= 2,
	wdKeyCategoryFont	= 3,
	wdKeyCategoryAutoText	= 4,
	wdKeyCategoryStyle	= 5,
	wdKeyCategorySymbol	= 6,
	wdKeyCategoryPrefix	= 7
    } 	WdKeyCategory;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0143
    {	wdNoKey	= 255,
	wdKeyShift	= 256,
	wdKeyControl	= 512,
	wdKeyCommand	= 512,
	wdKeyAlt	= 1024,
	wdKeyOption	= 1024,
	wdKeyA	= 65,
	wdKeyB	= 66,
	wdKeyC	= 67,
	wdKeyD	= 68,
	wdKeyE	= 69,
	wdKeyF	= 70,
	wdKeyG	= 71,
	wdKeyH	= 72,
	wdKeyI	= 73,
	wdKeyJ	= 74,
	wdKeyK	= 75,
	wdKeyL	= 76,
	wdKeyM	= 77,
	wdKeyN	= 78,
	wdKeyO	= 79,
	wdKeyP	= 80,
	wdKeyQ	= 81,
	wdKeyR	= 82,
	wdKeyS	= 83,
	wdKeyT	= 84,
	wdKeyU	= 85,
	wdKeyV	= 86,
	wdKeyW	= 87,
	wdKeyX	= 88,
	wdKeyY	= 89,
	wdKeyZ	= 90,
	wdKey0	= 48,
	wdKey1	= 49,
	wdKey2	= 50,
	wdKey3	= 51,
	wdKey4	= 52,
	wdKey5	= 53,
	wdKey6	= 54,
	wdKey7	= 55,
	wdKey8	= 56,
	wdKey9	= 57,
	wdKeyBackspace	= 8,
	wdKeyTab	= 9,
	wdKeyNumeric5Special	= 12,
	wdKeyReturn	= 13,
	wdKeyPause	= 19,
	wdKeyEsc	= 27,
	wdKeySpacebar	= 32,
	wdKeyPageUp	= 33,
	wdKeyPageDown	= 34,
	wdKeyEnd	= 35,
	wdKeyHome	= 36,
	wdKeyInsert	= 45,
	wdKeyDelete	= 46,
	wdKeyNumeric0	= 96,
	wdKeyNumeric1	= 97,
	wdKeyNumeric2	= 98,
	wdKeyNumeric3	= 99,
	wdKeyNumeric4	= 100,
	wdKeyNumeric5	= 101,
	wdKeyNumeric6	= 102,
	wdKeyNumeric7	= 103,
	wdKeyNumeric8	= 104,
	wdKeyNumeric9	= 105,
	wdKeyNumericMultiply	= 106,
	wdKeyNumericAdd	= 107,
	wdKeyNumericSubtract	= 109,
	wdKeyNumericDecimal	= 110,
	wdKeyNumericDivide	= 111,
	wdKeyF1	= 112,
	wdKeyF2	= 113,
	wdKeyF3	= 114,
	wdKeyF4	= 115,
	wdKeyF5	= 116,
	wdKeyF6	= 117,
	wdKeyF7	= 118,
	wdKeyF8	= 119,
	wdKeyF9	= 120,
	wdKeyF10	= 121,
	wdKeyF11	= 122,
	wdKeyF12	= 123,
	wdKeyF13	= 124,
	wdKeyF14	= 125,
	wdKeyF15	= 126,
	wdKeyF16	= 127,
	wdKeyScrollLock	= 145,
	wdKeySemiColon	= 186,
	wdKeyEquals	= 187,
	wdKeyComma	= 188,
	wdKeyHyphen	= 189,
	wdKeyPeriod	= 190,
	wdKeySlash	= 191,
	wdKeyBackSingleQuote	= 192,
	wdKeyOpenSquareBrace	= 219,
	wdKeyBackSlash	= 220,
	wdKeyCloseSquareBrace	= 221,
	wdKeySingleQuote	= 222
    } 	WdKey;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0144
    {	wdOLELink	= 0,
	wdOLEEmbed	= 1,
	wdOLEControl	= 2
    } 	WdOLEType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0145
    {	wdOLEVerbPrimary	= 0,
	wdOLEVerbShow	= 0xffffffff,
	wdOLEVerbOpen	= 0xfffffffe,
	wdOLEVerbHide	= 0xfffffffd,
	wdOLEVerbUIActivate	= 0xfffffffc,
	wdOLEVerbInPlaceActivate	= 0xfffffffb,
	wdOLEVerbDiscardUndoState	= 0xfffffffa
    } 	WdOLEVerb;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0146
    {	wdInLine	= 0,
	wdFloatOverText	= 1
    } 	WdOLEPlacement;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0147
    {	wdLeftPortrait	= 0,
	wdCenterPortrait	= 1,
	wdRightPortrait	= 2,
	wdLeftLandscape	= 3,
	wdCenterLandscape	= 4,
	wdRightLandscape	= 5,
	wdLeftClockwise	= 6,
	wdCenterClockwise	= 7,
	wdRightClockwise	= 8
    } 	WdEnvelopeOrientation;

typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0148
    {	wdFullBlock	= 0,
	wdModifiedBlock	= 1,
	wdSemiBlock	= 2
    } 	WdLetterStyle;

typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0149
    {	wdLetterTop	= 0,
	wdLetterBottom	= 1,
	wdLetterLeft	= 2,
	wdLetterRight	= 3
    } 	WdLetterheadLocation;

typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0150
    {	wdSalutationInformal	= 0,
	wdSalutationFormal	= 1,
	wdSalutationBusiness	= 2,
	wdSalutationOther	= 3
    } 	WdSalutationType;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0151
    {	wdGenderFemale	= 0,
	wdGenderMale	= 1,
	wdGenderNeutral	= 2,
	wdGenderUnknown	= 3
    } 	WdSalutationGender;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0152
    {	wdMove	= 0,
	wdExtend	= 1
    } 	WdMovementType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0153
    {	wdUndefined	= 0x98967f,
	wdToggle	= 0x98967e,
	wdForward	= 0x3fffffff,
	wdBackward	= 0xc0000001,
	wdAutoPosition	= 0,
	wdFirst	= 1,
	wdCreatorCode	= 0x4d535744
    } 	WdConstants;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0154
    {	wdPasteOLEObject	= 0,
	wdPasteRTF	= 1,
	wdPasteText	= 2,
	wdPasteMetafilePicture	= 3,
	wdPasteBitmap	= 4,
	wdPasteDeviceIndependentBitmap	= 5,
	wdPasteHyperlink	= 7,
	wdPasteShape	= 8,
	wdPasteEnhancedMetafile	= 9,
	wdPasteHTML	= 10
    } 	WdPasteDataType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0155
    {	wdPrintDocumentContent	= 0,
	wdPrintProperties	= 1,
	wdPrintComments	= 2,
	wdPrintMarkup	= 2,
	wdPrintStyles	= 3,
	wdPrintAutoTextEntries	= 4,
	wdPrintKeyAssignments	= 5,
	wdPrintEnvelope	= 6,
	wdPrintDocumentWithMarkup	= 7
    } 	WdPrintOutItem;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0156
    {	wdPrintAllPages	= 0,
	wdPrintOddPagesOnly	= 1,
	wdPrintEvenPagesOnly	= 2
    } 	WdPrintOutPages;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0157
    {	wdPrintAllDocument	= 0,
	wdPrintSelection	= 1,
	wdPrintCurrentPage	= 2,
	wdPrintFromTo	= 3,
	wdPrintRangeOfPages	= 4
    } 	WdPrintOutRange;

typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0158
    {	wdSpelling	= 0,
	wdGrammar	= 1,
	wdThesaurus	= 2,
	wdHyphenation	= 3,
	wdSpellingComplete	= 4,
	wdSpellingCustom	= 5,
	wdSpellingLegal	= 6,
	wdSpellingMedical	= 7,
	wdHangulHanjaConversion	= 8,
	wdHangulHanjaConversionCustom	= 9
    } 	WdDictionaryType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0159
    {	wdSpellword	= 0,
	wdWildcard	= 1,
	wdAnagram	= 2
    } 	WdSpellingWordType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0160
    {	wdSpellingCorrect	= 0,
	wdSpellingNotInDictionary	= 1,
	wdSpellingCapitalization	= 2
    } 	WdSpellingErrorType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0161
    {	wdSpellingError	= 0,
	wdGrammaticalError	= 1
    } 	WdProofreadingErrorType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0162
    {	wdInlineShapeEmbeddedOLEObject	= 1,
	wdInlineShapeLinkedOLEObject	= 2,
	wdInlineShapePicture	= 3,
	wdInlineShapeLinkedPicture	= 4,
	wdInlineShapeOLEControlObject	= 5,
	wdInlineShapeHorizontalLine	= 6,
	wdInlineShapePictureHorizontalLine	= 7,
	wdInlineShapeLinkedPictureHorizontalLine	= 8,
	wdInlineShapePictureBullet	= 9,
	wdInlineShapeScriptAnchor	= 10,
	wdInlineShapeOWSAnchor	= 11
    } 	WdInlineShapeType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0163
    {	wdTiled	= 0,
	wdIcons	= 1
    } 	WdArrangeStyle;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0164
    {	wdSelStartActive	= 1,
	wdSelAtEOL	= 2,
	wdSelOvertype	= 4,
	wdSelActive	= 8,
	wdSelReplace	= 16
    } 	WdSelectionFlags;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0165
    {	wdAutoVersionOff	= 0,
	wdAutoVersionOnClose	= 1
    } 	WdAutoVersions;

typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0166
    {	wdOrganizerObjectStyles	= 0,
	wdOrganizerObjectAutoText	= 1,
	wdOrganizerObjectCommandBars	= 2,
	wdOrganizerObjectProjectItems	= 3
    } 	WdOrganizerObject;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0167
    {	wdMatchParagraphMark	= 0x1000f,
	wdMatchTabCharacter	= 9,
	wdMatchCommentMark	= 5,
	wdMatchAnyCharacter	= 0x1003f,
	wdMatchAnyDigit	= 0x1001f,
	wdMatchAnyLetter	= 0x1002f,
	wdMatchCaretCharacter	= 11,
	wdMatchColumnBreak	= 14,
	wdMatchEmDash	= 8212,
	wdMatchEnDash	= 8211,
	wdMatchEndnoteMark	= 0x10013,
	wdMatchField	= 19,
	wdMatchFootnoteMark	= 0x10012,
	wdMatchGraphic	= 1,
	wdMatchManualLineBreak	= 0x1000f,
	wdMatchManualPageBreak	= 0x1001c,
	wdMatchNonbreakingHyphen	= 30,
	wdMatchNonbreakingSpace	= 160,
	wdMatchOptionalHyphen	= 31,
	wdMatchSectionBreak	= 0x1002c,
	wdMatchWhiteSpace	= 0x10077
    } 	WdFindMatch;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0168
    {	wdFindStop	= 0,
	wdFindContinue	= 1,
	wdFindAsk	= 2
    } 	WdFindWrap;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0169
    {	wdActiveEndAdjustedPageNumber	= 1,
	wdActiveEndSectionNumber	= 2,
	wdActiveEndPageNumber	= 3,
	wdNumberOfPagesInDocument	= 4,
	wdHorizontalPositionRelativeToPage	= 5,
	wdVerticalPositionRelativeToPage	= 6,
	wdHorizontalPositionRelativeToTextBoundary	= 7,
	wdVerticalPositionRelativeToTextBoundary	= 8,
	wdFirstCharacterColumnNumber	= 9,
	wdFirstCharacterLineNumber	= 10,
	wdFrameIsSelected	= 11,
	wdWithInTable	= 12,
	wdStartOfRangeRowNumber	= 13,
	wdEndOfRangeRowNumber	= 14,
	wdMaximumNumberOfRows	= 15,
	wdStartOfRangeColumnNumber	= 16,
	wdEndOfRangeColumnNumber	= 17,
	wdMaximumNumberOfColumns	= 18,
	wdZoomPercentage	= 19,
	wdSelectionMode	= 20,
	wdCapsLock	= 21,
	wdNumLock	= 22,
	wdOverType	= 23,
	wdRevisionMarking	= 24,
	wdInFootnoteEndnotePane	= 25,
	wdInCommentPane	= 26,
	wdInHeaderFooter	= 28,
	wdAtEndOfRowMarker	= 31,
	wdReferenceOfType	= 32,
	wdHeaderFooterType	= 33,
	wdInMasterDocument	= 34,
	wdInFootnote	= 35,
	wdInEndnote	= 36,
	wdInWordMail	= 37,
	wdInClipboard	= 38
    } 	WdInformation;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0170
    {	wdWrapSquare	= 0,
	wdWrapTight	= 1,
	wdWrapThrough	= 2,
	wdWrapNone	= 3,
	wdWrapTopBottom	= 4,
	wdWrapInline	= 7
    } 	WdWrapType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0171
    {	wdWrapBoth	= 0,
	wdWrapLeft	= 1,
	wdWrapRight	= 2,
	wdWrapLargest	= 3
    } 	WdWrapSideType;

typedef /* [public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0172
    {	wdOutlineLevel1	= 1,
	wdOutlineLevel2	= 2,
	wdOutlineLevel3	= 3,
	wdOutlineLevel4	= 4,
	wdOutlineLevel5	= 5,
	wdOutlineLevel6	= 6,
	wdOutlineLevel7	= 7,
	wdOutlineLevel8	= 8,
	wdOutlineLevel9	= 9,
	wdOutlineLevelBodyText	= 10
    } 	WdOutlineLevel;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0173
    {	wdTextOrientationHorizontal	= 0,
	wdTextOrientationUpward	= 2,
	wdTextOrientationDownward	= 3,
	wdTextOrientationVerticalFarEast	= 1,
	wdTextOrientationHorizontalRotatedFarEast	= 4
    } 	WdTextOrientation;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0174
    {	wdArtApples	= 1,
	wdArtMapleMuffins	= 2,
	wdArtCakeSlice	= 3,
	wdArtCandyCorn	= 4,
	wdArtIceCreamCones	= 5,
	wdArtChampagneBottle	= 6,
	wdArtPartyGlass	= 7,
	wdArtChristmasTree	= 8,
	wdArtTrees	= 9,
	wdArtPalmsColor	= 10,
	wdArtBalloons3Colors	= 11,
	wdArtBalloonsHotAir	= 12,
	wdArtPartyFavor	= 13,
	wdArtConfettiStreamers	= 14,
	wdArtHearts	= 15,
	wdArtHeartBalloon	= 16,
	wdArtStars3D	= 17,
	wdArtStarsShadowed	= 18,
	wdArtStars	= 19,
	wdArtSun	= 20,
	wdArtEarth2	= 21,
	wdArtEarth1	= 22,
	wdArtPeopleHats	= 23,
	wdArtSombrero	= 24,
	wdArtPencils	= 25,
	wdArtPackages	= 26,
	wdArtClocks	= 27,
	wdArtFirecrackers	= 28,
	wdArtRings	= 29,
	wdArtMapPins	= 30,
	wdArtConfetti	= 31,
	wdArtCreaturesButterfly	= 32,
	wdArtCreaturesLadyBug	= 33,
	wdArtCreaturesFish	= 34,
	wdArtBirdsFlight	= 35,
	wdArtScaredCat	= 36,
	wdArtBats	= 37,
	wdArtFlowersRoses	= 38,
	wdArtFlowersRedRose	= 39,
	wdArtPoinsettias	= 40,
	wdArtHolly	= 41,
	wdArtFlowersTiny	= 42,
	wdArtFlowersPansy	= 43,
	wdArtFlowersModern2	= 44,
	wdArtFlowersModern1	= 45,
	wdArtWhiteFlowers	= 46,
	wdArtVine	= 47,
	wdArtFlowersDaisies	= 48,
	wdArtFlowersBlockPrint	= 49,
	wdArtDecoArchColor	= 50,
	wdArtFans	= 51,
	wdArtFilm	= 52,
	wdArtLightning1	= 53,
	wdArtCompass	= 54,
	wdArtDoubleD	= 55,
	wdArtClassicalWave	= 56,
	wdArtShadowedSquares	= 57,
	wdArtTwistedLines1	= 58,
	wdArtWaveline	= 59,
	wdArtQuadrants	= 60,
	wdArtCheckedBarColor	= 61,
	wdArtSwirligig	= 62,
	wdArtPushPinNote1	= 63,
	wdArtPushPinNote2	= 64,
	wdArtPumpkin1	= 65,
	wdArtEggsBlack	= 66,
	wdArtCup	= 67,
	wdArtHeartGray	= 68,
	wdArtGingerbreadMan	= 69,
	wdArtBabyPacifier	= 70,
	wdArtBabyRattle	= 71,
	wdArtCabins	= 72,
	wdArtHouseFunky	= 73,
	wdArtStarsBlack	= 74,
	wdArtSnowflakes	= 75,
	wdArtSnowflakeFancy	= 76,
	wdArtSkyrocket	= 77,
	wdArtSeattle	= 78,
	wdArtMusicNotes	= 79,
	wdArtPalmsBlack	= 80,
	wdArtMapleLeaf	= 81,
	wdArtPaperClips	= 82,
	wdArtShorebirdTracks	= 83,
	wdArtPeople	= 84,
	wdArtPeopleWaving	= 85,
	wdArtEclipsingSquares2	= 86,
	wdArtHypnotic	= 87,
	wdArtDiamondsGray	= 88,
	wdArtDecoArch	= 89,
	wdArtDecoBlocks	= 90,
	wdArtCirclesLines	= 91,
	wdArtPapyrus	= 92,
	wdArtWoodwork	= 93,
	wdArtWeavingBraid	= 94,
	wdArtWeavingRibbon	= 95,
	wdArtWeavingAngles	= 96,
	wdArtArchedScallops	= 97,
	wdArtSafari	= 98,
	wdArtCelticKnotwork	= 99,
	wdArtCrazyMaze	= 100,
	wdArtEclipsingSquares1	= 101,
	wdArtBirds	= 102,
	wdArtFlowersTeacup	= 103,
	wdArtNorthwest	= 104,
	wdArtSouthwest	= 105,
	wdArtTribal6	= 106,
	wdArtTribal4	= 107,
	wdArtTribal3	= 108,
	wdArtTribal2	= 109,
	wdArtTribal5	= 110,
	wdArtXIllusions	= 111,
	wdArtZanyTriangles	= 112,
	wdArtPyramids	= 113,
	wdArtPyramidsAbove	= 114,
	wdArtConfettiGrays	= 115,
	wdArtConfettiOutline	= 116,
	wdArtConfettiWhite	= 117,
	wdArtMosaic	= 118,
	wdArtLightning2	= 119,
	wdArtHeebieJeebies	= 120,
	wdArtLightBulb	= 121,
	wdArtGradient	= 122,
	wdArtTriangleParty	= 123,
	wdArtTwistedLines2	= 124,
	wdArtMoons	= 125,
	wdArtOvals	= 126,
	wdArtDoubleDiamonds	= 127,
	wdArtChainLink	= 128,
	wdArtTriangles	= 129,
	wdArtTribal1	= 130,
	wdArtMarqueeToothed	= 131,
	wdArtSharksTeeth	= 132,
	wdArtSawtooth	= 133,
	wdArtSawtoothGray	= 134,
	wdArtPostageStamp	= 135,
	wdArtWeavingStrips	= 136,
	wdArtZigZag	= 137,
	wdArtCrossStitch	= 138,
	wdArtGems	= 139,
	wdArtCirclesRectangles	= 140,
	wdArtCornerTriangles	= 141,
	wdArtCreaturesInsects	= 142,
	wdArtZigZagStitch	= 143,
	wdArtCheckered	= 144,
	wdArtCheckedBarBlack	= 145,
	wdArtMarquee	= 146,
	wdArtBasicWhiteDots	= 147,
	wdArtBasicWideMidline	= 148,
	wdArtBasicWideOutline	= 149,
	wdArtBasicWideInline	= 150,
	wdArtBasicThinLines	= 151,
	wdArtBasicWhiteDashes	= 152,
	wdArtBasicWhiteSquares	= 153,
	wdArtBasicBlackSquares	= 154,
	wdArtBasicBlackDashes	= 155,
	wdArtBasicBlackDots	= 156,
	wdArtStarsTop	= 157,
	wdArtCertificateBanner	= 158,
	wdArtHandmade1	= 159,
	wdArtHandmade2	= 160,
	wdArtTornPaper	= 161,
	wdArtTornPaperBlack	= 162,
	wdArtCouponCutoutDashes	= 163,
	wdArtCouponCutoutDots	= 164
    } 	WdPageBorderArt;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0175
    {	wdBorderDistanceFromText	= 0,
	wdBorderDistanceFromPageEdge	= 1
    } 	WdBorderDistanceFrom;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0176
    {	wdReplaceNone	= 0,
	wdReplaceOne	= 1,
	wdReplaceAll	= 2
    } 	WdReplace;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0177
    {	wdFontBiasDontCare	= 255,
	wdFontBiasDefault	= 0,
	wdFontBiasFareast	= 1
    } 	WdFontBias;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0178
    {	wdBrowserLevelV4	= 0,
	wdBrowserLevelMicrosoftInternetExplorer5	= 1,
	wdBrowserLevelMicrosoftInternetExplorer6	= 2
    } 	WdBrowserLevel;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0179
    {	wdEnclosureCircle	= 0,
	wdEnclosureSquare	= 1,
	wdEnclosureTriangle	= 2,
	wdEnclosureDiamond	= 3
    } 	WdEnclosureType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0180
    {	wdEncloseStyleNone	= 0,
	wdEncloseStyleSmall	= 1,
	wdEncloseStyleLarge	= 2
    } 	WdEncloseStyle;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0181
    {	wdHighAnsiIsFarEast	= 0,
	wdHighAnsiIsHighAnsi	= 1,
	wdAutoDetectHighAnsiFarEast	= 2
    } 	WdHighAnsiText;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0182
    {	wdLayoutModeDefault	= 0,
	wdLayoutModeGrid	= 1,
	wdLayoutModeLineGrid	= 2,
	wdLayoutModeGenko	= 3
    } 	WdLayoutMode;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0183
    {	wdEmailMessage	= 0,
	wdDocument	= 1,
	wdWebPage	= 2
    } 	WdDocumentMedium;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0184
    {	wdPriorityNormal	= 1,
	wdPriorityLow	= 2,
	wdPriorityHigh	= 3
    } 	WdMailerPriority;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0185
    {	wdDocumentViewRtl	= 0,
	wdDocumentViewLtr	= 1
    } 	WdDocumentViewDirection;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0186
    {	wdNumeralArabic	= 0,
	wdNumeralHindi	= 1,
	wdNumeralContext	= 2,
	wdNumeralSystem	= 3
    } 	WdArabicNumeral;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0187
    {	wdMonthNamesArabic	= 0,
	wdMonthNamesEnglish	= 1,
	wdMonthNamesFrench	= 2
    } 	WdMonthNames;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0188
    {	wdCursorMovementLogical	= 0,
	wdCursorMovementVisual	= 1
    } 	WdCursorMovement;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0189
    {	wdVisualSelectionBlock	= 0,
	wdVisualSelectionContinuous	= 1
    } 	WdVisualSelection;

typedef /* [public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0190
    {	wdTableDirectionRtl	= 0,
	wdTableDirectionLtr	= 1
    } 	WdTableDirection;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0191
    {	wdFlowLtr	= 0,
	wdFlowRtl	= 1
    } 	WdFlowDirection;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0192
    {	wdDiacriticColorBidi	= 0,
	wdDiacriticColorLatin	= 1
    } 	WdDiacriticColor;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0193
    {	wdGutterPosLeft	= 0,
	wdGutterPosTop	= 1,
	wdGutterPosRight	= 2
    } 	WdGutterStyle;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0194
    {	wdGutterStyleLatin	= 0xfffffff6,
	wdGutterStyleBidi	= 2
    } 	WdGutterStyleOld;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0195
    {	wdSectionDirectionRtl	= 0,
	wdSectionDirectionLtr	= 1
    } 	WdSectionDirection;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0196
    {	wdDateLanguageBidi	= 10,
	wdDateLanguageLatin	= 1033
    } 	WdDateLanguage;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0197
    {	wdCalendarTypeBidi	= 99,
	wdCalendarTypeGregorian	= 100
    } 	WdCalendarTypeBi;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0198
    {	wdCalendarWestern	= 0,
	wdCalendarArabic	= 1,
	wdCalendarHebrew	= 2,
	wdCalendarChina	= 3,
	wdCalendarJapan	= 4,
	wdCalendarThai	= 5,
	wdCalendarKorean	= 6,
	wdCalendarSakaEra	= 7
    } 	WdCalendarType;

typedef /* [public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0199
    {	wdReadingOrderRtl	= 0,
	wdReadingOrderLtr	= 1
    } 	WdReadingOrder;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0200
    {	wdFullScript	= 0,
	wdPartialScript	= 1,
	wdMixedScript	= 2,
	wdMixedAuthorizedScript	= 3
    } 	WdHebSpellStart;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0201
    {	wdNone	= 0,
	wdInitialAlef	= 1,
	wdFinalYaa	= 2,
	wdBoth	= 3
    } 	WdAraSpeller;

typedef /* [public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0202
    {	wdColorAutomatic	= 0xff000000,
	wdColorBlack	= 0,
	wdColorBlue	= 0xff0000,
	wdColorTurquoise	= 0xffff00,
	wdColorBrightGreen	= 65280,
	wdColorPink	= 0xff00ff,
	wdColorRed	= 255,
	wdColorYellow	= 65535,
	wdColorWhite	= 0xffffff,
	wdColorDarkBlue	= 0x800000,
	wdColorTeal	= 0x808000,
	wdColorGreen	= 32768,
	wdColorViolet	= 0x800080,
	wdColorDarkRed	= 128,
	wdColorDarkYellow	= 32896,
	wdColorBrown	= 13209,
	wdColorOliveGreen	= 13107,
	wdColorDarkGreen	= 13056,
	wdColorDarkTeal	= 0x663300,
	wdColorIndigo	= 0x993333,
	wdColorOrange	= 26367,
	wdColorBlueGray	= 0x996666,
	wdColorLightOrange	= 39423,
	wdColorLime	= 52377,
	wdColorSeaGreen	= 0x669933,
	wdColorAqua	= 0xcccc33,
	wdColorLightBlue	= 0xff6633,
	wdColorGold	= 52479,
	wdColorSkyBlue	= 0xffcc00,
	wdColorPlum	= 0x663399,
	wdColorRose	= 0xcc99ff,
	wdColorTan	= 0x99ccff,
	wdColorLightYellow	= 0x99ffff,
	wdColorLightGreen	= 0xccffcc,
	wdColorLightTurquoise	= 0xffffcc,
	wdColorPaleBlue	= 0xffcc99,
	wdColorLavender	= 0xff99cc,
	wdColorGray05	= 0xf3f3f3,
	wdColorGray10	= 0xe6e6e6,
	wdColorGray125	= 0xe0e0e0,
	wdColorGray15	= 0xd9d9d9,
	wdColorGray20	= 0xcccccc,
	wdColorGray25	= 0xc0c0c0,
	wdColorGray30	= 0xb3b3b3,
	wdColorGray35	= 0xa6a6a6,
	wdColorGray375	= 0xa0a0a0,
	wdColorGray40	= 0x999999,
	wdColorGray45	= 0x8c8c8c,
	wdColorGray50	= 0x808080,
	wdColorGray55	= 0x737373,
	wdColorGray60	= 0x666666,
	wdColorGray625	= 0x606060,
	wdColorGray65	= 0x595959,
	wdColorGray70	= 0x4c4c4c,
	wdColorGray75	= 0x404040,
	wdColorGray80	= 0x333333,
	wdColorGray85	= 0x262626,
	wdColorGray875	= 0x202020,
	wdColorGray90	= 0x191919,
	wdColorGray95	= 0xc0c0c
    } 	WdColor;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0203
    {	wdShapeTop	= 0xfff0bdc1,
	wdShapeLeft	= 0xfff0bdc2,
	wdShapeBottom	= 0xfff0bdc3,
	wdShapeRight	= 0xfff0bdc4,
	wdShapeCenter	= 0xfff0bdc5,
	wdShapeInside	= 0xfff0bdc6,
	wdShapeOutside	= 0xfff0bdc7
    } 	WdShapePosition;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0204
    {	wdTableTop	= 0xfff0bdc1,
	wdTableLeft	= 0xfff0bdc2,
	wdTableBottom	= 0xfff0bdc3,
	wdTableRight	= 0xfff0bdc4,
	wdTableCenter	= 0xfff0bdc5,
	wdTableInside	= 0xfff0bdc6,
	wdTableOutside	= 0xfff0bdc7
    } 	WdTablePosition;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0205
    {	wdWord8ListBehavior	= 0,
	wdWord9ListBehavior	= 1,
	wdWord10ListBehavior	= 2
    } 	WdDefaultListBehavior;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0206
    {	wdWord8TableBehavior	= 0,
	wdWord9TableBehavior	= 1
    } 	WdDefaultTableBehavior;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0207
    {	wdAutoFitFixed	= 0,
	wdAutoFitContent	= 1,
	wdAutoFitWindow	= 2
    } 	WdAutoFitBehavior;

typedef /* [public][public][public][public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0208
    {	wdPreferredWidthAuto	= 1,
	wdPreferredWidthPercent	= 2,
	wdPreferredWidthPoints	= 3
    } 	WdPreferredWidthType;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0209
    {	wdLineBreakJapanese	= 1041,
	wdLineBreakKorean	= 1042,
	wdLineBreakSimplifiedChinese	= 2052,
	wdLineBreakTraditionalChinese	= 1028
    } 	WdFarEastLineBreakLanguageID;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0210
    {	wdPageView	= 3,
	wdOnlineView	= 6
    } 	WdViewTypeOld;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0211
    {	wdFramesetTypeFrameset	= 0,
	wdFramesetTypeFrame	= 1
    } 	WdFramesetType;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0212
    {	wdFramesetSizeTypePercent	= 0,
	wdFramesetSizeTypeFixed	= 1,
	wdFramesetSizeTypeRelative	= 2
    } 	WdFramesetSizeType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0213
    {	wdFramesetNewFrameAbove	= 0,
	wdFramesetNewFrameBelow	= 1,
	wdFramesetNewFrameRight	= 2,
	wdFramesetNewFrameLeft	= 3
    } 	WdFramesetNewFrameLocation;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0214
    {	wdScrollbarTypeAuto	= 0,
	wdScrollbarTypeYes	= 1,
	wdScrollbarTypeNo	= 2
    } 	WdScrollbarType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0215
    {	wdTwoLinesInOneNone	= 0,
	wdTwoLinesInOneNoBrackets	= 1,
	wdTwoLinesInOneParentheses	= 2,
	wdTwoLinesInOneSquareBrackets	= 3,
	wdTwoLinesInOneAngleBrackets	= 4,
	wdTwoLinesInOneCurlyBrackets	= 5
    } 	WdTwoLinesInOneType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0216
    {	wdHorizontalInVerticalNone	= 0,
	wdHorizontalInVerticalFitInLine	= 1,
	wdHorizontalInVerticalResizeLine	= 2
    } 	WdHorizontalInVerticalType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0217
    {	wdHorizontalLineAlignLeft	= 0,
	wdHorizontalLineAlignCenter	= 1,
	wdHorizontalLineAlignRight	= 2
    } 	WdHorizontalLineAlignment;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0218
    {	wdHorizontalLinePercentWidth	= 0xffffffff,
	wdHorizontalLineFixedWidth	= 0xfffffffe
    } 	WdHorizontalLineWidthType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0219
    {	wdPhoneticGuideAlignmentCenter	= 0,
	wdPhoneticGuideAlignmentZeroOneZero	= 1,
	wdPhoneticGuideAlignmentOneTwoOne	= 2,
	wdPhoneticGuideAlignmentLeft	= 3,
	wdPhoneticGuideAlignmentRight	= 4,
	wdPhoneticGuideAlignmentRightVertical	= 5
    } 	WdPhoneticGuideAlignmentType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0220
    {	wdNewBlankDocument	= 0,
	wdNewWebPage	= 1,
	wdNewEmailMessage	= 2,
	wdNewFrameset	= 3,
	wdNewXMLDocument	= 4
    } 	WdNewDocumentType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0221
    {	wdKanaKatakana	= 8,
	wdKanaHiragana	= 9
    } 	WdKana;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0222
    {	wdWidthHalfWidth	= 6,
	wdWidthFullWidth	= 7
    } 	WdCharacterWidth;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0223
    {	wdListNumberStyleBidi1	= 49,
	wdListNumberStyleBidi2	= 50,
	wdCaptionNumberStyleBidiLetter1	= 49,
	wdCaptionNumberStyleBidiLetter2	= 50,
	wdNoteNumberStyleBidiLetter1	= 49,
	wdNoteNumberStyleBidiLetter2	= 50,
	wdPageNumberStyleBidiLetter1	= 49,
	wdPageNumberStyleBidiLetter2	= 50
    } 	WdNumberStyleWordBasicBiDi;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0224
    {	wdTCSCConverterDirectionSCTC	= 0,
	wdTCSCConverterDirectionTCSC	= 1,
	wdTCSCConverterDirectionAuto	= 2
    } 	WdTCSCConverterDirection;

typedef /* [public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0225
    {	wd70	= 0,
	wd70FE	= 1,
	wd80	= 2
    } 	WdDisableFeaturesIntroducedAfter;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0226
    {	wdWrapMergeInline	= 0,
	wdWrapMergeSquare	= 1,
	wdWrapMergeTight	= 2,
	wdWrapMergeBehind	= 3,
	wdWrapMergeFront	= 4,
	wdWrapMergeThrough	= 5,
	wdWrapMergeTopBottom	= 6
    } 	WdWrapTypeMerged;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0227
    {	wdPasteDefault	= 0,
	wdSingleCellText	= 5,
	wdSingleCellTable	= 6,
	wdListContinueNumbering	= 7,
	wdListRestartNumbering	= 8,
	wdTableInsertAsRows	= 11,
	wdTableAppendTable	= 10,
	wdTableOriginalFormatting	= 12,
	wdChartPicture	= 13,
	wdChart	= 14,
	wdChartLinked	= 15,
	wdFormatOriginalFormatting	= 16,
	wdFormatSurroundingFormattingWithEmphasis	= 20,
	wdFormatPlainText	= 22,
	wdTableOverwriteCells	= 23,
	wdListCombineWithExistingList	= 24,
	wdListDontMerge	= 25
    } 	WdRecoveryType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0228
    {	wdCRLF	= 0,
	wdCROnly	= 1,
	wdLFOnly	= 2,
	wdLFCR	= 3,
	wdLSPS	= 4
    } 	WdLineEndingType;

typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0229
    {	wdStyleSheetLinkTypeLinked	= 0,
	wdStyleSheetLinkTypeImported	= 1
    } 	WdStyleSheetLinkType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0230
    {	wdStyleSheetPrecedenceHigher	= 0xffffffff,
	wdStyleSheetPrecedenceLower	= 0xfffffffe,
	wdStyleSheetPrecedenceHighest	= 1,
	wdStyleSheetPrecedenceLowest	= 0
    } 	WdStyleSheetPrecedence;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0231
    {	wdEmailHTMLFidelityLow	= 1,
	wdEmailHTMLFidelityMedium	= 2,
	wdEmailHTMLFidelityHigh	= 3
    } 	WdEmailHTMLFidelity;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0232
    {	wdMailFormatPlainText	= 0,
	wdMailFormatHTML	= 1
    } 	WdMailMergeMailFormat;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0233
    {	wdUniqueIdentifier	= 1,
	wdCourtesyTitle	= 2,
	wdFirstName	= 3,
	wdMiddleName	= 4,
	wdLastName	= 5,
	wdSuffix	= 6,
	wdNickname	= 7,
	wdJobTitle	= 8,
	wdCompany	= 9,
	wdAddress1	= 10,
	wdAddress2	= 11,
	wdCity	= 12,
	wdState	= 13,
	wdPostalCode	= 14,
	wdCountryRegion	= 15,
	wdBusinessPhone	= 16,
	wdBusinessFax	= 17,
	wdHomePhone	= 18,
	wdHomeFax	= 19,
	wdEmailAddress	= 20,
	wdWebPageURL	= 21,
	wdSpouseCourtesyTitle	= 22,
	wdSpouseFirstName	= 23,
	wdSpouseMiddleName	= 24,
	wdSpouseLastName	= 25,
	wdSpouseNickname	= 26,
	wdRubyFirstName	= 27,
	wdRubyLastName	= 28,
	wdAddress3	= 29,
	wdDepartment	= 30
    } 	WdMappedDataFields;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0234
    {	wdFirstRow	= 0,
	wdLastRow	= 1,
	wdOddRowBanding	= 2,
	wdEvenRowBanding	= 3,
	wdFirstColumn	= 4,
	wdLastColumn	= 5,
	wdOddColumnBanding	= 6,
	wdEvenColumnBanding	= 7,
	wdNECell	= 8,
	wdNWCell	= 9,
	wdSECell	= 10,
	wdSWCell	= 11
    } 	WdConditionCode;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0235
    {	wdCompareTargetSelected	= 0,
	wdCompareTargetCurrent	= 1,
	wdCompareTargetNew	= 2
    } 	WdCompareTarget;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0236
    {	wdMergeTargetSelected	= 0,
	wdMergeTargetCurrent	= 1,
	wdMergeTargetNew	= 2
    } 	WdMergeTarget;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0237
    {	wdFormattingFromCurrent	= 0,
	wdFormattingFromSelected	= 1,
	wdFormattingFromPrompt	= 2
    } 	WdUseFormattingFrom;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0238
    {	wdRevisionsViewFinal	= 0,
	wdRevisionsViewOriginal	= 1
    } 	WdRevisionsView;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0239
    {	wdBalloonRevisions	= 0,
	wdInLineRevisions	= 1,
	wdMixedRevisions	= 2
    } 	WdRevisionsMode;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0240
    {	wdBalloonWidthPercent	= 0,
	wdBalloonWidthPoints	= 1
    } 	WdRevisionsBalloonWidthType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0241
    {	wdBalloonPrintOrientationAuto	= 0,
	wdBalloonPrintOrientationPreserve	= 1,
	wdBalloonPrintOrientationForceLandscape	= 2
    } 	WdRevisionsBalloonPrintOrientation;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0242
    {	wdLeftMargin	= 0,
	wdRightMargin	= 1
    } 	WdRevisionsBalloonMargin;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0243
    {	wdTaskPaneFormatting	= 0,
	wdTaskPaneRevealFormatting	= 1,
	wdTaskPaneMailMerge	= 2,
	wdTaskPaneTranslate	= 3,
	wdTaskPaneSearch	= 4,
	wdTaskPaneXMLStructure	= 5,
	wdTaskPaneDocumentProtection	= 6,
	wdTaskPaneDocumentActions	= 7,
	wdTaskPaneSharedWorkspace	= 8,
	wdTaskPaneHelp	= 9,
	wdTaskPaneResearch	= 10,
	wdTaskPaneFaxService	= 11,
	wdTaskPaneXMLDocument	= 12,
	wdTaskPaneDocumentUpdates	= 13
    } 	WdTaskPanes;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0244
    {	wdShowFilterStylesAvailable	= 0,
	wdShowFilterStylesInUse	= 1,
	wdShowFilterStylesAll	= 2,
	wdShowFilterFormattingInUse	= 3,
	wdShowFilterFormattingAvailable	= 4
    } 	WdShowFilter;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0245
    {	wdMergeSubTypeOther	= 0,
	wdMergeSubTypeAccess	= 1,
	wdMergeSubTypeOAL	= 2,
	wdMergeSubTypeOLEDBWord	= 3,
	wdMergeSubTypeWorks	= 4,
	wdMergeSubTypeOLEDBText	= 5,
	wdMergeSubTypeOutlook	= 6,
	wdMergeSubTypeWord	= 7,
	wdMergeSubTypeWord2000	= 8
    } 	WdMergeSubType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0246
    {	wdLeftToRight	= 0,
	wdRightToLeft	= 1
    } 	WdDocumentDirection;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0247
    {	wdChineseHongKong	= 3076,
	wdChineseMacao	= 5124,
	wdEnglishTrinidad	= 11273
    } 	WdLanguageID2000;

//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0248
//    {	msoAutomationSecurityLow	= 1,
//	msoAutomationSecurityByUI	= 2,
//	msoAutomationSecurityForceDisable	= 3
//    } 	MsoAutomationSecurity;

//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0249
//    {	msoLineDashStyleMixed	= 0xfffffffe,
//	msoLineSolid	= 1,
//	msoLineSquareDot	= 2,
//	msoLineRoundDot	= 3,
//	msoLineDash	= 4,
//	msoLineDashDot	= 5,
//	msoLineDashDotDot	= 6,
//	msoLineLongDash	= 7,
//	msoLineLongDashDot	= 8
//    } 	MsoLineDashStyle;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0250
//    {	msoLineStyleMixed	= 0xfffffffe,
//	msoLineSingle	= 1,
//	msoLineThinThin	= 2,
//	msoLineThinThick	= 3,
//	msoLineThickThin	= 4,
//	msoLineThickBetweenThin	= 5
//    } 	MsoLineStyle;
//
//typedef /* [public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0251
//    {	msoArrowheadStyleMixed	= 0xfffffffe,
//	msoArrowheadNone	= 1,
//	msoArrowheadTriangle	= 2,
//	msoArrowheadOpen	= 3,
//	msoArrowheadStealth	= 4,
//	msoArrowheadDiamond	= 5,
//	msoArrowheadOval	= 6
//    } 	MsoArrowheadStyle;
//
//typedef /* [public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0252
//    {	msoArrowheadWidthMixed	= 0xfffffffe,
//	msoArrowheadNarrow	= 1,
//	msoArrowheadWidthMedium	= 2,
//	msoArrowheadWide	= 3
//    } 	MsoArrowheadWidth;
//
//typedef /* [public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0253
//    {	msoArrowheadLengthMixed	= 0xfffffffe,
//	msoArrowheadShort	= 1,
//	msoArrowheadLengthMedium	= 2,
//	msoArrowheadLong	= 3
//    } 	MsoArrowheadLength;
//
//typedef /* [public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0254
//    {	msoFillMixed	= 0xfffffffe,
//	msoFillSolid	= 1,
//	msoFillPatterned	= 2,
//	msoFillGradient	= 3,
//	msoFillTextured	= 4,
//	msoFillBackground	= 5,
//	msoFillPicture	= 6
//    } 	MsoFillType;
//
//typedef /* [public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0255
//    {	msoGradientMixed	= 0xfffffffe,
//	msoGradientHorizontal	= 1,
//	msoGradientVertical	= 2,
//	msoGradientDiagonalUp	= 3,
//	msoGradientDiagonalDown	= 4,
//	msoGradientFromCorner	= 5,
//	msoGradientFromTitle	= 6,
//	msoGradientFromCenter	= 7
//    } 	MsoGradientStyle;
//
//typedef /* [public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0256
//    {	msoGradientColorMixed	= 0xfffffffe,
//	msoGradientOneColor	= 1,
//	msoGradientTwoColors	= 2,
//	msoGradientPresetColors	= 3
//    } 	MsoGradientColorType;
//
//typedef /* [public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0257
//    {	msoTextureTypeMixed	= 0xfffffffe,
//	msoTexturePreset	= 1,
//	msoTextureUserDefined	= 2
//    } 	MsoTextureType;

//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0258
//    {	msoPresetTextureMixed	= 0xfffffffe,
//	msoTexturePapyrus	= 1,
//	msoTextureCanvas	= 2,
//	msoTextureDenim	= 3,
//	msoTextureWovenMat	= 4,
//	msoTextureWaterDroplets	= 5,
//	msoTexturePaperBag	= 6,
//	msoTextureFishFossil	= 7,
//	msoTextureSand	= 8,
//	msoTextureGreenMarble	= 9,
//	msoTextureWhiteMarble	= 10,
//	msoTextureBrownMarble	= 11,
//	msoTextureGranite	= 12,
//	msoTextureNewsprint	= 13,
//	msoTextureRecycledPaper	= 14,
//	msoTextureParchment	= 15,
//	msoTextureStationery	= 16,
//	msoTextureBlueTissuePaper	= 17,
//	msoTexturePinkTissuePaper	= 18,
//	msoTexturePurpleMesh	= 19,
//	msoTextureBouquet	= 20,
//	msoTextureCork	= 21,
//	msoTextureWalnut	= 22,
//	msoTextureOak	= 23,
//	msoTextureMediumWood	= 24
//    } 	MsoPresetTexture;
//
//typedef /* [public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0259
//    {	msoPatternMixed	= 0xfffffffe,
//	msoPattern5Percent	= 1,
//	msoPattern10Percent	= 2,
//	msoPattern20Percent	= 3,
//	msoPattern25Percent	= 4,
//	msoPattern30Percent	= 5,
//	msoPattern40Percent	= 6,
//	msoPattern50Percent	= 7,
//	msoPattern60Percent	= 8,
//	msoPattern70Percent	= 9,
//	msoPattern75Percent	= 10,
//	msoPattern80Percent	= 11,
//	msoPattern90Percent	= 12,
//	msoPatternDarkHorizontal	= 13,
//	msoPatternDarkVertical	= 14,
//	msoPatternDarkDownwardDiagonal	= 15,
//	msoPatternDarkUpwardDiagonal	= 16,
//	msoPatternSmallCheckerBoard	= 17,
//	msoPatternTrellis	= 18,
//	msoPatternLightHorizontal	= 19,
//	msoPatternLightVertical	= 20,
//	msoPatternLightDownwardDiagonal	= 21,
//	msoPatternLightUpwardDiagonal	= 22,
//	msoPatternSmallGrid	= 23,
//	msoPatternDottedDiamond	= 24,
//	msoPatternWideDownwardDiagonal	= 25,
//	msoPatternWideUpwardDiagonal	= 26,
//	msoPatternDashedUpwardDiagonal	= 27,
//	msoPatternDashedDownwardDiagonal	= 28,
//	msoPatternNarrowVertical	= 29,
//	msoPatternNarrowHorizontal	= 30,
//	msoPatternDashedVertical	= 31,
//	msoPatternDashedHorizontal	= 32,
//	msoPatternLargeConfetti	= 33,
//	msoPatternLargeGrid	= 34,
//	msoPatternHorizontalBrick	= 35,
//	msoPatternLargeCheckerBoard	= 36,
//	msoPatternSmallConfetti	= 37,
//	msoPatternZigZag	= 38,
//	msoPatternSolidDiamond	= 39,
//	msoPatternDiagonalBrick	= 40,
//	msoPatternOutlinedDiamond	= 41,
//	msoPatternPlaid	= 42,
//	msoPatternSphere	= 43,
//	msoPatternWeave	= 44,
//	msoPatternDottedGrid	= 45,
//	msoPatternDivot	= 46,
//	msoPatternShingle	= 47,
//	msoPatternWave	= 48
//    } 	MsoPatternType;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0260
//    {	msoPresetGradientMixed	= 0xfffffffe,
//	msoGradientEarlySunset	= 1,
//	msoGradientLateSunset	= 2,
//	msoGradientNightfall	= 3,
//	msoGradientDaybreak	= 4,
//	msoGradientHorizon	= 5,
//	msoGradientDesert	= 6,
//	msoGradientOcean	= 7,
//	msoGradientCalmWater	= 8,
//	msoGradientFire	= 9,
//	msoGradientFog	= 10,
//	msoGradientMoss	= 11,
//	msoGradientPeacock	= 12,
//	msoGradientWheat	= 13,
//	msoGradientParchment	= 14,
//	msoGradientMahogany	= 15,
//	msoGradientRainbow	= 16,
//	msoGradientRainbowII	= 17,
//	msoGradientGold	= 18,
//	msoGradientGoldII	= 19,
//	msoGradientBrass	= 20,
//	msoGradientChrome	= 21,
//	msoGradientChromeII	= 22,
//	msoGradientSilver	= 23,
//	msoGradientSapphire	= 24
//    } 	MsoPresetGradientType;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0261
//    {	msoShadowMixed	= 0xfffffffe,
//	msoShadow1	= 1,
//	msoShadow2	= 2,
//	msoShadow3	= 3,
//	msoShadow4	= 4,
//	msoShadow5	= 5,
//	msoShadow6	= 6,
//	msoShadow7	= 7,
//	msoShadow8	= 8,
//	msoShadow9	= 9,
//	msoShadow10	= 10,
//	msoShadow11	= 11,
//	msoShadow12	= 12,
//	msoShadow13	= 13,
//	msoShadow14	= 14,
//	msoShadow15	= 15,
//	msoShadow16	= 16,
//	msoShadow17	= 17,
//	msoShadow18	= 18,
//	msoShadow19	= 19,
//	msoShadow20	= 20
//    } 	MsoShadowType;
//
//typedef /* [public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0262
//    {	msoTextEffectMixed	= 0xfffffffe,
//	msoTextEffect1	= 0,
//	msoTextEffect2	= 1,
//	msoTextEffect3	= 2,
//	msoTextEffect4	= 3,
//	msoTextEffect5	= 4,
//	msoTextEffect6	= 5,
//	msoTextEffect7	= 6,
//	msoTextEffect8	= 7,
//	msoTextEffect9	= 8,
//	msoTextEffect10	= 9,
//	msoTextEffect11	= 10,
//	msoTextEffect12	= 11,
//	msoTextEffect13	= 12,
//	msoTextEffect14	= 13,
//	msoTextEffect15	= 14,
//	msoTextEffect16	= 15,
//	msoTextEffect17	= 16,
//	msoTextEffect18	= 17,
//	msoTextEffect19	= 18,
//	msoTextEffect20	= 19,
//	msoTextEffect21	= 20,
//	msoTextEffect22	= 21,
//	msoTextEffect23	= 22,
//	msoTextEffect24	= 23,
//	msoTextEffect25	= 24,
//	msoTextEffect26	= 25,
//	msoTextEffect27	= 26,
//	msoTextEffect28	= 27,
//	msoTextEffect29	= 28,
//	msoTextEffect30	= 29
//    } 	MsoPresetTextEffect;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0263
//    {	msoTextEffectShapeMixed	= 0xfffffffe,
//	msoTextEffectShapePlainText	= 1,
//	msoTextEffectShapeStop	= 2,
//	msoTextEffectShapeTriangleUp	= 3,
//	msoTextEffectShapeTriangleDown	= 4,
//	msoTextEffectShapeChevronUp	= 5,
//	msoTextEffectShapeChevronDown	= 6,
//	msoTextEffectShapeRingInside	= 7,
//	msoTextEffectShapeRingOutside	= 8,
//	msoTextEffectShapeArchUpCurve	= 9,
//	msoTextEffectShapeArchDownCurve	= 10,
//	msoTextEffectShapeCircleCurve	= 11,
//	msoTextEffectShapeButtonCurve	= 12,
//	msoTextEffectShapeArchUpPour	= 13,
//	msoTextEffectShapeArchDownPour	= 14,
//	msoTextEffectShapeCirclePour	= 15,
//	msoTextEffectShapeButtonPour	= 16,
//	msoTextEffectShapeCurveUp	= 17,
//	msoTextEffectShapeCurveDown	= 18,
//	msoTextEffectShapeCanUp	= 19,
//	msoTextEffectShapeCanDown	= 20,
//	msoTextEffectShapeWave1	= 21,
//	msoTextEffectShapeWave2	= 22,
//	msoTextEffectShapeDoubleWave1	= 23,
//	msoTextEffectShapeDoubleWave2	= 24,
//	msoTextEffectShapeInflate	= 25,
//	msoTextEffectShapeDeflate	= 26,
//	msoTextEffectShapeInflateBottom	= 27,
//	msoTextEffectShapeDeflateBottom	= 28,
//	msoTextEffectShapeInflateTop	= 29,
//	msoTextEffectShapeDeflateTop	= 30,
//	msoTextEffectShapeDeflateInflate	= 31,
//	msoTextEffectShapeDeflateInflateDeflate	= 32,
//	msoTextEffectShapeFadeRight	= 33,
//	msoTextEffectShapeFadeLeft	= 34,
//	msoTextEffectShapeFadeUp	= 35,
//	msoTextEffectShapeFadeDown	= 36,
//	msoTextEffectShapeSlantUp	= 37,
//	msoTextEffectShapeSlantDown	= 38,
//	msoTextEffectShapeCascadeUp	= 39,
//	msoTextEffectShapeCascadeDown	= 40
//    } 	MsoPresetTextEffectShape;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0264
//    {	msoTextEffectAlignmentMixed	= 0xfffffffe,
//	msoTextEffectAlignmentLeft	= 1,
//	msoTextEffectAlignmentCentered	= 2,
//	msoTextEffectAlignmentRight	= 3,
//	msoTextEffectAlignmentLetterJustify	= 4,
//	msoTextEffectAlignmentWordJustify	= 5,
//	msoTextEffectAlignmentStretchJustify	= 6
//    } 	MsoTextEffectAlignment;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0265
//    {	msoPresetLightingDirectionMixed	= 0xfffffffe,
//	msoLightingTopLeft	= 1,
//	msoLightingTop	= 2,
//	msoLightingTopRight	= 3,
//	msoLightingLeft	= 4,
//	msoLightingNone	= 5,
//	msoLightingRight	= 6,
//	msoLightingBottomLeft	= 7,
//	msoLightingBottom	= 8,
//	msoLightingBottomRight	= 9
//    } 	MsoPresetLightingDirection;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0266
//    {	msoPresetLightingSoftnessMixed	= 0xfffffffe,
//	msoLightingDim	= 1,
//	msoLightingNormal	= 2,
//	msoLightingBright	= 3
//    } 	MsoPresetLightingSoftness;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0267
//    {	msoPresetMaterialMixed	= 0xfffffffe,
//	msoMaterialMatte	= 1,
//	msoMaterialPlastic	= 2,
//	msoMaterialMetal	= 3,
//	msoMaterialWireFrame	= 4
//    } 	MsoPresetMaterial;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0268
//    {	msoPresetExtrusionDirectionMixed	= 0xfffffffe,
//	msoExtrusionBottomRight	= 1,
//	msoExtrusionBottom	= 2,
//	msoExtrusionBottomLeft	= 3,
//	msoExtrusionRight	= 4,
//	msoExtrusionNone	= 5,
//	msoExtrusionLeft	= 6,
//	msoExtrusionTopRight	= 7,
//	msoExtrusionTop	= 8,
//	msoExtrusionTopLeft	= 9
//    } 	MsoPresetExtrusionDirection;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0269
//    {	msoPresetThreeDFormatMixed	= 0xfffffffe,
//	msoThreeD1	= 1,
//	msoThreeD2	= 2,
//	msoThreeD3	= 3,
//	msoThreeD4	= 4,
//	msoThreeD5	= 5,
//	msoThreeD6	= 6,
//	msoThreeD7	= 7,
//	msoThreeD8	= 8,
//	msoThreeD9	= 9,
//	msoThreeD10	= 10,
//	msoThreeD11	= 11,
//	msoThreeD12	= 12,
//	msoThreeD13	= 13,
//	msoThreeD14	= 14,
//	msoThreeD15	= 15,
//	msoThreeD16	= 16,
//	msoThreeD17	= 17,
//	msoThreeD18	= 18,
//	msoThreeD19	= 19,
//	msoThreeD20	= 20
//    } 	MsoPresetThreeDFormat;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0270
//    {	msoExtrusionColorTypeMixed	= 0xfffffffe,
//	msoExtrusionColorAutomatic	= 1,
//	msoExtrusionColorCustom	= 2
//    } 	MsoExtrusionColorType;
//
//typedef /* [public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0271
//    {	msoAlignLefts	= 0,
//	msoAlignCenters	= 1,
//	msoAlignRights	= 2,
//	msoAlignTops	= 3,
//	msoAlignMiddles	= 4,
//	msoAlignBottoms	= 5
//    } 	MsoAlignCmd;
//
//typedef /* [public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0272
//    {	msoDistributeHorizontally	= 0,
//	msoDistributeVertically	= 1
//    } 	MsoDistributeCmd;
//
//typedef /* [public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0273
//    {	msoConnectorTypeMixed	= 0xfffffffe,
//	msoConnectorStraight	= 1,
//	msoConnectorElbow	= 2,
//	msoConnectorCurve	= 3
//    } 	MsoConnectorType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0274
//    {	msoHorizontalAnchorMixed	= 0xfffffffe,
//	msoAnchorNone	= 1,
//	msoAnchorCenter	= 2
//    } 	MsoHorizontalAnchor;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0275
//    {	msoVerticalAnchorMixed	= 0xfffffffe,
//	msoAnchorTop	= 1,
//	msoAnchorTopBaseline	= 2,
//	msoAnchorMiddle	= 3,
//	msoAnchorBottom	= 4,
//	msoAnchorBottomBaseLine	= 5
//    } 	MsoVerticalAnchor;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0276
//    {	msoOrientationMixed	= 0xfffffffe,
//	msoOrientationHorizontal	= 1,
//	msoOrientationVertical	= 2
//    } 	MsoOrientation;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0277
//    {	msoBringToFront	= 0,
//	msoSendToBack	= 1,
//	msoBringForward	= 2,
//	msoSendBackward	= 3,
//	msoBringInFrontOfText	= 4,
//	msoSendBehindText	= 5
//    } 	MsoZOrderCmd;
//
//typedef /* [public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0278
//    {	msoSegmentLine	= 0,
//	msoSegmentCurve	= 1
//    } 	MsoSegmentType;
//
//typedef /* [public][public][public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0279
//    {	msoEditingAuto	= 0,
//	msoEditingCorner	= 1,
//	msoEditingSmooth	= 2,
//	msoEditingSymmetric	= 3
//    } 	MsoEditingType;
//
//typedef /* [public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0280
//    {	msoShapeMixed	= 0xfffffffe,
//	msoShapeRectangle	= 1,
//	msoShapeParallelogram	= 2,
//	msoShapeTrapezoid	= 3,
//	msoShapeDiamond	= 4,
//	msoShapeRoundedRectangle	= 5,
//	msoShapeOctagon	= 6,
//	msoShapeIsoscelesTriangle	= 7,
//	msoShapeRightTriangle	= 8,
//	msoShapeOval	= 9,
//	msoShapeHexagon	= 10,
//	msoShapeCross	= 11,
//	msoShapeRegularPentagon	= 12,
//	msoShapeCan	= 13,
//	msoShapeCube	= 14,
//	msoShapeBevel	= 15,
//	msoShapeFoldedCorner	= 16,
//	msoShapeSmileyFace	= 17,
//	msoShapeDonut	= 18,
//	msoShapeNoSymbol	= 19,
//	msoShapeBlockArc	= 20,
//	msoShapeHeart	= 21,
//	msoShapeLightningBolt	= 22,
//	msoShapeSun	= 23,
//	msoShapeMoon	= 24,
//	msoShapeArc	= 25,
//	msoShapeDoubleBracket	= 26,
//	msoShapeDoubleBrace	= 27,
//	msoShapePlaque	= 28,
//	msoShapeLeftBracket	= 29,
//	msoShapeRightBracket	= 30,
//	msoShapeLeftBrace	= 31,
//	msoShapeRightBrace	= 32,
//	msoShapeRightArrow	= 33,
//	msoShapeLeftArrow	= 34,
//	msoShapeUpArrow	= 35,
//	msoShapeDownArrow	= 36,
//	msoShapeLeftRightArrow	= 37,
//	msoShapeUpDownArrow	= 38,
//	msoShapeQuadArrow	= 39,
//	msoShapeLeftRightUpArrow	= 40,
//	msoShapeBentArrow	= 41,
//	msoShapeUTurnArrow	= 42,
//	msoShapeLeftUpArrow	= 43,
//	msoShapeBentUpArrow	= 44,
//	msoShapeCurvedRightArrow	= 45,
//	msoShapeCurvedLeftArrow	= 46,
//	msoShapeCurvedUpArrow	= 47,
//	msoShapeCurvedDownArrow	= 48,
//	msoShapeStripedRightArrow	= 49,
//	msoShapeNotchedRightArrow	= 50,
//	msoShapePentagon	= 51,
//	msoShapeChevron	= 52,
//	msoShapeRightArrowCallout	= 53,
//	msoShapeLeftArrowCallout	= 54,
//	msoShapeUpArrowCallout	= 55,
//	msoShapeDownArrowCallout	= 56,
//	msoShapeLeftRightArrowCallout	= 57,
//	msoShapeUpDownArrowCallout	= 58,
//	msoShapeQuadArrowCallout	= 59,
//	msoShapeCircularArrow	= 60,
//	msoShapeFlowchartProcess	= 61,
//	msoShapeFlowchartAlternateProcess	= 62,
//	msoShapeFlowchartDecision	= 63,
//	msoShapeFlowchartData	= 64,
//	msoShapeFlowchartPredefinedProcess	= 65,
//	msoShapeFlowchartInternalStorage	= 66,
//	msoShapeFlowchartDocument	= 67,
//	msoShapeFlowchartMultidocument	= 68,
//	msoShapeFlowchartTerminator	= 69,
//	msoShapeFlowchartPreparation	= 70,
//	msoShapeFlowchartManualInput	= 71,
//	msoShapeFlowchartManualOperation	= 72,
//	msoShapeFlowchartConnector	= 73,
//	msoShapeFlowchartOffpageConnector	= 74,
//	msoShapeFlowchartCard	= 75,
//	msoShapeFlowchartPunchedTape	= 76,
//	msoShapeFlowchartSummingJunction	= 77,
//	msoShapeFlowchartOr	= 78,
//	msoShapeFlowchartCollate	= 79,
//	msoShapeFlowchartSort	= 80,
//	msoShapeFlowchartExtract	= 81,
//	msoShapeFlowchartMerge	= 82,
//	msoShapeFlowchartStoredData	= 83,
//	msoShapeFlowchartDelay	= 84,
//	msoShapeFlowchartSequentialAccessStorage	= 85,
//	msoShapeFlowchartMagneticDisk	= 86,
//	msoShapeFlowchartDirectAccessStorage	= 87,
//	msoShapeFlowchartDisplay	= 88,
//	msoShapeExplosion1	= 89,
//	msoShapeExplosion2	= 90,
//	msoShape4pointStar	= 91,
//	msoShape5pointStar	= 92,
//	msoShape8pointStar	= 93,
//	msoShape16pointStar	= 94,
//	msoShape24pointStar	= 95,
//	msoShape32pointStar	= 96,
//	msoShapeUpRibbon	= 97,
//	msoShapeDownRibbon	= 98,
//	msoShapeCurvedUpRibbon	= 99,
//	msoShapeCurvedDownRibbon	= 100,
//	msoShapeVerticalScroll	= 101,
//	msoShapeHorizontalScroll	= 102,
//	msoShapeWave	= 103,
//	msoShapeDoubleWave	= 104,
//	msoShapeRectangularCallout	= 105,
//	msoShapeRoundedRectangularCallout	= 106,
//	msoShapeOvalCallout	= 107,
//	msoShapeCloudCallout	= 108,
//	msoShapeLineCallout1	= 109,
//	msoShapeLineCallout2	= 110,
//	msoShapeLineCallout3	= 111,
//	msoShapeLineCallout4	= 112,
//	msoShapeLineCallout1AccentBar	= 113,
//	msoShapeLineCallout2AccentBar	= 114,
//	msoShapeLineCallout3AccentBar	= 115,
//	msoShapeLineCallout4AccentBar	= 116,
//	msoShapeLineCallout1NoBorder	= 117,
//	msoShapeLineCallout2NoBorder	= 118,
//	msoShapeLineCallout3NoBorder	= 119,
//	msoShapeLineCallout4NoBorder	= 120,
//	msoShapeLineCallout1BorderandAccentBar	= 121,
//	msoShapeLineCallout2BorderandAccentBar	= 122,
//	msoShapeLineCallout3BorderandAccentBar	= 123,
//	msoShapeLineCallout4BorderandAccentBar	= 124,
//	msoShapeActionButtonCustom	= 125,
//	msoShapeActionButtonHome	= 126,
//	msoShapeActionButtonHelp	= 127,
//	msoShapeActionButtonInformation	= 128,
//	msoShapeActionButtonBackorPrevious	= 129,
//	msoShapeActionButtonForwardorNext	= 130,
//	msoShapeActionButtonBeginning	= 131,
//	msoShapeActionButtonEnd	= 132,
//	msoShapeActionButtonReturn	= 133,
//	msoShapeActionButtonDocument	= 134,
//	msoShapeActionButtonSound	= 135,
//	msoShapeActionButtonMovie	= 136,
//	msoShapeBalloon	= 137,
//	msoShapeNotPrimitive	= 138
//    } 	MsoAutoShapeType;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0281
//    {	msoShapeTypeMixed	= 0xfffffffe,
//	msoAutoShape	= 1,
//	msoCallout	= 2,
//	msoChart	= 3,
//	msoComment	= 4,
//	msoFreeform	= 5,
//	msoGroup	= 6,
//	msoEmbeddedOLEObject	= 7,
//	msoFormControl	= 8,
//	msoLine	= 9,
//	msoLinkedOLEObject	= 10,
//	msoLinkedPicture	= 11,
//	msoOLEControlObject	= 12,
//	msoPicture	= 13,
//	msoPlaceholder	= 14,
//	msoTextEffect	= 15,
//	msoMedia	= 16,
//	msoTextBox	= 17,
//	msoScriptAnchor	= 18,
//	msoTable	= 19,
//	msoCanvas	= 20,
//	msoDiagram	= 21,
//	msoInk	= 22,
//	msoInkComment	= 23
//    } 	MsoShapeType;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0282
//    {	msoFlipHorizontal	= 0,
//	msoFlipVertical	= 1
//    } 	MsoFlipCmd;
//
//typedef /* [public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0283
//    {	msoTrue	= 0xffffffff,
//	msoFalse	= 0,
//	msoCTrue	= 1,
//	msoTriStateToggle	= 0xfffffffd,
//	msoTriStateMixed	= 0xfffffffe
//    } 	MsoTriState;
//
//typedef /* [public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0284
//    {	msoColorTypeMixed	= 0xfffffffe,
//	msoColorTypeRGB	= 1,
//	msoColorTypeScheme	= 2,
//	msoColorTypeCMYK	= 3,
//	msoColorTypeCMS	= 4,
//	msoColorTypeInk	= 5
//    } 	MsoColorType;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0285
//    {	msoPictureMixed	= 0xfffffffe,
//	msoPictureAutomatic	= 1,
//	msoPictureGrayscale	= 2,
//	msoPictureBlackAndWhite	= 3,
//	msoPictureWatermark	= 4
//    } 	MsoPictureColorType;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0286
//    {	msoCalloutAngleMixed	= 0xfffffffe,
//	msoCalloutAngleAutomatic	= 1,
//	msoCalloutAngle30	= 2,
//	msoCalloutAngle45	= 3,
//	msoCalloutAngle60	= 4,
//	msoCalloutAngle90	= 5
//    } 	MsoCalloutAngleType;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0287
//    {	msoCalloutDropMixed	= 0xfffffffe,
//	msoCalloutDropCustom	= 1,
//	msoCalloutDropTop	= 2,
//	msoCalloutDropCenter	= 3,
//	msoCalloutDropBottom	= 4
//    } 	MsoCalloutDropType;
//
//typedef /* [public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0288
//    {	msoCalloutMixed	= 0xfffffffe,
//	msoCalloutOne	= 1,
//	msoCalloutTwo	= 2,
//	msoCalloutThree	= 3,
//	msoCalloutFour	= 4
//    } 	MsoCalloutType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0289
//    {	msoBlackWhiteMixed	= 0xfffffffe,
//	msoBlackWhiteAutomatic	= 1,
//	msoBlackWhiteGrayScale	= 2,
//	msoBlackWhiteLightGrayScale	= 3,
//	msoBlackWhiteInverseGrayScale	= 4,
//	msoBlackWhiteGrayOutline	= 5,
//	msoBlackWhiteBlackTextAndLine	= 6,
//	msoBlackWhiteHighContrast	= 7,
//	msoBlackWhiteBlack	= 8,
//	msoBlackWhiteWhite	= 9,
//	msoBlackWhiteDontShow	= 10
//    } 	MsoBlackWhiteMode;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0290
//    {	msoIntegerMixed	= 32768,
//	msoSingleMixed	= 0x80000000
//    } 	MsoMixedType;
//
//typedef /* [public][public][public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0291
//    {	msoTextOrientationMixed	= 0xfffffffe,
//	msoTextOrientationHorizontal	= 1,
//	msoTextOrientationUpward	= 2,
//	msoTextOrientationDownward	= 3,
//	msoTextOrientationVerticalFarEast	= 4,
//	msoTextOrientationVertical	= 5,
//	msoTextOrientationHorizontalRotatedFarEast	= 6
//    } 	MsoTextOrientation;
//
//typedef /* [public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0292
//    {	msoScaleFromTopLeft	= 0,
//	msoScaleFromMiddle	= 1,
//	msoScaleFromBottomRight	= 2
//    } 	MsoScaleFrom;
//
//typedef /* [public] */ long MsoRGBType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0293
//    {	msoBarLeft	= 0,
//	msoBarTop	= 1,
//	msoBarRight	= 2,
//	msoBarBottom	= 3,
//	msoBarFloating	= 4,
//	msoBarPopup	= 5,
//	msoBarMenuBar	= 6
//    } 	MsoBarPosition;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0294
//    {	msoBarNoProtection	= 0,
//	msoBarNoCustomize	= 1,
//	msoBarNoResize	= 2,
//	msoBarNoMove	= 4,
//	msoBarNoChangeVisible	= 8,
//	msoBarNoChangeDock	= 16,
//	msoBarNoVerticalDock	= 32,
//	msoBarNoHorizontalDock	= 64
//    } 	MsoBarProtection;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0295
//    {	msoBarTypeNormal	= 0,
//	msoBarTypeMenuBar	= 1,
//	msoBarTypePopup	= 2
//    } 	MsoBarType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0296
//    {	msoControlCustom	= 0,
//	msoControlButton	= 1,
//	msoControlEdit	= 2,
//	msoControlDropdown	= 3,
//	msoControlComboBox	= 4,
//	msoControlButtonDropdown	= 5,
//	msoControlSplitDropdown	= 6,
//	msoControlOCXDropdown	= 7,
//	msoControlGenericDropdown	= 8,
//	msoControlGraphicDropdown	= 9,
//	msoControlPopup	= 10,
//	msoControlGraphicPopup	= 11,
//	msoControlButtonPopup	= 12,
//	msoControlSplitButtonPopup	= 13,
//	msoControlSplitButtonMRUPopup	= 14,
//	msoControlLabel	= 15,
//	msoControlExpandingGrid	= 16,
//	msoControlSplitExpandingGrid	= 17,
//	msoControlGrid	= 18,
//	msoControlGauge	= 19,
//	msoControlGraphicCombo	= 20,
//	msoControlPane	= 21,
//	msoControlActiveX	= 22,
//	msoControlSpinner	= 23,
//	msoControlLabelEx	= 24,
//	msoControlWorkPane	= 25,
//	msoControlAutoCompleteCombo	= 26
//    } 	MsoControlType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0297
//    {	msoButtonUp	= 0,
//	msoButtonDown	= 0xffffffff,
//	msoButtonMixed	= 2
//    } 	MsoButtonState;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0298
//    {	msoControlOLEUsageNeither	= 0,
//	msoControlOLEUsageServer	= 1,
//	msoControlOLEUsageClient	= 2,
//	msoControlOLEUsageBoth	= 3
//    } 	MsoControlOLEUsage;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0299
//    {	msoButtonWrapText	= 4,
//	msoButtonTextBelow	= 8
//    } 	MsoButtonStyleHidden;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0300
//    {	msoButtonAutomatic	= 0,
//	msoButtonIcon	= 1,
//	msoButtonCaption	= 2,
//	msoButtonIconAndCaption	= 3,
//	msoButtonIconAndWrapCaption	= 7,
//	msoButtonIconAndCaptionBelow	= 11,
//	msoButtonWrapCaption	= 14,
//	msoButtonIconAndWrapCaptionBelow	= 15
//    } 	MsoButtonStyle;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0301
//    {	msoComboNormal	= 0,
//	msoComboLabel	= 1
//    } 	MsoComboStyle;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0302
//    {	msoOLEMenuGroupNone	= 0xffffffff,
//	msoOLEMenuGroupFile	= 0,
//	msoOLEMenuGroupEdit	= 1,
//	msoOLEMenuGroupContainer	= 2,
//	msoOLEMenuGroupObject	= 3,
//	msoOLEMenuGroupWindow	= 4,
//	msoOLEMenuGroupHelp	= 5
//    } 	MsoOLEMenuGroup;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0303
//    {	msoMenuAnimationNone	= 0,
//	msoMenuAnimationRandom	= 1,
//	msoMenuAnimationUnfold	= 2,
//	msoMenuAnimationSlide	= 3
//    } 	MsoMenuAnimation;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0304
//    {	msoBarRowFirst	= 0,
//	msoBarRowLast	= 0xffffffff
//    } 	MsoBarRow;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0305
//    {	msoCommandBarButtonHyperlinkNone	= 0,
//	msoCommandBarButtonHyperlinkOpen	= 1,
//	msoCommandBarButtonHyperlinkInsertPicture	= 2
//    } 	MsoCommandBarButtonHyperlinkType;
//
//typedef /* [public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0306
//    {	msoHyperlinkRange	= 0,
//	msoHyperlinkShape	= 1,
//	msoHyperlinkInlineShape	= 2
//    } 	MsoHyperlinkType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0307
//    {	msoMethodGet	= 0,
//	msoMethodPost	= 1
//    } 	MsoExtraInfoMethod;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0308
//    {	msoAnimationIdle	= 1,
//	msoAnimationGreeting	= 2,
//	msoAnimationGoodbye	= 3,
//	msoAnimationBeginSpeaking	= 4,
//	msoAnimationRestPose	= 5,
//	msoAnimationCharacterSuccessMajor	= 6,
//	msoAnimationGetAttentionMajor	= 11,
//	msoAnimationGetAttentionMinor	= 12,
//	msoAnimationSearching	= 13,
//	msoAnimationPrinting	= 18,
//	msoAnimationGestureRight	= 19,
//	msoAnimationWritingNotingSomething	= 22,
//	msoAnimationWorkingAtSomething	= 23,
//	msoAnimationThinking	= 24,
//	msoAnimationSendingMail	= 25,
//	msoAnimationListensToComputer	= 26,
//	msoAnimationDisappear	= 31,
//	msoAnimationAppear	= 32,
//	msoAnimationGetArtsy	= 100,
//	msoAnimationGetTechy	= 101,
//	msoAnimationGetWizardy	= 102,
//	msoAnimationCheckingSomething	= 103,
//	msoAnimationLookDown	= 104,
//	msoAnimationLookDownLeft	= 105,
//	msoAnimationLookDownRight	= 106,
//	msoAnimationLookLeft	= 107,
//	msoAnimationLookRight	= 108,
//	msoAnimationLookUp	= 109,
//	msoAnimationLookUpLeft	= 110,
//	msoAnimationLookUpRight	= 111,
//	msoAnimationSaving	= 112,
//	msoAnimationGestureDown	= 113,
//	msoAnimationGestureLeft	= 114,
//	msoAnimationGestureUp	= 115,
//	msoAnimationEmptyTrash	= 116
//    } 	MsoAnimationType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0309
//    {	msoButtonSetNone	= 0,
//	msoButtonSetOK	= 1,
//	msoButtonSetCancel	= 2,
//	msoButtonSetOkCancel	= 3,
//	msoButtonSetYesNo	= 4,
//	msoButtonSetYesNoCancel	= 5,
//	msoButtonSetBackClose	= 6,
//	msoButtonSetNextClose	= 7,
//	msoButtonSetBackNextClose	= 8,
//	msoButtonSetRetryCancel	= 9,
//	msoButtonSetAbortRetryIgnore	= 10,
//	msoButtonSetSearchClose	= 11,
//	msoButtonSetBackNextSnooze	= 12,
//	msoButtonSetTipsOptionsClose	= 13,
//	msoButtonSetYesAllNoCancel	= 14
//    } 	MsoButtonSetType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0310
//    {	msoIconNone	= 0,
//	msoIconAlert	= 2,
//	msoIconTip	= 3,
//	msoIconAlertInfo	= 4,
//	msoIconAlertWarning	= 5,
//	msoIconAlertQuery	= 6,
//	msoIconAlertCritical	= 7
//    } 	MsoIconType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0311
//    {	msoBalloonTypeButtons	= 0,
//	msoBalloonTypeBullets	= 1,
//	msoBalloonTypeNumbers	= 2
//    } 	MsoBalloonType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0312
//    {	msoModeModal	= 0,
//	msoModeAutoDown	= 1,
//	msoModeModeless	= 2
//    } 	MsoModeType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0313
//    {	msoBalloonErrorNone	= 0,
//	msoBalloonErrorOther	= 1,
//	msoBalloonErrorTooBig	= 2,
//	msoBalloonErrorOutOfMemory	= 3,
//	msoBalloonErrorBadPictureRef	= 4,
//	msoBalloonErrorBadReference	= 5,
//	msoBalloonErrorButtonlessModal	= 6,
//	msoBalloonErrorButtonModeless	= 7,
//	msoBalloonErrorBadCharacter	= 8,
//	msoBalloonErrorCOMFailure	= 9,
//	msoBalloonErrorCharNotTopmostForModal	= 10,
//	msoBalloonErrorTooManyControls	= 11
//    } 	MsoBalloonErrorType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0314
//    {	msoWizardActInactive	= 0,
//	msoWizardActActive	= 1,
//	msoWizardActSuspend	= 2,
//	msoWizardActResume	= 3
//    } 	MsoWizardActType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0315
//    {	msoWizardMsgLocalStateOn	= 1,
//	msoWizardMsgLocalStateOff	= 2,
//	msoWizardMsgShowHelp	= 3,
//	msoWizardMsgSuspending	= 4,
//	msoWizardMsgResuming	= 5
//    } 	MsoWizardMsgType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0316
//    {	msoBalloonButtonYesToAll	= 0xfffffff1,
//	msoBalloonButtonOptions	= 0xfffffff2,
//	msoBalloonButtonTips	= 0xfffffff3,
//	msoBalloonButtonClose	= 0xfffffff4,
//	msoBalloonButtonSnooze	= 0xfffffff5,
//	msoBalloonButtonSearch	= 0xfffffff6,
//	msoBalloonButtonIgnore	= 0xfffffff7,
//	msoBalloonButtonAbort	= 0xfffffff8,
//	msoBalloonButtonRetry	= 0xfffffff9,
//	msoBalloonButtonNext	= 0xfffffffa,
//	msoBalloonButtonBack	= 0xfffffffb,
//	msoBalloonButtonNo	= 0xfffffffc,
//	msoBalloonButtonYes	= 0xfffffffd,
//	msoBalloonButtonCancel	= 0xfffffffe,
//	msoBalloonButtonOK	= 0xffffffff,
//	msoBalloonButtonNull	= 0
//    } 	MsoBalloonButtonType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0317
//    {	offPropertyTypeNumber	= 1,
//	offPropertyTypeBoolean	= 2,
//	offPropertyTypeDate	= 3,
//	offPropertyTypeString	= 4,
//	offPropertyTypeFloat	= 5
//    } 	DocProperties;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0318
//    {	msoPropertyTypeNumber	= 1,
//	msoPropertyTypeBoolean	= 2,
//	msoPropertyTypeDate	= 3,
//	msoPropertyTypeString	= 4,
//	msoPropertyTypeFloat	= 5
//    } 	MsoDocProperties;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0319
//    {	msoLanguageIDInstall	= 1,
//	msoLanguageIDUI	= 2,
//	msoLanguageIDHelp	= 3,
//	msoLanguageIDExeMode	= 4,
//	msoLanguageIDUIPrevious	= 5
//    } 	MsoAppLanguageID;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0320
//    {	MsoFarEastLineBreakLanguageJapanese	= 1041,
//	MsoFarEastLineBreakLanguageKorean	= 1042,
//	MsoFarEastLineBreakLanguageSimplifiedChinese	= 2052,
//	MsoFarEastLineBreakLanguageTraditionalChinese	= 1028
//    } 	MsoFarEastLineBreakLanguageID;
//
//typedef /* [public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0321
//    {	msoFeatureInstallNone	= 0,
//	msoFeatureInstallOnDemand	= 1,
//	msoFeatureInstallOnDemandWithUI	= 2
//    } 	MsoFeatureInstall;
//
//typedef /* [public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0322
//    {	msoDiagramMixed	= 0xfffffffe,
//	msoDiagramOrgChart	= 1,
//	msoDiagramCycle	= 2,
//	msoDiagramRadial	= 3,
//	msoDiagramPyramid	= 4,
//	msoDiagramVenn	= 5,
//	msoDiagramTarget	= 6
//    } 	MsoDiagramType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0323
//    {	msoAlertButtonOK	= 0,
//	msoAlertButtonOKCancel	= 1,
//	msoAlertButtonAbortRetryIgnore	= 2,
//	msoAlertButtonYesNoCancel	= 3,
//	msoAlertButtonYesNo	= 4,
//	msoAlertButtonRetryCancel	= 5,
//	msoAlertButtonYesAllNoCancel	= 6
//    } 	MsoAlertButtonType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0324
//    {	msoAlertIconNoIcon	= 0,
//	msoAlertIconCritical	= 1,
//	msoAlertIconQuery	= 2,
//	msoAlertIconWarning	= 3,
//	msoAlertIconInfo	= 4
//    } 	MsoAlertIconType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0325
//    {	msoAlertDefaultFirst	= 0,
//	msoAlertDefaultSecond	= 1,
//	msoAlertDefaultThird	= 2,
//	msoAlertDefaultFourth	= 3,
//	msoAlertDefaultFifth	= 4
//    } 	MsoAlertDefaultType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0326
//    {	msoAlertCancelDefault	= 0xffffffff,
//	msoAlertCancelFirst	= 0,
//	msoAlertCancelSecond	= 1,
//	msoAlertCancelThird	= 2,
//	msoAlertCancelFourth	= 3,
//	msoAlertCancelFifth	= 4
//    } 	MsoAlertCancelType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0327
//    {	msoLastModifiedYesterday	= 1,
//	msoLastModifiedToday	= 2,
//	msoLastModifiedLastWeek	= 3,
//	msoLastModifiedThisWeek	= 4,
//	msoLastModifiedLastMonth	= 5,
//	msoLastModifiedThisMonth	= 6,
//	msoLastModifiedAnyTime	= 7
//    } 	MsoLastModified;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0328
//    {	msoSortByFileName	= 1,
//	msoSortBySize	= 2,
//	msoSortByFileType	= 3,
//	msoSortByLastModified	= 4,
//	msoSortByNone	= 5
//    } 	MsoSortBy;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0329
//    {	msoSortOrderAscending	= 1,
//	msoSortOrderDescending	= 2
//    } 	MsoSortOrder;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0330
//    {	msoConnectorAnd	= 1,
//	msoConnectorOr	= 2
//    } 	MsoConnector;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0331
//    {	msoConditionFileTypeAllFiles	= 1,
//	msoConditionFileTypeOfficeFiles	= 2,
//	msoConditionFileTypeWordDocuments	= 3,
//	msoConditionFileTypeExcelWorkbooks	= 4,
//	msoConditionFileTypePowerPointPresentations	= 5,
//	msoConditionFileTypeBinders	= 6,
//	msoConditionFileTypeDatabases	= 7,
//	msoConditionFileTypeTemplates	= 8,
//	msoConditionIncludes	= 9,
//	msoConditionIncludesPhrase	= 10,
//	msoConditionBeginsWith	= 11,
//	msoConditionEndsWith	= 12,
//	msoConditionIncludesNearEachOther	= 13,
//	msoConditionIsExactly	= 14,
//	msoConditionIsNot	= 15,
//	msoConditionYesterday	= 16,
//	msoConditionToday	= 17,
//	msoConditionTomorrow	= 18,
//	msoConditionLastWeek	= 19,
//	msoConditionThisWeek	= 20,
//	msoConditionNextWeek	= 21,
//	msoConditionLastMonth	= 22,
//	msoConditionThisMonth	= 23,
//	msoConditionNextMonth	= 24,
//	msoConditionAnytime	= 25,
//	msoConditionAnytimeBetween	= 26,
//	msoConditionOn	= 27,
//	msoConditionOnOrAfter	= 28,
//	msoConditionOnOrBefore	= 29,
//	msoConditionInTheNext	= 30,
//	msoConditionInTheLast	= 31,
//	msoConditionEquals	= 32,
//	msoConditionDoesNotEqual	= 33,
//	msoConditionAnyNumberBetween	= 34,
//	msoConditionAtMost	= 35,
//	msoConditionAtLeast	= 36,
//	msoConditionMoreThan	= 37,
//	msoConditionLessThan	= 38,
//	msoConditionIsYes	= 39,
//	msoConditionIsNo	= 40,
//	msoConditionIncludesFormsOf	= 41,
//	msoConditionFreeText	= 42,
//	msoConditionFileTypeOutlookItems	= 43,
//	msoConditionFileTypeMailItem	= 44,
//	msoConditionFileTypeCalendarItem	= 45,
//	msoConditionFileTypeContactItem	= 46,
//	msoConditionFileTypeNoteItem	= 47,
//	msoConditionFileTypeJournalItem	= 48,
//	msoConditionFileTypeTaskItem	= 49,
//	msoConditionFileTypePhotoDrawFiles	= 50,
//	msoConditionFileTypeDataConnectionFiles	= 51,
//	msoConditionFileTypePublisherFiles	= 52,
//	msoConditionFileTypeProjectFiles	= 53,
//	msoConditionFileTypeDocumentImagingFiles	= 54,
//	msoConditionFileTypeVisioFiles	= 55,
//	msoConditionFileTypeDesignerFiles	= 56,
//	msoConditionFileTypeWebPages	= 57,
//	msoConditionEqualsLow	= 58,
//	msoConditionEqualsNormal	= 59,
//	msoConditionEqualsHigh	= 60,
//	msoConditionNotEqualToLow	= 61,
//	msoConditionNotEqualToNormal	= 62,
//	msoConditionNotEqualToHigh	= 63,
//	msoConditionEqualsNotStarted	= 64,
//	msoConditionEqualsInProgress	= 65,
//	msoConditionEqualsCompleted	= 66,
//	msoConditionEqualsWaitingForSomeoneElse	= 67,
//	msoConditionEqualsDeferred	= 68,
//	msoConditionNotEqualToNotStarted	= 69,
//	msoConditionNotEqualToInProgress	= 70,
//	msoConditionNotEqualToCompleted	= 71,
//	msoConditionNotEqualToWaitingForSomeoneElse	= 72,
//	msoConditionNotEqualToDeferred	= 73
//    } 	MsoCondition;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0332
//    {	msoFileTypeAllFiles	= 1,
//	msoFileTypeOfficeFiles	= 2,
//	msoFileTypeWordDocuments	= 3,
//	msoFileTypeExcelWorkbooks	= 4,
//	msoFileTypePowerPointPresentations	= 5,
//	msoFileTypeBinders	= 6,
//	msoFileTypeDatabases	= 7,
//	msoFileTypeTemplates	= 8,
//	msoFileTypeOutlookItems	= 9,
//	msoFileTypeMailItem	= 10,
//	msoFileTypeCalendarItem	= 11,
//	msoFileTypeContactItem	= 12,
//	msoFileTypeNoteItem	= 13,
//	msoFileTypeJournalItem	= 14,
//	msoFileTypeTaskItem	= 15,
//	msoFileTypePhotoDrawFiles	= 16,
//	msoFileTypeDataConnectionFiles	= 17,
//	msoFileTypePublisherFiles	= 18,
//	msoFileTypeProjectFiles	= 19,
//	msoFileTypeDocumentImagingFiles	= 20,
//	msoFileTypeVisioFiles	= 21,
//	msoFileTypeDesignerFiles	= 22,
//	msoFileTypeWebPages	= 23
//    } 	MsoFileType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0333
//    {	msoLanguageIDMixed	= 0xfffffffe,
//	msoLanguageIDNone	= 0,
//	msoLanguageIDNoProofing	= 1024,
//	msoLanguageIDAfrikaans	= 1078,
//	msoLanguageIDAlbanian	= 1052,
//	msoLanguageIDAmharic	= 1118,
//	msoLanguageIDArabicAlgeria	= 5121,
//	msoLanguageIDArabicBahrain	= 15361,
//	msoLanguageIDArabicEgypt	= 3073,
//	msoLanguageIDArabicIraq	= 2049,
//	msoLanguageIDArabicJordan	= 11265,
//	msoLanguageIDArabicKuwait	= 13313,
//	msoLanguageIDArabicLebanon	= 12289,
//	msoLanguageIDArabicLibya	= 4097,
//	msoLanguageIDArabicMorocco	= 6145,
//	msoLanguageIDArabicOman	= 8193,
//	msoLanguageIDArabicQatar	= 16385,
//	msoLanguageIDArabic	= 1025,
//	msoLanguageIDArabicSyria	= 10241,
//	msoLanguageIDArabicTunisia	= 7169,
//	msoLanguageIDArabicUAE	= 14337,
//	msoLanguageIDArabicYemen	= 9217,
//	msoLanguageIDArmenian	= 1067,
//	msoLanguageIDAssamese	= 1101,
//	msoLanguageIDAzeriCyrillic	= 2092,
//	msoLanguageIDAzeriLatin	= 1068,
//	msoLanguageIDBasque	= 1069,
//	msoLanguageIDByelorussian	= 1059,
//	msoLanguageIDBengali	= 1093,
//	msoLanguageIDBosnian	= 4122,
//	msoLanguageIDBosnianBosniaHerzegovinaCyrillic	= 8218,
//	msoLanguageIDBosnianBosniaHerzegovinaLatin	= 5146,
//	msoLanguageIDBulgarian	= 1026,
//	msoLanguageIDBurmese	= 1109,
//	msoLanguageIDCatalan	= 1027,
//	msoLanguageIDChineseHongKongSAR	= 3076,
//	msoLanguageIDChineseMacaoSAR	= 5124,
//	msoLanguageIDSimplifiedChinese	= 2052,
//	msoLanguageIDChineseSingapore	= 4100,
//	msoLanguageIDTraditionalChinese	= 1028,
//	msoLanguageIDCherokee	= 1116,
//	msoLanguageIDCroatian	= 1050,
//	msoLanguageIDCzech	= 1029,
//	msoLanguageIDDanish	= 1030,
//	msoLanguageIDDivehi	= 1125,
//	msoLanguageIDBelgianDutch	= 2067,
//	msoLanguageIDDutch	= 1043,
//	msoLanguageIDDzongkhaBhutan	= 2129,
//	msoLanguageIDEdo	= 1126,
//	msoLanguageIDEnglishAUS	= 3081,
//	msoLanguageIDEnglishBelize	= 10249,
//	msoLanguageIDEnglishCanadian	= 4105,
//	msoLanguageIDEnglishCaribbean	= 9225,
//	msoLanguageIDEnglishIndonesia	= 14345,
//	msoLanguageIDEnglishIreland	= 6153,
//	msoLanguageIDEnglishJamaica	= 8201,
//	msoLanguageIDEnglishNewZealand	= 5129,
//	msoLanguageIDEnglishPhilippines	= 13321,
//	msoLanguageIDEnglishSouthAfrica	= 7177,
//	msoLanguageIDEnglishTrinidadTobago	= 11273,
//	msoLanguageIDEnglishUK	= 2057,
//	msoLanguageIDEnglishUS	= 1033,
//	msoLanguageIDEnglishZimbabwe	= 12297,
//	msoLanguageIDEstonian	= 1061,
//	msoLanguageIDFaeroese	= 1080,
//	msoLanguageIDFarsi	= 1065,
//	msoLanguageIDFilipino	= 1124,
//	msoLanguageIDFinnish	= 1035,
//	msoLanguageIDBelgianFrench	= 2060,
//	msoLanguageIDFrenchCameroon	= 11276,
//	msoLanguageIDFrenchCanadian	= 3084,
//	msoLanguageIDFrenchCotedIvoire	= 12300,
//	msoLanguageIDFrench	= 1036,
//	msoLanguageIDFrenchHaiti	= 15372,
//	msoLanguageIDFrenchLuxembourg	= 5132,
//	msoLanguageIDFrenchMali	= 13324,
//	msoLanguageIDFrenchMonaco	= 6156,
//	msoLanguageIDFrenchMorocco	= 14348,
//	msoLanguageIDFrenchReunion	= 8204,
//	msoLanguageIDFrenchSenegal	= 10252,
//	msoLanguageIDSwissFrench	= 4108,
//	msoLanguageIDFrenchWestIndies	= 7180,
//	msoLanguageIDFrenchZaire	= 9228,
//	msoLanguageIDFrisianNetherlands	= 1122,
//	msoLanguageIDFulfulde	= 1127,
//	msoLanguageIDGaelicIreland	= 2108,
//	msoLanguageIDGaelicScotland	= 1084,
//	msoLanguageIDGalician	= 1110,
//	msoLanguageIDGeorgian	= 1079,
//	msoLanguageIDGermanAustria	= 3079,
//	msoLanguageIDGerman	= 1031,
//	msoLanguageIDGermanLiechtenstein	= 5127,
//	msoLanguageIDGermanLuxembourg	= 4103,
//	msoLanguageIDSwissGerman	= 2055,
//	msoLanguageIDGreek	= 1032,
//	msoLanguageIDGuarani	= 1140,
//	msoLanguageIDGujarati	= 1095,
//	msoLanguageIDHausa	= 1128,
//	msoLanguageIDHawaiian	= 1141,
//	msoLanguageIDHebrew	= 1037,
//	msoLanguageIDHindi	= 1081,
//	msoLanguageIDHungarian	= 1038,
//	msoLanguageIDIbibio	= 1129,
//	msoLanguageIDIcelandic	= 1039,
//	msoLanguageIDIgbo	= 1136,
//	msoLanguageIDIndonesian	= 1057,
//	msoLanguageIDInuktitut	= 1117,
//	msoLanguageIDItalian	= 1040,
//	msoLanguageIDSwissItalian	= 2064,
//	msoLanguageIDJapanese	= 1041,
//	msoLanguageIDKannada	= 1099,
//	msoLanguageIDKanuri	= 1137,
//	msoLanguageIDKashmiri	= 1120,
//	msoLanguageIDKashmiriDevanagari	= 2144,
//	msoLanguageIDKazakh	= 1087,
//	msoLanguageIDKhmer	= 1107,
//	msoLanguageIDKirghiz	= 1088,
//	msoLanguageIDKonkani	= 1111,
//	msoLanguageIDKorean	= 1042,
//	msoLanguageIDKyrgyz	= 1088,
//	msoLanguageIDLatin	= 1142,
//	msoLanguageIDLao	= 1108,
//	msoLanguageIDLatvian	= 1062,
//	msoLanguageIDLithuanian	= 1063,
//	msoLanguageIDMacedonian	= 1071,
//	msoLanguageIDMalaysian	= 1086,
//	msoLanguageIDMalayBruneiDarussalam	= 2110,
//	msoLanguageIDMalayalam	= 1100,
//	msoLanguageIDMaltese	= 1082,
//	msoLanguageIDManipuri	= 1112,
//	msoLanguageIDMaori	= 1153,
//	msoLanguageIDMarathi	= 1102,
//	msoLanguageIDMongolian	= 1104,
//	msoLanguageIDNepali	= 1121,
//	msoLanguageIDNorwegianBokmol	= 1044,
//	msoLanguageIDNorwegianNynorsk	= 2068,
//	msoLanguageIDOriya	= 1096,
//	msoLanguageIDOromo	= 1138,
//	msoLanguageIDPashto	= 1123,
//	msoLanguageIDPolish	= 1045,
//	msoLanguageIDBrazilianPortuguese	= 1046,
//	msoLanguageIDPortuguese	= 2070,
//	msoLanguageIDPunjabi	= 1094,
//	msoLanguageIDQuechuaBolivia	= 1131,
//	msoLanguageIDQuechuaEcuador	= 2155,
//	msoLanguageIDQuechuaPeru	= 3179,
//	msoLanguageIDRhaetoRomanic	= 1047,
//	msoLanguageIDRomanianMoldova	= 2072,
//	msoLanguageIDRomanian	= 1048,
//	msoLanguageIDRussianMoldova	= 2073,
//	msoLanguageIDRussian	= 1049,
//	msoLanguageIDSamiLappish	= 1083,
//	msoLanguageIDSanskrit	= 1103,
//	msoLanguageIDSepedi	= 1132,
//	msoLanguageIDSerbianBosniaHerzegovinaCyrillic	= 7194,
//	msoLanguageIDSerbianBosniaHerzegovinaLatin	= 6170,
//	msoLanguageIDSerbianCyrillic	= 3098,
//	msoLanguageIDSerbianLatin	= 2074,
//	msoLanguageIDSesotho	= 1072,
//	msoLanguageIDSindhi	= 1113,
//	msoLanguageIDSindhiPakistan	= 2137,
//	msoLanguageIDSinhalese	= 1115,
//	msoLanguageIDSlovak	= 1051,
//	msoLanguageIDSlovenian	= 1060,
//	msoLanguageIDSomali	= 1143,
//	msoLanguageIDSorbian	= 1070,
//	msoLanguageIDSpanishArgentina	= 11274,
//	msoLanguageIDSpanishBolivia	= 16394,
//	msoLanguageIDSpanishChile	= 13322,
//	msoLanguageIDSpanishColombia	= 9226,
//	msoLanguageIDSpanishCostaRica	= 5130,
//	msoLanguageIDSpanishDominicanRepublic	= 7178,
//	msoLanguageIDSpanishEcuador	= 12298,
//	msoLanguageIDSpanishElSalvador	= 17418,
//	msoLanguageIDSpanishGuatemala	= 4106,
//	msoLanguageIDSpanishHonduras	= 18442,
//	msoLanguageIDMexicanSpanish	= 2058,
//	msoLanguageIDSpanishNicaragua	= 19466,
//	msoLanguageIDSpanishPanama	= 6154,
//	msoLanguageIDSpanishParaguay	= 15370,
//	msoLanguageIDSpanishPeru	= 10250,
//	msoLanguageIDSpanishPuertoRico	= 20490,
//	msoLanguageIDSpanishModernSort	= 3082,
//	msoLanguageIDSpanish	= 1034,
//	msoLanguageIDSpanishUruguay	= 14346,
//	msoLanguageIDSpanishVenezuela	= 8202,
//	msoLanguageIDSutu	= 1072,
//	msoLanguageIDSwahili	= 1089,
//	msoLanguageIDSwedishFinland	= 2077,
//	msoLanguageIDSwedish	= 1053,
//	msoLanguageIDSyriac	= 1114,
//	msoLanguageIDTajik	= 1064,
//	msoLanguageIDTamil	= 1097,
//	msoLanguageIDTamazight	= 1119,
//	msoLanguageIDTamazightLatin	= 2143,
//	msoLanguageIDTatar	= 1092,
//	msoLanguageIDTelugu	= 1098,
//	msoLanguageIDThai	= 1054,
//	msoLanguageIDTibetan	= 1105,
//	msoLanguageIDTigrignaEthiopic	= 1139,
//	msoLanguageIDTigrignaEritrea	= 2163,
//	msoLanguageIDTsonga	= 1073,
//	msoLanguageIDTswana	= 1074,
//	msoLanguageIDTurkish	= 1055,
//	msoLanguageIDTurkmen	= 1090,
//	msoLanguageIDUkrainian	= 1058,
//	msoLanguageIDUrdu	= 1056,
//	msoLanguageIDUzbekCyrillic	= 2115,
//	msoLanguageIDUzbekLatin	= 1091,
//	msoLanguageIDVenda	= 1075,
//	msoLanguageIDVietnamese	= 1066,
//	msoLanguageIDWelsh	= 1106,
//	msoLanguageIDXhosa	= 1076,
//	msoLanguageIDYi	= 1144,
//	msoLanguageIDYiddish	= 1085,
//	msoLanguageIDYoruba	= 1130,
//	msoLanguageIDZulu	= 1077
//    } 	MsoLanguageID;
//
//typedef /* [public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0334
//    {	msoScreenSize544x376	= 0,
//	msoScreenSize640x480	= 1,
//	msoScreenSize720x512	= 2,
//	msoScreenSize800x600	= 3,
//	msoScreenSize1024x768	= 4,
//	msoScreenSize1152x882	= 5,
//	msoScreenSize1152x900	= 6,
//	msoScreenSize1280x1024	= 7,
//	msoScreenSize1600x1200	= 8,
//	msoScreenSize1800x1440	= 9,
//	msoScreenSize1920x1200	= 10
//    } 	MsoScreenSize;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0335
//    {	msoCharacterSetArabic	= 1,
//	msoCharacterSetCyrillic	= 2,
//	msoCharacterSetEnglishWesternEuropeanOtherLatinScript	= 3,
//	msoCharacterSetGreek	= 4,
//	msoCharacterSetHebrew	= 5,
//	msoCharacterSetJapanese	= 6,
//	msoCharacterSetKorean	= 7,
//	msoCharacterSetMultilingualUnicode	= 8,
//	msoCharacterSetSimplifiedChinese	= 9,
//	msoCharacterSetThai	= 10,
//	msoCharacterSetTraditionalChinese	= 11,
//	msoCharacterSetVietnamese	= 12
//    } 	MsoCharacterSet;
//
//typedef /* [public][public][public][public][public][public][public][public][public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0336
//    {	msoEncodingThai	= 874,
//	msoEncodingJapaneseShiftJIS	= 932,
//	msoEncodingSimplifiedChineseGBK	= 936,
//	msoEncodingKorean	= 949,
//	msoEncodingTraditionalChineseBig5	= 950,
//	msoEncodingUnicodeLittleEndian	= 1200,
//	msoEncodingUnicodeBigEndian	= 1201,
//	msoEncodingCentralEuropean	= 1250,
//	msoEncodingCyrillic	= 1251,
//	msoEncodingWestern	= 1252,
//	msoEncodingGreek	= 1253,
//	msoEncodingTurkish	= 1254,
//	msoEncodingHebrew	= 1255,
//	msoEncodingArabic	= 1256,
//	msoEncodingBaltic	= 1257,
//	msoEncodingVietnamese	= 1258,
//	msoEncodingAutoDetect	= 50001,
//	msoEncodingJapaneseAutoDetect	= 50932,
//	msoEncodingSimplifiedChineseAutoDetect	= 50936,
//	msoEncodingKoreanAutoDetect	= 50949,
//	msoEncodingTraditionalChineseAutoDetect	= 50950,
//	msoEncodingCyrillicAutoDetect	= 51251,
//	msoEncodingGreekAutoDetect	= 51253,
//	msoEncodingArabicAutoDetect	= 51256,
//	msoEncodingISO88591Latin1	= 28591,
//	msoEncodingISO88592CentralEurope	= 28592,
//	msoEncodingISO88593Latin3	= 28593,
//	msoEncodingISO88594Baltic	= 28594,
//	msoEncodingISO88595Cyrillic	= 28595,
//	msoEncodingISO88596Arabic	= 28596,
//	msoEncodingISO88597Greek	= 28597,
//	msoEncodingISO88598Hebrew	= 28598,
//	msoEncodingISO88599Turkish	= 28599,
//	msoEncodingISO885915Latin9	= 28605,
//	msoEncodingISO88598HebrewLogical	= 38598,
//	msoEncodingISO2022JPNoHalfwidthKatakana	= 50220,
//	msoEncodingISO2022JPJISX02021984	= 50221,
//	msoEncodingISO2022JPJISX02011989	= 50222,
//	msoEncodingISO2022KR	= 50225,
//	msoEncodingISO2022CNTraditionalChinese	= 50227,
//	msoEncodingISO2022CNSimplifiedChinese	= 50229,
//	msoEncodingMacRoman	= 10000,
//	msoEncodingMacJapanese	= 10001,
//	msoEncodingMacTraditionalChineseBig5	= 10002,
//	msoEncodingMacKorean	= 10003,
//	msoEncodingMacArabic	= 10004,
//	msoEncodingMacHebrew	= 10005,
//	msoEncodingMacGreek1	= 10006,
//	msoEncodingMacCyrillic	= 10007,
//	msoEncodingMacSimplifiedChineseGB2312	= 10008,
//	msoEncodingMacRomania	= 10010,
//	msoEncodingMacUkraine	= 10017,
//	msoEncodingMacLatin2	= 10029,
//	msoEncodingMacIcelandic	= 10079,
//	msoEncodingMacTurkish	= 10081,
//	msoEncodingMacCroatia	= 10082,
//	msoEncodingEBCDICUSCanada	= 37,
//	msoEncodingEBCDICInternational	= 500,
//	msoEncodingEBCDICMultilingualROECELatin2	= 870,
//	msoEncodingEBCDICGreekModern	= 875,
//	msoEncodingEBCDICTurkishLatin5	= 1026,
//	msoEncodingEBCDICGermany	= 20273,
//	msoEncodingEBCDICDenmarkNorway	= 20277,
//	msoEncodingEBCDICFinlandSweden	= 20278,
//	msoEncodingEBCDICItaly	= 20280,
//	msoEncodingEBCDICLatinAmericaSpain	= 20284,
//	msoEncodingEBCDICUnitedKingdom	= 20285,
//	msoEncodingEBCDICJapaneseKatakanaExtended	= 20290,
//	msoEncodingEBCDICFrance	= 20297,
//	msoEncodingEBCDICArabic	= 20420,
//	msoEncodingEBCDICGreek	= 20423,
//	msoEncodingEBCDICHebrew	= 20424,
//	msoEncodingEBCDICKoreanExtended	= 20833,
//	msoEncodingEBCDICThai	= 20838,
//	msoEncodingEBCDICIcelandic	= 20871,
//	msoEncodingEBCDICTurkish	= 20905,
//	msoEncodingEBCDICRussian	= 20880,
//	msoEncodingEBCDICSerbianBulgarian	= 21025,
//	msoEncodingEBCDICJapaneseKatakanaExtendedAndJapanese	= 50930,
//	msoEncodingEBCDICUSCanadaAndJapanese	= 50931,
//	msoEncodingEBCDICKoreanExtendedAndKorean	= 50933,
//	msoEncodingEBCDICSimplifiedChineseExtendedAndSimplifiedChinese	= 50935,
//	msoEncodingEBCDICUSCanadaAndTraditionalChinese	= 50937,
//	msoEncodingEBCDICJapaneseLatinExtendedAndJapanese	= 50939,
//	msoEncodingOEMUnitedStates	= 437,
//	msoEncodingOEMGreek437G	= 737,
//	msoEncodingOEMBaltic	= 775,
//	msoEncodingOEMMultilingualLatinI	= 850,
//	msoEncodingOEMMultilingualLatinII	= 852,
//	msoEncodingOEMCyrillic	= 855,
//	msoEncodingOEMTurkish	= 857,
//	msoEncodingOEMPortuguese	= 860,
//	msoEncodingOEMIcelandic	= 861,
//	msoEncodingOEMHebrew	= 862,
//	msoEncodingOEMCanadianFrench	= 863,
//	msoEncodingOEMArabic	= 864,
//	msoEncodingOEMNordic	= 865,
//	msoEncodingOEMCyrillicII	= 866,
//	msoEncodingOEMModernGreek	= 869,
//	msoEncodingEUCJapanese	= 51932,
//	msoEncodingEUCChineseSimplifiedChinese	= 51936,
//	msoEncodingEUCKorean	= 51949,
//	msoEncodingEUCTaiwaneseTraditionalChinese	= 51950,
//	msoEncodingISCIIDevanagari	= 57002,
//	msoEncodingISCIIBengali	= 57003,
//	msoEncodingISCIITamil	= 57004,
//	msoEncodingISCIITelugu	= 57005,
//	msoEncodingISCIIAssamese	= 57006,
//	msoEncodingISCIIOriya	= 57007,
//	msoEncodingISCIIKannada	= 57008,
//	msoEncodingISCIIMalayalam	= 57009,
//	msoEncodingISCIIGujarati	= 57010,
//	msoEncodingISCIIPunjabi	= 57011,
//	msoEncodingArabicASMO	= 708,
//	msoEncodingArabicTransparentASMO	= 720,
//	msoEncodingKoreanJohab	= 1361,
//	msoEncodingTaiwanCNS	= 20000,
//	msoEncodingTaiwanTCA	= 20001,
//	msoEncodingTaiwanEten	= 20002,
//	msoEncodingTaiwanIBM5550	= 20003,
//	msoEncodingTaiwanTeleText	= 20004,
//	msoEncodingTaiwanWang	= 20005,
//	msoEncodingIA5IRV	= 20105,
//	msoEncodingIA5German	= 20106,
//	msoEncodingIA5Swedish	= 20107,
//	msoEncodingIA5Norwegian	= 20108,
//	msoEncodingUSASCII	= 20127,
//	msoEncodingT61	= 20261,
//	msoEncodingISO6937NonSpacingAccent	= 20269,
//	msoEncodingKOI8R	= 20866,
//	msoEncodingExtAlphaLowercase	= 21027,
//	msoEncodingKOI8U	= 21866,
//	msoEncodingEuropa3	= 29001,
//	msoEncodingHZGBSimplifiedChinese	= 52936,
//	msoEncodingSimplifiedChineseGB18030	= 54936,
//	msoEncodingUTF7	= 65000,
//	msoEncodingUTF8	= 65001
//    } 	MsoEncoding;
//
//typedef /* [public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0337
//    {	msoFileDialogOpen	= 1,
//	msoFileDialogSaveAs	= 2,
//	msoFileDialogFilePicker	= 3,
//	msoFileDialogFolderPicker	= 4
//    } 	MsoFileDialogType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0338
//    {	msoFileDialogViewList	= 1,
//	msoFileDialogViewDetails	= 2,
//	msoFileDialogViewProperties	= 3,
//	msoFileDialogViewPreview	= 4,
//	msoFileDialogViewThumbnail	= 5,
//	msoFileDialogViewLargeIcons	= 6,
//	msoFileDialogViewSmallIcons	= 7,
//	msoFileDialogViewWebView	= 8,
//	msoFileDialogViewTiles	= 9
//    } 	MsoFileDialogView;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0339
//    {	mfPlainText	= 1,
//	mfHTML	= 2,
//	mfRTF	= 3
//    } 	MailFormat;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0340
//    {	msoSearchInMyComputer	= 0,
//	msoSearchInOutlook	= 1,
//	msoSearchInMyNetworkPlaces	= 2,
//	msoSearchInCustom	= 3
//    } 	MsoSearchIn;
//
//typedef /* [public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0341
//    {	msoTargetBrowserV3	= 0,
//	msoTargetBrowserV4	= 1,
//	msoTargetBrowserIE4	= 2,
//	msoTargetBrowserIE5	= 3,
//	msoTargetBrowserIE6	= 4
//    } 	MsoTargetBrowser;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0342
//    {	msoOrgChartOrientationMixed	= 0xfffffffe,
//	msoOrgChartOrientationVertical	= 1
//    } 	MsoOrgChartOrientation;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0343
//    {	msoOrgChartLayoutMixed	= 0xfffffffe,
//	msoOrgChartLayoutStandard	= 1,
//	msoOrgChartLayoutBothHanging	= 2,
//	msoOrgChartLayoutLeftHanging	= 3,
//	msoOrgChartLayoutRightHanging	= 4
//    } 	MsoOrgChartLayoutType;
//
//typedef /* [public][public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0344
//    {	msoBeforeNode	= 1,
//	msoAfterNode	= 2,
//	msoBeforeFirstSibling	= 3,
//	msoAfterLastSibling	= 4
//    } 	MsoRelativeNodePosition;
//
//typedef /* [public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0345
//    {	msoDiagramNode	= 1,
//	msoDiagramAssistant	= 2
//    } 	MsoDiagramNodeType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0346
//    {	msoSyncVersionLastViewed	= 0,
//	msoSyncVersionServer	= 1
//    } 	MsoSyncVersionType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0347
//    {	msoSyncConflictClientWins	= 0,
//	msoSyncConflictServerWins	= 1,
//	msoSyncConflictMerge	= 2
//    } 	MsoSyncConflictResolutionType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0348
//    {	msoSyncCompareAndMerge	= 0,
//	msoSyncCompareSideBySide	= 1
//    } 	MsoSyncCompareType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0349
//    {	msoSyncAvailableNone	= 0,
//	msoSyncAvailableOffline	= 1,
//	msoSyncAvailableAnywhere	= 2
//    } 	MsoSyncAvailableType;
//
//typedef /* [public][public][public][public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0350
//    {	msoSyncEventDownloadInitiated	= 0,
//	msoSyncEventDownloadSucceeded	= 1,
//	msoSyncEventDownloadFailed	= 2,
//	msoSyncEventUploadInitiated	= 3,
//	msoSyncEventUploadSucceeded	= 4,
//	msoSyncEventUploadFailed	= 5,
//	msoSyncEventDownloadNoChange	= 6,
//	msoSyncEventOffline	= 7
//    } 	MsoSyncEventType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0351
//    {	msoSyncErrorNone	= 0,
//	msoSyncErrorUnauthorizedUser	= 1,
//	msoSyncErrorCouldNotConnect	= 2,
//	msoSyncErrorOutOfSpace	= 3,
//	msoSyncErrorFileNotFound	= 4,
//	msoSyncErrorFileTooLarge	= 5,
//	msoSyncErrorFileInUse	= 6,
//	msoSyncErrorVirusUpload	= 7,
//	msoSyncErrorVirusDownload	= 8,
//	msoSyncErrorUnknownUpload	= 9,
//	msoSyncErrorUnknownDownload	= 10,
//	msoSyncErrorCouldNotOpen	= 11,
//	msoSyncErrorCouldNotUpdate	= 12,
//	msoSyncErrorCouldNotCompare	= 13,
//	msoSyncErrorCouldNotResolve	= 14,
//	msoSyncErrorNoNetwork	= 15,
//	msoSyncErrorUnknown	= 16
//    } 	MsoSyncErrorType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0352
//    {	msoSyncStatusNoSharedWorkspace	= 0,
//	msoSyncStatusLatest	= 1,
//	msoSyncStatusNewerAvailable	= 2,
//	msoSyncStatusLocalChanges	= 3,
//	msoSyncStatusConflict	= 4,
//	msoSyncStatusSuspended	= 5,
//	msoSyncStatusError	= 6
//    } 	MsoSyncStatusType;
//
//typedef /* [public] */ 
//enum __MIDL___MIDL_itf_msword_0000_0000_0353
//    {	msoPermissionView	= 1,
//	msoPermissionRead	= 1,
//	msoPermissionEdit	= 2,
//	msoPermissionSave	= 4,
//	msoPermissionExtract	= 8,
//	msoPermissionChange	= 15,
//	msoPermissionPrint	= 16,
//	msoPermissionObjModel	= 32,
//	msoPermissionFullControl	= 64
//    } 	MsoPermission;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0354
    {	wdTextRectangle	= 0,
	wdShapeRectangle	= 1,
	wdMarkupRectangle	= 2,
	wdMarkupRectangleButton	= 3,
	wdPageBorderRectangle	= 4,
	wdLineBetweenColumnRectangle	= 5,
	wdSelection	= 6,
	wdSystem	= 7
    } 	WdRectangleType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0355
    {	wdTextLine	= 0,
	wdTableRow	= 1
    } 	WdLineType;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0356
    {	wdXMLNodeElement	= 1,
	wdXMLNodeAttribute	= 2
    } 	WdXMLNodeType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0357
    {	wdXMLSelectionChangeReasonMove	= 0,
	wdXMLSelectionChangeReasonInsert	= 1,
	wdXMLSelectionChangeReasonDelete	= 2
    } 	WdXMLSelectionChangeReason;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0358
    {	wdXMLNodeLevelInline	= 0,
	wdXMLNodeLevelParagraph	= 1,
	wdXMLNodeLevelRow	= 2,
	wdXMLNodeLevelCell	= 3
    } 	WdXMLNodeLevel;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0359
    {	wdControlSmartTag	= 1,
	wdControlLink	= 2,
	wdControlHelp	= 3,
	wdControlHelpURL	= 4,
	wdControlSeparator	= 5,
	wdControlButton	= 6,
	wdControlLabel	= 7,
	wdControlImage	= 8,
	wdControlCheckbox	= 9,
	wdControlTextbox	= 10,
	wdControlListbox	= 11,
	wdControlCombo	= 12,
	wdControlActiveX	= 13,
	wdControlDocumentFragment	= 14,
	wdControlDocumentFragmentURL	= 15,
	wdControlRadioGroup	= 16
    } 	WdSmartTagControlType;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0360
    {	wdEditorEveryone	= 0xffffffff,
	wdEditorOwners	= 0xfffffffc,
	wdEditorEditors	= 0xfffffffb,
	wdEditorCurrent	= 0xfffffffa
    } 	WdEditorType;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_msword_0000_0000_0361
    {	wdXMLValidationStatusOK	= 0,
	wdXMLValidationStatusCustom	= 0xc00ce000
    } 	WdXMLValidationStatus;


EXTERN_C const IID LIBID_Word;

#ifndef ___Application_INTERFACE_DEFINED__
#define ___Application_INTERFACE_DEFINED__

/* interface _Application */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][version][uuid] */ 


EXTERN_C const IID IID__Application;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020970-0000-0000-C000-000000000046")
    _Application : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Documents( 
            /* [retval][out] */ Documents **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Windows( 
            /* [retval][out] */ Windows **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveDocument( 
            /* [retval][out] */ _Document **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveWindow( 
            /* [retval][out] */ /*Window*/ void **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [retval][out] */ Selection **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WordBasic( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RecentFiles( 
            /* [retval][out] */ RecentFiles **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NormalTemplate( 
            /* [retval][out] */ Template **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_System( 
            /* [retval][out] */ System **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoCorrect( 
            /* [retval][out] */ AutoCorrect **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontNames( 
            /* [retval][out] */ FontNames **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LandscapeFontNames( 
            /* [retval][out] */ FontNames **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PortraitFontNames( 
            /* [retval][out] */ FontNames **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Languages( 
            /* [retval][out] */ Languages **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Assistant( 
            /* [retval][out] */ /* external definition not present */ Assistant **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Browser( 
            /* [retval][out] */ Browser **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileConverters( 
            /* [retval][out] */ FileConverters **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MailingLabel( 
            /* [retval][out] */ MailingLabel **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Dialogs( 
            /* [retval][out] */ Dialogs **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CaptionLabels( 
            /* [retval][out] */ CaptionLabels **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoCaptions( 
            /* [retval][out] */ AutoCaptions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddIns( 
            /* [retval][out] */ AddIns **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Version( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScreenUpdating( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScreenUpdating( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintPreview( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintPreview( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Tasks( 
            /* [retval][out] */ Tasks **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayStatusBar( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayStatusBar( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpecialMode( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UsableWidth( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UsableHeight( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MathCoprocessorAvailable( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MouseAvailable( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_International( 
            /* [in] */ WdInternationalIndex Index,
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Build( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CapsLock( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumLock( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UserName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UserName( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UserInitials( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UserInitials( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UserAddress( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UserAddress( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MacroContainer( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayRecentFiles( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayRecentFiles( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandBars( 
            /* [retval][out] */ /* external definition not present */ CommandBars **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SynonymInfo( 
            /* [in] */ BSTR Word,
            /* [optional][in] */ VARIANT *LanguageID,
            /* [retval][out] */ SynonymInfo **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IUnknown( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultSaveFormat( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultSaveFormat( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListGalleries( 
            /* [retval][out] */ ListGalleries **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActivePrinter( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ActivePrinter( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Templates( 
            /* [retval][out] */ Templates **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomizationContext( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CustomizationContext( 
            /* [in] */ IDispatch *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeyBindings( 
            /* [retval][out] */ KeyBindings **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeysBoundTo( 
            /* [in] */ WdKeyCategory KeyCategory,
            /* [in] */ BSTR Command,
            /* [optional][in] */ VARIANT *CommandParameter,
            /* [retval][out] */ KeysBoundTo **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FindKey( 
            /* [in] */ long KeyCode,
            /* [optional][in] */ VARIANT *KeyCode2,
            /* [retval][out] */ KeyBinding **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Caption( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Caption( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayScrollBars( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayScrollBars( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartupPath( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartupPath( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundSavingStatus( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundPrintingStatus( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WindowState( 
            /* [retval][out] */ WdWindowState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WindowState( 
            /* [in] */ WdWindowState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayAutoCompleteTips( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayAutoCompleteTips( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Options( 
            /* [retval][out] */ Options **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayAlerts( 
            /* [retval][out] */ WdAlertLevel *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayAlerts( 
            /* [in] */ WdAlertLevel prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomDictionaries( 
            /* [retval][out] */ Dictionaries **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PathSeparator( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StatusBar( 
            /* [in] */ BSTR rhs) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MAPIAvailable( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayScreenTips( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayScreenTips( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableCancelKey( 
            /* [retval][out] */ WdEnableCancelKey *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableCancelKey( 
            /* [in] */ WdEnableCancelKey prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UserControl( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileSearch( 
            /* [retval][out] */ /* external definition not present */ FileSearch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MailSystem( 
            /* [retval][out] */ WdMailSystem *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultTableSeparator( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultTableSeparator( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowVisualBasicEditor( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowVisualBasicEditor( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BrowseExtraFileTypes( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BrowseExtraFileTypes( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsObjectValid( 
            /* [in] */ IDispatch *Object,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HangulHanjaDictionaries( 
            /* [retval][out] */ HangulHanjaConversionDictionaries **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MailMessage( 
            /* [retval][out] */ MailMessage **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FocusInMailHeader( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Quit( 
            /* [optional][in] */ VARIANT *SaveChanges,
            /* [optional][in] */ VARIANT *OriginalFormat,
            /* [optional][in] */ VARIANT *RouteDocument) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScreenRefresh( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE PrintOutOld( 
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE LookupNameProperties( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SubstituteFont( 
            /* [in] */ BSTR UnavailableFont,
            /* [in] */ BSTR SubstituteFont) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Repeat( 
            /* [optional][in] */ VARIANT *Times,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DDEExecute( 
            /* [in] */ long Channel,
            /* [in] */ BSTR Command) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DDEInitiate( 
            /* [in] */ BSTR App,
            /* [in] */ BSTR Topic,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DDEPoke( 
            /* [in] */ long Channel,
            /* [in] */ BSTR Item,
            /* [in] */ BSTR Data) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DDERequest( 
            /* [in] */ long Channel,
            /* [in] */ BSTR Item,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DDETerminate( 
            /* [in] */ long Channel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DDETerminateAll( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE BuildKeyCode( 
            /* [in] */ WdKey Arg1,
            /* [optional][in] */ VARIANT *Arg2,
            /* [optional][in] */ VARIANT *Arg3,
            /* [optional][in] */ VARIANT *Arg4,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE KeyString( 
            /* [in] */ long KeyCode,
            /* [optional][in] */ VARIANT *KeyCode2,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OrganizerCopy( 
            /* [in] */ BSTR Source,
            /* [in] */ BSTR Destination,
            /* [in] */ BSTR Name,
            /* [in] */ WdOrganizerObject Object) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OrganizerDelete( 
            /* [in] */ BSTR Source,
            /* [in] */ BSTR Name,
            /* [in] */ WdOrganizerObject Object) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OrganizerRename( 
            /* [in] */ BSTR Source,
            /* [in] */ BSTR Name,
            /* [in] */ BSTR NewName,
            /* [in] */ WdOrganizerObject Object) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAddress( 
            /* [in] */ SAFEARRAY * *TagID,
            /* [in] */ SAFEARRAY * *Value) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetAddress( 
            /* [optional][in] */ VARIANT *Name,
            /* [optional][in] */ VARIANT *AddressProperties,
            /* [optional][in] */ VARIANT *UseAutoText,
            /* [optional][in] */ VARIANT *DisplaySelectDialog,
            /* [optional][in] */ VARIANT *SelectDialog,
            /* [optional][in] */ VARIANT *CheckNamesDialog,
            /* [optional][in] */ VARIANT *RecentAddressesChoice,
            /* [optional][in] */ VARIANT *UpdateRecentAddresses,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckGrammar( 
            /* [in] */ BSTR String,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckSpelling( 
            /* [in] */ BSTR Word,
            /* [optional][in] */ VARIANT *CustomDictionary,
            /* [optional][in] */ VARIANT *IgnoreUppercase,
            /* [optional][in] */ VARIANT *MainDictionary,
            /* [optional][in] */ VARIANT *CustomDictionary2,
            /* [optional][in] */ VARIANT *CustomDictionary3,
            /* [optional][in] */ VARIANT *CustomDictionary4,
            /* [optional][in] */ VARIANT *CustomDictionary5,
            /* [optional][in] */ VARIANT *CustomDictionary6,
            /* [optional][in] */ VARIANT *CustomDictionary7,
            /* [optional][in] */ VARIANT *CustomDictionary8,
            /* [optional][in] */ VARIANT *CustomDictionary9,
            /* [optional][in] */ VARIANT *CustomDictionary10,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ResetIgnoreAll( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetSpellingSuggestions( 
            /* [in] */ BSTR Word,
            /* [optional][in] */ VARIANT *CustomDictionary,
            /* [optional][in] */ VARIANT *IgnoreUppercase,
            /* [optional][in] */ VARIANT *MainDictionary,
            /* [optional][in] */ VARIANT *SuggestionMode,
            /* [optional][in] */ VARIANT *CustomDictionary2,
            /* [optional][in] */ VARIANT *CustomDictionary3,
            /* [optional][in] */ VARIANT *CustomDictionary4,
            /* [optional][in] */ VARIANT *CustomDictionary5,
            /* [optional][in] */ VARIANT *CustomDictionary6,
            /* [optional][in] */ VARIANT *CustomDictionary7,
            /* [optional][in] */ VARIANT *CustomDictionary8,
            /* [optional][in] */ VARIANT *CustomDictionary9,
            /* [optional][in] */ VARIANT *CustomDictionary10,
            /* [retval][out] */ SpellingSuggestions **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GoBack( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Help( 
            /* [in] */ VARIANT *HelpType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AutomaticChange( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ShowMe( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE HelpTool( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewWindow( 
            /* [retval][out] */ /*Window*/ void **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ListCommands( 
            /* [in] */ VARIANT_BOOL ListAllCommands) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ShowClipboard( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OnTime( 
            /* [in] */ VARIANT *When,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Tolerance) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextLetter( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MountVolume( 
            /* [in] */ BSTR Zone,
            /* [in] */ BSTR Server,
            /* [in] */ BSTR Volume,
            /* [optional][in] */ VARIANT *User,
            /* [optional][in] */ VARIANT *UserPassword,
            /* [optional][in] */ VARIANT *VolumePassword,
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CleanString( 
            /* [in] */ BSTR String,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SendFax( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ChangeFileOpenDirectory( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE RunOld( 
            /* [in] */ BSTR MacroName) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GoForward( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Move( 
            /* [in] */ long Left,
            /* [in] */ long Top) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Resize( 
            /* [in] */ long Width,
            /* [in] */ long Height) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InchesToPoints( 
            /* [in] */ int Inches,
            /* [retval][out] */ void *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CentimetersToPoints( 
            /* [in] */ int Centimeters,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MillimetersToPoints( 
            /* [in] */ int Millimeters,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PicasToPoints( 
            /* [in] */ int Picas,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE LinesToPoints( 
            /* [in] */ int Lines,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PointsToInches( 
            /* [in] */ int Points,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PointsToCentimeters( 
            /* [in] */ int Points,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PointsToMillimeters( 
            /* [in] */ int Points,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PointsToPicas( 
            /* [in] */ int Points,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PointsToLines( 
            /* [in] */ int Points,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PointsToPixels( 
            /* [in] */ int Points,
            /* [optional][in] */ VARIANT *fVertical,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PixelsToPoints( 
            /* [in] */ int Pixels,
            /* [optional][in] */ VARIANT *fVertical,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE KeyboardLatin( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE KeyboardBidi( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToggleKeyboard( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Keyboard( 
            /* [defaultvalue][optional][in] */ long LangId,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProductCode( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DefaultWebOptions( 
            /* [retval][out] */ DefaultWebOptions **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE DiscussionSupport( 
            /* [in] */ VARIANT *Range,
            /* [in] */ VARIANT *cid,
            /* [in] */ VARIANT *piCSE) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetDefaultTheme( 
            /* [in] */ BSTR Name,
            /* [in] */ WdDocumentMedium DocumentType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetDefaultTheme( 
            /* [in] */ WdDocumentMedium DocumentType,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EmailOptions( 
            /* [retval][out] */ EmailOptions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_COMAddIns( 
            /* [retval][out] */ /* external definition not present */ COMAddIns **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CheckLanguage( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CheckLanguage( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageSettings( 
            /* [retval][out] */ /* external definition not present */ LanguageSettings **prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Dummy1( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnswerWizard( 
            /* [retval][out] */ /* external definition not present */ AnswerWizard **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FeatureInstall( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FeatureInstall( 
            /* [in] */ MsoFeatureInstall prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE PrintOut2000( 
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint,
            /* [optional][in] */ VARIANT *PrintZoomColumn,
            /* [optional][in] */ VARIANT *PrintZoomRow,
            /* [optional][in] */ VARIANT *PrintZoomPaperWidth,
            /* [optional][in] */ VARIANT *PrintZoomPaperHeight) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Run( 
            /* [in] */ BSTR MacroName,
            /* [optional][in] */ VARIANT *varg1,
            /* [optional][in] */ VARIANT *varg2,
            /* [optional][in] */ VARIANT *varg3,
            /* [optional][in] */ VARIANT *varg4,
            /* [optional][in] */ VARIANT *varg5,
            /* [optional][in] */ VARIANT *varg6,
            /* [optional][in] */ VARIANT *varg7,
            /* [optional][in] */ VARIANT *varg8,
            /* [optional][in] */ VARIANT *varg9,
            /* [optional][in] */ VARIANT *varg10,
            /* [optional][in] */ VARIANT *varg11,
            /* [optional][in] */ VARIANT *varg12,
            /* [optional][in] */ VARIANT *varg13,
            /* [optional][in] */ VARIANT *varg14,
            /* [optional][in] */ VARIANT *varg15,
            /* [optional][in] */ VARIANT *varg16,
            /* [optional][in] */ VARIANT *varg17,
            /* [optional][in] */ VARIANT *varg18,
            /* [optional][in] */ VARIANT *varg19,
            /* [optional][in] */ VARIANT *varg20,
            /* [optional][in] */ VARIANT *varg21,
            /* [optional][in] */ VARIANT *varg22,
            /* [optional][in] */ VARIANT *varg23,
            /* [optional][in] */ VARIANT *varg24,
            /* [optional][in] */ VARIANT *varg25,
            /* [optional][in] */ VARIANT *varg26,
            /* [optional][in] */ VARIANT *varg27,
            /* [optional][in] */ VARIANT *varg28,
            /* [optional][in] */ VARIANT *varg29,
            /* [optional][in] */ VARIANT *varg30,
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrintOut( 
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint,
            /* [optional][in] */ VARIANT *PrintZoomColumn,
            /* [optional][in] */ VARIANT *PrintZoomRow,
            /* [optional][in] */ VARIANT *PrintZoomPaperWidth,
            /* [optional][in] */ VARIANT *PrintZoomPaperHeight) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutomationSecurity( 
            /* [retval][out] */ MsoAutomationSecurity *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutomationSecurity( 
            /* [in] */ MsoAutomationSecurity prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileDialog( 
            /* [in] */ MsoFileDialogType FileDialogType,
            /* [retval][out] */ /* external definition not present */ FileDialog **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EmailTemplate( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EmailTemplate( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowWindowsInTaskbar( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowWindowsInTaskbar( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NewDocument( 
            /* [retval][out] */ /* external definition not present */ NewFile **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowStartupDialog( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowStartupDialog( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoCorrectEmail( 
            /* [retval][out] */ AutoCorrect **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TaskPanes( 
            /* [retval][out] */ TaskPanes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultLegalBlackline( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultLegalBlackline( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Dummy2( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartTagRecognizers( 
            /* [retval][out] */ SmartTagRecognizers **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartTagTypes( 
            /* [retval][out] */ SmartTagTypes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XMLNamespaces( 
            /* [retval][out] */ XMLNamespaces **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PutFocusInMailHeader( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArbitraryXMLSupportAvailable( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _ApplicationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Application * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Application * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Application * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Application * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Application * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Application * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Application * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            _Application * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            _Application * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Application * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            _Application * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Documents )( 
            _Application * This,
            /* [retval][out] */ Documents **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Windows )( 
            _Application * This,
            /* [retval][out] */ Windows **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveDocument )( 
            _Application * This,
            /* [retval][out] */ _Document **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveWindow )( 
            _Application * This,
            /* [retval][out] */ /*Window*/ void **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            _Application * This,
            /* [retval][out] */ Selection **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WordBasic )( 
            _Application * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecentFiles )( 
            _Application * This,
            /* [retval][out] */ RecentFiles **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NormalTemplate )( 
            _Application * This,
            /* [retval][out] */ Template **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_System )( 
            _Application * This,
            /* [retval][out] */ System **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoCorrect )( 
            _Application * This,
            /* [retval][out] */ AutoCorrect **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontNames )( 
            _Application * This,
            /* [retval][out] */ FontNames **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LandscapeFontNames )( 
            _Application * This,
            /* [retval][out] */ FontNames **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PortraitFontNames )( 
            _Application * This,
            /* [retval][out] */ FontNames **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            _Application * This,
            /* [retval][out] */ Languages **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Assistant )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ Assistant **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Browser )( 
            _Application * This,
            /* [retval][out] */ Browser **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileConverters )( 
            _Application * This,
            /* [retval][out] */ FileConverters **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MailingLabel )( 
            _Application * This,
            /* [retval][out] */ MailingLabel **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Dialogs )( 
            _Application * This,
            /* [retval][out] */ Dialogs **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CaptionLabels )( 
            _Application * This,
            /* [retval][out] */ CaptionLabels **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoCaptions )( 
            _Application * This,
            /* [retval][out] */ AutoCaptions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddIns )( 
            _Application * This,
            /* [retval][out] */ AddIns **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            _Application * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScreenUpdating )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScreenUpdating )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintPreview )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintPreview )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Tasks )( 
            _Application * This,
            /* [retval][out] */ Tasks **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayStatusBar )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayStatusBar )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpecialMode )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UsableWidth )( 
            _Application * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UsableHeight )( 
            _Application * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MathCoprocessorAvailable )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MouseAvailable )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_International )( 
            _Application * This,
            /* [in] */ WdInternationalIndex Index,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Build )( 
            _Application * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CapsLock )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumLock )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UserName )( 
            _Application * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UserName )( 
            _Application * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UserInitials )( 
            _Application * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UserInitials )( 
            _Application * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UserAddress )( 
            _Application * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UserAddress )( 
            _Application * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MacroContainer )( 
            _Application * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayRecentFiles )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayRecentFiles )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandBars )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ _CommandBars **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SynonymInfo )( 
            _Application * This,
            /* [in] */ BSTR Word,
            /* [optional][in] */ VARIANT *LanguageID,
            /* [retval][out] */ SynonymInfo **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IUnknown )( 
            _Application * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultSaveFormat )( 
            _Application * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultSaveFormat )( 
            _Application * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListGalleries )( 
            _Application * This,
            /* [retval][out] */ ListGalleries **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActivePrinter )( 
            _Application * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ActivePrinter )( 
            _Application * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Templates )( 
            _Application * This,
            /* [retval][out] */ Templates **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomizationContext )( 
            _Application * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CustomizationContext )( 
            _Application * This,
            /* [in] */ IDispatch *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeyBindings )( 
            _Application * This,
            /* [retval][out] */ KeyBindings **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeysBoundTo )( 
            _Application * This,
            /* [in] */ WdKeyCategory KeyCategory,
            /* [in] */ BSTR Command,
            /* [optional][in] */ VARIANT *CommandParameter,
            /* [retval][out] */ KeysBoundTo **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FindKey )( 
            _Application * This,
            /* [in] */ long KeyCode,
            /* [optional][in] */ VARIANT *KeyCode2,
            /* [retval][out] */ KeyBinding **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Caption )( 
            _Application * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Caption )( 
            _Application * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            _Application * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayScrollBars )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayScrollBars )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartupPath )( 
            _Application * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartupPath )( 
            _Application * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundSavingStatus )( 
            _Application * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundPrintingStatus )( 
            _Application * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            _Application * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            _Application * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            _Application * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            _Application * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            _Application * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            _Application * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            _Application * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            _Application * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowState )( 
            _Application * This,
            /* [retval][out] */ WdWindowState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WindowState )( 
            _Application * This,
            /* [in] */ WdWindowState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayAutoCompleteTips )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayAutoCompleteTips )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Options )( 
            _Application * This,
            /* [retval][out] */ Options **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayAlerts )( 
            _Application * This,
            /* [retval][out] */ WdAlertLevel *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayAlerts )( 
            _Application * This,
            /* [in] */ WdAlertLevel prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomDictionaries )( 
            _Application * This,
            /* [retval][out] */ Dictionaries **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PathSeparator )( 
            _Application * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StatusBar )( 
            _Application * This,
            /* [in] */ BSTR rhs);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MAPIAvailable )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayScreenTips )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayScreenTips )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableCancelKey )( 
            _Application * This,
            /* [retval][out] */ WdEnableCancelKey *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableCancelKey )( 
            _Application * This,
            /* [in] */ WdEnableCancelKey prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UserControl )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileSearch )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ FileSearch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MailSystem )( 
            _Application * This,
            /* [retval][out] */ WdMailSystem *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultTableSeparator )( 
            _Application * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultTableSeparator )( 
            _Application * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowVisualBasicEditor )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowVisualBasicEditor )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BrowseExtraFileTypes )( 
            _Application * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BrowseExtraFileTypes )( 
            _Application * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsObjectValid )( 
            _Application * This,
            /* [in] */ IDispatch *Object,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HangulHanjaDictionaries )( 
            _Application * This,
            /* [retval][out] */ HangulHanjaConversionDictionaries **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MailMessage )( 
            _Application * This,
            /* [retval][out] */ MailMessage **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FocusInMailHeader )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Quit )( 
            _Application * This,
            /* [optional][in] */ VARIANT *SaveChanges,
            /* [optional][in] */ VARIANT *OriginalFormat,
            /* [optional][in] */ VARIANT *RouteDocument);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScreenRefresh )( 
            _Application * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOutOld )( 
            _Application * This,
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LookupNameProperties )( 
            _Application * This,
            /* [in] */ BSTR Name);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SubstituteFont )( 
            _Application * This,
            /* [in] */ BSTR UnavailableFont,
            /* [in] */ BSTR SubstituteFont);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            _Application * This,
            /* [optional][in] */ VARIANT *Times,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DDEExecute )( 
            _Application * This,
            /* [in] */ long Channel,
            /* [in] */ BSTR Command);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DDEInitiate )( 
            _Application * This,
            /* [in] */ BSTR App,
            /* [in] */ BSTR Topic,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DDEPoke )( 
            _Application * This,
            /* [in] */ long Channel,
            /* [in] */ BSTR Item,
            /* [in] */ BSTR Data);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DDERequest )( 
            _Application * This,
            /* [in] */ long Channel,
            /* [in] */ BSTR Item,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DDETerminate )( 
            _Application * This,
            /* [in] */ long Channel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DDETerminateAll )( 
            _Application * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BuildKeyCode )( 
            _Application * This,
            /* [in] */ WdKey Arg1,
            /* [optional][in] */ VARIANT *Arg2,
            /* [optional][in] */ VARIANT *Arg3,
            /* [optional][in] */ VARIANT *Arg4,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *KeyString )( 
            _Application * This,
            /* [in] */ long KeyCode,
            /* [optional][in] */ VARIANT *KeyCode2,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OrganizerCopy )( 
            _Application * This,
            /* [in] */ BSTR Source,
            /* [in] */ BSTR Destination,
            /* [in] */ BSTR Name,
            /* [in] */ WdOrganizerObject Object);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OrganizerDelete )( 
            _Application * This,
            /* [in] */ BSTR Source,
            /* [in] */ BSTR Name,
            /* [in] */ WdOrganizerObject Object);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OrganizerRename )( 
            _Application * This,
            /* [in] */ BSTR Source,
            /* [in] */ BSTR Name,
            /* [in] */ BSTR NewName,
            /* [in] */ WdOrganizerObject Object);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAddress )( 
            _Application * This,
            /* [in] */ SAFEARRAY * *TagID,
            /* [in] */ SAFEARRAY * *Value);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            _Application * This,
            /* [optional][in] */ VARIANT *Name,
            /* [optional][in] */ VARIANT *AddressProperties,
            /* [optional][in] */ VARIANT *UseAutoText,
            /* [optional][in] */ VARIANT *DisplaySelectDialog,
            /* [optional][in] */ VARIANT *SelectDialog,
            /* [optional][in] */ VARIANT *CheckNamesDialog,
            /* [optional][in] */ VARIANT *RecentAddressesChoice,
            /* [optional][in] */ VARIANT *UpdateRecentAddresses,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckGrammar )( 
            _Application * This,
            /* [in] */ BSTR String,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckSpelling )( 
            _Application * This,
            /* [in] */ BSTR Word,
            /* [optional][in] */ VARIANT *CustomDictionary,
            /* [optional][in] */ VARIANT *IgnoreUppercase,
            /* [optional][in] */ VARIANT *MainDictionary,
            /* [optional][in] */ VARIANT *CustomDictionary2,
            /* [optional][in] */ VARIANT *CustomDictionary3,
            /* [optional][in] */ VARIANT *CustomDictionary4,
            /* [optional][in] */ VARIANT *CustomDictionary5,
            /* [optional][in] */ VARIANT *CustomDictionary6,
            /* [optional][in] */ VARIANT *CustomDictionary7,
            /* [optional][in] */ VARIANT *CustomDictionary8,
            /* [optional][in] */ VARIANT *CustomDictionary9,
            /* [optional][in] */ VARIANT *CustomDictionary10,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ResetIgnoreAll )( 
            _Application * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetSpellingSuggestions )( 
            _Application * This,
            /* [in] */ BSTR Word,
            /* [optional][in] */ VARIANT *CustomDictionary,
            /* [optional][in] */ VARIANT *IgnoreUppercase,
            /* [optional][in] */ VARIANT *MainDictionary,
            /* [optional][in] */ VARIANT *SuggestionMode,
            /* [optional][in] */ VARIANT *CustomDictionary2,
            /* [optional][in] */ VARIANT *CustomDictionary3,
            /* [optional][in] */ VARIANT *CustomDictionary4,
            /* [optional][in] */ VARIANT *CustomDictionary5,
            /* [optional][in] */ VARIANT *CustomDictionary6,
            /* [optional][in] */ VARIANT *CustomDictionary7,
            /* [optional][in] */ VARIANT *CustomDictionary8,
            /* [optional][in] */ VARIANT *CustomDictionary9,
            /* [optional][in] */ VARIANT *CustomDictionary10,
            /* [retval][out] */ SpellingSuggestions **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GoBack )( 
            _Application * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Help )( 
            _Application * This,
            /* [in] */ VARIANT *HelpType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AutomaticChange )( 
            _Application * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ShowMe )( 
            _Application * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *HelpTool )( 
            _Application * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewWindow )( 
            _Application * This,
            /* [retval][out] */ /*Window*/ void **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ListCommands )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL ListAllCommands);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ShowClipboard )( 
            _Application * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OnTime )( 
            _Application * This,
            /* [in] */ VARIANT *When,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Tolerance);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextLetter )( 
            _Application * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MountVolume )( 
            _Application * This,
            /* [in] */ BSTR Zone,
            /* [in] */ BSTR Server,
            /* [in] */ BSTR Volume,
            /* [optional][in] */ VARIANT *User,
            /* [optional][in] */ VARIANT *UserPassword,
            /* [optional][in] */ VARIANT *VolumePassword,
            /* [retval][out] */ short *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CleanString )( 
            _Application * This,
            /* [in] */ BSTR String,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SendFax )( 
            _Application * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ChangeFileOpenDirectory )( 
            _Application * This,
            /* [in] */ BSTR Path);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *RunOld )( 
            _Application * This,
            /* [in] */ BSTR MacroName);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GoForward )( 
            _Application * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            _Application * This,
            /* [in] */ long Left,
            /* [in] */ long Top);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Resize )( 
            _Application * This,
            /* [in] */ long Width,
            /* [in] */ long Height);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InchesToPoints )( 
            _Application * This,
            /* [in] */ int Inches,
            /* [retval][out] */ void *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CentimetersToPoints )( 
            _Application * This,
            /* [in] */ int Centimeters,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MillimetersToPoints )( 
            _Application * This,
            /* [in] */ int Millimeters,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PicasToPoints )( 
            _Application * This,
            /* [in] */ int Picas,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LinesToPoints )( 
            _Application * This,
            /* [in] */ int Lines,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PointsToInches )( 
            _Application * This,
            /* [in] */ int Points,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PointsToCentimeters )( 
            _Application * This,
            /* [in] */ int Points,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PointsToMillimeters )( 
            _Application * This,
            /* [in] */ int Points,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PointsToPicas )( 
            _Application * This,
            /* [in] */ int Points,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PointsToLines )( 
            _Application * This,
            /* [in] */ int Points,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            _Application * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PointsToPixels )( 
            _Application * This,
            /* [in] */ int Points,
            /* [optional][in] */ VARIANT *fVertical,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PixelsToPoints )( 
            _Application * This,
            /* [in] */ int Pixels,
            /* [optional][in] */ VARIANT *fVertical,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *KeyboardLatin )( 
            _Application * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *KeyboardBidi )( 
            _Application * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ToggleKeyboard )( 
            _Application * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Keyboard )( 
            _Application * This,
            /* [defaultvalue][optional][in] */ long LangId,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ProductCode )( 
            _Application * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DefaultWebOptions )( 
            _Application * This,
            /* [retval][out] */ DefaultWebOptions **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *DiscussionSupport )( 
            _Application * This,
            /* [in] */ VARIANT *Range,
            /* [in] */ VARIANT *cid,
            /* [in] */ VARIANT *piCSE);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultTheme )( 
            _Application * This,
            /* [in] */ BSTR Name,
            /* [in] */ WdDocumentMedium DocumentType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetDefaultTheme )( 
            _Application * This,
            /* [in] */ WdDocumentMedium DocumentType,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EmailOptions )( 
            _Application * This,
            /* [retval][out] */ EmailOptions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            _Application * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_COMAddIns )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ COMAddIns **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CheckLanguage )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CheckLanguage )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageSettings )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ LanguageSettings **prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Dummy1 )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnswerWizard )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ AnswerWizard **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FeatureInstall )( 
            _Application * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FeatureInstall )( 
            _Application * This,
            /* [in] */ MsoFeatureInstall prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOut2000 )( 
            _Application * This,
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint,
            /* [optional][in] */ VARIANT *PrintZoomColumn,
            /* [optional][in] */ VARIANT *PrintZoomRow,
            /* [optional][in] */ VARIANT *PrintZoomPaperWidth,
            /* [optional][in] */ VARIANT *PrintZoomPaperHeight);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Run )( 
            _Application * This,
            /* [in] */ BSTR MacroName,
            /* [optional][in] */ VARIANT *varg1,
            /* [optional][in] */ VARIANT *varg2,
            /* [optional][in] */ VARIANT *varg3,
            /* [optional][in] */ VARIANT *varg4,
            /* [optional][in] */ VARIANT *varg5,
            /* [optional][in] */ VARIANT *varg6,
            /* [optional][in] */ VARIANT *varg7,
            /* [optional][in] */ VARIANT *varg8,
            /* [optional][in] */ VARIANT *varg9,
            /* [optional][in] */ VARIANT *varg10,
            /* [optional][in] */ VARIANT *varg11,
            /* [optional][in] */ VARIANT *varg12,
            /* [optional][in] */ VARIANT *varg13,
            /* [optional][in] */ VARIANT *varg14,
            /* [optional][in] */ VARIANT *varg15,
            /* [optional][in] */ VARIANT *varg16,
            /* [optional][in] */ VARIANT *varg17,
            /* [optional][in] */ VARIANT *varg18,
            /* [optional][in] */ VARIANT *varg19,
            /* [optional][in] */ VARIANT *varg20,
            /* [optional][in] */ VARIANT *varg21,
            /* [optional][in] */ VARIANT *varg22,
            /* [optional][in] */ VARIANT *varg23,
            /* [optional][in] */ VARIANT *varg24,
            /* [optional][in] */ VARIANT *varg25,
            /* [optional][in] */ VARIANT *varg26,
            /* [optional][in] */ VARIANT *varg27,
            /* [optional][in] */ VARIANT *varg28,
            /* [optional][in] */ VARIANT *varg29,
            /* [optional][in] */ VARIANT *varg30,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOut )( 
            _Application * This,
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint,
            /* [optional][in] */ VARIANT *PrintZoomColumn,
            /* [optional][in] */ VARIANT *PrintZoomRow,
            /* [optional][in] */ VARIANT *PrintZoomPaperWidth,
            /* [optional][in] */ VARIANT *PrintZoomPaperHeight);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutomationSecurity )( 
            _Application * This,
            /* [retval][out] */ MsoAutomationSecurity *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutomationSecurity )( 
            _Application * This,
            /* [in] */ MsoAutomationSecurity prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileDialog )( 
            _Application * This,
            /* [in] */ MsoFileDialogType FileDialogType,
            /* [retval][out] */ /* external definition not present */ FileDialog **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EmailTemplate )( 
            _Application * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EmailTemplate )( 
            _Application * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowWindowsInTaskbar )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowWindowsInTaskbar )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NewDocument )( 
            _Application * This,
            /* [retval][out] */ /* external definition not present */ NewFile **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowStartupDialog )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowStartupDialog )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoCorrectEmail )( 
            _Application * This,
            /* [retval][out] */ AutoCorrect **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TaskPanes )( 
            _Application * This,
            /* [retval][out] */ TaskPanes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultLegalBlackline )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultLegalBlackline )( 
            _Application * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Dummy2 )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartTagRecognizers )( 
            _Application * This,
            /* [retval][out] */ SmartTagRecognizers **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartTagTypes )( 
            _Application * This,
            /* [retval][out] */ SmartTagTypes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XMLNamespaces )( 
            _Application * This,
            /* [retval][out] */ XMLNamespaces **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PutFocusInMailHeader )( 
            _Application * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArbitraryXMLSupportAvailable )( 
            _Application * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } _ApplicationVtbl;

    interface _Application
    {
        CONST_VTBL struct _ApplicationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Application_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Application_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Application_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Application_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Application_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Application_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Application_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Application_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define _Application_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define _Application_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define _Application_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define _Application_get_Documents(This,prop)	\
    ( (This)->lpVtbl -> get_Documents(This,prop) ) 

#define _Application_get_Windows(This,prop)	\
    ( (This)->lpVtbl -> get_Windows(This,prop) ) 

#define _Application_get_ActiveDocument(This,prop)	\
    ( (This)->lpVtbl -> get_ActiveDocument(This,prop) ) 

#define _Application_get_ActiveWindow(This,prop)	\
    ( (This)->lpVtbl -> get_ActiveWindow(This,prop) ) 

#define _Application_get_Selection(This,prop)	\
    ( (This)->lpVtbl -> get_Selection(This,prop) ) 

#define _Application_get_WordBasic(This,prop)	\
    ( (This)->lpVtbl -> get_WordBasic(This,prop) ) 

#define _Application_get_RecentFiles(This,prop)	\
    ( (This)->lpVtbl -> get_RecentFiles(This,prop) ) 

#define _Application_get_NormalTemplate(This,prop)	\
    ( (This)->lpVtbl -> get_NormalTemplate(This,prop) ) 

#define _Application_get_System(This,prop)	\
    ( (This)->lpVtbl -> get_System(This,prop) ) 

#define _Application_get_AutoCorrect(This,prop)	\
    ( (This)->lpVtbl -> get_AutoCorrect(This,prop) ) 

#define _Application_get_FontNames(This,prop)	\
    ( (This)->lpVtbl -> get_FontNames(This,prop) ) 

#define _Application_get_LandscapeFontNames(This,prop)	\
    ( (This)->lpVtbl -> get_LandscapeFontNames(This,prop) ) 

#define _Application_get_PortraitFontNames(This,prop)	\
    ( (This)->lpVtbl -> get_PortraitFontNames(This,prop) ) 

#define _Application_get_Languages(This,prop)	\
    ( (This)->lpVtbl -> get_Languages(This,prop) ) 

#define _Application_get_Assistant(This,prop)	\
    ( (This)->lpVtbl -> get_Assistant(This,prop) ) 

#define _Application_get_Browser(This,prop)	\
    ( (This)->lpVtbl -> get_Browser(This,prop) ) 

#define _Application_get_FileConverters(This,prop)	\
    ( (This)->lpVtbl -> get_FileConverters(This,prop) ) 

#define _Application_get_MailingLabel(This,prop)	\
    ( (This)->lpVtbl -> get_MailingLabel(This,prop) ) 

#define _Application_get_Dialogs(This,prop)	\
    ( (This)->lpVtbl -> get_Dialogs(This,prop) ) 

#define _Application_get_CaptionLabels(This,prop)	\
    ( (This)->lpVtbl -> get_CaptionLabels(This,prop) ) 

#define _Application_get_AutoCaptions(This,prop)	\
    ( (This)->lpVtbl -> get_AutoCaptions(This,prop) ) 

#define _Application_get_AddIns(This,prop)	\
    ( (This)->lpVtbl -> get_AddIns(This,prop) ) 

#define _Application_get_Visible(This,prop)	\
    ( (This)->lpVtbl -> get_Visible(This,prop) ) 

#define _Application_put_Visible(This,prop)	\
    ( (This)->lpVtbl -> put_Visible(This,prop) ) 

#define _Application_get_Version(This,prop)	\
    ( (This)->lpVtbl -> get_Version(This,prop) ) 

#define _Application_get_ScreenUpdating(This,prop)	\
    ( (This)->lpVtbl -> get_ScreenUpdating(This,prop) ) 

#define _Application_put_ScreenUpdating(This,prop)	\
    ( (This)->lpVtbl -> put_ScreenUpdating(This,prop) ) 

#define _Application_get_PrintPreview(This,prop)	\
    ( (This)->lpVtbl -> get_PrintPreview(This,prop) ) 

#define _Application_put_PrintPreview(This,prop)	\
    ( (This)->lpVtbl -> put_PrintPreview(This,prop) ) 

#define _Application_get_Tasks(This,prop)	\
    ( (This)->lpVtbl -> get_Tasks(This,prop) ) 

#define _Application_get_DisplayStatusBar(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayStatusBar(This,prop) ) 

#define _Application_put_DisplayStatusBar(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayStatusBar(This,prop) ) 

#define _Application_get_SpecialMode(This,prop)	\
    ( (This)->lpVtbl -> get_SpecialMode(This,prop) ) 

#define _Application_get_UsableWidth(This,prop)	\
    ( (This)->lpVtbl -> get_UsableWidth(This,prop) ) 

#define _Application_get_UsableHeight(This,prop)	\
    ( (This)->lpVtbl -> get_UsableHeight(This,prop) ) 

#define _Application_get_MathCoprocessorAvailable(This,prop)	\
    ( (This)->lpVtbl -> get_MathCoprocessorAvailable(This,prop) ) 

#define _Application_get_MouseAvailable(This,prop)	\
    ( (This)->lpVtbl -> get_MouseAvailable(This,prop) ) 

#define _Application_get_International(This,Index,prop)	\
    ( (This)->lpVtbl -> get_International(This,Index,prop) ) 

#define _Application_get_Build(This,prop)	\
    ( (This)->lpVtbl -> get_Build(This,prop) ) 

#define _Application_get_CapsLock(This,prop)	\
    ( (This)->lpVtbl -> get_CapsLock(This,prop) ) 

#define _Application_get_NumLock(This,prop)	\
    ( (This)->lpVtbl -> get_NumLock(This,prop) ) 

#define _Application_get_UserName(This,prop)	\
    ( (This)->lpVtbl -> get_UserName(This,prop) ) 

#define _Application_put_UserName(This,prop)	\
    ( (This)->lpVtbl -> put_UserName(This,prop) ) 

#define _Application_get_UserInitials(This,prop)	\
    ( (This)->lpVtbl -> get_UserInitials(This,prop) ) 

#define _Application_put_UserInitials(This,prop)	\
    ( (This)->lpVtbl -> put_UserInitials(This,prop) ) 

#define _Application_get_UserAddress(This,prop)	\
    ( (This)->lpVtbl -> get_UserAddress(This,prop) ) 

#define _Application_put_UserAddress(This,prop)	\
    ( (This)->lpVtbl -> put_UserAddress(This,prop) ) 

#define _Application_get_MacroContainer(This,prop)	\
    ( (This)->lpVtbl -> get_MacroContainer(This,prop) ) 

#define _Application_get_DisplayRecentFiles(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayRecentFiles(This,prop) ) 

#define _Application_put_DisplayRecentFiles(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayRecentFiles(This,prop) ) 

#define _Application_get_CommandBars(This,prop)	\
    ( (This)->lpVtbl -> get_CommandBars(This,prop) ) 

#define _Application_get_SynonymInfo(This,Word,LanguageID,prop)	\
    ( (This)->lpVtbl -> get_SynonymInfo(This,Word,LanguageID,prop) ) 

#define _Application_get_IUnknown(This,prop)	\
    ( (This)->lpVtbl -> get_IUnknown(This,prop) ) 

#define _Application_get_DefaultSaveFormat(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultSaveFormat(This,prop) ) 

#define _Application_put_DefaultSaveFormat(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultSaveFormat(This,prop) ) 

#define _Application_get_ListGalleries(This,prop)	\
    ( (This)->lpVtbl -> get_ListGalleries(This,prop) ) 

#define _Application_get_ActivePrinter(This,prop)	\
    ( (This)->lpVtbl -> get_ActivePrinter(This,prop) ) 

#define _Application_put_ActivePrinter(This,prop)	\
    ( (This)->lpVtbl -> put_ActivePrinter(This,prop) ) 

#define _Application_get_Templates(This,prop)	\
    ( (This)->lpVtbl -> get_Templates(This,prop) ) 

#define _Application_get_CustomizationContext(This,prop)	\
    ( (This)->lpVtbl -> get_CustomizationContext(This,prop) ) 

#define _Application_put_CustomizationContext(This,prop)	\
    ( (This)->lpVtbl -> put_CustomizationContext(This,prop) ) 

#define _Application_get_KeyBindings(This,prop)	\
    ( (This)->lpVtbl -> get_KeyBindings(This,prop) ) 

#define _Application_get_KeysBoundTo(This,KeyCategory,Command,CommandParameter,prop)	\
    ( (This)->lpVtbl -> get_KeysBoundTo(This,KeyCategory,Command,CommandParameter,prop) ) 

#define _Application_get_FindKey(This,KeyCode,KeyCode2,prop)	\
    ( (This)->lpVtbl -> get_FindKey(This,KeyCode,KeyCode2,prop) ) 

#define _Application_get_Caption(This,prop)	\
    ( (This)->lpVtbl -> get_Caption(This,prop) ) 

#define _Application_put_Caption(This,prop)	\
    ( (This)->lpVtbl -> put_Caption(This,prop) ) 

#define _Application_get_Path(This,prop)	\
    ( (This)->lpVtbl -> get_Path(This,prop) ) 

#define _Application_get_DisplayScrollBars(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayScrollBars(This,prop) ) 

#define _Application_put_DisplayScrollBars(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayScrollBars(This,prop) ) 

#define _Application_get_StartupPath(This,prop)	\
    ( (This)->lpVtbl -> get_StartupPath(This,prop) ) 

#define _Application_put_StartupPath(This,prop)	\
    ( (This)->lpVtbl -> put_StartupPath(This,prop) ) 

#define _Application_get_BackgroundSavingStatus(This,prop)	\
    ( (This)->lpVtbl -> get_BackgroundSavingStatus(This,prop) ) 

#define _Application_get_BackgroundPrintingStatus(This,prop)	\
    ( (This)->lpVtbl -> get_BackgroundPrintingStatus(This,prop) ) 

#define _Application_get_Left(This,prop)	\
    ( (This)->lpVtbl -> get_Left(This,prop) ) 

#define _Application_put_Left(This,prop)	\
    ( (This)->lpVtbl -> put_Left(This,prop) ) 

#define _Application_get_Top(This,prop)	\
    ( (This)->lpVtbl -> get_Top(This,prop) ) 

#define _Application_put_Top(This,prop)	\
    ( (This)->lpVtbl -> put_Top(This,prop) ) 

#define _Application_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define _Application_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define _Application_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define _Application_put_Height(This,prop)	\
    ( (This)->lpVtbl -> put_Height(This,prop) ) 

#define _Application_get_WindowState(This,prop)	\
    ( (This)->lpVtbl -> get_WindowState(This,prop) ) 

#define _Application_put_WindowState(This,prop)	\
    ( (This)->lpVtbl -> put_WindowState(This,prop) ) 

#define _Application_get_DisplayAutoCompleteTips(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayAutoCompleteTips(This,prop) ) 

#define _Application_put_DisplayAutoCompleteTips(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayAutoCompleteTips(This,prop) ) 

#define _Application_get_Options(This,prop)	\
    ( (This)->lpVtbl -> get_Options(This,prop) ) 

#define _Application_get_DisplayAlerts(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayAlerts(This,prop) ) 

#define _Application_put_DisplayAlerts(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayAlerts(This,prop) ) 

#define _Application_get_CustomDictionaries(This,prop)	\
    ( (This)->lpVtbl -> get_CustomDictionaries(This,prop) ) 

#define _Application_get_PathSeparator(This,prop)	\
    ( (This)->lpVtbl -> get_PathSeparator(This,prop) ) 

#define _Application_put_StatusBar(This,rhs)	\
    ( (This)->lpVtbl -> put_StatusBar(This,rhs) ) 

#define _Application_get_MAPIAvailable(This,prop)	\
    ( (This)->lpVtbl -> get_MAPIAvailable(This,prop) ) 

#define _Application_get_DisplayScreenTips(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayScreenTips(This,prop) ) 

#define _Application_put_DisplayScreenTips(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayScreenTips(This,prop) ) 

#define _Application_get_EnableCancelKey(This,prop)	\
    ( (This)->lpVtbl -> get_EnableCancelKey(This,prop) ) 

#define _Application_put_EnableCancelKey(This,prop)	\
    ( (This)->lpVtbl -> put_EnableCancelKey(This,prop) ) 

#define _Application_get_UserControl(This,prop)	\
    ( (This)->lpVtbl -> get_UserControl(This,prop) ) 

#define _Application_get_FileSearch(This,prop)	\
    ( (This)->lpVtbl -> get_FileSearch(This,prop) ) 

#define _Application_get_MailSystem(This,prop)	\
    ( (This)->lpVtbl -> get_MailSystem(This,prop) ) 

#define _Application_get_DefaultTableSeparator(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultTableSeparator(This,prop) ) 

#define _Application_put_DefaultTableSeparator(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultTableSeparator(This,prop) ) 

#define _Application_get_ShowVisualBasicEditor(This,prop)	\
    ( (This)->lpVtbl -> get_ShowVisualBasicEditor(This,prop) ) 

#define _Application_put_ShowVisualBasicEditor(This,prop)	\
    ( (This)->lpVtbl -> put_ShowVisualBasicEditor(This,prop) ) 

#define _Application_get_BrowseExtraFileTypes(This,prop)	\
    ( (This)->lpVtbl -> get_BrowseExtraFileTypes(This,prop) ) 

#define _Application_put_BrowseExtraFileTypes(This,prop)	\
    ( (This)->lpVtbl -> put_BrowseExtraFileTypes(This,prop) ) 

#define _Application_get_IsObjectValid(This,Object,prop)	\
    ( (This)->lpVtbl -> get_IsObjectValid(This,Object,prop) ) 

#define _Application_get_HangulHanjaDictionaries(This,prop)	\
    ( (This)->lpVtbl -> get_HangulHanjaDictionaries(This,prop) ) 

#define _Application_get_MailMessage(This,prop)	\
    ( (This)->lpVtbl -> get_MailMessage(This,prop) ) 

#define _Application_get_FocusInMailHeader(This,prop)	\
    ( (This)->lpVtbl -> get_FocusInMailHeader(This,prop) ) 

#define _Application_Quit(This,SaveChanges,OriginalFormat,RouteDocument)	\
    ( (This)->lpVtbl -> Quit(This,SaveChanges,OriginalFormat,RouteDocument) ) 

#define _Application_ScreenRefresh(This)	\
    ( (This)->lpVtbl -> ScreenRefresh(This) ) 

#define _Application_PrintOutOld(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,FileName,ActivePrinterMacGX,ManualDuplexPrint)	\
    ( (This)->lpVtbl -> PrintOutOld(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,FileName,ActivePrinterMacGX,ManualDuplexPrint) ) 

#define _Application_LookupNameProperties(This,Name)	\
    ( (This)->lpVtbl -> LookupNameProperties(This,Name) ) 

#define _Application_SubstituteFont(This,UnavailableFont,SubstituteFont)	\
    ( (This)->lpVtbl -> SubstituteFont(This,UnavailableFont,SubstituteFont) ) 

#define _Application_Repeat(This,Times,prop)	\
    ( (This)->lpVtbl -> Repeat(This,Times,prop) ) 

#define _Application_DDEExecute(This,Channel,Command)	\
    ( (This)->lpVtbl -> DDEExecute(This,Channel,Command) ) 

#define _Application_DDEInitiate(This,App,Topic,prop)	\
    ( (This)->lpVtbl -> DDEInitiate(This,App,Topic,prop) ) 

#define _Application_DDEPoke(This,Channel,Item,Data)	\
    ( (This)->lpVtbl -> DDEPoke(This,Channel,Item,Data) ) 

#define _Application_DDERequest(This,Channel,Item,prop)	\
    ( (This)->lpVtbl -> DDERequest(This,Channel,Item,prop) ) 

#define _Application_DDETerminate(This,Channel)	\
    ( (This)->lpVtbl -> DDETerminate(This,Channel) ) 

#define _Application_DDETerminateAll(This)	\
    ( (This)->lpVtbl -> DDETerminateAll(This) ) 

#define _Application_BuildKeyCode(This,Arg1,Arg2,Arg3,Arg4,prop)	\
    ( (This)->lpVtbl -> BuildKeyCode(This,Arg1,Arg2,Arg3,Arg4,prop) ) 

#define _Application_KeyString(This,KeyCode,KeyCode2,prop)	\
    ( (This)->lpVtbl -> KeyString(This,KeyCode,KeyCode2,prop) ) 

#define _Application_OrganizerCopy(This,Source,Destination,Name,Object)	\
    ( (This)->lpVtbl -> OrganizerCopy(This,Source,Destination,Name,Object) ) 

#define _Application_OrganizerDelete(This,Source,Name,Object)	\
    ( (This)->lpVtbl -> OrganizerDelete(This,Source,Name,Object) ) 

#define _Application_OrganizerRename(This,Source,Name,NewName,Object)	\
    ( (This)->lpVtbl -> OrganizerRename(This,Source,Name,NewName,Object) ) 

#define _Application_AddAddress(This,TagID,Value)	\
    ( (This)->lpVtbl -> AddAddress(This,TagID,Value) ) 

#define _Application_GetAddress(This,Name,AddressProperties,UseAutoText,DisplaySelectDialog,SelectDialog,CheckNamesDialog,RecentAddressesChoice,UpdateRecentAddresses,prop)	\
    ( (This)->lpVtbl -> GetAddress(This,Name,AddressProperties,UseAutoText,DisplaySelectDialog,SelectDialog,CheckNamesDialog,RecentAddressesChoice,UpdateRecentAddresses,prop) ) 

#define _Application_CheckGrammar(This,String,prop)	\
    ( (This)->lpVtbl -> CheckGrammar(This,String,prop) ) 

#define _Application_CheckSpelling(This,Word,CustomDictionary,IgnoreUppercase,MainDictionary,CustomDictionary2,CustomDictionary3,CustomDictionary4,CustomDictionary5,CustomDictionary6,CustomDictionary7,CustomDictionary8,CustomDictionary9,CustomDictionary10,prop)	\
    ( (This)->lpVtbl -> CheckSpelling(This,Word,CustomDictionary,IgnoreUppercase,MainDictionary,CustomDictionary2,CustomDictionary3,CustomDictionary4,CustomDictionary5,CustomDictionary6,CustomDictionary7,CustomDictionary8,CustomDictionary9,CustomDictionary10,prop) ) 

#define _Application_ResetIgnoreAll(This)	\
    ( (This)->lpVtbl -> ResetIgnoreAll(This) ) 

#define _Application_GetSpellingSuggestions(This,Word,CustomDictionary,IgnoreUppercase,MainDictionary,SuggestionMode,CustomDictionary2,CustomDictionary3,CustomDictionary4,CustomDictionary5,CustomDictionary6,CustomDictionary7,CustomDictionary8,CustomDictionary9,CustomDictionary10,prop)	\
    ( (This)->lpVtbl -> GetSpellingSuggestions(This,Word,CustomDictionary,IgnoreUppercase,MainDictionary,SuggestionMode,CustomDictionary2,CustomDictionary3,CustomDictionary4,CustomDictionary5,CustomDictionary6,CustomDictionary7,CustomDictionary8,CustomDictionary9,CustomDictionary10,prop) ) 

#define _Application_GoBack(This)	\
    ( (This)->lpVtbl -> GoBack(This) ) 

#define _Application_Help(This,HelpType)	\
    ( (This)->lpVtbl -> Help(This,HelpType) ) 

#define _Application_AutomaticChange(This)	\
    ( (This)->lpVtbl -> AutomaticChange(This) ) 

#define _Application_ShowMe(This)	\
    ( (This)->lpVtbl -> ShowMe(This) ) 

#define _Application_HelpTool(This)	\
    ( (This)->lpVtbl -> HelpTool(This) ) 

#define _Application_NewWindow(This,prop)	\
    ( (This)->lpVtbl -> NewWindow(This,prop) ) 

#define _Application_ListCommands(This,ListAllCommands)	\
    ( (This)->lpVtbl -> ListCommands(This,ListAllCommands) ) 

#define _Application_ShowClipboard(This)	\
    ( (This)->lpVtbl -> ShowClipboard(This) ) 

#define _Application_OnTime(This,When,Name,Tolerance)	\
    ( (This)->lpVtbl -> OnTime(This,When,Name,Tolerance) ) 

#define _Application_NextLetter(This)	\
    ( (This)->lpVtbl -> NextLetter(This) ) 

#define _Application_MountVolume(This,Zone,Server,Volume,User,UserPassword,VolumePassword,prop)	\
    ( (This)->lpVtbl -> MountVolume(This,Zone,Server,Volume,User,UserPassword,VolumePassword,prop) ) 

#define _Application_CleanString(This,String,prop)	\
    ( (This)->lpVtbl -> CleanString(This,String,prop) ) 

#define _Application_SendFax(This)	\
    ( (This)->lpVtbl -> SendFax(This) ) 

#define _Application_ChangeFileOpenDirectory(This,Path)	\
    ( (This)->lpVtbl -> ChangeFileOpenDirectory(This,Path) ) 

#define _Application_RunOld(This,MacroName)	\
    ( (This)->lpVtbl -> RunOld(This,MacroName) ) 

#define _Application_GoForward(This)	\
    ( (This)->lpVtbl -> GoForward(This) ) 

#define _Application_Move(This,Left,Top)	\
    ( (This)->lpVtbl -> Move(This,Left,Top) ) 

#define _Application_Resize(This,Width,Height)	\
    ( (This)->lpVtbl -> Resize(This,Width,Height) ) 

#define _Application_InchesToPoints(This,Inches,prop)	\
    ( (This)->lpVtbl -> InchesToPoints(This,Inches,prop) ) 

#define _Application_CentimetersToPoints(This,Centimeters,prop)	\
    ( (This)->lpVtbl -> CentimetersToPoints(This,Centimeters,prop) ) 

#define _Application_MillimetersToPoints(This,Millimeters,prop)	\
    ( (This)->lpVtbl -> MillimetersToPoints(This,Millimeters,prop) ) 

#define _Application_PicasToPoints(This,Picas,prop)	\
    ( (This)->lpVtbl -> PicasToPoints(This,Picas,prop) ) 

#define _Application_LinesToPoints(This,Lines,prop)	\
    ( (This)->lpVtbl -> LinesToPoints(This,Lines,prop) ) 

#define _Application_PointsToInches(This,Points,prop)	\
    ( (This)->lpVtbl -> PointsToInches(This,Points,prop) ) 

#define _Application_PointsToCentimeters(This,Points,prop)	\
    ( (This)->lpVtbl -> PointsToCentimeters(This,Points,prop) ) 

#define _Application_PointsToMillimeters(This,Points,prop)	\
    ( (This)->lpVtbl -> PointsToMillimeters(This,Points,prop) ) 

#define _Application_PointsToPicas(This,Points,prop)	\
    ( (This)->lpVtbl -> PointsToPicas(This,Points,prop) ) 

#define _Application_PointsToLines(This,Points,prop)	\
    ( (This)->lpVtbl -> PointsToLines(This,Points,prop) ) 

#define _Application_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define _Application_PointsToPixels(This,Points,fVertical,prop)	\
    ( (This)->lpVtbl -> PointsToPixels(This,Points,fVertical,prop) ) 

#define _Application_PixelsToPoints(This,Pixels,fVertical,prop)	\
    ( (This)->lpVtbl -> PixelsToPoints(This,Pixels,fVertical,prop) ) 

#define _Application_KeyboardLatin(This)	\
    ( (This)->lpVtbl -> KeyboardLatin(This) ) 

#define _Application_KeyboardBidi(This)	\
    ( (This)->lpVtbl -> KeyboardBidi(This) ) 

#define _Application_ToggleKeyboard(This)	\
    ( (This)->lpVtbl -> ToggleKeyboard(This) ) 

#define _Application_Keyboard(This,LangId,prop)	\
    ( (This)->lpVtbl -> Keyboard(This,LangId,prop) ) 

#define _Application_ProductCode(This,prop)	\
    ( (This)->lpVtbl -> ProductCode(This,prop) ) 

#define _Application_DefaultWebOptions(This,prop)	\
    ( (This)->lpVtbl -> DefaultWebOptions(This,prop) ) 

#define _Application_DiscussionSupport(This,Range,cid,piCSE)	\
    ( (This)->lpVtbl -> DiscussionSupport(This,Range,cid,piCSE) ) 

#define _Application_SetDefaultTheme(This,Name,DocumentType)	\
    ( (This)->lpVtbl -> SetDefaultTheme(This,Name,DocumentType) ) 

#define _Application_GetDefaultTheme(This,DocumentType,prop)	\
    ( (This)->lpVtbl -> GetDefaultTheme(This,DocumentType,prop) ) 

#define _Application_get_EmailOptions(This,prop)	\
    ( (This)->lpVtbl -> get_EmailOptions(This,prop) ) 

#define _Application_get_Language(This,prop)	\
    ( (This)->lpVtbl -> get_Language(This,prop) ) 

#define _Application_get_COMAddIns(This,prop)	\
    ( (This)->lpVtbl -> get_COMAddIns(This,prop) ) 

#define _Application_get_CheckLanguage(This,prop)	\
    ( (This)->lpVtbl -> get_CheckLanguage(This,prop) ) 

#define _Application_put_CheckLanguage(This,prop)	\
    ( (This)->lpVtbl -> put_CheckLanguage(This,prop) ) 

#define _Application_get_LanguageSettings(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageSettings(This,prop) ) 

#define _Application_get_Dummy1(This,prop)	\
    ( (This)->lpVtbl -> get_Dummy1(This,prop) ) 

#define _Application_get_AnswerWizard(This,prop)	\
    ( (This)->lpVtbl -> get_AnswerWizard(This,prop) ) 

#define _Application_get_FeatureInstall(This,prop)	\
    ( (This)->lpVtbl -> get_FeatureInstall(This,prop) ) 

#define _Application_put_FeatureInstall(This,prop)	\
    ( (This)->lpVtbl -> put_FeatureInstall(This,prop) ) 

#define _Application_PrintOut2000(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,FileName,ActivePrinterMacGX,ManualDuplexPrint,PrintZoomColumn,PrintZoomRow,PrintZoomPaperWidth,PrintZoomPaperHeight)	\
    ( (This)->lpVtbl -> PrintOut2000(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,FileName,ActivePrinterMacGX,ManualDuplexPrint,PrintZoomColumn,PrintZoomRow,PrintZoomPaperWidth,PrintZoomPaperHeight) ) 

#define _Application_Run(This,MacroName,varg1,varg2,varg3,varg4,varg5,varg6,varg7,varg8,varg9,varg10,varg11,varg12,varg13,varg14,varg15,varg16,varg17,varg18,varg19,varg20,varg21,varg22,varg23,varg24,varg25,varg26,varg27,varg28,varg29,varg30,prop)	\
    ( (This)->lpVtbl -> Run(This,MacroName,varg1,varg2,varg3,varg4,varg5,varg6,varg7,varg8,varg9,varg10,varg11,varg12,varg13,varg14,varg15,varg16,varg17,varg18,varg19,varg20,varg21,varg22,varg23,varg24,varg25,varg26,varg27,varg28,varg29,varg30,prop) ) 

#define _Application_PrintOut(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,FileName,ActivePrinterMacGX,ManualDuplexPrint,PrintZoomColumn,PrintZoomRow,PrintZoomPaperWidth,PrintZoomPaperHeight)	\
    ( (This)->lpVtbl -> PrintOut(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,FileName,ActivePrinterMacGX,ManualDuplexPrint,PrintZoomColumn,PrintZoomRow,PrintZoomPaperWidth,PrintZoomPaperHeight) ) 

#define _Application_get_AutomationSecurity(This,prop)	\
    ( (This)->lpVtbl -> get_AutomationSecurity(This,prop) ) 

#define _Application_put_AutomationSecurity(This,prop)	\
    ( (This)->lpVtbl -> put_AutomationSecurity(This,prop) ) 

#define _Application_get_FileDialog(This,FileDialogType,prop)	\
    ( (This)->lpVtbl -> get_FileDialog(This,FileDialogType,prop) ) 

#define _Application_get_EmailTemplate(This,prop)	\
    ( (This)->lpVtbl -> get_EmailTemplate(This,prop) ) 

#define _Application_put_EmailTemplate(This,prop)	\
    ( (This)->lpVtbl -> put_EmailTemplate(This,prop) ) 

#define _Application_get_ShowWindowsInTaskbar(This,prop)	\
    ( (This)->lpVtbl -> get_ShowWindowsInTaskbar(This,prop) ) 

#define _Application_put_ShowWindowsInTaskbar(This,prop)	\
    ( (This)->lpVtbl -> put_ShowWindowsInTaskbar(This,prop) ) 

#define _Application_get_NewDocument(This,prop)	\
    ( (This)->lpVtbl -> get_NewDocument(This,prop) ) 

#define _Application_get_ShowStartupDialog(This,prop)	\
    ( (This)->lpVtbl -> get_ShowStartupDialog(This,prop) ) 

#define _Application_put_ShowStartupDialog(This,prop)	\
    ( (This)->lpVtbl -> put_ShowStartupDialog(This,prop) ) 

#define _Application_get_AutoCorrectEmail(This,prop)	\
    ( (This)->lpVtbl -> get_AutoCorrectEmail(This,prop) ) 

#define _Application_get_TaskPanes(This,prop)	\
    ( (This)->lpVtbl -> get_TaskPanes(This,prop) ) 

#define _Application_get_DefaultLegalBlackline(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultLegalBlackline(This,prop) ) 

#define _Application_put_DefaultLegalBlackline(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultLegalBlackline(This,prop) ) 

#define _Application_Dummy2(This,prop)	\
    ( (This)->lpVtbl -> Dummy2(This,prop) ) 

#define _Application_get_SmartTagRecognizers(This,prop)	\
    ( (This)->lpVtbl -> get_SmartTagRecognizers(This,prop) ) 

#define _Application_get_SmartTagTypes(This,prop)	\
    ( (This)->lpVtbl -> get_SmartTagTypes(This,prop) ) 

#define _Application_get_XMLNamespaces(This,prop)	\
    ( (This)->lpVtbl -> get_XMLNamespaces(This,prop) ) 

#define _Application_PutFocusInMailHeader(This)	\
    ( (This)->lpVtbl -> PutFocusInMailHeader(This) ) 

#define _Application_get_ArbitraryXMLSupportAvailable(This,prop)	\
    ( (This)->lpVtbl -> get_ArbitraryXMLSupportAvailable(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_DDEPoke_Proxy( 
    _Application * This,
    /* [in] */ long Channel,
    /* [in] */ BSTR Item,
    /* [in] */ BSTR Data);


void __RPC_STUB _Application_DDEPoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_DDERequest_Proxy( 
    _Application * This,
    /* [in] */ long Channel,
    /* [in] */ BSTR Item,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Application_DDERequest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_DDETerminate_Proxy( 
    _Application * This,
    /* [in] */ long Channel);


void __RPC_STUB _Application_DDETerminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_DDETerminateAll_Proxy( 
    _Application * This);


void __RPC_STUB _Application_DDETerminateAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_BuildKeyCode_Proxy( 
    _Application * This,
    /* [in] */ WdKey Arg1,
    /* [optional][in] */ VARIANT *Arg2,
    /* [optional][in] */ VARIANT *Arg3,
    /* [optional][in] */ VARIANT *Arg4,
    /* [retval][out] */ long *prop);


void __RPC_STUB _Application_BuildKeyCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_KeyString_Proxy( 
    _Application * This,
    /* [in] */ long KeyCode,
    /* [optional][in] */ VARIANT *KeyCode2,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Application_KeyString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_OrganizerCopy_Proxy( 
    _Application * This,
    /* [in] */ BSTR Source,
    /* [in] */ BSTR Destination,
    /* [in] */ BSTR Name,
    /* [in] */ WdOrganizerObject Object);


void __RPC_STUB _Application_OrganizerCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_OrganizerDelete_Proxy( 
    _Application * This,
    /* [in] */ BSTR Source,
    /* [in] */ BSTR Name,
    /* [in] */ WdOrganizerObject Object);


void __RPC_STUB _Application_OrganizerDelete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_OrganizerRename_Proxy( 
    _Application * This,
    /* [in] */ BSTR Source,
    /* [in] */ BSTR Name,
    /* [in] */ BSTR NewName,
    /* [in] */ WdOrganizerObject Object);


void __RPC_STUB _Application_OrganizerRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_AddAddress_Proxy( 
    _Application * This,
    /* [in] */ SAFEARRAY * *TagID,
    /* [in] */ SAFEARRAY * *Value);


void __RPC_STUB _Application_AddAddress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_GetAddress_Proxy( 
    _Application * This,
    /* [optional][in] */ VARIANT *Name,
    /* [optional][in] */ VARIANT *AddressProperties,
    /* [optional][in] */ VARIANT *UseAutoText,
    /* [optional][in] */ VARIANT *DisplaySelectDialog,
    /* [optional][in] */ VARIANT *SelectDialog,
    /* [optional][in] */ VARIANT *CheckNamesDialog,
    /* [optional][in] */ VARIANT *RecentAddressesChoice,
    /* [optional][in] */ VARIANT *UpdateRecentAddresses,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Application_GetAddress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_CheckGrammar_Proxy( 
    _Application * This,
    /* [in] */ BSTR String,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Application_CheckGrammar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_CheckSpelling_Proxy( 
    _Application * This,
    /* [in] */ BSTR Word,
    /* [optional][in] */ VARIANT *CustomDictionary,
    /* [optional][in] */ VARIANT *IgnoreUppercase,
    /* [optional][in] */ VARIANT *MainDictionary,
    /* [optional][in] */ VARIANT *CustomDictionary2,
    /* [optional][in] */ VARIANT *CustomDictionary3,
    /* [optional][in] */ VARIANT *CustomDictionary4,
    /* [optional][in] */ VARIANT *CustomDictionary5,
    /* [optional][in] */ VARIANT *CustomDictionary6,
    /* [optional][in] */ VARIANT *CustomDictionary7,
    /* [optional][in] */ VARIANT *CustomDictionary8,
    /* [optional][in] */ VARIANT *CustomDictionary9,
    /* [optional][in] */ VARIANT *CustomDictionary10,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Application_CheckSpelling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_ResetIgnoreAll_Proxy( 
    _Application * This);


void __RPC_STUB _Application_ResetIgnoreAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_GetSpellingSuggestions_Proxy( 
    _Application * This,
    /* [in] */ BSTR Word,
    /* [optional][in] */ VARIANT *CustomDictionary,
    /* [optional][in] */ VARIANT *IgnoreUppercase,
    /* [optional][in] */ VARIANT *MainDictionary,
    /* [optional][in] */ VARIANT *SuggestionMode,
    /* [optional][in] */ VARIANT *CustomDictionary2,
    /* [optional][in] */ VARIANT *CustomDictionary3,
    /* [optional][in] */ VARIANT *CustomDictionary4,
    /* [optional][in] */ VARIANT *CustomDictionary5,
    /* [optional][in] */ VARIANT *CustomDictionary6,
    /* [optional][in] */ VARIANT *CustomDictionary7,
    /* [optional][in] */ VARIANT *CustomDictionary8,
    /* [optional][in] */ VARIANT *CustomDictionary9,
    /* [optional][in] */ VARIANT *CustomDictionary10,
    /* [retval][out] */ SpellingSuggestions **prop);


void __RPC_STUB _Application_GetSpellingSuggestions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_GoBack_Proxy( 
    _Application * This);


void __RPC_STUB _Application_GoBack_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_Help_Proxy( 
    _Application * This,
    /* [in] */ VARIANT *HelpType);


void __RPC_STUB _Application_Help_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_AutomaticChange_Proxy( 
    _Application * This);


void __RPC_STUB _Application_AutomaticChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_ShowMe_Proxy( 
    _Application * This);


void __RPC_STUB _Application_ShowMe_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_HelpTool_Proxy( 
    _Application * This);


void __RPC_STUB _Application_HelpTool_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_NewWindow_Proxy( 
    _Application * This,
    /* [retval][out] */ /*Window*/ void **prop);


void __RPC_STUB _Application_NewWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_ListCommands_Proxy( 
    _Application * This,
    /* [in] */ VARIANT_BOOL ListAllCommands);


void __RPC_STUB _Application_ListCommands_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_ShowClipboard_Proxy( 
    _Application * This);


void __RPC_STUB _Application_ShowClipboard_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_OnTime_Proxy( 
    _Application * This,
    /* [in] */ VARIANT *When,
    /* [in] */ BSTR Name,
    /* [optional][in] */ VARIANT *Tolerance);


void __RPC_STUB _Application_OnTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_NextLetter_Proxy( 
    _Application * This);


void __RPC_STUB _Application_NextLetter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_MountVolume_Proxy( 
    _Application * This,
    /* [in] */ BSTR Zone,
    /* [in] */ BSTR Server,
    /* [in] */ BSTR Volume,
    /* [optional][in] */ VARIANT *User,
    /* [optional][in] */ VARIANT *UserPassword,
    /* [optional][in] */ VARIANT *VolumePassword,
    /* [retval][out] */ short *prop);


void __RPC_STUB _Application_MountVolume_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_CleanString_Proxy( 
    _Application * This,
    /* [in] */ BSTR String,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Application_CleanString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_SendFax_Proxy( 
    _Application * This);


void __RPC_STUB _Application_SendFax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_ChangeFileOpenDirectory_Proxy( 
    _Application * This,
    /* [in] */ BSTR Path);


void __RPC_STUB _Application_ChangeFileOpenDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _Application_RunOld_Proxy( 
    _Application * This,
    /* [in] */ BSTR MacroName);


void __RPC_STUB _Application_RunOld_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_GoForward_Proxy( 
    _Application * This);


void __RPC_STUB _Application_GoForward_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_Move_Proxy( 
    _Application * This,
    /* [in] */ long Left,
    /* [in] */ long Top);


void __RPC_STUB _Application_Move_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_Resize_Proxy( 
    _Application * This,
    /* [in] */ long Width,
    /* [in] */ long Height);


void __RPC_STUB _Application_Resize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_InchesToPoints_Proxy( 
    _Application * This,
    /* [in] */ int Inches,
    /* [retval][out] */ void *prop);


void __RPC_STUB _Application_InchesToPoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_CentimetersToPoints_Proxy( 
    _Application * This,
    /* [in] */ int Centimeters,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Application_CentimetersToPoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_MillimetersToPoints_Proxy( 
    _Application * This,
    /* [in] */ int Millimeters,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Application_MillimetersToPoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_PicasToPoints_Proxy( 
    _Application * This,
    /* [in] */ int Picas,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Application_PicasToPoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_LinesToPoints_Proxy( 
    _Application * This,
    /* [in] */ int Lines,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Application_LinesToPoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_PointsToInches_Proxy( 
    _Application * This,
    /* [in] */ int Points,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Application_PointsToInches_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_PointsToCentimeters_Proxy( 
    _Application * This,
    /* [in] */ int Points,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Application_PointsToCentimeters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_PointsToMillimeters_Proxy( 
    _Application * This,
    /* [in] */ int Points,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Application_PointsToMillimeters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_PointsToPicas_Proxy( 
    _Application * This,
    /* [in] */ int Points,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Application_PointsToPicas_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_PointsToLines_Proxy( 
    _Application * This,
    /* [in] */ int Points,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Application_PointsToLines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_Activate_Proxy( 
    _Application * This);


void __RPC_STUB _Application_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_PointsToPixels_Proxy( 
    _Application * This,
    /* [in] */ int Points,
    /* [optional][in] */ VARIANT *fVertical,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Application_PointsToPixels_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_PixelsToPoints_Proxy( 
    _Application * This,
    /* [in] */ int Pixels,
    /* [optional][in] */ VARIANT *fVertical,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Application_PixelsToPoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_KeyboardLatin_Proxy( 
    _Application * This);


void __RPC_STUB _Application_KeyboardLatin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_KeyboardBidi_Proxy( 
    _Application * This);


void __RPC_STUB _Application_KeyboardBidi_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_ToggleKeyboard_Proxy( 
    _Application * This);


void __RPC_STUB _Application_ToggleKeyboard_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_Keyboard_Proxy( 
    _Application * This,
    /* [defaultvalue][optional][in] */ long LangId,
    /* [retval][out] */ long *prop);


void __RPC_STUB _Application_Keyboard_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_ProductCode_Proxy( 
    _Application * This,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Application_ProductCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_DefaultWebOptions_Proxy( 
    _Application * This,
    /* [retval][out] */ DefaultWebOptions **prop);


void __RPC_STUB _Application_DefaultWebOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _Application_DiscussionSupport_Proxy( 
    _Application * This,
    /* [in] */ VARIANT *Range,
    /* [in] */ VARIANT *cid,
    /* [in] */ VARIANT *piCSE);


void __RPC_STUB _Application_DiscussionSupport_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_SetDefaultTheme_Proxy( 
    _Application * This,
    /* [in] */ BSTR Name,
    /* [in] */ WdDocumentMedium DocumentType);


void __RPC_STUB _Application_SetDefaultTheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_GetDefaultTheme_Proxy( 
    _Application * This,
    /* [in] */ WdDocumentMedium DocumentType,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Application_GetDefaultTheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_EmailOptions_Proxy( 
    _Application * This,
    /* [retval][out] */ EmailOptions **prop);


void __RPC_STUB _Application_get_EmailOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_Language_Proxy( 
    _Application * This,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Application_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_COMAddIns_Proxy( 
    _Application * This,
    /* [retval][out] */ /* external definition not present */ COMAddIns **prop);


void __RPC_STUB _Application_get_COMAddIns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_CheckLanguage_Proxy( 
    _Application * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Application_get_CheckLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Application_put_CheckLanguage_Proxy( 
    _Application * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Application_put_CheckLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_LanguageSettings_Proxy( 
    _Application * This,
    /* [retval][out] */ /* external definition not present */ LanguageSettings **prop);


void __RPC_STUB _Application_get_LanguageSettings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_Dummy1_Proxy( 
    _Application * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Application_get_Dummy1_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_AnswerWizard_Proxy( 
    _Application * This,
    /* [retval][out] */ /* external definition not present */ AnswerWizard **prop);


void __RPC_STUB _Application_get_AnswerWizard_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_FeatureInstall_Proxy( 
    _Application * This,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Application_get_FeatureInstall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Application_put_FeatureInstall_Proxy( 
    _Application * This,
    /* [in] */ MsoFeatureInstall prop);


void __RPC_STUB _Application_put_FeatureInstall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _Application_PrintOut2000_Proxy( 
    _Application * This,
    /* [optional][in] */ VARIANT *Background,
    /* [optional][in] */ VARIANT *Append,
    /* [optional][in] */ VARIANT *Range,
    /* [optional][in] */ VARIANT *OutputFileName,
    /* [optional][in] */ VARIANT *From,
    /* [optional][in] */ VARIANT *To,
    /* [optional][in] */ VARIANT *Item,
    /* [optional][in] */ VARIANT *Copies,
    /* [optional][in] */ VARIANT *Pages,
    /* [optional][in] */ VARIANT *PageType,
    /* [optional][in] */ VARIANT *PrintToFile,
    /* [optional][in] */ VARIANT *Collate,
    /* [optional][in] */ VARIANT *FileName,
    /* [optional][in] */ VARIANT *ActivePrinterMacGX,
    /* [optional][in] */ VARIANT *ManualDuplexPrint,
    /* [optional][in] */ VARIANT *PrintZoomColumn,
    /* [optional][in] */ VARIANT *PrintZoomRow,
    /* [optional][in] */ VARIANT *PrintZoomPaperWidth,
    /* [optional][in] */ VARIANT *PrintZoomPaperHeight);


void __RPC_STUB _Application_PrintOut2000_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_Run_Proxy( 
    _Application * This,
    /* [in] */ BSTR MacroName,
    /* [optional][in] */ VARIANT *varg1,
    /* [optional][in] */ VARIANT *varg2,
    /* [optional][in] */ VARIANT *varg3,
    /* [optional][in] */ VARIANT *varg4,
    /* [optional][in] */ VARIANT *varg5,
    /* [optional][in] */ VARIANT *varg6,
    /* [optional][in] */ VARIANT *varg7,
    /* [optional][in] */ VARIANT *varg8,
    /* [optional][in] */ VARIANT *varg9,
    /* [optional][in] */ VARIANT *varg10,
    /* [optional][in] */ VARIANT *varg11,
    /* [optional][in] */ VARIANT *varg12,
    /* [optional][in] */ VARIANT *varg13,
    /* [optional][in] */ VARIANT *varg14,
    /* [optional][in] */ VARIANT *varg15,
    /* [optional][in] */ VARIANT *varg16,
    /* [optional][in] */ VARIANT *varg17,
    /* [optional][in] */ VARIANT *varg18,
    /* [optional][in] */ VARIANT *varg19,
    /* [optional][in] */ VARIANT *varg20,
    /* [optional][in] */ VARIANT *varg21,
    /* [optional][in] */ VARIANT *varg22,
    /* [optional][in] */ VARIANT *varg23,
    /* [optional][in] */ VARIANT *varg24,
    /* [optional][in] */ VARIANT *varg25,
    /* [optional][in] */ VARIANT *varg26,
    /* [optional][in] */ VARIANT *varg27,
    /* [optional][in] */ VARIANT *varg28,
    /* [optional][in] */ VARIANT *varg29,
    /* [optional][in] */ VARIANT *varg30,
    /* [retval][out] */ VARIANT *prop);


void __RPC_STUB _Application_Run_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_PrintOut_Proxy( 
    _Application * This,
    /* [optional][in] */ VARIANT *Background,
    /* [optional][in] */ VARIANT *Append,
    /* [optional][in] */ VARIANT *Range,
    /* [optional][in] */ VARIANT *OutputFileName,
    /* [optional][in] */ VARIANT *From,
    /* [optional][in] */ VARIANT *To,
    /* [optional][in] */ VARIANT *Item,
    /* [optional][in] */ VARIANT *Copies,
    /* [optional][in] */ VARIANT *Pages,
    /* [optional][in] */ VARIANT *PageType,
    /* [optional][in] */ VARIANT *PrintToFile,
    /* [optional][in] */ VARIANT *Collate,
    /* [optional][in] */ VARIANT *FileName,
    /* [optional][in] */ VARIANT *ActivePrinterMacGX,
    /* [optional][in] */ VARIANT *ManualDuplexPrint,
    /* [optional][in] */ VARIANT *PrintZoomColumn,
    /* [optional][in] */ VARIANT *PrintZoomRow,
    /* [optional][in] */ VARIANT *PrintZoomPaperWidth,
    /* [optional][in] */ VARIANT *PrintZoomPaperHeight);


void __RPC_STUB _Application_PrintOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_AutomationSecurity_Proxy( 
    _Application * This,
    /* [retval][out] */ MsoAutomationSecurity *prop);


void __RPC_STUB _Application_get_AutomationSecurity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Application_put_AutomationSecurity_Proxy( 
    _Application * This,
    /* [in] */ MsoAutomationSecurity prop);


void __RPC_STUB _Application_put_AutomationSecurity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_FileDialog_Proxy( 
    _Application * This,
    /* [in] */ MsoFileDialogType FileDialogType,
    /* [retval][out] */ /* external definition not present */ FileDialog **prop);


void __RPC_STUB _Application_get_FileDialog_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_EmailTemplate_Proxy( 
    _Application * This,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Application_get_EmailTemplate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Application_put_EmailTemplate_Proxy( 
    _Application * This,
    /* [in] */ BSTR prop);


void __RPC_STUB _Application_put_EmailTemplate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_ShowWindowsInTaskbar_Proxy( 
    _Application * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Application_get_ShowWindowsInTaskbar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Application_put_ShowWindowsInTaskbar_Proxy( 
    _Application * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Application_put_ShowWindowsInTaskbar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_NewDocument_Proxy( 
    _Application * This,
    /* [retval][out] */ /* external definition not present */ NewFile **prop);


void __RPC_STUB _Application_get_NewDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_ShowStartupDialog_Proxy( 
    _Application * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Application_get_ShowStartupDialog_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Application_put_ShowStartupDialog_Proxy( 
    _Application * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Application_put_ShowStartupDialog_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_AutoCorrectEmail_Proxy( 
    _Application * This,
    /* [retval][out] */ AutoCorrect **prop);


void __RPC_STUB _Application_get_AutoCorrectEmail_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_TaskPanes_Proxy( 
    _Application * This,
    /* [retval][out] */ TaskPanes **prop);


void __RPC_STUB _Application_get_TaskPanes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_DefaultLegalBlackline_Proxy( 
    _Application * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Application_get_DefaultLegalBlackline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Application_put_DefaultLegalBlackline_Proxy( 
    _Application * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Application_put_DefaultLegalBlackline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _Application_Dummy2_Proxy( 
    _Application * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Application_Dummy2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_SmartTagRecognizers_Proxy( 
    _Application * This,
    /* [retval][out] */ SmartTagRecognizers **prop);


void __RPC_STUB _Application_get_SmartTagRecognizers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_SmartTagTypes_Proxy( 
    _Application * This,
    /* [retval][out] */ SmartTagTypes **prop);


void __RPC_STUB _Application_get_SmartTagTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_XMLNamespaces_Proxy( 
    _Application * This,
    /* [retval][out] */ XMLNamespaces **prop);


void __RPC_STUB _Application_get_XMLNamespaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Application_PutFocusInMailHeader_Proxy( 
    _Application * This);


void __RPC_STUB _Application_PutFocusInMailHeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Application_get_ArbitraryXMLSupportAvailable_Proxy( 
    _Application * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Application_get_ArbitraryXMLSupportAvailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___Application_INTERFACE_DEFINED__ */


#ifndef ___Global_INTERFACE_DEFINED__
#define ___Global_INTERFACE_DEFINED__

/* interface _Global */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][version][uuid] */ 


EXTERN_C const IID IID__Global;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209B9-0000-0000-C000-000000000046")
    _Global : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Documents( 
            /* [retval][out] */ Documents **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Windows( 
            /* [retval][out] */ Windows **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveDocument( 
            /* [retval][out] */ _Document **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveWindow( 
            /* [retval][out] */ /*Window*/ void **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [retval][out] */ Selection **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WordBasic( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintPreview( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintPreview( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RecentFiles( 
            /* [retval][out] */ RecentFiles **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NormalTemplate( 
            /* [retval][out] */ Template **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_System( 
            /* [retval][out] */ System **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoCorrect( 
            /* [retval][out] */ AutoCorrect **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontNames( 
            /* [retval][out] */ FontNames **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LandscapeFontNames( 
            /* [retval][out] */ FontNames **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PortraitFontNames( 
            /* [retval][out] */ FontNames **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Languages( 
            /* [retval][out] */ Languages **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Assistant( 
            /* [retval][out] */ /* external definition not present */ Assistant **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileConverters( 
            /* [retval][out] */ FileConverters **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Dialogs( 
            /* [retval][out] */ Dialogs **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CaptionLabels( 
            /* [retval][out] */ CaptionLabels **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoCaptions( 
            /* [retval][out] */ AutoCaptions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddIns( 
            /* [retval][out] */ AddIns **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Tasks( 
            /* [retval][out] */ Tasks **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MacroContainer( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandBars( 
            /* [retval][out] */ /* external definition not present */ CommandBars **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SynonymInfo( 
            /* [in] */ BSTR Word,
            /* [optional][in] */ VARIANT *LanguageID,
            /* [retval][out] */ SynonymInfo **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IUnknown( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListGalleries( 
            /* [retval][out] */ ListGalleries **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActivePrinter( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ActivePrinter( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Templates( 
            /* [retval][out] */ Templates **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomizationContext( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CustomizationContext( 
            /* [in] */ IDispatch *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeyBindings( 
            /* [retval][out] */ KeyBindings **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeysBoundTo( 
            /* [in] */ WdKeyCategory KeyCategory,
            /* [in] */ BSTR Command,
            /* [optional][in] */ VARIANT *CommandParameter,
            /* [retval][out] */ KeysBoundTo **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FindKey( 
            /* [in] */ long KeyCode,
            /* [optional][in] */ VARIANT *KeyCode2,
            /* [retval][out] */ KeyBinding **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Options( 
            /* [retval][out] */ Options **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomDictionaries( 
            /* [retval][out] */ Dictionaries **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StatusBar( 
            /* [in] */ BSTR rhs) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowVisualBasicEditor( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowVisualBasicEditor( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsObjectValid( 
            /* [in] */ IDispatch *Object,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HangulHanjaDictionaries( 
            /* [retval][out] */ HangulHanjaConversionDictionaries **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Repeat( 
            /* [optional][in] */ VARIANT *Times,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DDEExecute( 
            /* [in] */ long Channel,
            /* [in] */ BSTR Command) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DDEInitiate( 
            /* [in] */ BSTR App,
            /* [in] */ BSTR Topic,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DDEPoke( 
            /* [in] */ long Channel,
            /* [in] */ BSTR Item,
            /* [in] */ BSTR Data) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DDERequest( 
            /* [in] */ long Channel,
            /* [in] */ BSTR Item,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DDETerminate( 
            /* [in] */ long Channel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DDETerminateAll( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE BuildKeyCode( 
            /* [in] */ WdKey Arg1,
            /* [optional][in] */ VARIANT *Arg2,
            /* [optional][in] */ VARIANT *Arg3,
            /* [optional][in] */ VARIANT *Arg4,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE KeyString( 
            /* [in] */ long KeyCode,
            /* [optional][in] */ VARIANT *KeyCode2,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckSpelling( 
            /* [in] */ BSTR Word,
            /* [optional][in] */ VARIANT *CustomDictionary,
            /* [optional][in] */ VARIANT *IgnoreUppercase,
            /* [optional][in] */ VARIANT *MainDictionary,
            /* [optional][in] */ VARIANT *CustomDictionary2,
            /* [optional][in] */ VARIANT *CustomDictionary3,
            /* [optional][in] */ VARIANT *CustomDictionary4,
            /* [optional][in] */ VARIANT *CustomDictionary5,
            /* [optional][in] */ VARIANT *CustomDictionary6,
            /* [optional][in] */ VARIANT *CustomDictionary7,
            /* [optional][in] */ VARIANT *CustomDictionary8,
            /* [optional][in] */ VARIANT *CustomDictionary9,
            /* [optional][in] */ VARIANT *CustomDictionary10,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetSpellingSuggestions( 
            /* [in] */ BSTR Word,
            /* [optional][in] */ VARIANT *CustomDictionary,
            /* [optional][in] */ VARIANT *IgnoreUppercase,
            /* [optional][in] */ VARIANT *MainDictionary,
            /* [optional][in] */ VARIANT *SuggestionMode,
            /* [optional][in] */ VARIANT *CustomDictionary2,
            /* [optional][in] */ VARIANT *CustomDictionary3,
            /* [optional][in] */ VARIANT *CustomDictionary4,
            /* [optional][in] */ VARIANT *CustomDictionary5,
            /* [optional][in] */ VARIANT *CustomDictionary6,
            /* [optional][in] */ VARIANT *CustomDictionary7,
            /* [optional][in] */ VARIANT *CustomDictionary8,
            /* [optional][in] */ VARIANT *CustomDictionary9,
            /* [optional][in] */ VARIANT *CustomDictionary10,
            /* [retval][out] */ SpellingSuggestions **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Help( 
            /* [in] */ VARIANT *HelpType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewWindow( 
            /* [retval][out] */ /*Window*/ void **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CleanString( 
            /* [in] */ BSTR String,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ChangeFileOpenDirectory( 
            /* [in] */ BSTR Path) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InchesToPoints( 
            /* [in] */ int Inches,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CentimetersToPoints( 
            /* [in] */ int Centimeters,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MillimetersToPoints( 
            /* [in] */ int Millimeters,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PicasToPoints( 
            /* [in] */ int Picas,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE LinesToPoints( 
            /* [in] */ int Lines,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PointsToInches( 
            /* [in] */ int Points,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PointsToCentimeters( 
            /* [in] */ int Points,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PointsToMillimeters( 
            /* [in] */ int Points,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PointsToPicas( 
            /* [in] */ int Points,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PointsToLines( 
            /* [in] */ int Points,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PointsToPixels( 
            /* [in] */ int Points,
            /* [optional][in] */ VARIANT *fVertical,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PixelsToPoints( 
            /* [in] */ int Pixels,
            /* [optional][in] */ VARIANT *fVertical,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageSettings( 
            /* [retval][out] */ /* external definition not present */ LanguageSettings **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnswerWizard( 
            /* [retval][out] */ /* external definition not present */ AnswerWizard **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoCorrectEmail( 
            /* [retval][out] */ AutoCorrect **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _GlobalVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Global * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Global * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Global * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Global * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Global * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Global * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Global * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            _Global * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            _Global * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Global * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            _Global * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Documents )( 
            _Global * This,
            /* [retval][out] */ Documents **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Windows )( 
            _Global * This,
            /* [retval][out] */ Windows **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveDocument )( 
            _Global * This,
            /* [retval][out] */ _Document **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveWindow )( 
            _Global * This,
            /* [retval][out] */ /*Window*/ void **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            _Global * This,
            /* [retval][out] */ Selection **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WordBasic )( 
            _Global * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintPreview )( 
            _Global * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintPreview )( 
            _Global * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecentFiles )( 
            _Global * This,
            /* [retval][out] */ RecentFiles **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NormalTemplate )( 
            _Global * This,
            /* [retval][out] */ Template **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_System )( 
            _Global * This,
            /* [retval][out] */ System **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoCorrect )( 
            _Global * This,
            /* [retval][out] */ AutoCorrect **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontNames )( 
            _Global * This,
            /* [retval][out] */ FontNames **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LandscapeFontNames )( 
            _Global * This,
            /* [retval][out] */ FontNames **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PortraitFontNames )( 
            _Global * This,
            /* [retval][out] */ FontNames **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Languages )( 
            _Global * This,
            /* [retval][out] */ Languages **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Assistant )( 
            _Global * This,
            /* [retval][out] */ /* external definition not present */ Assistant **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileConverters )( 
            _Global * This,
            /* [retval][out] */ FileConverters **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Dialogs )( 
            _Global * This,
            /* [retval][out] */ Dialogs **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CaptionLabels )( 
            _Global * This,
            /* [retval][out] */ CaptionLabels **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoCaptions )( 
            _Global * This,
            /* [retval][out] */ AutoCaptions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddIns )( 
            _Global * This,
            /* [retval][out] */ AddIns **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Tasks )( 
            _Global * This,
            /* [retval][out] */ Tasks **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MacroContainer )( 
            _Global * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandBars )( 
            _Global * This,
            /* [retval][out] */ /* external definition not present */ CommandBars **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SynonymInfo )( 
            _Global * This,
            /* [in] */ BSTR Word,
            /* [optional][in] */ VARIANT *LanguageID,
            /* [retval][out] */ SynonymInfo **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IUnknown )( 
            _Global * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListGalleries )( 
            _Global * This,
            /* [retval][out] */ ListGalleries **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActivePrinter )( 
            _Global * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ActivePrinter )( 
            _Global * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Templates )( 
            _Global * This,
            /* [retval][out] */ Templates **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomizationContext )( 
            _Global * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CustomizationContext )( 
            _Global * This,
            /* [in] */ IDispatch *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeyBindings )( 
            _Global * This,
            /* [retval][out] */ KeyBindings **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeysBoundTo )( 
            _Global * This,
            /* [in] */ WdKeyCategory KeyCategory,
            /* [in] */ BSTR Command,
            /* [optional][in] */ VARIANT *CommandParameter,
            /* [retval][out] */ KeysBoundTo **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FindKey )( 
            _Global * This,
            /* [in] */ long KeyCode,
            /* [optional][in] */ VARIANT *KeyCode2,
            /* [retval][out] */ KeyBinding **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Options )( 
            _Global * This,
            /* [retval][out] */ Options **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomDictionaries )( 
            _Global * This,
            /* [retval][out] */ Dictionaries **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StatusBar )( 
            _Global * This,
            /* [in] */ BSTR rhs);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowVisualBasicEditor )( 
            _Global * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowVisualBasicEditor )( 
            _Global * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsObjectValid )( 
            _Global * This,
            /* [in] */ IDispatch *Object,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HangulHanjaDictionaries )( 
            _Global * This,
            /* [retval][out] */ HangulHanjaConversionDictionaries **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            _Global * This,
            /* [optional][in] */ VARIANT *Times,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DDEExecute )( 
            _Global * This,
            /* [in] */ long Channel,
            /* [in] */ BSTR Command);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DDEInitiate )( 
            _Global * This,
            /* [in] */ BSTR App,
            /* [in] */ BSTR Topic,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DDEPoke )( 
            _Global * This,
            /* [in] */ long Channel,
            /* [in] */ BSTR Item,
            /* [in] */ BSTR Data);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DDERequest )( 
            _Global * This,
            /* [in] */ long Channel,
            /* [in] */ BSTR Item,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DDETerminate )( 
            _Global * This,
            /* [in] */ long Channel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DDETerminateAll )( 
            _Global * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BuildKeyCode )( 
            _Global * This,
            /* [in] */ WdKey Arg1,
            /* [optional][in] */ VARIANT *Arg2,
            /* [optional][in] */ VARIANT *Arg3,
            /* [optional][in] */ VARIANT *Arg4,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *KeyString )( 
            _Global * This,
            /* [in] */ long KeyCode,
            /* [optional][in] */ VARIANT *KeyCode2,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckSpelling )( 
            _Global * This,
            /* [in] */ BSTR Word,
            /* [optional][in] */ VARIANT *CustomDictionary,
            /* [optional][in] */ VARIANT *IgnoreUppercase,
            /* [optional][in] */ VARIANT *MainDictionary,
            /* [optional][in] */ VARIANT *CustomDictionary2,
            /* [optional][in] */ VARIANT *CustomDictionary3,
            /* [optional][in] */ VARIANT *CustomDictionary4,
            /* [optional][in] */ VARIANT *CustomDictionary5,
            /* [optional][in] */ VARIANT *CustomDictionary6,
            /* [optional][in] */ VARIANT *CustomDictionary7,
            /* [optional][in] */ VARIANT *CustomDictionary8,
            /* [optional][in] */ VARIANT *CustomDictionary9,
            /* [optional][in] */ VARIANT *CustomDictionary10,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetSpellingSuggestions )( 
            _Global * This,
            /* [in] */ BSTR Word,
            /* [optional][in] */ VARIANT *CustomDictionary,
            /* [optional][in] */ VARIANT *IgnoreUppercase,
            /* [optional][in] */ VARIANT *MainDictionary,
            /* [optional][in] */ VARIANT *SuggestionMode,
            /* [optional][in] */ VARIANT *CustomDictionary2,
            /* [optional][in] */ VARIANT *CustomDictionary3,
            /* [optional][in] */ VARIANT *CustomDictionary4,
            /* [optional][in] */ VARIANT *CustomDictionary5,
            /* [optional][in] */ VARIANT *CustomDictionary6,
            /* [optional][in] */ VARIANT *CustomDictionary7,
            /* [optional][in] */ VARIANT *CustomDictionary8,
            /* [optional][in] */ VARIANT *CustomDictionary9,
            /* [optional][in] */ VARIANT *CustomDictionary10,
            /* [retval][out] */ SpellingSuggestions **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Help )( 
            _Global * This,
            /* [in] */ VARIANT *HelpType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewWindow )( 
            _Global * This,
            /* [retval][out] */ /*Window*/ void **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CleanString )( 
            _Global * This,
            /* [in] */ BSTR String,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ChangeFileOpenDirectory )( 
            _Global * This,
            /* [in] */ BSTR Path);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InchesToPoints )( 
            _Global * This,
            /* [in] */ int Inches,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CentimetersToPoints )( 
            _Global * This,
            /* [in] */ int Centimeters,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MillimetersToPoints )( 
            _Global * This,
            /* [in] */ int Millimeters,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PicasToPoints )( 
            _Global * This,
            /* [in] */ int Picas,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LinesToPoints )( 
            _Global * This,
            /* [in] */ int Lines,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PointsToInches )( 
            _Global * This,
            /* [in] */ int Points,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PointsToCentimeters )( 
            _Global * This,
            /* [in] */ int Points,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PointsToMillimeters )( 
            _Global * This,
            /* [in] */ int Points,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PointsToPicas )( 
            _Global * This,
            /* [in] */ int Points,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PointsToLines )( 
            _Global * This,
            /* [in] */ int Points,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PointsToPixels )( 
            _Global * This,
            /* [in] */ int Points,
            /* [optional][in] */ VARIANT *fVertical,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PixelsToPoints )( 
            _Global * This,
            /* [in] */ int Pixels,
            /* [optional][in] */ VARIANT *fVertical,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageSettings )( 
            _Global * This,
            /* [retval][out] */ /* external definition not present */ LanguageSettings **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnswerWizard )( 
            _Global * This,
            /* [retval][out] */ /* external definition not present */ AnswerWizard **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoCorrectEmail )( 
            _Global * This,
            /* [retval][out] */ AutoCorrect **prop);
        
        END_INTERFACE
    } _GlobalVtbl;

    interface _Global
    {
        CONST_VTBL struct _GlobalVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Global_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Global_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Global_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Global_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Global_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Global_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Global_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Global_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define _Global_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define _Global_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define _Global_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define _Global_get_Documents(This,prop)	\
    ( (This)->lpVtbl -> get_Documents(This,prop) ) 

#define _Global_get_Windows(This,prop)	\
    ( (This)->lpVtbl -> get_Windows(This,prop) ) 

#define _Global_get_ActiveDocument(This,prop)	\
    ( (This)->lpVtbl -> get_ActiveDocument(This,prop) ) 

#define _Global_get_ActiveWindow(This,prop)	\
    ( (This)->lpVtbl -> get_ActiveWindow(This,prop) ) 

#define _Global_get_Selection(This,prop)	\
    ( (This)->lpVtbl -> get_Selection(This,prop) ) 

#define _Global_get_WordBasic(This,prop)	\
    ( (This)->lpVtbl -> get_WordBasic(This,prop) ) 

#define _Global_get_PrintPreview(This,prop)	\
    ( (This)->lpVtbl -> get_PrintPreview(This,prop) ) 

#define _Global_put_PrintPreview(This,prop)	\
    ( (This)->lpVtbl -> put_PrintPreview(This,prop) ) 

#define _Global_get_RecentFiles(This,prop)	\
    ( (This)->lpVtbl -> get_RecentFiles(This,prop) ) 

#define _Global_get_NormalTemplate(This,prop)	\
    ( (This)->lpVtbl -> get_NormalTemplate(This,prop) ) 

#define _Global_get_System(This,prop)	\
    ( (This)->lpVtbl -> get_System(This,prop) ) 

#define _Global_get_AutoCorrect(This,prop)	\
    ( (This)->lpVtbl -> get_AutoCorrect(This,prop) ) 

#define _Global_get_FontNames(This,prop)	\
    ( (This)->lpVtbl -> get_FontNames(This,prop) ) 

#define _Global_get_LandscapeFontNames(This,prop)	\
    ( (This)->lpVtbl -> get_LandscapeFontNames(This,prop) ) 

#define _Global_get_PortraitFontNames(This,prop)	\
    ( (This)->lpVtbl -> get_PortraitFontNames(This,prop) ) 

#define _Global_get_Languages(This,prop)	\
    ( (This)->lpVtbl -> get_Languages(This,prop) ) 

#define _Global_get_Assistant(This,prop)	\
    ( (This)->lpVtbl -> get_Assistant(This,prop) ) 

#define _Global_get_FileConverters(This,prop)	\
    ( (This)->lpVtbl -> get_FileConverters(This,prop) ) 

#define _Global_get_Dialogs(This,prop)	\
    ( (This)->lpVtbl -> get_Dialogs(This,prop) ) 

#define _Global_get_CaptionLabels(This,prop)	\
    ( (This)->lpVtbl -> get_CaptionLabels(This,prop) ) 

#define _Global_get_AutoCaptions(This,prop)	\
    ( (This)->lpVtbl -> get_AutoCaptions(This,prop) ) 

#define _Global_get_AddIns(This,prop)	\
    ( (This)->lpVtbl -> get_AddIns(This,prop) ) 

#define _Global_get_Tasks(This,prop)	\
    ( (This)->lpVtbl -> get_Tasks(This,prop) ) 

#define _Global_get_MacroContainer(This,prop)	\
    ( (This)->lpVtbl -> get_MacroContainer(This,prop) ) 

#define _Global_get_CommandBars(This,prop)	\
    ( (This)->lpVtbl -> get_CommandBars(This,prop) ) 

#define _Global_get_SynonymInfo(This,Word,LanguageID,prop)	\
    ( (This)->lpVtbl -> get_SynonymInfo(This,Word,LanguageID,prop) ) 

#define _Global_get_IUnknown(This,prop)	\
    ( (This)->lpVtbl -> get_IUnknown(This,prop) ) 

#define _Global_get_ListGalleries(This,prop)	\
    ( (This)->lpVtbl -> get_ListGalleries(This,prop) ) 

#define _Global_get_ActivePrinter(This,prop)	\
    ( (This)->lpVtbl -> get_ActivePrinter(This,prop) ) 

#define _Global_put_ActivePrinter(This,prop)	\
    ( (This)->lpVtbl -> put_ActivePrinter(This,prop) ) 

#define _Global_get_Templates(This,prop)	\
    ( (This)->lpVtbl -> get_Templates(This,prop) ) 

#define _Global_get_CustomizationContext(This,prop)	\
    ( (This)->lpVtbl -> get_CustomizationContext(This,prop) ) 

#define _Global_put_CustomizationContext(This,prop)	\
    ( (This)->lpVtbl -> put_CustomizationContext(This,prop) ) 

#define _Global_get_KeyBindings(This,prop)	\
    ( (This)->lpVtbl -> get_KeyBindings(This,prop) ) 

#define _Global_get_KeysBoundTo(This,KeyCategory,Command,CommandParameter,prop)	\
    ( (This)->lpVtbl -> get_KeysBoundTo(This,KeyCategory,Command,CommandParameter,prop) ) 

#define _Global_get_FindKey(This,KeyCode,KeyCode2,prop)	\
    ( (This)->lpVtbl -> get_FindKey(This,KeyCode,KeyCode2,prop) ) 

#define _Global_get_Options(This,prop)	\
    ( (This)->lpVtbl -> get_Options(This,prop) ) 

#define _Global_get_CustomDictionaries(This,prop)	\
    ( (This)->lpVtbl -> get_CustomDictionaries(This,prop) ) 

#define _Global_put_StatusBar(This,rhs)	\
    ( (This)->lpVtbl -> put_StatusBar(This,rhs) ) 

#define _Global_get_ShowVisualBasicEditor(This,prop)	\
    ( (This)->lpVtbl -> get_ShowVisualBasicEditor(This,prop) ) 

#define _Global_put_ShowVisualBasicEditor(This,prop)	\
    ( (This)->lpVtbl -> put_ShowVisualBasicEditor(This,prop) ) 

#define _Global_get_IsObjectValid(This,Object,prop)	\
    ( (This)->lpVtbl -> get_IsObjectValid(This,Object,prop) ) 

#define _Global_get_HangulHanjaDictionaries(This,prop)	\
    ( (This)->lpVtbl -> get_HangulHanjaDictionaries(This,prop) ) 

#define _Global_Repeat(This,Times,prop)	\
    ( (This)->lpVtbl -> Repeat(This,Times,prop) ) 

#define _Global_DDEExecute(This,Channel,Command)	\
    ( (This)->lpVtbl -> DDEExecute(This,Channel,Command) ) 

#define _Global_DDEInitiate(This,App,Topic,prop)	\
    ( (This)->lpVtbl -> DDEInitiate(This,App,Topic,prop) ) 

#define _Global_DDEPoke(This,Channel,Item,Data)	\
    ( (This)->lpVtbl -> DDEPoke(This,Channel,Item,Data) ) 

#define _Global_DDERequest(This,Channel,Item,prop)	\
    ( (This)->lpVtbl -> DDERequest(This,Channel,Item,prop) ) 

#define _Global_DDETerminate(This,Channel)	\
    ( (This)->lpVtbl -> DDETerminate(This,Channel) ) 

#define _Global_DDETerminateAll(This)	\
    ( (This)->lpVtbl -> DDETerminateAll(This) ) 

#define _Global_BuildKeyCode(This,Arg1,Arg2,Arg3,Arg4,prop)	\
    ( (This)->lpVtbl -> BuildKeyCode(This,Arg1,Arg2,Arg3,Arg4,prop) ) 

#define _Global_KeyString(This,KeyCode,KeyCode2,prop)	\
    ( (This)->lpVtbl -> KeyString(This,KeyCode,KeyCode2,prop) ) 

#define _Global_CheckSpelling(This,Word,CustomDictionary,IgnoreUppercase,MainDictionary,CustomDictionary2,CustomDictionary3,CustomDictionary4,CustomDictionary5,CustomDictionary6,CustomDictionary7,CustomDictionary8,CustomDictionary9,CustomDictionary10,prop)	\
    ( (This)->lpVtbl -> CheckSpelling(This,Word,CustomDictionary,IgnoreUppercase,MainDictionary,CustomDictionary2,CustomDictionary3,CustomDictionary4,CustomDictionary5,CustomDictionary6,CustomDictionary7,CustomDictionary8,CustomDictionary9,CustomDictionary10,prop) ) 

#define _Global_GetSpellingSuggestions(This,Word,CustomDictionary,IgnoreUppercase,MainDictionary,SuggestionMode,CustomDictionary2,CustomDictionary3,CustomDictionary4,CustomDictionary5,CustomDictionary6,CustomDictionary7,CustomDictionary8,CustomDictionary9,CustomDictionary10,prop)	\
    ( (This)->lpVtbl -> GetSpellingSuggestions(This,Word,CustomDictionary,IgnoreUppercase,MainDictionary,SuggestionMode,CustomDictionary2,CustomDictionary3,CustomDictionary4,CustomDictionary5,CustomDictionary6,CustomDictionary7,CustomDictionary8,CustomDictionary9,CustomDictionary10,prop) ) 

#define _Global_Help(This,HelpType)	\
    ( (This)->lpVtbl -> Help(This,HelpType) ) 

#define _Global_NewWindow(This,prop)	\
    ( (This)->lpVtbl -> NewWindow(This,prop) ) 

#define _Global_CleanString(This,String,prop)	\
    ( (This)->lpVtbl -> CleanString(This,String,prop) ) 

#define _Global_ChangeFileOpenDirectory(This,Path)	\
    ( (This)->lpVtbl -> ChangeFileOpenDirectory(This,Path) ) 

#define _Global_InchesToPoints(This,Inches,prop)	\
    ( (This)->lpVtbl -> InchesToPoints(This,Inches,prop) ) 

#define _Global_CentimetersToPoints(This,Centimeters,prop)	\
    ( (This)->lpVtbl -> CentimetersToPoints(This,Centimeters,prop) ) 

#define _Global_MillimetersToPoints(This,Millimeters,prop)	\
    ( (This)->lpVtbl -> MillimetersToPoints(This,Millimeters,prop) ) 

#define _Global_PicasToPoints(This,Picas,prop)	\
    ( (This)->lpVtbl -> PicasToPoints(This,Picas,prop) ) 

#define _Global_LinesToPoints(This,Lines,prop)	\
    ( (This)->lpVtbl -> LinesToPoints(This,Lines,prop) ) 

#define _Global_PointsToInches(This,Points,prop)	\
    ( (This)->lpVtbl -> PointsToInches(This,Points,prop) ) 

#define _Global_PointsToCentimeters(This,Points,prop)	\
    ( (This)->lpVtbl -> PointsToCentimeters(This,Points,prop) ) 

#define _Global_PointsToMillimeters(This,Points,prop)	\
    ( (This)->lpVtbl -> PointsToMillimeters(This,Points,prop) ) 

#define _Global_PointsToPicas(This,Points,prop)	\
    ( (This)->lpVtbl -> PointsToPicas(This,Points,prop) ) 

#define _Global_PointsToLines(This,Points,prop)	\
    ( (This)->lpVtbl -> PointsToLines(This,Points,prop) ) 

#define _Global_PointsToPixels(This,Points,fVertical,prop)	\
    ( (This)->lpVtbl -> PointsToPixels(This,Points,fVertical,prop) ) 

#define _Global_PixelsToPoints(This,Pixels,fVertical,prop)	\
    ( (This)->lpVtbl -> PixelsToPoints(This,Pixels,fVertical,prop) ) 

#define _Global_get_LanguageSettings(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageSettings(This,prop) ) 

#define _Global_get_AnswerWizard(This,prop)	\
    ( (This)->lpVtbl -> get_AnswerWizard(This,prop) ) 

#define _Global_get_AutoCorrectEmail(This,prop)	\
    ( (This)->lpVtbl -> get_AutoCorrectEmail(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Global_INTERFACE_DEFINED__ */


#ifndef __FontNames_INTERFACE_DEFINED__
#define __FontNames_INTERFACE_DEFINED__

/* interface FontNames */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_FontNames;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002096F-0000-0000-C000-000000000046")
    FontNames : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ BSTR *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FontNamesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FontNames * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FontNames * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FontNames * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FontNames * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FontNames * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FontNames * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FontNames * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            FontNames * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            FontNames * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            FontNames * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            FontNames * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FontNames * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            FontNames * This,
            /* [in] */ long Index,
            /* [retval][out] */ BSTR *prop);
        
        END_INTERFACE
    } FontNamesVtbl;

    interface FontNames
    {
        CONST_VTBL struct FontNamesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FontNames_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FontNames_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FontNames_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FontNames_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FontNames_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FontNames_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FontNames_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FontNames_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define FontNames_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define FontNames_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define FontNames_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define FontNames_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define FontNames_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FontNames_INTERFACE_DEFINED__ */


#ifndef __Languages_INTERFACE_DEFINED__
#define __Languages_INTERFACE_DEFINED__

/* interface Languages */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Languages;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002096E-0000-0000-C000-000000000046")
    Languages : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Language **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LanguagesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Languages * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Languages * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Languages * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Languages * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Languages * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Languages * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Languages * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Languages * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Languages * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Languages * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Languages * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Languages * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Languages * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Language **prop);
        
        END_INTERFACE
    } LanguagesVtbl;

    interface Languages
    {
        CONST_VTBL struct LanguagesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Languages_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Languages_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Languages_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Languages_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Languages_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Languages_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Languages_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Languages_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Languages_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Languages_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Languages_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Languages_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Languages_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Languages_INTERFACE_DEFINED__ */


#ifndef __Language_INTERFACE_DEFINED__
#define __Language_INTERFACE_DEFINED__

/* interface Language */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Language;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002096D-0000-0000-C000-000000000046")
    Language : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NameLocal( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveGrammarDictionary( 
            /* [retval][out] */ Dictionary **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveHyphenationDictionary( 
            /* [retval][out] */ Dictionary **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveSpellingDictionary( 
            /* [retval][out] */ Dictionary **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveThesaurusDictionary( 
            /* [retval][out] */ Dictionary **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultWritingStyle( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultWritingStyle( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WritingStyleList( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpellingDictionaryType( 
            /* [retval][out] */ WdDictionaryType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpellingDictionaryType( 
            /* [in] */ WdDictionaryType prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LanguageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Language * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Language * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Language * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Language * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Language * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Language * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Language * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Language * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Language * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Language * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            Language * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NameLocal )( 
            Language * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Language * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveGrammarDictionary )( 
            Language * This,
            /* [retval][out] */ Dictionary **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveHyphenationDictionary )( 
            Language * This,
            /* [retval][out] */ Dictionary **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveSpellingDictionary )( 
            Language * This,
            /* [retval][out] */ Dictionary **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveThesaurusDictionary )( 
            Language * This,
            /* [retval][out] */ Dictionary **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultWritingStyle )( 
            Language * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultWritingStyle )( 
            Language * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WritingStyleList )( 
            Language * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpellingDictionaryType )( 
            Language * This,
            /* [retval][out] */ WdDictionaryType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpellingDictionaryType )( 
            Language * This,
            /* [in] */ WdDictionaryType prop);
        
        END_INTERFACE
    } LanguageVtbl;

    interface Language
    {
        CONST_VTBL struct LanguageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Language_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Language_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Language_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Language_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Language_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Language_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Language_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Language_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Language_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Language_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Language_get_ID(This,prop)	\
    ( (This)->lpVtbl -> get_ID(This,prop) ) 

#define Language_get_NameLocal(This,prop)	\
    ( (This)->lpVtbl -> get_NameLocal(This,prop) ) 

#define Language_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define Language_get_ActiveGrammarDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_ActiveGrammarDictionary(This,prop) ) 

#define Language_get_ActiveHyphenationDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_ActiveHyphenationDictionary(This,prop) ) 

#define Language_get_ActiveSpellingDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_ActiveSpellingDictionary(This,prop) ) 

#define Language_get_ActiveThesaurusDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_ActiveThesaurusDictionary(This,prop) ) 

#define Language_get_DefaultWritingStyle(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultWritingStyle(This,prop) ) 

#define Language_put_DefaultWritingStyle(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultWritingStyle(This,prop) ) 

#define Language_get_WritingStyleList(This,prop)	\
    ( (This)->lpVtbl -> get_WritingStyleList(This,prop) ) 

#define Language_get_SpellingDictionaryType(This,prop)	\
    ( (This)->lpVtbl -> get_SpellingDictionaryType(This,prop) ) 

#define Language_put_SpellingDictionaryType(This,prop)	\
    ( (This)->lpVtbl -> put_SpellingDictionaryType(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Language_INTERFACE_DEFINED__ */


#ifndef __Documents_INTERFACE_DEFINED__
#define __Documents_INTERFACE_DEFINED__

/* interface Documents */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Documents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002096C-0000-0000-C000-000000000046")
    Documents : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ _Document **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( 
            /* [optional][in] */ VARIANT *SaveChanges,
            /* [optional][in] */ VARIANT *OriginalFormat,
            /* [optional][in] */ VARIANT *RouteDocument) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AddOld( 
            /* [optional][in] */ VARIANT *Template,
            /* [optional][in] */ VARIANT *NewTemplate,
            /* [retval][out] */ _Document **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE OpenOld( 
            /* [in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [optional][in] */ VARIANT *Format,
            /* [retval][out] */ _Document **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [optional][in] */ VARIANT *NoPrompt,
            /* [optional][in] */ VARIANT *OriginalFormat) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [optional][in] */ VARIANT *Template,
            /* [optional][in] */ VARIANT *NewTemplate,
            /* [optional][in] */ VARIANT *DocumentType,
            /* [optional][in] */ VARIANT *Visible,
            /* [retval][out] */ _Document **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Open2000( 
            /* [in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *Encoding,
            /* [optional][in] */ VARIANT *Visible,
            /* [retval][out] */ _Document **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckOut( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanCheckOut( 
            /* [in] */ BSTR FileName,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Open2002( 
            /* [in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *Encoding,
            /* [optional][in] */ VARIANT *Visible,
            /* [optional][in] */ VARIANT *OpenAndRepair,
            /* [optional][in] */ VARIANT *DocumentDirection,
            /* [optional][in] */ VARIANT *NoEncodingDialog,
            /* [retval][out] */ _Document **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *Encoding,
            /* [optional][in] */ VARIANT *Visible,
            /* [optional][in] */ VARIANT *OpenAndRepair,
            /* [optional][in] */ VARIANT *DocumentDirection,
            /* [optional][in] */ VARIANT *NoEncodingDialog,
            /* [optional][in] */ VARIANT *XMLTransform,
            /* [retval][out] */ _Document **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DocumentsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Documents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Documents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Documents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Documents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Documents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Documents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Documents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Documents * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Documents * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Documents * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Documents * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Documents * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Documents * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ _Document **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            Documents * This,
            /* [optional][in] */ VARIANT *SaveChanges,
            /* [optional][in] */ VARIANT *OriginalFormat,
            /* [optional][in] */ VARIANT *RouteDocument);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AddOld )( 
            Documents * This,
            /* [optional][in] */ VARIANT *Template,
            /* [optional][in] */ VARIANT *NewTemplate,
            /* [retval][out] */ _Document **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *OpenOld )( 
            Documents * This,
            /* [in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [optional][in] */ VARIANT *Format,
            /* [retval][out] */ _Document **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            Documents * This,
            /* [optional][in] */ VARIANT *NoPrompt,
            /* [optional][in] */ VARIANT *OriginalFormat);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Documents * This,
            /* [optional][in] */ VARIANT *Template,
            /* [optional][in] */ VARIANT *NewTemplate,
            /* [optional][in] */ VARIANT *DocumentType,
            /* [optional][in] */ VARIANT *Visible,
            /* [retval][out] */ _Document **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Open2000 )( 
            Documents * This,
            /* [in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *Encoding,
            /* [optional][in] */ VARIANT *Visible,
            /* [retval][out] */ _Document **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckOut )( 
            Documents * This,
            /* [in] */ BSTR FileName);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanCheckOut )( 
            Documents * This,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Open2002 )( 
            Documents * This,
            /* [in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *Encoding,
            /* [optional][in] */ VARIANT *Visible,
            /* [optional][in] */ VARIANT *OpenAndRepair,
            /* [optional][in] */ VARIANT *DocumentDirection,
            /* [optional][in] */ VARIANT *NoEncodingDialog,
            /* [retval][out] */ _Document **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            Documents * This,
            /* [in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *Encoding,
            /* [optional][in] */ VARIANT *Visible,
            /* [optional][in] */ VARIANT *OpenAndRepair,
            /* [optional][in] */ VARIANT *DocumentDirection,
            /* [optional][in] */ VARIANT *NoEncodingDialog,
            /* [optional][in] */ VARIANT *XMLTransform,
            /* [retval][out] */ _Document **prop);

		/*	
		 *	Note: XMLTransform is a BSTR value; VT_BSTR; NULL
		 */
        
        END_INTERFACE
    } DocumentsVtbl;

    interface Documents
    {
        CONST_VTBL struct DocumentsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Documents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Documents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Documents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Documents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Documents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Documents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Documents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Documents_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Documents_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Documents_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Documents_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Documents_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Documents_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Documents_Close(This,SaveChanges,OriginalFormat,RouteDocument)	\
    ( (This)->lpVtbl -> Close(This,SaveChanges,OriginalFormat,RouteDocument) ) 

#define Documents_AddOld(This,Template,NewTemplate,prop)	\
    ( (This)->lpVtbl -> AddOld(This,Template,NewTemplate,prop) ) 

#define Documents_OpenOld(This,FileName,ConfirmConversions,ReadOnly,AddToRecentFiles,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate,Format,prop)	\
    ( (This)->lpVtbl -> OpenOld(This,FileName,ConfirmConversions,ReadOnly,AddToRecentFiles,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate,Format,prop) ) 

#define Documents_Save(This,NoPrompt,OriginalFormat)	\
    ( (This)->lpVtbl -> Save(This,NoPrompt,OriginalFormat) ) 

#define Documents_Add(This,Template,NewTemplate,DocumentType,Visible,prop)	\
    ( (This)->lpVtbl -> Add(This,Template,NewTemplate,DocumentType,Visible,prop) ) 

#define Documents_Open2000(This,FileName,ConfirmConversions,ReadOnly,AddToRecentFiles,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate,Format,Encoding,Visible,prop)	\
    ( (This)->lpVtbl -> Open2000(This,FileName,ConfirmConversions,ReadOnly,AddToRecentFiles,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate,Format,Encoding,Visible,prop) ) 

#define Documents_CheckOut(This,FileName)	\
    ( (This)->lpVtbl -> CheckOut(This,FileName) ) 

#define Documents_CanCheckOut(This,FileName,prop)	\
    ( (This)->lpVtbl -> CanCheckOut(This,FileName,prop) ) 

#define Documents_Open2002(This,FileName,ConfirmConversions,ReadOnly,AddToRecentFiles,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate,Format,Encoding,Visible,OpenAndRepair,DocumentDirection,NoEncodingDialog,prop)	\
    ( (This)->lpVtbl -> Open2002(This,FileName,ConfirmConversions,ReadOnly,AddToRecentFiles,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate,Format,Encoding,Visible,OpenAndRepair,DocumentDirection,NoEncodingDialog,prop) ) 

#define Documents_Open(This,FileName,ConfirmConversions,ReadOnly,AddToRecentFiles,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate,Format,Encoding,Visible,OpenAndRepair,DocumentDirection,NoEncodingDialog,XMLTransform,prop)	\
    ( (This)->lpVtbl -> Open(This,FileName,ConfirmConversions,ReadOnly,AddToRecentFiles,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate,Format,Encoding,Visible,OpenAndRepair,DocumentDirection,NoEncodingDialog,XMLTransform,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Documents_INTERFACE_DEFINED__ */


#ifndef ___Document_INTERFACE_DEFINED__
#define ___Document_INTERFACE_DEFINED__

/* interface _Document */
/* [object][oleautomation][dual][hidden][helpcontext][version][uuid] */ 


EXTERN_C const IID IID__Document;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002096B-0000-0000-C000-000000000046")
    _Document : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BuiltInDocumentProperties( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomDocumentProperties( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bookmarks( 
            /* [retval][out] */ Bookmarks **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Tables( 
            /* [retval][out] */ Tables **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Footnotes( 
            /* [retval][out] */ Footnotes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Endnotes( 
            /* [retval][out] */ Endnotes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comments( 
            /* [retval][out] */ Comments **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdDocumentType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoHyphenation( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoHyphenation( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HyphenateCaps( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HyphenateCaps( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HyphenationZone( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HyphenationZone( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConsecutiveHyphensLimit( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ConsecutiveHyphensLimit( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Sections( 
            /* [retval][out] */ Sections **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Paragraphs( 
            /* [retval][out] */ Paragraphs **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Words( 
            /* [retval][out] */ Words **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Sentences( 
            /* [retval][out] */ Sentences **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Characters( 
            /* [retval][out] */ Characters **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fields( 
            /* [retval][out] */ Fields **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormFields( 
            /* [retval][out] */ FormFields **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Styles( 
            /* [retval][out] */ Styles **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Frames( 
            /* [retval][out] */ Frames **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TablesOfFigures( 
            /* [retval][out] */ TablesOfFigures **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Variables( 
            /* [retval][out] */ Variables **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MailMerge( 
            /* [retval][out] */ MailMerge **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Envelope( 
            /* [retval][out] */ Envelope **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Revisions( 
            /* [retval][out] */ Revisions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TablesOfContents( 
            /* [retval][out] */ TablesOfContents **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TablesOfAuthorities( 
            /* [retval][out] */ TablesOfAuthorities **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageSetup( 
            /* [retval][out] */ PageSetup **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageSetup( 
            /* [in] */ PageSetup *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Windows( 
            /* [retval][out] */ Windows **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasRoutingSlip( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasRoutingSlip( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RoutingSlip( 
            /* [retval][out] */ RoutingSlip **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Routed( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TablesOfAuthoritiesCategories( 
            /* [retval][out] */ TablesOfAuthoritiesCategories **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Indexes( 
            /* [retval][out] */ Indexes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Saved( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Saved( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Content( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveWindow( 
            /* [retval][out] */ /*Window*/ void **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ WdDocumentKind *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Kind( 
            /* [in] */ WdDocumentKind prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadOnly( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Subdocuments( 
            /* [retval][out] */ Subdocuments **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsMasterDocument( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultTabStop( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultTabStop( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EmbedTrueTypeFonts( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EmbedTrueTypeFonts( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SaveFormsData( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SaveFormsData( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadOnlyRecommended( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadOnlyRecommended( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SaveSubsetFonts( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SaveSubsetFonts( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Compatibility( 
            /* [in] */ WdCompatibility Type,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Compatibility( 
            /* [in] */ WdCompatibility Type,
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StoryRanges( 
            /* [retval][out] */ StoryRanges **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandBars( 
            /* [retval][out] */ /* external definition not present */ CommandBars **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsSubdocument( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SaveFormat( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProtectionType( 
            /* [retval][out] */ WdProtectionType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hyperlinks( 
            /* [retval][out] */ Hyperlinks **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shapes( 
            /* [retval][out] */ /* external definition not present */ Shapes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListTemplates( 
            /* [retval][out] */ ListTemplates **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Lists( 
            /* [retval][out] */ Lists **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UpdateStylesOnOpen( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UpdateStylesOnOpen( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AttachedTemplate( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AttachedTemplate( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InlineShapes( 
            /* [retval][out] */ InlineShapes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Background( 
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Background( 
            /* [in] */ /* external definition not present */ Shape *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GrammarChecked( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GrammarChecked( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpellingChecked( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpellingChecked( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowGrammaticalErrors( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowGrammaticalErrors( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowSpellingErrors( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowSpellingErrors( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Versions( 
            /* [retval][out] */ Versions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowSummary( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowSummary( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SummaryViewMode( 
            /* [retval][out] */ WdSummaryMode *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SummaryViewMode( 
            /* [in] */ WdSummaryMode prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SummaryLength( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SummaryLength( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintFractionalWidths( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintFractionalWidths( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintPostScriptOverText( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintPostScriptOverText( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Container( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintFormsData( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintFormsData( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListParagraphs( 
            /* [retval][out] */ ListParagraphs **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Password( 
            /* [in] */ BSTR rhs) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WritePassword( 
            /* [in] */ BSTR rhs) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasPassword( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WriteReserved( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveWritingStyle( 
            /* [in] */ VARIANT *LanguageID,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ActiveWritingStyle( 
            /* [in] */ VARIANT *LanguageID,
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UserControl( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UserControl( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasMailer( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HasMailer( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Mailer( 
            /* [retval][out] */ Mailer **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadabilityStatistics( 
            /* [retval][out] */ ReadabilityStatistics **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GrammaticalErrors( 
            /* [retval][out] */ ProofreadingErrors **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpellingErrors( 
            /* [retval][out] */ ProofreadingErrors **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IUnknown( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormsDesign( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__CodeName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put__CodeName( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CodeName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SnapToGrid( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SnapToGrid( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SnapToShapes( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SnapToShapes( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GridDistanceHorizontal( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GridDistanceHorizontal( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GridDistanceVertical( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GridDistanceVertical( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GridOriginHorizontal( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GridOriginHorizontal( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GridOriginVertical( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GridOriginVertical( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GridSpaceBetweenHorizontalLines( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GridSpaceBetweenHorizontalLines( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GridSpaceBetweenVerticalLines( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GridSpaceBetweenVerticalLines( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GridOriginFromMargin( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GridOriginFromMargin( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KerningByAlgorithm( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_KerningByAlgorithm( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_JustificationMode( 
            /* [retval][out] */ WdJustificationMode *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_JustificationMode( 
            /* [in] */ WdJustificationMode prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FarEastLineBreakLevel( 
            /* [retval][out] */ WdFarEastLineBreakLevel *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FarEastLineBreakLevel( 
            /* [in] */ WdFarEastLineBreakLevel prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoLineBreakBefore( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoLineBreakBefore( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoLineBreakAfter( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoLineBreakAfter( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TrackRevisions( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TrackRevisions( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintRevisions( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintRevisions( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowRevisions( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowRevisions( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( 
            /* [optional][in] */ VARIANT *SaveChanges,
            /* [optional][in] */ VARIANT *OriginalFormat,
            /* [optional][in] */ VARIANT *RouteDocument) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE SaveAs2000( 
            /* [optional][in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *FileFormat,
            /* [optional][in] */ VARIANT *LockComments,
            /* [optional][in] */ VARIANT *Password,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *WritePassword,
            /* [optional][in] */ VARIANT *ReadOnlyRecommended,
            /* [optional][in] */ VARIANT *EmbedTrueTypeFonts,
            /* [optional][in] */ VARIANT *SaveNativePictureFormat,
            /* [optional][in] */ VARIANT *SaveFormsData,
            /* [optional][in] */ VARIANT *SaveAsAOCELetter) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Repaginate( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE FitToPages( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ManualHyphenation( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DataForm( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Route( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE PrintOutOld( 
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SendMail( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range( 
            /* [optional][in] */ VARIANT *Start,
            /* [optional][in] */ VARIANT *End,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RunAutoMacro( 
            /* [in] */ WdAutoMacros Which) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrintPreview( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GoTo( 
            /* [optional][in] */ VARIANT *What,
            /* [optional][in] */ VARIANT *Which,
            /* [optional][in] */ VARIANT *Count,
            /* [optional][in] */ VARIANT *Name,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Undo( 
            /* [optional][in] */ VARIANT *Times,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Redo( 
            /* [optional][in] */ VARIANT *Times,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ComputeStatistics( 
            /* [in] */ WdStatistic Statistic,
            /* [optional][in] */ VARIANT *IncludeFootnotesAndEndnotes,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MakeCompatibilityDefault( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Protect2002( 
            /* [in] */ WdProtectionType Type,
            /* [optional][in] */ VARIANT *NoReset,
            /* [optional][in] */ VARIANT *Password) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Unprotect( 
            /* [optional][in] */ VARIANT *Password) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditionOptions( 
            /* [in] */ WdEditionType Type,
            /* [in] */ WdEditionOption Option,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Format) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RunLetterWizard( 
            /* [optional][in] */ VARIANT *_LetterContent,
            /* [optional][in] */ VARIANT *WizardMode) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetLetterContent( 
            /* [retval][out] */ _LetterContent **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetLetterContent( 
            /* [in] */ VARIANT *_LetterContent) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyStylesFromTemplate( 
            /* [in] */ BSTR Template) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UpdateStyles( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckGrammar( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckSpelling( 
            /* [optional][in] */ VARIANT *CustomDictionary,
            /* [optional][in] */ VARIANT *IgnoreUppercase,
            /* [optional][in] */ VARIANT *AlwaysSuggest,
            /* [optional][in] */ VARIANT *CustomDictionary2,
            /* [optional][in] */ VARIANT *CustomDictionary3,
            /* [optional][in] */ VARIANT *CustomDictionary4,
            /* [optional][in] */ VARIANT *CustomDictionary5,
            /* [optional][in] */ VARIANT *CustomDictionary6,
            /* [optional][in] */ VARIANT *CustomDictionary7,
            /* [optional][in] */ VARIANT *CustomDictionary8,
            /* [optional][in] */ VARIANT *CustomDictionary9,
            /* [optional][in] */ VARIANT *CustomDictionary10) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE FollowHyperlink( 
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *SubAddress,
            /* [optional][in] */ VARIANT *NewWindow,
            /* [optional][in] */ VARIANT *AddHistory,
            /* [optional][in] */ VARIANT *ExtraInfo,
            /* [optional][in] */ VARIANT *Method,
            /* [optional][in] */ VARIANT *HeaderInfo) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddToFavorites( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Reload( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AutoSummarize( 
            /* [optional][in] */ VARIANT *Length,
            /* [optional][in] */ VARIANT *Mode,
            /* [optional][in] */ VARIANT *UpdateProperties,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveNumbers( 
            /* [optional][in] */ VARIANT *NumberType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertNumbersToText( 
            /* [optional][in] */ VARIANT *NumberType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CountNumberedItems( 
            /* [optional][in] */ VARIANT *NumberType,
            /* [optional][in] */ VARIANT *Level,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Post( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToggleFormsDesign( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Compare2000( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UpdateSummaryProperties( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetCrossReferenceItems( 
            /* [in] */ VARIANT *ReferenceType,
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AutoFormat( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ViewCode( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ViewPropertyBrowser( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ForwardMailer( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Reply( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReplyAll( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SendMailer( 
            /* [optional][in] */ VARIANT *FileFormat,
            /* [optional][in] */ VARIANT *Priority) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UndoClear( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PresentIt( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SendFax( 
            /* [in] */ BSTR Address,
            /* [optional][in] */ VARIANT *Subject) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Merge2000( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClosePrintPreview( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckConsistency( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateLetterContent( 
            /* [in] */ BSTR DateFormat,
            /* [in] */ VARIANT_BOOL IncludeHeaderFooter,
            /* [in] */ BSTR PageDesign,
            /* [in] */ WdLetterStyle LetterStyle,
            /* [in] */ VARIANT_BOOL Letterhead,
            /* [in] */ WdLetterheadLocation LetterheadLocation,
            /* [in] */ int LetterheadSize,
            /* [in] */ BSTR RecipientName,
            /* [in] */ BSTR RecipientAddress,
            /* [in] */ BSTR Salutation,
            /* [in] */ WdSalutationType SalutationType,
            /* [in] */ BSTR RecipientReference,
            /* [in] */ BSTR MailingInstructions,
            /* [in] */ BSTR AttentionLine,
            /* [in] */ BSTR Subject,
            /* [in] */ BSTR CCList,
            /* [in] */ BSTR ReturnAddress,
            /* [in] */ BSTR SenderName,
            /* [in] */ BSTR Closing,
            /* [in] */ BSTR SenderCompany,
            /* [in] */ BSTR SenderJobTitle,
            /* [in] */ BSTR SenderInitials,
            /* [in] */ long EnclosureNumber,
            /* [optional][in] */ VARIANT *InfoBlock,
            /* [optional][in] */ VARIANT *RecipientCode,
            /* [optional][in] */ VARIANT *RecipientGender,
            /* [optional][in] */ VARIANT *ReturnAddressShortForm,
            /* [optional][in] */ VARIANT *SenderCity,
            /* [optional][in] */ VARIANT *SenderCode,
            /* [optional][in] */ VARIANT *SenderGender,
            /* [optional][in] */ VARIANT *SenderReference,
            /* [retval][out] */ _LetterContent **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AcceptAllRevisions( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RejectAllRevisions( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DetectLanguage( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyTheme( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveTheme( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WebPagePreview( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReloadAs( 
            /* [in] */ MsoEncoding Encoding) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveTheme( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveThemeDisplayName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Email( 
            /* [retval][out] */ Email **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Scripts( 
            /* [retval][out] */ /* external definition not present */ Scripts **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageDetected( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageDetected( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FarEastLineBreakLanguage( 
            /* [retval][out] */ WdFarEastLineBreakLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FarEastLineBreakLanguage( 
            /* [in] */ WdFarEastLineBreakLanguageID prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Frameset( 
            /* [retval][out] */ Frameset **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ClickAndTypeParagraphStyle( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ClickAndTypeParagraphStyle( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HTMLProject( 
            /* [retval][out] */ /* external definition not present */ HTMLProject **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WebOptions( 
            /* [retval][out] */ WebOptions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OpenEncoding( 
            /* [retval][out] */ MsoEncoding *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SaveEncoding( 
            /* [retval][out] */ MsoEncoding *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SaveEncoding( 
            /* [in] */ MsoEncoding prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OptimizeForWord97( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OptimizeForWord97( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VBASigned( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE PrintOut2000( 
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint,
            /* [optional][in] */ VARIANT *PrintZoomColumn,
            /* [optional][in] */ VARIANT *PrintZoomRow,
            /* [optional][in] */ VARIANT *PrintZoomPaperWidth,
            /* [optional][in] */ VARIANT *PrintZoomPaperHeight) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE sblt( 
            /* [in] */ BSTR s) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertVietDoc( 
            /* [in] */ long CodePageOrigin) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrintOut( 
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint,
            /* [optional][in] */ VARIANT *PrintZoomColumn,
            /* [optional][in] */ VARIANT *PrintZoomRow,
            /* [optional][in] */ VARIANT *PrintZoomPaperWidth,
            /* [optional][in] */ VARIANT *PrintZoomPaperHeight) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MailEnvelope( 
            /* [retval][out] */ /* external definition not present */ MsoEnvelope **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisableFeatures( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisableFeatures( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DoNotEmbedSystemFonts( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DoNotEmbedSystemFonts( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Signatures( 
            /* [retval][out] */ /* external definition not present */ SignatureSet **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultTargetFrame( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultTargetFrame( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HTMLDivisions( 
            /* [retval][out] */ HTMLDivisions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisableFeaturesIntroducedAfter( 
            /* [retval][out] */ WdDisableFeaturesIntroducedAfter *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisableFeaturesIntroducedAfter( 
            /* [in] */ WdDisableFeaturesIntroducedAfter prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RemovePersonalInformation( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RemovePersonalInformation( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartTags( 
            /* [retval][out] */ SmartTags **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Compare2002( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *AuthorName,
            /* [optional][in] */ VARIANT *CompareTarget,
            /* [optional][in] */ VARIANT *DetectFormatChanges,
            /* [optional][in] */ VARIANT *IgnoreAllComparisonWarnings,
            /* [optional][in] */ VARIANT *AddToRecentFiles) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckIn( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL SaveChanges,
            /* [optional][in] */ VARIANT *Comments,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL MakePublic = 0) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanCheckin( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Merge( 
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *MergeTarget,
            /* [optional][in] */ VARIANT *DetectFormatChanges,
            /* [optional][in] */ VARIANT *UseFormattingFrom,
            /* [optional][in] */ VARIANT *AddToRecentFiles) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EmbedSmartTags( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EmbedSmartTags( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartTagsAsXMLProps( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SmartTagsAsXMLProps( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextEncoding( 
            /* [retval][out] */ MsoEncoding *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextEncoding( 
            /* [in] */ MsoEncoding prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextLineEnding( 
            /* [retval][out] */ WdLineEndingType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextLineEnding( 
            /* [in] */ WdLineEndingType prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SendForReview( 
            /* [optional][in] */ VARIANT *Recipients,
            /* [optional][in] */ VARIANT *Subject,
            /* [optional][in] */ VARIANT *ShowMessage,
            /* [optional][in] */ VARIANT *IncludeAttachment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReplyWithChanges( 
            /* [optional][in] */ VARIANT *ShowMessage) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndReview( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StyleSheets( 
            /* [retval][out] */ StyleSheets **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultTableStyle( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PasswordEncryptionProvider( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PasswordEncryptionAlgorithm( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PasswordEncryptionKeyLength( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PasswordEncryptionFileProperties( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetPasswordEncryptionOptions( 
            /* [in] */ BSTR PasswordEncryptionProvider,
            /* [in] */ BSTR PasswordEncryptionAlgorithm,
            /* [in] */ long PasswordEncryptionKeyLength,
            /* [optional][in] */ VARIANT *PasswordEncryptionFileProperties) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RecheckSmartTags( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveSmartTags( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetDefaultTableStyle( 
            /* [in] */ VARIANT *Style,
            /* [in] */ VARIANT_BOOL SetInTemplate) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteAllComments( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AcceptAllRevisionsShown( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RejectAllRevisionsShown( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteAllCommentsShown( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ResetFormFields( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAs( 
            /* [optional][in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *FileFormat,
            /* [optional][in] */ VARIANT *LockComments,
            /* [optional][in] */ VARIANT *Password,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *WritePassword,
            /* [optional][in] */ VARIANT *ReadOnlyRecommended,
            /* [optional][in] */ VARIANT *EmbedTrueTypeFonts,
            /* [optional][in] */ VARIANT *SaveNativePictureFormat,
            /* [optional][in] */ VARIANT *SaveFormsData,
            /* [optional][in] */ VARIANT *SaveAsAOCELetter,
            /* [optional][in] */ VARIANT *Encoding,
            /* [optional][in] */ VARIANT *InsertLineBreaks,
            /* [optional][in] */ VARIANT *AllowSubstitutions,
            /* [optional][in] */ VARIANT *LineEnding,
            /* [optional][in] */ VARIANT *AddBiDiMarks) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EmbedLinguisticData( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EmbedLinguisticData( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormattingShowFont( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormattingShowFont( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormattingShowClear( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormattingShowClear( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormattingShowParagraph( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormattingShowParagraph( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormattingShowNumbering( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormattingShowNumbering( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormattingShowFilter( 
            /* [retval][out] */ WdShowFilter *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormattingShowFilter( 
            /* [in] */ WdShowFilter prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckNewSmartTags( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Permission( 
            /* [retval][out] */ /* external definition not present */ Permission **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XMLNodes( 
            /* [retval][out] */ XMLNodes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XMLSchemaReferences( 
            /* [retval][out] */ XMLSchemaReferences **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartDocument( 
            /* [retval][out] */ /* external definition not present */ SmartDocument **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SharedWorkspace( 
            /* [retval][out] */ /* external definition not present */ SharedWorkspace **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Sync( 
            /* [retval][out] */ /* external definition not present */ Sync **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnforceStyle( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EnforceStyle( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatOverride( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatOverride( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XMLSaveDataOnly( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_XMLSaveDataOnly( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XMLHideNamespaces( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_XMLHideNamespaces( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XMLShowAdvancedErrors( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_XMLShowAdvancedErrors( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XMLUseXSLTWhenSaving( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_XMLUseXSLTWhenSaving( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XMLSaveThroughXSLT( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_XMLSaveThroughXSLT( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocumentLibraryVersions( 
            /* [retval][out] */ /* external definition not present */ DocumentLibraryVersions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadingModeLayoutFrozen( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadingModeLayoutFrozen( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RemoveDateAndTime( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RemoveDateAndTime( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SendFaxOverInternet( 
            /* [optional][in] */ VARIANT *Recipients,
            /* [optional][in] */ VARIANT *Subject,
            /* [optional][in] */ VARIANT *ShowMessage) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TransformDocument( 
            /* [in] */ BSTR Path,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL DataOnly = -1) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Protect( 
            /* [in] */ WdProtectionType Type,
            /* [optional][in] */ VARIANT *NoReset,
            /* [optional][in] */ VARIANT *Password,
            /* [optional][in] */ VARIANT *UseIRM,
            /* [optional][in] */ VARIANT *EnforceStyleLock) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectAllEditableRanges( 
            /* [optional][in] */ VARIANT *EditorID) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteAllEditableRanges( 
            /* [optional][in] */ VARIANT *EditorID) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteAllInkAnnotations( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AddDocumentWorkspaceHeader( 
            /* [in] */ VARIANT_BOOL RichFormat,
            /* [in] */ BSTR Url,
            /* [in] */ BSTR Title,
            /* [in] */ BSTR Description,
            /* [in] */ BSTR ID) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE RemoveDocumentWorkspaceHeader( 
            /* [in] */ BSTR ID) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Compare( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *AuthorName,
            /* [optional][in] */ VARIANT *CompareTarget,
            /* [optional][in] */ VARIANT *DetectFormatChanges,
            /* [optional][in] */ VARIANT *IgnoreAllComparisonWarnings,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *RemovePersonalInformation,
            /* [optional][in] */ VARIANT *RemoveDateAndTime) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveLockedStyles( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChildNodeSuggestions( 
            /* [retval][out] */ XMLChildNodeSuggestions **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectSingleNode( 
            /* [in] */ BSTR XPath,
            /* [defaultvalue][optional][in] */ BSTR PrefixMapping,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL FastSearchSkippingTextNodes,
            /* [retval][out] */ XMLNode **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectNodes( 
            /* [in] */ BSTR XPath,
            /* [defaultvalue][optional][in] */ BSTR PrefixMapping,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL FastSearchSkippingTextNodes,
            /* [retval][out] */ XMLNodes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XMLSchemaViolations( 
            /* [retval][out] */ XMLNodes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadingLayoutSizeX( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadingLayoutSizeX( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadingLayoutSizeY( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadingLayoutSizeY( 
            /* [in] */ long prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _DocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Document * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Document * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Document * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Document * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Document * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Document * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Document * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            _Document * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            _Document * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            _Document * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Document * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BuiltInDocumentProperties )( 
            _Document * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomDocumentProperties )( 
            _Document * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            _Document * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bookmarks )( 
            _Document * This,
            /* [retval][out] */ Bookmarks **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Tables )( 
            _Document * This,
            /* [retval][out] */ Tables **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Footnotes )( 
            _Document * This,
            /* [retval][out] */ Footnotes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Endnotes )( 
            _Document * This,
            /* [retval][out] */ Endnotes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comments )( 
            _Document * This,
            /* [retval][out] */ Comments **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            _Document * This,
            /* [retval][out] */ WdDocumentType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoHyphenation )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoHyphenation )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HyphenateCaps )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HyphenateCaps )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HyphenationZone )( 
            _Document * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HyphenationZone )( 
            _Document * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConsecutiveHyphensLimit )( 
            _Document * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ConsecutiveHyphensLimit )( 
            _Document * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Sections )( 
            _Document * This,
            /* [retval][out] */ Sections **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Paragraphs )( 
            _Document * This,
            /* [retval][out] */ Paragraphs **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Words )( 
            _Document * This,
            /* [retval][out] */ Words **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Sentences )( 
            _Document * This,
            /* [retval][out] */ Sentences **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Characters )( 
            _Document * This,
            /* [retval][out] */ Characters **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fields )( 
            _Document * This,
            /* [retval][out] */ Fields **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormFields )( 
            _Document * This,
            /* [retval][out] */ FormFields **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Styles )( 
            _Document * This,
            /* [retval][out] */ Styles **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Frames )( 
            _Document * This,
            /* [retval][out] */ Frames **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TablesOfFigures )( 
            _Document * This,
            /* [retval][out] */ TablesOfFigures **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Variables )( 
            _Document * This,
            /* [retval][out] */ Variables **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MailMerge )( 
            _Document * This,
            /* [retval][out] */ MailMerge **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Envelope )( 
            _Document * This,
            /* [retval][out] */ Envelope **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            _Document * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Revisions )( 
            _Document * This,
            /* [retval][out] */ Revisions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TablesOfContents )( 
            _Document * This,
            /* [retval][out] */ TablesOfContents **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TablesOfAuthorities )( 
            _Document * This,
            /* [retval][out] */ TablesOfAuthorities **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageSetup )( 
            _Document * This,
            /* [retval][out] */ PageSetup **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageSetup )( 
            _Document * This,
            /* [in] */ PageSetup *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Windows )( 
            _Document * This,
            /* [retval][out] */ Windows **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasRoutingSlip )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasRoutingSlip )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RoutingSlip )( 
            _Document * This,
            /* [retval][out] */ RoutingSlip **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Routed )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TablesOfAuthoritiesCategories )( 
            _Document * This,
            /* [retval][out] */ TablesOfAuthoritiesCategories **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Indexes )( 
            _Document * This,
            /* [retval][out] */ Indexes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Saved )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Saved )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Content )( 
            _Document * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveWindow )( 
            _Document * This,
            /* [retval][out] */ /*Window*/ void **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            _Document * This,
            /* [retval][out] */ WdDocumentKind *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Kind )( 
            _Document * This,
            /* [in] */ WdDocumentKind prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Subdocuments )( 
            _Document * This,
            /* [retval][out] */ Subdocuments **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsMasterDocument )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultTabStop )( 
            _Document * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultTabStop )( 
            _Document * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EmbedTrueTypeFonts )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EmbedTrueTypeFonts )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SaveFormsData )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SaveFormsData )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnlyRecommended )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadOnlyRecommended )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SaveSubsetFonts )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SaveSubsetFonts )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Compatibility )( 
            _Document * This,
            /* [in] */ WdCompatibility Type,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Compatibility )( 
            _Document * This,
            /* [in] */ WdCompatibility Type,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StoryRanges )( 
            _Document * This,
            /* [retval][out] */ StoryRanges **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandBars )( 
            _Document * This,
            /* [retval][out] */ /* external definition not present */ CommandBars **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsSubdocument )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SaveFormat )( 
            _Document * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProtectionType )( 
            _Document * This,
            /* [retval][out] */ WdProtectionType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            _Document * This,
            /* [retval][out] */ Hyperlinks **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shapes )( 
            _Document * This,
            /* [retval][out] */ /* external definition not present */ Shapes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListTemplates )( 
            _Document * This,
            /* [retval][out] */ ListTemplates **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lists )( 
            _Document * This,
            /* [retval][out] */ Lists **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateStylesOnOpen )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateStylesOnOpen )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AttachedTemplate )( 
            _Document * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AttachedTemplate )( 
            _Document * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InlineShapes )( 
            _Document * This,
            /* [retval][out] */ InlineShapes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Background )( 
            _Document * This,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Background )( 
            _Document * This,
            /* [in] */ /* external definition not present */ Shape *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GrammarChecked )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GrammarChecked )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpellingChecked )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpellingChecked )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowGrammaticalErrors )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowGrammaticalErrors )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowSpellingErrors )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowSpellingErrors )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Versions )( 
            _Document * This,
            /* [retval][out] */ Versions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowSummary )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowSummary )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SummaryViewMode )( 
            _Document * This,
            /* [retval][out] */ WdSummaryMode *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SummaryViewMode )( 
            _Document * This,
            /* [in] */ WdSummaryMode prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SummaryLength )( 
            _Document * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SummaryLength )( 
            _Document * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintFractionalWidths )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintFractionalWidths )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintPostScriptOverText )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintPostScriptOverText )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Container )( 
            _Document * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintFormsData )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintFormsData )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListParagraphs )( 
            _Document * This,
            /* [retval][out] */ ListParagraphs **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Password )( 
            _Document * This,
            /* [in] */ BSTR rhs);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WritePassword )( 
            _Document * This,
            /* [in] */ BSTR rhs);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasPassword )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WriteReserved )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveWritingStyle )( 
            _Document * This,
            /* [in] */ VARIANT *LanguageID,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ActiveWritingStyle )( 
            _Document * This,
            /* [in] */ VARIANT *LanguageID,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UserControl )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UserControl )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasMailer )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HasMailer )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Mailer )( 
            _Document * This,
            /* [retval][out] */ Mailer **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadabilityStatistics )( 
            _Document * This,
            /* [retval][out] */ ReadabilityStatistics **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GrammaticalErrors )( 
            _Document * This,
            /* [retval][out] */ ProofreadingErrors **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpellingErrors )( 
            _Document * This,
            /* [retval][out] */ ProofreadingErrors **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IUnknown )( 
            _Document * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormsDesign )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__CodeName )( 
            _Document * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put__CodeName )( 
            _Document * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CodeName )( 
            _Document * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SnapToGrid )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SnapToGrid )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SnapToShapes )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SnapToShapes )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GridDistanceHorizontal )( 
            _Document * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GridDistanceHorizontal )( 
            _Document * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GridDistanceVertical )( 
            _Document * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GridDistanceVertical )( 
            _Document * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GridOriginHorizontal )( 
            _Document * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GridOriginHorizontal )( 
            _Document * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GridOriginVertical )( 
            _Document * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GridOriginVertical )( 
            _Document * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GridSpaceBetweenHorizontalLines )( 
            _Document * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GridSpaceBetweenHorizontalLines )( 
            _Document * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GridSpaceBetweenVerticalLines )( 
            _Document * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GridSpaceBetweenVerticalLines )( 
            _Document * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GridOriginFromMargin )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GridOriginFromMargin )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KerningByAlgorithm )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_KerningByAlgorithm )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_JustificationMode )( 
            _Document * This,
            /* [retval][out] */ WdJustificationMode *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_JustificationMode )( 
            _Document * This,
            /* [in] */ WdJustificationMode prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FarEastLineBreakLevel )( 
            _Document * This,
            /* [retval][out] */ WdFarEastLineBreakLevel *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FarEastLineBreakLevel )( 
            _Document * This,
            /* [in] */ WdFarEastLineBreakLevel prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoLineBreakBefore )( 
            _Document * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoLineBreakBefore )( 
            _Document * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoLineBreakAfter )( 
            _Document * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoLineBreakAfter )( 
            _Document * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrackRevisions )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrackRevisions )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintRevisions )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintRevisions )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowRevisions )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowRevisions )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            _Document * This,
            /* [optional][in] */ VARIANT *SaveChanges,
            /* [optional][in] */ VARIANT *OriginalFormat,
            /* [optional][in] */ VARIANT *RouteDocument);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAs2000 )( 
            _Document * This,
            /* [optional][in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *FileFormat,
            /* [optional][in] */ VARIANT *LockComments,
            /* [optional][in] */ VARIANT *Password,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *WritePassword,
            /* [optional][in] */ VARIANT *ReadOnlyRecommended,
            /* [optional][in] */ VARIANT *EmbedTrueTypeFonts,
            /* [optional][in] */ VARIANT *SaveNativePictureFormat,
            /* [optional][in] */ VARIANT *SaveFormsData,
            /* [optional][in] */ VARIANT *SaveAsAOCELetter);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Repaginate )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FitToPages )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ManualHyphenation )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DataForm )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Route )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            _Document * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOutOld )( 
            _Document * This,
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SendMail )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Range )( 
            _Document * This,
            /* [optional][in] */ VARIANT *Start,
            /* [optional][in] */ VARIANT *End,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RunAutoMacro )( 
            _Document * This,
            /* [in] */ WdAutoMacros Which);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrintPreview )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GoTo )( 
            _Document * This,
            /* [optional][in] */ VARIANT *What,
            /* [optional][in] */ VARIANT *Which,
            /* [optional][in] */ VARIANT *Count,
            /* [optional][in] */ VARIANT *Name,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Undo )( 
            _Document * This,
            /* [optional][in] */ VARIANT *Times,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Redo )( 
            _Document * This,
            /* [optional][in] */ VARIANT *Times,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ComputeStatistics )( 
            _Document * This,
            /* [in] */ WdStatistic Statistic,
            /* [optional][in] */ VARIANT *IncludeFootnotesAndEndnotes,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MakeCompatibilityDefault )( 
            _Document * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Protect2002 )( 
            _Document * This,
            /* [in] */ WdProtectionType Type,
            /* [optional][in] */ VARIANT *NoReset,
            /* [optional][in] */ VARIANT *Password);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Unprotect )( 
            _Document * This,
            /* [optional][in] */ VARIANT *Password);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EditionOptions )( 
            _Document * This,
            /* [in] */ WdEditionType Type,
            /* [in] */ WdEditionOption Option,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Format);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RunLetterWizard )( 
            _Document * This,
            /* [optional][in] */ VARIANT *_LetterContent,
            /* [optional][in] */ VARIANT *WizardMode);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetLetterContent )( 
            _Document * This,
            /* [retval][out] */ _LetterContent **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetLetterContent )( 
            _Document * This,
            /* [in] */ VARIANT *_LetterContent);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyStylesFromTemplate )( 
            _Document * This,
            /* [in] */ BSTR Template);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UpdateStyles )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckGrammar )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckSpelling )( 
            _Document * This,
            /* [optional][in] */ VARIANT *CustomDictionary,
            /* [optional][in] */ VARIANT *IgnoreUppercase,
            /* [optional][in] */ VARIANT *AlwaysSuggest,
            /* [optional][in] */ VARIANT *CustomDictionary2,
            /* [optional][in] */ VARIANT *CustomDictionary3,
            /* [optional][in] */ VARIANT *CustomDictionary4,
            /* [optional][in] */ VARIANT *CustomDictionary5,
            /* [optional][in] */ VARIANT *CustomDictionary6,
            /* [optional][in] */ VARIANT *CustomDictionary7,
            /* [optional][in] */ VARIANT *CustomDictionary8,
            /* [optional][in] */ VARIANT *CustomDictionary9,
            /* [optional][in] */ VARIANT *CustomDictionary10);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FollowHyperlink )( 
            _Document * This,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *SubAddress,
            /* [optional][in] */ VARIANT *NewWindow,
            /* [optional][in] */ VARIANT *AddHistory,
            /* [optional][in] */ VARIANT *ExtraInfo,
            /* [optional][in] */ VARIANT *Method,
            /* [optional][in] */ VARIANT *HeaderInfo);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddToFavorites )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Reload )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AutoSummarize )( 
            _Document * This,
            /* [optional][in] */ VARIANT *Length,
            /* [optional][in] */ VARIANT *Mode,
            /* [optional][in] */ VARIANT *UpdateProperties,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveNumbers )( 
            _Document * This,
            /* [optional][in] */ VARIANT *NumberType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertNumbersToText )( 
            _Document * This,
            /* [optional][in] */ VARIANT *NumberType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CountNumberedItems )( 
            _Document * This,
            /* [optional][in] */ VARIANT *NumberType,
            /* [optional][in] */ VARIANT *Level,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Post )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ToggleFormsDesign )( 
            _Document * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Compare2000 )( 
            _Document * This,
            /* [in] */ BSTR Name);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UpdateSummaryProperties )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetCrossReferenceItems )( 
            _Document * This,
            /* [in] */ VARIANT *ReferenceType,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AutoFormat )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ViewCode )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ViewPropertyBrowser )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ForwardMailer )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Reply )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReplyAll )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SendMailer )( 
            _Document * This,
            /* [optional][in] */ VARIANT *FileFormat,
            /* [optional][in] */ VARIANT *Priority);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UndoClear )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PresentIt )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SendFax )( 
            _Document * This,
            /* [in] */ BSTR Address,
            /* [optional][in] */ VARIANT *Subject);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Merge2000 )( 
            _Document * This,
            /* [in] */ BSTR FileName);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClosePrintPreview )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckConsistency )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateLetterContent )( 
            _Document * This,
            /* [in] */ BSTR DateFormat,
            /* [in] */ VARIANT_BOOL IncludeHeaderFooter,
            /* [in] */ BSTR PageDesign,
            /* [in] */ WdLetterStyle LetterStyle,
            /* [in] */ VARIANT_BOOL Letterhead,
            /* [in] */ WdLetterheadLocation LetterheadLocation,
            /* [in] */ int LetterheadSize,
            /* [in] */ BSTR RecipientName,
            /* [in] */ BSTR RecipientAddress,
            /* [in] */ BSTR Salutation,
            /* [in] */ WdSalutationType SalutationType,
            /* [in] */ BSTR RecipientReference,
            /* [in] */ BSTR MailingInstructions,
            /* [in] */ BSTR AttentionLine,
            /* [in] */ BSTR Subject,
            /* [in] */ BSTR CCList,
            /* [in] */ BSTR ReturnAddress,
            /* [in] */ BSTR SenderName,
            /* [in] */ BSTR Closing,
            /* [in] */ BSTR SenderCompany,
            /* [in] */ BSTR SenderJobTitle,
            /* [in] */ BSTR SenderInitials,
            /* [in] */ long EnclosureNumber,
            /* [optional][in] */ VARIANT *InfoBlock,
            /* [optional][in] */ VARIANT *RecipientCode,
            /* [optional][in] */ VARIANT *RecipientGender,
            /* [optional][in] */ VARIANT *ReturnAddressShortForm,
            /* [optional][in] */ VARIANT *SenderCity,
            /* [optional][in] */ VARIANT *SenderCode,
            /* [optional][in] */ VARIANT *SenderGender,
            /* [optional][in] */ VARIANT *SenderReference,
            /* [retval][out] */ _LetterContent **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AcceptAllRevisions )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RejectAllRevisions )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DetectLanguage )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyTheme )( 
            _Document * This,
            /* [in] */ BSTR Name);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveTheme )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WebPagePreview )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReloadAs )( 
            _Document * This,
            /* [in] */ MsoEncoding Encoding);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveTheme )( 
            _Document * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveThemeDisplayName )( 
            _Document * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Email )( 
            _Document * This,
            /* [retval][out] */ Email **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Scripts )( 
            _Document * This,
            /* [retval][out] */ /* external definition not present */ Scripts **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageDetected )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageDetected )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FarEastLineBreakLanguage )( 
            _Document * This,
            /* [retval][out] */ WdFarEastLineBreakLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FarEastLineBreakLanguage )( 
            _Document * This,
            /* [in] */ WdFarEastLineBreakLanguageID prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Frameset )( 
            _Document * This,
            /* [retval][out] */ Frameset **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ClickAndTypeParagraphStyle )( 
            _Document * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ClickAndTypeParagraphStyle )( 
            _Document * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HTMLProject )( 
            _Document * This,
            /* [retval][out] */ /* external definition not present */ HTMLProject **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WebOptions )( 
            _Document * This,
            /* [retval][out] */ WebOptions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OpenEncoding )( 
            _Document * This,
            /* [retval][out] */ MsoEncoding *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SaveEncoding )( 
            _Document * This,
            /* [retval][out] */ MsoEncoding *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SaveEncoding )( 
            _Document * This,
            /* [in] */ MsoEncoding prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OptimizeForWord97 )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OptimizeForWord97 )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VBASigned )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOut2000 )( 
            _Document * This,
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint,
            /* [optional][in] */ VARIANT *PrintZoomColumn,
            /* [optional][in] */ VARIANT *PrintZoomRow,
            /* [optional][in] */ VARIANT *PrintZoomPaperWidth,
            /* [optional][in] */ VARIANT *PrintZoomPaperHeight);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *sblt )( 
            _Document * This,
            /* [in] */ BSTR s);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertVietDoc )( 
            _Document * This,
            /* [in] */ long CodePageOrigin);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOut )( 
            _Document * This,
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint,
            /* [optional][in] */ VARIANT *PrintZoomColumn,
            /* [optional][in] */ VARIANT *PrintZoomRow,
            /* [optional][in] */ VARIANT *PrintZoomPaperWidth,
            /* [optional][in] */ VARIANT *PrintZoomPaperHeight);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MailEnvelope )( 
            _Document * This,
            /* [retval][out] */ /* external definition not present */ MsoEnvelope **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisableFeatures )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisableFeatures )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DoNotEmbedSystemFonts )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DoNotEmbedSystemFonts )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Signatures )( 
            _Document * This,
            /* [retval][out] */ /* external definition not present */ SignatureSet **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultTargetFrame )( 
            _Document * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultTargetFrame )( 
            _Document * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HTMLDivisions )( 
            _Document * This,
            /* [retval][out] */ HTMLDivisions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisableFeaturesIntroducedAfter )( 
            _Document * This,
            /* [retval][out] */ WdDisableFeaturesIntroducedAfter *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisableFeaturesIntroducedAfter )( 
            _Document * This,
            /* [in] */ WdDisableFeaturesIntroducedAfter prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RemovePersonalInformation )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RemovePersonalInformation )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartTags )( 
            _Document * This,
            /* [retval][out] */ SmartTags **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Compare2002 )( 
            _Document * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *AuthorName,
            /* [optional][in] */ VARIANT *CompareTarget,
            /* [optional][in] */ VARIANT *DetectFormatChanges,
            /* [optional][in] */ VARIANT *IgnoreAllComparisonWarnings,
            /* [optional][in] */ VARIANT *AddToRecentFiles);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckIn )( 
            _Document * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL SaveChanges,
            /* [optional][in] */ VARIANT *Comments,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL MakePublic);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanCheckin )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Merge )( 
            _Document * This,
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *MergeTarget,
            /* [optional][in] */ VARIANT *DetectFormatChanges,
            /* [optional][in] */ VARIANT *UseFormattingFrom,
            /* [optional][in] */ VARIANT *AddToRecentFiles);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EmbedSmartTags )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EmbedSmartTags )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartTagsAsXMLProps )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SmartTagsAsXMLProps )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextEncoding )( 
            _Document * This,
            /* [retval][out] */ MsoEncoding *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextEncoding )( 
            _Document * This,
            /* [in] */ MsoEncoding prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextLineEnding )( 
            _Document * This,
            /* [retval][out] */ WdLineEndingType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextLineEnding )( 
            _Document * This,
            /* [in] */ WdLineEndingType prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SendForReview )( 
            _Document * This,
            /* [optional][in] */ VARIANT *Recipients,
            /* [optional][in] */ VARIANT *Subject,
            /* [optional][in] */ VARIANT *ShowMessage,
            /* [optional][in] */ VARIANT *IncludeAttachment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReplyWithChanges )( 
            _Document * This,
            /* [optional][in] */ VARIANT *ShowMessage);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndReview )( 
            _Document * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleSheets )( 
            _Document * This,
            /* [retval][out] */ StyleSheets **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultTableStyle )( 
            _Document * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PasswordEncryptionProvider )( 
            _Document * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PasswordEncryptionAlgorithm )( 
            _Document * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PasswordEncryptionKeyLength )( 
            _Document * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PasswordEncryptionFileProperties )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetPasswordEncryptionOptions )( 
            _Document * This,
            /* [in] */ BSTR PasswordEncryptionProvider,
            /* [in] */ BSTR PasswordEncryptionAlgorithm,
            /* [in] */ long PasswordEncryptionKeyLength,
            /* [optional][in] */ VARIANT *PasswordEncryptionFileProperties);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RecheckSmartTags )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveSmartTags )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetDefaultTableStyle )( 
            _Document * This,
            /* [in] */ VARIANT *Style,
            /* [in] */ VARIANT_BOOL SetInTemplate);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteAllComments )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AcceptAllRevisionsShown )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RejectAllRevisionsShown )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteAllCommentsShown )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ResetFormFields )( 
            _Document * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAs )( 
            _Document * This,
            /* [optional][in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *FileFormat,
            /* [optional][in] */ VARIANT *LockComments,
            /* [optional][in] */ VARIANT *Password,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *WritePassword,
            /* [optional][in] */ VARIANT *ReadOnlyRecommended,
            /* [optional][in] */ VARIANT *EmbedTrueTypeFonts,
            /* [optional][in] */ VARIANT *SaveNativePictureFormat,
            /* [optional][in] */ VARIANT *SaveFormsData,
            /* [optional][in] */ VARIANT *SaveAsAOCELetter,
            /* [optional][in] */ VARIANT *Encoding,
            /* [optional][in] */ VARIANT *InsertLineBreaks,
            /* [optional][in] */ VARIANT *AllowSubstitutions,
            /* [optional][in] */ VARIANT *LineEnding,
            /* [optional][in] */ VARIANT *AddBiDiMarks);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EmbedLinguisticData )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EmbedLinguisticData )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormattingShowFont )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormattingShowFont )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormattingShowClear )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormattingShowClear )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormattingShowParagraph )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormattingShowParagraph )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormattingShowNumbering )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormattingShowNumbering )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormattingShowFilter )( 
            _Document * This,
            /* [retval][out] */ WdShowFilter *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormattingShowFilter )( 
            _Document * This,
            /* [in] */ WdShowFilter prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckNewSmartTags )( 
            _Document * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Permission )( 
            _Document * This,
            /* [retval][out] */ /* external definition not present */ Permission **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XMLNodes )( 
            _Document * This,
            /* [retval][out] */ XMLNodes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XMLSchemaReferences )( 
            _Document * This,
            /* [retval][out] */ XMLSchemaReferences **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartDocument )( 
            _Document * This,
            /* [retval][out] */ /* external definition not present */ SmartDocument **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SharedWorkspace )( 
            _Document * This,
            /* [retval][out] */ /* external definition not present */ SharedWorkspace **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Sync )( 
            _Document * This,
            /* [retval][out] */ /* external definition not present */ Sync **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnforceStyle )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnforceStyle )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatOverride )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatOverride )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XMLSaveDataOnly )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XMLSaveDataOnly )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XMLHideNamespaces )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XMLHideNamespaces )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XMLShowAdvancedErrors )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XMLShowAdvancedErrors )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XMLUseXSLTWhenSaving )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XMLUseXSLTWhenSaving )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XMLSaveThroughXSLT )( 
            _Document * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_XMLSaveThroughXSLT )( 
            _Document * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentLibraryVersions )( 
            _Document * This,
            /* [retval][out] */ /* external definition not present */ DocumentLibraryVersions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingModeLayoutFrozen )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingModeLayoutFrozen )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RemoveDateAndTime )( 
            _Document * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RemoveDateAndTime )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SendFaxOverInternet )( 
            _Document * This,
            /* [optional][in] */ VARIANT *Recipients,
            /* [optional][in] */ VARIANT *Subject,
            /* [optional][in] */ VARIANT *ShowMessage);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TransformDocument )( 
            _Document * This,
            /* [in] */ BSTR Path,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL DataOnly);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Protect )( 
            _Document * This,
            /* [in] */ WdProtectionType Type,
            /* [optional][in] */ VARIANT *NoReset,
            /* [optional][in] */ VARIANT *Password,
            /* [optional][in] */ VARIANT *UseIRM,
            /* [optional][in] */ VARIANT *EnforceStyleLock);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectAllEditableRanges )( 
            _Document * This,
            /* [optional][in] */ VARIANT *EditorID);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteAllEditableRanges )( 
            _Document * This,
            /* [optional][in] */ VARIANT *EditorID);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteAllInkAnnotations )( 
            _Document * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AddDocumentWorkspaceHeader )( 
            _Document * This,
            /* [in] */ VARIANT_BOOL RichFormat,
            /* [in] */ BSTR Url,
            /* [in] */ BSTR Title,
            /* [in] */ BSTR Description,
            /* [in] */ BSTR ID);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveDocumentWorkspaceHeader )( 
            _Document * This,
            /* [in] */ BSTR ID);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Compare )( 
            _Document * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *AuthorName,
            /* [optional][in] */ VARIANT *CompareTarget,
            /* [optional][in] */ VARIANT *DetectFormatChanges,
            /* [optional][in] */ VARIANT *IgnoreAllComparisonWarnings,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *RemovePersonalInformation,
            /* [optional][in] */ VARIANT *RemoveDateAndTime);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveLockedStyles )( 
            _Document * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChildNodeSuggestions )( 
            _Document * This,
            /* [retval][out] */ XMLChildNodeSuggestions **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectSingleNode )( 
            _Document * This,
            /* [in] */ BSTR XPath,
            /* [defaultvalue][optional][in] */ BSTR PrefixMapping,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL FastSearchSkippingTextNodes,
            /* [retval][out] */ XMLNode **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectNodes )( 
            _Document * This,
            /* [in] */ BSTR XPath,
            /* [defaultvalue][optional][in] */ BSTR PrefixMapping,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL FastSearchSkippingTextNodes,
            /* [retval][out] */ XMLNodes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XMLSchemaViolations )( 
            _Document * This,
            /* [retval][out] */ XMLNodes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingLayoutSizeX )( 
            _Document * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingLayoutSizeX )( 
            _Document * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingLayoutSizeY )( 
            _Document * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingLayoutSizeY )( 
            _Document * This,
            /* [in] */ long prop);
        
        END_INTERFACE
    } _DocumentVtbl;

    interface _Document
    {
        CONST_VTBL struct _DocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Document_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Document_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Document_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Document_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Document_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Document_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Document_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Document_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define _Document_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define _Document_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define _Document_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define _Document_get_BuiltInDocumentProperties(This,prop)	\
    ( (This)->lpVtbl -> get_BuiltInDocumentProperties(This,prop) ) 

#define _Document_get_CustomDocumentProperties(This,prop)	\
    ( (This)->lpVtbl -> get_CustomDocumentProperties(This,prop) ) 

#define _Document_get_Path(This,prop)	\
    ( (This)->lpVtbl -> get_Path(This,prop) ) 

#define _Document_get_Bookmarks(This,prop)	\
    ( (This)->lpVtbl -> get_Bookmarks(This,prop) ) 

#define _Document_get_Tables(This,prop)	\
    ( (This)->lpVtbl -> get_Tables(This,prop) ) 

#define _Document_get_Footnotes(This,prop)	\
    ( (This)->lpVtbl -> get_Footnotes(This,prop) ) 

#define _Document_get_Endnotes(This,prop)	\
    ( (This)->lpVtbl -> get_Endnotes(This,prop) ) 

#define _Document_get_Comments(This,prop)	\
    ( (This)->lpVtbl -> get_Comments(This,prop) ) 

#define _Document_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define _Document_get_AutoHyphenation(This,prop)	\
    ( (This)->lpVtbl -> get_AutoHyphenation(This,prop) ) 

#define _Document_put_AutoHyphenation(This,prop)	\
    ( (This)->lpVtbl -> put_AutoHyphenation(This,prop) ) 

#define _Document_get_HyphenateCaps(This,prop)	\
    ( (This)->lpVtbl -> get_HyphenateCaps(This,prop) ) 

#define _Document_put_HyphenateCaps(This,prop)	\
    ( (This)->lpVtbl -> put_HyphenateCaps(This,prop) ) 

#define _Document_get_HyphenationZone(This,prop)	\
    ( (This)->lpVtbl -> get_HyphenationZone(This,prop) ) 

#define _Document_put_HyphenationZone(This,prop)	\
    ( (This)->lpVtbl -> put_HyphenationZone(This,prop) ) 

#define _Document_get_ConsecutiveHyphensLimit(This,prop)	\
    ( (This)->lpVtbl -> get_ConsecutiveHyphensLimit(This,prop) ) 

#define _Document_put_ConsecutiveHyphensLimit(This,prop)	\
    ( (This)->lpVtbl -> put_ConsecutiveHyphensLimit(This,prop) ) 

#define _Document_get_Sections(This,prop)	\
    ( (This)->lpVtbl -> get_Sections(This,prop) ) 

#define _Document_get_Paragraphs(This,prop)	\
    ( (This)->lpVtbl -> get_Paragraphs(This,prop) ) 

#define _Document_get_Words(This,prop)	\
    ( (This)->lpVtbl -> get_Words(This,prop) ) 

#define _Document_get_Sentences(This,prop)	\
    ( (This)->lpVtbl -> get_Sentences(This,prop) ) 

#define _Document_get_Characters(This,prop)	\
    ( (This)->lpVtbl -> get_Characters(This,prop) ) 

#define _Document_get_Fields(This,prop)	\
    ( (This)->lpVtbl -> get_Fields(This,prop) ) 

#define _Document_get_FormFields(This,prop)	\
    ( (This)->lpVtbl -> get_FormFields(This,prop) ) 

#define _Document_get_Styles(This,prop)	\
    ( (This)->lpVtbl -> get_Styles(This,prop) ) 

#define _Document_get_Frames(This,prop)	\
    ( (This)->lpVtbl -> get_Frames(This,prop) ) 

#define _Document_get_TablesOfFigures(This,prop)	\
    ( (This)->lpVtbl -> get_TablesOfFigures(This,prop) ) 

#define _Document_get_Variables(This,prop)	\
    ( (This)->lpVtbl -> get_Variables(This,prop) ) 

#define _Document_get_MailMerge(This,prop)	\
    ( (This)->lpVtbl -> get_MailMerge(This,prop) ) 

#define _Document_get_Envelope(This,prop)	\
    ( (This)->lpVtbl -> get_Envelope(This,prop) ) 

#define _Document_get_FullName(This,prop)	\
    ( (This)->lpVtbl -> get_FullName(This,prop) ) 

#define _Document_get_Revisions(This,prop)	\
    ( (This)->lpVtbl -> get_Revisions(This,prop) ) 

#define _Document_get_TablesOfContents(This,prop)	\
    ( (This)->lpVtbl -> get_TablesOfContents(This,prop) ) 

#define _Document_get_TablesOfAuthorities(This,prop)	\
    ( (This)->lpVtbl -> get_TablesOfAuthorities(This,prop) ) 

#define _Document_get_PageSetup(This,prop)	\
    ( (This)->lpVtbl -> get_PageSetup(This,prop) ) 

#define _Document_put_PageSetup(This,prop)	\
    ( (This)->lpVtbl -> put_PageSetup(This,prop) ) 

#define _Document_get_Windows(This,prop)	\
    ( (This)->lpVtbl -> get_Windows(This,prop) ) 

#define _Document_get_HasRoutingSlip(This,prop)	\
    ( (This)->lpVtbl -> get_HasRoutingSlip(This,prop) ) 

#define _Document_put_HasRoutingSlip(This,prop)	\
    ( (This)->lpVtbl -> put_HasRoutingSlip(This,prop) ) 

#define _Document_get_RoutingSlip(This,prop)	\
    ( (This)->lpVtbl -> get_RoutingSlip(This,prop) ) 

#define _Document_get_Routed(This,prop)	\
    ( (This)->lpVtbl -> get_Routed(This,prop) ) 

#define _Document_get_TablesOfAuthoritiesCategories(This,prop)	\
    ( (This)->lpVtbl -> get_TablesOfAuthoritiesCategories(This,prop) ) 

#define _Document_get_Indexes(This,prop)	\
    ( (This)->lpVtbl -> get_Indexes(This,prop) ) 

#define _Document_get_Saved(This,prop)	\
    ( (This)->lpVtbl -> get_Saved(This,prop) ) 

#define _Document_put_Saved(This,prop)	\
    ( (This)->lpVtbl -> put_Saved(This,prop) ) 

#define _Document_get_Content(This,prop)	\
    ( (This)->lpVtbl -> get_Content(This,prop) ) 

#define _Document_get_ActiveWindow(This,prop)	\
    ( (This)->lpVtbl -> get_ActiveWindow(This,prop) ) 

#define _Document_get_Kind(This,prop)	\
    ( (This)->lpVtbl -> get_Kind(This,prop) ) 

#define _Document_put_Kind(This,prop)	\
    ( (This)->lpVtbl -> put_Kind(This,prop) ) 

#define _Document_get_ReadOnly(This,prop)	\
    ( (This)->lpVtbl -> get_ReadOnly(This,prop) ) 

#define _Document_get_Subdocuments(This,prop)	\
    ( (This)->lpVtbl -> get_Subdocuments(This,prop) ) 

#define _Document_get_IsMasterDocument(This,prop)	\
    ( (This)->lpVtbl -> get_IsMasterDocument(This,prop) ) 

#define _Document_get_DefaultTabStop(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultTabStop(This,prop) ) 

#define _Document_put_DefaultTabStop(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultTabStop(This,prop) ) 

#define _Document_get_EmbedTrueTypeFonts(This,prop)	\
    ( (This)->lpVtbl -> get_EmbedTrueTypeFonts(This,prop) ) 

#define _Document_put_EmbedTrueTypeFonts(This,prop)	\
    ( (This)->lpVtbl -> put_EmbedTrueTypeFonts(This,prop) ) 

#define _Document_get_SaveFormsData(This,prop)	\
    ( (This)->lpVtbl -> get_SaveFormsData(This,prop) ) 

#define _Document_put_SaveFormsData(This,prop)	\
    ( (This)->lpVtbl -> put_SaveFormsData(This,prop) ) 

#define _Document_get_ReadOnlyRecommended(This,prop)	\
    ( (This)->lpVtbl -> get_ReadOnlyRecommended(This,prop) ) 

#define _Document_put_ReadOnlyRecommended(This,prop)	\
    ( (This)->lpVtbl -> put_ReadOnlyRecommended(This,prop) ) 

#define _Document_get_SaveSubsetFonts(This,prop)	\
    ( (This)->lpVtbl -> get_SaveSubsetFonts(This,prop) ) 

#define _Document_put_SaveSubsetFonts(This,prop)	\
    ( (This)->lpVtbl -> put_SaveSubsetFonts(This,prop) ) 

#define _Document_get_Compatibility(This,Type,prop)	\
    ( (This)->lpVtbl -> get_Compatibility(This,Type,prop) ) 

#define _Document_put_Compatibility(This,Type,prop)	\
    ( (This)->lpVtbl -> put_Compatibility(This,Type,prop) ) 

#define _Document_get_StoryRanges(This,prop)	\
    ( (This)->lpVtbl -> get_StoryRanges(This,prop) ) 

#define _Document_get_CommandBars(This,prop)	\
    ( (This)->lpVtbl -> get_CommandBars(This,prop) ) 

#define _Document_get_IsSubdocument(This,prop)	\
    ( (This)->lpVtbl -> get_IsSubdocument(This,prop) ) 

#define _Document_get_SaveFormat(This,prop)	\
    ( (This)->lpVtbl -> get_SaveFormat(This,prop) ) 

#define _Document_get_ProtectionType(This,prop)	\
    ( (This)->lpVtbl -> get_ProtectionType(This,prop) ) 

#define _Document_get_Hyperlinks(This,prop)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,prop) ) 

#define _Document_get_Shapes(This,prop)	\
    ( (This)->lpVtbl -> get_Shapes(This,prop) ) 

#define _Document_get_ListTemplates(This,prop)	\
    ( (This)->lpVtbl -> get_ListTemplates(This,prop) ) 

#define _Document_get_Lists(This,prop)	\
    ( (This)->lpVtbl -> get_Lists(This,prop) ) 

#define _Document_get_UpdateStylesOnOpen(This,prop)	\
    ( (This)->lpVtbl -> get_UpdateStylesOnOpen(This,prop) ) 

#define _Document_put_UpdateStylesOnOpen(This,prop)	\
    ( (This)->lpVtbl -> put_UpdateStylesOnOpen(This,prop) ) 

#define _Document_get_AttachedTemplate(This,prop)	\
    ( (This)->lpVtbl -> get_AttachedTemplate(This,prop) ) 

#define _Document_put_AttachedTemplate(This,prop)	\
    ( (This)->lpVtbl -> put_AttachedTemplate(This,prop) ) 

#define _Document_get_InlineShapes(This,prop)	\
    ( (This)->lpVtbl -> get_InlineShapes(This,prop) ) 

#define _Document_get_Background(This,prop)	\
    ( (This)->lpVtbl -> get_Background(This,prop) ) 

#define _Document_put_Background(This,prop)	\
    ( (This)->lpVtbl -> put_Background(This,prop) ) 

#define _Document_get_GrammarChecked(This,prop)	\
    ( (This)->lpVtbl -> get_GrammarChecked(This,prop) ) 

#define _Document_put_GrammarChecked(This,prop)	\
    ( (This)->lpVtbl -> put_GrammarChecked(This,prop) ) 

#define _Document_get_SpellingChecked(This,prop)	\
    ( (This)->lpVtbl -> get_SpellingChecked(This,prop) ) 

#define _Document_put_SpellingChecked(This,prop)	\
    ( (This)->lpVtbl -> put_SpellingChecked(This,prop) ) 

#define _Document_get_ShowGrammaticalErrors(This,prop)	\
    ( (This)->lpVtbl -> get_ShowGrammaticalErrors(This,prop) ) 

#define _Document_put_ShowGrammaticalErrors(This,prop)	\
    ( (This)->lpVtbl -> put_ShowGrammaticalErrors(This,prop) ) 

#define _Document_get_ShowSpellingErrors(This,prop)	\
    ( (This)->lpVtbl -> get_ShowSpellingErrors(This,prop) ) 

#define _Document_put_ShowSpellingErrors(This,prop)	\
    ( (This)->lpVtbl -> put_ShowSpellingErrors(This,prop) ) 

#define _Document_get_Versions(This,prop)	\
    ( (This)->lpVtbl -> get_Versions(This,prop) ) 

#define _Document_get_ShowSummary(This,prop)	\
    ( (This)->lpVtbl -> get_ShowSummary(This,prop) ) 

#define _Document_put_ShowSummary(This,prop)	\
    ( (This)->lpVtbl -> put_ShowSummary(This,prop) ) 

#define _Document_get_SummaryViewMode(This,prop)	\
    ( (This)->lpVtbl -> get_SummaryViewMode(This,prop) ) 

#define _Document_put_SummaryViewMode(This,prop)	\
    ( (This)->lpVtbl -> put_SummaryViewMode(This,prop) ) 

#define _Document_get_SummaryLength(This,prop)	\
    ( (This)->lpVtbl -> get_SummaryLength(This,prop) ) 

#define _Document_put_SummaryLength(This,prop)	\
    ( (This)->lpVtbl -> put_SummaryLength(This,prop) ) 

#define _Document_get_PrintFractionalWidths(This,prop)	\
    ( (This)->lpVtbl -> get_PrintFractionalWidths(This,prop) ) 

#define _Document_put_PrintFractionalWidths(This,prop)	\
    ( (This)->lpVtbl -> put_PrintFractionalWidths(This,prop) ) 

#define _Document_get_PrintPostScriptOverText(This,prop)	\
    ( (This)->lpVtbl -> get_PrintPostScriptOverText(This,prop) ) 

#define _Document_put_PrintPostScriptOverText(This,prop)	\
    ( (This)->lpVtbl -> put_PrintPostScriptOverText(This,prop) ) 

#define _Document_get_Container(This,prop)	\
    ( (This)->lpVtbl -> get_Container(This,prop) ) 

#define _Document_get_PrintFormsData(This,prop)	\
    ( (This)->lpVtbl -> get_PrintFormsData(This,prop) ) 

#define _Document_put_PrintFormsData(This,prop)	\
    ( (This)->lpVtbl -> put_PrintFormsData(This,prop) ) 

#define _Document_get_ListParagraphs(This,prop)	\
    ( (This)->lpVtbl -> get_ListParagraphs(This,prop) ) 

#define _Document_put_Password(This,rhs)	\
    ( (This)->lpVtbl -> put_Password(This,rhs) ) 

#define _Document_put_WritePassword(This,rhs)	\
    ( (This)->lpVtbl -> put_WritePassword(This,rhs) ) 

#define _Document_get_HasPassword(This,prop)	\
    ( (This)->lpVtbl -> get_HasPassword(This,prop) ) 

#define _Document_get_WriteReserved(This,prop)	\
    ( (This)->lpVtbl -> get_WriteReserved(This,prop) ) 

#define _Document_get_ActiveWritingStyle(This,LanguageID,prop)	\
    ( (This)->lpVtbl -> get_ActiveWritingStyle(This,LanguageID,prop) ) 

#define _Document_put_ActiveWritingStyle(This,LanguageID,prop)	\
    ( (This)->lpVtbl -> put_ActiveWritingStyle(This,LanguageID,prop) ) 

#define _Document_get_UserControl(This,prop)	\
    ( (This)->lpVtbl -> get_UserControl(This,prop) ) 

#define _Document_put_UserControl(This,prop)	\
    ( (This)->lpVtbl -> put_UserControl(This,prop) ) 

#define _Document_get_HasMailer(This,prop)	\
    ( (This)->lpVtbl -> get_HasMailer(This,prop) ) 

#define _Document_put_HasMailer(This,prop)	\
    ( (This)->lpVtbl -> put_HasMailer(This,prop) ) 

#define _Document_get_Mailer(This,prop)	\
    ( (This)->lpVtbl -> get_Mailer(This,prop) ) 

#define _Document_get_ReadabilityStatistics(This,prop)	\
    ( (This)->lpVtbl -> get_ReadabilityStatistics(This,prop) ) 

#define _Document_get_GrammaticalErrors(This,prop)	\
    ( (This)->lpVtbl -> get_GrammaticalErrors(This,prop) ) 

#define _Document_get_SpellingErrors(This,prop)	\
    ( (This)->lpVtbl -> get_SpellingErrors(This,prop) ) 

#define _Document_get_IUnknown(This,prop)	\
    ( (This)->lpVtbl -> get_IUnknown(This,prop) ) 

#define _Document_get_FormsDesign(This,prop)	\
    ( (This)->lpVtbl -> get_FormsDesign(This,prop) ) 

#define _Document_get__CodeName(This,prop)	\
    ( (This)->lpVtbl -> get__CodeName(This,prop) ) 

#define _Document_put__CodeName(This,prop)	\
    ( (This)->lpVtbl -> put__CodeName(This,prop) ) 

#define _Document_get_CodeName(This,prop)	\
    ( (This)->lpVtbl -> get_CodeName(This,prop) ) 

#define _Document_get_SnapToGrid(This,prop)	\
    ( (This)->lpVtbl -> get_SnapToGrid(This,prop) ) 

#define _Document_put_SnapToGrid(This,prop)	\
    ( (This)->lpVtbl -> put_SnapToGrid(This,prop) ) 

#define _Document_get_SnapToShapes(This,prop)	\
    ( (This)->lpVtbl -> get_SnapToShapes(This,prop) ) 

#define _Document_put_SnapToShapes(This,prop)	\
    ( (This)->lpVtbl -> put_SnapToShapes(This,prop) ) 

#define _Document_get_GridDistanceHorizontal(This,prop)	\
    ( (This)->lpVtbl -> get_GridDistanceHorizontal(This,prop) ) 

#define _Document_put_GridDistanceHorizontal(This,prop)	\
    ( (This)->lpVtbl -> put_GridDistanceHorizontal(This,prop) ) 

#define _Document_get_GridDistanceVertical(This,prop)	\
    ( (This)->lpVtbl -> get_GridDistanceVertical(This,prop) ) 

#define _Document_put_GridDistanceVertical(This,prop)	\
    ( (This)->lpVtbl -> put_GridDistanceVertical(This,prop) ) 

#define _Document_get_GridOriginHorizontal(This,prop)	\
    ( (This)->lpVtbl -> get_GridOriginHorizontal(This,prop) ) 

#define _Document_put_GridOriginHorizontal(This,prop)	\
    ( (This)->lpVtbl -> put_GridOriginHorizontal(This,prop) ) 

#define _Document_get_GridOriginVertical(This,prop)	\
    ( (This)->lpVtbl -> get_GridOriginVertical(This,prop) ) 

#define _Document_put_GridOriginVertical(This,prop)	\
    ( (This)->lpVtbl -> put_GridOriginVertical(This,prop) ) 

#define _Document_get_GridSpaceBetweenHorizontalLines(This,prop)	\
    ( (This)->lpVtbl -> get_GridSpaceBetweenHorizontalLines(This,prop) ) 

#define _Document_put_GridSpaceBetweenHorizontalLines(This,prop)	\
    ( (This)->lpVtbl -> put_GridSpaceBetweenHorizontalLines(This,prop) ) 

#define _Document_get_GridSpaceBetweenVerticalLines(This,prop)	\
    ( (This)->lpVtbl -> get_GridSpaceBetweenVerticalLines(This,prop) ) 

#define _Document_put_GridSpaceBetweenVerticalLines(This,prop)	\
    ( (This)->lpVtbl -> put_GridSpaceBetweenVerticalLines(This,prop) ) 

#define _Document_get_GridOriginFromMargin(This,prop)	\
    ( (This)->lpVtbl -> get_GridOriginFromMargin(This,prop) ) 

#define _Document_put_GridOriginFromMargin(This,prop)	\
    ( (This)->lpVtbl -> put_GridOriginFromMargin(This,prop) ) 

#define _Document_get_KerningByAlgorithm(This,prop)	\
    ( (This)->lpVtbl -> get_KerningByAlgorithm(This,prop) ) 

#define _Document_put_KerningByAlgorithm(This,prop)	\
    ( (This)->lpVtbl -> put_KerningByAlgorithm(This,prop) ) 

#define _Document_get_JustificationMode(This,prop)	\
    ( (This)->lpVtbl -> get_JustificationMode(This,prop) ) 

#define _Document_put_JustificationMode(This,prop)	\
    ( (This)->lpVtbl -> put_JustificationMode(This,prop) ) 

#define _Document_get_FarEastLineBreakLevel(This,prop)	\
    ( (This)->lpVtbl -> get_FarEastLineBreakLevel(This,prop) ) 

#define _Document_put_FarEastLineBreakLevel(This,prop)	\
    ( (This)->lpVtbl -> put_FarEastLineBreakLevel(This,prop) ) 

#define _Document_get_NoLineBreakBefore(This,prop)	\
    ( (This)->lpVtbl -> get_NoLineBreakBefore(This,prop) ) 

#define _Document_put_NoLineBreakBefore(This,prop)	\
    ( (This)->lpVtbl -> put_NoLineBreakBefore(This,prop) ) 

#define _Document_get_NoLineBreakAfter(This,prop)	\
    ( (This)->lpVtbl -> get_NoLineBreakAfter(This,prop) ) 

#define _Document_put_NoLineBreakAfter(This,prop)	\
    ( (This)->lpVtbl -> put_NoLineBreakAfter(This,prop) ) 

#define _Document_get_TrackRevisions(This,prop)	\
    ( (This)->lpVtbl -> get_TrackRevisions(This,prop) ) 

#define _Document_put_TrackRevisions(This,prop)	\
    ( (This)->lpVtbl -> put_TrackRevisions(This,prop) ) 

#define _Document_get_PrintRevisions(This,prop)	\
    ( (This)->lpVtbl -> get_PrintRevisions(This,prop) ) 

#define _Document_put_PrintRevisions(This,prop)	\
    ( (This)->lpVtbl -> put_PrintRevisions(This,prop) ) 

#define _Document_get_ShowRevisions(This,prop)	\
    ( (This)->lpVtbl -> get_ShowRevisions(This,prop) ) 

#define _Document_put_ShowRevisions(This,prop)	\
    ( (This)->lpVtbl -> put_ShowRevisions(This,prop) ) 

#define _Document_Close(This,SaveChanges,OriginalFormat,RouteDocument)	\
    ( (This)->lpVtbl -> Close(This,SaveChanges,OriginalFormat,RouteDocument) ) 

#define _Document_SaveAs2000(This,FileName,FileFormat,LockComments,Password,AddToRecentFiles,WritePassword,ReadOnlyRecommended,EmbedTrueTypeFonts,SaveNativePictureFormat,SaveFormsData,SaveAsAOCELetter)	\
    ( (This)->lpVtbl -> SaveAs2000(This,FileName,FileFormat,LockComments,Password,AddToRecentFiles,WritePassword,ReadOnlyRecommended,EmbedTrueTypeFonts,SaveNativePictureFormat,SaveFormsData,SaveAsAOCELetter) ) 

#define _Document_Repaginate(This)	\
    ( (This)->lpVtbl -> Repaginate(This) ) 

#define _Document_FitToPages(This)	\
    ( (This)->lpVtbl -> FitToPages(This) ) 

#define _Document_ManualHyphenation(This)	\
    ( (This)->lpVtbl -> ManualHyphenation(This) ) 

#define _Document_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define _Document_DataForm(This)	\
    ( (This)->lpVtbl -> DataForm(This) ) 

#define _Document_Route(This)	\
    ( (This)->lpVtbl -> Route(This) ) 

#define _Document_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#define _Document_PrintOutOld(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,ActivePrinterMacGX,ManualDuplexPrint)	\
    ( (This)->lpVtbl -> PrintOutOld(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,ActivePrinterMacGX,ManualDuplexPrint) ) 

#define _Document_SendMail(This)	\
    ( (This)->lpVtbl -> SendMail(This) ) 

#define _Document_Range(This,Start,End,prop)	\
    ( (This)->lpVtbl -> Range(This,Start,End,prop) ) 

#define _Document_RunAutoMacro(This,Which)	\
    ( (This)->lpVtbl -> RunAutoMacro(This,Which) ) 

#define _Document_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define _Document_PrintPreview(This)	\
    ( (This)->lpVtbl -> PrintPreview(This) ) 

#define _Document_GoTo(This,What,Which,Count,Name,prop)	\
    ( (This)->lpVtbl -> GoTo(This,What,Which,Count,Name,prop) ) 

#define _Document_Undo(This,Times,prop)	\
    ( (This)->lpVtbl -> Undo(This,Times,prop) ) 

#define _Document_Redo(This,Times,prop)	\
    ( (This)->lpVtbl -> Redo(This,Times,prop) ) 

#define _Document_ComputeStatistics(This,Statistic,IncludeFootnotesAndEndnotes,prop)	\
    ( (This)->lpVtbl -> ComputeStatistics(This,Statistic,IncludeFootnotesAndEndnotes,prop) ) 

#define _Document_MakeCompatibilityDefault(This)	\
    ( (This)->lpVtbl -> MakeCompatibilityDefault(This) ) 

#define _Document_Protect2002(This,Type,NoReset,Password)	\
    ( (This)->lpVtbl -> Protect2002(This,Type,NoReset,Password) ) 

#define _Document_Unprotect(This,Password)	\
    ( (This)->lpVtbl -> Unprotect(This,Password) ) 

#define _Document_EditionOptions(This,Type,Option,Name,Format)	\
    ( (This)->lpVtbl -> EditionOptions(This,Type,Option,Name,Format) ) 

#define _Document_RunLetterWizard(This,_LetterContent,WizardMode)	\
    ( (This)->lpVtbl -> RunLetterWizard(This,_LetterContent,WizardMode) ) 

#define _Document_GetLetterContent(This,prop)	\
    ( (This)->lpVtbl -> GetLetterContent(This,prop) ) 

#define _Document_SetLetterContent(This,_LetterContent)	\
    ( (This)->lpVtbl -> SetLetterContent(This,_LetterContent) ) 

#define _Document_CopyStylesFromTemplate(This,Template)	\
    ( (This)->lpVtbl -> CopyStylesFromTemplate(This,Template) ) 

#define _Document_UpdateStyles(This)	\
    ( (This)->lpVtbl -> UpdateStyles(This) ) 

#define _Document_CheckGrammar(This)	\
    ( (This)->lpVtbl -> CheckGrammar(This) ) 

#define _Document_CheckSpelling(This,CustomDictionary,IgnoreUppercase,AlwaysSuggest,CustomDictionary2,CustomDictionary3,CustomDictionary4,CustomDictionary5,CustomDictionary6,CustomDictionary7,CustomDictionary8,CustomDictionary9,CustomDictionary10)	\
    ( (This)->lpVtbl -> CheckSpelling(This,CustomDictionary,IgnoreUppercase,AlwaysSuggest,CustomDictionary2,CustomDictionary3,CustomDictionary4,CustomDictionary5,CustomDictionary6,CustomDictionary7,CustomDictionary8,CustomDictionary9,CustomDictionary10) ) 

#define _Document_FollowHyperlink(This,Address,SubAddress,NewWindow,AddHistory,ExtraInfo,Method,HeaderInfo)	\
    ( (This)->lpVtbl -> FollowHyperlink(This,Address,SubAddress,NewWindow,AddHistory,ExtraInfo,Method,HeaderInfo) ) 

#define _Document_AddToFavorites(This)	\
    ( (This)->lpVtbl -> AddToFavorites(This) ) 

#define _Document_Reload(This)	\
    ( (This)->lpVtbl -> Reload(This) ) 

#define _Document_AutoSummarize(This,Length,Mode,UpdateProperties,prop)	\
    ( (This)->lpVtbl -> AutoSummarize(This,Length,Mode,UpdateProperties,prop) ) 

#define _Document_RemoveNumbers(This,NumberType)	\
    ( (This)->lpVtbl -> RemoveNumbers(This,NumberType) ) 

#define _Document_ConvertNumbersToText(This,NumberType)	\
    ( (This)->lpVtbl -> ConvertNumbersToText(This,NumberType) ) 

#define _Document_CountNumberedItems(This,NumberType,Level,prop)	\
    ( (This)->lpVtbl -> CountNumberedItems(This,NumberType,Level,prop) ) 

#define _Document_Post(This)	\
    ( (This)->lpVtbl -> Post(This) ) 

#define _Document_ToggleFormsDesign(This)	\
    ( (This)->lpVtbl -> ToggleFormsDesign(This) ) 

#define _Document_Compare2000(This,Name)	\
    ( (This)->lpVtbl -> Compare2000(This,Name) ) 

#define _Document_UpdateSummaryProperties(This)	\
    ( (This)->lpVtbl -> UpdateSummaryProperties(This) ) 

#define _Document_GetCrossReferenceItems(This,ReferenceType,prop)	\
    ( (This)->lpVtbl -> GetCrossReferenceItems(This,ReferenceType,prop) ) 

#define _Document_AutoFormat(This)	\
    ( (This)->lpVtbl -> AutoFormat(This) ) 

#define _Document_ViewCode(This)	\
    ( (This)->lpVtbl -> ViewCode(This) ) 

#define _Document_ViewPropertyBrowser(This)	\
    ( (This)->lpVtbl -> ViewPropertyBrowser(This) ) 

#define _Document_ForwardMailer(This)	\
    ( (This)->lpVtbl -> ForwardMailer(This) ) 

#define _Document_Reply(This)	\
    ( (This)->lpVtbl -> Reply(This) ) 

#define _Document_ReplyAll(This)	\
    ( (This)->lpVtbl -> ReplyAll(This) ) 

#define _Document_SendMailer(This,FileFormat,Priority)	\
    ( (This)->lpVtbl -> SendMailer(This,FileFormat,Priority) ) 

#define _Document_UndoClear(This)	\
    ( (This)->lpVtbl -> UndoClear(This) ) 

#define _Document_PresentIt(This)	\
    ( (This)->lpVtbl -> PresentIt(This) ) 

#define _Document_SendFax(This,Address,Subject)	\
    ( (This)->lpVtbl -> SendFax(This,Address,Subject) ) 

#define _Document_Merge2000(This,FileName)	\
    ( (This)->lpVtbl -> Merge2000(This,FileName) ) 

#define _Document_ClosePrintPreview(This)	\
    ( (This)->lpVtbl -> ClosePrintPreview(This) ) 

#define _Document_CheckConsistency(This)	\
    ( (This)->lpVtbl -> CheckConsistency(This) ) 

#define _Document_CreateLetterContent(This,DateFormat,IncludeHeaderFooter,PageDesign,LetterStyle,Letterhead,LetterheadLocation,LetterheadSize,RecipientName,RecipientAddress,Salutation,SalutationType,RecipientReference,MailingInstructions,AttentionLine,Subject,CCList,ReturnAddress,SenderName,Closing,SenderCompany,SenderJobTitle,SenderInitials,EnclosureNumber,InfoBlock,RecipientCode,RecipientGender,ReturnAddressShortForm,SenderCity,SenderCode,SenderGender,SenderReference,prop)	\
    ( (This)->lpVtbl -> CreateLetterContent(This,DateFormat,IncludeHeaderFooter,PageDesign,LetterStyle,Letterhead,LetterheadLocation,LetterheadSize,RecipientName,RecipientAddress,Salutation,SalutationType,RecipientReference,MailingInstructions,AttentionLine,Subject,CCList,ReturnAddress,SenderName,Closing,SenderCompany,SenderJobTitle,SenderInitials,EnclosureNumber,InfoBlock,RecipientCode,RecipientGender,ReturnAddressShortForm,SenderCity,SenderCode,SenderGender,SenderReference,prop) ) 

#define _Document_AcceptAllRevisions(This)	\
    ( (This)->lpVtbl -> AcceptAllRevisions(This) ) 

#define _Document_RejectAllRevisions(This)	\
    ( (This)->lpVtbl -> RejectAllRevisions(This) ) 

#define _Document_DetectLanguage(This)	\
    ( (This)->lpVtbl -> DetectLanguage(This) ) 

#define _Document_ApplyTheme(This,Name)	\
    ( (This)->lpVtbl -> ApplyTheme(This,Name) ) 

#define _Document_RemoveTheme(This)	\
    ( (This)->lpVtbl -> RemoveTheme(This) ) 

#define _Document_WebPagePreview(This)	\
    ( (This)->lpVtbl -> WebPagePreview(This) ) 

#define _Document_ReloadAs(This,Encoding)	\
    ( (This)->lpVtbl -> ReloadAs(This,Encoding) ) 

#define _Document_get_ActiveTheme(This,prop)	\
    ( (This)->lpVtbl -> get_ActiveTheme(This,prop) ) 

#define _Document_get_ActiveThemeDisplayName(This,prop)	\
    ( (This)->lpVtbl -> get_ActiveThemeDisplayName(This,prop) ) 

#define _Document_get_Email(This,prop)	\
    ( (This)->lpVtbl -> get_Email(This,prop) ) 

#define _Document_get_Scripts(This,prop)	\
    ( (This)->lpVtbl -> get_Scripts(This,prop) ) 

#define _Document_get_LanguageDetected(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageDetected(This,prop) ) 

#define _Document_put_LanguageDetected(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageDetected(This,prop) ) 

#define _Document_get_FarEastLineBreakLanguage(This,prop)	\
    ( (This)->lpVtbl -> get_FarEastLineBreakLanguage(This,prop) ) 

#define _Document_put_FarEastLineBreakLanguage(This,prop)	\
    ( (This)->lpVtbl -> put_FarEastLineBreakLanguage(This,prop) ) 

#define _Document_get_Frameset(This,prop)	\
    ( (This)->lpVtbl -> get_Frameset(This,prop) ) 

#define _Document_get_ClickAndTypeParagraphStyle(This,prop)	\
    ( (This)->lpVtbl -> get_ClickAndTypeParagraphStyle(This,prop) ) 

#define _Document_put_ClickAndTypeParagraphStyle(This,prop)	\
    ( (This)->lpVtbl -> put_ClickAndTypeParagraphStyle(This,prop) ) 

#define _Document_get_HTMLProject(This,prop)	\
    ( (This)->lpVtbl -> get_HTMLProject(This,prop) ) 

#define _Document_get_WebOptions(This,prop)	\
    ( (This)->lpVtbl -> get_WebOptions(This,prop) ) 

#define _Document_get_OpenEncoding(This,prop)	\
    ( (This)->lpVtbl -> get_OpenEncoding(This,prop) ) 

#define _Document_get_SaveEncoding(This,prop)	\
    ( (This)->lpVtbl -> get_SaveEncoding(This,prop) ) 

#define _Document_put_SaveEncoding(This,prop)	\
    ( (This)->lpVtbl -> put_SaveEncoding(This,prop) ) 

#define _Document_get_OptimizeForWord97(This,prop)	\
    ( (This)->lpVtbl -> get_OptimizeForWord97(This,prop) ) 

#define _Document_put_OptimizeForWord97(This,prop)	\
    ( (This)->lpVtbl -> put_OptimizeForWord97(This,prop) ) 

#define _Document_get_VBASigned(This,prop)	\
    ( (This)->lpVtbl -> get_VBASigned(This,prop) ) 

#define _Document_PrintOut2000(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,ActivePrinterMacGX,ManualDuplexPrint,PrintZoomColumn,PrintZoomRow,PrintZoomPaperWidth,PrintZoomPaperHeight)	\
    ( (This)->lpVtbl -> PrintOut2000(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,ActivePrinterMacGX,ManualDuplexPrint,PrintZoomColumn,PrintZoomRow,PrintZoomPaperWidth,PrintZoomPaperHeight) ) 

#define _Document_sblt(This,s)	\
    ( (This)->lpVtbl -> sblt(This,s) ) 

#define _Document_ConvertVietDoc(This,CodePageOrigin)	\
    ( (This)->lpVtbl -> ConvertVietDoc(This,CodePageOrigin) ) 

#define _Document_PrintOut(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,ActivePrinterMacGX,ManualDuplexPrint,PrintZoomColumn,PrintZoomRow,PrintZoomPaperWidth,PrintZoomPaperHeight)	\
    ( (This)->lpVtbl -> PrintOut(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,ActivePrinterMacGX,ManualDuplexPrint,PrintZoomColumn,PrintZoomRow,PrintZoomPaperWidth,PrintZoomPaperHeight) ) 

#define _Document_get_MailEnvelope(This,prop)	\
    ( (This)->lpVtbl -> get_MailEnvelope(This,prop) ) 

#define _Document_get_DisableFeatures(This,prop)	\
    ( (This)->lpVtbl -> get_DisableFeatures(This,prop) ) 

#define _Document_put_DisableFeatures(This,prop)	\
    ( (This)->lpVtbl -> put_DisableFeatures(This,prop) ) 

#define _Document_get_DoNotEmbedSystemFonts(This,prop)	\
    ( (This)->lpVtbl -> get_DoNotEmbedSystemFonts(This,prop) ) 

#define _Document_put_DoNotEmbedSystemFonts(This,prop)	\
    ( (This)->lpVtbl -> put_DoNotEmbedSystemFonts(This,prop) ) 

#define _Document_get_Signatures(This,prop)	\
    ( (This)->lpVtbl -> get_Signatures(This,prop) ) 

#define _Document_get_DefaultTargetFrame(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultTargetFrame(This,prop) ) 

#define _Document_put_DefaultTargetFrame(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultTargetFrame(This,prop) ) 

#define _Document_get_HTMLDivisions(This,prop)	\
    ( (This)->lpVtbl -> get_HTMLDivisions(This,prop) ) 

#define _Document_get_DisableFeaturesIntroducedAfter(This,prop)	\
    ( (This)->lpVtbl -> get_DisableFeaturesIntroducedAfter(This,prop) ) 

#define _Document_put_DisableFeaturesIntroducedAfter(This,prop)	\
    ( (This)->lpVtbl -> put_DisableFeaturesIntroducedAfter(This,prop) ) 

#define _Document_get_RemovePersonalInformation(This,prop)	\
    ( (This)->lpVtbl -> get_RemovePersonalInformation(This,prop) ) 

#define _Document_put_RemovePersonalInformation(This,prop)	\
    ( (This)->lpVtbl -> put_RemovePersonalInformation(This,prop) ) 

#define _Document_get_SmartTags(This,prop)	\
    ( (This)->lpVtbl -> get_SmartTags(This,prop) ) 

#define _Document_Compare2002(This,Name,AuthorName,CompareTarget,DetectFormatChanges,IgnoreAllComparisonWarnings,AddToRecentFiles)	\
    ( (This)->lpVtbl -> Compare2002(This,Name,AuthorName,CompareTarget,DetectFormatChanges,IgnoreAllComparisonWarnings,AddToRecentFiles) ) 

#define _Document_CheckIn(This,SaveChanges,Comments,MakePublic)	\
    ( (This)->lpVtbl -> CheckIn(This,SaveChanges,Comments,MakePublic) ) 

#define _Document_CanCheckin(This,prop)	\
    ( (This)->lpVtbl -> CanCheckin(This,prop) ) 

#define _Document_Merge(This,FileName,MergeTarget,DetectFormatChanges,UseFormattingFrom,AddToRecentFiles)	\
    ( (This)->lpVtbl -> Merge(This,FileName,MergeTarget,DetectFormatChanges,UseFormattingFrom,AddToRecentFiles) ) 

#define _Document_get_EmbedSmartTags(This,prop)	\
    ( (This)->lpVtbl -> get_EmbedSmartTags(This,prop) ) 

#define _Document_put_EmbedSmartTags(This,prop)	\
    ( (This)->lpVtbl -> put_EmbedSmartTags(This,prop) ) 

#define _Document_get_SmartTagsAsXMLProps(This,prop)	\
    ( (This)->lpVtbl -> get_SmartTagsAsXMLProps(This,prop) ) 

#define _Document_put_SmartTagsAsXMLProps(This,prop)	\
    ( (This)->lpVtbl -> put_SmartTagsAsXMLProps(This,prop) ) 

#define _Document_get_TextEncoding(This,prop)	\
    ( (This)->lpVtbl -> get_TextEncoding(This,prop) ) 

#define _Document_put_TextEncoding(This,prop)	\
    ( (This)->lpVtbl -> put_TextEncoding(This,prop) ) 

#define _Document_get_TextLineEnding(This,prop)	\
    ( (This)->lpVtbl -> get_TextLineEnding(This,prop) ) 

#define _Document_put_TextLineEnding(This,prop)	\
    ( (This)->lpVtbl -> put_TextLineEnding(This,prop) ) 

#define _Document_SendForReview(This,Recipients,Subject,ShowMessage,IncludeAttachment)	\
    ( (This)->lpVtbl -> SendForReview(This,Recipients,Subject,ShowMessage,IncludeAttachment) ) 

#define _Document_ReplyWithChanges(This,ShowMessage)	\
    ( (This)->lpVtbl -> ReplyWithChanges(This,ShowMessage) ) 

#define _Document_EndReview(This)	\
    ( (This)->lpVtbl -> EndReview(This) ) 

#define _Document_get_StyleSheets(This,prop)	\
    ( (This)->lpVtbl -> get_StyleSheets(This,prop) ) 

#define _Document_get_DefaultTableStyle(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultTableStyle(This,prop) ) 

#define _Document_get_PasswordEncryptionProvider(This,prop)	\
    ( (This)->lpVtbl -> get_PasswordEncryptionProvider(This,prop) ) 

#define _Document_get_PasswordEncryptionAlgorithm(This,prop)	\
    ( (This)->lpVtbl -> get_PasswordEncryptionAlgorithm(This,prop) ) 

#define _Document_get_PasswordEncryptionKeyLength(This,prop)	\
    ( (This)->lpVtbl -> get_PasswordEncryptionKeyLength(This,prop) ) 

#define _Document_get_PasswordEncryptionFileProperties(This,prop)	\
    ( (This)->lpVtbl -> get_PasswordEncryptionFileProperties(This,prop) ) 

#define _Document_SetPasswordEncryptionOptions(This,PasswordEncryptionProvider,PasswordEncryptionAlgorithm,PasswordEncryptionKeyLength,PasswordEncryptionFileProperties)	\
    ( (This)->lpVtbl -> SetPasswordEncryptionOptions(This,PasswordEncryptionProvider,PasswordEncryptionAlgorithm,PasswordEncryptionKeyLength,PasswordEncryptionFileProperties) ) 

#define _Document_RecheckSmartTags(This)	\
    ( (This)->lpVtbl -> RecheckSmartTags(This) ) 

#define _Document_RemoveSmartTags(This)	\
    ( (This)->lpVtbl -> RemoveSmartTags(This) ) 

#define _Document_SetDefaultTableStyle(This,Style,SetInTemplate)	\
    ( (This)->lpVtbl -> SetDefaultTableStyle(This,Style,SetInTemplate) ) 

#define _Document_DeleteAllComments(This)	\
    ( (This)->lpVtbl -> DeleteAllComments(This) ) 

#define _Document_AcceptAllRevisionsShown(This)	\
    ( (This)->lpVtbl -> AcceptAllRevisionsShown(This) ) 

#define _Document_RejectAllRevisionsShown(This)	\
    ( (This)->lpVtbl -> RejectAllRevisionsShown(This) ) 

#define _Document_DeleteAllCommentsShown(This)	\
    ( (This)->lpVtbl -> DeleteAllCommentsShown(This) ) 

#define _Document_ResetFormFields(This)	\
    ( (This)->lpVtbl -> ResetFormFields(This) ) 

#define _Document_SaveAs(This,FileName,FileFormat,LockComments,Password,AddToRecentFiles,WritePassword,ReadOnlyRecommended,EmbedTrueTypeFonts,SaveNativePictureFormat,SaveFormsData,SaveAsAOCELetter,Encoding,InsertLineBreaks,AllowSubstitutions,LineEnding,AddBiDiMarks)	\
    ( (This)->lpVtbl -> SaveAs(This,FileName,FileFormat,LockComments,Password,AddToRecentFiles,WritePassword,ReadOnlyRecommended,EmbedTrueTypeFonts,SaveNativePictureFormat,SaveFormsData,SaveAsAOCELetter,Encoding,InsertLineBreaks,AllowSubstitutions,LineEnding,AddBiDiMarks) ) 

#define _Document_get_EmbedLinguisticData(This,prop)	\
    ( (This)->lpVtbl -> get_EmbedLinguisticData(This,prop) ) 

#define _Document_put_EmbedLinguisticData(This,prop)	\
    ( (This)->lpVtbl -> put_EmbedLinguisticData(This,prop) ) 

#define _Document_get_FormattingShowFont(This,prop)	\
    ( (This)->lpVtbl -> get_FormattingShowFont(This,prop) ) 

#define _Document_put_FormattingShowFont(This,prop)	\
    ( (This)->lpVtbl -> put_FormattingShowFont(This,prop) ) 

#define _Document_get_FormattingShowClear(This,prop)	\
    ( (This)->lpVtbl -> get_FormattingShowClear(This,prop) ) 

#define _Document_put_FormattingShowClear(This,prop)	\
    ( (This)->lpVtbl -> put_FormattingShowClear(This,prop) ) 

#define _Document_get_FormattingShowParagraph(This,prop)	\
    ( (This)->lpVtbl -> get_FormattingShowParagraph(This,prop) ) 

#define _Document_put_FormattingShowParagraph(This,prop)	\
    ( (This)->lpVtbl -> put_FormattingShowParagraph(This,prop) ) 

#define _Document_get_FormattingShowNumbering(This,prop)	\
    ( (This)->lpVtbl -> get_FormattingShowNumbering(This,prop) ) 

#define _Document_put_FormattingShowNumbering(This,prop)	\
    ( (This)->lpVtbl -> put_FormattingShowNumbering(This,prop) ) 

#define _Document_get_FormattingShowFilter(This,prop)	\
    ( (This)->lpVtbl -> get_FormattingShowFilter(This,prop) ) 

#define _Document_put_FormattingShowFilter(This,prop)	\
    ( (This)->lpVtbl -> put_FormattingShowFilter(This,prop) ) 

#define _Document_CheckNewSmartTags(This)	\
    ( (This)->lpVtbl -> CheckNewSmartTags(This) ) 

#define _Document_get_Permission(This,prop)	\
    ( (This)->lpVtbl -> get_Permission(This,prop) ) 

#define _Document_get_XMLNodes(This,prop)	\
    ( (This)->lpVtbl -> get_XMLNodes(This,prop) ) 

#define _Document_get_XMLSchemaReferences(This,prop)	\
    ( (This)->lpVtbl -> get_XMLSchemaReferences(This,prop) ) 

#define _Document_get_SmartDocument(This,prop)	\
    ( (This)->lpVtbl -> get_SmartDocument(This,prop) ) 

#define _Document_get_SharedWorkspace(This,prop)	\
    ( (This)->lpVtbl -> get_SharedWorkspace(This,prop) ) 

#define _Document_get_Sync(This,prop)	\
    ( (This)->lpVtbl -> get_Sync(This,prop) ) 

#define _Document_get_EnforceStyle(This,prop)	\
    ( (This)->lpVtbl -> get_EnforceStyle(This,prop) ) 

#define _Document_put_EnforceStyle(This,prop)	\
    ( (This)->lpVtbl -> put_EnforceStyle(This,prop) ) 

#define _Document_get_AutoFormatOverride(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatOverride(This,prop) ) 

#define _Document_put_AutoFormatOverride(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatOverride(This,prop) ) 

#define _Document_get_XMLSaveDataOnly(This,prop)	\
    ( (This)->lpVtbl -> get_XMLSaveDataOnly(This,prop) ) 

#define _Document_put_XMLSaveDataOnly(This,prop)	\
    ( (This)->lpVtbl -> put_XMLSaveDataOnly(This,prop) ) 

#define _Document_get_XMLHideNamespaces(This,prop)	\
    ( (This)->lpVtbl -> get_XMLHideNamespaces(This,prop) ) 

#define _Document_put_XMLHideNamespaces(This,prop)	\
    ( (This)->lpVtbl -> put_XMLHideNamespaces(This,prop) ) 

#define _Document_get_XMLShowAdvancedErrors(This,prop)	\
    ( (This)->lpVtbl -> get_XMLShowAdvancedErrors(This,prop) ) 

#define _Document_put_XMLShowAdvancedErrors(This,prop)	\
    ( (This)->lpVtbl -> put_XMLShowAdvancedErrors(This,prop) ) 

#define _Document_get_XMLUseXSLTWhenSaving(This,prop)	\
    ( (This)->lpVtbl -> get_XMLUseXSLTWhenSaving(This,prop) ) 

#define _Document_put_XMLUseXSLTWhenSaving(This,prop)	\
    ( (This)->lpVtbl -> put_XMLUseXSLTWhenSaving(This,prop) ) 

#define _Document_get_XMLSaveThroughXSLT(This,prop)	\
    ( (This)->lpVtbl -> get_XMLSaveThroughXSLT(This,prop) ) 

#define _Document_put_XMLSaveThroughXSLT(This,prop)	\
    ( (This)->lpVtbl -> put_XMLSaveThroughXSLT(This,prop) ) 

#define _Document_get_DocumentLibraryVersions(This,prop)	\
    ( (This)->lpVtbl -> get_DocumentLibraryVersions(This,prop) ) 

#define _Document_get_ReadingModeLayoutFrozen(This,prop)	\
    ( (This)->lpVtbl -> get_ReadingModeLayoutFrozen(This,prop) ) 

#define _Document_put_ReadingModeLayoutFrozen(This,prop)	\
    ( (This)->lpVtbl -> put_ReadingModeLayoutFrozen(This,prop) ) 

#define _Document_get_RemoveDateAndTime(This,prop)	\
    ( (This)->lpVtbl -> get_RemoveDateAndTime(This,prop) ) 

#define _Document_put_RemoveDateAndTime(This,prop)	\
    ( (This)->lpVtbl -> put_RemoveDateAndTime(This,prop) ) 

#define _Document_SendFaxOverInternet(This,Recipients,Subject,ShowMessage)	\
    ( (This)->lpVtbl -> SendFaxOverInternet(This,Recipients,Subject,ShowMessage) ) 

#define _Document_TransformDocument(This,Path,DataOnly)	\
    ( (This)->lpVtbl -> TransformDocument(This,Path,DataOnly) ) 

#define _Document_Protect(This,Type,NoReset,Password,UseIRM,EnforceStyleLock)	\
    ( (This)->lpVtbl -> Protect(This,Type,NoReset,Password,UseIRM,EnforceStyleLock) ) 

#define _Document_SelectAllEditableRanges(This,EditorID)	\
    ( (This)->lpVtbl -> SelectAllEditableRanges(This,EditorID) ) 

#define _Document_DeleteAllEditableRanges(This,EditorID)	\
    ( (This)->lpVtbl -> DeleteAllEditableRanges(This,EditorID) ) 

#define _Document_DeleteAllInkAnnotations(This)	\
    ( (This)->lpVtbl -> DeleteAllInkAnnotations(This) ) 

#define _Document_AddDocumentWorkspaceHeader(This,RichFormat,Url,Title,Description,ID)	\
    ( (This)->lpVtbl -> AddDocumentWorkspaceHeader(This,RichFormat,Url,Title,Description,ID) ) 

#define _Document_RemoveDocumentWorkspaceHeader(This,ID)	\
    ( (This)->lpVtbl -> RemoveDocumentWorkspaceHeader(This,ID) ) 

#define _Document_Compare(This,Name,AuthorName,CompareTarget,DetectFormatChanges,IgnoreAllComparisonWarnings,AddToRecentFiles,RemovePersonalInformation,RemoveDateAndTime)	\
    ( (This)->lpVtbl -> Compare(This,Name,AuthorName,CompareTarget,DetectFormatChanges,IgnoreAllComparisonWarnings,AddToRecentFiles,RemovePersonalInformation,RemoveDateAndTime) ) 

#define _Document_RemoveLockedStyles(This)	\
    ( (This)->lpVtbl -> RemoveLockedStyles(This) ) 

#define _Document_get_ChildNodeSuggestions(This,prop)	\
    ( (This)->lpVtbl -> get_ChildNodeSuggestions(This,prop) ) 

#define _Document_SelectSingleNode(This,XPath,PrefixMapping,FastSearchSkippingTextNodes,prop)	\
    ( (This)->lpVtbl -> SelectSingleNode(This,XPath,PrefixMapping,FastSearchSkippingTextNodes,prop) ) 

#define _Document_SelectNodes(This,XPath,PrefixMapping,FastSearchSkippingTextNodes,prop)	\
    ( (This)->lpVtbl -> SelectNodes(This,XPath,PrefixMapping,FastSearchSkippingTextNodes,prop) ) 

#define _Document_get_XMLSchemaViolations(This,prop)	\
    ( (This)->lpVtbl -> get_XMLSchemaViolations(This,prop) ) 

#define _Document_get_ReadingLayoutSizeX(This,prop)	\
    ( (This)->lpVtbl -> get_ReadingLayoutSizeX(This,prop) ) 

#define _Document_put_ReadingLayoutSizeX(This,prop)	\
    ( (This)->lpVtbl -> put_ReadingLayoutSizeX(This,prop) ) 

#define _Document_get_ReadingLayoutSizeY(This,prop)	\
    ( (This)->lpVtbl -> get_ReadingLayoutSizeY(This,prop) ) 

#define _Document_put_ReadingLayoutSizeY(This,prop)	\
    ( (This)->lpVtbl -> put_ReadingLayoutSizeY(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_IUnknown_Proxy( 
    _Document * This,
    /* [retval][out] */ IUnknown **prop);


void __RPC_STUB _Document_get_IUnknown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_FormsDesign_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_FormsDesign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get__CodeName_Proxy( 
    _Document * This,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Document_get__CodeName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put__CodeName_Proxy( 
    _Document * This,
    /* [in] */ BSTR prop);


void __RPC_STUB _Document_put__CodeName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_CodeName_Proxy( 
    _Document * This,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Document_get_CodeName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_SnapToGrid_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_SnapToGrid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_SnapToGrid_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_SnapToGrid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_SnapToShapes_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_SnapToShapes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_SnapToShapes_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_SnapToShapes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_GridDistanceHorizontal_Proxy( 
    _Document * This,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Document_get_GridDistanceHorizontal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_GridDistanceHorizontal_Proxy( 
    _Document * This,
    /* [in] */ int prop);


void __RPC_STUB _Document_put_GridDistanceHorizontal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_GridDistanceVertical_Proxy( 
    _Document * This,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Document_get_GridDistanceVertical_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_GridDistanceVertical_Proxy( 
    _Document * This,
    /* [in] */ int prop);


void __RPC_STUB _Document_put_GridDistanceVertical_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_GridOriginHorizontal_Proxy( 
    _Document * This,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Document_get_GridOriginHorizontal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_GridOriginHorizontal_Proxy( 
    _Document * This,
    /* [in] */ int prop);


void __RPC_STUB _Document_put_GridOriginHorizontal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_GridOriginVertical_Proxy( 
    _Document * This,
    /* [retval][out] */ int *prop);


void __RPC_STUB _Document_get_GridOriginVertical_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_GridOriginVertical_Proxy( 
    _Document * This,
    /* [in] */ int prop);


void __RPC_STUB _Document_put_GridOriginVertical_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_GridSpaceBetweenHorizontalLines_Proxy( 
    _Document * This,
    /* [retval][out] */ long *prop);


void __RPC_STUB _Document_get_GridSpaceBetweenHorizontalLines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_GridSpaceBetweenHorizontalLines_Proxy( 
    _Document * This,
    /* [in] */ long prop);


void __RPC_STUB _Document_put_GridSpaceBetweenHorizontalLines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_GridSpaceBetweenVerticalLines_Proxy( 
    _Document * This,
    /* [retval][out] */ long *prop);


void __RPC_STUB _Document_get_GridSpaceBetweenVerticalLines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_GridSpaceBetweenVerticalLines_Proxy( 
    _Document * This,
    /* [in] */ long prop);


void __RPC_STUB _Document_put_GridSpaceBetweenVerticalLines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_GridOriginFromMargin_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_GridOriginFromMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_GridOriginFromMargin_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_GridOriginFromMargin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_KerningByAlgorithm_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_KerningByAlgorithm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_KerningByAlgorithm_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_KerningByAlgorithm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_JustificationMode_Proxy( 
    _Document * This,
    /* [retval][out] */ WdJustificationMode *prop);


void __RPC_STUB _Document_get_JustificationMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_JustificationMode_Proxy( 
    _Document * This,
    /* [in] */ WdJustificationMode prop);


void __RPC_STUB _Document_put_JustificationMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_FarEastLineBreakLevel_Proxy( 
    _Document * This,
    /* [retval][out] */ WdFarEastLineBreakLevel *prop);


void __RPC_STUB _Document_get_FarEastLineBreakLevel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_FarEastLineBreakLevel_Proxy( 
    _Document * This,
    /* [in] */ WdFarEastLineBreakLevel prop);


void __RPC_STUB _Document_put_FarEastLineBreakLevel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_NoLineBreakBefore_Proxy( 
    _Document * This,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Document_get_NoLineBreakBefore_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_NoLineBreakBefore_Proxy( 
    _Document * This,
    /* [in] */ BSTR prop);


void __RPC_STUB _Document_put_NoLineBreakBefore_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_NoLineBreakAfter_Proxy( 
    _Document * This,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Document_get_NoLineBreakAfter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_NoLineBreakAfter_Proxy( 
    _Document * This,
    /* [in] */ BSTR prop);


void __RPC_STUB _Document_put_NoLineBreakAfter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_TrackRevisions_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_TrackRevisions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_TrackRevisions_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_TrackRevisions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_PrintRevisions_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_PrintRevisions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_PrintRevisions_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_PrintRevisions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_ShowRevisions_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_ShowRevisions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_ShowRevisions_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_ShowRevisions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_Close_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *SaveChanges,
    /* [optional][in] */ VARIANT *OriginalFormat,
    /* [optional][in] */ VARIANT *RouteDocument);


void __RPC_STUB _Document_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _Document_SaveAs2000_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *FileName,
    /* [optional][in] */ VARIANT *FileFormat,
    /* [optional][in] */ VARIANT *LockComments,
    /* [optional][in] */ VARIANT *Password,
    /* [optional][in] */ VARIANT *AddToRecentFiles,
    /* [optional][in] */ VARIANT *WritePassword,
    /* [optional][in] */ VARIANT *ReadOnlyRecommended,
    /* [optional][in] */ VARIANT *EmbedTrueTypeFonts,
    /* [optional][in] */ VARIANT *SaveNativePictureFormat,
    /* [optional][in] */ VARIANT *SaveFormsData,
    /* [optional][in] */ VARIANT *SaveAsAOCELetter);


void __RPC_STUB _Document_SaveAs2000_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_Repaginate_Proxy( 
    _Document * This);


void __RPC_STUB _Document_Repaginate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_FitToPages_Proxy( 
    _Document * This);


void __RPC_STUB _Document_FitToPages_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_ManualHyphenation_Proxy( 
    _Document * This);


void __RPC_STUB _Document_ManualHyphenation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_Select_Proxy( 
    _Document * This);


void __RPC_STUB _Document_Select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_DataForm_Proxy( 
    _Document * This);


void __RPC_STUB _Document_DataForm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_Route_Proxy( 
    _Document * This);


void __RPC_STUB _Document_Route_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_Save_Proxy( 
    _Document * This);


void __RPC_STUB _Document_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _Document_PrintOutOld_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *Background,
    /* [optional][in] */ VARIANT *Append,
    /* [optional][in] */ VARIANT *Range,
    /* [optional][in] */ VARIANT *OutputFileName,
    /* [optional][in] */ VARIANT *From,
    /* [optional][in] */ VARIANT *To,
    /* [optional][in] */ VARIANT *Item,
    /* [optional][in] */ VARIANT *Copies,
    /* [optional][in] */ VARIANT *Pages,
    /* [optional][in] */ VARIANT *PageType,
    /* [optional][in] */ VARIANT *PrintToFile,
    /* [optional][in] */ VARIANT *Collate,
    /* [optional][in] */ VARIANT *ActivePrinterMacGX,
    /* [optional][in] */ VARIANT *ManualDuplexPrint);


void __RPC_STUB _Document_PrintOutOld_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_SendMail_Proxy( 
    _Document * This);


void __RPC_STUB _Document_SendMail_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_Range_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *Start,
    /* [optional][in] */ VARIANT *End,
    /* [retval][out] */ Range **prop);


void __RPC_STUB _Document_Range_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_RunAutoMacro_Proxy( 
    _Document * This,
    /* [in] */ WdAutoMacros Which);


void __RPC_STUB _Document_RunAutoMacro_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_Activate_Proxy( 
    _Document * This);


void __RPC_STUB _Document_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_PrintPreview_Proxy( 
    _Document * This);


void __RPC_STUB _Document_PrintPreview_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_GoTo_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *What,
    /* [optional][in] */ VARIANT *Which,
    /* [optional][in] */ VARIANT *Count,
    /* [optional][in] */ VARIANT *Name,
    /* [retval][out] */ Range **prop);


void __RPC_STUB _Document_GoTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_Undo_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *Times,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_Undo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_Redo_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *Times,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_Redo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_ComputeStatistics_Proxy( 
    _Document * This,
    /* [in] */ WdStatistic Statistic,
    /* [optional][in] */ VARIANT *IncludeFootnotesAndEndnotes,
    /* [retval][out] */ long *prop);


void __RPC_STUB _Document_ComputeStatistics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_MakeCompatibilityDefault_Proxy( 
    _Document * This);


void __RPC_STUB _Document_MakeCompatibilityDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _Document_Protect2002_Proxy( 
    _Document * This,
    /* [in] */ WdProtectionType Type,
    /* [optional][in] */ VARIANT *NoReset,
    /* [optional][in] */ VARIANT *Password);


void __RPC_STUB _Document_Protect2002_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_Unprotect_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *Password);


void __RPC_STUB _Document_Unprotect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_EditionOptions_Proxy( 
    _Document * This,
    /* [in] */ WdEditionType Type,
    /* [in] */ WdEditionOption Option,
    /* [in] */ BSTR Name,
    /* [optional][in] */ VARIANT *Format);


void __RPC_STUB _Document_EditionOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_RunLetterWizard_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *_LetterContent,
    /* [optional][in] */ VARIANT *WizardMode);


void __RPC_STUB _Document_RunLetterWizard_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_GetLetterContent_Proxy( 
    _Document * This,
    /* [retval][out] */ _LetterContent **prop);


void __RPC_STUB _Document_GetLetterContent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_SetLetterContent_Proxy( 
    _Document * This,
    /* [in] */ VARIANT *_LetterContent);


void __RPC_STUB _Document_SetLetterContent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_CopyStylesFromTemplate_Proxy( 
    _Document * This,
    /* [in] */ BSTR Template);


void __RPC_STUB _Document_CopyStylesFromTemplate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_UpdateStyles_Proxy( 
    _Document * This);


void __RPC_STUB _Document_UpdateStyles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_CheckGrammar_Proxy( 
    _Document * This);


void __RPC_STUB _Document_CheckGrammar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_CheckSpelling_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *CustomDictionary,
    /* [optional][in] */ VARIANT *IgnoreUppercase,
    /* [optional][in] */ VARIANT *AlwaysSuggest,
    /* [optional][in] */ VARIANT *CustomDictionary2,
    /* [optional][in] */ VARIANT *CustomDictionary3,
    /* [optional][in] */ VARIANT *CustomDictionary4,
    /* [optional][in] */ VARIANT *CustomDictionary5,
    /* [optional][in] */ VARIANT *CustomDictionary6,
    /* [optional][in] */ VARIANT *CustomDictionary7,
    /* [optional][in] */ VARIANT *CustomDictionary8,
    /* [optional][in] */ VARIANT *CustomDictionary9,
    /* [optional][in] */ VARIANT *CustomDictionary10);


void __RPC_STUB _Document_CheckSpelling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_FollowHyperlink_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *Address,
    /* [optional][in] */ VARIANT *SubAddress,
    /* [optional][in] */ VARIANT *NewWindow,
    /* [optional][in] */ VARIANT *AddHistory,
    /* [optional][in] */ VARIANT *ExtraInfo,
    /* [optional][in] */ VARIANT *Method,
    /* [optional][in] */ VARIANT *HeaderInfo);


void __RPC_STUB _Document_FollowHyperlink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_AddToFavorites_Proxy( 
    _Document * This);


void __RPC_STUB _Document_AddToFavorites_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_Reload_Proxy( 
    _Document * This);


void __RPC_STUB _Document_Reload_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_AutoSummarize_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *Length,
    /* [optional][in] */ VARIANT *Mode,
    /* [optional][in] */ VARIANT *UpdateProperties,
    /* [retval][out] */ Range **prop);


void __RPC_STUB _Document_AutoSummarize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_RemoveNumbers_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *NumberType);


void __RPC_STUB _Document_RemoveNumbers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_ConvertNumbersToText_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *NumberType);


void __RPC_STUB _Document_ConvertNumbersToText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_CountNumberedItems_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *NumberType,
    /* [optional][in] */ VARIANT *Level,
    /* [retval][out] */ long *prop);


void __RPC_STUB _Document_CountNumberedItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_Post_Proxy( 
    _Document * This);


void __RPC_STUB _Document_Post_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_ToggleFormsDesign_Proxy( 
    _Document * This);


void __RPC_STUB _Document_ToggleFormsDesign_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _Document_Compare2000_Proxy( 
    _Document * This,
    /* [in] */ BSTR Name);


void __RPC_STUB _Document_Compare2000_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_UpdateSummaryProperties_Proxy( 
    _Document * This);


void __RPC_STUB _Document_UpdateSummaryProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_GetCrossReferenceItems_Proxy( 
    _Document * This,
    /* [in] */ VARIANT *ReferenceType,
    /* [retval][out] */ VARIANT *prop);


void __RPC_STUB _Document_GetCrossReferenceItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_AutoFormat_Proxy( 
    _Document * This);


void __RPC_STUB _Document_AutoFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_ViewCode_Proxy( 
    _Document * This);


void __RPC_STUB _Document_ViewCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_ViewPropertyBrowser_Proxy( 
    _Document * This);


void __RPC_STUB _Document_ViewPropertyBrowser_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_ForwardMailer_Proxy( 
    _Document * This);


void __RPC_STUB _Document_ForwardMailer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_Reply_Proxy( 
    _Document * This);


void __RPC_STUB _Document_Reply_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_ReplyAll_Proxy( 
    _Document * This);


void __RPC_STUB _Document_ReplyAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_SendMailer_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *FileFormat,
    /* [optional][in] */ VARIANT *Priority);


void __RPC_STUB _Document_SendMailer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_UndoClear_Proxy( 
    _Document * This);


void __RPC_STUB _Document_UndoClear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_PresentIt_Proxy( 
    _Document * This);


void __RPC_STUB _Document_PresentIt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_SendFax_Proxy( 
    _Document * This,
    /* [in] */ BSTR Address,
    /* [optional][in] */ VARIANT *Subject);


void __RPC_STUB _Document_SendFax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _Document_Merge2000_Proxy( 
    _Document * This,
    /* [in] */ BSTR FileName);


void __RPC_STUB _Document_Merge2000_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_ClosePrintPreview_Proxy( 
    _Document * This);


void __RPC_STUB _Document_ClosePrintPreview_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_CheckConsistency_Proxy( 
    _Document * This);


void __RPC_STUB _Document_CheckConsistency_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_CreateLetterContent_Proxy( 
    _Document * This,
    /* [in] */ BSTR DateFormat,
    /* [in] */ VARIANT_BOOL IncludeHeaderFooter,
    /* [in] */ BSTR PageDesign,
    /* [in] */ WdLetterStyle LetterStyle,
    /* [in] */ VARIANT_BOOL Letterhead,
    /* [in] */ WdLetterheadLocation LetterheadLocation,
    /* [in] */ int LetterheadSize,
    /* [in] */ BSTR RecipientName,
    /* [in] */ BSTR RecipientAddress,
    /* [in] */ BSTR Salutation,
    /* [in] */ WdSalutationType SalutationType,
    /* [in] */ BSTR RecipientReference,
    /* [in] */ BSTR MailingInstructions,
    /* [in] */ BSTR AttentionLine,
    /* [in] */ BSTR Subject,
    /* [in] */ BSTR CCList,
    /* [in] */ BSTR ReturnAddress,
    /* [in] */ BSTR SenderName,
    /* [in] */ BSTR Closing,
    /* [in] */ BSTR SenderCompany,
    /* [in] */ BSTR SenderJobTitle,
    /* [in] */ BSTR SenderInitials,
    /* [in] */ long EnclosureNumber,
    /* [optional][in] */ VARIANT *InfoBlock,
    /* [optional][in] */ VARIANT *RecipientCode,
    /* [optional][in] */ VARIANT *RecipientGender,
    /* [optional][in] */ VARIANT *ReturnAddressShortForm,
    /* [optional][in] */ VARIANT *SenderCity,
    /* [optional][in] */ VARIANT *SenderCode,
    /* [optional][in] */ VARIANT *SenderGender,
    /* [optional][in] */ VARIANT *SenderReference,
    /* [retval][out] */ _LetterContent **prop);


void __RPC_STUB _Document_CreateLetterContent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_AcceptAllRevisions_Proxy( 
    _Document * This);


void __RPC_STUB _Document_AcceptAllRevisions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_RejectAllRevisions_Proxy( 
    _Document * This);


void __RPC_STUB _Document_RejectAllRevisions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_DetectLanguage_Proxy( 
    _Document * This);


void __RPC_STUB _Document_DetectLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_ApplyTheme_Proxy( 
    _Document * This,
    /* [in] */ BSTR Name);


void __RPC_STUB _Document_ApplyTheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_RemoveTheme_Proxy( 
    _Document * This);


void __RPC_STUB _Document_RemoveTheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_WebPagePreview_Proxy( 
    _Document * This);


void __RPC_STUB _Document_WebPagePreview_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_ReloadAs_Proxy( 
    _Document * This,
    /* [in] */ MsoEncoding Encoding);


void __RPC_STUB _Document_ReloadAs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_ActiveTheme_Proxy( 
    _Document * This,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Document_get_ActiveTheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_ActiveThemeDisplayName_Proxy( 
    _Document * This,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Document_get_ActiveThemeDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_Email_Proxy( 
    _Document * This,
    /* [retval][out] */ Email **prop);


void __RPC_STUB _Document_get_Email_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_Scripts_Proxy( 
    _Document * This,
    /* [retval][out] */ /* external definition not present */ Scripts **prop);


void __RPC_STUB _Document_get_Scripts_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_LanguageDetected_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_LanguageDetected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_LanguageDetected_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_LanguageDetected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_FarEastLineBreakLanguage_Proxy( 
    _Document * This,
    /* [retval][out] */ WdFarEastLineBreakLanguageID *prop);


void __RPC_STUB _Document_get_FarEastLineBreakLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_FarEastLineBreakLanguage_Proxy( 
    _Document * This,
    /* [in] */ WdFarEastLineBreakLanguageID prop);


void __RPC_STUB _Document_put_FarEastLineBreakLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_Frameset_Proxy( 
    _Document * This,
    /* [retval][out] */ Frameset **prop);


void __RPC_STUB _Document_get_Frameset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_ClickAndTypeParagraphStyle_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT *prop);


void __RPC_STUB _Document_get_ClickAndTypeParagraphStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_ClickAndTypeParagraphStyle_Proxy( 
    _Document * This,
    /* [in] */ VARIANT *prop);


void __RPC_STUB _Document_put_ClickAndTypeParagraphStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_HTMLProject_Proxy( 
    _Document * This,
    /* [retval][out] */ /* external definition not present */ HTMLProject **prop);


void __RPC_STUB _Document_get_HTMLProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_WebOptions_Proxy( 
    _Document * This,
    /* [retval][out] */ WebOptions **prop);


void __RPC_STUB _Document_get_WebOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_OpenEncoding_Proxy( 
    _Document * This,
    /* [retval][out] */ MsoEncoding *prop);


void __RPC_STUB _Document_get_OpenEncoding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_SaveEncoding_Proxy( 
    _Document * This,
    /* [retval][out] */ MsoEncoding *prop);


void __RPC_STUB _Document_get_SaveEncoding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_SaveEncoding_Proxy( 
    _Document * This,
    /* [in] */ MsoEncoding prop);


void __RPC_STUB _Document_put_SaveEncoding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_OptimizeForWord97_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_OptimizeForWord97_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_OptimizeForWord97_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_OptimizeForWord97_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_VBASigned_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_VBASigned_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _Document_PrintOut2000_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *Background,
    /* [optional][in] */ VARIANT *Append,
    /* [optional][in] */ VARIANT *Range,
    /* [optional][in] */ VARIANT *OutputFileName,
    /* [optional][in] */ VARIANT *From,
    /* [optional][in] */ VARIANT *To,
    /* [optional][in] */ VARIANT *Item,
    /* [optional][in] */ VARIANT *Copies,
    /* [optional][in] */ VARIANT *Pages,
    /* [optional][in] */ VARIANT *PageType,
    /* [optional][in] */ VARIANT *PrintToFile,
    /* [optional][in] */ VARIANT *Collate,
    /* [optional][in] */ VARIANT *ActivePrinterMacGX,
    /* [optional][in] */ VARIANT *ManualDuplexPrint,
    /* [optional][in] */ VARIANT *PrintZoomColumn,
    /* [optional][in] */ VARIANT *PrintZoomRow,
    /* [optional][in] */ VARIANT *PrintZoomPaperWidth,
    /* [optional][in] */ VARIANT *PrintZoomPaperHeight);


void __RPC_STUB _Document_PrintOut2000_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _Document_sblt_Proxy( 
    _Document * This,
    /* [in] */ BSTR s);


void __RPC_STUB _Document_sblt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_ConvertVietDoc_Proxy( 
    _Document * This,
    /* [in] */ long CodePageOrigin);


void __RPC_STUB _Document_ConvertVietDoc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_PrintOut_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *Background,
    /* [optional][in] */ VARIANT *Append,
    /* [optional][in] */ VARIANT *Range,
    /* [optional][in] */ VARIANT *OutputFileName,
    /* [optional][in] */ VARIANT *From,
    /* [optional][in] */ VARIANT *To,
    /* [optional][in] */ VARIANT *Item,
    /* [optional][in] */ VARIANT *Copies,
    /* [optional][in] */ VARIANT *Pages,
    /* [optional][in] */ VARIANT *PageType,
    /* [optional][in] */ VARIANT *PrintToFile,
    /* [optional][in] */ VARIANT *Collate,
    /* [optional][in] */ VARIANT *ActivePrinterMacGX,
    /* [optional][in] */ VARIANT *ManualDuplexPrint,
    /* [optional][in] */ VARIANT *PrintZoomColumn,
    /* [optional][in] */ VARIANT *PrintZoomRow,
    /* [optional][in] */ VARIANT *PrintZoomPaperWidth,
    /* [optional][in] */ VARIANT *PrintZoomPaperHeight);


void __RPC_STUB _Document_PrintOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_MailEnvelope_Proxy( 
    _Document * This,
    /* [retval][out] */ /* external definition not present */ MsoEnvelope **prop);


void __RPC_STUB _Document_get_MailEnvelope_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_DisableFeatures_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_DisableFeatures_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_DisableFeatures_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_DisableFeatures_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_DoNotEmbedSystemFonts_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_DoNotEmbedSystemFonts_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_DoNotEmbedSystemFonts_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_DoNotEmbedSystemFonts_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_Signatures_Proxy( 
    _Document * This,
    /* [retval][out] */ /* external definition not present */ SignatureSet **prop);


void __RPC_STUB _Document_get_Signatures_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_DefaultTargetFrame_Proxy( 
    _Document * This,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Document_get_DefaultTargetFrame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_DefaultTargetFrame_Proxy( 
    _Document * This,
    /* [in] */ BSTR prop);


void __RPC_STUB _Document_put_DefaultTargetFrame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_HTMLDivisions_Proxy( 
    _Document * This,
    /* [retval][out] */ HTMLDivisions **prop);


void __RPC_STUB _Document_get_HTMLDivisions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_DisableFeaturesIntroducedAfter_Proxy( 
    _Document * This,
    /* [retval][out] */ WdDisableFeaturesIntroducedAfter *prop);


void __RPC_STUB _Document_get_DisableFeaturesIntroducedAfter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_DisableFeaturesIntroducedAfter_Proxy( 
    _Document * This,
    /* [in] */ WdDisableFeaturesIntroducedAfter prop);


void __RPC_STUB _Document_put_DisableFeaturesIntroducedAfter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_RemovePersonalInformation_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_RemovePersonalInformation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_RemovePersonalInformation_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_RemovePersonalInformation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_SmartTags_Proxy( 
    _Document * This,
    /* [retval][out] */ SmartTags **prop);


void __RPC_STUB _Document_get_SmartTags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _Document_Compare2002_Proxy( 
    _Document * This,
    /* [in] */ BSTR Name,
    /* [optional][in] */ VARIANT *AuthorName,
    /* [optional][in] */ VARIANT *CompareTarget,
    /* [optional][in] */ VARIANT *DetectFormatChanges,
    /* [optional][in] */ VARIANT *IgnoreAllComparisonWarnings,
    /* [optional][in] */ VARIANT *AddToRecentFiles);


void __RPC_STUB _Document_Compare2002_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_CheckIn_Proxy( 
    _Document * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL SaveChanges,
    /* [optional][in] */ VARIANT *Comments,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL MakePublic);


void __RPC_STUB _Document_CheckIn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_CanCheckin_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_CanCheckin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_Merge_Proxy( 
    _Document * This,
    /* [in] */ BSTR FileName,
    /* [optional][in] */ VARIANT *MergeTarget,
    /* [optional][in] */ VARIANT *DetectFormatChanges,
    /* [optional][in] */ VARIANT *UseFormattingFrom,
    /* [optional][in] */ VARIANT *AddToRecentFiles);


void __RPC_STUB _Document_Merge_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_EmbedSmartTags_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_EmbedSmartTags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_EmbedSmartTags_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_EmbedSmartTags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_SmartTagsAsXMLProps_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_SmartTagsAsXMLProps_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_SmartTagsAsXMLProps_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_SmartTagsAsXMLProps_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_TextEncoding_Proxy( 
    _Document * This,
    /* [retval][out] */ MsoEncoding *prop);


void __RPC_STUB _Document_get_TextEncoding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_TextEncoding_Proxy( 
    _Document * This,
    /* [in] */ MsoEncoding prop);


void __RPC_STUB _Document_put_TextEncoding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_TextLineEnding_Proxy( 
    _Document * This,
    /* [retval][out] */ WdLineEndingType *prop);


void __RPC_STUB _Document_get_TextLineEnding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_TextLineEnding_Proxy( 
    _Document * This,
    /* [in] */ WdLineEndingType prop);


void __RPC_STUB _Document_put_TextLineEnding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_SendForReview_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *Recipients,
    /* [optional][in] */ VARIANT *Subject,
    /* [optional][in] */ VARIANT *ShowMessage,
    /* [optional][in] */ VARIANT *IncludeAttachment);


void __RPC_STUB _Document_SendForReview_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_ReplyWithChanges_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *ShowMessage);


void __RPC_STUB _Document_ReplyWithChanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_EndReview_Proxy( 
    _Document * This);


void __RPC_STUB _Document_EndReview_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_StyleSheets_Proxy( 
    _Document * This,
    /* [retval][out] */ StyleSheets **prop);


void __RPC_STUB _Document_get_StyleSheets_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_DefaultTableStyle_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT *prop);


void __RPC_STUB _Document_get_DefaultTableStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_PasswordEncryptionProvider_Proxy( 
    _Document * This,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Document_get_PasswordEncryptionProvider_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_PasswordEncryptionAlgorithm_Proxy( 
    _Document * This,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Document_get_PasswordEncryptionAlgorithm_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_PasswordEncryptionKeyLength_Proxy( 
    _Document * This,
    /* [retval][out] */ long *prop);


void __RPC_STUB _Document_get_PasswordEncryptionKeyLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_PasswordEncryptionFileProperties_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_PasswordEncryptionFileProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_SetPasswordEncryptionOptions_Proxy( 
    _Document * This,
    /* [in] */ BSTR PasswordEncryptionProvider,
    /* [in] */ BSTR PasswordEncryptionAlgorithm,
    /* [in] */ long PasswordEncryptionKeyLength,
    /* [optional][in] */ VARIANT *PasswordEncryptionFileProperties);


void __RPC_STUB _Document_SetPasswordEncryptionOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_RecheckSmartTags_Proxy( 
    _Document * This);


void __RPC_STUB _Document_RecheckSmartTags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_RemoveSmartTags_Proxy( 
    _Document * This);


void __RPC_STUB _Document_RemoveSmartTags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_SetDefaultTableStyle_Proxy( 
    _Document * This,
    /* [in] */ VARIANT *Style,
    /* [in] */ VARIANT_BOOL SetInTemplate);


void __RPC_STUB _Document_SetDefaultTableStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_DeleteAllComments_Proxy( 
    _Document * This);


void __RPC_STUB _Document_DeleteAllComments_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_AcceptAllRevisionsShown_Proxy( 
    _Document * This);


void __RPC_STUB _Document_AcceptAllRevisionsShown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_RejectAllRevisionsShown_Proxy( 
    _Document * This);


void __RPC_STUB _Document_RejectAllRevisionsShown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_DeleteAllCommentsShown_Proxy( 
    _Document * This);


void __RPC_STUB _Document_DeleteAllCommentsShown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_ResetFormFields_Proxy( 
    _Document * This);


void __RPC_STUB _Document_ResetFormFields_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_SaveAs_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *FileName,
    /* [optional][in] */ VARIANT *FileFormat,
    /* [optional][in] */ VARIANT *LockComments,
    /* [optional][in] */ VARIANT *Password,
    /* [optional][in] */ VARIANT *AddToRecentFiles,
    /* [optional][in] */ VARIANT *WritePassword,
    /* [optional][in] */ VARIANT *ReadOnlyRecommended,
    /* [optional][in] */ VARIANT *EmbedTrueTypeFonts,
    /* [optional][in] */ VARIANT *SaveNativePictureFormat,
    /* [optional][in] */ VARIANT *SaveFormsData,
    /* [optional][in] */ VARIANT *SaveAsAOCELetter,
    /* [optional][in] */ VARIANT *Encoding,
    /* [optional][in] */ VARIANT *InsertLineBreaks,
    /* [optional][in] */ VARIANT *AllowSubstitutions,
    /* [optional][in] */ VARIANT *LineEnding,
    /* [optional][in] */ VARIANT *AddBiDiMarks);


void __RPC_STUB _Document_SaveAs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_EmbedLinguisticData_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_EmbedLinguisticData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_EmbedLinguisticData_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_EmbedLinguisticData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_FormattingShowFont_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_FormattingShowFont_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_FormattingShowFont_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_FormattingShowFont_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_FormattingShowClear_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_FormattingShowClear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_FormattingShowClear_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_FormattingShowClear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_FormattingShowParagraph_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_FormattingShowParagraph_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_FormattingShowParagraph_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_FormattingShowParagraph_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_FormattingShowNumbering_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_FormattingShowNumbering_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_FormattingShowNumbering_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_FormattingShowNumbering_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_FormattingShowFilter_Proxy( 
    _Document * This,
    /* [retval][out] */ WdShowFilter *prop);


void __RPC_STUB _Document_get_FormattingShowFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_FormattingShowFilter_Proxy( 
    _Document * This,
    /* [in] */ WdShowFilter prop);


void __RPC_STUB _Document_put_FormattingShowFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_CheckNewSmartTags_Proxy( 
    _Document * This);


void __RPC_STUB _Document_CheckNewSmartTags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_Permission_Proxy( 
    _Document * This,
    /* [retval][out] */ /* external definition not present */ Permission **prop);


void __RPC_STUB _Document_get_Permission_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_XMLNodes_Proxy( 
    _Document * This,
    /* [retval][out] */ XMLNodes **prop);


void __RPC_STUB _Document_get_XMLNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_XMLSchemaReferences_Proxy( 
    _Document * This,
    /* [retval][out] */ XMLSchemaReferences **prop);


void __RPC_STUB _Document_get_XMLSchemaReferences_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_SmartDocument_Proxy( 
    _Document * This,
    /* [retval][out] */ /* external definition not present */ SmartDocument **prop);


void __RPC_STUB _Document_get_SmartDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_SharedWorkspace_Proxy( 
    _Document * This,
    /* [retval][out] */ /* external definition not present */ SharedWorkspace **prop);


void __RPC_STUB _Document_get_SharedWorkspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_Sync_Proxy( 
    _Document * This,
    /* [retval][out] */ /* external definition not present */ Sync **prop);


void __RPC_STUB _Document_get_Sync_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_EnforceStyle_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_EnforceStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_EnforceStyle_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_EnforceStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_AutoFormatOverride_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_AutoFormatOverride_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_AutoFormatOverride_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_AutoFormatOverride_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_XMLSaveDataOnly_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_XMLSaveDataOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_XMLSaveDataOnly_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_XMLSaveDataOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_XMLHideNamespaces_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_XMLHideNamespaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_XMLHideNamespaces_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_XMLHideNamespaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_XMLShowAdvancedErrors_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_XMLShowAdvancedErrors_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_XMLShowAdvancedErrors_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_XMLShowAdvancedErrors_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_XMLUseXSLTWhenSaving_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_XMLUseXSLTWhenSaving_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_XMLUseXSLTWhenSaving_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_XMLUseXSLTWhenSaving_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_XMLSaveThroughXSLT_Proxy( 
    _Document * This,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB _Document_get_XMLSaveThroughXSLT_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_XMLSaveThroughXSLT_Proxy( 
    _Document * This,
    /* [in] */ BSTR prop);


void __RPC_STUB _Document_put_XMLSaveThroughXSLT_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_DocumentLibraryVersions_Proxy( 
    _Document * This,
    /* [retval][out] */ /* external definition not present */ DocumentLibraryVersions **prop);


void __RPC_STUB _Document_get_DocumentLibraryVersions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_ReadingModeLayoutFrozen_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_ReadingModeLayoutFrozen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_ReadingModeLayoutFrozen_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_ReadingModeLayoutFrozen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_RemoveDateAndTime_Proxy( 
    _Document * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB _Document_get_RemoveDateAndTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_RemoveDateAndTime_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB _Document_put_RemoveDateAndTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_SendFaxOverInternet_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *Recipients,
    /* [optional][in] */ VARIANT *Subject,
    /* [optional][in] */ VARIANT *ShowMessage);


void __RPC_STUB _Document_SendFaxOverInternet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_TransformDocument_Proxy( 
    _Document * This,
    /* [in] */ BSTR Path,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL DataOnly);


void __RPC_STUB _Document_TransformDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_Protect_Proxy( 
    _Document * This,
    /* [in] */ WdProtectionType Type,
    /* [optional][in] */ VARIANT *NoReset,
    /* [optional][in] */ VARIANT *Password,
    /* [optional][in] */ VARIANT *UseIRM,
    /* [optional][in] */ VARIANT *EnforceStyleLock);


void __RPC_STUB _Document_Protect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_SelectAllEditableRanges_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *EditorID);


void __RPC_STUB _Document_SelectAllEditableRanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_DeleteAllEditableRanges_Proxy( 
    _Document * This,
    /* [optional][in] */ VARIANT *EditorID);


void __RPC_STUB _Document_DeleteAllEditableRanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_DeleteAllInkAnnotations_Proxy( 
    _Document * This);


void __RPC_STUB _Document_DeleteAllInkAnnotations_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _Document_AddDocumentWorkspaceHeader_Proxy( 
    _Document * This,
    /* [in] */ VARIANT_BOOL RichFormat,
    /* [in] */ BSTR Url,
    /* [in] */ BSTR Title,
    /* [in] */ BSTR Description,
    /* [in] */ BSTR ID);


void __RPC_STUB _Document_AddDocumentWorkspaceHeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _Document_RemoveDocumentWorkspaceHeader_Proxy( 
    _Document * This,
    /* [in] */ BSTR ID);


void __RPC_STUB _Document_RemoveDocumentWorkspaceHeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_Compare_Proxy( 
    _Document * This,
    /* [in] */ BSTR Name,
    /* [optional][in] */ VARIANT *AuthorName,
    /* [optional][in] */ VARIANT *CompareTarget,
    /* [optional][in] */ VARIANT *DetectFormatChanges,
    /* [optional][in] */ VARIANT *IgnoreAllComparisonWarnings,
    /* [optional][in] */ VARIANT *AddToRecentFiles,
    /* [optional][in] */ VARIANT *RemovePersonalInformation,
    /* [optional][in] */ VARIANT *RemoveDateAndTime);


void __RPC_STUB _Document_Compare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_RemoveLockedStyles_Proxy( 
    _Document * This);


void __RPC_STUB _Document_RemoveLockedStyles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_ChildNodeSuggestions_Proxy( 
    _Document * This,
    /* [retval][out] */ XMLChildNodeSuggestions **prop);


void __RPC_STUB _Document_get_ChildNodeSuggestions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_SelectSingleNode_Proxy( 
    _Document * This,
    /* [in] */ BSTR XPath,
    /* [defaultvalue][optional][in] */ BSTR PrefixMapping,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL FastSearchSkippingTextNodes,
    /* [retval][out] */ XMLNode **prop);


void __RPC_STUB _Document_SelectSingleNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Document_SelectNodes_Proxy( 
    _Document * This,
    /* [in] */ BSTR XPath,
    /* [defaultvalue][optional][in] */ BSTR PrefixMapping,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL FastSearchSkippingTextNodes,
    /* [retval][out] */ XMLNodes **prop);


void __RPC_STUB _Document_SelectNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_XMLSchemaViolations_Proxy( 
    _Document * This,
    /* [retval][out] */ XMLNodes **prop);


void __RPC_STUB _Document_get_XMLSchemaViolations_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_ReadingLayoutSizeX_Proxy( 
    _Document * This,
    /* [retval][out] */ long *prop);


void __RPC_STUB _Document_get_ReadingLayoutSizeX_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_ReadingLayoutSizeX_Proxy( 
    _Document * This,
    /* [in] */ long prop);


void __RPC_STUB _Document_put_ReadingLayoutSizeX_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Document_get_ReadingLayoutSizeY_Proxy( 
    _Document * This,
    /* [retval][out] */ long *prop);


void __RPC_STUB _Document_get_ReadingLayoutSizeY_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Document_put_ReadingLayoutSizeY_Proxy( 
    _Document * This,
    /* [in] */ long prop);


void __RPC_STUB _Document_put_ReadingLayoutSizeY_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___Document_INTERFACE_DEFINED__ */


#ifndef __Template_INTERFACE_DEFINED__
#define __Template_INTERFACE_DEFINED__

/* interface Template */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Template;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002096A-0000-0000-C000-000000000046")
    Template : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoTextEntries( 
            /* [retval][out] */ AutoTextEntries **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageID( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageID( 
            /* [in] */ WdLanguageID prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Saved( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Saved( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdTemplateType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BuiltInDocumentProperties( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomDocumentProperties( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListTemplates( 
            /* [retval][out] */ ListTemplates **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageIDFarEast( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageIDFarEast( 
            /* [in] */ WdLanguageID prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IUnknown( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KerningByAlgorithm( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_KerningByAlgorithm( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_JustificationMode( 
            /* [retval][out] */ WdJustificationMode *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_JustificationMode( 
            /* [in] */ WdJustificationMode prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FarEastLineBreakLevel( 
            /* [retval][out] */ WdFarEastLineBreakLevel *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FarEastLineBreakLevel( 
            /* [in] */ WdFarEastLineBreakLevel prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoLineBreakBefore( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoLineBreakBefore( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoLineBreakAfter( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoLineBreakAfter( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenAsDocument( 
            /* [retval][out] */ _Document **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoProofing( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoProofing( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FarEastLineBreakLanguage( 
            /* [retval][out] */ WdFarEastLineBreakLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FarEastLineBreakLanguage( 
            /* [in] */ WdFarEastLineBreakLanguageID prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TemplateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Template * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Template * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Template * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Template * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Template * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Template * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Template * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Template * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Template * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Template * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Template * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            Template * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoTextEntries )( 
            Template * This,
            /* [retval][out] */ AutoTextEntries **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageID )( 
            Template * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageID )( 
            Template * This,
            /* [in] */ WdLanguageID prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Saved )( 
            Template * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Saved )( 
            Template * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Template * This,
            /* [retval][out] */ WdTemplateType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            Template * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BuiltInDocumentProperties )( 
            Template * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomDocumentProperties )( 
            Template * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListTemplates )( 
            Template * This,
            /* [retval][out] */ ListTemplates **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageIDFarEast )( 
            Template * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageIDFarEast )( 
            Template * This,
            /* [in] */ WdLanguageID prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IUnknown )( 
            Template * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KerningByAlgorithm )( 
            Template * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_KerningByAlgorithm )( 
            Template * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_JustificationMode )( 
            Template * This,
            /* [retval][out] */ WdJustificationMode *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_JustificationMode )( 
            Template * This,
            /* [in] */ WdJustificationMode prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FarEastLineBreakLevel )( 
            Template * This,
            /* [retval][out] */ WdFarEastLineBreakLevel *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FarEastLineBreakLevel )( 
            Template * This,
            /* [in] */ WdFarEastLineBreakLevel prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoLineBreakBefore )( 
            Template * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoLineBreakBefore )( 
            Template * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoLineBreakAfter )( 
            Template * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoLineBreakAfter )( 
            Template * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenAsDocument )( 
            Template * This,
            /* [retval][out] */ _Document **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            Template * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoProofing )( 
            Template * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoProofing )( 
            Template * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FarEastLineBreakLanguage )( 
            Template * This,
            /* [retval][out] */ WdFarEastLineBreakLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FarEastLineBreakLanguage )( 
            Template * This,
            /* [in] */ WdFarEastLineBreakLanguageID prop);
        
        END_INTERFACE
    } TemplateVtbl;

    interface Template
    {
        CONST_VTBL struct TemplateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Template_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Template_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Template_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Template_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Template_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Template_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Template_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Template_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define Template_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Template_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Template_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Template_get_Path(This,prop)	\
    ( (This)->lpVtbl -> get_Path(This,prop) ) 

#define Template_get_AutoTextEntries(This,prop)	\
    ( (This)->lpVtbl -> get_AutoTextEntries(This,prop) ) 

#define Template_get_LanguageID(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageID(This,prop) ) 

#define Template_put_LanguageID(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageID(This,prop) ) 

#define Template_get_Saved(This,prop)	\
    ( (This)->lpVtbl -> get_Saved(This,prop) ) 

#define Template_put_Saved(This,prop)	\
    ( (This)->lpVtbl -> put_Saved(This,prop) ) 

#define Template_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define Template_get_FullName(This,prop)	\
    ( (This)->lpVtbl -> get_FullName(This,prop) ) 

#define Template_get_BuiltInDocumentProperties(This,prop)	\
    ( (This)->lpVtbl -> get_BuiltInDocumentProperties(This,prop) ) 

#define Template_get_CustomDocumentProperties(This,prop)	\
    ( (This)->lpVtbl -> get_CustomDocumentProperties(This,prop) ) 

#define Template_get_ListTemplates(This,prop)	\
    ( (This)->lpVtbl -> get_ListTemplates(This,prop) ) 

#define Template_get_LanguageIDFarEast(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageIDFarEast(This,prop) ) 

#define Template_put_LanguageIDFarEast(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageIDFarEast(This,prop) ) 

#define Template_get_IUnknown(This,prop)	\
    ( (This)->lpVtbl -> get_IUnknown(This,prop) ) 

#define Template_get_KerningByAlgorithm(This,prop)	\
    ( (This)->lpVtbl -> get_KerningByAlgorithm(This,prop) ) 

#define Template_put_KerningByAlgorithm(This,prop)	\
    ( (This)->lpVtbl -> put_KerningByAlgorithm(This,prop) ) 

#define Template_get_JustificationMode(This,prop)	\
    ( (This)->lpVtbl -> get_JustificationMode(This,prop) ) 

#define Template_put_JustificationMode(This,prop)	\
    ( (This)->lpVtbl -> put_JustificationMode(This,prop) ) 

#define Template_get_FarEastLineBreakLevel(This,prop)	\
    ( (This)->lpVtbl -> get_FarEastLineBreakLevel(This,prop) ) 

#define Template_put_FarEastLineBreakLevel(This,prop)	\
    ( (This)->lpVtbl -> put_FarEastLineBreakLevel(This,prop) ) 

#define Template_get_NoLineBreakBefore(This,prop)	\
    ( (This)->lpVtbl -> get_NoLineBreakBefore(This,prop) ) 

#define Template_put_NoLineBreakBefore(This,prop)	\
    ( (This)->lpVtbl -> put_NoLineBreakBefore(This,prop) ) 

#define Template_get_NoLineBreakAfter(This,prop)	\
    ( (This)->lpVtbl -> get_NoLineBreakAfter(This,prop) ) 

#define Template_put_NoLineBreakAfter(This,prop)	\
    ( (This)->lpVtbl -> put_NoLineBreakAfter(This,prop) ) 

#define Template_OpenAsDocument(This,prop)	\
    ( (This)->lpVtbl -> OpenAsDocument(This,prop) ) 

#define Template_Save(This)	\
    ( (This)->lpVtbl -> Save(This) ) 

#define Template_get_NoProofing(This,prop)	\
    ( (This)->lpVtbl -> get_NoProofing(This,prop) ) 

#define Template_put_NoProofing(This,prop)	\
    ( (This)->lpVtbl -> put_NoProofing(This,prop) ) 

#define Template_get_FarEastLineBreakLanguage(This,prop)	\
    ( (This)->lpVtbl -> get_FarEastLineBreakLanguage(This,prop) ) 

#define Template_put_FarEastLineBreakLanguage(This,prop)	\
    ( (This)->lpVtbl -> put_FarEastLineBreakLanguage(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Template_INTERFACE_DEFINED__ */


#ifndef __Templates_INTERFACE_DEFINED__
#define __Templates_INTERFACE_DEFINED__

/* interface Templates */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Templates;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209A2-0000-0000-C000-000000000046")
    Templates : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Template **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TemplatesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Templates * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Templates * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Templates * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Templates * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Templates * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Templates * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Templates * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Templates * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Templates * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Templates * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Templates * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Templates * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Templates * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Template **prop);
        
        END_INTERFACE
    } TemplatesVtbl;

    interface Templates
    {
        CONST_VTBL struct TemplatesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Templates_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Templates_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Templates_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Templates_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Templates_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Templates_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Templates_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Templates_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Templates_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Templates_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Templates_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Templates_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Templates_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Templates_INTERFACE_DEFINED__ */


#ifndef __RoutingSlip_INTERFACE_DEFINED__
#define __RoutingSlip_INTERFACE_DEFINED__

/* interface RoutingSlip */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_RoutingSlip;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020969-0000-0000-C000-000000000046")
    RoutingSlip : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Subject( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Subject( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Message( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Message( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Delivery( 
            /* [retval][out] */ WdRoutingSlipDelivery *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Delivery( 
            /* [in] */ WdRoutingSlipDelivery prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TrackStatus( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TrackStatus( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Protect( 
            /* [retval][out] */ WdProtectionType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Protect( 
            /* [in] */ WdProtectionType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReturnWhenDone( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReturnWhenDone( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Status( 
            /* [retval][out] */ WdRoutingSlipStatus *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Recipients( 
            /* [optional][in] */ VARIANT *Index,
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddRecipient( 
            /* [in] */ BSTR Recipient) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RoutingSlipVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            RoutingSlip * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            RoutingSlip * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            RoutingSlip * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            RoutingSlip * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            RoutingSlip * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            RoutingSlip * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            RoutingSlip * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            RoutingSlip * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            RoutingSlip * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            RoutingSlip * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Subject )( 
            RoutingSlip * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Subject )( 
            RoutingSlip * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Message )( 
            RoutingSlip * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Message )( 
            RoutingSlip * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Delivery )( 
            RoutingSlip * This,
            /* [retval][out] */ WdRoutingSlipDelivery *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Delivery )( 
            RoutingSlip * This,
            /* [in] */ WdRoutingSlipDelivery prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrackStatus )( 
            RoutingSlip * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrackStatus )( 
            RoutingSlip * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Protect )( 
            RoutingSlip * This,
            /* [retval][out] */ WdProtectionType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Protect )( 
            RoutingSlip * This,
            /* [in] */ WdProtectionType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReturnWhenDone )( 
            RoutingSlip * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReturnWhenDone )( 
            RoutingSlip * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Status )( 
            RoutingSlip * This,
            /* [retval][out] */ WdRoutingSlipStatus *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Recipients )( 
            RoutingSlip * This,
            /* [optional][in] */ VARIANT *Index,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            RoutingSlip * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddRecipient )( 
            RoutingSlip * This,
            /* [in] */ BSTR Recipient);
        
        END_INTERFACE
    } RoutingSlipVtbl;

    interface RoutingSlip
    {
        CONST_VTBL struct RoutingSlipVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define RoutingSlip_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define RoutingSlip_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define RoutingSlip_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define RoutingSlip_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define RoutingSlip_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define RoutingSlip_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define RoutingSlip_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define RoutingSlip_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define RoutingSlip_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define RoutingSlip_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define RoutingSlip_get_Subject(This,prop)	\
    ( (This)->lpVtbl -> get_Subject(This,prop) ) 

#define RoutingSlip_put_Subject(This,prop)	\
    ( (This)->lpVtbl -> put_Subject(This,prop) ) 

#define RoutingSlip_get_Message(This,prop)	\
    ( (This)->lpVtbl -> get_Message(This,prop) ) 

#define RoutingSlip_put_Message(This,prop)	\
    ( (This)->lpVtbl -> put_Message(This,prop) ) 

#define RoutingSlip_get_Delivery(This,prop)	\
    ( (This)->lpVtbl -> get_Delivery(This,prop) ) 

#define RoutingSlip_put_Delivery(This,prop)	\
    ( (This)->lpVtbl -> put_Delivery(This,prop) ) 

#define RoutingSlip_get_TrackStatus(This,prop)	\
    ( (This)->lpVtbl -> get_TrackStatus(This,prop) ) 

#define RoutingSlip_put_TrackStatus(This,prop)	\
    ( (This)->lpVtbl -> put_TrackStatus(This,prop) ) 

#define RoutingSlip_get_Protect(This,prop)	\
    ( (This)->lpVtbl -> get_Protect(This,prop) ) 

#define RoutingSlip_put_Protect(This,prop)	\
    ( (This)->lpVtbl -> put_Protect(This,prop) ) 

#define RoutingSlip_get_ReturnWhenDone(This,prop)	\
    ( (This)->lpVtbl -> get_ReturnWhenDone(This,prop) ) 

#define RoutingSlip_put_ReturnWhenDone(This,prop)	\
    ( (This)->lpVtbl -> put_ReturnWhenDone(This,prop) ) 

#define RoutingSlip_get_Status(This,prop)	\
    ( (This)->lpVtbl -> get_Status(This,prop) ) 

#define RoutingSlip_get_Recipients(This,Index,prop)	\
    ( (This)->lpVtbl -> get_Recipients(This,Index,prop) ) 

#define RoutingSlip_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define RoutingSlip_AddRecipient(This,Recipient)	\
    ( (This)->lpVtbl -> AddRecipient(This,Recipient) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __RoutingSlip_INTERFACE_DEFINED__ */


#ifndef __Bookmark_INTERFACE_DEFINED__
#define __Bookmark_INTERFACE_DEFINED__

/* interface Bookmark */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Bookmark;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020968-0000-0000-C000-000000000046")
    Bookmark : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Empty( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Start( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Start( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_End( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_End( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Column( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StoryType( 
            /* [retval][out] */ WdStoryType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ Bookmark **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BookmarkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Bookmark * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Bookmark * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Bookmark * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Bookmark * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Bookmark * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Bookmark * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Bookmark * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Bookmark * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Bookmark * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Empty )( 
            Bookmark * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Start )( 
            Bookmark * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Start )( 
            Bookmark * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_End )( 
            Bookmark * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_End )( 
            Bookmark * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Column )( 
            Bookmark * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StoryType )( 
            Bookmark * This,
            /* [retval][out] */ WdStoryType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Bookmark * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Bookmark * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Bookmark * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Bookmark * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Bookmark * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            Bookmark * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ Bookmark **prop);
        
        END_INTERFACE
    } BookmarkVtbl;

    interface Bookmark
    {
        CONST_VTBL struct BookmarkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Bookmark_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Bookmark_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Bookmark_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Bookmark_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Bookmark_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Bookmark_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Bookmark_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Bookmark_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define Bookmark_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Bookmark_get_Empty(This,prop)	\
    ( (This)->lpVtbl -> get_Empty(This,prop) ) 

#define Bookmark_get_Start(This,prop)	\
    ( (This)->lpVtbl -> get_Start(This,prop) ) 

#define Bookmark_put_Start(This,prop)	\
    ( (This)->lpVtbl -> put_Start(This,prop) ) 

#define Bookmark_get_End(This,prop)	\
    ( (This)->lpVtbl -> get_End(This,prop) ) 

#define Bookmark_put_End(This,prop)	\
    ( (This)->lpVtbl -> put_End(This,prop) ) 

#define Bookmark_get_Column(This,prop)	\
    ( (This)->lpVtbl -> get_Column(This,prop) ) 

#define Bookmark_get_StoryType(This,prop)	\
    ( (This)->lpVtbl -> get_StoryType(This,prop) ) 

#define Bookmark_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Bookmark_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Bookmark_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Bookmark_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define Bookmark_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Bookmark_Copy(This,Name,prop)	\
    ( (This)->lpVtbl -> Copy(This,Name,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Bookmark_INTERFACE_DEFINED__ */


#ifndef __Bookmarks_INTERFACE_DEFINED__
#define __Bookmarks_INTERFACE_DEFINED__

/* interface Bookmarks */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Bookmarks;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020967-0000-0000-C000-000000000046")
    Bookmarks : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultSorting( 
            /* [retval][out] */ WdBookmarkSortBy *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultSorting( 
            /* [in] */ WdBookmarkSortBy prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowHidden( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowHidden( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Bookmark **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ Bookmark **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Exists( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BookmarksVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Bookmarks * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Bookmarks * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Bookmarks * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Bookmarks * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Bookmarks * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Bookmarks * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Bookmarks * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Bookmarks * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Bookmarks * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultSorting )( 
            Bookmarks * This,
            /* [retval][out] */ WdBookmarkSortBy *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultSorting )( 
            Bookmarks * This,
            /* [in] */ WdBookmarkSortBy prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowHidden )( 
            Bookmarks * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowHidden )( 
            Bookmarks * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Bookmarks * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Bookmarks * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Bookmarks * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Bookmarks * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Bookmark **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Bookmarks * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ Bookmark **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Exists )( 
            Bookmarks * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } BookmarksVtbl;

    interface Bookmarks
    {
        CONST_VTBL struct BookmarksVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Bookmarks_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Bookmarks_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Bookmarks_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Bookmarks_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Bookmarks_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Bookmarks_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Bookmarks_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Bookmarks_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Bookmarks_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Bookmarks_get_DefaultSorting(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultSorting(This,prop) ) 

#define Bookmarks_put_DefaultSorting(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultSorting(This,prop) ) 

#define Bookmarks_get_ShowHidden(This,prop)	\
    ( (This)->lpVtbl -> get_ShowHidden(This,prop) ) 

#define Bookmarks_put_ShowHidden(This,prop)	\
    ( (This)->lpVtbl -> put_ShowHidden(This,prop) ) 

#define Bookmarks_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Bookmarks_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Bookmarks_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Bookmarks_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Bookmarks_Add(This,Name,Range,prop)	\
    ( (This)->lpVtbl -> Add(This,Name,Range,prop) ) 

#define Bookmarks_Exists(This,Name,prop)	\
    ( (This)->lpVtbl -> Exists(This,Name,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Bookmarks_INTERFACE_DEFINED__ */


#ifndef __Variable_INTERFACE_DEFINED__
#define __Variable_INTERFACE_DEFINED__

/* interface Variable */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Variable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020966-0000-0000-C000-000000000046")
    Variable : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct VariableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Variable * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Variable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Variable * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Variable * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Variable * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Variable * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Variable * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Variable * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Variable * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Variable * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Variable * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            Variable * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            Variable * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            Variable * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Variable * This);
        
        END_INTERFACE
    } VariableVtbl;

    interface Variable
    {
        CONST_VTBL struct VariableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Variable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Variable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Variable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Variable_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Variable_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Variable_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Variable_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Variable_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Variable_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Variable_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Variable_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define Variable_get_Value(This,prop)	\
    ( (This)->lpVtbl -> get_Value(This,prop) ) 

#define Variable_put_Value(This,prop)	\
    ( (This)->lpVtbl -> put_Value(This,prop) ) 

#define Variable_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define Variable_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Variable_INTERFACE_DEFINED__ */


#ifndef __Variables_INTERFACE_DEFINED__
#define __Variables_INTERFACE_DEFINED__

/* interface Variables */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Variables;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020965-0000-0000-C000-000000000046")
    Variables : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Variable **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Value,
            /* [retval][out] */ Variable **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct VariablesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Variables * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Variables * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Variables * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Variables * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Variables * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Variables * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Variables * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Variables * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Variables * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Variables * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Variables * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Variables * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Variables * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Variable **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Variables * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Value,
            /* [retval][out] */ Variable **prop);
        
        END_INTERFACE
    } VariablesVtbl;

    interface Variables
    {
        CONST_VTBL struct VariablesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Variables_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Variables_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Variables_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Variables_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Variables_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Variables_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Variables_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Variables_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Variables_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Variables_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Variables_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Variables_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Variables_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Variables_Add(This,Name,Value,prop)	\
    ( (This)->lpVtbl -> Add(This,Name,Value,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Variables_INTERFACE_DEFINED__ */


#ifndef __RecentFile_INTERFACE_DEFINED__
#define __RecentFile_INTERFACE_DEFINED__

/* interface RecentFile */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_RecentFile;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020964-0000-0000-C000-000000000046")
    RecentFile : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadOnly( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadOnly( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [retval][out] */ _Document **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RecentFileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            RecentFile * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            RecentFile * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            RecentFile * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            RecentFile * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            RecentFile * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            RecentFile * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            RecentFile * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            RecentFile * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            RecentFile * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            RecentFile * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            RecentFile * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            RecentFile * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            RecentFile * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadOnly )( 
            RecentFile * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            RecentFile * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            RecentFile * This,
            /* [retval][out] */ _Document **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            RecentFile * This);
        
        END_INTERFACE
    } RecentFileVtbl;

    interface RecentFile
    {
        CONST_VTBL struct RecentFileVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define RecentFile_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define RecentFile_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define RecentFile_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define RecentFile_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define RecentFile_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define RecentFile_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define RecentFile_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define RecentFile_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define RecentFile_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define RecentFile_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define RecentFile_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define RecentFile_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define RecentFile_get_ReadOnly(This,prop)	\
    ( (This)->lpVtbl -> get_ReadOnly(This,prop) ) 

#define RecentFile_put_ReadOnly(This,prop)	\
    ( (This)->lpVtbl -> put_ReadOnly(This,prop) ) 

#define RecentFile_get_Path(This,prop)	\
    ( (This)->lpVtbl -> get_Path(This,prop) ) 

#define RecentFile_Open(This,prop)	\
    ( (This)->lpVtbl -> Open(This,prop) ) 

#define RecentFile_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __RecentFile_INTERFACE_DEFINED__ */


#ifndef __RecentFiles_INTERFACE_DEFINED__
#define __RecentFiles_INTERFACE_DEFINED__

/* interface RecentFiles */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_RecentFiles;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020963-0000-0000-C000-000000000046")
    RecentFiles : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Maximum( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Maximum( 
            /* [in] */ long prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ RecentFile **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ VARIANT *_Document,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [retval][out] */ RecentFile **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RecentFilesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            RecentFiles * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            RecentFiles * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            RecentFiles * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            RecentFiles * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            RecentFiles * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            RecentFiles * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            RecentFiles * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            RecentFiles * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            RecentFiles * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            RecentFiles * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            RecentFiles * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            RecentFiles * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Maximum )( 
            RecentFiles * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Maximum )( 
            RecentFiles * This,
            /* [in] */ long prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            RecentFiles * This,
            /* [in] */ long Index,
            /* [retval][out] */ RecentFile **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            RecentFiles * This,
            /* [in] */ VARIANT *_Document,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [retval][out] */ RecentFile **prop);
        
        END_INTERFACE
    } RecentFilesVtbl;

    interface RecentFiles
    {
        CONST_VTBL struct RecentFilesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define RecentFiles_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define RecentFiles_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define RecentFiles_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define RecentFiles_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define RecentFiles_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define RecentFiles_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define RecentFiles_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define RecentFiles_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define RecentFiles_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define RecentFiles_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define RecentFiles_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define RecentFiles_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define RecentFiles_get_Maximum(This,prop)	\
    ( (This)->lpVtbl -> get_Maximum(This,prop) ) 

#define RecentFiles_put_Maximum(This,prop)	\
    ( (This)->lpVtbl -> put_Maximum(This,prop) ) 

#define RecentFiles_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define RecentFiles_Add(This,_Document,ReadOnly,prop)	\
    ( (This)->lpVtbl -> Add(This,_Document,ReadOnly,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __RecentFiles_INTERFACE_DEFINED__ */


#ifndef __Window_INTERFACE_DEFINED__
#define __Window_INTERFACE_DEFINED__

/* interface Window */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Window;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020962-0000-0000-C000-000000000046")
    Window : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActivePane( 
            /* [retval][out] */ Pane **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Document( 
            /* [retval][out] */ _Document **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Panes( 
            /* [retval][out] */ Panes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [retval][out] */ Selection **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Split( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Split( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SplitVertical( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SplitVertical( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Caption( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Caption( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WindowState( 
            /* [retval][out] */ WdWindowState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WindowState( 
            /* [in] */ WdWindowState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayRulers( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayRulers( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayVerticalRuler( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayVerticalRuler( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_View( 
            /* [retval][out] */ View **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdWindowType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Next( 
            /* [retval][out] */ /*Window*/ void **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Previous( 
            /* [retval][out] */ /*Window*/ void **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WindowNumber( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayVerticalScrollBar( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayVerticalScrollBar( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayHorizontalScrollBar( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayHorizontalScrollBar( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StyleAreaWidth( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StyleAreaWidth( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayScreenTips( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayScreenTips( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalPercentScrolled( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalPercentScrolled( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalPercentScrolled( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalPercentScrolled( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocumentMap( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocumentMap( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Active( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocumentMapPercentWidth( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocumentMapPercentWidth( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IMEMode( 
            /* [retval][out] */ WdIMEMode *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IMEMode( 
            /* [in] */ WdIMEMode prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( 
            /* [optional][in] */ VARIANT *SaveChanges,
            /* [optional][in] */ VARIANT *RouteDocument) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE LargeScroll( 
            /* [optional][in] */ VARIANT *Down,
            /* [optional][in] */ VARIANT *Up,
            /* [optional][in] */ VARIANT *ToRight,
            /* [optional][in] */ VARIANT *ToLeft) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SmallScroll( 
            /* [optional][in] */ VARIANT *Down,
            /* [optional][in] */ VARIANT *Up,
            /* [optional][in] */ VARIANT *ToRight,
            /* [optional][in] */ VARIANT *ToLeft) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewWindow( 
            /* [retval][out] */ /*Window*/ void **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE PrintOutOld( 
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PageScroll( 
            /* [optional][in] */ VARIANT *Down,
            /* [optional][in] */ VARIANT *Up) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetFocus( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RangeFromPoint( 
            /* [in] */ long x,
            /* [in] */ long y,
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScrollIntoView( 
            /* [in] */ IDispatch *obj,
            /* [optional][in] */ VARIANT *Start) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetPoint( 
            /* [out] */ long *ScreenPixelsLeft,
            /* [out] */ long *ScreenPixelsTop,
            /* [out] */ long *ScreenPixelsWidth,
            /* [out] */ long *ScreenPixelsHeight,
            /* [in] */ IDispatch *obj) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE PrintOut2000( 
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint,
            /* [optional][in] */ VARIANT *PrintZoomColumn,
            /* [optional][in] */ VARIANT *PrintZoomRow,
            /* [optional][in] */ VARIANT *PrintZoomPaperWidth,
            /* [optional][in] */ VARIANT *PrintZoomPaperHeight) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UsableWidth( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UsableHeight( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnvelopeVisible( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EnvelopeVisible( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayRightRuler( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayRightRuler( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayLeftScrollBar( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayLeftScrollBar( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrintOut( 
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint,
            /* [optional][in] */ VARIANT *PrintZoomColumn,
            /* [optional][in] */ VARIANT *PrintZoomRow,
            /* [optional][in] */ VARIANT *PrintZoomPaperWidth,
            /* [optional][in] */ VARIANT *PrintZoomPaperHeight) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToggleShowAllReviewers( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Thumbnails( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Thumbnails( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Window * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Window * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Window * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Window * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Window * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Window * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Window * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Window * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Window * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Window * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActivePane )( 
            Window * This,
            /* [retval][out] */ Pane **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Document )( 
            Window * This,
            /* [retval][out] */ _Document **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Panes )( 
            Window * This,
            /* [retval][out] */ Panes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            Window * This,
            /* [retval][out] */ Selection **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            Window * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            Window * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            Window * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            Window * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Window * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            Window * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Window * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            Window * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Split )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Split )( 
            Window * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SplitVertical )( 
            Window * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SplitVertical )( 
            Window * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Caption )( 
            Window * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Caption )( 
            Window * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowState )( 
            Window * This,
            /* [retval][out] */ WdWindowState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WindowState )( 
            Window * This,
            /* [in] */ WdWindowState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayRulers )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayRulers )( 
            Window * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayVerticalRuler )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayVerticalRuler )( 
            Window * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_View )( 
            Window * This,
            /* [retval][out] */ View **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Window * This,
            /* [retval][out] */ WdWindowType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            Window * This,
            /* [retval][out] */ /*Window*/ void **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            Window * This,
            /* [retval][out] */ /*Window*/ void **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowNumber )( 
            Window * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayVerticalScrollBar )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayVerticalScrollBar )( 
            Window * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayHorizontalScrollBar )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayHorizontalScrollBar )( 
            Window * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleAreaWidth )( 
            Window * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StyleAreaWidth )( 
            Window * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayScreenTips )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayScreenTips )( 
            Window * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalPercentScrolled )( 
            Window * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalPercentScrolled )( 
            Window * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalPercentScrolled )( 
            Window * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalPercentScrolled )( 
            Window * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentMap )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocumentMap )( 
            Window * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Active )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentMapPercentWidth )( 
            Window * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocumentMapPercentWidth )( 
            Window * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            Window * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IMEMode )( 
            Window * This,
            /* [retval][out] */ WdIMEMode *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IMEMode )( 
            Window * This,
            /* [in] */ WdIMEMode prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            Window * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            Window * This,
            /* [optional][in] */ VARIANT *SaveChanges,
            /* [optional][in] */ VARIANT *RouteDocument);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LargeScroll )( 
            Window * This,
            /* [optional][in] */ VARIANT *Down,
            /* [optional][in] */ VARIANT *Up,
            /* [optional][in] */ VARIANT *ToRight,
            /* [optional][in] */ VARIANT *ToLeft);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SmallScroll )( 
            Window * This,
            /* [optional][in] */ VARIANT *Down,
            /* [optional][in] */ VARIANT *Up,
            /* [optional][in] */ VARIANT *ToRight,
            /* [optional][in] */ VARIANT *ToLeft);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewWindow )( 
            Window * This,
            /* [retval][out] */ /*Window*/ void **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOutOld )( 
            Window * This,
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PageScroll )( 
            Window * This,
            /* [optional][in] */ VARIANT *Down,
            /* [optional][in] */ VARIANT *Up);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetFocus )( 
            Window * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RangeFromPoint )( 
            Window * This,
            /* [in] */ long x,
            /* [in] */ long y,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScrollIntoView )( 
            Window * This,
            /* [in] */ IDispatch *obj,
            /* [optional][in] */ VARIANT *Start);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetPoint )( 
            Window * This,
            /* [out] */ long *ScreenPixelsLeft,
            /* [out] */ long *ScreenPixelsTop,
            /* [out] */ long *ScreenPixelsWidth,
            /* [out] */ long *ScreenPixelsHeight,
            /* [in] */ IDispatch *obj);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOut2000 )( 
            Window * This,
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint,
            /* [optional][in] */ VARIANT *PrintZoomColumn,
            /* [optional][in] */ VARIANT *PrintZoomRow,
            /* [optional][in] */ VARIANT *PrintZoomPaperWidth,
            /* [optional][in] */ VARIANT *PrintZoomPaperHeight);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UsableWidth )( 
            Window * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UsableHeight )( 
            Window * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnvelopeVisible )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnvelopeVisible )( 
            Window * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayRightRuler )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayRightRuler )( 
            Window * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayLeftScrollBar )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayLeftScrollBar )( 
            Window * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            Window * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOut )( 
            Window * This,
            /* [optional][in] */ VARIANT *Background,
            /* [optional][in] */ VARIANT *Append,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *OutputFileName,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *Item,
            /* [optional][in] */ VARIANT *Copies,
            /* [optional][in] */ VARIANT *Pages,
            /* [optional][in] */ VARIANT *PageType,
            /* [optional][in] */ VARIANT *PrintToFile,
            /* [optional][in] */ VARIANT *Collate,
            /* [optional][in] */ VARIANT *ActivePrinterMacGX,
            /* [optional][in] */ VARIANT *ManualDuplexPrint,
            /* [optional][in] */ VARIANT *PrintZoomColumn,
            /* [optional][in] */ VARIANT *PrintZoomRow,
            /* [optional][in] */ VARIANT *PrintZoomPaperWidth,
            /* [optional][in] */ VARIANT *PrintZoomPaperHeight);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ToggleShowAllReviewers )( 
            Window * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Thumbnails )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Thumbnails )( 
            Window * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } WindowVtbl;

    interface Window
    {
        CONST_VTBL struct WindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Window_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Window_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Window_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Window_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Window_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Window_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Window_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Window_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Window_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Window_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Window_get_ActivePane(This,prop)	\
    ( (This)->lpVtbl -> get_ActivePane(This,prop) ) 

#define Window_get__Document(This,prop)	\
    ( (This)->lpVtbl -> get__Document(This,prop) ) 

#define Window_get_Panes(This,prop)	\
    ( (This)->lpVtbl -> get_Panes(This,prop) ) 

#define Window_get_Selection(This,prop)	\
    ( (This)->lpVtbl -> get_Selection(This,prop) ) 

#define Window_get_Left(This,prop)	\
    ( (This)->lpVtbl -> get_Left(This,prop) ) 

#define Window_put_Left(This,prop)	\
    ( (This)->lpVtbl -> put_Left(This,prop) ) 

#define Window_get_Top(This,prop)	\
    ( (This)->lpVtbl -> get_Top(This,prop) ) 

#define Window_put_Top(This,prop)	\
    ( (This)->lpVtbl -> put_Top(This,prop) ) 

#define Window_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define Window_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define Window_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define Window_put_Height(This,prop)	\
    ( (This)->lpVtbl -> put_Height(This,prop) ) 

#define Window_get_Split(This,prop)	\
    ( (This)->lpVtbl -> get_Split(This,prop) ) 

#define Window_put_Split(This,prop)	\
    ( (This)->lpVtbl -> put_Split(This,prop) ) 

#define Window_get_SplitVertical(This,prop)	\
    ( (This)->lpVtbl -> get_SplitVertical(This,prop) ) 

#define Window_put_SplitVertical(This,prop)	\
    ( (This)->lpVtbl -> put_SplitVertical(This,prop) ) 

#define Window_get_Caption(This,prop)	\
    ( (This)->lpVtbl -> get_Caption(This,prop) ) 

#define Window_put_Caption(This,prop)	\
    ( (This)->lpVtbl -> put_Caption(This,prop) ) 

#define Window_get_WindowState(This,prop)	\
    ( (This)->lpVtbl -> get_WindowState(This,prop) ) 

#define Window_put_WindowState(This,prop)	\
    ( (This)->lpVtbl -> put_WindowState(This,prop) ) 

#define Window_get_DisplayRulers(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayRulers(This,prop) ) 

#define Window_put_DisplayRulers(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayRulers(This,prop) ) 

#define Window_get_DisplayVerticalRuler(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayVerticalRuler(This,prop) ) 

#define Window_put_DisplayVerticalRuler(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayVerticalRuler(This,prop) ) 

#define Window_get_View(This,prop)	\
    ( (This)->lpVtbl -> get_View(This,prop) ) 

#define Window_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define Window_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define Window_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define Window_get_WindowNumber(This,prop)	\
    ( (This)->lpVtbl -> get_WindowNumber(This,prop) ) 

#define Window_get_DisplayVerticalScrollBar(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayVerticalScrollBar(This,prop) ) 

#define Window_put_DisplayVerticalScrollBar(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayVerticalScrollBar(This,prop) ) 

#define Window_get_DisplayHorizontalScrollBar(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayHorizontalScrollBar(This,prop) ) 

#define Window_put_DisplayHorizontalScrollBar(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayHorizontalScrollBar(This,prop) ) 

#define Window_get_StyleAreaWidth(This,prop)	\
    ( (This)->lpVtbl -> get_StyleAreaWidth(This,prop) ) 

#define Window_put_StyleAreaWidth(This,prop)	\
    ( (This)->lpVtbl -> put_StyleAreaWidth(This,prop) ) 

#define Window_get_DisplayScreenTips(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayScreenTips(This,prop) ) 

#define Window_put_DisplayScreenTips(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayScreenTips(This,prop) ) 

#define Window_get_HorizontalPercentScrolled(This,prop)	\
    ( (This)->lpVtbl -> get_HorizontalPercentScrolled(This,prop) ) 

#define Window_put_HorizontalPercentScrolled(This,prop)	\
    ( (This)->lpVtbl -> put_HorizontalPercentScrolled(This,prop) ) 

#define Window_get_VerticalPercentScrolled(This,prop)	\
    ( (This)->lpVtbl -> get_VerticalPercentScrolled(This,prop) ) 

#define Window_put_VerticalPercentScrolled(This,prop)	\
    ( (This)->lpVtbl -> put_VerticalPercentScrolled(This,prop) ) 

#define Window_get_DocumentMap(This,prop)	\
    ( (This)->lpVtbl -> get_DocumentMap(This,prop) ) 

#define Window_put_DocumentMap(This,prop)	\
    ( (This)->lpVtbl -> put_DocumentMap(This,prop) ) 

#define Window_get_Active(This,prop)	\
    ( (This)->lpVtbl -> get_Active(This,prop) ) 

#define Window_get_DocumentMapPercentWidth(This,prop)	\
    ( (This)->lpVtbl -> get_DocumentMapPercentWidth(This,prop) ) 

#define Window_put_DocumentMapPercentWidth(This,prop)	\
    ( (This)->lpVtbl -> put_DocumentMapPercentWidth(This,prop) ) 

#define Window_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define Window_get_IMEMode(This,prop)	\
    ( (This)->lpVtbl -> get_IMEMode(This,prop) ) 

#define Window_put_IMEMode(This,prop)	\
    ( (This)->lpVtbl -> put_IMEMode(This,prop) ) 

#define Window_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define Window_Close(This,SaveChanges,RouteDocument)	\
    ( (This)->lpVtbl -> Close(This,SaveChanges,RouteDocument) ) 

#define Window_LargeScroll(This,Down,Up,ToRight,ToLeft)	\
    ( (This)->lpVtbl -> LargeScroll(This,Down,Up,ToRight,ToLeft) ) 

#define Window_SmallScroll(This,Down,Up,ToRight,ToLeft)	\
    ( (This)->lpVtbl -> SmallScroll(This,Down,Up,ToRight,ToLeft) ) 

#define Window_NewWindow(This,prop)	\
    ( (This)->lpVtbl -> NewWindow(This,prop) ) 

#define Window_PrintOutOld(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,ActivePrinterMacGX,ManualDuplexPrint)	\
    ( (This)->lpVtbl -> PrintOutOld(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,ActivePrinterMacGX,ManualDuplexPrint) ) 

#define Window_PageScroll(This,Down,Up)	\
    ( (This)->lpVtbl -> PageScroll(This,Down,Up) ) 

#define Window_SetFocus(This)	\
    ( (This)->lpVtbl -> SetFocus(This) ) 

#define Window_RangeFromPoint(This,x,y,prop)	\
    ( (This)->lpVtbl -> RangeFromPoint(This,x,y,prop) ) 

#define Window_ScrollIntoView(This,obj,Start)	\
    ( (This)->lpVtbl -> ScrollIntoView(This,obj,Start) ) 

#define Window_GetPoint(This,ScreenPixelsLeft,ScreenPixelsTop,ScreenPixelsWidth,ScreenPixelsHeight,obj)	\
    ( (This)->lpVtbl -> GetPoint(This,ScreenPixelsLeft,ScreenPixelsTop,ScreenPixelsWidth,ScreenPixelsHeight,obj) ) 

#define Window_PrintOut2000(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,ActivePrinterMacGX,ManualDuplexPrint,PrintZoomColumn,PrintZoomRow,PrintZoomPaperWidth,PrintZoomPaperHeight)	\
    ( (This)->lpVtbl -> PrintOut2000(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,ActivePrinterMacGX,ManualDuplexPrint,PrintZoomColumn,PrintZoomRow,PrintZoomPaperWidth,PrintZoomPaperHeight) ) 

#define Window_get_UsableWidth(This,prop)	\
    ( (This)->lpVtbl -> get_UsableWidth(This,prop) ) 

#define Window_get_UsableHeight(This,prop)	\
    ( (This)->lpVtbl -> get_UsableHeight(This,prop) ) 

#define Window_get_EnvelopeVisible(This,prop)	\
    ( (This)->lpVtbl -> get_EnvelopeVisible(This,prop) ) 

#define Window_put_EnvelopeVisible(This,prop)	\
    ( (This)->lpVtbl -> put_EnvelopeVisible(This,prop) ) 

#define Window_get_DisplayRightRuler(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayRightRuler(This,prop) ) 

#define Window_put_DisplayRightRuler(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayRightRuler(This,prop) ) 

#define Window_get_DisplayLeftScrollBar(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayLeftScrollBar(This,prop) ) 

#define Window_put_DisplayLeftScrollBar(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayLeftScrollBar(This,prop) ) 

#define Window_get_Visible(This,prop)	\
    ( (This)->lpVtbl -> get_Visible(This,prop) ) 

#define Window_put_Visible(This,prop)	\
    ( (This)->lpVtbl -> put_Visible(This,prop) ) 

#define Window_PrintOut(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,ActivePrinterMacGX,ManualDuplexPrint,PrintZoomColumn,PrintZoomRow,PrintZoomPaperWidth,PrintZoomPaperHeight)	\
    ( (This)->lpVtbl -> PrintOut(This,Background,Append,Range,OutputFileName,From,To,Item,Copies,Pages,PageType,PrintToFile,Collate,ActivePrinterMacGX,ManualDuplexPrint,PrintZoomColumn,PrintZoomRow,PrintZoomPaperWidth,PrintZoomPaperHeight) ) 

#define Window_ToggleShowAllReviewers(This)	\
    ( (This)->lpVtbl -> ToggleShowAllReviewers(This) ) 

#define Window_get_Thumbnails(This,prop)	\
    ( (This)->lpVtbl -> get_Thumbnails(This,prop) ) 

#define Window_put_Thumbnails(This,prop)	\
    ( (This)->lpVtbl -> put_Thumbnails(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Window_INTERFACE_DEFINED__ */


#ifndef __Windows_INTERFACE_DEFINED__
#define __Windows_INTERFACE_DEFINED__

/* interface Windows */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Windows;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020961-0000-0000-C000-000000000046")
    Windows : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ /*Window*/ void **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [optional][in] */ VARIANT *Window,
            /* [retval][out] */ /*Window*/ void **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Arrange( 
            /* [optional][in] */ VARIANT *ArrangeStyle) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CompareSideBySideWith( 
            /* [in] */ VARIANT *_Document,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE BreakSideBySide( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ResetPositionsSideBySide( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SyncScrollingSideBySide( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SyncScrollingSideBySide( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WindowsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Windows * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Windows * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Windows * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Windows * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Windows * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Windows * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Windows * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Windows * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Windows * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Windows * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Windows * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Windows * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Windows * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ /*Window*/ void **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Windows * This,
            /* [optional][in] */ VARIANT *Window,
            /* [retval][out] */ /*Window*/ void **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Arrange )( 
            Windows * This,
            /* [optional][in] */ VARIANT *ArrangeStyle);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CompareSideBySideWith )( 
            Windows * This,
            /* [in] */ VARIANT *_Document,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BreakSideBySide )( 
            Windows * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ResetPositionsSideBySide )( 
            Windows * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SyncScrollingSideBySide )( 
            Windows * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SyncScrollingSideBySide )( 
            Windows * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } WindowsVtbl;

    interface Windows
    {
        CONST_VTBL struct WindowsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Windows_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Windows_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Windows_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Windows_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Windows_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Windows_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Windows_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Windows_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Windows_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Windows_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Windows_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Windows_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Windows_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Windows_Add(This,Window,prop)	\
    ( (This)->lpVtbl -> Add(This,Window,prop) ) 

#define Windows_Arrange(This,ArrangeStyle)	\
    ( (This)->lpVtbl -> Arrange(This,ArrangeStyle) ) 

#define Windows_CompareSideBySideWith(This,_Document,prop)	\
    ( (This)->lpVtbl -> CompareSideBySideWith(This,_Document,prop) ) 

#define Windows_BreakSideBySide(This,prop)	\
    ( (This)->lpVtbl -> BreakSideBySide(This,prop) ) 

#define Windows_ResetPositionsSideBySide(This)	\
    ( (This)->lpVtbl -> ResetPositionsSideBySide(This) ) 

#define Windows_get_SyncScrollingSideBySide(This,prop)	\
    ( (This)->lpVtbl -> get_SyncScrollingSideBySide(This,prop) ) 

#define Windows_put_SyncScrollingSideBySide(This,prop)	\
    ( (This)->lpVtbl -> put_SyncScrollingSideBySide(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Windows_INTERFACE_DEFINED__ */


#ifndef __Pane_INTERFACE_DEFINED__
#define __Pane_INTERFACE_DEFINED__

/* interface Pane */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Pane;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020960-0000-0000-C000-000000000046")
    Pane : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Document( 
            /* [retval][out] */ _Document **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [retval][out] */ Selection **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayRulers( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayRulers( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayVerticalRuler( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayVerticalRuler( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Zooms( 
            /* [retval][out] */ Zooms **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_View( 
            /* [retval][out] */ View **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Next( 
            /* [retval][out] */ Pane **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Previous( 
            /* [retval][out] */ Pane **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalPercentScrolled( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalPercentScrolled( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalPercentScrolled( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalPercentScrolled( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MinimumFontSize( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MinimumFontSize( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_BrowseToWindow( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_BrowseToWindow( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BrowseWidth( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE LargeScroll( 
            /* [optional][in] */ VARIANT *Down,
            /* [optional][in] */ VARIANT *Up,
            /* [optional][in] */ VARIANT *ToRight,
            /* [optional][in] */ VARIANT *ToLeft) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SmallScroll( 
            /* [optional][in] */ VARIANT *Down,
            /* [optional][in] */ VARIANT *Up,
            /* [optional][in] */ VARIANT *ToRight,
            /* [optional][in] */ VARIANT *ToLeft) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AutoScroll( 
            /* [in] */ long Velocity) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PageScroll( 
            /* [optional][in] */ VARIANT *Down,
            /* [optional][in] */ VARIANT *Up) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewFrameset( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TOCInFrameset( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Frameset( 
            /* [retval][out] */ Frameset **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Pages( 
            /* [retval][out] */ Pages **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PaneVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Pane * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Pane * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Pane * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Pane * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Pane * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Pane * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Pane * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Pane * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Pane * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Pane * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Document )( 
            Pane * This,
            /* [retval][out] */ _Document **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            Pane * This,
            /* [retval][out] */ Selection **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayRulers )( 
            Pane * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayRulers )( 
            Pane * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayVerticalRuler )( 
            Pane * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayVerticalRuler )( 
            Pane * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Zooms )( 
            Pane * This,
            /* [retval][out] */ Zooms **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            Pane * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_View )( 
            Pane * This,
            /* [retval][out] */ View **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            Pane * This,
            /* [retval][out] */ Pane **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            Pane * This,
            /* [retval][out] */ Pane **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalPercentScrolled )( 
            Pane * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalPercentScrolled )( 
            Pane * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalPercentScrolled )( 
            Pane * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalPercentScrolled )( 
            Pane * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MinimumFontSize )( 
            Pane * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MinimumFontSize )( 
            Pane * This,
            /* [in] */ long prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BrowseToWindow )( 
            Pane * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BrowseToWindow )( 
            Pane * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BrowseWidth )( 
            Pane * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            Pane * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            Pane * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LargeScroll )( 
            Pane * This,
            /* [optional][in] */ VARIANT *Down,
            /* [optional][in] */ VARIANT *Up,
            /* [optional][in] */ VARIANT *ToRight,
            /* [optional][in] */ VARIANT *ToLeft);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SmallScroll )( 
            Pane * This,
            /* [optional][in] */ VARIANT *Down,
            /* [optional][in] */ VARIANT *Up,
            /* [optional][in] */ VARIANT *ToRight,
            /* [optional][in] */ VARIANT *ToLeft);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AutoScroll )( 
            Pane * This,
            /* [in] */ long Velocity);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PageScroll )( 
            Pane * This,
            /* [optional][in] */ VARIANT *Down,
            /* [optional][in] */ VARIANT *Up);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewFrameset )( 
            Pane * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TOCInFrameset )( 
            Pane * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Frameset )( 
            Pane * This,
            /* [retval][out] */ Frameset **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Pages )( 
            Pane * This,
            /* [retval][out] */ Pages **prop);
        
        END_INTERFACE
    } PaneVtbl;

    interface Pane
    {
        CONST_VTBL struct PaneVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Pane_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Pane_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Pane_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Pane_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Pane_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Pane_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Pane_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Pane_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Pane_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Pane_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Pane_get__Document(This,prop)	\
    ( (This)->lpVtbl -> get__Document(This,prop) ) 

#define Pane_get_Selection(This,prop)	\
    ( (This)->lpVtbl -> get_Selection(This,prop) ) 

#define Pane_get_DisplayRulers(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayRulers(This,prop) ) 

#define Pane_put_DisplayRulers(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayRulers(This,prop) ) 

#define Pane_get_DisplayVerticalRuler(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayVerticalRuler(This,prop) ) 

#define Pane_put_DisplayVerticalRuler(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayVerticalRuler(This,prop) ) 

#define Pane_get_Zooms(This,prop)	\
    ( (This)->lpVtbl -> get_Zooms(This,prop) ) 

#define Pane_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define Pane_get_View(This,prop)	\
    ( (This)->lpVtbl -> get_View(This,prop) ) 

#define Pane_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define Pane_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define Pane_get_HorizontalPercentScrolled(This,prop)	\
    ( (This)->lpVtbl -> get_HorizontalPercentScrolled(This,prop) ) 

#define Pane_put_HorizontalPercentScrolled(This,prop)	\
    ( (This)->lpVtbl -> put_HorizontalPercentScrolled(This,prop) ) 

#define Pane_get_VerticalPercentScrolled(This,prop)	\
    ( (This)->lpVtbl -> get_VerticalPercentScrolled(This,prop) ) 

#define Pane_put_VerticalPercentScrolled(This,prop)	\
    ( (This)->lpVtbl -> put_VerticalPercentScrolled(This,prop) ) 

#define Pane_get_MinimumFontSize(This,prop)	\
    ( (This)->lpVtbl -> get_MinimumFontSize(This,prop) ) 

#define Pane_put_MinimumFontSize(This,prop)	\
    ( (This)->lpVtbl -> put_MinimumFontSize(This,prop) ) 

#define Pane_get_BrowseToWindow(This,prop)	\
    ( (This)->lpVtbl -> get_BrowseToWindow(This,prop) ) 

#define Pane_put_BrowseToWindow(This,prop)	\
    ( (This)->lpVtbl -> put_BrowseToWindow(This,prop) ) 

#define Pane_get_BrowseWidth(This,prop)	\
    ( (This)->lpVtbl -> get_BrowseWidth(This,prop) ) 

#define Pane_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define Pane_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define Pane_LargeScroll(This,Down,Up,ToRight,ToLeft)	\
    ( (This)->lpVtbl -> LargeScroll(This,Down,Up,ToRight,ToLeft) ) 

#define Pane_SmallScroll(This,Down,Up,ToRight,ToLeft)	\
    ( (This)->lpVtbl -> SmallScroll(This,Down,Up,ToRight,ToLeft) ) 

#define Pane_AutoScroll(This,Velocity)	\
    ( (This)->lpVtbl -> AutoScroll(This,Velocity) ) 

#define Pane_PageScroll(This,Down,Up)	\
    ( (This)->lpVtbl -> PageScroll(This,Down,Up) ) 

#define Pane_NewFrameset(This)	\
    ( (This)->lpVtbl -> NewFrameset(This) ) 

#define Pane_TOCInFrameset(This)	\
    ( (This)->lpVtbl -> TOCInFrameset(This) ) 

#define Pane_get_Frameset(This,prop)	\
    ( (This)->lpVtbl -> get_Frameset(This,prop) ) 

#define Pane_get_Pages(This,prop)	\
    ( (This)->lpVtbl -> get_Pages(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Pane_INTERFACE_DEFINED__ */


#ifndef __Panes_INTERFACE_DEFINED__
#define __Panes_INTERFACE_DEFINED__

/* interface Panes */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Panes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002095F-0000-0000-C000-000000000046")
    Panes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Pane **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [optional][in] */ VARIANT *SplitVertical,
            /* [retval][out] */ Pane **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PanesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Panes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Panes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Panes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Panes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Panes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Panes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Panes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Panes * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Panes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Panes * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Panes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Panes * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Panes * This,
            /* [in] */ long Index,
            /* [retval][out] */ Pane **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Panes * This,
            /* [optional][in] */ VARIANT *SplitVertical,
            /* [retval][out] */ Pane **prop);
        
        END_INTERFACE
    } PanesVtbl;

    interface Panes
    {
        CONST_VTBL struct PanesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Panes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Panes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Panes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Panes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Panes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Panes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Panes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Panes_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Panes_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Panes_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Panes_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Panes_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Panes_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Panes_Add(This,SplitVertical,prop)	\
    ( (This)->lpVtbl -> Add(This,SplitVertical,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Panes_INTERFACE_DEFINED__ */


#ifndef __Range_INTERFACE_DEFINED__
#define __Range_INTERFACE_DEFINED__

/* interface Range */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Range;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002095E-0000-0000-C000-000000000046")
    Range : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormattedText( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormattedText( 
            /* [in] */ Range *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Start( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Start( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_End( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_End( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ /* external definition not present */ Font **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Font( 
            /* [in] */ /* external definition not present */ Font *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Duplicate( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StoryType( 
            /* [retval][out] */ WdStoryType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Tables( 
            /* [retval][out] */ Tables **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Words( 
            /* [retval][out] */ Words **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Sentences( 
            /* [retval][out] */ Sentences **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Characters( 
            /* [retval][out] */ Characters **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Footnotes( 
            /* [retval][out] */ Footnotes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Endnotes( 
            /* [retval][out] */ Endnotes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comments( 
            /* [retval][out] */ Comments **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Cells( 
            /* [retval][out] */ Cells **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Sections( 
            /* [retval][out] */ Sections **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Paragraphs( 
            /* [retval][out] */ Paragraphs **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextRetrievalMode( 
            /* [retval][out] */ TextRetrievalMode **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextRetrievalMode( 
            /* [in] */ TextRetrievalMode *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fields( 
            /* [retval][out] */ Fields **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormFields( 
            /* [retval][out] */ FormFields **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Frames( 
            /* [retval][out] */ Frames **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__ParagraphFormat( 
            /* [retval][out] */ _ParagraphFormat **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put__ParagraphFormat( 
            /* [in] */ _ParagraphFormat *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListFormat( 
            /* [retval][out] */ ListFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bookmarks( 
            /* [retval][out] */ Bookmarks **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bold( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Bold( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Italic( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Italic( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Underline( 
            /* [retval][out] */ WdUnderline *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Underline( 
            /* [in] */ WdUnderline prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EmphasisMark( 
            /* [retval][out] */ WdEmphasisMark *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EmphasisMark( 
            /* [in] */ WdEmphasisMark prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisableCharacterSpaceGrid( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisableCharacterSpaceGrid( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Revisions( 
            /* [retval][out] */ Revisions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Style( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StoryLength( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageID( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageID( 
            /* [in] */ WdLanguageID prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SynonymInfo( 
            /* [retval][out] */ SynonymInfo **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hyperlinks( 
            /* [retval][out] */ Hyperlinks **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListParagraphs( 
            /* [retval][out] */ ListParagraphs **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Subdocuments( 
            /* [retval][out] */ Subdocuments **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GrammarChecked( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GrammarChecked( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpellingChecked( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpellingChecked( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HighlightColorIndex( 
            /* [retval][out] */ WdColorIndex *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HighlightColorIndex( 
            /* [in] */ WdColorIndex prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Columns( 
            /* [retval][out] */ Columns **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rows( 
            /* [retval][out] */ Rows **prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanEdit( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanPaste( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsEndOfRowMark( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BookmarkID( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PreviousBookmarkID( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Find( 
            /* [retval][out] */ Find **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageSetup( 
            /* [retval][out] */ PageSetup **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageSetup( 
            /* [in] */ PageSetup *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShapeRange( 
            /* [retval][out] */ /* external definition not present */ ShapeRange **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Case( 
            /* [retval][out] */ WdCharacterCase *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Case( 
            /* [in] */ WdCharacterCase prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Information( 
            /* [in] */ WdInformation Type,
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadabilityStatistics( 
            /* [retval][out] */ ReadabilityStatistics **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GrammaticalErrors( 
            /* [retval][out] */ ProofreadingErrors **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpellingErrors( 
            /* [retval][out] */ ProofreadingErrors **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ WdTextOrientation *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Orientation( 
            /* [in] */ WdTextOrientation prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InlineShapes( 
            /* [retval][out] */ InlineShapes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NextStoryRange( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageIDFarEast( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageIDFarEast( 
            /* [in] */ WdLanguageID prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageIDOther( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageIDOther( 
            /* [in] */ WdLanguageID prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetRange( 
            /* [in] */ long Start,
            /* [in] */ long End) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Collapse( 
            /* [optional][in] */ VARIANT *Direction) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertBefore( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertAfter( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Previous( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE StartOf( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndOf( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Move( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveStart( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveEnd( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveWhile( 
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveStartWhile( 
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveEndWhile( 
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveUntil( 
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveStartUntil( 
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveEndUntil( 
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paste( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertBreak( 
            /* [optional][in] */ VARIANT *Type) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertFile( 
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *Link,
            /* [optional][in] */ VARIANT *Attachment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InStory( 
            /* [in] */ Range *Range,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InRange( 
            /* [in] */ Range *Range,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WholeStory( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Expand( 
            /* [optional][in] */ VARIANT *Unit,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertParagraph( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertParagraphAfter( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ConvertToTableOld( 
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *NumRows,
            /* [optional][in] */ VARIANT *NumColumns,
            /* [optional][in] */ VARIANT *InitialColumnWidth,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ApplyBorders,
            /* [optional][in] */ VARIANT *ApplyShading,
            /* [optional][in] */ VARIANT *ApplyFont,
            /* [optional][in] */ VARIANT *ApplyColor,
            /* [optional][in] */ VARIANT *ApplyHeadingRows,
            /* [optional][in] */ VARIANT *ApplyLastRow,
            /* [optional][in] */ VARIANT *ApplyFirstColumn,
            /* [optional][in] */ VARIANT *ApplyLastColumn,
            /* [optional][in] */ VARIANT *AutoFit,
            /* [retval][out] */ Table **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE InsertDateTimeOld( 
            /* [optional][in] */ VARIANT *DateTimeFormat,
            /* [optional][in] */ VARIANT *InsertAsField,
            /* [optional][in] */ VARIANT *InsertAsFullWidth) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertSymbol( 
            /* [in] */ long CharacterNumber,
            /* [optional][in] */ VARIANT *Font,
            /* [optional][in] */ VARIANT *Unicode,
            /* [optional][in] */ VARIANT *Bias) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE InsertCrossReference_2002( 
            /* [in] */ VARIANT *ReferenceType,
            /* [in] */ WdReferenceKind ReferenceKind,
            /* [in] */ VARIANT *ReferenceItem,
            /* [optional][in] */ VARIANT *InsertAsHyperlink,
            /* [optional][in] */ VARIANT *IncludePosition) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE InsertCaptionXP( 
            /* [in] */ VARIANT *Label,
            /* [optional][in] */ VARIANT *Title,
            /* [optional][in] */ VARIANT *TitleAutoText,
            /* [optional][in] */ VARIANT *Position) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyAsPicture( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE SortOld( 
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *FieldNumber,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *FieldNumber2,
            /* [optional][in] */ VARIANT *SortFieldType2,
            /* [optional][in] */ VARIANT *SortOrder2,
            /* [optional][in] */ VARIANT *FieldNumber3,
            /* [optional][in] */ VARIANT *SortFieldType3,
            /* [optional][in] */ VARIANT *SortOrder3,
            /* [optional][in] */ VARIANT *SortColumn,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *LanguageID) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SortAscending( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SortDescending( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsEqual( 
            /* [in] */ Range *Range,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Calculate( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GoTo( 
            /* [optional][in] */ VARIANT *What,
            /* [optional][in] */ VARIANT *Which,
            /* [optional][in] */ VARIANT *Count,
            /* [optional][in] */ VARIANT *Name,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GoToNext( 
            /* [in] */ WdGoToItem What,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GoToPrevious( 
            /* [in] */ WdGoToItem What,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PasteSpecial( 
            /* [optional][in] */ VARIANT *IconIndex,
            /* [optional][in] */ VARIANT *Link,
            /* [optional][in] */ VARIANT *Placement,
            /* [optional][in] */ VARIANT *DisplayAsIcon,
            /* [optional][in] */ VARIANT *DataType,
            /* [optional][in] */ VARIANT *IconFileName,
            /* [optional][in] */ VARIANT *IconLabel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE LookupNameProperties( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ComputeStatistics( 
            /* [in] */ WdStatistic Statistic,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Relocate( 
            /* [in] */ long Direction) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckSynonyms( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SubscribeTo( 
            /* [in] */ BSTR Edition,
            /* [optional][in] */ VARIANT *Format) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreatePublisher( 
            /* [optional][in] */ VARIANT *Edition,
            /* [optional][in] */ VARIANT *ContainsPICT,
            /* [optional][in] */ VARIANT *ContainsRTF,
            /* [optional][in] */ VARIANT *ContainsText) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertAutoText( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertDatabase( 
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *Style,
            /* [optional][in] */ VARIANT *LinkToSource,
            /* [optional][in] */ VARIANT *Connection,
            /* [optional][in] */ VARIANT *SQLStatement,
            /* [optional][in] */ VARIANT *SQLStatement1,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [optional][in] */ VARIANT *DataSource,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *IncludeFields) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AutoFormat( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckGrammar( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckSpelling( 
            /* [optional][in] */ VARIANT *CustomDictionary,
            /* [optional][in] */ VARIANT *IgnoreUppercase,
            /* [optional][in] */ VARIANT *AlwaysSuggest,
            /* [optional][in] */ VARIANT *CustomDictionary2,
            /* [optional][in] */ VARIANT *CustomDictionary3,
            /* [optional][in] */ VARIANT *CustomDictionary4,
            /* [optional][in] */ VARIANT *CustomDictionary5,
            /* [optional][in] */ VARIANT *CustomDictionary6,
            /* [optional][in] */ VARIANT *CustomDictionary7,
            /* [optional][in] */ VARIANT *CustomDictionary8,
            /* [optional][in] */ VARIANT *CustomDictionary9,
            /* [optional][in] */ VARIANT *CustomDictionary10) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetSpellingSuggestions( 
            /* [optional][in] */ VARIANT *CustomDictionary,
            /* [optional][in] */ VARIANT *IgnoreUppercase,
            /* [optional][in] */ VARIANT *MainDictionary,
            /* [optional][in] */ VARIANT *SuggestionMode,
            /* [optional][in] */ VARIANT *CustomDictionary2,
            /* [optional][in] */ VARIANT *CustomDictionary3,
            /* [optional][in] */ VARIANT *CustomDictionary4,
            /* [optional][in] */ VARIANT *CustomDictionary5,
            /* [optional][in] */ VARIANT *CustomDictionary6,
            /* [optional][in] */ VARIANT *CustomDictionary7,
            /* [optional][in] */ VARIANT *CustomDictionary8,
            /* [optional][in] */ VARIANT *CustomDictionary9,
            /* [optional][in] */ VARIANT *CustomDictionary10,
            /* [retval][out] */ SpellingSuggestions **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertParagraphBefore( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextSubdocument( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PreviousSubdocument( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertHangulAndHanja( 
            /* [optional][in] */ VARIANT *ConversionsMode,
            /* [optional][in] */ VARIANT *FastConversion,
            /* [optional][in] */ VARIANT *CheckHangulEnding,
            /* [optional][in] */ VARIANT *EnableRecentOrdering,
            /* [optional][in] */ VARIANT *CustomDictionary) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PasteAsNestedTable( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ModifyEnclosure( 
            /* [in] */ VARIANT *Style,
            /* [optional][in] */ VARIANT *Symbol,
            /* [optional][in] */ VARIANT *EnclosedText) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PhoneticGuide( 
            /* [in] */ BSTR Text,
            /* [defaultvalue][optional][in] */ WdPhoneticGuideAlignmentType Alignment = -1,
            /* [defaultvalue][optional][in] */ long Raise = 0,
            /* [defaultvalue][optional][in] */ long FontSize = 0,
            /* [defaultvalue][optional][in] */ BSTR FontName = L"") = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertDateTime( 
            /* [optional][in] */ VARIANT *DateTimeFormat,
            /* [optional][in] */ VARIANT *InsertAsField,
            /* [optional][in] */ VARIANT *InsertAsFullWidth,
            /* [optional][in] */ VARIANT *DateLanguage,
            /* [optional][in] */ VARIANT *CalendarType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Sort( 
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *FieldNumber,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *FieldNumber2,
            /* [optional][in] */ VARIANT *SortFieldType2,
            /* [optional][in] */ VARIANT *SortOrder2,
            /* [optional][in] */ VARIANT *FieldNumber3,
            /* [optional][in] */ VARIANT *SortFieldType3,
            /* [optional][in] */ VARIANT *SortOrder3,
            /* [optional][in] */ VARIANT *SortColumn,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *BidiSort,
            /* [optional][in] */ VARIANT *IgnoreThe,
            /* [optional][in] */ VARIANT *IgnoreKashida,
            /* [optional][in] */ VARIANT *IgnoreDiacritics,
            /* [optional][in] */ VARIANT *IgnoreHe,
            /* [optional][in] */ VARIANT *LanguageID) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DetectLanguage( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToTable( 
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *NumRows,
            /* [optional][in] */ VARIANT *NumColumns,
            /* [optional][in] */ VARIANT *InitialColumnWidth,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ApplyBorders,
            /* [optional][in] */ VARIANT *ApplyShading,
            /* [optional][in] */ VARIANT *ApplyFont,
            /* [optional][in] */ VARIANT *ApplyColor,
            /* [optional][in] */ VARIANT *ApplyHeadingRows,
            /* [optional][in] */ VARIANT *ApplyLastRow,
            /* [optional][in] */ VARIANT *ApplyFirstColumn,
            /* [optional][in] */ VARIANT *ApplyLastColumn,
            /* [optional][in] */ VARIANT *AutoFit,
            /* [optional][in] */ VARIANT *AutoFitBehavior,
            /* [optional][in] */ VARIANT *DefaultTableBehavior,
            /* [retval][out] */ Table **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TCSCConverter( 
            /* [defaultvalue][optional][in] */ WdTCSCConverterDirection WdTCSCConverterDirection = 2,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL CommonTerms = 0,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseVariants = 0) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageDetected( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageDetected( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FitTextWidth( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FitTextWidth( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalInVertical( 
            /* [retval][out] */ WdHorizontalInVerticalType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalInVertical( 
            /* [in] */ WdHorizontalInVerticalType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TwoLinesInOne( 
            /* [retval][out] */ WdTwoLinesInOneType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TwoLinesInOne( 
            /* [in] */ WdTwoLinesInOneType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CombineCharacters( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CombineCharacters( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoProofing( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoProofing( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TopLevelTables( 
            /* [retval][out] */ Tables **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Scripts( 
            /* [retval][out] */ /* external definition not present */ Scripts **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CharacterWidth( 
            /* [retval][out] */ WdCharacterWidth *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CharacterWidth( 
            /* [in] */ WdCharacterWidth prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kana( 
            /* [retval][out] */ WdKana *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Kana( 
            /* [in] */ WdKana prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BoldBi( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BoldBi( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ItalicBi( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ItalicBi( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ID( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HTMLDivisions( 
            /* [retval][out] */ HTMLDivisions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartTags( 
            /* [retval][out] */ SmartTags **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowAll( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowAll( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Document( 
            /* [retval][out] */ _Document **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FootnoteOptions( 
            /* [retval][out] */ FootnoteOptions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndnoteOptions( 
            /* [retval][out] */ EndnoteOptions **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PasteAndFormat( 
            /* [in] */ WdRecoveryType Type) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PasteExcelTable( 
            /* [in] */ VARIANT_BOOL LinkedToExcel,
            /* [in] */ VARIANT_BOOL WordFormatting,
            /* [in] */ VARIANT_BOOL RTF) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PasteAppendTable( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XMLNodes( 
            /* [retval][out] */ XMLNodes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XMLParentNode( 
            /* [retval][out] */ XMLNode **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Editors( 
            /* [retval][out] */ Editors **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XML( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL DataOnly,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnhMetaFileBits( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GoToEditableRange( 
            /* [optional][in] */ VARIANT *EditorID,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertXML( 
            /* [in] */ BSTR XML,
            /* [optional][in] */ VARIANT *Transform) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertCaption( 
            /* [in] */ VARIANT *Label,
            /* [optional][in] */ VARIANT *Title,
            /* [optional][in] */ VARIANT *TitleAutoText,
            /* [optional][in] */ VARIANT *Position,
            /* [optional][in] */ VARIANT *ExcludeLabel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertCrossReference( 
            /* [in] */ VARIANT *ReferenceType,
            /* [in] */ WdReferenceKind ReferenceKind,
            /* [in] */ VARIANT *ReferenceItem,
            /* [optional][in] */ VARIANT *InsertAsHyperlink,
            /* [optional][in] */ VARIANT *IncludePosition,
            /* [optional][in] */ VARIANT *SeparateNumbers,
            /* [optional][in] */ VARIANT *SeparatorString) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Range * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Range * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Range * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Range * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Range * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Range * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Range * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            Range * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            Range * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormattedText )( 
            Range * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormattedText )( 
            Range * This,
            /* [in] */ Range *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Start )( 
            Range * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Start )( 
            Range * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_End )( 
            Range * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_End )( 
            Range * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            Range * This,
            /* [retval][out] */ /* external definition not present */ Font **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Font )( 
            Range * This,
            /* [in] */ /* external definition not present */ Font *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Duplicate )( 
            Range * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StoryType )( 
            Range * This,
            /* [retval][out] */ WdStoryType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Tables )( 
            Range * This,
            /* [retval][out] */ Tables **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Words )( 
            Range * This,
            /* [retval][out] */ Words **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Sentences )( 
            Range * This,
            /* [retval][out] */ Sentences **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Characters )( 
            Range * This,
            /* [retval][out] */ Characters **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Footnotes )( 
            Range * This,
            /* [retval][out] */ Footnotes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Endnotes )( 
            Range * This,
            /* [retval][out] */ Endnotes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comments )( 
            Range * This,
            /* [retval][out] */ Comments **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Cells )( 
            Range * This,
            /* [retval][out] */ Cells **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Sections )( 
            Range * This,
            /* [retval][out] */ Sections **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Paragraphs )( 
            Range * This,
            /* [retval][out] */ Paragraphs **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            Range * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            Range * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            Range * This,
            /* [retval][out] */ Shading **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRetrievalMode )( 
            Range * This,
            /* [retval][out] */ TextRetrievalMode **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextRetrievalMode )( 
            Range * This,
            /* [in] */ TextRetrievalMode *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fields )( 
            Range * This,
            /* [retval][out] */ Fields **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormFields )( 
            Range * This,
            /* [retval][out] */ FormFields **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Frames )( 
            Range * This,
            /* [retval][out] */ Frames **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__ParagraphFormat )( 
            Range * This,
            /* [retval][out] */ _ParagraphFormat **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put__ParagraphFormat )( 
            Range * This,
            /* [in] */ _ParagraphFormat *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListFormat )( 
            Range * This,
            /* [retval][out] */ ListFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bookmarks )( 
            Range * This,
            /* [retval][out] */ Bookmarks **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Range * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Range * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Range * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bold )( 
            Range * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Bold )( 
            Range * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Italic )( 
            Range * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Italic )( 
            Range * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Underline )( 
            Range * This,
            /* [retval][out] */ WdUnderline *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Underline )( 
            Range * This,
            /* [in] */ WdUnderline prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EmphasisMark )( 
            Range * This,
            /* [retval][out] */ WdEmphasisMark *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EmphasisMark )( 
            Range * This,
            /* [in] */ WdEmphasisMark prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisableCharacterSpaceGrid )( 
            Range * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisableCharacterSpaceGrid )( 
            Range * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Revisions )( 
            Range * This,
            /* [retval][out] */ Revisions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            Range * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            Range * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StoryLength )( 
            Range * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageID )( 
            Range * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageID )( 
            Range * This,
            /* [in] */ WdLanguageID prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SynonymInfo )( 
            Range * This,
            /* [retval][out] */ SynonymInfo **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            Range * This,
            /* [retval][out] */ Hyperlinks **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListParagraphs )( 
            Range * This,
            /* [retval][out] */ ListParagraphs **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Subdocuments )( 
            Range * This,
            /* [retval][out] */ Subdocuments **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GrammarChecked )( 
            Range * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GrammarChecked )( 
            Range * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpellingChecked )( 
            Range * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpellingChecked )( 
            Range * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HighlightColorIndex )( 
            Range * This,
            /* [retval][out] */ WdColorIndex *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HighlightColorIndex )( 
            Range * This,
            /* [in] */ WdColorIndex prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Columns )( 
            Range * This,
            /* [retval][out] */ Columns **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rows )( 
            Range * This,
            /* [retval][out] */ Rows **prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanEdit )( 
            Range * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanPaste )( 
            Range * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsEndOfRowMark )( 
            Range * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BookmarkID )( 
            Range * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PreviousBookmarkID )( 
            Range * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Find )( 
            Range * This,
            /* [retval][out] */ Find **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageSetup )( 
            Range * This,
            /* [retval][out] */ PageSetup **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageSetup )( 
            Range * This,
            /* [in] */ PageSetup *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShapeRange )( 
            Range * This,
            /* [retval][out] */ /* external definition not present */ ShapeRange **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Case )( 
            Range * This,
            /* [retval][out] */ WdCharacterCase *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Case )( 
            Range * This,
            /* [in] */ WdCharacterCase prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Information )( 
            Range * This,
            /* [in] */ WdInformation Type,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadabilityStatistics )( 
            Range * This,
            /* [retval][out] */ ReadabilityStatistics **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GrammaticalErrors )( 
            Range * This,
            /* [retval][out] */ ProofreadingErrors **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpellingErrors )( 
            Range * This,
            /* [retval][out] */ ProofreadingErrors **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Orientation )( 
            Range * This,
            /* [retval][out] */ WdTextOrientation *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Orientation )( 
            Range * This,
            /* [in] */ WdTextOrientation prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InlineShapes )( 
            Range * This,
            /* [retval][out] */ InlineShapes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NextStoryRange )( 
            Range * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageIDFarEast )( 
            Range * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageIDFarEast )( 
            Range * This,
            /* [in] */ WdLanguageID prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageIDOther )( 
            Range * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageIDOther )( 
            Range * This,
            /* [in] */ WdLanguageID prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetRange )( 
            Range * This,
            /* [in] */ long Start,
            /* [in] */ long End);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Collapse )( 
            Range * This,
            /* [optional][in] */ VARIANT *Direction);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertBefore )( 
            Range * This,
            /* [in] */ BSTR Text);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertAfter )( 
            Range * This,
            /* [in] */ BSTR Text);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Next )( 
            Range * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Previous )( 
            Range * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StartOf )( 
            Range * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndOf )( 
            Range * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            Range * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveStart )( 
            Range * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveEnd )( 
            Range * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveWhile )( 
            Range * This,
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveStartWhile )( 
            Range * This,
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveEndWhile )( 
            Range * This,
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveUntil )( 
            Range * This,
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveStartUntil )( 
            Range * This,
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveEndUntil )( 
            Range * This,
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paste )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertBreak )( 
            Range * This,
            /* [optional][in] */ VARIANT *Type);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertFile )( 
            Range * This,
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *Link,
            /* [optional][in] */ VARIANT *Attachment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InStory )( 
            Range * This,
            /* [in] */ Range *Range,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InRange )( 
            Range * This,
            /* [in] */ Range *Range,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Range * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WholeStory )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Expand )( 
            Range * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertParagraph )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertParagraphAfter )( 
            Range * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToTableOld )( 
            Range * This,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *NumRows,
            /* [optional][in] */ VARIANT *NumColumns,
            /* [optional][in] */ VARIANT *InitialColumnWidth,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ApplyBorders,
            /* [optional][in] */ VARIANT *ApplyShading,
            /* [optional][in] */ VARIANT *ApplyFont,
            /* [optional][in] */ VARIANT *ApplyColor,
            /* [optional][in] */ VARIANT *ApplyHeadingRows,
            /* [optional][in] */ VARIANT *ApplyLastRow,
            /* [optional][in] */ VARIANT *ApplyFirstColumn,
            /* [optional][in] */ VARIANT *ApplyLastColumn,
            /* [optional][in] */ VARIANT *AutoFit,
            /* [retval][out] */ Table **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *InsertDateTimeOld )( 
            Range * This,
            /* [optional][in] */ VARIANT *DateTimeFormat,
            /* [optional][in] */ VARIANT *InsertAsField,
            /* [optional][in] */ VARIANT *InsertAsFullWidth);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertSymbol )( 
            Range * This,
            /* [in] */ long CharacterNumber,
            /* [optional][in] */ VARIANT *Font,
            /* [optional][in] */ VARIANT *Unicode,
            /* [optional][in] */ VARIANT *Bias);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *InsertCrossReference_2002 )( 
            Range * This,
            /* [in] */ VARIANT *ReferenceType,
            /* [in] */ WdReferenceKind ReferenceKind,
            /* [in] */ VARIANT *ReferenceItem,
            /* [optional][in] */ VARIANT *InsertAsHyperlink,
            /* [optional][in] */ VARIANT *IncludePosition);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *InsertCaptionXP )( 
            Range * This,
            /* [in] */ VARIANT *Label,
            /* [optional][in] */ VARIANT *Title,
            /* [optional][in] */ VARIANT *TitleAutoText,
            /* [optional][in] */ VARIANT *Position);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyAsPicture )( 
            Range * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *SortOld )( 
            Range * This,
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *FieldNumber,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *FieldNumber2,
            /* [optional][in] */ VARIANT *SortFieldType2,
            /* [optional][in] */ VARIANT *SortOrder2,
            /* [optional][in] */ VARIANT *FieldNumber3,
            /* [optional][in] */ VARIANT *SortFieldType3,
            /* [optional][in] */ VARIANT *SortOrder3,
            /* [optional][in] */ VARIANT *SortColumn,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *LanguageID);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SortAscending )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SortDescending )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqual )( 
            Range * This,
            /* [in] */ Range *Range,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Calculate )( 
            Range * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GoTo )( 
            Range * This,
            /* [optional][in] */ VARIANT *What,
            /* [optional][in] */ VARIANT *Which,
            /* [optional][in] */ VARIANT *Count,
            /* [optional][in] */ VARIANT *Name,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GoToNext )( 
            Range * This,
            /* [in] */ WdGoToItem What,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GoToPrevious )( 
            Range * This,
            /* [in] */ WdGoToItem What,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PasteSpecial )( 
            Range * This,
            /* [optional][in] */ VARIANT *IconIndex,
            /* [optional][in] */ VARIANT *Link,
            /* [optional][in] */ VARIANT *Placement,
            /* [optional][in] */ VARIANT *DisplayAsIcon,
            /* [optional][in] */ VARIANT *DataType,
            /* [optional][in] */ VARIANT *IconFileName,
            /* [optional][in] */ VARIANT *IconLabel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LookupNameProperties )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ComputeStatistics )( 
            Range * This,
            /* [in] */ WdStatistic Statistic,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Relocate )( 
            Range * This,
            /* [in] */ long Direction);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckSynonyms )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SubscribeTo )( 
            Range * This,
            /* [in] */ BSTR Edition,
            /* [optional][in] */ VARIANT *Format);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreatePublisher )( 
            Range * This,
            /* [optional][in] */ VARIANT *Edition,
            /* [optional][in] */ VARIANT *ContainsPICT,
            /* [optional][in] */ VARIANT *ContainsRTF,
            /* [optional][in] */ VARIANT *ContainsText);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertAutoText )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertDatabase )( 
            Range * This,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *Style,
            /* [optional][in] */ VARIANT *LinkToSource,
            /* [optional][in] */ VARIANT *Connection,
            /* [optional][in] */ VARIANT *SQLStatement,
            /* [optional][in] */ VARIANT *SQLStatement1,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [optional][in] */ VARIANT *DataSource,
            /* [optional][in] */ VARIANT *From,
            /* [optional][in] */ VARIANT *To,
            /* [optional][in] */ VARIANT *IncludeFields);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AutoFormat )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckGrammar )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckSpelling )( 
            Range * This,
            /* [optional][in] */ VARIANT *CustomDictionary,
            /* [optional][in] */ VARIANT *IgnoreUppercase,
            /* [optional][in] */ VARIANT *AlwaysSuggest,
            /* [optional][in] */ VARIANT *CustomDictionary2,
            /* [optional][in] */ VARIANT *CustomDictionary3,
            /* [optional][in] */ VARIANT *CustomDictionary4,
            /* [optional][in] */ VARIANT *CustomDictionary5,
            /* [optional][in] */ VARIANT *CustomDictionary6,
            /* [optional][in] */ VARIANT *CustomDictionary7,
            /* [optional][in] */ VARIANT *CustomDictionary8,
            /* [optional][in] */ VARIANT *CustomDictionary9,
            /* [optional][in] */ VARIANT *CustomDictionary10);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetSpellingSuggestions )( 
            Range * This,
            /* [optional][in] */ VARIANT *CustomDictionary,
            /* [optional][in] */ VARIANT *IgnoreUppercase,
            /* [optional][in] */ VARIANT *MainDictionary,
            /* [optional][in] */ VARIANT *SuggestionMode,
            /* [optional][in] */ VARIANT *CustomDictionary2,
            /* [optional][in] */ VARIANT *CustomDictionary3,
            /* [optional][in] */ VARIANT *CustomDictionary4,
            /* [optional][in] */ VARIANT *CustomDictionary5,
            /* [optional][in] */ VARIANT *CustomDictionary6,
            /* [optional][in] */ VARIANT *CustomDictionary7,
            /* [optional][in] */ VARIANT *CustomDictionary8,
            /* [optional][in] */ VARIANT *CustomDictionary9,
            /* [optional][in] */ VARIANT *CustomDictionary10,
            /* [retval][out] */ SpellingSuggestions **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertParagraphBefore )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextSubdocument )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PreviousSubdocument )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertHangulAndHanja )( 
            Range * This,
            /* [optional][in] */ VARIANT *ConversionsMode,
            /* [optional][in] */ VARIANT *FastConversion,
            /* [optional][in] */ VARIANT *CheckHangulEnding,
            /* [optional][in] */ VARIANT *EnableRecentOrdering,
            /* [optional][in] */ VARIANT *CustomDictionary);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PasteAsNestedTable )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ModifyEnclosure )( 
            Range * This,
            /* [in] */ VARIANT *Style,
            /* [optional][in] */ VARIANT *Symbol,
            /* [optional][in] */ VARIANT *EnclosedText);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PhoneticGuide )( 
            Range * This,
            /* [in] */ BSTR Text,
            /* [defaultvalue][optional][in] */ WdPhoneticGuideAlignmentType Alignment,
            /* [defaultvalue][optional][in] */ long Raise,
            /* [defaultvalue][optional][in] */ long FontSize,
            /* [defaultvalue][optional][in] */ BSTR FontName);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertDateTime )( 
            Range * This,
            /* [optional][in] */ VARIANT *DateTimeFormat,
            /* [optional][in] */ VARIANT *InsertAsField,
            /* [optional][in] */ VARIANT *InsertAsFullWidth,
            /* [optional][in] */ VARIANT *DateLanguage,
            /* [optional][in] */ VARIANT *CalendarType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Sort )( 
            Range * This,
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *FieldNumber,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *FieldNumber2,
            /* [optional][in] */ VARIANT *SortFieldType2,
            /* [optional][in] */ VARIANT *SortOrder2,
            /* [optional][in] */ VARIANT *FieldNumber3,
            /* [optional][in] */ VARIANT *SortFieldType3,
            /* [optional][in] */ VARIANT *SortOrder3,
            /* [optional][in] */ VARIANT *SortColumn,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *BidiSort,
            /* [optional][in] */ VARIANT *IgnoreThe,
            /* [optional][in] */ VARIANT *IgnoreKashida,
            /* [optional][in] */ VARIANT *IgnoreDiacritics,
            /* [optional][in] */ VARIANT *IgnoreHe,
            /* [optional][in] */ VARIANT *LanguageID);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DetectLanguage )( 
            Range * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToTable )( 
            Range * This,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *NumRows,
            /* [optional][in] */ VARIANT *NumColumns,
            /* [optional][in] */ VARIANT *InitialColumnWidth,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ApplyBorders,
            /* [optional][in] */ VARIANT *ApplyShading,
            /* [optional][in] */ VARIANT *ApplyFont,
            /* [optional][in] */ VARIANT *ApplyColor,
            /* [optional][in] */ VARIANT *ApplyHeadingRows,
            /* [optional][in] */ VARIANT *ApplyLastRow,
            /* [optional][in] */ VARIANT *ApplyFirstColumn,
            /* [optional][in] */ VARIANT *ApplyLastColumn,
            /* [optional][in] */ VARIANT *AutoFit,
            /* [optional][in] */ VARIANT *AutoFitBehavior,
            /* [optional][in] */ VARIANT *DefaultTableBehavior,
            /* [retval][out] */ Table **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TCSCConverter )( 
            Range * This,
            /* [defaultvalue][optional][in] */ WdTCSCConverterDirection WdTCSCConverterDirection,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL CommonTerms,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL UseVariants);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageDetected )( 
            Range * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageDetected )( 
            Range * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FitTextWidth )( 
            Range * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FitTextWidth )( 
            Range * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalInVertical )( 
            Range * This,
            /* [retval][out] */ WdHorizontalInVerticalType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalInVertical )( 
            Range * This,
            /* [in] */ WdHorizontalInVerticalType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TwoLinesInOne )( 
            Range * This,
            /* [retval][out] */ WdTwoLinesInOneType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TwoLinesInOne )( 
            Range * This,
            /* [in] */ WdTwoLinesInOneType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CombineCharacters )( 
            Range * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CombineCharacters )( 
            Range * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoProofing )( 
            Range * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoProofing )( 
            Range * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TopLevelTables )( 
            Range * This,
            /* [retval][out] */ Tables **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Scripts )( 
            Range * This,
            /* [retval][out] */ /* external definition not present */ Scripts **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterWidth )( 
            Range * This,
            /* [retval][out] */ WdCharacterWidth *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CharacterWidth )( 
            Range * This,
            /* [in] */ WdCharacterWidth prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kana )( 
            Range * This,
            /* [retval][out] */ WdKana *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Kana )( 
            Range * This,
            /* [in] */ WdKana prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BoldBi )( 
            Range * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BoldBi )( 
            Range * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ItalicBi )( 
            Range * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ItalicBi )( 
            Range * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            Range * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ID )( 
            Range * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HTMLDivisions )( 
            Range * This,
            /* [retval][out] */ HTMLDivisions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartTags )( 
            Range * This,
            /* [retval][out] */ SmartTags **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowAll )( 
            Range * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowAll )( 
            Range * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Document )( 
            Range * This,
            /* [retval][out] */ _Document **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FootnoteOptions )( 
            Range * This,
            /* [retval][out] */ FootnoteOptions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndnoteOptions )( 
            Range * This,
            /* [retval][out] */ EndnoteOptions **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PasteAndFormat )( 
            Range * This,
            /* [in] */ WdRecoveryType Type);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PasteExcelTable )( 
            Range * This,
            /* [in] */ VARIANT_BOOL LinkedToExcel,
            /* [in] */ VARIANT_BOOL WordFormatting,
            /* [in] */ VARIANT_BOOL RTF);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PasteAppendTable )( 
            Range * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XMLNodes )( 
            Range * This,
            /* [retval][out] */ XMLNodes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XMLParentNode )( 
            Range * This,
            /* [retval][out] */ XMLNode **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Editors )( 
            Range * This,
            /* [retval][out] */ Editors **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            Range * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL DataOnly,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnhMetaFileBits )( 
            Range * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GoToEditableRange )( 
            Range * This,
            /* [optional][in] */ VARIANT *EditorID,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertXML )( 
            Range * This,
            /* [in] */ BSTR XML,
            /* [optional][in] */ VARIANT *Transform);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertCaption )( 
            Range * This,
            /* [in] */ VARIANT *Label,
            /* [optional][in] */ VARIANT *Title,
            /* [optional][in] */ VARIANT *TitleAutoText,
            /* [optional][in] */ VARIANT *Position,
            /* [optional][in] */ VARIANT *ExcludeLabel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertCrossReference )( 
            Range * This,
            /* [in] */ VARIANT *ReferenceType,
            /* [in] */ WdReferenceKind ReferenceKind,
            /* [in] */ VARIANT *ReferenceItem,
            /* [optional][in] */ VARIANT *InsertAsHyperlink,
            /* [optional][in] */ VARIANT *IncludePosition,
            /* [optional][in] */ VARIANT *SeparateNumbers,
            /* [optional][in] */ VARIANT *SeparatorString);
        
        END_INTERFACE
    } RangeVtbl;

    interface Range
    {
        CONST_VTBL struct RangeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Range_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Range_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Range_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Range_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Range_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Range_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Range_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Range_get_Text(This,prop)	\
    ( (This)->lpVtbl -> get_Text(This,prop) ) 

#define Range_put_Text(This,prop)	\
    ( (This)->lpVtbl -> put_Text(This,prop) ) 

#define Range_get_FormattedText(This,prop)	\
    ( (This)->lpVtbl -> get_FormattedText(This,prop) ) 

#define Range_put_FormattedText(This,prop)	\
    ( (This)->lpVtbl -> put_FormattedText(This,prop) ) 

#define Range_get_Start(This,prop)	\
    ( (This)->lpVtbl -> get_Start(This,prop) ) 

#define Range_put_Start(This,prop)	\
    ( (This)->lpVtbl -> put_Start(This,prop) ) 

#define Range_get_End(This,prop)	\
    ( (This)->lpVtbl -> get_End(This,prop) ) 

#define Range_put_End(This,prop)	\
    ( (This)->lpVtbl -> put_End(This,prop) ) 

#define Range_get_Font(This,prop)	\
    ( (This)->lpVtbl -> get_Font(This,prop) ) 

#define Range_put_Font(This,prop)	\
    ( (This)->lpVtbl -> put_Font(This,prop) ) 

#define Range_get_Duplicate(This,prop)	\
    ( (This)->lpVtbl -> get_Duplicate(This,prop) ) 

#define Range_get_StoryType(This,prop)	\
    ( (This)->lpVtbl -> get_StoryType(This,prop) ) 

#define Range_get_Tables(This,prop)	\
    ( (This)->lpVtbl -> get_Tables(This,prop) ) 

#define Range_get_Words(This,prop)	\
    ( (This)->lpVtbl -> get_Words(This,prop) ) 

#define Range_get_Sentences(This,prop)	\
    ( (This)->lpVtbl -> get_Sentences(This,prop) ) 

#define Range_get_Characters(This,prop)	\
    ( (This)->lpVtbl -> get_Characters(This,prop) ) 

#define Range_get_Footnotes(This,prop)	\
    ( (This)->lpVtbl -> get_Footnotes(This,prop) ) 

#define Range_get_Endnotes(This,prop)	\
    ( (This)->lpVtbl -> get_Endnotes(This,prop) ) 

#define Range_get_Comments(This,prop)	\
    ( (This)->lpVtbl -> get_Comments(This,prop) ) 

#define Range_get_Cells(This,prop)	\
    ( (This)->lpVtbl -> get_Cells(This,prop) ) 

#define Range_get_Sections(This,prop)	\
    ( (This)->lpVtbl -> get_Sections(This,prop) ) 

#define Range_get_Paragraphs(This,prop)	\
    ( (This)->lpVtbl -> get_Paragraphs(This,prop) ) 

#define Range_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define Range_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define Range_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define Range_get_TextRetrievalMode(This,prop)	\
    ( (This)->lpVtbl -> get_TextRetrievalMode(This,prop) ) 

#define Range_put_TextRetrievalMode(This,prop)	\
    ( (This)->lpVtbl -> put_TextRetrievalMode(This,prop) ) 

#define Range_get_Fields(This,prop)	\
    ( (This)->lpVtbl -> get_Fields(This,prop) ) 

#define Range_get_FormFields(This,prop)	\
    ( (This)->lpVtbl -> get_FormFields(This,prop) ) 

#define Range_get_Frames(This,prop)	\
    ( (This)->lpVtbl -> get_Frames(This,prop) ) 

#define Range_get__ParagraphFormat(This,prop)	\
    ( (This)->lpVtbl -> get__ParagraphFormat(This,prop) ) 

#define Range_put__ParagraphFormat(This,prop)	\
    ( (This)->lpVtbl -> put__ParagraphFormat(This,prop) ) 

#define Range_get_ListFormat(This,prop)	\
    ( (This)->lpVtbl -> get_ListFormat(This,prop) ) 

#define Range_get_Bookmarks(This,prop)	\
    ( (This)->lpVtbl -> get_Bookmarks(This,prop) ) 

#define Range_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Range_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Range_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Range_get_Bold(This,prop)	\
    ( (This)->lpVtbl -> get_Bold(This,prop) ) 

#define Range_put_Bold(This,prop)	\
    ( (This)->lpVtbl -> put_Bold(This,prop) ) 

#define Range_get_Italic(This,prop)	\
    ( (This)->lpVtbl -> get_Italic(This,prop) ) 

#define Range_put_Italic(This,prop)	\
    ( (This)->lpVtbl -> put_Italic(This,prop) ) 

#define Range_get_Underline(This,prop)	\
    ( (This)->lpVtbl -> get_Underline(This,prop) ) 

#define Range_put_Underline(This,prop)	\
    ( (This)->lpVtbl -> put_Underline(This,prop) ) 

#define Range_get_EmphasisMark(This,prop)	\
    ( (This)->lpVtbl -> get_EmphasisMark(This,prop) ) 

#define Range_put_EmphasisMark(This,prop)	\
    ( (This)->lpVtbl -> put_EmphasisMark(This,prop) ) 

#define Range_get_DisableCharacterSpaceGrid(This,prop)	\
    ( (This)->lpVtbl -> get_DisableCharacterSpaceGrid(This,prop) ) 

#define Range_put_DisableCharacterSpaceGrid(This,prop)	\
    ( (This)->lpVtbl -> put_DisableCharacterSpaceGrid(This,prop) ) 

#define Range_get_Revisions(This,prop)	\
    ( (This)->lpVtbl -> get_Revisions(This,prop) ) 

#define Range_get_Style(This,prop)	\
    ( (This)->lpVtbl -> get_Style(This,prop) ) 

#define Range_put_Style(This,prop)	\
    ( (This)->lpVtbl -> put_Style(This,prop) ) 

#define Range_get_StoryLength(This,prop)	\
    ( (This)->lpVtbl -> get_StoryLength(This,prop) ) 

#define Range_get_LanguageID(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageID(This,prop) ) 

#define Range_put_LanguageID(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageID(This,prop) ) 

#define Range_get_SynonymInfo(This,prop)	\
    ( (This)->lpVtbl -> get_SynonymInfo(This,prop) ) 

#define Range_get_Hyperlinks(This,prop)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,prop) ) 

#define Range_get_ListParagraphs(This,prop)	\
    ( (This)->lpVtbl -> get_ListParagraphs(This,prop) ) 

#define Range_get_Subdocuments(This,prop)	\
    ( (This)->lpVtbl -> get_Subdocuments(This,prop) ) 

#define Range_get_GrammarChecked(This,prop)	\
    ( (This)->lpVtbl -> get_GrammarChecked(This,prop) ) 

#define Range_put_GrammarChecked(This,prop)	\
    ( (This)->lpVtbl -> put_GrammarChecked(This,prop) ) 

#define Range_get_SpellingChecked(This,prop)	\
    ( (This)->lpVtbl -> get_SpellingChecked(This,prop) ) 

#define Range_put_SpellingChecked(This,prop)	\
    ( (This)->lpVtbl -> put_SpellingChecked(This,prop) ) 

#define Range_get_HighlightColorIndex(This,prop)	\
    ( (This)->lpVtbl -> get_HighlightColorIndex(This,prop) ) 

#define Range_put_HighlightColorIndex(This,prop)	\
    ( (This)->lpVtbl -> put_HighlightColorIndex(This,prop) ) 

#define Range_get_Columns(This,prop)	\
    ( (This)->lpVtbl -> get_Columns(This,prop) ) 

#define Range_get_Rows(This,prop)	\
    ( (This)->lpVtbl -> get_Rows(This,prop) ) 

#define Range_get_CanEdit(This,prop)	\
    ( (This)->lpVtbl -> get_CanEdit(This,prop) ) 

#define Range_get_CanPaste(This,prop)	\
    ( (This)->lpVtbl -> get_CanPaste(This,prop) ) 

#define Range_get_IsEndOfRowMark(This,prop)	\
    ( (This)->lpVtbl -> get_IsEndOfRowMark(This,prop) ) 

#define Range_get_BookmarkID(This,prop)	\
    ( (This)->lpVtbl -> get_BookmarkID(This,prop) ) 

#define Range_get_PreviousBookmarkID(This,prop)	\
    ( (This)->lpVtbl -> get_PreviousBookmarkID(This,prop) ) 

#define Range_get_Find(This,prop)	\
    ( (This)->lpVtbl -> get_Find(This,prop) ) 

#define Range_get_PageSetup(This,prop)	\
    ( (This)->lpVtbl -> get_PageSetup(This,prop) ) 

#define Range_put_PageSetup(This,prop)	\
    ( (This)->lpVtbl -> put_PageSetup(This,prop) ) 

#define Range_get_ShapeRange(This,prop)	\
    ( (This)->lpVtbl -> get_ShapeRange(This,prop) ) 

#define Range_get_Case(This,prop)	\
    ( (This)->lpVtbl -> get_Case(This,prop) ) 

#define Range_put_Case(This,prop)	\
    ( (This)->lpVtbl -> put_Case(This,prop) ) 

#define Range_get_Information(This,Type,prop)	\
    ( (This)->lpVtbl -> get_Information(This,Type,prop) ) 

#define Range_get_ReadabilityStatistics(This,prop)	\
    ( (This)->lpVtbl -> get_ReadabilityStatistics(This,prop) ) 

#define Range_get_GrammaticalErrors(This,prop)	\
    ( (This)->lpVtbl -> get_GrammaticalErrors(This,prop) ) 

#define Range_get_SpellingErrors(This,prop)	\
    ( (This)->lpVtbl -> get_SpellingErrors(This,prop) ) 

#define Range_get_Orientation(This,prop)	\
    ( (This)->lpVtbl -> get_Orientation(This,prop) ) 

#define Range_put_Orientation(This,prop)	\
    ( (This)->lpVtbl -> put_Orientation(This,prop) ) 

#define Range_get_InlineShapes(This,prop)	\
    ( (This)->lpVtbl -> get_InlineShapes(This,prop) ) 

#define Range_get_NextStoryRange(This,prop)	\
    ( (This)->lpVtbl -> get_NextStoryRange(This,prop) ) 

#define Range_get_LanguageIDFarEast(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageIDFarEast(This,prop) ) 

#define Range_put_LanguageIDFarEast(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageIDFarEast(This,prop) ) 

#define Range_get_LanguageIDOther(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageIDOther(This,prop) ) 

#define Range_put_LanguageIDOther(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageIDOther(This,prop) ) 

#define Range_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define Range_SetRange(This,Start,End)	\
    ( (This)->lpVtbl -> SetRange(This,Start,End) ) 

#define Range_Collapse(This,Direction)	\
    ( (This)->lpVtbl -> Collapse(This,Direction) ) 

#define Range_InsertBefore(This,Text)	\
    ( (This)->lpVtbl -> InsertBefore(This,Text) ) 

#define Range_InsertAfter(This,Text)	\
    ( (This)->lpVtbl -> InsertAfter(This,Text) ) 

#define Range_Next(This,Unit,Count,prop)	\
    ( (This)->lpVtbl -> Next(This,Unit,Count,prop) ) 

#define Range_Previous(This,Unit,Count,prop)	\
    ( (This)->lpVtbl -> Previous(This,Unit,Count,prop) ) 

#define Range_StartOf(This,Unit,Extend,prop)	\
    ( (This)->lpVtbl -> StartOf(This,Unit,Extend,prop) ) 

#define Range_EndOf(This,Unit,Extend,prop)	\
    ( (This)->lpVtbl -> EndOf(This,Unit,Extend,prop) ) 

#define Range_Move(This,Unit,Count,prop)	\
    ( (This)->lpVtbl -> Move(This,Unit,Count,prop) ) 

#define Range_MoveStart(This,Unit,Count,prop)	\
    ( (This)->lpVtbl -> MoveStart(This,Unit,Count,prop) ) 

#define Range_MoveEnd(This,Unit,Count,prop)	\
    ( (This)->lpVtbl -> MoveEnd(This,Unit,Count,prop) ) 

#define Range_MoveWhile(This,Cset,Count,prop)	\
    ( (This)->lpVtbl -> MoveWhile(This,Cset,Count,prop) ) 

#define Range_MoveStartWhile(This,Cset,Count,prop)	\
    ( (This)->lpVtbl -> MoveStartWhile(This,Cset,Count,prop) ) 

#define Range_MoveEndWhile(This,Cset,Count,prop)	\
    ( (This)->lpVtbl -> MoveEndWhile(This,Cset,Count,prop) ) 

#define Range_MoveUntil(This,Cset,Count,prop)	\
    ( (This)->lpVtbl -> MoveUntil(This,Cset,Count,prop) ) 

#define Range_MoveStartUntil(This,Cset,Count,prop)	\
    ( (This)->lpVtbl -> MoveStartUntil(This,Cset,Count,prop) ) 

#define Range_MoveEndUntil(This,Cset,Count,prop)	\
    ( (This)->lpVtbl -> MoveEndUntil(This,Cset,Count,prop) ) 

#define Range_Cut(This)	\
    ( (This)->lpVtbl -> Cut(This) ) 

#define Range_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define Range_Paste(This)	\
    ( (This)->lpVtbl -> Paste(This) ) 

#define Range_InsertBreak(This,Type)	\
    ( (This)->lpVtbl -> InsertBreak(This,Type) ) 

#define Range_InsertFile(This,FileName,Range,ConfirmConversions,Link,Attachment)	\
    ( (This)->lpVtbl -> InsertFile(This,FileName,Range,ConfirmConversions,Link,Attachment) ) 

#define Range_InStory(This,Range,prop)	\
    ( (This)->lpVtbl -> InStory(This,Range,prop) ) 

#define Range_InRange(This,Range,prop)	\
    ( (This)->lpVtbl -> InRange(This,Range,prop) ) 

#define Range_Delete(This,Unit,Count,prop)	\
    ( (This)->lpVtbl -> Delete(This,Unit,Count,prop) ) 

#define Range_WholeStory(This)	\
    ( (This)->lpVtbl -> WholeStory(This) ) 

#define Range_Expand(This,Unit,prop)	\
    ( (This)->lpVtbl -> Expand(This,Unit,prop) ) 

#define Range_InsertParagraph(This)	\
    ( (This)->lpVtbl -> InsertParagraph(This) ) 

#define Range_InsertParagraphAfter(This)	\
    ( (This)->lpVtbl -> InsertParagraphAfter(This) ) 

#define Range_ConvertToTableOld(This,Separator,NumRows,NumColumns,InitialColumnWidth,Format,ApplyBorders,ApplyShading,ApplyFont,ApplyColor,ApplyHeadingRows,ApplyLastRow,ApplyFirstColumn,ApplyLastColumn,AutoFit,prop)	\
    ( (This)->lpVtbl -> ConvertToTableOld(This,Separator,NumRows,NumColumns,InitialColumnWidth,Format,ApplyBorders,ApplyShading,ApplyFont,ApplyColor,ApplyHeadingRows,ApplyLastRow,ApplyFirstColumn,ApplyLastColumn,AutoFit,prop) ) 

#define Range_InsertDateTimeOld(This,DateTimeFormat,InsertAsField,InsertAsFullWidth)	\
    ( (This)->lpVtbl -> InsertDateTimeOld(This,DateTimeFormat,InsertAsField,InsertAsFullWidth) ) 

#define Range_InsertSymbol(This,CharacterNumber,Font,Unicode,Bias)	\
    ( (This)->lpVtbl -> InsertSymbol(This,CharacterNumber,Font,Unicode,Bias) ) 

#define Range_InsertCrossReference_2002(This,ReferenceType,ReferenceKind,ReferenceItem,InsertAsHyperlink,IncludePosition)	\
    ( (This)->lpVtbl -> InsertCrossReference_2002(This,ReferenceType,ReferenceKind,ReferenceItem,InsertAsHyperlink,IncludePosition) ) 

#define Range_InsertCaptionXP(This,Label,Title,TitleAutoText,Position)	\
    ( (This)->lpVtbl -> InsertCaptionXP(This,Label,Title,TitleAutoText,Position) ) 

#define Range_CopyAsPicture(This)	\
    ( (This)->lpVtbl -> CopyAsPicture(This) ) 

#define Range_SortOld(This,ExcludeHeader,FieldNumber,SortFieldType,SortOrder,FieldNumber2,SortFieldType2,SortOrder2,FieldNumber3,SortFieldType3,SortOrder3,SortColumn,Separator,CaseSensitive,LanguageID)	\
    ( (This)->lpVtbl -> SortOld(This,ExcludeHeader,FieldNumber,SortFieldType,SortOrder,FieldNumber2,SortFieldType2,SortOrder2,FieldNumber3,SortFieldType3,SortOrder3,SortColumn,Separator,CaseSensitive,LanguageID) ) 

#define Range_SortAscending(This)	\
    ( (This)->lpVtbl -> SortAscending(This) ) 

#define Range_SortDescending(This)	\
    ( (This)->lpVtbl -> SortDescending(This) ) 

#define Range_IsEqual(This,Range,prop)	\
    ( (This)->lpVtbl -> IsEqual(This,Range,prop) ) 

#define Range_Calculate(This,prop)	\
    ( (This)->lpVtbl -> Calculate(This,prop) ) 

#define Range_GoTo(This,What,Which,Count,Name,prop)	\
    ( (This)->lpVtbl -> GoTo(This,What,Which,Count,Name,prop) ) 

#define Range_GoToNext(This,What,prop)	\
    ( (This)->lpVtbl -> GoToNext(This,What,prop) ) 

#define Range_GoToPrevious(This,What,prop)	\
    ( (This)->lpVtbl -> GoToPrevious(This,What,prop) ) 

#define Range_PasteSpecial(This,IconIndex,Link,Placement,DisplayAsIcon,DataType,IconFileName,IconLabel)	\
    ( (This)->lpVtbl -> PasteSpecial(This,IconIndex,Link,Placement,DisplayAsIcon,DataType,IconFileName,IconLabel) ) 

#define Range_LookupNameProperties(This)	\
    ( (This)->lpVtbl -> LookupNameProperties(This) ) 

#define Range_ComputeStatistics(This,Statistic,prop)	\
    ( (This)->lpVtbl -> ComputeStatistics(This,Statistic,prop) ) 

#define Range_Relocate(This,Direction)	\
    ( (This)->lpVtbl -> Relocate(This,Direction) ) 

#define Range_CheckSynonyms(This)	\
    ( (This)->lpVtbl -> CheckSynonyms(This) ) 

#define Range_SubscribeTo(This,Edition,Format)	\
    ( (This)->lpVtbl -> SubscribeTo(This,Edition,Format) ) 

#define Range_CreatePublisher(This,Edition,ContainsPICT,ContainsRTF,ContainsText)	\
    ( (This)->lpVtbl -> CreatePublisher(This,Edition,ContainsPICT,ContainsRTF,ContainsText) ) 

#define Range_InsertAutoText(This)	\
    ( (This)->lpVtbl -> InsertAutoText(This) ) 

#define Range_InsertDatabase(This,Format,Style,LinkToSource,Connection,SQLStatement,SQLStatement1,PasswordDocument,PasswordTemplate,WritePasswordDocument,WritePasswordTemplate,DataSource,From,To,IncludeFields)	\
    ( (This)->lpVtbl -> InsertDatabase(This,Format,Style,LinkToSource,Connection,SQLStatement,SQLStatement1,PasswordDocument,PasswordTemplate,WritePasswordDocument,WritePasswordTemplate,DataSource,From,To,IncludeFields) ) 

#define Range_AutoFormat(This)	\
    ( (This)->lpVtbl -> AutoFormat(This) ) 

#define Range_CheckGrammar(This)	\
    ( (This)->lpVtbl -> CheckGrammar(This) ) 

#define Range_CheckSpelling(This,CustomDictionary,IgnoreUppercase,AlwaysSuggest,CustomDictionary2,CustomDictionary3,CustomDictionary4,CustomDictionary5,CustomDictionary6,CustomDictionary7,CustomDictionary8,CustomDictionary9,CustomDictionary10)	\
    ( (This)->lpVtbl -> CheckSpelling(This,CustomDictionary,IgnoreUppercase,AlwaysSuggest,CustomDictionary2,CustomDictionary3,CustomDictionary4,CustomDictionary5,CustomDictionary6,CustomDictionary7,CustomDictionary8,CustomDictionary9,CustomDictionary10) ) 

#define Range_GetSpellingSuggestions(This,CustomDictionary,IgnoreUppercase,MainDictionary,SuggestionMode,CustomDictionary2,CustomDictionary3,CustomDictionary4,CustomDictionary5,CustomDictionary6,CustomDictionary7,CustomDictionary8,CustomDictionary9,CustomDictionary10,prop)	\
    ( (This)->lpVtbl -> GetSpellingSuggestions(This,CustomDictionary,IgnoreUppercase,MainDictionary,SuggestionMode,CustomDictionary2,CustomDictionary3,CustomDictionary4,CustomDictionary5,CustomDictionary6,CustomDictionary7,CustomDictionary8,CustomDictionary9,CustomDictionary10,prop) ) 

#define Range_InsertParagraphBefore(This)	\
    ( (This)->lpVtbl -> InsertParagraphBefore(This) ) 

#define Range_NextSubdocument(This)	\
    ( (This)->lpVtbl -> NextSubdocument(This) ) 

#define Range_PreviousSubdocument(This)	\
    ( (This)->lpVtbl -> PreviousSubdocument(This) ) 

#define Range_ConvertHangulAndHanja(This,ConversionsMode,FastConversion,CheckHangulEnding,EnableRecentOrdering,CustomDictionary)	\
    ( (This)->lpVtbl -> ConvertHangulAndHanja(This,ConversionsMode,FastConversion,CheckHangulEnding,EnableRecentOrdering,CustomDictionary) ) 

#define Range_PasteAsNestedTable(This)	\
    ( (This)->lpVtbl -> PasteAsNestedTable(This) ) 

#define Range_ModifyEnclosure(This,Style,Symbol,EnclosedText)	\
    ( (This)->lpVtbl -> ModifyEnclosure(This,Style,Symbol,EnclosedText) ) 

#define Range_PhoneticGuide(This,Text,Alignment,Raise,FontSize,FontName)	\
    ( (This)->lpVtbl -> PhoneticGuide(This,Text,Alignment,Raise,FontSize,FontName) ) 

#define Range_InsertDateTime(This,DateTimeFormat,InsertAsField,InsertAsFullWidth,DateLanguage,CalendarType)	\
    ( (This)->lpVtbl -> InsertDateTime(This,DateTimeFormat,InsertAsField,InsertAsFullWidth,DateLanguage,CalendarType) ) 

#define Range_Sort(This,ExcludeHeader,FieldNumber,SortFieldType,SortOrder,FieldNumber2,SortFieldType2,SortOrder2,FieldNumber3,SortFieldType3,SortOrder3,SortColumn,Separator,CaseSensitive,BidiSort,IgnoreThe,IgnoreKashida,IgnoreDiacritics,IgnoreHe,LanguageID)	\
    ( (This)->lpVtbl -> Sort(This,ExcludeHeader,FieldNumber,SortFieldType,SortOrder,FieldNumber2,SortFieldType2,SortOrder2,FieldNumber3,SortFieldType3,SortOrder3,SortColumn,Separator,CaseSensitive,BidiSort,IgnoreThe,IgnoreKashida,IgnoreDiacritics,IgnoreHe,LanguageID) ) 

#define Range_DetectLanguage(This)	\
    ( (This)->lpVtbl -> DetectLanguage(This) ) 

#define Range_ConvertToTable(This,Separator,NumRows,NumColumns,InitialColumnWidth,Format,ApplyBorders,ApplyShading,ApplyFont,ApplyColor,ApplyHeadingRows,ApplyLastRow,ApplyFirstColumn,ApplyLastColumn,AutoFit,AutoFitBehavior,DefaultTableBehavior,prop)	\
    ( (This)->lpVtbl -> ConvertToTable(This,Separator,NumRows,NumColumns,InitialColumnWidth,Format,ApplyBorders,ApplyShading,ApplyFont,ApplyColor,ApplyHeadingRows,ApplyLastRow,ApplyFirstColumn,ApplyLastColumn,AutoFit,AutoFitBehavior,DefaultTableBehavior,prop) ) 

#define Range_TCSCConverter(This,WdTCSCConverterDirection,CommonTerms,UseVariants)	\
    ( (This)->lpVtbl -> TCSCConverter(This,WdTCSCConverterDirection,CommonTerms,UseVariants) ) 

#define Range_get_LanguageDetected(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageDetected(This,prop) ) 

#define Range_put_LanguageDetected(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageDetected(This,prop) ) 

#define Range_get_FitTextWidth(This,prop)	\
    ( (This)->lpVtbl -> get_FitTextWidth(This,prop) ) 

#define Range_put_FitTextWidth(This,prop)	\
    ( (This)->lpVtbl -> put_FitTextWidth(This,prop) ) 

#define Range_get_HorizontalInVertical(This,prop)	\
    ( (This)->lpVtbl -> get_HorizontalInVertical(This,prop) ) 

#define Range_put_HorizontalInVertical(This,prop)	\
    ( (This)->lpVtbl -> put_HorizontalInVertical(This,prop) ) 

#define Range_get_TwoLinesInOne(This,prop)	\
    ( (This)->lpVtbl -> get_TwoLinesInOne(This,prop) ) 

#define Range_put_TwoLinesInOne(This,prop)	\
    ( (This)->lpVtbl -> put_TwoLinesInOne(This,prop) ) 

#define Range_get_CombineCharacters(This,prop)	\
    ( (This)->lpVtbl -> get_CombineCharacters(This,prop) ) 

#define Range_put_CombineCharacters(This,prop)	\
    ( (This)->lpVtbl -> put_CombineCharacters(This,prop) ) 

#define Range_get_NoProofing(This,prop)	\
    ( (This)->lpVtbl -> get_NoProofing(This,prop) ) 

#define Range_put_NoProofing(This,prop)	\
    ( (This)->lpVtbl -> put_NoProofing(This,prop) ) 

#define Range_get_TopLevelTables(This,prop)	\
    ( (This)->lpVtbl -> get_TopLevelTables(This,prop) ) 

#define Range_get_Scripts(This,prop)	\
    ( (This)->lpVtbl -> get_Scripts(This,prop) ) 

#define Range_get_CharacterWidth(This,prop)	\
    ( (This)->lpVtbl -> get_CharacterWidth(This,prop) ) 

#define Range_put_CharacterWidth(This,prop)	\
    ( (This)->lpVtbl -> put_CharacterWidth(This,prop) ) 

#define Range_get_Kana(This,prop)	\
    ( (This)->lpVtbl -> get_Kana(This,prop) ) 

#define Range_put_Kana(This,prop)	\
    ( (This)->lpVtbl -> put_Kana(This,prop) ) 

#define Range_get_BoldBi(This,prop)	\
    ( (This)->lpVtbl -> get_BoldBi(This,prop) ) 

#define Range_put_BoldBi(This,prop)	\
    ( (This)->lpVtbl -> put_BoldBi(This,prop) ) 

#define Range_get_ItalicBi(This,prop)	\
    ( (This)->lpVtbl -> get_ItalicBi(This,prop) ) 

#define Range_put_ItalicBi(This,prop)	\
    ( (This)->lpVtbl -> put_ItalicBi(This,prop) ) 

#define Range_get_ID(This,prop)	\
    ( (This)->lpVtbl -> get_ID(This,prop) ) 

#define Range_put_ID(This,prop)	\
    ( (This)->lpVtbl -> put_ID(This,prop) ) 

#define Range_get_HTMLDivisions(This,prop)	\
    ( (This)->lpVtbl -> get_HTMLDivisions(This,prop) ) 

#define Range_get_SmartTags(This,prop)	\
    ( (This)->lpVtbl -> get_SmartTags(This,prop) ) 

#define Range_get_ShowAll(This,prop)	\
    ( (This)->lpVtbl -> get_ShowAll(This,prop) ) 

#define Range_put_ShowAll(This,prop)	\
    ( (This)->lpVtbl -> put_ShowAll(This,prop) ) 

#define Range_get__Document(This,prop)	\
    ( (This)->lpVtbl -> get__Document(This,prop) ) 

#define Range_get_FootnoteOptions(This,prop)	\
    ( (This)->lpVtbl -> get_FootnoteOptions(This,prop) ) 

#define Range_get_EndnoteOptions(This,prop)	\
    ( (This)->lpVtbl -> get_EndnoteOptions(This,prop) ) 

#define Range_PasteAndFormat(This,Type)	\
    ( (This)->lpVtbl -> PasteAndFormat(This,Type) ) 

#define Range_PasteExcelTable(This,LinkedToExcel,WordFormatting,RTF)	\
    ( (This)->lpVtbl -> PasteExcelTable(This,LinkedToExcel,WordFormatting,RTF) ) 

#define Range_PasteAppendTable(This)	\
    ( (This)->lpVtbl -> PasteAppendTable(This) ) 

#define Range_get_XMLNodes(This,prop)	\
    ( (This)->lpVtbl -> get_XMLNodes(This,prop) ) 

#define Range_get_XMLParentNode(This,prop)	\
    ( (This)->lpVtbl -> get_XMLParentNode(This,prop) ) 

#define Range_get_Editors(This,prop)	\
    ( (This)->lpVtbl -> get_Editors(This,prop) ) 

#define Range_get_XML(This,DataOnly,prop)	\
    ( (This)->lpVtbl -> get_XML(This,DataOnly,prop) ) 

#define Range_get_EnhMetaFileBits(This,prop)	\
    ( (This)->lpVtbl -> get_EnhMetaFileBits(This,prop) ) 

#define Range_GoToEditableRange(This,EditorID,prop)	\
    ( (This)->lpVtbl -> GoToEditableRange(This,EditorID,prop) ) 

#define Range_InsertXML(This,XML,Transform)	\
    ( (This)->lpVtbl -> InsertXML(This,XML,Transform) ) 

#define Range_InsertCaption(This,Label,Title,TitleAutoText,Position,ExcludeLabel)	\
    ( (This)->lpVtbl -> InsertCaption(This,Label,Title,TitleAutoText,Position,ExcludeLabel) ) 

#define Range_InsertCrossReference(This,ReferenceType,ReferenceKind,ReferenceItem,InsertAsHyperlink,IncludePosition,SeparateNumbers,SeparatorString)	\
    ( (This)->lpVtbl -> InsertCrossReference(This,ReferenceType,ReferenceKind,ReferenceItem,InsertAsHyperlink,IncludePosition,SeparateNumbers,SeparatorString) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Range_InsertCrossReference_2002_Proxy( 
    Range * This,
    /* [in] */ VARIANT *ReferenceType,
    /* [in] */ WdReferenceKind ReferenceKind,
    /* [in] */ VARIANT *ReferenceItem,
    /* [optional][in] */ VARIANT *InsertAsHyperlink,
    /* [optional][in] */ VARIANT *IncludePosition);


void __RPC_STUB Range_InsertCrossReference_2002_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Range_InsertCaptionXP_Proxy( 
    Range * This,
    /* [in] */ VARIANT *Label,
    /* [optional][in] */ VARIANT *Title,
    /* [optional][in] */ VARIANT *TitleAutoText,
    /* [optional][in] */ VARIANT *Position);


void __RPC_STUB Range_InsertCaptionXP_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_CopyAsPicture_Proxy( 
    Range * This);


void __RPC_STUB Range_CopyAsPicture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Range_SortOld_Proxy( 
    Range * This,
    /* [optional][in] */ VARIANT *ExcludeHeader,
    /* [optional][in] */ VARIANT *FieldNumber,
    /* [optional][in] */ VARIANT *SortFieldType,
    /* [optional][in] */ VARIANT *SortOrder,
    /* [optional][in] */ VARIANT *FieldNumber2,
    /* [optional][in] */ VARIANT *SortFieldType2,
    /* [optional][in] */ VARIANT *SortOrder2,
    /* [optional][in] */ VARIANT *FieldNumber3,
    /* [optional][in] */ VARIANT *SortFieldType3,
    /* [optional][in] */ VARIANT *SortOrder3,
    /* [optional][in] */ VARIANT *SortColumn,
    /* [optional][in] */ VARIANT *Separator,
    /* [optional][in] */ VARIANT *CaseSensitive,
    /* [optional][in] */ VARIANT *LanguageID);


void __RPC_STUB Range_SortOld_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_SortAscending_Proxy( 
    Range * This);


void __RPC_STUB Range_SortAscending_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_SortDescending_Proxy( 
    Range * This);


void __RPC_STUB Range_SortDescending_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_IsEqual_Proxy( 
    Range * This,
    /* [in] */ Range *Range,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Range_IsEqual_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_Calculate_Proxy( 
    Range * This,
    /* [retval][out] */ int *prop);


void __RPC_STUB Range_Calculate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_GoTo_Proxy( 
    Range * This,
    /* [optional][in] */ VARIANT *What,
    /* [optional][in] */ VARIANT *Which,
    /* [optional][in] */ VARIANT *Count,
    /* [optional][in] */ VARIANT *Name,
    /* [retval][out] */ Range **prop);


void __RPC_STUB Range_GoTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_GoToNext_Proxy( 
    Range * This,
    /* [in] */ WdGoToItem What,
    /* [retval][out] */ Range **prop);


void __RPC_STUB Range_GoToNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_GoToPrevious_Proxy( 
    Range * This,
    /* [in] */ WdGoToItem What,
    /* [retval][out] */ Range **prop);


void __RPC_STUB Range_GoToPrevious_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_PasteSpecial_Proxy( 
    Range * This,
    /* [optional][in] */ VARIANT *IconIndex,
    /* [optional][in] */ VARIANT *Link,
    /* [optional][in] */ VARIANT *Placement,
    /* [optional][in] */ VARIANT *DisplayAsIcon,
    /* [optional][in] */ VARIANT *DataType,
    /* [optional][in] */ VARIANT *IconFileName,
    /* [optional][in] */ VARIANT *IconLabel);


void __RPC_STUB Range_PasteSpecial_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_LookupNameProperties_Proxy( 
    Range * This);


void __RPC_STUB Range_LookupNameProperties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_ComputeStatistics_Proxy( 
    Range * This,
    /* [in] */ WdStatistic Statistic,
    /* [retval][out] */ long *prop);


void __RPC_STUB Range_ComputeStatistics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_Relocate_Proxy( 
    Range * This,
    /* [in] */ long Direction);


void __RPC_STUB Range_Relocate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_CheckSynonyms_Proxy( 
    Range * This);


void __RPC_STUB Range_CheckSynonyms_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_SubscribeTo_Proxy( 
    Range * This,
    /* [in] */ BSTR Edition,
    /* [optional][in] */ VARIANT *Format);


void __RPC_STUB Range_SubscribeTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_CreatePublisher_Proxy( 
    Range * This,
    /* [optional][in] */ VARIANT *Edition,
    /* [optional][in] */ VARIANT *ContainsPICT,
    /* [optional][in] */ VARIANT *ContainsRTF,
    /* [optional][in] */ VARIANT *ContainsText);


void __RPC_STUB Range_CreatePublisher_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_InsertAutoText_Proxy( 
    Range * This);


void __RPC_STUB Range_InsertAutoText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_InsertDatabase_Proxy( 
    Range * This,
    /* [optional][in] */ VARIANT *Format,
    /* [optional][in] */ VARIANT *Style,
    /* [optional][in] */ VARIANT *LinkToSource,
    /* [optional][in] */ VARIANT *Connection,
    /* [optional][in] */ VARIANT *SQLStatement,
    /* [optional][in] */ VARIANT *SQLStatement1,
    /* [optional][in] */ VARIANT *PasswordDocument,
    /* [optional][in] */ VARIANT *PasswordTemplate,
    /* [optional][in] */ VARIANT *WritePasswordDocument,
    /* [optional][in] */ VARIANT *WritePasswordTemplate,
    /* [optional][in] */ VARIANT *DataSource,
    /* [optional][in] */ VARIANT *From,
    /* [optional][in] */ VARIANT *To,
    /* [optional][in] */ VARIANT *IncludeFields);


void __RPC_STUB Range_InsertDatabase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_AutoFormat_Proxy( 
    Range * This);


void __RPC_STUB Range_AutoFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_CheckGrammar_Proxy( 
    Range * This);


void __RPC_STUB Range_CheckGrammar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_CheckSpelling_Proxy( 
    Range * This,
    /* [optional][in] */ VARIANT *CustomDictionary,
    /* [optional][in] */ VARIANT *IgnoreUppercase,
    /* [optional][in] */ VARIANT *AlwaysSuggest,
    /* [optional][in] */ VARIANT *CustomDictionary2,
    /* [optional][in] */ VARIANT *CustomDictionary3,
    /* [optional][in] */ VARIANT *CustomDictionary4,
    /* [optional][in] */ VARIANT *CustomDictionary5,
    /* [optional][in] */ VARIANT *CustomDictionary6,
    /* [optional][in] */ VARIANT *CustomDictionary7,
    /* [optional][in] */ VARIANT *CustomDictionary8,
    /* [optional][in] */ VARIANT *CustomDictionary9,
    /* [optional][in] */ VARIANT *CustomDictionary10);


void __RPC_STUB Range_CheckSpelling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_GetSpellingSuggestions_Proxy( 
    Range * This,
    /* [optional][in] */ VARIANT *CustomDictionary,
    /* [optional][in] */ VARIANT *IgnoreUppercase,
    /* [optional][in] */ VARIANT *MainDictionary,
    /* [optional][in] */ VARIANT *SuggestionMode,
    /* [optional][in] */ VARIANT *CustomDictionary2,
    /* [optional][in] */ VARIANT *CustomDictionary3,
    /* [optional][in] */ VARIANT *CustomDictionary4,
    /* [optional][in] */ VARIANT *CustomDictionary5,
    /* [optional][in] */ VARIANT *CustomDictionary6,
    /* [optional][in] */ VARIANT *CustomDictionary7,
    /* [optional][in] */ VARIANT *CustomDictionary8,
    /* [optional][in] */ VARIANT *CustomDictionary9,
    /* [optional][in] */ VARIANT *CustomDictionary10,
    /* [retval][out] */ SpellingSuggestions **prop);


void __RPC_STUB Range_GetSpellingSuggestions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_InsertParagraphBefore_Proxy( 
    Range * This);


void __RPC_STUB Range_InsertParagraphBefore_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_NextSubdocument_Proxy( 
    Range * This);


void __RPC_STUB Range_NextSubdocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_PreviousSubdocument_Proxy( 
    Range * This);


void __RPC_STUB Range_PreviousSubdocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_ConvertHangulAndHanja_Proxy( 
    Range * This,
    /* [optional][in] */ VARIANT *ConversionsMode,
    /* [optional][in] */ VARIANT *FastConversion,
    /* [optional][in] */ VARIANT *CheckHangulEnding,
    /* [optional][in] */ VARIANT *EnableRecentOrdering,
    /* [optional][in] */ VARIANT *CustomDictionary);


void __RPC_STUB Range_ConvertHangulAndHanja_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_PasteAsNestedTable_Proxy( 
    Range * This);


void __RPC_STUB Range_PasteAsNestedTable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_ModifyEnclosure_Proxy( 
    Range * This,
    /* [in] */ VARIANT *Style,
    /* [optional][in] */ VARIANT *Symbol,
    /* [optional][in] */ VARIANT *EnclosedText);


void __RPC_STUB Range_ModifyEnclosure_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_PhoneticGuide_Proxy( 
    Range * This,
    /* [in] */ BSTR Text,
    /* [defaultvalue][optional][in] */ WdPhoneticGuideAlignmentType Alignment,
    /* [defaultvalue][optional][in] */ long Raise,
    /* [defaultvalue][optional][in] */ long FontSize,
    /* [defaultvalue][optional][in] */ BSTR FontName);


void __RPC_STUB Range_PhoneticGuide_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_InsertDateTime_Proxy( 
    Range * This,
    /* [optional][in] */ VARIANT *DateTimeFormat,
    /* [optional][in] */ VARIANT *InsertAsField,
    /* [optional][in] */ VARIANT *InsertAsFullWidth,
    /* [optional][in] */ VARIANT *DateLanguage,
    /* [optional][in] */ VARIANT *CalendarType);


void __RPC_STUB Range_InsertDateTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_Sort_Proxy( 
    Range * This,
    /* [optional][in] */ VARIANT *ExcludeHeader,
    /* [optional][in] */ VARIANT *FieldNumber,
    /* [optional][in] */ VARIANT *SortFieldType,
    /* [optional][in] */ VARIANT *SortOrder,
    /* [optional][in] */ VARIANT *FieldNumber2,
    /* [optional][in] */ VARIANT *SortFieldType2,
    /* [optional][in] */ VARIANT *SortOrder2,
    /* [optional][in] */ VARIANT *FieldNumber3,
    /* [optional][in] */ VARIANT *SortFieldType3,
    /* [optional][in] */ VARIANT *SortOrder3,
    /* [optional][in] */ VARIANT *SortColumn,
    /* [optional][in] */ VARIANT *Separator,
    /* [optional][in] */ VARIANT *CaseSensitive,
    /* [optional][in] */ VARIANT *BidiSort,
    /* [optional][in] */ VARIANT *IgnoreThe,
    /* [optional][in] */ VARIANT *IgnoreKashida,
    /* [optional][in] */ VARIANT *IgnoreDiacritics,
    /* [optional][in] */ VARIANT *IgnoreHe,
    /* [optional][in] */ VARIANT *LanguageID);


void __RPC_STUB Range_Sort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_DetectLanguage_Proxy( 
    Range * This);


void __RPC_STUB Range_DetectLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_ConvertToTable_Proxy( 
    Range * This,
    /* [optional][in] */ VARIANT *Separator,
    /* [optional][in] */ VARIANT *NumRows,
    /* [optional][in] */ VARIANT *NumColumns,
    /* [optional][in] */ VARIANT *InitialColumnWidth,
    /* [optional][in] */ VARIANT *Format,
    /* [optional][in] */ VARIANT *ApplyBorders,
    /* [optional][in] */ VARIANT *ApplyShading,
    /* [optional][in] */ VARIANT *ApplyFont,
    /* [optional][in] */ VARIANT *ApplyColor,
    /* [optional][in] */ VARIANT *ApplyHeadingRows,
    /* [optional][in] */ VARIANT *ApplyLastRow,
    /* [optional][in] */ VARIANT *ApplyFirstColumn,
    /* [optional][in] */ VARIANT *ApplyLastColumn,
    /* [optional][in] */ VARIANT *AutoFit,
    /* [optional][in] */ VARIANT *AutoFitBehavior,
    /* [optional][in] */ VARIANT *DefaultTableBehavior,
    /* [retval][out] */ Table **prop);


void __RPC_STUB Range_ConvertToTable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_TCSCConverter_Proxy( 
    Range * This,
    /* [defaultvalue][optional][in] */ WdTCSCConverterDirection WdTCSCConverterDirection,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL CommonTerms,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL UseVariants);


void __RPC_STUB Range_TCSCConverter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_LanguageDetected_Proxy( 
    Range * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Range_get_LanguageDetected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Range_put_LanguageDetected_Proxy( 
    Range * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Range_put_LanguageDetected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_FitTextWidth_Proxy( 
    Range * This,
    /* [retval][out] */ int *prop);


void __RPC_STUB Range_get_FitTextWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Range_put_FitTextWidth_Proxy( 
    Range * This,
    /* [in] */ int prop);


void __RPC_STUB Range_put_FitTextWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_HorizontalInVertical_Proxy( 
    Range * This,
    /* [retval][out] */ WdHorizontalInVerticalType *prop);


void __RPC_STUB Range_get_HorizontalInVertical_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Range_put_HorizontalInVertical_Proxy( 
    Range * This,
    /* [in] */ WdHorizontalInVerticalType prop);


void __RPC_STUB Range_put_HorizontalInVertical_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_TwoLinesInOne_Proxy( 
    Range * This,
    /* [retval][out] */ WdTwoLinesInOneType *prop);


void __RPC_STUB Range_get_TwoLinesInOne_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Range_put_TwoLinesInOne_Proxy( 
    Range * This,
    /* [in] */ WdTwoLinesInOneType prop);


void __RPC_STUB Range_put_TwoLinesInOne_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_CombineCharacters_Proxy( 
    Range * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Range_get_CombineCharacters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Range_put_CombineCharacters_Proxy( 
    Range * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Range_put_CombineCharacters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_NoProofing_Proxy( 
    Range * This,
    /* [retval][out] */ long *prop);


void __RPC_STUB Range_get_NoProofing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Range_put_NoProofing_Proxy( 
    Range * This,
    /* [in] */ long prop);


void __RPC_STUB Range_put_NoProofing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_TopLevelTables_Proxy( 
    Range * This,
    /* [retval][out] */ Tables **prop);


void __RPC_STUB Range_get_TopLevelTables_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_Scripts_Proxy( 
    Range * This,
    /* [retval][out] */ /* external definition not present */ Scripts **prop);


void __RPC_STUB Range_get_Scripts_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_CharacterWidth_Proxy( 
    Range * This,
    /* [retval][out] */ WdCharacterWidth *prop);


void __RPC_STUB Range_get_CharacterWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Range_put_CharacterWidth_Proxy( 
    Range * This,
    /* [in] */ WdCharacterWidth prop);


void __RPC_STUB Range_put_CharacterWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_Kana_Proxy( 
    Range * This,
    /* [retval][out] */ WdKana *prop);


void __RPC_STUB Range_get_Kana_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Range_put_Kana_Proxy( 
    Range * This,
    /* [in] */ WdKana prop);


void __RPC_STUB Range_put_Kana_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_BoldBi_Proxy( 
    Range * This,
    /* [retval][out] */ long *prop);


void __RPC_STUB Range_get_BoldBi_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Range_put_BoldBi_Proxy( 
    Range * This,
    /* [in] */ long prop);


void __RPC_STUB Range_put_BoldBi_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_ItalicBi_Proxy( 
    Range * This,
    /* [retval][out] */ long *prop);


void __RPC_STUB Range_get_ItalicBi_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Range_put_ItalicBi_Proxy( 
    Range * This,
    /* [in] */ long prop);


void __RPC_STUB Range_put_ItalicBi_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_ID_Proxy( 
    Range * This,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB Range_get_ID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Range_put_ID_Proxy( 
    Range * This,
    /* [in] */ BSTR prop);


void __RPC_STUB Range_put_ID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_HTMLDivisions_Proxy( 
    Range * This,
    /* [retval][out] */ HTMLDivisions **prop);


void __RPC_STUB Range_get_HTMLDivisions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_SmartTags_Proxy( 
    Range * This,
    /* [retval][out] */ SmartTags **prop);


void __RPC_STUB Range_get_SmartTags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_ShowAll_Proxy( 
    Range * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Range_get_ShowAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Range_put_ShowAll_Proxy( 
    Range * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Range_put_ShowAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get__Document_Proxy( 
    Range * This,
    /* [retval][out] */ _Document **prop);


void __RPC_STUB Range_get__Document_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_FootnoteOptions_Proxy( 
    Range * This,
    /* [retval][out] */ FootnoteOptions **prop);


void __RPC_STUB Range_get_FootnoteOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_EndnoteOptions_Proxy( 
    Range * This,
    /* [retval][out] */ EndnoteOptions **prop);


void __RPC_STUB Range_get_EndnoteOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_PasteAndFormat_Proxy( 
    Range * This,
    /* [in] */ WdRecoveryType Type);


void __RPC_STUB Range_PasteAndFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_PasteExcelTable_Proxy( 
    Range * This,
    /* [in] */ VARIANT_BOOL LinkedToExcel,
    /* [in] */ VARIANT_BOOL WordFormatting,
    /* [in] */ VARIANT_BOOL RTF);


void __RPC_STUB Range_PasteExcelTable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_PasteAppendTable_Proxy( 
    Range * This);


void __RPC_STUB Range_PasteAppendTable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_XMLNodes_Proxy( 
    Range * This,
    /* [retval][out] */ XMLNodes **prop);


void __RPC_STUB Range_get_XMLNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_XMLParentNode_Proxy( 
    Range * This,
    /* [retval][out] */ XMLNode **prop);


void __RPC_STUB Range_get_XMLParentNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_Editors_Proxy( 
    Range * This,
    /* [retval][out] */ Editors **prop);


void __RPC_STUB Range_get_Editors_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_XML_Proxy( 
    Range * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL DataOnly,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB Range_get_XML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Range_get_EnhMetaFileBits_Proxy( 
    Range * This,
    /* [retval][out] */ VARIANT *prop);


void __RPC_STUB Range_get_EnhMetaFileBits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_GoToEditableRange_Proxy( 
    Range * This,
    /* [optional][in] */ VARIANT *EditorID,
    /* [retval][out] */ Range **prop);


void __RPC_STUB Range_GoToEditableRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_InsertXML_Proxy( 
    Range * This,
    /* [in] */ BSTR XML,
    /* [optional][in] */ VARIANT *Transform);


void __RPC_STUB Range_InsertXML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_InsertCaption_Proxy( 
    Range * This,
    /* [in] */ VARIANT *Label,
    /* [optional][in] */ VARIANT *Title,
    /* [optional][in] */ VARIANT *TitleAutoText,
    /* [optional][in] */ VARIANT *Position,
    /* [optional][in] */ VARIANT *ExcludeLabel);


void __RPC_STUB Range_InsertCaption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range_InsertCrossReference_Proxy( 
    Range * This,
    /* [in] */ VARIANT *ReferenceType,
    /* [in] */ WdReferenceKind ReferenceKind,
    /* [in] */ VARIANT *ReferenceItem,
    /* [optional][in] */ VARIANT *InsertAsHyperlink,
    /* [optional][in] */ VARIANT *IncludePosition,
    /* [optional][in] */ VARIANT *SeparateNumbers,
    /* [optional][in] */ VARIANT *SeparatorString);


void __RPC_STUB Range_InsertCrossReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Range_INTERFACE_DEFINED__ */


#ifndef __ListFormat_INTERFACE_DEFINED__
#define __ListFormat_INTERFACE_DEFINED__

/* interface ListFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ListFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209C0-0000-0000-C000-000000000046")
    ListFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListLevelNumber( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ListLevelNumber( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_List( 
            /* [retval][out] */ List **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListTemplate( 
            /* [retval][out] */ ListTemplate **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListValue( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SingleList( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SingleListTemplate( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListType( 
            /* [retval][out] */ WdListType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListString( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanContinuePreviousList( 
            /* [in] */ ListTemplate *ListTemplate,
            /* [retval][out] */ WdContinue *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveNumbers( 
            /* [optional][in] */ VARIANT *NumberType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertNumbersToText( 
            /* [optional][in] */ VARIANT *NumberType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CountNumberedItems( 
            /* [optional][in] */ VARIANT *NumberType,
            /* [optional][in] */ VARIANT *Level,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ApplyBulletDefaultOld( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ApplyNumberDefaultOld( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ApplyOutlineNumberDefaultOld( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ApplyListTemplateOld( 
            /* [in] */ ListTemplate *ListTemplate,
            /* [optional][in] */ VARIANT *ContinuePreviousList,
            /* [optional][in] */ VARIANT *ApplyTo) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ListOutdent( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ListIndent( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyBulletDefault( 
            /* [optional][in] */ VARIANT *DefaultListBehavior) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyNumberDefault( 
            /* [optional][in] */ VARIANT *DefaultListBehavior) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyOutlineNumberDefault( 
            /* [optional][in] */ VARIANT *DefaultListBehavior) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyListTemplate( 
            /* [in] */ ListTemplate *ListTemplate,
            /* [optional][in] */ VARIANT *ContinuePreviousList,
            /* [optional][in] */ VARIANT *ApplyTo,
            /* [optional][in] */ VARIANT *DefaultListBehavior) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListPictureBullet( 
            /* [retval][out] */ InlineShape **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ListFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ListFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ListFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ListFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ListFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ListFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ListFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListLevelNumber )( 
            ListFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ListLevelNumber )( 
            ListFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_List )( 
            ListFormat * This,
            /* [retval][out] */ List **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListTemplate )( 
            ListFormat * This,
            /* [retval][out] */ ListTemplate **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListValue )( 
            ListFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SingleList )( 
            ListFormat * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SingleListTemplate )( 
            ListFormat * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListType )( 
            ListFormat * This,
            /* [retval][out] */ WdListType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListString )( 
            ListFormat * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ListFormat * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ListFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ListFormat * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanContinuePreviousList )( 
            ListFormat * This,
            /* [in] */ ListTemplate *ListTemplate,
            /* [retval][out] */ WdContinue *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveNumbers )( 
            ListFormat * This,
            /* [optional][in] */ VARIANT *NumberType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertNumbersToText )( 
            ListFormat * This,
            /* [optional][in] */ VARIANT *NumberType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CountNumberedItems )( 
            ListFormat * This,
            /* [optional][in] */ VARIANT *NumberType,
            /* [optional][in] */ VARIANT *Level,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyBulletDefaultOld )( 
            ListFormat * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyNumberDefaultOld )( 
            ListFormat * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyOutlineNumberDefaultOld )( 
            ListFormat * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyListTemplateOld )( 
            ListFormat * This,
            /* [in] */ ListTemplate *ListTemplate,
            /* [optional][in] */ VARIANT *ContinuePreviousList,
            /* [optional][in] */ VARIANT *ApplyTo);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ListOutdent )( 
            ListFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ListIndent )( 
            ListFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyBulletDefault )( 
            ListFormat * This,
            /* [optional][in] */ VARIANT *DefaultListBehavior);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyNumberDefault )( 
            ListFormat * This,
            /* [optional][in] */ VARIANT *DefaultListBehavior);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyOutlineNumberDefault )( 
            ListFormat * This,
            /* [optional][in] */ VARIANT *DefaultListBehavior);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyListTemplate )( 
            ListFormat * This,
            /* [in] */ ListTemplate *ListTemplate,
            /* [optional][in] */ VARIANT *ContinuePreviousList,
            /* [optional][in] */ VARIANT *ApplyTo,
            /* [optional][in] */ VARIANT *DefaultListBehavior);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListPictureBullet )( 
            ListFormat * This,
            /* [retval][out] */ InlineShape **prop);
        
        END_INTERFACE
    } ListFormatVtbl;

    interface ListFormat
    {
        CONST_VTBL struct ListFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ListFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ListFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ListFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ListFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ListFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ListFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ListFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ListFormat_get_ListLevelNumber(This,prop)	\
    ( (This)->lpVtbl -> get_ListLevelNumber(This,prop) ) 

#define ListFormat_put_ListLevelNumber(This,prop)	\
    ( (This)->lpVtbl -> put_ListLevelNumber(This,prop) ) 

#define ListFormat_get_List(This,prop)	\
    ( (This)->lpVtbl -> get_List(This,prop) ) 

#define ListFormat_get_ListTemplate(This,prop)	\
    ( (This)->lpVtbl -> get_ListTemplate(This,prop) ) 

#define ListFormat_get_ListValue(This,prop)	\
    ( (This)->lpVtbl -> get_ListValue(This,prop) ) 

#define ListFormat_get_SingleList(This,prop)	\
    ( (This)->lpVtbl -> get_SingleList(This,prop) ) 

#define ListFormat_get_SingleListTemplate(This,prop)	\
    ( (This)->lpVtbl -> get_SingleListTemplate(This,prop) ) 

#define ListFormat_get_ListType(This,prop)	\
    ( (This)->lpVtbl -> get_ListType(This,prop) ) 

#define ListFormat_get_ListString(This,prop)	\
    ( (This)->lpVtbl -> get_ListString(This,prop) ) 

#define ListFormat_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ListFormat_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ListFormat_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ListFormat_CanContinuePreviousList(This,ListTemplate,prop)	\
    ( (This)->lpVtbl -> CanContinuePreviousList(This,ListTemplate,prop) ) 

#define ListFormat_RemoveNumbers(This,NumberType)	\
    ( (This)->lpVtbl -> RemoveNumbers(This,NumberType) ) 

#define ListFormat_ConvertNumbersToText(This,NumberType)	\
    ( (This)->lpVtbl -> ConvertNumbersToText(This,NumberType) ) 

#define ListFormat_CountNumberedItems(This,NumberType,Level,prop)	\
    ( (This)->lpVtbl -> CountNumberedItems(This,NumberType,Level,prop) ) 

#define ListFormat_ApplyBulletDefaultOld(This)	\
    ( (This)->lpVtbl -> ApplyBulletDefaultOld(This) ) 

#define ListFormat_ApplyNumberDefaultOld(This)	\
    ( (This)->lpVtbl -> ApplyNumberDefaultOld(This) ) 

#define ListFormat_ApplyOutlineNumberDefaultOld(This)	\
    ( (This)->lpVtbl -> ApplyOutlineNumberDefaultOld(This) ) 

#define ListFormat_ApplyListTemplateOld(This,ListTemplate,ContinuePreviousList,ApplyTo)	\
    ( (This)->lpVtbl -> ApplyListTemplateOld(This,ListTemplate,ContinuePreviousList,ApplyTo) ) 

#define ListFormat_ListOutdent(This)	\
    ( (This)->lpVtbl -> ListOutdent(This) ) 

#define ListFormat_ListIndent(This)	\
    ( (This)->lpVtbl -> ListIndent(This) ) 

#define ListFormat_ApplyBulletDefault(This,DefaultListBehavior)	\
    ( (This)->lpVtbl -> ApplyBulletDefault(This,DefaultListBehavior) ) 

#define ListFormat_ApplyNumberDefault(This,DefaultListBehavior)	\
    ( (This)->lpVtbl -> ApplyNumberDefault(This,DefaultListBehavior) ) 

#define ListFormat_ApplyOutlineNumberDefault(This,DefaultListBehavior)	\
    ( (This)->lpVtbl -> ApplyOutlineNumberDefault(This,DefaultListBehavior) ) 

#define ListFormat_ApplyListTemplate(This,ListTemplate,ContinuePreviousList,ApplyTo,DefaultListBehavior)	\
    ( (This)->lpVtbl -> ApplyListTemplate(This,ListTemplate,ContinuePreviousList,ApplyTo,DefaultListBehavior) ) 

#define ListFormat_get_ListPictureBullet(This,prop)	\
    ( (This)->lpVtbl -> get_ListPictureBullet(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ListFormat_INTERFACE_DEFINED__ */


#ifndef __Find_INTERFACE_DEFINED__
#define __Find_INTERFACE_DEFINED__

/* interface Find */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Find;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209B0-0000-0000-C000-000000000046")
    Find : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Forward( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Forward( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ /* external definition not present */ Font **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Font( 
            /* [in] */ /* external definition not present */ Font *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Found( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchAllWordForms( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchAllWordForms( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchCase( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchCase( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchWildcards( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchWildcards( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchSoundsLike( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchSoundsLike( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchWholeWord( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchWholeWord( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzy( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzy( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchByte( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchByte( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__ParagraphFormat( 
            /* [retval][out] */ _ParagraphFormat **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put__ParagraphFormat( 
            /* [in] */ _ParagraphFormat *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Style( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageID( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageID( 
            /* [in] */ WdLanguageID prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Highlight( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Highlight( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Replacement( 
            /* [retval][out] */ Replacement **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Frame( 
            /* [retval][out] */ Frame **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Wrap( 
            /* [retval][out] */ WdFindWrap *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Wrap( 
            /* [in] */ WdFindWrap prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Format( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageIDFarEast( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageIDFarEast( 
            /* [in] */ WdLanguageID prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageIDOther( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageIDOther( 
            /* [in] */ WdLanguageID prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CorrectHangulEndings( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CorrectHangulEndings( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ExecuteOld( 
            /* [optional][in] */ VARIANT *FindText,
            /* [optional][in] */ VARIANT *MatchCase,
            /* [optional][in] */ VARIANT *MatchWholeWord,
            /* [optional][in] */ VARIANT *MatchWildcards,
            /* [optional][in] */ VARIANT *MatchSoundsLike,
            /* [optional][in] */ VARIANT *MatchAllWordForms,
            /* [optional][in] */ VARIANT *Forward,
            /* [optional][in] */ VARIANT *Wrap,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ReplaceWith,
            /* [optional][in] */ VARIANT *Replace,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearFormatting( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetAllFuzzyOptions( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearAllFuzzyOptions( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Execute( 
            /* [optional][in] */ VARIANT *FindText,
            /* [optional][in] */ VARIANT *MatchCase,
            /* [optional][in] */ VARIANT *MatchWholeWord,
            /* [optional][in] */ VARIANT *MatchWildcards,
            /* [optional][in] */ VARIANT *MatchSoundsLike,
            /* [optional][in] */ VARIANT *MatchAllWordForms,
            /* [optional][in] */ VARIANT *Forward,
            /* [optional][in] */ VARIANT *Wrap,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ReplaceWith,
            /* [optional][in] */ VARIANT *Replace,
            /* [optional][in] */ VARIANT *MatchKashida,
            /* [optional][in] */ VARIANT *MatchDiacritics,
            /* [optional][in] */ VARIANT *MatchAlefHamza,
            /* [optional][in] */ VARIANT *MatchControl,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoProofing( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoProofing( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchKashida( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchKashida( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchDiacritics( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchDiacritics( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchAlefHamza( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchAlefHamza( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchControl( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchControl( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FindVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Find * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Find * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Find * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Find * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Find * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Find * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Find * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Find * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Find * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Find * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Forward )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Forward )( 
            Find * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            Find * This,
            /* [retval][out] */ /* external definition not present */ Font **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Font )( 
            Find * This,
            /* [in] */ /* external definition not present */ Font *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Found )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchAllWordForms )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchAllWordForms )( 
            Find * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchCase )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchCase )( 
            Find * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchWildcards )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchWildcards )( 
            Find * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchSoundsLike )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchSoundsLike )( 
            Find * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchWholeWord )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchWholeWord )( 
            Find * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzy )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzy )( 
            Find * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchByte )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchByte )( 
            Find * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__ParagraphFormat )( 
            Find * This,
            /* [retval][out] */ _ParagraphFormat **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put__ParagraphFormat )( 
            Find * This,
            /* [in] */ _ParagraphFormat *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            Find * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            Find * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            Find * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            Find * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageID )( 
            Find * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageID )( 
            Find * This,
            /* [in] */ WdLanguageID prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Highlight )( 
            Find * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Highlight )( 
            Find * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Replacement )( 
            Find * This,
            /* [retval][out] */ Replacement **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Frame )( 
            Find * This,
            /* [retval][out] */ Frame **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Wrap )( 
            Find * This,
            /* [retval][out] */ WdFindWrap *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Wrap )( 
            Find * This,
            /* [in] */ WdFindWrap prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Format )( 
            Find * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageIDFarEast )( 
            Find * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageIDFarEast )( 
            Find * This,
            /* [in] */ WdLanguageID prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageIDOther )( 
            Find * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageIDOther )( 
            Find * This,
            /* [in] */ WdLanguageID prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CorrectHangulEndings )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CorrectHangulEndings )( 
            Find * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ExecuteOld )( 
            Find * This,
            /* [optional][in] */ VARIANT *FindText,
            /* [optional][in] */ VARIANT *MatchCase,
            /* [optional][in] */ VARIANT *MatchWholeWord,
            /* [optional][in] */ VARIANT *MatchWildcards,
            /* [optional][in] */ VARIANT *MatchSoundsLike,
            /* [optional][in] */ VARIANT *MatchAllWordForms,
            /* [optional][in] */ VARIANT *Forward,
            /* [optional][in] */ VARIANT *Wrap,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ReplaceWith,
            /* [optional][in] */ VARIANT *Replace,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearFormatting )( 
            Find * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetAllFuzzyOptions )( 
            Find * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearAllFuzzyOptions )( 
            Find * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Execute )( 
            Find * This,
            /* [optional][in] */ VARIANT *FindText,
            /* [optional][in] */ VARIANT *MatchCase,
            /* [optional][in] */ VARIANT *MatchWholeWord,
            /* [optional][in] */ VARIANT *MatchWildcards,
            /* [optional][in] */ VARIANT *MatchSoundsLike,
            /* [optional][in] */ VARIANT *MatchAllWordForms,
            /* [optional][in] */ VARIANT *Forward,
            /* [optional][in] */ VARIANT *Wrap,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ReplaceWith,
            /* [optional][in] */ VARIANT *Replace,
            /* [optional][in] */ VARIANT *MatchKashida,
            /* [optional][in] */ VARIANT *MatchDiacritics,
            /* [optional][in] */ VARIANT *MatchAlefHamza,
            /* [optional][in] */ VARIANT *MatchControl,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoProofing )( 
            Find * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoProofing )( 
            Find * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchKashida )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchKashida )( 
            Find * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchDiacritics )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchDiacritics )( 
            Find * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchAlefHamza )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchAlefHamza )( 
            Find * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchControl )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchControl )( 
            Find * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } FindVtbl;

    interface Find
    {
        CONST_VTBL struct FindVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Find_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Find_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Find_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Find_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Find_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Find_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Find_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Find_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Find_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Find_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Find_get_Forward(This,prop)	\
    ( (This)->lpVtbl -> get_Forward(This,prop) ) 

#define Find_put_Forward(This,prop)	\
    ( (This)->lpVtbl -> put_Forward(This,prop) ) 

#define Find_get_Font(This,prop)	\
    ( (This)->lpVtbl -> get_Font(This,prop) ) 

#define Find_put_Font(This,prop)	\
    ( (This)->lpVtbl -> put_Font(This,prop) ) 

#define Find_get_Found(This,prop)	\
    ( (This)->lpVtbl -> get_Found(This,prop) ) 

#define Find_get_MatchAllWordForms(This,prop)	\
    ( (This)->lpVtbl -> get_MatchAllWordForms(This,prop) ) 

#define Find_put_MatchAllWordForms(This,prop)	\
    ( (This)->lpVtbl -> put_MatchAllWordForms(This,prop) ) 

#define Find_get_MatchCase(This,prop)	\
    ( (This)->lpVtbl -> get_MatchCase(This,prop) ) 

#define Find_put_MatchCase(This,prop)	\
    ( (This)->lpVtbl -> put_MatchCase(This,prop) ) 

#define Find_get_MatchWildcards(This,prop)	\
    ( (This)->lpVtbl -> get_MatchWildcards(This,prop) ) 

#define Find_put_MatchWildcards(This,prop)	\
    ( (This)->lpVtbl -> put_MatchWildcards(This,prop) ) 

#define Find_get_MatchSoundsLike(This,prop)	\
    ( (This)->lpVtbl -> get_MatchSoundsLike(This,prop) ) 

#define Find_put_MatchSoundsLike(This,prop)	\
    ( (This)->lpVtbl -> put_MatchSoundsLike(This,prop) ) 

#define Find_get_MatchWholeWord(This,prop)	\
    ( (This)->lpVtbl -> get_MatchWholeWord(This,prop) ) 

#define Find_put_MatchWholeWord(This,prop)	\
    ( (This)->lpVtbl -> put_MatchWholeWord(This,prop) ) 

#define Find_get_MatchFuzzy(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzy(This,prop) ) 

#define Find_put_MatchFuzzy(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzy(This,prop) ) 

#define Find_get_MatchByte(This,prop)	\
    ( (This)->lpVtbl -> get_MatchByte(This,prop) ) 

#define Find_put_MatchByte(This,prop)	\
    ( (This)->lpVtbl -> put_MatchByte(This,prop) ) 

#define Find_get__ParagraphFormat(This,prop)	\
    ( (This)->lpVtbl -> get__ParagraphFormat(This,prop) ) 

#define Find_put__ParagraphFormat(This,prop)	\
    ( (This)->lpVtbl -> put__ParagraphFormat(This,prop) ) 

#define Find_get_Style(This,prop)	\
    ( (This)->lpVtbl -> get_Style(This,prop) ) 

#define Find_put_Style(This,prop)	\
    ( (This)->lpVtbl -> put_Style(This,prop) ) 

#define Find_get_Text(This,prop)	\
    ( (This)->lpVtbl -> get_Text(This,prop) ) 

#define Find_put_Text(This,prop)	\
    ( (This)->lpVtbl -> put_Text(This,prop) ) 

#define Find_get_LanguageID(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageID(This,prop) ) 

#define Find_put_LanguageID(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageID(This,prop) ) 

#define Find_get_Highlight(This,prop)	\
    ( (This)->lpVtbl -> get_Highlight(This,prop) ) 

#define Find_put_Highlight(This,prop)	\
    ( (This)->lpVtbl -> put_Highlight(This,prop) ) 

#define Find_get_Replacement(This,prop)	\
    ( (This)->lpVtbl -> get_Replacement(This,prop) ) 

#define Find_get_Frame(This,prop)	\
    ( (This)->lpVtbl -> get_Frame(This,prop) ) 

#define Find_get_Wrap(This,prop)	\
    ( (This)->lpVtbl -> get_Wrap(This,prop) ) 

#define Find_put_Wrap(This,prop)	\
    ( (This)->lpVtbl -> put_Wrap(This,prop) ) 

#define Find_get_Format(This,prop)	\
    ( (This)->lpVtbl -> get_Format(This,prop) ) 

#define Find_put_Format(This,prop)	\
    ( (This)->lpVtbl -> put_Format(This,prop) ) 

#define Find_get_LanguageIDFarEast(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageIDFarEast(This,prop) ) 

#define Find_put_LanguageIDFarEast(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageIDFarEast(This,prop) ) 

#define Find_get_LanguageIDOther(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageIDOther(This,prop) ) 

#define Find_put_LanguageIDOther(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageIDOther(This,prop) ) 

#define Find_get_CorrectHangulEndings(This,prop)	\
    ( (This)->lpVtbl -> get_CorrectHangulEndings(This,prop) ) 

#define Find_put_CorrectHangulEndings(This,prop)	\
    ( (This)->lpVtbl -> put_CorrectHangulEndings(This,prop) ) 

#define Find_ExecuteOld(This,FindText,MatchCase,MatchWholeWord,MatchWildcards,MatchSoundsLike,MatchAllWordForms,Forward,Wrap,Format,ReplaceWith,Replace,prop)	\
    ( (This)->lpVtbl -> ExecuteOld(This,FindText,MatchCase,MatchWholeWord,MatchWildcards,MatchSoundsLike,MatchAllWordForms,Forward,Wrap,Format,ReplaceWith,Replace,prop) ) 

#define Find_ClearFormatting(This)	\
    ( (This)->lpVtbl -> ClearFormatting(This) ) 

#define Find_SetAllFuzzyOptions(This)	\
    ( (This)->lpVtbl -> SetAllFuzzyOptions(This) ) 

#define Find_ClearAllFuzzyOptions(This)	\
    ( (This)->lpVtbl -> ClearAllFuzzyOptions(This) ) 

#define Find_Execute(This,FindText,MatchCase,MatchWholeWord,MatchWildcards,MatchSoundsLike,MatchAllWordForms,Forward,Wrap,Format,ReplaceWith,Replace,MatchKashida,MatchDiacritics,MatchAlefHamza,MatchControl,prop)	\
    ( (This)->lpVtbl -> Execute(This,FindText,MatchCase,MatchWholeWord,MatchWildcards,MatchSoundsLike,MatchAllWordForms,Forward,Wrap,Format,ReplaceWith,Replace,MatchKashida,MatchDiacritics,MatchAlefHamza,MatchControl,prop) ) 

#define Find_get_NoProofing(This,prop)	\
    ( (This)->lpVtbl -> get_NoProofing(This,prop) ) 

#define Find_put_NoProofing(This,prop)	\
    ( (This)->lpVtbl -> put_NoProofing(This,prop) ) 

#define Find_get_MatchKashida(This,prop)	\
    ( (This)->lpVtbl -> get_MatchKashida(This,prop) ) 

#define Find_put_MatchKashida(This,prop)	\
    ( (This)->lpVtbl -> put_MatchKashida(This,prop) ) 

#define Find_get_MatchDiacritics(This,prop)	\
    ( (This)->lpVtbl -> get_MatchDiacritics(This,prop) ) 

#define Find_put_MatchDiacritics(This,prop)	\
    ( (This)->lpVtbl -> put_MatchDiacritics(This,prop) ) 

#define Find_get_MatchAlefHamza(This,prop)	\
    ( (This)->lpVtbl -> get_MatchAlefHamza(This,prop) ) 

#define Find_put_MatchAlefHamza(This,prop)	\
    ( (This)->lpVtbl -> put_MatchAlefHamza(This,prop) ) 

#define Find_get_MatchControl(This,prop)	\
    ( (This)->lpVtbl -> get_MatchControl(This,prop) ) 

#define Find_put_MatchControl(This,prop)	\
    ( (This)->lpVtbl -> put_MatchControl(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Find_INTERFACE_DEFINED__ */


#ifndef __Replacement_INTERFACE_DEFINED__
#define __Replacement_INTERFACE_DEFINED__

/* interface Replacement */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Replacement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209B1-0000-0000-C000-000000000046")
    Replacement : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ /* external definition not present */ Font **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Font( 
            /* [in] */ /* external definition not present */ Font *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__ParagraphFormat( 
            /* [retval][out] */ _ParagraphFormat **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put__ParagraphFormat( 
            /* [in] */ _ParagraphFormat *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Style( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageID( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageID( 
            /* [in] */ WdLanguageID prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Highlight( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Highlight( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Frame( 
            /* [retval][out] */ Frame **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageIDFarEast( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageIDFarEast( 
            /* [in] */ WdLanguageID prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearFormatting( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoProofing( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoProofing( 
            /* [in] */ long prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ReplacementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Replacement * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Replacement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Replacement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Replacement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Replacement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Replacement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Replacement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Replacement * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Replacement * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Replacement * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            Replacement * This,
            /* [retval][out] */ /* external definition not present */ Font **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Font )( 
            Replacement * This,
            /* [in] */ /* external definition not present */ Font *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__ParagraphFormat )( 
            Replacement * This,
            /* [retval][out] */ _ParagraphFormat **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put__ParagraphFormat )( 
            Replacement * This,
            /* [in] */ _ParagraphFormat *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            Replacement * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            Replacement * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            Replacement * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            Replacement * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageID )( 
            Replacement * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageID )( 
            Replacement * This,
            /* [in] */ WdLanguageID prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Highlight )( 
            Replacement * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Highlight )( 
            Replacement * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Frame )( 
            Replacement * This,
            /* [retval][out] */ Frame **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageIDFarEast )( 
            Replacement * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageIDFarEast )( 
            Replacement * This,
            /* [in] */ WdLanguageID prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearFormatting )( 
            Replacement * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoProofing )( 
            Replacement * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoProofing )( 
            Replacement * This,
            /* [in] */ long prop);
        
        END_INTERFACE
    } ReplacementVtbl;

    interface Replacement
    {
        CONST_VTBL struct ReplacementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Replacement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Replacement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Replacement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Replacement_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Replacement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Replacement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Replacement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Replacement_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Replacement_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Replacement_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Replacement_get_Font(This,prop)	\
    ( (This)->lpVtbl -> get_Font(This,prop) ) 

#define Replacement_put_Font(This,prop)	\
    ( (This)->lpVtbl -> put_Font(This,prop) ) 

#define Replacement_get__ParagraphFormat(This,prop)	\
    ( (This)->lpVtbl -> get__ParagraphFormat(This,prop) ) 

#define Replacement_put__ParagraphFormat(This,prop)	\
    ( (This)->lpVtbl -> put__ParagraphFormat(This,prop) ) 

#define Replacement_get_Style(This,prop)	\
    ( (This)->lpVtbl -> get_Style(This,prop) ) 

#define Replacement_put_Style(This,prop)	\
    ( (This)->lpVtbl -> put_Style(This,prop) ) 

#define Replacement_get_Text(This,prop)	\
    ( (This)->lpVtbl -> get_Text(This,prop) ) 

#define Replacement_put_Text(This,prop)	\
    ( (This)->lpVtbl -> put_Text(This,prop) ) 

#define Replacement_get_LanguageID(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageID(This,prop) ) 

#define Replacement_put_LanguageID(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageID(This,prop) ) 

#define Replacement_get_Highlight(This,prop)	\
    ( (This)->lpVtbl -> get_Highlight(This,prop) ) 

#define Replacement_put_Highlight(This,prop)	\
    ( (This)->lpVtbl -> put_Highlight(This,prop) ) 

#define Replacement_get_Frame(This,prop)	\
    ( (This)->lpVtbl -> get_Frame(This,prop) ) 

#define Replacement_get_LanguageIDFarEast(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageIDFarEast(This,prop) ) 

#define Replacement_put_LanguageIDFarEast(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageIDFarEast(This,prop) ) 

#define Replacement_ClearFormatting(This)	\
    ( (This)->lpVtbl -> ClearFormatting(This) ) 

#define Replacement_get_NoProofing(This,prop)	\
    ( (This)->lpVtbl -> get_NoProofing(This,prop) ) 

#define Replacement_put_NoProofing(This,prop)	\
    ( (This)->lpVtbl -> put_NoProofing(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Replacement_INTERFACE_DEFINED__ */


#ifndef __Characters_INTERFACE_DEFINED__
#define __Characters_INTERFACE_DEFINED__

/* interface Characters */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Characters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002095D-0000-0000-C000-000000000046")
    Characters : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_First( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Last( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Range **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CharactersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Characters * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Characters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Characters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Characters * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Characters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Characters * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Characters * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Characters * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Characters * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_First )( 
            Characters * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Last )( 
            Characters * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Characters * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Characters * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Characters * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Characters * This,
            /* [in] */ long Index,
            /* [retval][out] */ Range **prop);
        
        END_INTERFACE
    } CharactersVtbl;

    interface Characters
    {
        CONST_VTBL struct CharactersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Characters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Characters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Characters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Characters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Characters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Characters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Characters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Characters_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Characters_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Characters_get_First(This,prop)	\
    ( (This)->lpVtbl -> get_First(This,prop) ) 

#define Characters_get_Last(This,prop)	\
    ( (This)->lpVtbl -> get_Last(This,prop) ) 

#define Characters_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Characters_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Characters_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Characters_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Characters_INTERFACE_DEFINED__ */


#ifndef __Words_INTERFACE_DEFINED__
#define __Words_INTERFACE_DEFINED__

/* interface Words */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Words;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002095C-0000-0000-C000-000000000046")
    Words : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_First( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Last( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Range **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WordsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Words * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Words * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Words * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Words * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Words * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Words * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Words * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Words * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Words * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_First )( 
            Words * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Last )( 
            Words * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Words * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Words * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Words * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Words * This,
            /* [in] */ long Index,
            /* [retval][out] */ Range **prop);
        
        END_INTERFACE
    } WordsVtbl;

    interface Words
    {
        CONST_VTBL struct WordsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Words_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Words_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Words_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Words_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Words_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Words_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Words_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Words_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Words_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Words_get_First(This,prop)	\
    ( (This)->lpVtbl -> get_First(This,prop) ) 

#define Words_get_Last(This,prop)	\
    ( (This)->lpVtbl -> get_Last(This,prop) ) 

#define Words_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Words_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Words_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Words_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Words_INTERFACE_DEFINED__ */


#ifndef __Sentences_INTERFACE_DEFINED__
#define __Sentences_INTERFACE_DEFINED__

/* interface Sentences */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Sentences;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002095B-0000-0000-C000-000000000046")
    Sentences : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_First( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Last( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Range **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SentencesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Sentences * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Sentences * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Sentences * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Sentences * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Sentences * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Sentences * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Sentences * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Sentences * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Sentences * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_First )( 
            Sentences * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Last )( 
            Sentences * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Sentences * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Sentences * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Sentences * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Sentences * This,
            /* [in] */ long Index,
            /* [retval][out] */ Range **prop);
        
        END_INTERFACE
    } SentencesVtbl;

    interface Sentences
    {
        CONST_VTBL struct SentencesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Sentences_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Sentences_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Sentences_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Sentences_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Sentences_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Sentences_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Sentences_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Sentences_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Sentences_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Sentences_get_First(This,prop)	\
    ( (This)->lpVtbl -> get_First(This,prop) ) 

#define Sentences_get_Last(This,prop)	\
    ( (This)->lpVtbl -> get_Last(This,prop) ) 

#define Sentences_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Sentences_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Sentences_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Sentences_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Sentences_INTERFACE_DEFINED__ */


#ifndef __Sections_INTERFACE_DEFINED__
#define __Sections_INTERFACE_DEFINED__

/* interface Sections */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Sections;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002095A-0000-0000-C000-000000000046")
    Sections : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_First( 
            /* [retval][out] */ Section **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Last( 
            /* [retval][out] */ Section **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageSetup( 
            /* [retval][out] */ PageSetup **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageSetup( 
            /* [in] */ PageSetup *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Section **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *Start,
            /* [retval][out] */ Section **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SectionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Sections * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Sections * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Sections * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Sections * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Sections * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Sections * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Sections * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Sections * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Sections * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_First )( 
            Sections * This,
            /* [retval][out] */ Section **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Last )( 
            Sections * This,
            /* [retval][out] */ Section **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Sections * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Sections * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Sections * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageSetup )( 
            Sections * This,
            /* [retval][out] */ PageSetup **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageSetup )( 
            Sections * This,
            /* [in] */ PageSetup *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Sections * This,
            /* [in] */ long Index,
            /* [retval][out] */ Section **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Sections * This,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *Start,
            /* [retval][out] */ Section **prop);
        
        END_INTERFACE
    } SectionsVtbl;

    interface Sections
    {
        CONST_VTBL struct SectionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Sections_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Sections_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Sections_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Sections_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Sections_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Sections_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Sections_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Sections_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Sections_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Sections_get_First(This,prop)	\
    ( (This)->lpVtbl -> get_First(This,prop) ) 

#define Sections_get_Last(This,prop)	\
    ( (This)->lpVtbl -> get_Last(This,prop) ) 

#define Sections_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Sections_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Sections_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Sections_get_PageSetup(This,prop)	\
    ( (This)->lpVtbl -> get_PageSetup(This,prop) ) 

#define Sections_put_PageSetup(This,prop)	\
    ( (This)->lpVtbl -> put_PageSetup(This,prop) ) 

#define Sections_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Sections_Add(This,Range,Start,prop)	\
    ( (This)->lpVtbl -> Add(This,Range,Start,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Sections_INTERFACE_DEFINED__ */


#ifndef __Section_INTERFACE_DEFINED__
#define __Section_INTERFACE_DEFINED__

/* interface Section */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Section;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020959-0000-0000-C000-000000000046")
    Section : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageSetup( 
            /* [retval][out] */ PageSetup **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageSetup( 
            /* [in] */ PageSetup *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Headers( 
            /* [retval][out] */ HeadersFooters **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Footers( 
            /* [retval][out] */ HeadersFooters **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProtectedForForms( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ProtectedForForms( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Section * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Section * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Section * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Section * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Section * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Section * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Section * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Section * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Section * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Section * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Section * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageSetup )( 
            Section * This,
            /* [retval][out] */ PageSetup **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageSetup )( 
            Section * This,
            /* [in] */ PageSetup *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Headers )( 
            Section * This,
            /* [retval][out] */ HeadersFooters **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Footers )( 
            Section * This,
            /* [retval][out] */ HeadersFooters **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProtectedForForms )( 
            Section * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ProtectedForForms )( 
            Section * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            Section * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            Section * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            Section * This,
            /* [in] */ Borders *prop);
        
        END_INTERFACE
    } SectionVtbl;

    interface Section
    {
        CONST_VTBL struct SectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Section_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Section_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Section_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Section_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Section_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Section_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Section_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Section_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Section_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Section_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Section_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Section_get_PageSetup(This,prop)	\
    ( (This)->lpVtbl -> get_PageSetup(This,prop) ) 

#define Section_put_PageSetup(This,prop)	\
    ( (This)->lpVtbl -> put_PageSetup(This,prop) ) 

#define Section_get_Headers(This,prop)	\
    ( (This)->lpVtbl -> get_Headers(This,prop) ) 

#define Section_get_Footers(This,prop)	\
    ( (This)->lpVtbl -> get_Footers(This,prop) ) 

#define Section_get_ProtectedForForms(This,prop)	\
    ( (This)->lpVtbl -> get_ProtectedForForms(This,prop) ) 

#define Section_put_ProtectedForForms(This,prop)	\
    ( (This)->lpVtbl -> put_ProtectedForForms(This,prop) ) 

#define Section_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define Section_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define Section_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Section_INTERFACE_DEFINED__ */


#ifndef __Paragraphs_INTERFACE_DEFINED__
#define __Paragraphs_INTERFACE_DEFINED__

/* interface Paragraphs */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Paragraphs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020958-0000-0000-C000-000000000046")
    Paragraphs : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_First( 
            /* [retval][out] */ Paragraph **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Last( 
            /* [retval][out] */ Paragraph **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ _ParagraphFormat **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Format( 
            /* [in] */ _ParagraphFormat *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TabStops( 
            /* [retval][out] */ TabStops **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TabStops( 
            /* [in] */ TabStops *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Style( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ WdParagraphAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ WdParagraphAlignment prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeepTogether( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_KeepTogether( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeepWithNext( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_KeepWithNext( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageBreakBefore( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageBreakBefore( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoLineNumber( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoLineNumber( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RightIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RightIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeftIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeftIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstLineIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FirstLineIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineSpacing( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineSpacing( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineSpacingRule( 
            /* [retval][out] */ WdLineSpacing *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineSpacingRule( 
            /* [in] */ WdLineSpacing prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceBefore( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceBefore( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceAfter( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceAfter( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hyphenation( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Hyphenation( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WidowControl( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WidowControl( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FarEastLineBreakControl( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FarEastLineBreakControl( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WordWrap( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WordWrap( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HangingPunctuation( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HangingPunctuation( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HalfWidthPunctuationOnTopOfLine( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HalfWidthPunctuationOnTopOfLine( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddSpaceBetweenFarEastAndAlpha( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AddSpaceBetweenFarEastAndAlpha( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddSpaceBetweenFarEastAndDigit( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AddSpaceBetweenFarEastAndDigit( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BaseLineAlignment( 
            /* [retval][out] */ WdBaselineAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BaseLineAlignment( 
            /* [in] */ WdBaselineAlignment prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoAdjustRightIndent( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoAdjustRightIndent( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisableLineHeightGrid( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisableLineHeightGrid( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OutlineLevel( 
            /* [retval][out] */ WdOutlineLevel *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OutlineLevel( 
            /* [in] */ WdOutlineLevel prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Paragraph **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ Paragraph **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CloseUp( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenUp( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenOrCloseUp( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TabHangingIndent( 
            /* [in] */ short Count) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TabIndent( 
            /* [in] */ short Count) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Space1( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Space15( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Space2( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IndentCharWidth( 
            /* [in] */ short Count) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IndentFirstLineCharWidth( 
            /* [in] */ short Count) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutlinePromote( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutlineDemote( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutlineDemoteToBody( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Indent( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Outdent( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CharacterUnitRightIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CharacterUnitRightIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CharacterUnitLeftIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CharacterUnitLeftIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CharacterUnitFirstLineIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CharacterUnitFirstLineIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineUnitBefore( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineUnitBefore( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineUnitAfter( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineUnitAfter( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadingOrder( 
            /* [retval][out] */ WdReadingOrder *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadingOrder( 
            /* [in] */ WdReadingOrder prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceBeforeAuto( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceBeforeAuto( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceAfterAuto( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceAfterAuto( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncreaseSpacing( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DecreaseSpacing( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ParagraphsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Paragraphs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Paragraphs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Paragraphs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Paragraphs * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Paragraphs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Paragraphs * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Paragraphs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Paragraphs * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_First )( 
            Paragraphs * This,
            /* [retval][out] */ Paragraph **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Last )( 
            Paragraphs * This,
            /* [retval][out] */ Paragraph **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Paragraphs * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Paragraphs * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            Paragraphs * This,
            /* [retval][out] */ _ParagraphFormat **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Format )( 
            Paragraphs * This,
            /* [in] */ _ParagraphFormat *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabStops )( 
            Paragraphs * This,
            /* [retval][out] */ TabStops **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TabStops )( 
            Paragraphs * This,
            /* [in] */ TabStops *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            Paragraphs * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            Paragraphs * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            Paragraphs * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            Paragraphs * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            Paragraphs * This,
            /* [retval][out] */ WdParagraphAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            Paragraphs * This,
            /* [in] */ WdParagraphAlignment prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeepTogether )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_KeepTogether )( 
            Paragraphs * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeepWithNext )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_KeepWithNext )( 
            Paragraphs * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageBreakBefore )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageBreakBefore )( 
            Paragraphs * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoLineNumber )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoLineNumber )( 
            Paragraphs * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RightIndent )( 
            Paragraphs * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RightIndent )( 
            Paragraphs * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeftIndent )( 
            Paragraphs * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeftIndent )( 
            Paragraphs * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstLineIndent )( 
            Paragraphs * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FirstLineIndent )( 
            Paragraphs * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacing )( 
            Paragraphs * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacing )( 
            Paragraphs * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacingRule )( 
            Paragraphs * This,
            /* [retval][out] */ WdLineSpacing *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacingRule )( 
            Paragraphs * This,
            /* [in] */ WdLineSpacing prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceBefore )( 
            Paragraphs * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceBefore )( 
            Paragraphs * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceAfter )( 
            Paragraphs * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceAfter )( 
            Paragraphs * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyphenation )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Hyphenation )( 
            Paragraphs * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WidowControl )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WidowControl )( 
            Paragraphs * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            Paragraphs * This,
            /* [retval][out] */ Shading **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FarEastLineBreakControl )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FarEastLineBreakControl )( 
            Paragraphs * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WordWrap )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WordWrap )( 
            Paragraphs * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HangingPunctuation )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HangingPunctuation )( 
            Paragraphs * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HalfWidthPunctuationOnTopOfLine )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HalfWidthPunctuationOnTopOfLine )( 
            Paragraphs * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddSpaceBetweenFarEastAndAlpha )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AddSpaceBetweenFarEastAndAlpha )( 
            Paragraphs * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddSpaceBetweenFarEastAndDigit )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AddSpaceBetweenFarEastAndDigit )( 
            Paragraphs * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BaseLineAlignment )( 
            Paragraphs * This,
            /* [retval][out] */ WdBaselineAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BaseLineAlignment )( 
            Paragraphs * This,
            /* [in] */ WdBaselineAlignment prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoAdjustRightIndent )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoAdjustRightIndent )( 
            Paragraphs * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisableLineHeightGrid )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisableLineHeightGrid )( 
            Paragraphs * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OutlineLevel )( 
            Paragraphs * This,
            /* [retval][out] */ WdOutlineLevel *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OutlineLevel )( 
            Paragraphs * This,
            /* [in] */ WdOutlineLevel prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Paragraphs * This,
            /* [in] */ long Index,
            /* [retval][out] */ Paragraph **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Paragraphs * This,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ Paragraph **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CloseUp )( 
            Paragraphs * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenUp )( 
            Paragraphs * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenOrCloseUp )( 
            Paragraphs * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TabHangingIndent )( 
            Paragraphs * This,
            /* [in] */ short Count);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TabIndent )( 
            Paragraphs * This,
            /* [in] */ short Count);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            Paragraphs * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Space1 )( 
            Paragraphs * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Space15 )( 
            Paragraphs * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Space2 )( 
            Paragraphs * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IndentCharWidth )( 
            Paragraphs * This,
            /* [in] */ short Count);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IndentFirstLineCharWidth )( 
            Paragraphs * This,
            /* [in] */ short Count);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutlinePromote )( 
            Paragraphs * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutlineDemote )( 
            Paragraphs * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutlineDemoteToBody )( 
            Paragraphs * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Indent )( 
            Paragraphs * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Outdent )( 
            Paragraphs * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterUnitRightIndent )( 
            Paragraphs * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CharacterUnitRightIndent )( 
            Paragraphs * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterUnitLeftIndent )( 
            Paragraphs * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CharacterUnitLeftIndent )( 
            Paragraphs * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterUnitFirstLineIndent )( 
            Paragraphs * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CharacterUnitFirstLineIndent )( 
            Paragraphs * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineUnitBefore )( 
            Paragraphs * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineUnitBefore )( 
            Paragraphs * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineUnitAfter )( 
            Paragraphs * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineUnitAfter )( 
            Paragraphs * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingOrder )( 
            Paragraphs * This,
            /* [retval][out] */ WdReadingOrder *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingOrder )( 
            Paragraphs * This,
            /* [in] */ WdReadingOrder prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceBeforeAuto )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceBeforeAuto )( 
            Paragraphs * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceAfterAuto )( 
            Paragraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceAfterAuto )( 
            Paragraphs * This,
            /* [in] */ long prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncreaseSpacing )( 
            Paragraphs * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DecreaseSpacing )( 
            Paragraphs * This);
        
        END_INTERFACE
    } ParagraphsVtbl;

    interface Paragraphs
    {
        CONST_VTBL struct ParagraphsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Paragraphs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Paragraphs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Paragraphs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Paragraphs_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Paragraphs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Paragraphs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Paragraphs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Paragraphs_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Paragraphs_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Paragraphs_get_First(This,prop)	\
    ( (This)->lpVtbl -> get_First(This,prop) ) 

#define Paragraphs_get_Last(This,prop)	\
    ( (This)->lpVtbl -> get_Last(This,prop) ) 

#define Paragraphs_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Paragraphs_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Paragraphs_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Paragraphs_get_Format(This,prop)	\
    ( (This)->lpVtbl -> get_Format(This,prop) ) 

#define Paragraphs_put_Format(This,prop)	\
    ( (This)->lpVtbl -> put_Format(This,prop) ) 

#define Paragraphs_get_TabStops(This,prop)	\
    ( (This)->lpVtbl -> get_TabStops(This,prop) ) 

#define Paragraphs_put_TabStops(This,prop)	\
    ( (This)->lpVtbl -> put_TabStops(This,prop) ) 

#define Paragraphs_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define Paragraphs_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define Paragraphs_get_Style(This,prop)	\
    ( (This)->lpVtbl -> get_Style(This,prop) ) 

#define Paragraphs_put_Style(This,prop)	\
    ( (This)->lpVtbl -> put_Style(This,prop) ) 

#define Paragraphs_get_Alignment(This,prop)	\
    ( (This)->lpVtbl -> get_Alignment(This,prop) ) 

#define Paragraphs_put_Alignment(This,prop)	\
    ( (This)->lpVtbl -> put_Alignment(This,prop) ) 

#define Paragraphs_get_KeepTogether(This,prop)	\
    ( (This)->lpVtbl -> get_KeepTogether(This,prop) ) 

#define Paragraphs_put_KeepTogether(This,prop)	\
    ( (This)->lpVtbl -> put_KeepTogether(This,prop) ) 

#define Paragraphs_get_KeepWithNext(This,prop)	\
    ( (This)->lpVtbl -> get_KeepWithNext(This,prop) ) 

#define Paragraphs_put_KeepWithNext(This,prop)	\
    ( (This)->lpVtbl -> put_KeepWithNext(This,prop) ) 

#define Paragraphs_get_PageBreakBefore(This,prop)	\
    ( (This)->lpVtbl -> get_PageBreakBefore(This,prop) ) 

#define Paragraphs_put_PageBreakBefore(This,prop)	\
    ( (This)->lpVtbl -> put_PageBreakBefore(This,prop) ) 

#define Paragraphs_get_NoLineNumber(This,prop)	\
    ( (This)->lpVtbl -> get_NoLineNumber(This,prop) ) 

#define Paragraphs_put_NoLineNumber(This,prop)	\
    ( (This)->lpVtbl -> put_NoLineNumber(This,prop) ) 

#define Paragraphs_get_RightIndent(This,prop)	\
    ( (This)->lpVtbl -> get_RightIndent(This,prop) ) 

#define Paragraphs_put_RightIndent(This,prop)	\
    ( (This)->lpVtbl -> put_RightIndent(This,prop) ) 

#define Paragraphs_get_LeftIndent(This,prop)	\
    ( (This)->lpVtbl -> get_LeftIndent(This,prop) ) 

#define Paragraphs_put_LeftIndent(This,prop)	\
    ( (This)->lpVtbl -> put_LeftIndent(This,prop) ) 

#define Paragraphs_get_FirstLineIndent(This,prop)	\
    ( (This)->lpVtbl -> get_FirstLineIndent(This,prop) ) 

#define Paragraphs_put_FirstLineIndent(This,prop)	\
    ( (This)->lpVtbl -> put_FirstLineIndent(This,prop) ) 

#define Paragraphs_get_LineSpacing(This,prop)	\
    ( (This)->lpVtbl -> get_LineSpacing(This,prop) ) 

#define Paragraphs_put_LineSpacing(This,prop)	\
    ( (This)->lpVtbl -> put_LineSpacing(This,prop) ) 

#define Paragraphs_get_LineSpacingRule(This,prop)	\
    ( (This)->lpVtbl -> get_LineSpacingRule(This,prop) ) 

#define Paragraphs_put_LineSpacingRule(This,prop)	\
    ( (This)->lpVtbl -> put_LineSpacingRule(This,prop) ) 

#define Paragraphs_get_SpaceBefore(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceBefore(This,prop) ) 

#define Paragraphs_put_SpaceBefore(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceBefore(This,prop) ) 

#define Paragraphs_get_SpaceAfter(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceAfter(This,prop) ) 

#define Paragraphs_put_SpaceAfter(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceAfter(This,prop) ) 

#define Paragraphs_get_Hyphenation(This,prop)	\
    ( (This)->lpVtbl -> get_Hyphenation(This,prop) ) 

#define Paragraphs_put_Hyphenation(This,prop)	\
    ( (This)->lpVtbl -> put_Hyphenation(This,prop) ) 

#define Paragraphs_get_WidowControl(This,prop)	\
    ( (This)->lpVtbl -> get_WidowControl(This,prop) ) 

#define Paragraphs_put_WidowControl(This,prop)	\
    ( (This)->lpVtbl -> put_WidowControl(This,prop) ) 

#define Paragraphs_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define Paragraphs_get_FarEastLineBreakControl(This,prop)	\
    ( (This)->lpVtbl -> get_FarEastLineBreakControl(This,prop) ) 

#define Paragraphs_put_FarEastLineBreakControl(This,prop)	\
    ( (This)->lpVtbl -> put_FarEastLineBreakControl(This,prop) ) 

#define Paragraphs_get_WordWrap(This,prop)	\
    ( (This)->lpVtbl -> get_WordWrap(This,prop) ) 

#define Paragraphs_put_WordWrap(This,prop)	\
    ( (This)->lpVtbl -> put_WordWrap(This,prop) ) 

#define Paragraphs_get_HangingPunctuation(This,prop)	\
    ( (This)->lpVtbl -> get_HangingPunctuation(This,prop) ) 

#define Paragraphs_put_HangingPunctuation(This,prop)	\
    ( (This)->lpVtbl -> put_HangingPunctuation(This,prop) ) 

#define Paragraphs_get_HalfWidthPunctuationOnTopOfLine(This,prop)	\
    ( (This)->lpVtbl -> get_HalfWidthPunctuationOnTopOfLine(This,prop) ) 

#define Paragraphs_put_HalfWidthPunctuationOnTopOfLine(This,prop)	\
    ( (This)->lpVtbl -> put_HalfWidthPunctuationOnTopOfLine(This,prop) ) 

#define Paragraphs_get_AddSpaceBetweenFarEastAndAlpha(This,prop)	\
    ( (This)->lpVtbl -> get_AddSpaceBetweenFarEastAndAlpha(This,prop) ) 

#define Paragraphs_put_AddSpaceBetweenFarEastAndAlpha(This,prop)	\
    ( (This)->lpVtbl -> put_AddSpaceBetweenFarEastAndAlpha(This,prop) ) 

#define Paragraphs_get_AddSpaceBetweenFarEastAndDigit(This,prop)	\
    ( (This)->lpVtbl -> get_AddSpaceBetweenFarEastAndDigit(This,prop) ) 

#define Paragraphs_put_AddSpaceBetweenFarEastAndDigit(This,prop)	\
    ( (This)->lpVtbl -> put_AddSpaceBetweenFarEastAndDigit(This,prop) ) 

#define Paragraphs_get_BaseLineAlignment(This,prop)	\
    ( (This)->lpVtbl -> get_BaseLineAlignment(This,prop) ) 

#define Paragraphs_put_BaseLineAlignment(This,prop)	\
    ( (This)->lpVtbl -> put_BaseLineAlignment(This,prop) ) 

#define Paragraphs_get_AutoAdjustRightIndent(This,prop)	\
    ( (This)->lpVtbl -> get_AutoAdjustRightIndent(This,prop) ) 

#define Paragraphs_put_AutoAdjustRightIndent(This,prop)	\
    ( (This)->lpVtbl -> put_AutoAdjustRightIndent(This,prop) ) 

#define Paragraphs_get_DisableLineHeightGrid(This,prop)	\
    ( (This)->lpVtbl -> get_DisableLineHeightGrid(This,prop) ) 

#define Paragraphs_put_DisableLineHeightGrid(This,prop)	\
    ( (This)->lpVtbl -> put_DisableLineHeightGrid(This,prop) ) 

#define Paragraphs_get_OutlineLevel(This,prop)	\
    ( (This)->lpVtbl -> get_OutlineLevel(This,prop) ) 

#define Paragraphs_put_OutlineLevel(This,prop)	\
    ( (This)->lpVtbl -> put_OutlineLevel(This,prop) ) 

#define Paragraphs_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Paragraphs_Add(This,Range,prop)	\
    ( (This)->lpVtbl -> Add(This,Range,prop) ) 

#define Paragraphs_CloseUp(This)	\
    ( (This)->lpVtbl -> CloseUp(This) ) 

#define Paragraphs_OpenUp(This)	\
    ( (This)->lpVtbl -> OpenUp(This) ) 

#define Paragraphs_OpenOrCloseUp(This)	\
    ( (This)->lpVtbl -> OpenOrCloseUp(This) ) 

#define Paragraphs_TabHangingIndent(This,Count)	\
    ( (This)->lpVtbl -> TabHangingIndent(This,Count) ) 

#define Paragraphs_TabIndent(This,Count)	\
    ( (This)->lpVtbl -> TabIndent(This,Count) ) 

#define Paragraphs_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define Paragraphs_Space1(This)	\
    ( (This)->lpVtbl -> Space1(This) ) 

#define Paragraphs_Space15(This)	\
    ( (This)->lpVtbl -> Space15(This) ) 

#define Paragraphs_Space2(This)	\
    ( (This)->lpVtbl -> Space2(This) ) 

#define Paragraphs_IndentCharWidth(This,Count)	\
    ( (This)->lpVtbl -> IndentCharWidth(This,Count) ) 

#define Paragraphs_IndentFirstLineCharWidth(This,Count)	\
    ( (This)->lpVtbl -> IndentFirstLineCharWidth(This,Count) ) 

#define Paragraphs_OutlinePromote(This)	\
    ( (This)->lpVtbl -> OutlinePromote(This) ) 

#define Paragraphs_OutlineDemote(This)	\
    ( (This)->lpVtbl -> OutlineDemote(This) ) 

#define Paragraphs_OutlineDemoteToBody(This)	\
    ( (This)->lpVtbl -> OutlineDemoteToBody(This) ) 

#define Paragraphs_Indent(This)	\
    ( (This)->lpVtbl -> Indent(This) ) 

#define Paragraphs_Outdent(This)	\
    ( (This)->lpVtbl -> Outdent(This) ) 

#define Paragraphs_get_CharacterUnitRightIndent(This,prop)	\
    ( (This)->lpVtbl -> get_CharacterUnitRightIndent(This,prop) ) 

#define Paragraphs_put_CharacterUnitRightIndent(This,prop)	\
    ( (This)->lpVtbl -> put_CharacterUnitRightIndent(This,prop) ) 

#define Paragraphs_get_CharacterUnitLeftIndent(This,prop)	\
    ( (This)->lpVtbl -> get_CharacterUnitLeftIndent(This,prop) ) 

#define Paragraphs_put_CharacterUnitLeftIndent(This,prop)	\
    ( (This)->lpVtbl -> put_CharacterUnitLeftIndent(This,prop) ) 

#define Paragraphs_get_CharacterUnitFirstLineIndent(This,prop)	\
    ( (This)->lpVtbl -> get_CharacterUnitFirstLineIndent(This,prop) ) 

#define Paragraphs_put_CharacterUnitFirstLineIndent(This,prop)	\
    ( (This)->lpVtbl -> put_CharacterUnitFirstLineIndent(This,prop) ) 

#define Paragraphs_get_LineUnitBefore(This,prop)	\
    ( (This)->lpVtbl -> get_LineUnitBefore(This,prop) ) 

#define Paragraphs_put_LineUnitBefore(This,prop)	\
    ( (This)->lpVtbl -> put_LineUnitBefore(This,prop) ) 

#define Paragraphs_get_LineUnitAfter(This,prop)	\
    ( (This)->lpVtbl -> get_LineUnitAfter(This,prop) ) 

#define Paragraphs_put_LineUnitAfter(This,prop)	\
    ( (This)->lpVtbl -> put_LineUnitAfter(This,prop) ) 

#define Paragraphs_get_ReadingOrder(This,prop)	\
    ( (This)->lpVtbl -> get_ReadingOrder(This,prop) ) 

#define Paragraphs_put_ReadingOrder(This,prop)	\
    ( (This)->lpVtbl -> put_ReadingOrder(This,prop) ) 

#define Paragraphs_get_SpaceBeforeAuto(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceBeforeAuto(This,prop) ) 

#define Paragraphs_put_SpaceBeforeAuto(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceBeforeAuto(This,prop) ) 

#define Paragraphs_get_SpaceAfterAuto(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceAfterAuto(This,prop) ) 

#define Paragraphs_put_SpaceAfterAuto(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceAfterAuto(This,prop) ) 

#define Paragraphs_IncreaseSpacing(This)	\
    ( (This)->lpVtbl -> IncreaseSpacing(This) ) 

#define Paragraphs_DecreaseSpacing(This)	\
    ( (This)->lpVtbl -> DecreaseSpacing(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Paragraphs_INTERFACE_DEFINED__ */


#ifndef __Paragraph_INTERFACE_DEFINED__
#define __Paragraph_INTERFACE_DEFINED__

/* interface Paragraph */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Paragraph;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020957-0000-0000-C000-000000000046")
    Paragraph : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ _ParagraphFormat **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Format( 
            /* [in] */ _ParagraphFormat *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TabStops( 
            /* [retval][out] */ TabStops **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TabStops( 
            /* [in] */ TabStops *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DropCap( 
            /* [retval][out] */ DropCap **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Style( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ WdParagraphAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ WdParagraphAlignment prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeepTogether( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_KeepTogether( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeepWithNext( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_KeepWithNext( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageBreakBefore( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageBreakBefore( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoLineNumber( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoLineNumber( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RightIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RightIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeftIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeftIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstLineIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FirstLineIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineSpacing( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineSpacing( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineSpacingRule( 
            /* [retval][out] */ WdLineSpacing *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineSpacingRule( 
            /* [in] */ WdLineSpacing prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceBefore( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceBefore( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceAfter( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceAfter( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hyphenation( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Hyphenation( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WidowControl( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WidowControl( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FarEastLineBreakControl( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FarEastLineBreakControl( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WordWrap( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WordWrap( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HangingPunctuation( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HangingPunctuation( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HalfWidthPunctuationOnTopOfLine( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HalfWidthPunctuationOnTopOfLine( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddSpaceBetweenFarEastAndAlpha( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AddSpaceBetweenFarEastAndAlpha( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddSpaceBetweenFarEastAndDigit( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AddSpaceBetweenFarEastAndDigit( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BaseLineAlignment( 
            /* [retval][out] */ WdBaselineAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BaseLineAlignment( 
            /* [in] */ WdBaselineAlignment prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoAdjustRightIndent( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoAdjustRightIndent( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisableLineHeightGrid( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisableLineHeightGrid( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OutlineLevel( 
            /* [retval][out] */ WdOutlineLevel *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OutlineLevel( 
            /* [in] */ WdOutlineLevel prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CloseUp( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenUp( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenOrCloseUp( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TabHangingIndent( 
            /* [in] */ short Count) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TabIndent( 
            /* [in] */ short Count) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Space1( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Space15( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Space2( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IndentCharWidth( 
            /* [in] */ short Count) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IndentFirstLineCharWidth( 
            /* [in] */ short Count) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ Paragraph **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Previous( 
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ Paragraph **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutlinePromote( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutlineDemote( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutlineDemoteToBody( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Indent( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Outdent( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CharacterUnitRightIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CharacterUnitRightIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CharacterUnitLeftIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CharacterUnitLeftIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CharacterUnitFirstLineIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CharacterUnitFirstLineIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineUnitBefore( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineUnitBefore( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineUnitAfter( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineUnitAfter( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadingOrder( 
            /* [retval][out] */ WdReadingOrder *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadingOrder( 
            /* [in] */ WdReadingOrder prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ID( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceBeforeAuto( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceBeforeAuto( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceAfterAuto( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceAfterAuto( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsStyleSeparator( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectNumber( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ParagraphVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Paragraph * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Paragraph * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Paragraph * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Paragraph * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Paragraph * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Paragraph * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Paragraph * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Paragraph * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Paragraph * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Paragraph * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            Paragraph * This,
            /* [retval][out] */ _ParagraphFormat **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Format )( 
            Paragraph * This,
            /* [in] */ _ParagraphFormat *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabStops )( 
            Paragraph * This,
            /* [retval][out] */ TabStops **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TabStops )( 
            Paragraph * This,
            /* [in] */ TabStops *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            Paragraph * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            Paragraph * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DropCap )( 
            Paragraph * This,
            /* [retval][out] */ DropCap **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            Paragraph * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            Paragraph * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            Paragraph * This,
            /* [retval][out] */ WdParagraphAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            Paragraph * This,
            /* [in] */ WdParagraphAlignment prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeepTogether )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_KeepTogether )( 
            Paragraph * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeepWithNext )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_KeepWithNext )( 
            Paragraph * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageBreakBefore )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageBreakBefore )( 
            Paragraph * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoLineNumber )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoLineNumber )( 
            Paragraph * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RightIndent )( 
            Paragraph * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RightIndent )( 
            Paragraph * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeftIndent )( 
            Paragraph * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeftIndent )( 
            Paragraph * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstLineIndent )( 
            Paragraph * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FirstLineIndent )( 
            Paragraph * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacing )( 
            Paragraph * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacing )( 
            Paragraph * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacingRule )( 
            Paragraph * This,
            /* [retval][out] */ WdLineSpacing *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacingRule )( 
            Paragraph * This,
            /* [in] */ WdLineSpacing prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceBefore )( 
            Paragraph * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceBefore )( 
            Paragraph * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceAfter )( 
            Paragraph * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceAfter )( 
            Paragraph * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyphenation )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Hyphenation )( 
            Paragraph * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WidowControl )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WidowControl )( 
            Paragraph * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            Paragraph * This,
            /* [retval][out] */ Shading **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FarEastLineBreakControl )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FarEastLineBreakControl )( 
            Paragraph * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WordWrap )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WordWrap )( 
            Paragraph * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HangingPunctuation )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HangingPunctuation )( 
            Paragraph * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HalfWidthPunctuationOnTopOfLine )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HalfWidthPunctuationOnTopOfLine )( 
            Paragraph * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddSpaceBetweenFarEastAndAlpha )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AddSpaceBetweenFarEastAndAlpha )( 
            Paragraph * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddSpaceBetweenFarEastAndDigit )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AddSpaceBetweenFarEastAndDigit )( 
            Paragraph * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BaseLineAlignment )( 
            Paragraph * This,
            /* [retval][out] */ WdBaselineAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BaseLineAlignment )( 
            Paragraph * This,
            /* [in] */ WdBaselineAlignment prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoAdjustRightIndent )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoAdjustRightIndent )( 
            Paragraph * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisableLineHeightGrid )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisableLineHeightGrid )( 
            Paragraph * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OutlineLevel )( 
            Paragraph * This,
            /* [retval][out] */ WdOutlineLevel *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OutlineLevel )( 
            Paragraph * This,
            /* [in] */ WdOutlineLevel prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CloseUp )( 
            Paragraph * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenUp )( 
            Paragraph * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenOrCloseUp )( 
            Paragraph * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TabHangingIndent )( 
            Paragraph * This,
            /* [in] */ short Count);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TabIndent )( 
            Paragraph * This,
            /* [in] */ short Count);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            Paragraph * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Space1 )( 
            Paragraph * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Space15 )( 
            Paragraph * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Space2 )( 
            Paragraph * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IndentCharWidth )( 
            Paragraph * This,
            /* [in] */ short Count);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IndentFirstLineCharWidth )( 
            Paragraph * This,
            /* [in] */ short Count);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Next )( 
            Paragraph * This,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ Paragraph **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Previous )( 
            Paragraph * This,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ Paragraph **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutlinePromote )( 
            Paragraph * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutlineDemote )( 
            Paragraph * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutlineDemoteToBody )( 
            Paragraph * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Indent )( 
            Paragraph * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Outdent )( 
            Paragraph * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterUnitRightIndent )( 
            Paragraph * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CharacterUnitRightIndent )( 
            Paragraph * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterUnitLeftIndent )( 
            Paragraph * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CharacterUnitLeftIndent )( 
            Paragraph * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterUnitFirstLineIndent )( 
            Paragraph * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CharacterUnitFirstLineIndent )( 
            Paragraph * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineUnitBefore )( 
            Paragraph * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineUnitBefore )( 
            Paragraph * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineUnitAfter )( 
            Paragraph * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineUnitAfter )( 
            Paragraph * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingOrder )( 
            Paragraph * This,
            /* [retval][out] */ WdReadingOrder *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingOrder )( 
            Paragraph * This,
            /* [in] */ WdReadingOrder prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            Paragraph * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ID )( 
            Paragraph * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceBeforeAuto )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceBeforeAuto )( 
            Paragraph * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceAfterAuto )( 
            Paragraph * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceAfterAuto )( 
            Paragraph * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsStyleSeparator )( 
            Paragraph * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectNumber )( 
            Paragraph * This);
        
        END_INTERFACE
    } ParagraphVtbl;

    interface Paragraph
    {
        CONST_VTBL struct ParagraphVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Paragraph_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Paragraph_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Paragraph_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Paragraph_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Paragraph_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Paragraph_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Paragraph_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Paragraph_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Paragraph_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Paragraph_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Paragraph_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Paragraph_get_Format(This,prop)	\
    ( (This)->lpVtbl -> get_Format(This,prop) ) 

#define Paragraph_put_Format(This,prop)	\
    ( (This)->lpVtbl -> put_Format(This,prop) ) 

#define Paragraph_get_TabStops(This,prop)	\
    ( (This)->lpVtbl -> get_TabStops(This,prop) ) 

#define Paragraph_put_TabStops(This,prop)	\
    ( (This)->lpVtbl -> put_TabStops(This,prop) ) 

#define Paragraph_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define Paragraph_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define Paragraph_get_DropCap(This,prop)	\
    ( (This)->lpVtbl -> get_DropCap(This,prop) ) 

#define Paragraph_get_Style(This,prop)	\
    ( (This)->lpVtbl -> get_Style(This,prop) ) 

#define Paragraph_put_Style(This,prop)	\
    ( (This)->lpVtbl -> put_Style(This,prop) ) 

#define Paragraph_get_Alignment(This,prop)	\
    ( (This)->lpVtbl -> get_Alignment(This,prop) ) 

#define Paragraph_put_Alignment(This,prop)	\
    ( (This)->lpVtbl -> put_Alignment(This,prop) ) 

#define Paragraph_get_KeepTogether(This,prop)	\
    ( (This)->lpVtbl -> get_KeepTogether(This,prop) ) 

#define Paragraph_put_KeepTogether(This,prop)	\
    ( (This)->lpVtbl -> put_KeepTogether(This,prop) ) 

#define Paragraph_get_KeepWithNext(This,prop)	\
    ( (This)->lpVtbl -> get_KeepWithNext(This,prop) ) 

#define Paragraph_put_KeepWithNext(This,prop)	\
    ( (This)->lpVtbl -> put_KeepWithNext(This,prop) ) 

#define Paragraph_get_PageBreakBefore(This,prop)	\
    ( (This)->lpVtbl -> get_PageBreakBefore(This,prop) ) 

#define Paragraph_put_PageBreakBefore(This,prop)	\
    ( (This)->lpVtbl -> put_PageBreakBefore(This,prop) ) 

#define Paragraph_get_NoLineNumber(This,prop)	\
    ( (This)->lpVtbl -> get_NoLineNumber(This,prop) ) 

#define Paragraph_put_NoLineNumber(This,prop)	\
    ( (This)->lpVtbl -> put_NoLineNumber(This,prop) ) 

#define Paragraph_get_RightIndent(This,prop)	\
    ( (This)->lpVtbl -> get_RightIndent(This,prop) ) 

#define Paragraph_put_RightIndent(This,prop)	\
    ( (This)->lpVtbl -> put_RightIndent(This,prop) ) 

#define Paragraph_get_LeftIndent(This,prop)	\
    ( (This)->lpVtbl -> get_LeftIndent(This,prop) ) 

#define Paragraph_put_LeftIndent(This,prop)	\
    ( (This)->lpVtbl -> put_LeftIndent(This,prop) ) 

#define Paragraph_get_FirstLineIndent(This,prop)	\
    ( (This)->lpVtbl -> get_FirstLineIndent(This,prop) ) 

#define Paragraph_put_FirstLineIndent(This,prop)	\
    ( (This)->lpVtbl -> put_FirstLineIndent(This,prop) ) 

#define Paragraph_get_LineSpacing(This,prop)	\
    ( (This)->lpVtbl -> get_LineSpacing(This,prop) ) 

#define Paragraph_put_LineSpacing(This,prop)	\
    ( (This)->lpVtbl -> put_LineSpacing(This,prop) ) 

#define Paragraph_get_LineSpacingRule(This,prop)	\
    ( (This)->lpVtbl -> get_LineSpacingRule(This,prop) ) 

#define Paragraph_put_LineSpacingRule(This,prop)	\
    ( (This)->lpVtbl -> put_LineSpacingRule(This,prop) ) 

#define Paragraph_get_SpaceBefore(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceBefore(This,prop) ) 

#define Paragraph_put_SpaceBefore(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceBefore(This,prop) ) 

#define Paragraph_get_SpaceAfter(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceAfter(This,prop) ) 

#define Paragraph_put_SpaceAfter(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceAfter(This,prop) ) 

#define Paragraph_get_Hyphenation(This,prop)	\
    ( (This)->lpVtbl -> get_Hyphenation(This,prop) ) 

#define Paragraph_put_Hyphenation(This,prop)	\
    ( (This)->lpVtbl -> put_Hyphenation(This,prop) ) 

#define Paragraph_get_WidowControl(This,prop)	\
    ( (This)->lpVtbl -> get_WidowControl(This,prop) ) 

#define Paragraph_put_WidowControl(This,prop)	\
    ( (This)->lpVtbl -> put_WidowControl(This,prop) ) 

#define Paragraph_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define Paragraph_get_FarEastLineBreakControl(This,prop)	\
    ( (This)->lpVtbl -> get_FarEastLineBreakControl(This,prop) ) 

#define Paragraph_put_FarEastLineBreakControl(This,prop)	\
    ( (This)->lpVtbl -> put_FarEastLineBreakControl(This,prop) ) 

#define Paragraph_get_WordWrap(This,prop)	\
    ( (This)->lpVtbl -> get_WordWrap(This,prop) ) 

#define Paragraph_put_WordWrap(This,prop)	\
    ( (This)->lpVtbl -> put_WordWrap(This,prop) ) 

#define Paragraph_get_HangingPunctuation(This,prop)	\
    ( (This)->lpVtbl -> get_HangingPunctuation(This,prop) ) 

#define Paragraph_put_HangingPunctuation(This,prop)	\
    ( (This)->lpVtbl -> put_HangingPunctuation(This,prop) ) 

#define Paragraph_get_HalfWidthPunctuationOnTopOfLine(This,prop)	\
    ( (This)->lpVtbl -> get_HalfWidthPunctuationOnTopOfLine(This,prop) ) 

#define Paragraph_put_HalfWidthPunctuationOnTopOfLine(This,prop)	\
    ( (This)->lpVtbl -> put_HalfWidthPunctuationOnTopOfLine(This,prop) ) 

#define Paragraph_get_AddSpaceBetweenFarEastAndAlpha(This,prop)	\
    ( (This)->lpVtbl -> get_AddSpaceBetweenFarEastAndAlpha(This,prop) ) 

#define Paragraph_put_AddSpaceBetweenFarEastAndAlpha(This,prop)	\
    ( (This)->lpVtbl -> put_AddSpaceBetweenFarEastAndAlpha(This,prop) ) 

#define Paragraph_get_AddSpaceBetweenFarEastAndDigit(This,prop)	\
    ( (This)->lpVtbl -> get_AddSpaceBetweenFarEastAndDigit(This,prop) ) 

#define Paragraph_put_AddSpaceBetweenFarEastAndDigit(This,prop)	\
    ( (This)->lpVtbl -> put_AddSpaceBetweenFarEastAndDigit(This,prop) ) 

#define Paragraph_get_BaseLineAlignment(This,prop)	\
    ( (This)->lpVtbl -> get_BaseLineAlignment(This,prop) ) 

#define Paragraph_put_BaseLineAlignment(This,prop)	\
    ( (This)->lpVtbl -> put_BaseLineAlignment(This,prop) ) 

#define Paragraph_get_AutoAdjustRightIndent(This,prop)	\
    ( (This)->lpVtbl -> get_AutoAdjustRightIndent(This,prop) ) 

#define Paragraph_put_AutoAdjustRightIndent(This,prop)	\
    ( (This)->lpVtbl -> put_AutoAdjustRightIndent(This,prop) ) 

#define Paragraph_get_DisableLineHeightGrid(This,prop)	\
    ( (This)->lpVtbl -> get_DisableLineHeightGrid(This,prop) ) 

#define Paragraph_put_DisableLineHeightGrid(This,prop)	\
    ( (This)->lpVtbl -> put_DisableLineHeightGrid(This,prop) ) 

#define Paragraph_get_OutlineLevel(This,prop)	\
    ( (This)->lpVtbl -> get_OutlineLevel(This,prop) ) 

#define Paragraph_put_OutlineLevel(This,prop)	\
    ( (This)->lpVtbl -> put_OutlineLevel(This,prop) ) 

#define Paragraph_CloseUp(This)	\
    ( (This)->lpVtbl -> CloseUp(This) ) 

#define Paragraph_OpenUp(This)	\
    ( (This)->lpVtbl -> OpenUp(This) ) 

#define Paragraph_OpenOrCloseUp(This)	\
    ( (This)->lpVtbl -> OpenOrCloseUp(This) ) 

#define Paragraph_TabHangingIndent(This,Count)	\
    ( (This)->lpVtbl -> TabHangingIndent(This,Count) ) 

#define Paragraph_TabIndent(This,Count)	\
    ( (This)->lpVtbl -> TabIndent(This,Count) ) 

#define Paragraph_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define Paragraph_Space1(This)	\
    ( (This)->lpVtbl -> Space1(This) ) 

#define Paragraph_Space15(This)	\
    ( (This)->lpVtbl -> Space15(This) ) 

#define Paragraph_Space2(This)	\
    ( (This)->lpVtbl -> Space2(This) ) 

#define Paragraph_IndentCharWidth(This,Count)	\
    ( (This)->lpVtbl -> IndentCharWidth(This,Count) ) 

#define Paragraph_IndentFirstLineCharWidth(This,Count)	\
    ( (This)->lpVtbl -> IndentFirstLineCharWidth(This,Count) ) 

#define Paragraph_Next(This,Count,prop)	\
    ( (This)->lpVtbl -> Next(This,Count,prop) ) 

#define Paragraph_Previous(This,Count,prop)	\
    ( (This)->lpVtbl -> Previous(This,Count,prop) ) 

#define Paragraph_OutlinePromote(This)	\
    ( (This)->lpVtbl -> OutlinePromote(This) ) 

#define Paragraph_OutlineDemote(This)	\
    ( (This)->lpVtbl -> OutlineDemote(This) ) 

#define Paragraph_OutlineDemoteToBody(This)	\
    ( (This)->lpVtbl -> OutlineDemoteToBody(This) ) 

#define Paragraph_Indent(This)	\
    ( (This)->lpVtbl -> Indent(This) ) 

#define Paragraph_Outdent(This)	\
    ( (This)->lpVtbl -> Outdent(This) ) 

#define Paragraph_get_CharacterUnitRightIndent(This,prop)	\
    ( (This)->lpVtbl -> get_CharacterUnitRightIndent(This,prop) ) 

#define Paragraph_put_CharacterUnitRightIndent(This,prop)	\
    ( (This)->lpVtbl -> put_CharacterUnitRightIndent(This,prop) ) 

#define Paragraph_get_CharacterUnitLeftIndent(This,prop)	\
    ( (This)->lpVtbl -> get_CharacterUnitLeftIndent(This,prop) ) 

#define Paragraph_put_CharacterUnitLeftIndent(This,prop)	\
    ( (This)->lpVtbl -> put_CharacterUnitLeftIndent(This,prop) ) 

#define Paragraph_get_CharacterUnitFirstLineIndent(This,prop)	\
    ( (This)->lpVtbl -> get_CharacterUnitFirstLineIndent(This,prop) ) 

#define Paragraph_put_CharacterUnitFirstLineIndent(This,prop)	\
    ( (This)->lpVtbl -> put_CharacterUnitFirstLineIndent(This,prop) ) 

#define Paragraph_get_LineUnitBefore(This,prop)	\
    ( (This)->lpVtbl -> get_LineUnitBefore(This,prop) ) 

#define Paragraph_put_LineUnitBefore(This,prop)	\
    ( (This)->lpVtbl -> put_LineUnitBefore(This,prop) ) 

#define Paragraph_get_LineUnitAfter(This,prop)	\
    ( (This)->lpVtbl -> get_LineUnitAfter(This,prop) ) 

#define Paragraph_put_LineUnitAfter(This,prop)	\
    ( (This)->lpVtbl -> put_LineUnitAfter(This,prop) ) 

#define Paragraph_get_ReadingOrder(This,prop)	\
    ( (This)->lpVtbl -> get_ReadingOrder(This,prop) ) 

#define Paragraph_put_ReadingOrder(This,prop)	\
    ( (This)->lpVtbl -> put_ReadingOrder(This,prop) ) 

#define Paragraph_get_ID(This,prop)	\
    ( (This)->lpVtbl -> get_ID(This,prop) ) 

#define Paragraph_put_ID(This,prop)	\
    ( (This)->lpVtbl -> put_ID(This,prop) ) 

#define Paragraph_get_SpaceBeforeAuto(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceBeforeAuto(This,prop) ) 

#define Paragraph_put_SpaceBeforeAuto(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceBeforeAuto(This,prop) ) 

#define Paragraph_get_SpaceAfterAuto(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceAfterAuto(This,prop) ) 

#define Paragraph_put_SpaceAfterAuto(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceAfterAuto(This,prop) ) 

#define Paragraph_get_IsStyleSeparator(This,prop)	\
    ( (This)->lpVtbl -> get_IsStyleSeparator(This,prop) ) 

#define Paragraph_SelectNumber(This)	\
    ( (This)->lpVtbl -> SelectNumber(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Paragraph_INTERFACE_DEFINED__ */


#ifndef __DropCap_INTERFACE_DEFINED__
#define __DropCap_INTERFACE_DEFINED__

/* interface DropCap */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_DropCap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020956-0000-0000-C000-000000000046")
    DropCap : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ WdDropPosition *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ WdDropPosition prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontName( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinesToDrop( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LinesToDrop( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DistanceFromText( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DistanceFromText( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Enable( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DropCapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DropCap * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DropCap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DropCap * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DropCap * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DropCap * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DropCap * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DropCap * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            DropCap * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            DropCap * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DropCap * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            DropCap * This,
            /* [retval][out] */ WdDropPosition *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            DropCap * This,
            /* [in] */ WdDropPosition prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontName )( 
            DropCap * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontName )( 
            DropCap * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinesToDrop )( 
            DropCap * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinesToDrop )( 
            DropCap * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DistanceFromText )( 
            DropCap * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DistanceFromText )( 
            DropCap * This,
            /* [in] */ int prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            DropCap * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Enable )( 
            DropCap * This);
        
        END_INTERFACE
    } DropCapVtbl;

    interface DropCap
    {
        CONST_VTBL struct DropCapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DropCap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DropCap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DropCap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DropCap_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DropCap_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DropCap_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DropCap_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DropCap_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define DropCap_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define DropCap_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define DropCap_get_Position(This,prop)	\
    ( (This)->lpVtbl -> get_Position(This,prop) ) 

#define DropCap_put_Position(This,prop)	\
    ( (This)->lpVtbl -> put_Position(This,prop) ) 

#define DropCap_get_FontName(This,prop)	\
    ( (This)->lpVtbl -> get_FontName(This,prop) ) 

#define DropCap_put_FontName(This,prop)	\
    ( (This)->lpVtbl -> put_FontName(This,prop) ) 

#define DropCap_get_LinesToDrop(This,prop)	\
    ( (This)->lpVtbl -> get_LinesToDrop(This,prop) ) 

#define DropCap_put_LinesToDrop(This,prop)	\
    ( (This)->lpVtbl -> put_LinesToDrop(This,prop) ) 

#define DropCap_get_DistanceFromText(This,prop)	\
    ( (This)->lpVtbl -> get_DistanceFromText(This,prop) ) 

#define DropCap_put_DistanceFromText(This,prop)	\
    ( (This)->lpVtbl -> put_DistanceFromText(This,prop) ) 

#define DropCap_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define DropCap_Enable(This)	\
    ( (This)->lpVtbl -> Enable(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DropCap_INTERFACE_DEFINED__ */


#ifndef __TabStops_INTERFACE_DEFINED__
#define __TabStops_INTERFACE_DEFINED__

/* interface TabStops */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TabStops;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020955-0000-0000-C000-000000000046")
    TabStops : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ TabStop **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ int Position,
            /* [optional][in] */ VARIANT *Alignment,
            /* [optional][in] */ VARIANT *Leader,
            /* [retval][out] */ TabStop **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearAll( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Before( 
            /* [in] */ int Position,
            /* [retval][out] */ TabStop **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE After( 
            /* [in] */ int Position,
            /* [retval][out] */ TabStop **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TabStopsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TabStops * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TabStops * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TabStops * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TabStops * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TabStops * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TabStops * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TabStops * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            TabStops * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TabStops * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TabStops * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TabStops * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TabStops * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TabStops * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ TabStop **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            TabStops * This,
            /* [in] */ int Position,
            /* [optional][in] */ VARIANT *Alignment,
            /* [optional][in] */ VARIANT *Leader,
            /* [retval][out] */ TabStop **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearAll )( 
            TabStops * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Before )( 
            TabStops * This,
            /* [in] */ int Position,
            /* [retval][out] */ TabStop **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *After )( 
            TabStops * This,
            /* [in] */ int Position,
            /* [retval][out] */ TabStop **prop);
        
        END_INTERFACE
    } TabStopsVtbl;

    interface TabStops
    {
        CONST_VTBL struct TabStopsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TabStops_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TabStops_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TabStops_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TabStops_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TabStops_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TabStops_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TabStops_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TabStops_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define TabStops_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define TabStops_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TabStops_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TabStops_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TabStops_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define TabStops_Add(This,Position,Alignment,Leader,prop)	\
    ( (This)->lpVtbl -> Add(This,Position,Alignment,Leader,prop) ) 

#define TabStops_ClearAll(This)	\
    ( (This)->lpVtbl -> ClearAll(This) ) 

#define TabStops_Before(This,Position,prop)	\
    ( (This)->lpVtbl -> Before(This,Position,prop) ) 

#define TabStops_After(This,Position,prop)	\
    ( (This)->lpVtbl -> After(This,Position,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TabStops_INTERFACE_DEFINED__ */


#ifndef __TabStop_INTERFACE_DEFINED__
#define __TabStop_INTERFACE_DEFINED__

/* interface TabStop */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TabStop;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020954-0000-0000-C000-000000000046")
    TabStop : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ WdTabAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ WdTabAlignment prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Leader( 
            /* [retval][out] */ WdTabLeader *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Leader( 
            /* [in] */ WdTabLeader prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomTab( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Next( 
            /* [retval][out] */ TabStop **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Previous( 
            /* [retval][out] */ TabStop **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TabStopVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TabStop * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TabStop * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TabStop * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TabStop * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TabStop * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TabStop * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TabStop * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TabStop * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TabStop * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TabStop * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            TabStop * This,
            /* [retval][out] */ WdTabAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            TabStop * This,
            /* [in] */ WdTabAlignment prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Leader )( 
            TabStop * This,
            /* [retval][out] */ WdTabLeader *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Leader )( 
            TabStop * This,
            /* [in] */ WdTabLeader prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            TabStop * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            TabStop * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomTab )( 
            TabStop * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            TabStop * This,
            /* [retval][out] */ TabStop **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            TabStop * This,
            /* [retval][out] */ TabStop **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            TabStop * This);
        
        END_INTERFACE
    } TabStopVtbl;

    interface TabStop
    {
        CONST_VTBL struct TabStopVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TabStop_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TabStop_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TabStop_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TabStop_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TabStop_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TabStop_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TabStop_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TabStop_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TabStop_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TabStop_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TabStop_get_Alignment(This,prop)	\
    ( (This)->lpVtbl -> get_Alignment(This,prop) ) 

#define TabStop_put_Alignment(This,prop)	\
    ( (This)->lpVtbl -> put_Alignment(This,prop) ) 

#define TabStop_get_Leader(This,prop)	\
    ( (This)->lpVtbl -> get_Leader(This,prop) ) 

#define TabStop_put_Leader(This,prop)	\
    ( (This)->lpVtbl -> put_Leader(This,prop) ) 

#define TabStop_get_Position(This,prop)	\
    ( (This)->lpVtbl -> get_Position(This,prop) ) 

#define TabStop_put_Position(This,prop)	\
    ( (This)->lpVtbl -> put_Position(This,prop) ) 

#define TabStop_get_CustomTab(This,prop)	\
    ( (This)->lpVtbl -> get_CustomTab(This,prop) ) 

#define TabStop_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define TabStop_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define TabStop_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TabStop_INTERFACE_DEFINED__ */


#ifndef ___ParagraphFormat_INTERFACE_DEFINED__
#define ___ParagraphFormat_INTERFACE_DEFINED__

/* interface _ParagraphFormat */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][version][uuid] */ 


EXTERN_C const IID IID__ParagraphFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020953-0000-0000-C000-000000000046")
    _ParagraphFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Duplicate( 
            /* [retval][out] */ _ParagraphFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Style( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ WdParagraphAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ WdParagraphAlignment prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeepTogether( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_KeepTogether( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeepWithNext( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_KeepWithNext( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageBreakBefore( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageBreakBefore( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoLineNumber( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoLineNumber( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RightIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RightIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeftIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeftIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstLineIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FirstLineIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineSpacing( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineSpacing( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineSpacingRule( 
            /* [retval][out] */ WdLineSpacing *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineSpacingRule( 
            /* [in] */ WdLineSpacing prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceBefore( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceBefore( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceAfter( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceAfter( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hyphenation( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Hyphenation( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WidowControl( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WidowControl( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FarEastLineBreakControl( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FarEastLineBreakControl( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WordWrap( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WordWrap( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HangingPunctuation( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HangingPunctuation( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HalfWidthPunctuationOnTopOfLine( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HalfWidthPunctuationOnTopOfLine( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddSpaceBetweenFarEastAndAlpha( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AddSpaceBetweenFarEastAndAlpha( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddSpaceBetweenFarEastAndDigit( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AddSpaceBetweenFarEastAndDigit( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BaseLineAlignment( 
            /* [retval][out] */ WdBaselineAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BaseLineAlignment( 
            /* [in] */ WdBaselineAlignment prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoAdjustRightIndent( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoAdjustRightIndent( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisableLineHeightGrid( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisableLineHeightGrid( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TabStops( 
            /* [retval][out] */ TabStops **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TabStops( 
            /* [in] */ TabStops *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OutlineLevel( 
            /* [retval][out] */ WdOutlineLevel *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OutlineLevel( 
            /* [in] */ WdOutlineLevel prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CloseUp( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenUp( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenOrCloseUp( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TabHangingIndent( 
            /* [in] */ short Count) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TabIndent( 
            /* [in] */ short Count) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Space1( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Space15( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Space2( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IndentCharWidth( 
            /* [in] */ short Count) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IndentFirstLineCharWidth( 
            /* [in] */ short Count) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CharacterUnitRightIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CharacterUnitRightIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CharacterUnitLeftIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CharacterUnitLeftIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CharacterUnitFirstLineIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CharacterUnitFirstLineIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineUnitBefore( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineUnitBefore( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineUnitAfter( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineUnitAfter( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadingOrder( 
            /* [retval][out] */ WdReadingOrder *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadingOrder( 
            /* [in] */ WdReadingOrder prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceBeforeAuto( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceBeforeAuto( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceAfterAuto( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceAfterAuto( 
            /* [in] */ long prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _ParagraphFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _ParagraphFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _ParagraphFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _ParagraphFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _ParagraphFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _ParagraphFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _ParagraphFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _ParagraphFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            _ParagraphFormat * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _ParagraphFormat * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Duplicate )( 
            _ParagraphFormat * This,
            /* [retval][out] */ _ParagraphFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            _ParagraphFormat * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            _ParagraphFormat * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            _ParagraphFormat * This,
            /* [retval][out] */ WdParagraphAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            _ParagraphFormat * This,
            /* [in] */ WdParagraphAlignment prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeepTogether )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_KeepTogether )( 
            _ParagraphFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeepWithNext )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_KeepWithNext )( 
            _ParagraphFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageBreakBefore )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageBreakBefore )( 
            _ParagraphFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoLineNumber )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoLineNumber )( 
            _ParagraphFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RightIndent )( 
            _ParagraphFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RightIndent )( 
            _ParagraphFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeftIndent )( 
            _ParagraphFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeftIndent )( 
            _ParagraphFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstLineIndent )( 
            _ParagraphFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FirstLineIndent )( 
            _ParagraphFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacing )( 
            _ParagraphFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacing )( 
            _ParagraphFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineSpacingRule )( 
            _ParagraphFormat * This,
            /* [retval][out] */ WdLineSpacing *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineSpacingRule )( 
            _ParagraphFormat * This,
            /* [in] */ WdLineSpacing prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceBefore )( 
            _ParagraphFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceBefore )( 
            _ParagraphFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceAfter )( 
            _ParagraphFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceAfter )( 
            _ParagraphFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyphenation )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Hyphenation )( 
            _ParagraphFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WidowControl )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WidowControl )( 
            _ParagraphFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FarEastLineBreakControl )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FarEastLineBreakControl )( 
            _ParagraphFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WordWrap )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WordWrap )( 
            _ParagraphFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HangingPunctuation )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HangingPunctuation )( 
            _ParagraphFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HalfWidthPunctuationOnTopOfLine )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HalfWidthPunctuationOnTopOfLine )( 
            _ParagraphFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddSpaceBetweenFarEastAndAlpha )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AddSpaceBetweenFarEastAndAlpha )( 
            _ParagraphFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddSpaceBetweenFarEastAndDigit )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AddSpaceBetweenFarEastAndDigit )( 
            _ParagraphFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BaseLineAlignment )( 
            _ParagraphFormat * This,
            /* [retval][out] */ WdBaselineAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BaseLineAlignment )( 
            _ParagraphFormat * This,
            /* [in] */ WdBaselineAlignment prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoAdjustRightIndent )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoAdjustRightIndent )( 
            _ParagraphFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisableLineHeightGrid )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisableLineHeightGrid )( 
            _ParagraphFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabStops )( 
            _ParagraphFormat * This,
            /* [retval][out] */ TabStops **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TabStops )( 
            _ParagraphFormat * This,
            /* [in] */ TabStops *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            _ParagraphFormat * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            _ParagraphFormat * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            _ParagraphFormat * This,
            /* [retval][out] */ Shading **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OutlineLevel )( 
            _ParagraphFormat * This,
            /* [retval][out] */ WdOutlineLevel *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OutlineLevel )( 
            _ParagraphFormat * This,
            /* [in] */ WdOutlineLevel prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CloseUp )( 
            _ParagraphFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenUp )( 
            _ParagraphFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenOrCloseUp )( 
            _ParagraphFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TabHangingIndent )( 
            _ParagraphFormat * This,
            /* [in] */ short Count);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TabIndent )( 
            _ParagraphFormat * This,
            /* [in] */ short Count);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            _ParagraphFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Space1 )( 
            _ParagraphFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Space15 )( 
            _ParagraphFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Space2 )( 
            _ParagraphFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IndentCharWidth )( 
            _ParagraphFormat * This,
            /* [in] */ short Count);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IndentFirstLineCharWidth )( 
            _ParagraphFormat * This,
            /* [in] */ short Count);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterUnitRightIndent )( 
            _ParagraphFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CharacterUnitRightIndent )( 
            _ParagraphFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterUnitLeftIndent )( 
            _ParagraphFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CharacterUnitLeftIndent )( 
            _ParagraphFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CharacterUnitFirstLineIndent )( 
            _ParagraphFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CharacterUnitFirstLineIndent )( 
            _ParagraphFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineUnitBefore )( 
            _ParagraphFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineUnitBefore )( 
            _ParagraphFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineUnitAfter )( 
            _ParagraphFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineUnitAfter )( 
            _ParagraphFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingOrder )( 
            _ParagraphFormat * This,
            /* [retval][out] */ WdReadingOrder *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingOrder )( 
            _ParagraphFormat * This,
            /* [in] */ WdReadingOrder prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceBeforeAuto )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceBeforeAuto )( 
            _ParagraphFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceAfterAuto )( 
            _ParagraphFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceAfterAuto )( 
            _ParagraphFormat * This,
            /* [in] */ long prop);
        
        END_INTERFACE
    } _ParagraphFormatVtbl;

    interface _ParagraphFormat
    {
        CONST_VTBL struct _ParagraphFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _ParagraphFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _ParagraphFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _ParagraphFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _ParagraphFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _ParagraphFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _ParagraphFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _ParagraphFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _ParagraphFormat_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define _ParagraphFormat_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define _ParagraphFormat_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define _ParagraphFormat_get_Duplicate(This,prop)	\
    ( (This)->lpVtbl -> get_Duplicate(This,prop) ) 

#define _ParagraphFormat_get_Style(This,prop)	\
    ( (This)->lpVtbl -> get_Style(This,prop) ) 

#define _ParagraphFormat_put_Style(This,prop)	\
    ( (This)->lpVtbl -> put_Style(This,prop) ) 

#define _ParagraphFormat_get_Alignment(This,prop)	\
    ( (This)->lpVtbl -> get_Alignment(This,prop) ) 

#define _ParagraphFormat_put_Alignment(This,prop)	\
    ( (This)->lpVtbl -> put_Alignment(This,prop) ) 

#define _ParagraphFormat_get_KeepTogether(This,prop)	\
    ( (This)->lpVtbl -> get_KeepTogether(This,prop) ) 

#define _ParagraphFormat_put_KeepTogether(This,prop)	\
    ( (This)->lpVtbl -> put_KeepTogether(This,prop) ) 

#define _ParagraphFormat_get_KeepWithNext(This,prop)	\
    ( (This)->lpVtbl -> get_KeepWithNext(This,prop) ) 

#define _ParagraphFormat_put_KeepWithNext(This,prop)	\
    ( (This)->lpVtbl -> put_KeepWithNext(This,prop) ) 

#define _ParagraphFormat_get_PageBreakBefore(This,prop)	\
    ( (This)->lpVtbl -> get_PageBreakBefore(This,prop) ) 

#define _ParagraphFormat_put_PageBreakBefore(This,prop)	\
    ( (This)->lpVtbl -> put_PageBreakBefore(This,prop) ) 

#define _ParagraphFormat_get_NoLineNumber(This,prop)	\
    ( (This)->lpVtbl -> get_NoLineNumber(This,prop) ) 

#define _ParagraphFormat_put_NoLineNumber(This,prop)	\
    ( (This)->lpVtbl -> put_NoLineNumber(This,prop) ) 

#define _ParagraphFormat_get_RightIndent(This,prop)	\
    ( (This)->lpVtbl -> get_RightIndent(This,prop) ) 

#define _ParagraphFormat_put_RightIndent(This,prop)	\
    ( (This)->lpVtbl -> put_RightIndent(This,prop) ) 

#define _ParagraphFormat_get_LeftIndent(This,prop)	\
    ( (This)->lpVtbl -> get_LeftIndent(This,prop) ) 

#define _ParagraphFormat_put_LeftIndent(This,prop)	\
    ( (This)->lpVtbl -> put_LeftIndent(This,prop) ) 

#define _ParagraphFormat_get_FirstLineIndent(This,prop)	\
    ( (This)->lpVtbl -> get_FirstLineIndent(This,prop) ) 

#define _ParagraphFormat_put_FirstLineIndent(This,prop)	\
    ( (This)->lpVtbl -> put_FirstLineIndent(This,prop) ) 

#define _ParagraphFormat_get_LineSpacing(This,prop)	\
    ( (This)->lpVtbl -> get_LineSpacing(This,prop) ) 

#define _ParagraphFormat_put_LineSpacing(This,prop)	\
    ( (This)->lpVtbl -> put_LineSpacing(This,prop) ) 

#define _ParagraphFormat_get_LineSpacingRule(This,prop)	\
    ( (This)->lpVtbl -> get_LineSpacingRule(This,prop) ) 

#define _ParagraphFormat_put_LineSpacingRule(This,prop)	\
    ( (This)->lpVtbl -> put_LineSpacingRule(This,prop) ) 

#define _ParagraphFormat_get_SpaceBefore(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceBefore(This,prop) ) 

#define _ParagraphFormat_put_SpaceBefore(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceBefore(This,prop) ) 

#define _ParagraphFormat_get_SpaceAfter(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceAfter(This,prop) ) 

#define _ParagraphFormat_put_SpaceAfter(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceAfter(This,prop) ) 

#define _ParagraphFormat_get_Hyphenation(This,prop)	\
    ( (This)->lpVtbl -> get_Hyphenation(This,prop) ) 

#define _ParagraphFormat_put_Hyphenation(This,prop)	\
    ( (This)->lpVtbl -> put_Hyphenation(This,prop) ) 

#define _ParagraphFormat_get_WidowControl(This,prop)	\
    ( (This)->lpVtbl -> get_WidowControl(This,prop) ) 

#define _ParagraphFormat_put_WidowControl(This,prop)	\
    ( (This)->lpVtbl -> put_WidowControl(This,prop) ) 

#define _ParagraphFormat_get_FarEastLineBreakControl(This,prop)	\
    ( (This)->lpVtbl -> get_FarEastLineBreakControl(This,prop) ) 

#define _ParagraphFormat_put_FarEastLineBreakControl(This,prop)	\
    ( (This)->lpVtbl -> put_FarEastLineBreakControl(This,prop) ) 

#define _ParagraphFormat_get_WordWrap(This,prop)	\
    ( (This)->lpVtbl -> get_WordWrap(This,prop) ) 

#define _ParagraphFormat_put_WordWrap(This,prop)	\
    ( (This)->lpVtbl -> put_WordWrap(This,prop) ) 

#define _ParagraphFormat_get_HangingPunctuation(This,prop)	\
    ( (This)->lpVtbl -> get_HangingPunctuation(This,prop) ) 

#define _ParagraphFormat_put_HangingPunctuation(This,prop)	\
    ( (This)->lpVtbl -> put_HangingPunctuation(This,prop) ) 

#define _ParagraphFormat_get_HalfWidthPunctuationOnTopOfLine(This,prop)	\
    ( (This)->lpVtbl -> get_HalfWidthPunctuationOnTopOfLine(This,prop) ) 

#define _ParagraphFormat_put_HalfWidthPunctuationOnTopOfLine(This,prop)	\
    ( (This)->lpVtbl -> put_HalfWidthPunctuationOnTopOfLine(This,prop) ) 

#define _ParagraphFormat_get_AddSpaceBetweenFarEastAndAlpha(This,prop)	\
    ( (This)->lpVtbl -> get_AddSpaceBetweenFarEastAndAlpha(This,prop) ) 

#define _ParagraphFormat_put_AddSpaceBetweenFarEastAndAlpha(This,prop)	\
    ( (This)->lpVtbl -> put_AddSpaceBetweenFarEastAndAlpha(This,prop) ) 

#define _ParagraphFormat_get_AddSpaceBetweenFarEastAndDigit(This,prop)	\
    ( (This)->lpVtbl -> get_AddSpaceBetweenFarEastAndDigit(This,prop) ) 

#define _ParagraphFormat_put_AddSpaceBetweenFarEastAndDigit(This,prop)	\
    ( (This)->lpVtbl -> put_AddSpaceBetweenFarEastAndDigit(This,prop) ) 

#define _ParagraphFormat_get_BaseLineAlignment(This,prop)	\
    ( (This)->lpVtbl -> get_BaseLineAlignment(This,prop) ) 

#define _ParagraphFormat_put_BaseLineAlignment(This,prop)	\
    ( (This)->lpVtbl -> put_BaseLineAlignment(This,prop) ) 

#define _ParagraphFormat_get_AutoAdjustRightIndent(This,prop)	\
    ( (This)->lpVtbl -> get_AutoAdjustRightIndent(This,prop) ) 

#define _ParagraphFormat_put_AutoAdjustRightIndent(This,prop)	\
    ( (This)->lpVtbl -> put_AutoAdjustRightIndent(This,prop) ) 

#define _ParagraphFormat_get_DisableLineHeightGrid(This,prop)	\
    ( (This)->lpVtbl -> get_DisableLineHeightGrid(This,prop) ) 

#define _ParagraphFormat_put_DisableLineHeightGrid(This,prop)	\
    ( (This)->lpVtbl -> put_DisableLineHeightGrid(This,prop) ) 

#define _ParagraphFormat_get_TabStops(This,prop)	\
    ( (This)->lpVtbl -> get_TabStops(This,prop) ) 

#define _ParagraphFormat_put_TabStops(This,prop)	\
    ( (This)->lpVtbl -> put_TabStops(This,prop) ) 

#define _ParagraphFormat_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define _ParagraphFormat_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define _ParagraphFormat_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define _ParagraphFormat_get_OutlineLevel(This,prop)	\
    ( (This)->lpVtbl -> get_OutlineLevel(This,prop) ) 

#define _ParagraphFormat_put_OutlineLevel(This,prop)	\
    ( (This)->lpVtbl -> put_OutlineLevel(This,prop) ) 

#define _ParagraphFormat_CloseUp(This)	\
    ( (This)->lpVtbl -> CloseUp(This) ) 

#define _ParagraphFormat_OpenUp(This)	\
    ( (This)->lpVtbl -> OpenUp(This) ) 

#define _ParagraphFormat_OpenOrCloseUp(This)	\
    ( (This)->lpVtbl -> OpenOrCloseUp(This) ) 

#define _ParagraphFormat_TabHangingIndent(This,Count)	\
    ( (This)->lpVtbl -> TabHangingIndent(This,Count) ) 

#define _ParagraphFormat_TabIndent(This,Count)	\
    ( (This)->lpVtbl -> TabIndent(This,Count) ) 

#define _ParagraphFormat_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define _ParagraphFormat_Space1(This)	\
    ( (This)->lpVtbl -> Space1(This) ) 

#define _ParagraphFormat_Space15(This)	\
    ( (This)->lpVtbl -> Space15(This) ) 

#define _ParagraphFormat_Space2(This)	\
    ( (This)->lpVtbl -> Space2(This) ) 

#define _ParagraphFormat_IndentCharWidth(This,Count)	\
    ( (This)->lpVtbl -> IndentCharWidth(This,Count) ) 

#define _ParagraphFormat_IndentFirstLineCharWidth(This,Count)	\
    ( (This)->lpVtbl -> IndentFirstLineCharWidth(This,Count) ) 

#define _ParagraphFormat_get_CharacterUnitRightIndent(This,prop)	\
    ( (This)->lpVtbl -> get_CharacterUnitRightIndent(This,prop) ) 

#define _ParagraphFormat_put_CharacterUnitRightIndent(This,prop)	\
    ( (This)->lpVtbl -> put_CharacterUnitRightIndent(This,prop) ) 

#define _ParagraphFormat_get_CharacterUnitLeftIndent(This,prop)	\
    ( (This)->lpVtbl -> get_CharacterUnitLeftIndent(This,prop) ) 

#define _ParagraphFormat_put_CharacterUnitLeftIndent(This,prop)	\
    ( (This)->lpVtbl -> put_CharacterUnitLeftIndent(This,prop) ) 

#define _ParagraphFormat_get_CharacterUnitFirstLineIndent(This,prop)	\
    ( (This)->lpVtbl -> get_CharacterUnitFirstLineIndent(This,prop) ) 

#define _ParagraphFormat_put_CharacterUnitFirstLineIndent(This,prop)	\
    ( (This)->lpVtbl -> put_CharacterUnitFirstLineIndent(This,prop) ) 

#define _ParagraphFormat_get_LineUnitBefore(This,prop)	\
    ( (This)->lpVtbl -> get_LineUnitBefore(This,prop) ) 

#define _ParagraphFormat_put_LineUnitBefore(This,prop)	\
    ( (This)->lpVtbl -> put_LineUnitBefore(This,prop) ) 

#define _ParagraphFormat_get_LineUnitAfter(This,prop)	\
    ( (This)->lpVtbl -> get_LineUnitAfter(This,prop) ) 

#define _ParagraphFormat_put_LineUnitAfter(This,prop)	\
    ( (This)->lpVtbl -> put_LineUnitAfter(This,prop) ) 

#define _ParagraphFormat_get_ReadingOrder(This,prop)	\
    ( (This)->lpVtbl -> get_ReadingOrder(This,prop) ) 

#define _ParagraphFormat_put_ReadingOrder(This,prop)	\
    ( (This)->lpVtbl -> put_ReadingOrder(This,prop) ) 

#define _ParagraphFormat_get_SpaceBeforeAuto(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceBeforeAuto(This,prop) ) 

#define _ParagraphFormat_put_SpaceBeforeAuto(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceBeforeAuto(This,prop) ) 

#define _ParagraphFormat_get_SpaceAfterAuto(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceAfterAuto(This,prop) ) 

#define _ParagraphFormat_put_SpaceAfterAuto(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceAfterAuto(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___ParagraphFormat_INTERFACE_DEFINED__ */


#ifndef ___Font_INTERFACE_DEFINED__
#define ___Font_INTERFACE_DEFINED__

/* interface _Font */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][version][uuid] */ 


EXTERN_C const IID IID__Font;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020952-0000-0000-C000-000000000046")
    _Font : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Duplicate( 
            /* [retval][out] */ /* external definition not present */ Font **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bold( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Bold( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Italic( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Italic( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hidden( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Hidden( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmallCaps( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SmallCaps( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllCaps( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllCaps( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StrikeThrough( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StrikeThrough( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DoubleStrikeThrough( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DoubleStrikeThrough( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColorIndex( 
            /* [retval][out] */ WdColorIndex *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColorIndex( 
            /* [in] */ WdColorIndex prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Subscript( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Subscript( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Superscript( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Superscript( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Underline( 
            /* [retval][out] */ WdUnderline *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Underline( 
            /* [in] */ WdUnderline prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Size( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Spacing( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Spacing( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Scaling( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Scaling( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Shadow( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Outline( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Outline( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Emboss( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Emboss( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kerning( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Kerning( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Engrave( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Engrave( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Animation( 
            /* [retval][out] */ WdAnimation *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Animation( 
            /* [in] */ WdAnimation prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EmphasisMark( 
            /* [retval][out] */ WdEmphasisMark *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EmphasisMark( 
            /* [in] */ WdEmphasisMark prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisableCharacterSpaceGrid( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisableCharacterSpaceGrid( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NameFarEast( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NameFarEast( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NameAscii( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NameAscii( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NameOther( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NameOther( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Grow( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Shrink( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetAsTemplateDefault( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Color( 
            /* [retval][out] */ WdColor *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Color( 
            /* [in] */ WdColor prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BoldBi( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BoldBi( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ItalicBi( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ItalicBi( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SizeBi( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SizeBi( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NameBi( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NameBi( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColorIndexBi( 
            /* [retval][out] */ WdColorIndex *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColorIndexBi( 
            /* [in] */ WdColorIndex prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DiacriticColor( 
            /* [retval][out] */ WdColor *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DiacriticColor( 
            /* [in] */ WdColor prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UnderlineColor( 
            /* [retval][out] */ WdColor *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UnderlineColor( 
            /* [in] */ WdColor prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _FontVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Font * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Font * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Font * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Font * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Font * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Font * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Font * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            _Font * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Font * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Duplicate )( 
            _Font * This,
            /* [retval][out] */ /* external definition not present */ Font **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bold )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Bold )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Italic )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Italic )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hidden )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Hidden )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmallCaps )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SmallCaps )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllCaps )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllCaps )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StrikeThrough )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StrikeThrough )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DoubleStrikeThrough )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DoubleStrikeThrough )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColorIndex )( 
            _Font * This,
            /* [retval][out] */ WdColorIndex *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColorIndex )( 
            _Font * This,
            /* [in] */ WdColorIndex prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Subscript )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Subscript )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Superscript )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Superscript )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Underline )( 
            _Font * This,
            /* [retval][out] */ WdUnderline *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Underline )( 
            _Font * This,
            /* [in] */ WdUnderline prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            _Font * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Size )( 
            _Font * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            _Font * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            _Font * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Spacing )( 
            _Font * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Spacing )( 
            _Font * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Scaling )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Scaling )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadow )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Outline )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Outline )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Emboss )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Emboss )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kerning )( 
            _Font * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Kerning )( 
            _Font * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Engrave )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Engrave )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Animation )( 
            _Font * This,
            /* [retval][out] */ WdAnimation *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Animation )( 
            _Font * This,
            /* [in] */ WdAnimation prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            _Font * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            _Font * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            _Font * This,
            /* [retval][out] */ Shading **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EmphasisMark )( 
            _Font * This,
            /* [retval][out] */ WdEmphasisMark *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EmphasisMark )( 
            _Font * This,
            /* [in] */ WdEmphasisMark prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisableCharacterSpaceGrid )( 
            _Font * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisableCharacterSpaceGrid )( 
            _Font * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NameFarEast )( 
            _Font * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NameFarEast )( 
            _Font * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NameAscii )( 
            _Font * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NameAscii )( 
            _Font * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NameOther )( 
            _Font * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NameOther )( 
            _Font * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Grow )( 
            _Font * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Shrink )( 
            _Font * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            _Font * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetAsTemplateDefault )( 
            _Font * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            _Font * This,
            /* [retval][out] */ WdColor *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            _Font * This,
            /* [in] */ WdColor prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BoldBi )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BoldBi )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ItalicBi )( 
            _Font * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ItalicBi )( 
            _Font * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SizeBi )( 
            _Font * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SizeBi )( 
            _Font * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NameBi )( 
            _Font * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NameBi )( 
            _Font * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColorIndexBi )( 
            _Font * This,
            /* [retval][out] */ WdColorIndex *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColorIndexBi )( 
            _Font * This,
            /* [in] */ WdColorIndex prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DiacriticColor )( 
            _Font * This,
            /* [retval][out] */ WdColor *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DiacriticColor )( 
            _Font * This,
            /* [in] */ WdColor prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UnderlineColor )( 
            _Font * This,
            /* [retval][out] */ WdColor *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UnderlineColor )( 
            _Font * This,
            /* [in] */ WdColor prop);
        
        END_INTERFACE
    } _FontVtbl;

    interface _Font
    {
        CONST_VTBL struct _FontVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Font_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _Font_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _Font_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _Font_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _Font_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _Font_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _Font_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _Font_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define _Font_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define _Font_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define _Font_get_Duplicate(This,prop)	\
    ( (This)->lpVtbl -> get_Duplicate(This,prop) ) 

#define _Font_get_Bold(This,prop)	\
    ( (This)->lpVtbl -> get_Bold(This,prop) ) 

#define _Font_put_Bold(This,prop)	\
    ( (This)->lpVtbl -> put_Bold(This,prop) ) 

#define _Font_get_Italic(This,prop)	\
    ( (This)->lpVtbl -> get_Italic(This,prop) ) 

#define _Font_put_Italic(This,prop)	\
    ( (This)->lpVtbl -> put_Italic(This,prop) ) 

#define _Font_get_Hidden(This,prop)	\
    ( (This)->lpVtbl -> get_Hidden(This,prop) ) 

#define _Font_put_Hidden(This,prop)	\
    ( (This)->lpVtbl -> put_Hidden(This,prop) ) 

#define _Font_get_SmallCaps(This,prop)	\
    ( (This)->lpVtbl -> get_SmallCaps(This,prop) ) 

#define _Font_put_SmallCaps(This,prop)	\
    ( (This)->lpVtbl -> put_SmallCaps(This,prop) ) 

#define _Font_get_AllCaps(This,prop)	\
    ( (This)->lpVtbl -> get_AllCaps(This,prop) ) 

#define _Font_put_AllCaps(This,prop)	\
    ( (This)->lpVtbl -> put_AllCaps(This,prop) ) 

#define _Font_get_StrikeThrough(This,prop)	\
    ( (This)->lpVtbl -> get_StrikeThrough(This,prop) ) 

#define _Font_put_StrikeThrough(This,prop)	\
    ( (This)->lpVtbl -> put_StrikeThrough(This,prop) ) 

#define _Font_get_DoubleStrikeThrough(This,prop)	\
    ( (This)->lpVtbl -> get_DoubleStrikeThrough(This,prop) ) 

#define _Font_put_DoubleStrikeThrough(This,prop)	\
    ( (This)->lpVtbl -> put_DoubleStrikeThrough(This,prop) ) 

#define _Font_get_ColorIndex(This,prop)	\
    ( (This)->lpVtbl -> get_ColorIndex(This,prop) ) 

#define _Font_put_ColorIndex(This,prop)	\
    ( (This)->lpVtbl -> put_ColorIndex(This,prop) ) 

#define _Font_get_Subscript(This,prop)	\
    ( (This)->lpVtbl -> get_Subscript(This,prop) ) 

#define _Font_put_Subscript(This,prop)	\
    ( (This)->lpVtbl -> put_Subscript(This,prop) ) 

#define _Font_get_Superscript(This,prop)	\
    ( (This)->lpVtbl -> get_Superscript(This,prop) ) 

#define _Font_put_Superscript(This,prop)	\
    ( (This)->lpVtbl -> put_Superscript(This,prop) ) 

#define _Font_get_Underline(This,prop)	\
    ( (This)->lpVtbl -> get_Underline(This,prop) ) 

#define _Font_put_Underline(This,prop)	\
    ( (This)->lpVtbl -> put_Underline(This,prop) ) 

#define _Font_get_Size(This,prop)	\
    ( (This)->lpVtbl -> get_Size(This,prop) ) 

#define _Font_put_Size(This,prop)	\
    ( (This)->lpVtbl -> put_Size(This,prop) ) 

#define _Font_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define _Font_put_Name(This,prop)	\
    ( (This)->lpVtbl -> put_Name(This,prop) ) 

#define _Font_get_Position(This,prop)	\
    ( (This)->lpVtbl -> get_Position(This,prop) ) 

#define _Font_put_Position(This,prop)	\
    ( (This)->lpVtbl -> put_Position(This,prop) ) 

#define _Font_get_Spacing(This,prop)	\
    ( (This)->lpVtbl -> get_Spacing(This,prop) ) 

#define _Font_put_Spacing(This,prop)	\
    ( (This)->lpVtbl -> put_Spacing(This,prop) ) 

#define _Font_get_Scaling(This,prop)	\
    ( (This)->lpVtbl -> get_Scaling(This,prop) ) 

#define _Font_put_Scaling(This,prop)	\
    ( (This)->lpVtbl -> put_Scaling(This,prop) ) 

#define _Font_get_Shadow(This,prop)	\
    ( (This)->lpVtbl -> get_Shadow(This,prop) ) 

#define _Font_put_Shadow(This,prop)	\
    ( (This)->lpVtbl -> put_Shadow(This,prop) ) 

#define _Font_get_Outline(This,prop)	\
    ( (This)->lpVtbl -> get_Outline(This,prop) ) 

#define _Font_put_Outline(This,prop)	\
    ( (This)->lpVtbl -> put_Outline(This,prop) ) 

#define _Font_get_Emboss(This,prop)	\
    ( (This)->lpVtbl -> get_Emboss(This,prop) ) 

#define _Font_put_Emboss(This,prop)	\
    ( (This)->lpVtbl -> put_Emboss(This,prop) ) 

#define _Font_get_Kerning(This,prop)	\
    ( (This)->lpVtbl -> get_Kerning(This,prop) ) 

#define _Font_put_Kerning(This,prop)	\
    ( (This)->lpVtbl -> put_Kerning(This,prop) ) 

#define _Font_get_Engrave(This,prop)	\
    ( (This)->lpVtbl -> get_Engrave(This,prop) ) 

#define _Font_put_Engrave(This,prop)	\
    ( (This)->lpVtbl -> put_Engrave(This,prop) ) 

#define _Font_get_Animation(This,prop)	\
    ( (This)->lpVtbl -> get_Animation(This,prop) ) 

#define _Font_put_Animation(This,prop)	\
    ( (This)->lpVtbl -> put_Animation(This,prop) ) 

#define _Font_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define _Font_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define _Font_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define _Font_get_EmphasisMark(This,prop)	\
    ( (This)->lpVtbl -> get_EmphasisMark(This,prop) ) 

#define _Font_put_EmphasisMark(This,prop)	\
    ( (This)->lpVtbl -> put_EmphasisMark(This,prop) ) 

#define _Font_get_DisableCharacterSpaceGrid(This,prop)	\
    ( (This)->lpVtbl -> get_DisableCharacterSpaceGrid(This,prop) ) 

#define _Font_put_DisableCharacterSpaceGrid(This,prop)	\
    ( (This)->lpVtbl -> put_DisableCharacterSpaceGrid(This,prop) ) 

#define _Font_get_NameFarEast(This,prop)	\
    ( (This)->lpVtbl -> get_NameFarEast(This,prop) ) 

#define _Font_put_NameFarEast(This,prop)	\
    ( (This)->lpVtbl -> put_NameFarEast(This,prop) ) 

#define _Font_get_NameAscii(This,prop)	\
    ( (This)->lpVtbl -> get_NameAscii(This,prop) ) 

#define _Font_put_NameAscii(This,prop)	\
    ( (This)->lpVtbl -> put_NameAscii(This,prop) ) 

#define _Font_get_NameOther(This,prop)	\
    ( (This)->lpVtbl -> get_NameOther(This,prop) ) 

#define _Font_put_NameOther(This,prop)	\
    ( (This)->lpVtbl -> put_NameOther(This,prop) ) 

#define _Font_Grow(This)	\
    ( (This)->lpVtbl -> Grow(This) ) 

#define _Font_Shrink(This)	\
    ( (This)->lpVtbl -> Shrink(This) ) 

#define _Font_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define _Font_SetAsTemplateDefault(This)	\
    ( (This)->lpVtbl -> SetAsTemplateDefault(This) ) 

#define _Font_get_Color(This,prop)	\
    ( (This)->lpVtbl -> get_Color(This,prop) ) 

#define _Font_put_Color(This,prop)	\
    ( (This)->lpVtbl -> put_Color(This,prop) ) 

#define _Font_get_BoldBi(This,prop)	\
    ( (This)->lpVtbl -> get_BoldBi(This,prop) ) 

#define _Font_put_BoldBi(This,prop)	\
    ( (This)->lpVtbl -> put_BoldBi(This,prop) ) 

#define _Font_get_ItalicBi(This,prop)	\
    ( (This)->lpVtbl -> get_ItalicBi(This,prop) ) 

#define _Font_put_ItalicBi(This,prop)	\
    ( (This)->lpVtbl -> put_ItalicBi(This,prop) ) 

#define _Font_get_SizeBi(This,prop)	\
    ( (This)->lpVtbl -> get_SizeBi(This,prop) ) 

#define _Font_put_SizeBi(This,prop)	\
    ( (This)->lpVtbl -> put_SizeBi(This,prop) ) 

#define _Font_get_NameBi(This,prop)	\
    ( (This)->lpVtbl -> get_NameBi(This,prop) ) 

#define _Font_put_NameBi(This,prop)	\
    ( (This)->lpVtbl -> put_NameBi(This,prop) ) 

#define _Font_get_ColorIndexBi(This,prop)	\
    ( (This)->lpVtbl -> get_ColorIndexBi(This,prop) ) 

#define _Font_put_ColorIndexBi(This,prop)	\
    ( (This)->lpVtbl -> put_ColorIndexBi(This,prop) ) 

#define _Font_get_DiacriticColor(This,prop)	\
    ( (This)->lpVtbl -> get_DiacriticColor(This,prop) ) 

#define _Font_put_DiacriticColor(This,prop)	\
    ( (This)->lpVtbl -> put_DiacriticColor(This,prop) ) 

#define _Font_get_UnderlineColor(This,prop)	\
    ( (This)->lpVtbl -> get_UnderlineColor(This,prop) ) 

#define _Font_put_UnderlineColor(This,prop)	\
    ( (This)->lpVtbl -> put_UnderlineColor(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___Font_INTERFACE_DEFINED__ */


#ifndef __Table_INTERFACE_DEFINED__
#define __Table_INTERFACE_DEFINED__

/* interface Table */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Table;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020951-0000-0000-C000-000000000046")
    Table : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Columns( 
            /* [retval][out] */ Columns **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rows( 
            /* [retval][out] */ Rows **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Uniform( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatType( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE SortOld( 
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *FieldNumber,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *FieldNumber2,
            /* [optional][in] */ VARIANT *SortFieldType2,
            /* [optional][in] */ VARIANT *SortOrder2,
            /* [optional][in] */ VARIANT *FieldNumber3,
            /* [optional][in] */ VARIANT *SortFieldType3,
            /* [optional][in] */ VARIANT *SortOrder3,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *LanguageID) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SortAscending( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SortDescending( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AutoFormat( 
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ApplyBorders,
            /* [optional][in] */ VARIANT *ApplyShading,
            /* [optional][in] */ VARIANT *ApplyFont,
            /* [optional][in] */ VARIANT *ApplyColor,
            /* [optional][in] */ VARIANT *ApplyHeadingRows,
            /* [optional][in] */ VARIANT *ApplyLastRow,
            /* [optional][in] */ VARIANT *ApplyFirstColumn,
            /* [optional][in] */ VARIANT *ApplyLastColumn,
            /* [optional][in] */ VARIANT *AutoFit) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UpdateAutoFormat( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ConvertToTextOld( 
            /* [optional][in] */ VARIANT *Separator,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cell( 
            /* [in] */ long Row,
            /* [in] */ long Column,
            /* [retval][out] */ Cell **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Split( 
            /* [in] */ VARIANT *BeforeRow,
            /* [retval][out] */ Table **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToText( 
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *NestedTables,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AutoFitBehavior( 
            /* [in] */ WdAutoFitBehavior Behavior) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Sort( 
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *FieldNumber,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *FieldNumber2,
            /* [optional][in] */ VARIANT *SortFieldType2,
            /* [optional][in] */ VARIANT *SortOrder2,
            /* [optional][in] */ VARIANT *FieldNumber3,
            /* [optional][in] */ VARIANT *SortFieldType3,
            /* [optional][in] */ VARIANT *SortOrder3,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *BidiSort,
            /* [optional][in] */ VARIANT *IgnoreThe,
            /* [optional][in] */ VARIANT *IgnoreKashida,
            /* [optional][in] */ VARIANT *IgnoreDiacritics,
            /* [optional][in] */ VARIANT *IgnoreHe,
            /* [optional][in] */ VARIANT *LanguageID) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Tables( 
            /* [retval][out] */ Tables **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NestingLevel( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowPageBreaks( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowPageBreaks( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowAutoFit( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowAutoFit( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PreferredWidth( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PreferredWidth( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PreferredWidthType( 
            /* [retval][out] */ WdPreferredWidthType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PreferredWidthType( 
            /* [in] */ WdPreferredWidthType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TopPadding( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TopPadding( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BottomPadding( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BottomPadding( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeftPadding( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeftPadding( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RightPadding( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RightPadding( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Spacing( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Spacing( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TableDirection( 
            /* [retval][out] */ WdTableDirection *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TableDirection( 
            /* [in] */ WdTableDirection prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ID( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Style( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ApplyStyleHeadingRows( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ApplyStyleHeadingRows( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ApplyStyleLastRow( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ApplyStyleLastRow( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ApplyStyleFirstColumn( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ApplyStyleFirstColumn( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ApplyStyleLastColumn( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ApplyStyleLastColumn( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Table * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Table * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Table * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Table * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Table * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Table * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Table * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Table * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Table * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Table * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Table * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Columns )( 
            Table * This,
            /* [retval][out] */ Columns **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rows )( 
            Table * This,
            /* [retval][out] */ Rows **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            Table * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            Table * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            Table * This,
            /* [retval][out] */ Shading **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Uniform )( 
            Table * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatType )( 
            Table * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Table * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Table * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *SortOld )( 
            Table * This,
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *FieldNumber,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *FieldNumber2,
            /* [optional][in] */ VARIANT *SortFieldType2,
            /* [optional][in] */ VARIANT *SortOrder2,
            /* [optional][in] */ VARIANT *FieldNumber3,
            /* [optional][in] */ VARIANT *SortFieldType3,
            /* [optional][in] */ VARIANT *SortOrder3,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *LanguageID);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SortAscending )( 
            Table * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SortDescending )( 
            Table * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AutoFormat )( 
            Table * This,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ApplyBorders,
            /* [optional][in] */ VARIANT *ApplyShading,
            /* [optional][in] */ VARIANT *ApplyFont,
            /* [optional][in] */ VARIANT *ApplyColor,
            /* [optional][in] */ VARIANT *ApplyHeadingRows,
            /* [optional][in] */ VARIANT *ApplyLastRow,
            /* [optional][in] */ VARIANT *ApplyFirstColumn,
            /* [optional][in] */ VARIANT *ApplyLastColumn,
            /* [optional][in] */ VARIANT *AutoFit);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UpdateAutoFormat )( 
            Table * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToTextOld )( 
            Table * This,
            /* [optional][in] */ VARIANT *Separator,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cell )( 
            Table * This,
            /* [in] */ long Row,
            /* [in] */ long Column,
            /* [retval][out] */ Cell **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Split )( 
            Table * This,
            /* [in] */ VARIANT *BeforeRow,
            /* [retval][out] */ Table **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToText )( 
            Table * This,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *NestedTables,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AutoFitBehavior )( 
            Table * This,
            /* [in] */ WdAutoFitBehavior Behavior);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Sort )( 
            Table * This,
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *FieldNumber,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *FieldNumber2,
            /* [optional][in] */ VARIANT *SortFieldType2,
            /* [optional][in] */ VARIANT *SortOrder2,
            /* [optional][in] */ VARIANT *FieldNumber3,
            /* [optional][in] */ VARIANT *SortFieldType3,
            /* [optional][in] */ VARIANT *SortOrder3,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *BidiSort,
            /* [optional][in] */ VARIANT *IgnoreThe,
            /* [optional][in] */ VARIANT *IgnoreKashida,
            /* [optional][in] */ VARIANT *IgnoreDiacritics,
            /* [optional][in] */ VARIANT *IgnoreHe,
            /* [optional][in] */ VARIANT *LanguageID);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Tables )( 
            Table * This,
            /* [retval][out] */ Tables **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NestingLevel )( 
            Table * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPageBreaks )( 
            Table * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPageBreaks )( 
            Table * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowAutoFit )( 
            Table * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowAutoFit )( 
            Table * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredWidth )( 
            Table * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PreferredWidth )( 
            Table * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredWidthType )( 
            Table * This,
            /* [retval][out] */ WdPreferredWidthType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PreferredWidthType )( 
            Table * This,
            /* [in] */ WdPreferredWidthType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TopPadding )( 
            Table * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TopPadding )( 
            Table * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BottomPadding )( 
            Table * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BottomPadding )( 
            Table * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeftPadding )( 
            Table * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeftPadding )( 
            Table * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RightPadding )( 
            Table * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RightPadding )( 
            Table * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Spacing )( 
            Table * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Spacing )( 
            Table * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TableDirection )( 
            Table * This,
            /* [retval][out] */ WdTableDirection *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TableDirection )( 
            Table * This,
            /* [in] */ WdTableDirection prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            Table * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ID )( 
            Table * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            Table * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            Table * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ApplyStyleHeadingRows )( 
            Table * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ApplyStyleHeadingRows )( 
            Table * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ApplyStyleLastRow )( 
            Table * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ApplyStyleLastRow )( 
            Table * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ApplyStyleFirstColumn )( 
            Table * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ApplyStyleFirstColumn )( 
            Table * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ApplyStyleLastColumn )( 
            Table * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ApplyStyleLastColumn )( 
            Table * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } TableVtbl;

    interface Table
    {
        CONST_VTBL struct TableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Table_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Table_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Table_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Table_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Table_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Table_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Table_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Table_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Table_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Table_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Table_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Table_get_Columns(This,prop)	\
    ( (This)->lpVtbl -> get_Columns(This,prop) ) 

#define Table_get_Rows(This,prop)	\
    ( (This)->lpVtbl -> get_Rows(This,prop) ) 

#define Table_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define Table_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define Table_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define Table_get_Uniform(This,prop)	\
    ( (This)->lpVtbl -> get_Uniform(This,prop) ) 

#define Table_get_AutoFormatType(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatType(This,prop) ) 

#define Table_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define Table_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Table_SortOld(This,ExcludeHeader,FieldNumber,SortFieldType,SortOrder,FieldNumber2,SortFieldType2,SortOrder2,FieldNumber3,SortFieldType3,SortOrder3,CaseSensitive,LanguageID)	\
    ( (This)->lpVtbl -> SortOld(This,ExcludeHeader,FieldNumber,SortFieldType,SortOrder,FieldNumber2,SortFieldType2,SortOrder2,FieldNumber3,SortFieldType3,SortOrder3,CaseSensitive,LanguageID) ) 

#define Table_SortAscending(This)	\
    ( (This)->lpVtbl -> SortAscending(This) ) 

#define Table_SortDescending(This)	\
    ( (This)->lpVtbl -> SortDescending(This) ) 

#define Table_AutoFormat(This,Format,ApplyBorders,ApplyShading,ApplyFont,ApplyColor,ApplyHeadingRows,ApplyLastRow,ApplyFirstColumn,ApplyLastColumn,AutoFit)	\
    ( (This)->lpVtbl -> AutoFormat(This,Format,ApplyBorders,ApplyShading,ApplyFont,ApplyColor,ApplyHeadingRows,ApplyLastRow,ApplyFirstColumn,ApplyLastColumn,AutoFit) ) 

#define Table_UpdateAutoFormat(This)	\
    ( (This)->lpVtbl -> UpdateAutoFormat(This) ) 

#define Table_ConvertToTextOld(This,Separator,prop)	\
    ( (This)->lpVtbl -> ConvertToTextOld(This,Separator,prop) ) 

#define Table_Cell(This,Row,Column,prop)	\
    ( (This)->lpVtbl -> Cell(This,Row,Column,prop) ) 

#define Table_Split(This,BeforeRow,prop)	\
    ( (This)->lpVtbl -> Split(This,BeforeRow,prop) ) 

#define Table_ConvertToText(This,Separator,NestedTables,prop)	\
    ( (This)->lpVtbl -> ConvertToText(This,Separator,NestedTables,prop) ) 

#define Table_AutoFitBehavior(This,Behavior)	\
    ( (This)->lpVtbl -> AutoFitBehavior(This,Behavior) ) 

#define Table_Sort(This,ExcludeHeader,FieldNumber,SortFieldType,SortOrder,FieldNumber2,SortFieldType2,SortOrder2,FieldNumber3,SortFieldType3,SortOrder3,CaseSensitive,BidiSort,IgnoreThe,IgnoreKashida,IgnoreDiacritics,IgnoreHe,LanguageID)	\
    ( (This)->lpVtbl -> Sort(This,ExcludeHeader,FieldNumber,SortFieldType,SortOrder,FieldNumber2,SortFieldType2,SortOrder2,FieldNumber3,SortFieldType3,SortOrder3,CaseSensitive,BidiSort,IgnoreThe,IgnoreKashida,IgnoreDiacritics,IgnoreHe,LanguageID) ) 

#define Table_get_Tables(This,prop)	\
    ( (This)->lpVtbl -> get_Tables(This,prop) ) 

#define Table_get_NestingLevel(This,prop)	\
    ( (This)->lpVtbl -> get_NestingLevel(This,prop) ) 

#define Table_get_AllowPageBreaks(This,prop)	\
    ( (This)->lpVtbl -> get_AllowPageBreaks(This,prop) ) 

#define Table_put_AllowPageBreaks(This,prop)	\
    ( (This)->lpVtbl -> put_AllowPageBreaks(This,prop) ) 

#define Table_get_AllowAutoFit(This,prop)	\
    ( (This)->lpVtbl -> get_AllowAutoFit(This,prop) ) 

#define Table_put_AllowAutoFit(This,prop)	\
    ( (This)->lpVtbl -> put_AllowAutoFit(This,prop) ) 

#define Table_get_PreferredWidth(This,prop)	\
    ( (This)->lpVtbl -> get_PreferredWidth(This,prop) ) 

#define Table_put_PreferredWidth(This,prop)	\
    ( (This)->lpVtbl -> put_PreferredWidth(This,prop) ) 

#define Table_get_PreferredWidthType(This,prop)	\
    ( (This)->lpVtbl -> get_PreferredWidthType(This,prop) ) 

#define Table_put_PreferredWidthType(This,prop)	\
    ( (This)->lpVtbl -> put_PreferredWidthType(This,prop) ) 

#define Table_get_TopPadding(This,prop)	\
    ( (This)->lpVtbl -> get_TopPadding(This,prop) ) 

#define Table_put_TopPadding(This,prop)	\
    ( (This)->lpVtbl -> put_TopPadding(This,prop) ) 

#define Table_get_BottomPadding(This,prop)	\
    ( (This)->lpVtbl -> get_BottomPadding(This,prop) ) 

#define Table_put_BottomPadding(This,prop)	\
    ( (This)->lpVtbl -> put_BottomPadding(This,prop) ) 

#define Table_get_LeftPadding(This,prop)	\
    ( (This)->lpVtbl -> get_LeftPadding(This,prop) ) 

#define Table_put_LeftPadding(This,prop)	\
    ( (This)->lpVtbl -> put_LeftPadding(This,prop) ) 

#define Table_get_RightPadding(This,prop)	\
    ( (This)->lpVtbl -> get_RightPadding(This,prop) ) 

#define Table_put_RightPadding(This,prop)	\
    ( (This)->lpVtbl -> put_RightPadding(This,prop) ) 

#define Table_get_Spacing(This,prop)	\
    ( (This)->lpVtbl -> get_Spacing(This,prop) ) 

#define Table_put_Spacing(This,prop)	\
    ( (This)->lpVtbl -> put_Spacing(This,prop) ) 

#define Table_get_TableDirection(This,prop)	\
    ( (This)->lpVtbl -> get_TableDirection(This,prop) ) 

#define Table_put_TableDirection(This,prop)	\
    ( (This)->lpVtbl -> put_TableDirection(This,prop) ) 

#define Table_get_ID(This,prop)	\
    ( (This)->lpVtbl -> get_ID(This,prop) ) 

#define Table_put_ID(This,prop)	\
    ( (This)->lpVtbl -> put_ID(This,prop) ) 

#define Table_get_Style(This,prop)	\
    ( (This)->lpVtbl -> get_Style(This,prop) ) 

#define Table_put_Style(This,prop)	\
    ( (This)->lpVtbl -> put_Style(This,prop) ) 

#define Table_get_ApplyStyleHeadingRows(This,prop)	\
    ( (This)->lpVtbl -> get_ApplyStyleHeadingRows(This,prop) ) 

#define Table_put_ApplyStyleHeadingRows(This,prop)	\
    ( (This)->lpVtbl -> put_ApplyStyleHeadingRows(This,prop) ) 

#define Table_get_ApplyStyleLastRow(This,prop)	\
    ( (This)->lpVtbl -> get_ApplyStyleLastRow(This,prop) ) 

#define Table_put_ApplyStyleLastRow(This,prop)	\
    ( (This)->lpVtbl -> put_ApplyStyleLastRow(This,prop) ) 

#define Table_get_ApplyStyleFirstColumn(This,prop)	\
    ( (This)->lpVtbl -> get_ApplyStyleFirstColumn(This,prop) ) 

#define Table_put_ApplyStyleFirstColumn(This,prop)	\
    ( (This)->lpVtbl -> put_ApplyStyleFirstColumn(This,prop) ) 

#define Table_get_ApplyStyleLastColumn(This,prop)	\
    ( (This)->lpVtbl -> get_ApplyStyleLastColumn(This,prop) ) 

#define Table_put_ApplyStyleLastColumn(This,prop)	\
    ( (This)->lpVtbl -> put_ApplyStyleLastColumn(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Table_INTERFACE_DEFINED__ */


#ifndef __Row_INTERFACE_DEFINED__
#define __Row_INTERFACE_DEFINED__

/* interface Row */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Row;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020950-0000-0000-C000-000000000046")
    Row : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowBreakAcrossPages( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowBreakAcrossPages( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ WdRowAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ WdRowAlignment prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeadingFormat( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HeadingFormat( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceBetweenColumns( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceBetweenColumns( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeightRule( 
            /* [retval][out] */ WdRowHeightRule *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HeightRule( 
            /* [in] */ WdRowHeightRule prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeftIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeftIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsLast( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsFirst( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Cells( 
            /* [retval][out] */ Cells **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Next( 
            /* [retval][out] */ Row **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Previous( 
            /* [retval][out] */ Row **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetLeftIndent( 
            /* [in] */ int LeftIndent,
            /* [in] */ WdRulerStyle RulerStyle) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetHeight( 
            /* [in] */ int RowHeight,
            /* [in] */ WdRowHeightRule HeightRule) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ConvertToTextOld( 
            /* [optional][in] */ VARIANT *Separator,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToText( 
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *NestedTables,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NestingLevel( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ID( 
            /* [in] */ BSTR prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Row * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Row * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Row * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Row * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Row * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Row * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Row * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Row * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Row * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Row * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Row * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowBreakAcrossPages )( 
            Row * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowBreakAcrossPages )( 
            Row * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            Row * This,
            /* [retval][out] */ WdRowAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            Row * This,
            /* [in] */ WdRowAlignment prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeadingFormat )( 
            Row * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HeadingFormat )( 
            Row * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceBetweenColumns )( 
            Row * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceBetweenColumns )( 
            Row * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Row * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            Row * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeightRule )( 
            Row * This,
            /* [retval][out] */ WdRowHeightRule *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HeightRule )( 
            Row * This,
            /* [in] */ WdRowHeightRule prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeftIndent )( 
            Row * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeftIndent )( 
            Row * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsLast )( 
            Row * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsFirst )( 
            Row * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            Row * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Cells )( 
            Row * This,
            /* [retval][out] */ Cells **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            Row * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            Row * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            Row * This,
            /* [retval][out] */ Shading **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            Row * This,
            /* [retval][out] */ Row **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            Row * This,
            /* [retval][out] */ Row **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Row * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Row * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetLeftIndent )( 
            Row * This,
            /* [in] */ int LeftIndent,
            /* [in] */ WdRulerStyle RulerStyle);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetHeight )( 
            Row * This,
            /* [in] */ int RowHeight,
            /* [in] */ WdRowHeightRule HeightRule);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToTextOld )( 
            Row * This,
            /* [optional][in] */ VARIANT *Separator,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToText )( 
            Row * This,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *NestedTables,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NestingLevel )( 
            Row * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            Row * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ID )( 
            Row * This,
            /* [in] */ BSTR prop);
        
        END_INTERFACE
    } RowVtbl;

    interface Row
    {
        CONST_VTBL struct RowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Row_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Row_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Row_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Row_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Row_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Row_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Row_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Row_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Row_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Row_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Row_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Row_get_AllowBreakAcrossPages(This,prop)	\
    ( (This)->lpVtbl -> get_AllowBreakAcrossPages(This,prop) ) 

#define Row_put_AllowBreakAcrossPages(This,prop)	\
    ( (This)->lpVtbl -> put_AllowBreakAcrossPages(This,prop) ) 

#define Row_get_Alignment(This,prop)	\
    ( (This)->lpVtbl -> get_Alignment(This,prop) ) 

#define Row_put_Alignment(This,prop)	\
    ( (This)->lpVtbl -> put_Alignment(This,prop) ) 

#define Row_get_HeadingFormat(This,prop)	\
    ( (This)->lpVtbl -> get_HeadingFormat(This,prop) ) 

#define Row_put_HeadingFormat(This,prop)	\
    ( (This)->lpVtbl -> put_HeadingFormat(This,prop) ) 

#define Row_get_SpaceBetweenColumns(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceBetweenColumns(This,prop) ) 

#define Row_put_SpaceBetweenColumns(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceBetweenColumns(This,prop) ) 

#define Row_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define Row_put_Height(This,prop)	\
    ( (This)->lpVtbl -> put_Height(This,prop) ) 

#define Row_get_HeightRule(This,prop)	\
    ( (This)->lpVtbl -> get_HeightRule(This,prop) ) 

#define Row_put_HeightRule(This,prop)	\
    ( (This)->lpVtbl -> put_HeightRule(This,prop) ) 

#define Row_get_LeftIndent(This,prop)	\
    ( (This)->lpVtbl -> get_LeftIndent(This,prop) ) 

#define Row_put_LeftIndent(This,prop)	\
    ( (This)->lpVtbl -> put_LeftIndent(This,prop) ) 

#define Row_get_IsLast(This,prop)	\
    ( (This)->lpVtbl -> get_IsLast(This,prop) ) 

#define Row_get_IsFirst(This,prop)	\
    ( (This)->lpVtbl -> get_IsFirst(This,prop) ) 

#define Row_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define Row_get_Cells(This,prop)	\
    ( (This)->lpVtbl -> get_Cells(This,prop) ) 

#define Row_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define Row_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define Row_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define Row_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define Row_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define Row_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define Row_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Row_SetLeftIndent(This,LeftIndent,RulerStyle)	\
    ( (This)->lpVtbl -> SetLeftIndent(This,LeftIndent,RulerStyle) ) 

#define Row_SetHeight(This,RowHeight,HeightRule)	\
    ( (This)->lpVtbl -> SetHeight(This,RowHeight,HeightRule) ) 

#define Row_ConvertToTextOld(This,Separator,prop)	\
    ( (This)->lpVtbl -> ConvertToTextOld(This,Separator,prop) ) 

#define Row_ConvertToText(This,Separator,NestedTables,prop)	\
    ( (This)->lpVtbl -> ConvertToText(This,Separator,NestedTables,prop) ) 

#define Row_get_NestingLevel(This,prop)	\
    ( (This)->lpVtbl -> get_NestingLevel(This,prop) ) 

#define Row_get_ID(This,prop)	\
    ( (This)->lpVtbl -> get_ID(This,prop) ) 

#define Row_put_ID(This,prop)	\
    ( (This)->lpVtbl -> put_ID(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Row_INTERFACE_DEFINED__ */


#ifndef __Column_INTERFACE_DEFINED__
#define __Column_INTERFACE_DEFINED__

/* interface Column */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Column;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002094F-0000-0000-C000-000000000046")
    Column : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsFirst( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsLast( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Cells( 
            /* [retval][out] */ Cells **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Next( 
            /* [retval][out] */ Column **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Previous( 
            /* [retval][out] */ Column **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetWidth( 
            /* [in] */ int ColumnWidth,
            /* [in] */ WdRulerStyle RulerStyle) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AutoFit( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE SortOld( 
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *LanguageID) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Sort( 
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *BidiSort,
            /* [optional][in] */ VARIANT *IgnoreThe,
            /* [optional][in] */ VARIANT *IgnoreKashida,
            /* [optional][in] */ VARIANT *IgnoreDiacritics,
            /* [optional][in] */ VARIANT *IgnoreHe,
            /* [optional][in] */ VARIANT *LanguageID) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NestingLevel( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PreferredWidth( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PreferredWidth( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PreferredWidthType( 
            /* [retval][out] */ WdPreferredWidthType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PreferredWidthType( 
            /* [in] */ WdPreferredWidthType prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ColumnVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Column * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Column * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Column * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Column * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Column * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Column * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Column * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Column * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Column * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Column * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Column * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            Column * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsFirst )( 
            Column * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsLast )( 
            Column * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            Column * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Cells )( 
            Column * This,
            /* [retval][out] */ Cells **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            Column * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            Column * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            Column * This,
            /* [retval][out] */ Shading **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            Column * This,
            /* [retval][out] */ Column **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            Column * This,
            /* [retval][out] */ Column **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Column * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Column * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetWidth )( 
            Column * This,
            /* [in] */ int ColumnWidth,
            /* [in] */ WdRulerStyle RulerStyle);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AutoFit )( 
            Column * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *SortOld )( 
            Column * This,
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *LanguageID);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Sort )( 
            Column * This,
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *BidiSort,
            /* [optional][in] */ VARIANT *IgnoreThe,
            /* [optional][in] */ VARIANT *IgnoreKashida,
            /* [optional][in] */ VARIANT *IgnoreDiacritics,
            /* [optional][in] */ VARIANT *IgnoreHe,
            /* [optional][in] */ VARIANT *LanguageID);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NestingLevel )( 
            Column * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredWidth )( 
            Column * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PreferredWidth )( 
            Column * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredWidthType )( 
            Column * This,
            /* [retval][out] */ WdPreferredWidthType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PreferredWidthType )( 
            Column * This,
            /* [in] */ WdPreferredWidthType prop);
        
        END_INTERFACE
    } ColumnVtbl;

    interface Column
    {
        CONST_VTBL struct ColumnVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Column_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Column_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Column_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Column_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Column_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Column_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Column_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Column_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Column_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Column_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Column_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define Column_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define Column_get_IsFirst(This,prop)	\
    ( (This)->lpVtbl -> get_IsFirst(This,prop) ) 

#define Column_get_IsLast(This,prop)	\
    ( (This)->lpVtbl -> get_IsLast(This,prop) ) 

#define Column_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define Column_get_Cells(This,prop)	\
    ( (This)->lpVtbl -> get_Cells(This,prop) ) 

#define Column_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define Column_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define Column_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define Column_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define Column_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define Column_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define Column_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Column_SetWidth(This,ColumnWidth,RulerStyle)	\
    ( (This)->lpVtbl -> SetWidth(This,ColumnWidth,RulerStyle) ) 

#define Column_AutoFit(This)	\
    ( (This)->lpVtbl -> AutoFit(This) ) 

#define Column_SortOld(This,ExcludeHeader,SortFieldType,SortOrder,CaseSensitive,LanguageID)	\
    ( (This)->lpVtbl -> SortOld(This,ExcludeHeader,SortFieldType,SortOrder,CaseSensitive,LanguageID) ) 

#define Column_Sort(This,ExcludeHeader,SortFieldType,SortOrder,CaseSensitive,BidiSort,IgnoreThe,IgnoreKashida,IgnoreDiacritics,IgnoreHe,LanguageID)	\
    ( (This)->lpVtbl -> Sort(This,ExcludeHeader,SortFieldType,SortOrder,CaseSensitive,BidiSort,IgnoreThe,IgnoreKashida,IgnoreDiacritics,IgnoreHe,LanguageID) ) 

#define Column_get_NestingLevel(This,prop)	\
    ( (This)->lpVtbl -> get_NestingLevel(This,prop) ) 

#define Column_get_PreferredWidth(This,prop)	\
    ( (This)->lpVtbl -> get_PreferredWidth(This,prop) ) 

#define Column_put_PreferredWidth(This,prop)	\
    ( (This)->lpVtbl -> put_PreferredWidth(This,prop) ) 

#define Column_get_PreferredWidthType(This,prop)	\
    ( (This)->lpVtbl -> get_PreferredWidthType(This,prop) ) 

#define Column_put_PreferredWidthType(This,prop)	\
    ( (This)->lpVtbl -> put_PreferredWidthType(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Column_INTERFACE_DEFINED__ */


#ifndef __Cell_INTERFACE_DEFINED__
#define __Cell_INTERFACE_DEFINED__

/* interface Cell */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Cell;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002094E-0000-0000-C000-000000000046")
    Cell : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RowIndex( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColumnIndex( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeightRule( 
            /* [retval][out] */ WdRowHeightRule *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HeightRule( 
            /* [in] */ WdRowHeightRule prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalAlignment( 
            /* [retval][out] */ WdCellVerticalAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalAlignment( 
            /* [in] */ WdCellVerticalAlignment prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Column( 
            /* [retval][out] */ Column **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Row( 
            /* [retval][out] */ Row **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Next( 
            /* [retval][out] */ Cell **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Previous( 
            /* [retval][out] */ Cell **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [optional][in] */ VARIANT *ShiftCells) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Formula( 
            /* [optional][in] */ VARIANT *Formula,
            /* [optional][in] */ VARIANT *NumFormat) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetWidth( 
            /* [in] */ int ColumnWidth,
            /* [in] */ WdRulerStyle RulerStyle) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetHeight( 
            /* [in] */ VARIANT *RowHeight,
            /* [in] */ WdRowHeightRule HeightRule) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Merge( 
            /* [in] */ Cell *MergeTo) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Split( 
            /* [optional][in] */ VARIANT *NumRows,
            /* [optional][in] */ VARIANT *NumColumns) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AutoSum( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Tables( 
            /* [retval][out] */ Tables **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NestingLevel( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WordWrap( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WordWrap( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PreferredWidth( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PreferredWidth( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FitText( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FitText( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TopPadding( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TopPadding( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BottomPadding( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BottomPadding( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeftPadding( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeftPadding( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RightPadding( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RightPadding( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ID( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PreferredWidthType( 
            /* [retval][out] */ WdPreferredWidthType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PreferredWidthType( 
            /* [in] */ WdPreferredWidthType prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CellVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Cell * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Cell * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Cell * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Cell * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Cell * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Cell * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Cell * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Cell * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Cell * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Cell * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Cell * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RowIndex )( 
            Cell * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColumnIndex )( 
            Cell * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Cell * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            Cell * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Cell * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            Cell * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeightRule )( 
            Cell * This,
            /* [retval][out] */ WdRowHeightRule *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HeightRule )( 
            Cell * This,
            /* [in] */ WdRowHeightRule prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )( 
            Cell * This,
            /* [retval][out] */ WdCellVerticalAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )( 
            Cell * This,
            /* [in] */ WdCellVerticalAlignment prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Column )( 
            Cell * This,
            /* [retval][out] */ Column **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Row )( 
            Cell * This,
            /* [retval][out] */ Row **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            Cell * This,
            /* [retval][out] */ Cell **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            Cell * This,
            /* [retval][out] */ Cell **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            Cell * This,
            /* [retval][out] */ Shading **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            Cell * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            Cell * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Cell * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Cell * This,
            /* [optional][in] */ VARIANT *ShiftCells);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Formula )( 
            Cell * This,
            /* [optional][in] */ VARIANT *Formula,
            /* [optional][in] */ VARIANT *NumFormat);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetWidth )( 
            Cell * This,
            /* [in] */ int ColumnWidth,
            /* [in] */ WdRulerStyle RulerStyle);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetHeight )( 
            Cell * This,
            /* [in] */ VARIANT *RowHeight,
            /* [in] */ WdRowHeightRule HeightRule);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Merge )( 
            Cell * This,
            /* [in] */ Cell *MergeTo);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Split )( 
            Cell * This,
            /* [optional][in] */ VARIANT *NumRows,
            /* [optional][in] */ VARIANT *NumColumns);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AutoSum )( 
            Cell * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Tables )( 
            Cell * This,
            /* [retval][out] */ Tables **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NestingLevel )( 
            Cell * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WordWrap )( 
            Cell * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WordWrap )( 
            Cell * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredWidth )( 
            Cell * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PreferredWidth )( 
            Cell * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FitText )( 
            Cell * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FitText )( 
            Cell * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TopPadding )( 
            Cell * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TopPadding )( 
            Cell * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BottomPadding )( 
            Cell * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BottomPadding )( 
            Cell * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeftPadding )( 
            Cell * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeftPadding )( 
            Cell * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RightPadding )( 
            Cell * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RightPadding )( 
            Cell * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            Cell * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ID )( 
            Cell * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredWidthType )( 
            Cell * This,
            /* [retval][out] */ WdPreferredWidthType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PreferredWidthType )( 
            Cell * This,
            /* [in] */ WdPreferredWidthType prop);
        
        END_INTERFACE
    } CellVtbl;

    interface Cell
    {
        CONST_VTBL struct CellVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Cell_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Cell_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Cell_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Cell_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Cell_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Cell_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Cell_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Cell_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Cell_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Cell_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Cell_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Cell_get_RowIndex(This,prop)	\
    ( (This)->lpVtbl -> get_RowIndex(This,prop) ) 

#define Cell_get_ColumnIndex(This,prop)	\
    ( (This)->lpVtbl -> get_ColumnIndex(This,prop) ) 

#define Cell_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define Cell_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define Cell_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define Cell_put_Height(This,prop)	\
    ( (This)->lpVtbl -> put_Height(This,prop) ) 

#define Cell_get_HeightRule(This,prop)	\
    ( (This)->lpVtbl -> get_HeightRule(This,prop) ) 

#define Cell_put_HeightRule(This,prop)	\
    ( (This)->lpVtbl -> put_HeightRule(This,prop) ) 

#define Cell_get_VerticalAlignment(This,prop)	\
    ( (This)->lpVtbl -> get_VerticalAlignment(This,prop) ) 

#define Cell_put_VerticalAlignment(This,prop)	\
    ( (This)->lpVtbl -> put_VerticalAlignment(This,prop) ) 

#define Cell_get_Column(This,prop)	\
    ( (This)->lpVtbl -> get_Column(This,prop) ) 

#define Cell_get_Row(This,prop)	\
    ( (This)->lpVtbl -> get_Row(This,prop) ) 

#define Cell_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define Cell_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define Cell_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define Cell_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define Cell_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define Cell_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define Cell_Delete(This,ShiftCells)	\
    ( (This)->lpVtbl -> Delete(This,ShiftCells) ) 

#define Cell_Formula(This,Formula,NumFormat)	\
    ( (This)->lpVtbl -> Formula(This,Formula,NumFormat) ) 

#define Cell_SetWidth(This,ColumnWidth,RulerStyle)	\
    ( (This)->lpVtbl -> SetWidth(This,ColumnWidth,RulerStyle) ) 

#define Cell_SetHeight(This,RowHeight,HeightRule)	\
    ( (This)->lpVtbl -> SetHeight(This,RowHeight,HeightRule) ) 

#define Cell_Merge(This,MergeTo)	\
    ( (This)->lpVtbl -> Merge(This,MergeTo) ) 

#define Cell_Split(This,NumRows,NumColumns)	\
    ( (This)->lpVtbl -> Split(This,NumRows,NumColumns) ) 

#define Cell_AutoSum(This)	\
    ( (This)->lpVtbl -> AutoSum(This) ) 

#define Cell_get_Tables(This,prop)	\
    ( (This)->lpVtbl -> get_Tables(This,prop) ) 

#define Cell_get_NestingLevel(This,prop)	\
    ( (This)->lpVtbl -> get_NestingLevel(This,prop) ) 

#define Cell_get_WordWrap(This,prop)	\
    ( (This)->lpVtbl -> get_WordWrap(This,prop) ) 

#define Cell_put_WordWrap(This,prop)	\
    ( (This)->lpVtbl -> put_WordWrap(This,prop) ) 

#define Cell_get_PreferredWidth(This,prop)	\
    ( (This)->lpVtbl -> get_PreferredWidth(This,prop) ) 

#define Cell_put_PreferredWidth(This,prop)	\
    ( (This)->lpVtbl -> put_PreferredWidth(This,prop) ) 

#define Cell_get_FitText(This,prop)	\
    ( (This)->lpVtbl -> get_FitText(This,prop) ) 

#define Cell_put_FitText(This,prop)	\
    ( (This)->lpVtbl -> put_FitText(This,prop) ) 

#define Cell_get_TopPadding(This,prop)	\
    ( (This)->lpVtbl -> get_TopPadding(This,prop) ) 

#define Cell_put_TopPadding(This,prop)	\
    ( (This)->lpVtbl -> put_TopPadding(This,prop) ) 

#define Cell_get_BottomPadding(This,prop)	\
    ( (This)->lpVtbl -> get_BottomPadding(This,prop) ) 

#define Cell_put_BottomPadding(This,prop)	\
    ( (This)->lpVtbl -> put_BottomPadding(This,prop) ) 

#define Cell_get_LeftPadding(This,prop)	\
    ( (This)->lpVtbl -> get_LeftPadding(This,prop) ) 

#define Cell_put_LeftPadding(This,prop)	\
    ( (This)->lpVtbl -> put_LeftPadding(This,prop) ) 

#define Cell_get_RightPadding(This,prop)	\
    ( (This)->lpVtbl -> get_RightPadding(This,prop) ) 

#define Cell_put_RightPadding(This,prop)	\
    ( (This)->lpVtbl -> put_RightPadding(This,prop) ) 

#define Cell_get_ID(This,prop)	\
    ( (This)->lpVtbl -> get_ID(This,prop) ) 

#define Cell_put_ID(This,prop)	\
    ( (This)->lpVtbl -> put_ID(This,prop) ) 

#define Cell_get_PreferredWidthType(This,prop)	\
    ( (This)->lpVtbl -> get_PreferredWidthType(This,prop) ) 

#define Cell_put_PreferredWidthType(This,prop)	\
    ( (This)->lpVtbl -> put_PreferredWidthType(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Cell_INTERFACE_DEFINED__ */


#ifndef __Tables_INTERFACE_DEFINED__
#define __Tables_INTERFACE_DEFINED__

/* interface Tables */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Tables;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002094D-0000-0000-C000-000000000046")
    Tables : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Table **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AddOld( 
            /* [in] */ Range *Range,
            /* [in] */ long NumRows,
            /* [in] */ long NumColumns,
            /* [retval][out] */ Table **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ Range *Range,
            /* [in] */ long NumRows,
            /* [in] */ long NumColumns,
            /* [optional][in] */ VARIANT *DefaultTableBehavior,
            /* [optional][in] */ VARIANT *AutoFitBehavior,
            /* [retval][out] */ Table **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NestingLevel( 
            /* [retval][out] */ long *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TablesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Tables * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Tables * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Tables * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Tables * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Tables * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Tables * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Tables * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Tables * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Tables * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Tables * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Tables * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Tables * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Tables * This,
            /* [in] */ long Index,
            /* [retval][out] */ Table **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AddOld )( 
            Tables * This,
            /* [in] */ Range *Range,
            /* [in] */ long NumRows,
            /* [in] */ long NumColumns,
            /* [retval][out] */ Table **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Tables * This,
            /* [in] */ Range *Range,
            /* [in] */ long NumRows,
            /* [in] */ long NumColumns,
            /* [optional][in] */ VARIANT *DefaultTableBehavior,
            /* [optional][in] */ VARIANT *AutoFitBehavior,
            /* [retval][out] */ Table **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NestingLevel )( 
            Tables * This,
            /* [retval][out] */ long *prop);
        
        END_INTERFACE
    } TablesVtbl;

    interface Tables
    {
        CONST_VTBL struct TablesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Tables_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Tables_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Tables_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Tables_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Tables_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Tables_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Tables_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Tables_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Tables_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Tables_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Tables_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Tables_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Tables_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Tables_AddOld(This,Range,NumRows,NumColumns,prop)	\
    ( (This)->lpVtbl -> AddOld(This,Range,NumRows,NumColumns,prop) ) 

#define Tables_Add(This,Range,NumRows,NumColumns,DefaultTableBehavior,AutoFitBehavior,prop)	\
    ( (This)->lpVtbl -> Add(This,Range,NumRows,NumColumns,DefaultTableBehavior,AutoFitBehavior,prop) ) 

#define Tables_get_NestingLevel(This,prop)	\
    ( (This)->lpVtbl -> get_NestingLevel(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Tables_INTERFACE_DEFINED__ */


#ifndef __Rows_INTERFACE_DEFINED__
#define __Rows_INTERFACE_DEFINED__

/* interface Rows */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Rows;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002094C-0000-0000-C000-000000000046")
    Rows : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowBreakAcrossPages( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowBreakAcrossPages( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ WdRowAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ WdRowAlignment prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeadingFormat( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HeadingFormat( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceBetweenColumns( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceBetweenColumns( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeightRule( 
            /* [retval][out] */ WdRowHeightRule *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HeightRule( 
            /* [in] */ WdRowHeightRule prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeftIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeftIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_First( 
            /* [retval][out] */ Row **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Last( 
            /* [retval][out] */ Row **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Row **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [optional][in] */ VARIANT *BeforeRow,
            /* [retval][out] */ Row **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetLeftIndent( 
            /* [in] */ int LeftIndent,
            /* [in] */ WdRulerStyle RulerStyle) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetHeight( 
            /* [in] */ int RowHeight,
            /* [in] */ WdRowHeightRule HeightRule) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ConvertToTextOld( 
            /* [optional][in] */ VARIANT *Separator,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DistributeHeight( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToText( 
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *NestedTables,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WrapAroundText( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WrapAroundText( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DistanceTop( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DistanceTop( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DistanceBottom( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DistanceBottom( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DistanceLeft( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DistanceLeft( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DistanceRight( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DistanceRight( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalPosition( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalPosition( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalPosition( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalPosition( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelativeHorizontalPosition( 
            /* [retval][out] */ WdRelativeHorizontalPosition *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RelativeHorizontalPosition( 
            /* [in] */ WdRelativeHorizontalPosition prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelativeVerticalPosition( 
            /* [retval][out] */ WdRelativeVerticalPosition *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RelativeVerticalPosition( 
            /* [in] */ WdRelativeVerticalPosition prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowOverlap( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowOverlap( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NestingLevel( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TableDirection( 
            /* [retval][out] */ WdTableDirection *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TableDirection( 
            /* [in] */ WdTableDirection prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RowsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Rows * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Rows * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Rows * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Rows * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Rows * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Rows * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Rows * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Rows * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Rows * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowBreakAcrossPages )( 
            Rows * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowBreakAcrossPages )( 
            Rows * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            Rows * This,
            /* [retval][out] */ WdRowAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            Rows * This,
            /* [in] */ WdRowAlignment prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeadingFormat )( 
            Rows * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HeadingFormat )( 
            Rows * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceBetweenColumns )( 
            Rows * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceBetweenColumns )( 
            Rows * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Rows * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            Rows * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeightRule )( 
            Rows * This,
            /* [retval][out] */ WdRowHeightRule *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HeightRule )( 
            Rows * This,
            /* [in] */ WdRowHeightRule prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeftIndent )( 
            Rows * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeftIndent )( 
            Rows * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_First )( 
            Rows * This,
            /* [retval][out] */ Row **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Last )( 
            Rows * This,
            /* [retval][out] */ Row **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Rows * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Rows * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Rows * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            Rows * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            Rows * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            Rows * This,
            /* [retval][out] */ Shading **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Rows * This,
            /* [in] */ long Index,
            /* [retval][out] */ Row **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Rows * This,
            /* [optional][in] */ VARIANT *BeforeRow,
            /* [retval][out] */ Row **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Rows * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Rows * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetLeftIndent )( 
            Rows * This,
            /* [in] */ int LeftIndent,
            /* [in] */ WdRulerStyle RulerStyle);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetHeight )( 
            Rows * This,
            /* [in] */ int RowHeight,
            /* [in] */ WdRowHeightRule HeightRule);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToTextOld )( 
            Rows * This,
            /* [optional][in] */ VARIANT *Separator,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DistributeHeight )( 
            Rows * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToText )( 
            Rows * This,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *NestedTables,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WrapAroundText )( 
            Rows * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WrapAroundText )( 
            Rows * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DistanceTop )( 
            Rows * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DistanceTop )( 
            Rows * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DistanceBottom )( 
            Rows * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DistanceBottom )( 
            Rows * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DistanceLeft )( 
            Rows * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DistanceLeft )( 
            Rows * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DistanceRight )( 
            Rows * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DistanceRight )( 
            Rows * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalPosition )( 
            Rows * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalPosition )( 
            Rows * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalPosition )( 
            Rows * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalPosition )( 
            Rows * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelativeHorizontalPosition )( 
            Rows * This,
            /* [retval][out] */ WdRelativeHorizontalPosition *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RelativeHorizontalPosition )( 
            Rows * This,
            /* [in] */ WdRelativeHorizontalPosition prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelativeVerticalPosition )( 
            Rows * This,
            /* [retval][out] */ WdRelativeVerticalPosition *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RelativeVerticalPosition )( 
            Rows * This,
            /* [in] */ WdRelativeVerticalPosition prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowOverlap )( 
            Rows * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowOverlap )( 
            Rows * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NestingLevel )( 
            Rows * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TableDirection )( 
            Rows * This,
            /* [retval][out] */ WdTableDirection *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TableDirection )( 
            Rows * This,
            /* [in] */ WdTableDirection prop);
        
        END_INTERFACE
    } RowsVtbl;

    interface Rows
    {
        CONST_VTBL struct RowsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Rows_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Rows_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Rows_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Rows_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Rows_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Rows_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Rows_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Rows_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Rows_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Rows_get_AllowBreakAcrossPages(This,prop)	\
    ( (This)->lpVtbl -> get_AllowBreakAcrossPages(This,prop) ) 

#define Rows_put_AllowBreakAcrossPages(This,prop)	\
    ( (This)->lpVtbl -> put_AllowBreakAcrossPages(This,prop) ) 

#define Rows_get_Alignment(This,prop)	\
    ( (This)->lpVtbl -> get_Alignment(This,prop) ) 

#define Rows_put_Alignment(This,prop)	\
    ( (This)->lpVtbl -> put_Alignment(This,prop) ) 

#define Rows_get_HeadingFormat(This,prop)	\
    ( (This)->lpVtbl -> get_HeadingFormat(This,prop) ) 

#define Rows_put_HeadingFormat(This,prop)	\
    ( (This)->lpVtbl -> put_HeadingFormat(This,prop) ) 

#define Rows_get_SpaceBetweenColumns(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceBetweenColumns(This,prop) ) 

#define Rows_put_SpaceBetweenColumns(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceBetweenColumns(This,prop) ) 

#define Rows_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define Rows_put_Height(This,prop)	\
    ( (This)->lpVtbl -> put_Height(This,prop) ) 

#define Rows_get_HeightRule(This,prop)	\
    ( (This)->lpVtbl -> get_HeightRule(This,prop) ) 

#define Rows_put_HeightRule(This,prop)	\
    ( (This)->lpVtbl -> put_HeightRule(This,prop) ) 

#define Rows_get_LeftIndent(This,prop)	\
    ( (This)->lpVtbl -> get_LeftIndent(This,prop) ) 

#define Rows_put_LeftIndent(This,prop)	\
    ( (This)->lpVtbl -> put_LeftIndent(This,prop) ) 

#define Rows_get_First(This,prop)	\
    ( (This)->lpVtbl -> get_First(This,prop) ) 

#define Rows_get_Last(This,prop)	\
    ( (This)->lpVtbl -> get_Last(This,prop) ) 

#define Rows_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Rows_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Rows_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Rows_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define Rows_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define Rows_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define Rows_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Rows_Add(This,BeforeRow,prop)	\
    ( (This)->lpVtbl -> Add(This,BeforeRow,prop) ) 

#define Rows_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define Rows_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Rows_SetLeftIndent(This,LeftIndent,RulerStyle)	\
    ( (This)->lpVtbl -> SetLeftIndent(This,LeftIndent,RulerStyle) ) 

#define Rows_SetHeight(This,RowHeight,HeightRule)	\
    ( (This)->lpVtbl -> SetHeight(This,RowHeight,HeightRule) ) 

#define Rows_ConvertToTextOld(This,Separator,prop)	\
    ( (This)->lpVtbl -> ConvertToTextOld(This,Separator,prop) ) 

#define Rows_DistributeHeight(This)	\
    ( (This)->lpVtbl -> DistributeHeight(This) ) 

#define Rows_ConvertToText(This,Separator,NestedTables,prop)	\
    ( (This)->lpVtbl -> ConvertToText(This,Separator,NestedTables,prop) ) 

#define Rows_get_WrapAroundText(This,prop)	\
    ( (This)->lpVtbl -> get_WrapAroundText(This,prop) ) 

#define Rows_put_WrapAroundText(This,prop)	\
    ( (This)->lpVtbl -> put_WrapAroundText(This,prop) ) 

#define Rows_get_DistanceTop(This,prop)	\
    ( (This)->lpVtbl -> get_DistanceTop(This,prop) ) 

#define Rows_put_DistanceTop(This,prop)	\
    ( (This)->lpVtbl -> put_DistanceTop(This,prop) ) 

#define Rows_get_DistanceBottom(This,prop)	\
    ( (This)->lpVtbl -> get_DistanceBottom(This,prop) ) 

#define Rows_put_DistanceBottom(This,prop)	\
    ( (This)->lpVtbl -> put_DistanceBottom(This,prop) ) 

#define Rows_get_DistanceLeft(This,prop)	\
    ( (This)->lpVtbl -> get_DistanceLeft(This,prop) ) 

#define Rows_put_DistanceLeft(This,prop)	\
    ( (This)->lpVtbl -> put_DistanceLeft(This,prop) ) 

#define Rows_get_DistanceRight(This,prop)	\
    ( (This)->lpVtbl -> get_DistanceRight(This,prop) ) 

#define Rows_put_DistanceRight(This,prop)	\
    ( (This)->lpVtbl -> put_DistanceRight(This,prop) ) 

#define Rows_get_HorizontalPosition(This,prop)	\
    ( (This)->lpVtbl -> get_HorizontalPosition(This,prop) ) 

#define Rows_put_HorizontalPosition(This,prop)	\
    ( (This)->lpVtbl -> put_HorizontalPosition(This,prop) ) 

#define Rows_get_VerticalPosition(This,prop)	\
    ( (This)->lpVtbl -> get_VerticalPosition(This,prop) ) 

#define Rows_put_VerticalPosition(This,prop)	\
    ( (This)->lpVtbl -> put_VerticalPosition(This,prop) ) 

#define Rows_get_RelativeHorizontalPosition(This,prop)	\
    ( (This)->lpVtbl -> get_RelativeHorizontalPosition(This,prop) ) 

#define Rows_put_RelativeHorizontalPosition(This,prop)	\
    ( (This)->lpVtbl -> put_RelativeHorizontalPosition(This,prop) ) 

#define Rows_get_RelativeVerticalPosition(This,prop)	\
    ( (This)->lpVtbl -> get_RelativeVerticalPosition(This,prop) ) 

#define Rows_put_RelativeVerticalPosition(This,prop)	\
    ( (This)->lpVtbl -> put_RelativeVerticalPosition(This,prop) ) 

#define Rows_get_AllowOverlap(This,prop)	\
    ( (This)->lpVtbl -> get_AllowOverlap(This,prop) ) 

#define Rows_put_AllowOverlap(This,prop)	\
    ( (This)->lpVtbl -> put_AllowOverlap(This,prop) ) 

#define Rows_get_NestingLevel(This,prop)	\
    ( (This)->lpVtbl -> get_NestingLevel(This,prop) ) 

#define Rows_get_TableDirection(This,prop)	\
    ( (This)->lpVtbl -> get_TableDirection(This,prop) ) 

#define Rows_put_TableDirection(This,prop)	\
    ( (This)->lpVtbl -> put_TableDirection(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Rows_INTERFACE_DEFINED__ */


#ifndef __Columns_INTERFACE_DEFINED__
#define __Columns_INTERFACE_DEFINED__

/* interface Columns */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Columns;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002094B-0000-0000-C000-000000000046")
    Columns : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_First( 
            /* [retval][out] */ Column **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Last( 
            /* [retval][out] */ Column **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Column **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [optional][in] */ VARIANT *BeforeColumn,
            /* [retval][out] */ Column **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetWidth( 
            /* [in] */ int ColumnWidth,
            /* [in] */ WdRulerStyle RulerStyle) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AutoFit( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DistributeWidth( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NestingLevel( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PreferredWidth( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PreferredWidth( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PreferredWidthType( 
            /* [retval][out] */ WdPreferredWidthType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PreferredWidthType( 
            /* [in] */ WdPreferredWidthType prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ColumnsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Columns * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Columns * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Columns * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Columns * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Columns * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Columns * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Columns * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Columns * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Columns * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Columns * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Columns * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Columns * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_First )( 
            Columns * This,
            /* [retval][out] */ Column **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Last )( 
            Columns * This,
            /* [retval][out] */ Column **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Columns * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            Columns * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            Columns * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            Columns * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            Columns * This,
            /* [retval][out] */ Shading **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Columns * This,
            /* [in] */ long Index,
            /* [retval][out] */ Column **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Columns * This,
            /* [optional][in] */ VARIANT *BeforeColumn,
            /* [retval][out] */ Column **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Columns * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Columns * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetWidth )( 
            Columns * This,
            /* [in] */ int ColumnWidth,
            /* [in] */ WdRulerStyle RulerStyle);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AutoFit )( 
            Columns * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DistributeWidth )( 
            Columns * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NestingLevel )( 
            Columns * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredWidth )( 
            Columns * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PreferredWidth )( 
            Columns * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredWidthType )( 
            Columns * This,
            /* [retval][out] */ WdPreferredWidthType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PreferredWidthType )( 
            Columns * This,
            /* [in] */ WdPreferredWidthType prop);
        
        END_INTERFACE
    } ColumnsVtbl;

    interface Columns
    {
        CONST_VTBL struct ColumnsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Columns_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Columns_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Columns_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Columns_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Columns_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Columns_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Columns_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Columns_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Columns_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Columns_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Columns_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Columns_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Columns_get_First(This,prop)	\
    ( (This)->lpVtbl -> get_First(This,prop) ) 

#define Columns_get_Last(This,prop)	\
    ( (This)->lpVtbl -> get_Last(This,prop) ) 

#define Columns_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define Columns_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define Columns_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define Columns_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define Columns_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define Columns_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Columns_Add(This,BeforeColumn,prop)	\
    ( (This)->lpVtbl -> Add(This,BeforeColumn,prop) ) 

#define Columns_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define Columns_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Columns_SetWidth(This,ColumnWidth,RulerStyle)	\
    ( (This)->lpVtbl -> SetWidth(This,ColumnWidth,RulerStyle) ) 

#define Columns_AutoFit(This)	\
    ( (This)->lpVtbl -> AutoFit(This) ) 

#define Columns_DistributeWidth(This)	\
    ( (This)->lpVtbl -> DistributeWidth(This) ) 

#define Columns_get_NestingLevel(This,prop)	\
    ( (This)->lpVtbl -> get_NestingLevel(This,prop) ) 

#define Columns_get_PreferredWidth(This,prop)	\
    ( (This)->lpVtbl -> get_PreferredWidth(This,prop) ) 

#define Columns_put_PreferredWidth(This,prop)	\
    ( (This)->lpVtbl -> put_PreferredWidth(This,prop) ) 

#define Columns_get_PreferredWidthType(This,prop)	\
    ( (This)->lpVtbl -> get_PreferredWidthType(This,prop) ) 

#define Columns_put_PreferredWidthType(This,prop)	\
    ( (This)->lpVtbl -> put_PreferredWidthType(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Columns_INTERFACE_DEFINED__ */


#ifndef __Cells_INTERFACE_DEFINED__
#define __Cells_INTERFACE_DEFINED__

/* interface Cells */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Cells;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002094A-0000-0000-C000-000000000046")
    Cells : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeightRule( 
            /* [retval][out] */ WdRowHeightRule *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HeightRule( 
            /* [in] */ WdRowHeightRule prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalAlignment( 
            /* [retval][out] */ WdCellVerticalAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalAlignment( 
            /* [in] */ WdCellVerticalAlignment prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Cell **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [optional][in] */ VARIANT *BeforeCell,
            /* [retval][out] */ Cell **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [optional][in] */ VARIANT *ShiftCells) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetWidth( 
            /* [in] */ int ColumnWidth,
            /* [in] */ WdRulerStyle RulerStyle) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetHeight( 
            /* [in] */ VARIANT *RowHeight,
            /* [in] */ WdRowHeightRule HeightRule) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Merge( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Split( 
            /* [optional][in] */ VARIANT *NumRows,
            /* [optional][in] */ VARIANT *NumColumns,
            /* [optional][in] */ VARIANT *MergeBeforeSplit) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DistributeHeight( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DistributeWidth( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AutoFit( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NestingLevel( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PreferredWidth( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PreferredWidth( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PreferredWidthType( 
            /* [retval][out] */ WdPreferredWidthType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PreferredWidthType( 
            /* [in] */ WdPreferredWidthType prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CellsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Cells * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Cells * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Cells * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Cells * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Cells * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Cells * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Cells * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Cells * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Cells * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Cells * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Cells * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Cells * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Cells * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            Cells * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Cells * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            Cells * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeightRule )( 
            Cells * This,
            /* [retval][out] */ WdRowHeightRule *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HeightRule )( 
            Cells * This,
            /* [in] */ WdRowHeightRule prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )( 
            Cells * This,
            /* [retval][out] */ WdCellVerticalAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )( 
            Cells * This,
            /* [in] */ WdCellVerticalAlignment prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            Cells * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            Cells * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            Cells * This,
            /* [retval][out] */ Shading **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Cells * This,
            /* [in] */ long Index,
            /* [retval][out] */ Cell **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Cells * This,
            /* [optional][in] */ VARIANT *BeforeCell,
            /* [retval][out] */ Cell **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Cells * This,
            /* [optional][in] */ VARIANT *ShiftCells);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetWidth )( 
            Cells * This,
            /* [in] */ int ColumnWidth,
            /* [in] */ WdRulerStyle RulerStyle);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetHeight )( 
            Cells * This,
            /* [in] */ VARIANT *RowHeight,
            /* [in] */ WdRowHeightRule HeightRule);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Merge )( 
            Cells * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Split )( 
            Cells * This,
            /* [optional][in] */ VARIANT *NumRows,
            /* [optional][in] */ VARIANT *NumColumns,
            /* [optional][in] */ VARIANT *MergeBeforeSplit);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DistributeHeight )( 
            Cells * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DistributeWidth )( 
            Cells * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AutoFit )( 
            Cells * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NestingLevel )( 
            Cells * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredWidth )( 
            Cells * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PreferredWidth )( 
            Cells * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredWidthType )( 
            Cells * This,
            /* [retval][out] */ WdPreferredWidthType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PreferredWidthType )( 
            Cells * This,
            /* [in] */ WdPreferredWidthType prop);
        
        END_INTERFACE
    } CellsVtbl;

    interface Cells
    {
        CONST_VTBL struct CellsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Cells_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Cells_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Cells_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Cells_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Cells_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Cells_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Cells_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Cells_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Cells_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Cells_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Cells_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Cells_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Cells_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define Cells_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define Cells_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define Cells_put_Height(This,prop)	\
    ( (This)->lpVtbl -> put_Height(This,prop) ) 

#define Cells_get_HeightRule(This,prop)	\
    ( (This)->lpVtbl -> get_HeightRule(This,prop) ) 

#define Cells_put_HeightRule(This,prop)	\
    ( (This)->lpVtbl -> put_HeightRule(This,prop) ) 

#define Cells_get_VerticalAlignment(This,prop)	\
    ( (This)->lpVtbl -> get_VerticalAlignment(This,prop) ) 

#define Cells_put_VerticalAlignment(This,prop)	\
    ( (This)->lpVtbl -> put_VerticalAlignment(This,prop) ) 

#define Cells_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define Cells_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define Cells_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define Cells_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Cells_Add(This,BeforeCell,prop)	\
    ( (This)->lpVtbl -> Add(This,BeforeCell,prop) ) 

#define Cells_Delete(This,ShiftCells)	\
    ( (This)->lpVtbl -> Delete(This,ShiftCells) ) 

#define Cells_SetWidth(This,ColumnWidth,RulerStyle)	\
    ( (This)->lpVtbl -> SetWidth(This,ColumnWidth,RulerStyle) ) 

#define Cells_SetHeight(This,RowHeight,HeightRule)	\
    ( (This)->lpVtbl -> SetHeight(This,RowHeight,HeightRule) ) 

#define Cells_Merge(This)	\
    ( (This)->lpVtbl -> Merge(This) ) 

#define Cells_Split(This,NumRows,NumColumns,MergeBeforeSplit)	\
    ( (This)->lpVtbl -> Split(This,NumRows,NumColumns,MergeBeforeSplit) ) 

#define Cells_DistributeHeight(This)	\
    ( (This)->lpVtbl -> DistributeHeight(This) ) 

#define Cells_DistributeWidth(This)	\
    ( (This)->lpVtbl -> DistributeWidth(This) ) 

#define Cells_AutoFit(This)	\
    ( (This)->lpVtbl -> AutoFit(This) ) 

#define Cells_get_NestingLevel(This,prop)	\
    ( (This)->lpVtbl -> get_NestingLevel(This,prop) ) 

#define Cells_get_PreferredWidth(This,prop)	\
    ( (This)->lpVtbl -> get_PreferredWidth(This,prop) ) 

#define Cells_put_PreferredWidth(This,prop)	\
    ( (This)->lpVtbl -> put_PreferredWidth(This,prop) ) 

#define Cells_get_PreferredWidthType(This,prop)	\
    ( (This)->lpVtbl -> get_PreferredWidthType(This,prop) ) 

#define Cells_put_PreferredWidthType(This,prop)	\
    ( (This)->lpVtbl -> put_PreferredWidthType(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Cells_INTERFACE_DEFINED__ */


#ifndef __AutoCorrect_INTERFACE_DEFINED__
#define __AutoCorrect_INTERFACE_DEFINED__

/* interface AutoCorrect */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_AutoCorrect;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020949-0000-0000-C000-000000000046")
    AutoCorrect : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CorrectDays( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CorrectDays( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CorrectInitialCaps( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CorrectInitialCaps( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CorrectSentenceCaps( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CorrectSentenceCaps( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReplaceText( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReplaceText( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Entries( 
            /* [retval][out] */ AutoCorrectEntries **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstLetterExceptions( 
            /* [retval][out] */ FirstLetterExceptions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstLetterAutoAdd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FirstLetterAutoAdd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TwoInitialCapsExceptions( 
            /* [retval][out] */ TwoInitialCapsExceptions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TwoInitialCapsAutoAdd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TwoInitialCapsAutoAdd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CorrectCapsLock( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CorrectCapsLock( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CorrectHangulAndAlphabet( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CorrectHangulAndAlphabet( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HangulAndAlphabetExceptions( 
            /* [retval][out] */ HangulAndAlphabetExceptions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HangulAndAlphabetAutoAdd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HangulAndAlphabetAutoAdd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReplaceTextFromSpellingChecker( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReplaceTextFromSpellingChecker( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OtherCorrectionsAutoAdd( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OtherCorrectionsAutoAdd( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OtherCorrectionsExceptions( 
            /* [retval][out] */ OtherCorrectionsExceptions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CorrectKeyboardSetting( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CorrectKeyboardSetting( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CorrectTableCells( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CorrectTableCells( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayAutoCorrectOptions( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayAutoCorrectOptions( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AutoCorrectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AutoCorrect * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AutoCorrect * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AutoCorrect * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AutoCorrect * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AutoCorrect * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AutoCorrect * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AutoCorrect * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            AutoCorrect * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            AutoCorrect * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AutoCorrect * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CorrectDays )( 
            AutoCorrect * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CorrectDays )( 
            AutoCorrect * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CorrectInitialCaps )( 
            AutoCorrect * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CorrectInitialCaps )( 
            AutoCorrect * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CorrectSentenceCaps )( 
            AutoCorrect * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CorrectSentenceCaps )( 
            AutoCorrect * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReplaceText )( 
            AutoCorrect * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReplaceText )( 
            AutoCorrect * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Entries )( 
            AutoCorrect * This,
            /* [retval][out] */ AutoCorrectEntries **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstLetterExceptions )( 
            AutoCorrect * This,
            /* [retval][out] */ FirstLetterExceptions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstLetterAutoAdd )( 
            AutoCorrect * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FirstLetterAutoAdd )( 
            AutoCorrect * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TwoInitialCapsExceptions )( 
            AutoCorrect * This,
            /* [retval][out] */ TwoInitialCapsExceptions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TwoInitialCapsAutoAdd )( 
            AutoCorrect * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TwoInitialCapsAutoAdd )( 
            AutoCorrect * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CorrectCapsLock )( 
            AutoCorrect * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CorrectCapsLock )( 
            AutoCorrect * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CorrectHangulAndAlphabet )( 
            AutoCorrect * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CorrectHangulAndAlphabet )( 
            AutoCorrect * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HangulAndAlphabetExceptions )( 
            AutoCorrect * This,
            /* [retval][out] */ HangulAndAlphabetExceptions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HangulAndAlphabetAutoAdd )( 
            AutoCorrect * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HangulAndAlphabetAutoAdd )( 
            AutoCorrect * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReplaceTextFromSpellingChecker )( 
            AutoCorrect * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReplaceTextFromSpellingChecker )( 
            AutoCorrect * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OtherCorrectionsAutoAdd )( 
            AutoCorrect * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OtherCorrectionsAutoAdd )( 
            AutoCorrect * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OtherCorrectionsExceptions )( 
            AutoCorrect * This,
            /* [retval][out] */ OtherCorrectionsExceptions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CorrectKeyboardSetting )( 
            AutoCorrect * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CorrectKeyboardSetting )( 
            AutoCorrect * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CorrectTableCells )( 
            AutoCorrect * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CorrectTableCells )( 
            AutoCorrect * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayAutoCorrectOptions )( 
            AutoCorrect * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayAutoCorrectOptions )( 
            AutoCorrect * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } AutoCorrectVtbl;

    interface AutoCorrect
    {
        CONST_VTBL struct AutoCorrectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AutoCorrect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AutoCorrect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AutoCorrect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AutoCorrect_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AutoCorrect_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AutoCorrect_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AutoCorrect_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AutoCorrect_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define AutoCorrect_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define AutoCorrect_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define AutoCorrect_get_CorrectDays(This,prop)	\
    ( (This)->lpVtbl -> get_CorrectDays(This,prop) ) 

#define AutoCorrect_put_CorrectDays(This,prop)	\
    ( (This)->lpVtbl -> put_CorrectDays(This,prop) ) 

#define AutoCorrect_get_CorrectInitialCaps(This,prop)	\
    ( (This)->lpVtbl -> get_CorrectInitialCaps(This,prop) ) 

#define AutoCorrect_put_CorrectInitialCaps(This,prop)	\
    ( (This)->lpVtbl -> put_CorrectInitialCaps(This,prop) ) 

#define AutoCorrect_get_CorrectSentenceCaps(This,prop)	\
    ( (This)->lpVtbl -> get_CorrectSentenceCaps(This,prop) ) 

#define AutoCorrect_put_CorrectSentenceCaps(This,prop)	\
    ( (This)->lpVtbl -> put_CorrectSentenceCaps(This,prop) ) 

#define AutoCorrect_get_ReplaceText(This,prop)	\
    ( (This)->lpVtbl -> get_ReplaceText(This,prop) ) 

#define AutoCorrect_put_ReplaceText(This,prop)	\
    ( (This)->lpVtbl -> put_ReplaceText(This,prop) ) 

#define AutoCorrect_get_Entries(This,prop)	\
    ( (This)->lpVtbl -> get_Entries(This,prop) ) 

#define AutoCorrect_get_FirstLetterExceptions(This,prop)	\
    ( (This)->lpVtbl -> get_FirstLetterExceptions(This,prop) ) 

#define AutoCorrect_get_FirstLetterAutoAdd(This,prop)	\
    ( (This)->lpVtbl -> get_FirstLetterAutoAdd(This,prop) ) 

#define AutoCorrect_put_FirstLetterAutoAdd(This,prop)	\
    ( (This)->lpVtbl -> put_FirstLetterAutoAdd(This,prop) ) 

#define AutoCorrect_get_TwoInitialCapsExceptions(This,prop)	\
    ( (This)->lpVtbl -> get_TwoInitialCapsExceptions(This,prop) ) 

#define AutoCorrect_get_TwoInitialCapsAutoAdd(This,prop)	\
    ( (This)->lpVtbl -> get_TwoInitialCapsAutoAdd(This,prop) ) 

#define AutoCorrect_put_TwoInitialCapsAutoAdd(This,prop)	\
    ( (This)->lpVtbl -> put_TwoInitialCapsAutoAdd(This,prop) ) 

#define AutoCorrect_get_CorrectCapsLock(This,prop)	\
    ( (This)->lpVtbl -> get_CorrectCapsLock(This,prop) ) 

#define AutoCorrect_put_CorrectCapsLock(This,prop)	\
    ( (This)->lpVtbl -> put_CorrectCapsLock(This,prop) ) 

#define AutoCorrect_get_CorrectHangulAndAlphabet(This,prop)	\
    ( (This)->lpVtbl -> get_CorrectHangulAndAlphabet(This,prop) ) 

#define AutoCorrect_put_CorrectHangulAndAlphabet(This,prop)	\
    ( (This)->lpVtbl -> put_CorrectHangulAndAlphabet(This,prop) ) 

#define AutoCorrect_get_HangulAndAlphabetExceptions(This,prop)	\
    ( (This)->lpVtbl -> get_HangulAndAlphabetExceptions(This,prop) ) 

#define AutoCorrect_get_HangulAndAlphabetAutoAdd(This,prop)	\
    ( (This)->lpVtbl -> get_HangulAndAlphabetAutoAdd(This,prop) ) 

#define AutoCorrect_put_HangulAndAlphabetAutoAdd(This,prop)	\
    ( (This)->lpVtbl -> put_HangulAndAlphabetAutoAdd(This,prop) ) 

#define AutoCorrect_get_ReplaceTextFromSpellingChecker(This,prop)	\
    ( (This)->lpVtbl -> get_ReplaceTextFromSpellingChecker(This,prop) ) 

#define AutoCorrect_put_ReplaceTextFromSpellingChecker(This,prop)	\
    ( (This)->lpVtbl -> put_ReplaceTextFromSpellingChecker(This,prop) ) 

#define AutoCorrect_get_OtherCorrectionsAutoAdd(This,prop)	\
    ( (This)->lpVtbl -> get_OtherCorrectionsAutoAdd(This,prop) ) 

#define AutoCorrect_put_OtherCorrectionsAutoAdd(This,prop)	\
    ( (This)->lpVtbl -> put_OtherCorrectionsAutoAdd(This,prop) ) 

#define AutoCorrect_get_OtherCorrectionsExceptions(This,prop)	\
    ( (This)->lpVtbl -> get_OtherCorrectionsExceptions(This,prop) ) 

#define AutoCorrect_get_CorrectKeyboardSetting(This,prop)	\
    ( (This)->lpVtbl -> get_CorrectKeyboardSetting(This,prop) ) 

#define AutoCorrect_put_CorrectKeyboardSetting(This,prop)	\
    ( (This)->lpVtbl -> put_CorrectKeyboardSetting(This,prop) ) 

#define AutoCorrect_get_CorrectTableCells(This,prop)	\
    ( (This)->lpVtbl -> get_CorrectTableCells(This,prop) ) 

#define AutoCorrect_put_CorrectTableCells(This,prop)	\
    ( (This)->lpVtbl -> put_CorrectTableCells(This,prop) ) 

#define AutoCorrect_get_DisplayAutoCorrectOptions(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayAutoCorrectOptions(This,prop) ) 

#define AutoCorrect_put_DisplayAutoCorrectOptions(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayAutoCorrectOptions(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AutoCorrect_INTERFACE_DEFINED__ */


#ifndef __AutoCorrectEntries_INTERFACE_DEFINED__
#define __AutoCorrectEntries_INTERFACE_DEFINED__

/* interface AutoCorrectEntries */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_AutoCorrectEntries;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020948-0000-0000-C000-000000000046")
    AutoCorrectEntries : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ AutoCorrectEntry **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [in] */ BSTR Value,
            /* [retval][out] */ AutoCorrectEntry **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddRichText( 
            /* [in] */ BSTR Name,
            /* [in] */ Range *Range,
            /* [retval][out] */ AutoCorrectEntry **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AutoCorrectEntriesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AutoCorrectEntries * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AutoCorrectEntries * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AutoCorrectEntries * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AutoCorrectEntries * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AutoCorrectEntries * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AutoCorrectEntries * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AutoCorrectEntries * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            AutoCorrectEntries * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            AutoCorrectEntries * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AutoCorrectEntries * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            AutoCorrectEntries * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            AutoCorrectEntries * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            AutoCorrectEntries * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ AutoCorrectEntry **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            AutoCorrectEntries * This,
            /* [in] */ BSTR Name,
            /* [in] */ BSTR Value,
            /* [retval][out] */ AutoCorrectEntry **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddRichText )( 
            AutoCorrectEntries * This,
            /* [in] */ BSTR Name,
            /* [in] */ Range *Range,
            /* [retval][out] */ AutoCorrectEntry **prop);
        
        END_INTERFACE
    } AutoCorrectEntriesVtbl;

    interface AutoCorrectEntries
    {
        CONST_VTBL struct AutoCorrectEntriesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AutoCorrectEntries_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AutoCorrectEntries_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AutoCorrectEntries_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AutoCorrectEntries_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AutoCorrectEntries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AutoCorrectEntries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AutoCorrectEntries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AutoCorrectEntries_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define AutoCorrectEntries_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define AutoCorrectEntries_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define AutoCorrectEntries_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define AutoCorrectEntries_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define AutoCorrectEntries_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define AutoCorrectEntries_Add(This,Name,Value,prop)	\
    ( (This)->lpVtbl -> Add(This,Name,Value,prop) ) 

#define AutoCorrectEntries_AddRichText(This,Name,Range,prop)	\
    ( (This)->lpVtbl -> AddRichText(This,Name,Range,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AutoCorrectEntries_INTERFACE_DEFINED__ */


#ifndef __AutoCorrectEntry_INTERFACE_DEFINED__
#define __AutoCorrectEntry_INTERFACE_DEFINED__

/* interface AutoCorrectEntry */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_AutoCorrectEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020947-0000-0000-C000-000000000046")
    AutoCorrectEntry : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RichText( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Apply( 
            /* [in] */ Range *Range) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AutoCorrectEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AutoCorrectEntry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AutoCorrectEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AutoCorrectEntry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AutoCorrectEntry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AutoCorrectEntry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AutoCorrectEntry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AutoCorrectEntry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            AutoCorrectEntry * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            AutoCorrectEntry * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AutoCorrectEntry * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            AutoCorrectEntry * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            AutoCorrectEntry * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            AutoCorrectEntry * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            AutoCorrectEntry * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            AutoCorrectEntry * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RichText )( 
            AutoCorrectEntry * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            AutoCorrectEntry * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Apply )( 
            AutoCorrectEntry * This,
            /* [in] */ Range *Range);
        
        END_INTERFACE
    } AutoCorrectEntryVtbl;

    interface AutoCorrectEntry
    {
        CONST_VTBL struct AutoCorrectEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AutoCorrectEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AutoCorrectEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AutoCorrectEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AutoCorrectEntry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AutoCorrectEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AutoCorrectEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AutoCorrectEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AutoCorrectEntry_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define AutoCorrectEntry_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define AutoCorrectEntry_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define AutoCorrectEntry_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define AutoCorrectEntry_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define AutoCorrectEntry_put_Name(This,prop)	\
    ( (This)->lpVtbl -> put_Name(This,prop) ) 

#define AutoCorrectEntry_get_Value(This,prop)	\
    ( (This)->lpVtbl -> get_Value(This,prop) ) 

#define AutoCorrectEntry_put_Value(This,prop)	\
    ( (This)->lpVtbl -> put_Value(This,prop) ) 

#define AutoCorrectEntry_get_RichText(This,prop)	\
    ( (This)->lpVtbl -> get_RichText(This,prop) ) 

#define AutoCorrectEntry_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define AutoCorrectEntry_Apply(This,Range)	\
    ( (This)->lpVtbl -> Apply(This,Range) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AutoCorrectEntry_INTERFACE_DEFINED__ */


#ifndef __FirstLetterExceptions_INTERFACE_DEFINED__
#define __FirstLetterExceptions_INTERFACE_DEFINED__

/* interface FirstLetterExceptions */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_FirstLetterExceptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020946-0000-0000-C000-000000000046")
    FirstLetterExceptions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ FirstLetterException **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ FirstLetterException **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FirstLetterExceptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FirstLetterExceptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FirstLetterExceptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FirstLetterExceptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FirstLetterExceptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FirstLetterExceptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FirstLetterExceptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FirstLetterExceptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            FirstLetterExceptions * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            FirstLetterExceptions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FirstLetterExceptions * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            FirstLetterExceptions * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            FirstLetterExceptions * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            FirstLetterExceptions * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ FirstLetterException **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            FirstLetterExceptions * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ FirstLetterException **prop);
        
        END_INTERFACE
    } FirstLetterExceptionsVtbl;

    interface FirstLetterExceptions
    {
        CONST_VTBL struct FirstLetterExceptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FirstLetterExceptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FirstLetterExceptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FirstLetterExceptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FirstLetterExceptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FirstLetterExceptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FirstLetterExceptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FirstLetterExceptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FirstLetterExceptions_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define FirstLetterExceptions_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define FirstLetterExceptions_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define FirstLetterExceptions_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define FirstLetterExceptions_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define FirstLetterExceptions_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define FirstLetterExceptions_Add(This,Name,prop)	\
    ( (This)->lpVtbl -> Add(This,Name,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FirstLetterExceptions_INTERFACE_DEFINED__ */


#ifndef __FirstLetterException_INTERFACE_DEFINED__
#define __FirstLetterException_INTERFACE_DEFINED__

/* interface FirstLetterException */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_FirstLetterException;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020945-0000-0000-C000-000000000046")
    FirstLetterException : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FirstLetterExceptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FirstLetterException * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FirstLetterException * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FirstLetterException * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FirstLetterException * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FirstLetterException * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FirstLetterException * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FirstLetterException * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            FirstLetterException * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            FirstLetterException * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FirstLetterException * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            FirstLetterException * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            FirstLetterException * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            FirstLetterException * This);
        
        END_INTERFACE
    } FirstLetterExceptionVtbl;

    interface FirstLetterException
    {
        CONST_VTBL struct FirstLetterExceptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FirstLetterException_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FirstLetterException_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FirstLetterException_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FirstLetterException_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FirstLetterException_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FirstLetterException_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FirstLetterException_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FirstLetterException_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define FirstLetterException_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define FirstLetterException_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define FirstLetterException_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define FirstLetterException_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define FirstLetterException_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FirstLetterException_INTERFACE_DEFINED__ */


#ifndef __TwoInitialCapsExceptions_INTERFACE_DEFINED__
#define __TwoInitialCapsExceptions_INTERFACE_DEFINED__

/* interface TwoInitialCapsExceptions */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TwoInitialCapsExceptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020944-0000-0000-C000-000000000046")
    TwoInitialCapsExceptions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ TwoInitialCapsException **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ TwoInitialCapsException **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TwoInitialCapsExceptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TwoInitialCapsExceptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TwoInitialCapsExceptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TwoInitialCapsExceptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TwoInitialCapsExceptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TwoInitialCapsExceptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TwoInitialCapsExceptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TwoInitialCapsExceptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TwoInitialCapsExceptions * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TwoInitialCapsExceptions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TwoInitialCapsExceptions * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            TwoInitialCapsExceptions * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TwoInitialCapsExceptions * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TwoInitialCapsExceptions * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ TwoInitialCapsException **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            TwoInitialCapsExceptions * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ TwoInitialCapsException **prop);
        
        END_INTERFACE
    } TwoInitialCapsExceptionsVtbl;

    interface TwoInitialCapsExceptions
    {
        CONST_VTBL struct TwoInitialCapsExceptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TwoInitialCapsExceptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TwoInitialCapsExceptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TwoInitialCapsExceptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TwoInitialCapsExceptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TwoInitialCapsExceptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TwoInitialCapsExceptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TwoInitialCapsExceptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TwoInitialCapsExceptions_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TwoInitialCapsExceptions_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TwoInitialCapsExceptions_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TwoInitialCapsExceptions_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define TwoInitialCapsExceptions_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define TwoInitialCapsExceptions_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define TwoInitialCapsExceptions_Add(This,Name,prop)	\
    ( (This)->lpVtbl -> Add(This,Name,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TwoInitialCapsExceptions_INTERFACE_DEFINED__ */


#ifndef __TwoInitialCapsException_INTERFACE_DEFINED__
#define __TwoInitialCapsException_INTERFACE_DEFINED__

/* interface TwoInitialCapsException */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TwoInitialCapsException;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020943-0000-0000-C000-000000000046")
    TwoInitialCapsException : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TwoInitialCapsExceptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TwoInitialCapsException * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TwoInitialCapsException * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TwoInitialCapsException * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TwoInitialCapsException * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TwoInitialCapsException * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TwoInitialCapsException * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TwoInitialCapsException * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TwoInitialCapsException * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TwoInitialCapsException * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TwoInitialCapsException * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            TwoInitialCapsException * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            TwoInitialCapsException * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            TwoInitialCapsException * This);
        
        END_INTERFACE
    } TwoInitialCapsExceptionVtbl;

    interface TwoInitialCapsException
    {
        CONST_VTBL struct TwoInitialCapsExceptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TwoInitialCapsException_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TwoInitialCapsException_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TwoInitialCapsException_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TwoInitialCapsException_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TwoInitialCapsException_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TwoInitialCapsException_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TwoInitialCapsException_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TwoInitialCapsException_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TwoInitialCapsException_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TwoInitialCapsException_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TwoInitialCapsException_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define TwoInitialCapsException_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define TwoInitialCapsException_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TwoInitialCapsException_INTERFACE_DEFINED__ */


#ifndef __Footnotes_INTERFACE_DEFINED__
#define __Footnotes_INTERFACE_DEFINED__

/* interface Footnotes */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Footnotes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020942-0000-0000-C000-000000000046")
    Footnotes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Location( 
            /* [retval][out] */ WdFootnoteLocation *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Location( 
            /* [in] */ WdFootnoteLocation prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberStyle( 
            /* [retval][out] */ WdNoteNumberStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberStyle( 
            /* [in] */ WdNoteNumberStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartingNumber( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartingNumber( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberingRule( 
            /* [retval][out] */ WdNumberingRule *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberingRule( 
            /* [in] */ WdNumberingRule prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Separator( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContinuationSeparator( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContinuationNotice( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Footnote **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Reference,
            /* [optional][in] */ VARIANT *Text,
            /* [retval][out] */ Footnote **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Convert( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SwapWithEndnotes( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ResetSeparator( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ResetContinuationSeparator( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ResetContinuationNotice( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FootnotesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Footnotes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Footnotes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Footnotes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Footnotes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Footnotes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Footnotes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Footnotes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Footnotes * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Footnotes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Footnotes * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Footnotes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Footnotes * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            Footnotes * This,
            /* [retval][out] */ WdFootnoteLocation *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Location )( 
            Footnotes * This,
            /* [in] */ WdFootnoteLocation prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberStyle )( 
            Footnotes * This,
            /* [retval][out] */ WdNoteNumberStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberStyle )( 
            Footnotes * This,
            /* [in] */ WdNoteNumberStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartingNumber )( 
            Footnotes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartingNumber )( 
            Footnotes * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberingRule )( 
            Footnotes * This,
            /* [retval][out] */ WdNumberingRule *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberingRule )( 
            Footnotes * This,
            /* [in] */ WdNumberingRule prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Separator )( 
            Footnotes * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContinuationSeparator )( 
            Footnotes * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContinuationNotice )( 
            Footnotes * This,
            /* [retval][out] */ Range **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Footnotes * This,
            /* [in] */ long Index,
            /* [retval][out] */ Footnote **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Footnotes * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Reference,
            /* [optional][in] */ VARIANT *Text,
            /* [retval][out] */ Footnote **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Convert )( 
            Footnotes * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SwapWithEndnotes )( 
            Footnotes * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ResetSeparator )( 
            Footnotes * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ResetContinuationSeparator )( 
            Footnotes * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ResetContinuationNotice )( 
            Footnotes * This);
        
        END_INTERFACE
    } FootnotesVtbl;

    interface Footnotes
    {
        CONST_VTBL struct FootnotesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Footnotes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Footnotes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Footnotes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Footnotes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Footnotes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Footnotes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Footnotes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Footnotes_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Footnotes_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Footnotes_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Footnotes_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Footnotes_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Footnotes_get_Location(This,prop)	\
    ( (This)->lpVtbl -> get_Location(This,prop) ) 

#define Footnotes_put_Location(This,prop)	\
    ( (This)->lpVtbl -> put_Location(This,prop) ) 

#define Footnotes_get_NumberStyle(This,prop)	\
    ( (This)->lpVtbl -> get_NumberStyle(This,prop) ) 

#define Footnotes_put_NumberStyle(This,prop)	\
    ( (This)->lpVtbl -> put_NumberStyle(This,prop) ) 

#define Footnotes_get_StartingNumber(This,prop)	\
    ( (This)->lpVtbl -> get_StartingNumber(This,prop) ) 

#define Footnotes_put_StartingNumber(This,prop)	\
    ( (This)->lpVtbl -> put_StartingNumber(This,prop) ) 

#define Footnotes_get_NumberingRule(This,prop)	\
    ( (This)->lpVtbl -> get_NumberingRule(This,prop) ) 

#define Footnotes_put_NumberingRule(This,prop)	\
    ( (This)->lpVtbl -> put_NumberingRule(This,prop) ) 

#define Footnotes_get_Separator(This,prop)	\
    ( (This)->lpVtbl -> get_Separator(This,prop) ) 

#define Footnotes_get_ContinuationSeparator(This,prop)	\
    ( (This)->lpVtbl -> get_ContinuationSeparator(This,prop) ) 

#define Footnotes_get_ContinuationNotice(This,prop)	\
    ( (This)->lpVtbl -> get_ContinuationNotice(This,prop) ) 

#define Footnotes_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Footnotes_Add(This,Range,Reference,Text,prop)	\
    ( (This)->lpVtbl -> Add(This,Range,Reference,Text,prop) ) 

#define Footnotes_Convert(This)	\
    ( (This)->lpVtbl -> Convert(This) ) 

#define Footnotes_SwapWithEndnotes(This)	\
    ( (This)->lpVtbl -> SwapWithEndnotes(This) ) 

#define Footnotes_ResetSeparator(This)	\
    ( (This)->lpVtbl -> ResetSeparator(This) ) 

#define Footnotes_ResetContinuationSeparator(This)	\
    ( (This)->lpVtbl -> ResetContinuationSeparator(This) ) 

#define Footnotes_ResetContinuationNotice(This)	\
    ( (This)->lpVtbl -> ResetContinuationNotice(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Footnotes_INTERFACE_DEFINED__ */


#ifndef __Endnotes_INTERFACE_DEFINED__
#define __Endnotes_INTERFACE_DEFINED__

/* interface Endnotes */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Endnotes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020941-0000-0000-C000-000000000046")
    Endnotes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Location( 
            /* [retval][out] */ WdEndnoteLocation *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Location( 
            /* [in] */ WdEndnoteLocation prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberStyle( 
            /* [retval][out] */ WdNoteNumberStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberStyle( 
            /* [in] */ WdNoteNumberStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartingNumber( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartingNumber( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberingRule( 
            /* [retval][out] */ WdNumberingRule *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberingRule( 
            /* [in] */ WdNumberingRule prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Separator( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContinuationSeparator( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContinuationNotice( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Endnote **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Reference,
            /* [optional][in] */ VARIANT *Text,
            /* [retval][out] */ Endnote **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Convert( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SwapWithFootnotes( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ResetSeparator( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ResetContinuationSeparator( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ResetContinuationNotice( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EndnotesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Endnotes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Endnotes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Endnotes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Endnotes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Endnotes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Endnotes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Endnotes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Endnotes * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Endnotes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Endnotes * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Endnotes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Endnotes * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            Endnotes * This,
            /* [retval][out] */ WdEndnoteLocation *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Location )( 
            Endnotes * This,
            /* [in] */ WdEndnoteLocation prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberStyle )( 
            Endnotes * This,
            /* [retval][out] */ WdNoteNumberStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberStyle )( 
            Endnotes * This,
            /* [in] */ WdNoteNumberStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartingNumber )( 
            Endnotes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartingNumber )( 
            Endnotes * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberingRule )( 
            Endnotes * This,
            /* [retval][out] */ WdNumberingRule *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberingRule )( 
            Endnotes * This,
            /* [in] */ WdNumberingRule prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Separator )( 
            Endnotes * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContinuationSeparator )( 
            Endnotes * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContinuationNotice )( 
            Endnotes * This,
            /* [retval][out] */ Range **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Endnotes * This,
            /* [in] */ long Index,
            /* [retval][out] */ Endnote **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Endnotes * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Reference,
            /* [optional][in] */ VARIANT *Text,
            /* [retval][out] */ Endnote **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Convert )( 
            Endnotes * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SwapWithFootnotes )( 
            Endnotes * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ResetSeparator )( 
            Endnotes * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ResetContinuationSeparator )( 
            Endnotes * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ResetContinuationNotice )( 
            Endnotes * This);
        
        END_INTERFACE
    } EndnotesVtbl;

    interface Endnotes
    {
        CONST_VTBL struct EndnotesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Endnotes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Endnotes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Endnotes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Endnotes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Endnotes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Endnotes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Endnotes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Endnotes_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Endnotes_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Endnotes_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Endnotes_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Endnotes_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Endnotes_get_Location(This,prop)	\
    ( (This)->lpVtbl -> get_Location(This,prop) ) 

#define Endnotes_put_Location(This,prop)	\
    ( (This)->lpVtbl -> put_Location(This,prop) ) 

#define Endnotes_get_NumberStyle(This,prop)	\
    ( (This)->lpVtbl -> get_NumberStyle(This,prop) ) 

#define Endnotes_put_NumberStyle(This,prop)	\
    ( (This)->lpVtbl -> put_NumberStyle(This,prop) ) 

#define Endnotes_get_StartingNumber(This,prop)	\
    ( (This)->lpVtbl -> get_StartingNumber(This,prop) ) 

#define Endnotes_put_StartingNumber(This,prop)	\
    ( (This)->lpVtbl -> put_StartingNumber(This,prop) ) 

#define Endnotes_get_NumberingRule(This,prop)	\
    ( (This)->lpVtbl -> get_NumberingRule(This,prop) ) 

#define Endnotes_put_NumberingRule(This,prop)	\
    ( (This)->lpVtbl -> put_NumberingRule(This,prop) ) 

#define Endnotes_get_Separator(This,prop)	\
    ( (This)->lpVtbl -> get_Separator(This,prop) ) 

#define Endnotes_get_ContinuationSeparator(This,prop)	\
    ( (This)->lpVtbl -> get_ContinuationSeparator(This,prop) ) 

#define Endnotes_get_ContinuationNotice(This,prop)	\
    ( (This)->lpVtbl -> get_ContinuationNotice(This,prop) ) 

#define Endnotes_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Endnotes_Add(This,Range,Reference,Text,prop)	\
    ( (This)->lpVtbl -> Add(This,Range,Reference,Text,prop) ) 

#define Endnotes_Convert(This)	\
    ( (This)->lpVtbl -> Convert(This) ) 

#define Endnotes_SwapWithFootnotes(This)	\
    ( (This)->lpVtbl -> SwapWithFootnotes(This) ) 

#define Endnotes_ResetSeparator(This)	\
    ( (This)->lpVtbl -> ResetSeparator(This) ) 

#define Endnotes_ResetContinuationSeparator(This)	\
    ( (This)->lpVtbl -> ResetContinuationSeparator(This) ) 

#define Endnotes_ResetContinuationNotice(This)	\
    ( (This)->lpVtbl -> ResetContinuationNotice(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Endnotes_INTERFACE_DEFINED__ */


#ifndef __Comments_INTERFACE_DEFINED__
#define __Comments_INTERFACE_DEFINED__

/* interface Comments */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Comments;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020940-0000-0000-C000-000000000046")
    Comments : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowBy( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowBy( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Comment **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Text,
            /* [retval][out] */ Comment **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CommentsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Comments * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Comments * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Comments * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Comments * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Comments * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Comments * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Comments * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Comments * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Comments * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Comments * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Comments * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Comments * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowBy )( 
            Comments * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowBy )( 
            Comments * This,
            /* [in] */ BSTR prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Comments * This,
            /* [in] */ long Index,
            /* [retval][out] */ Comment **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Comments * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Text,
            /* [retval][out] */ Comment **prop);
        
        END_INTERFACE
    } CommentsVtbl;

    interface Comments
    {
        CONST_VTBL struct CommentsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Comments_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Comments_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Comments_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Comments_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Comments_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Comments_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Comments_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Comments_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Comments_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Comments_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Comments_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Comments_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Comments_get_ShowBy(This,prop)	\
    ( (This)->lpVtbl -> get_ShowBy(This,prop) ) 

#define Comments_put_ShowBy(This,prop)	\
    ( (This)->lpVtbl -> put_ShowBy(This,prop) ) 

#define Comments_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Comments_Add(This,Range,Text,prop)	\
    ( (This)->lpVtbl -> Add(This,Range,Text,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Comments_INTERFACE_DEFINED__ */


#ifndef __Footnote_INTERFACE_DEFINED__
#define __Footnote_INTERFACE_DEFINED__

/* interface Footnote */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Footnote;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002093F-0000-0000-C000-000000000046")
    Footnote : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Reference( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FootnoteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Footnote * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Footnote * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Footnote * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Footnote * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Footnote * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Footnote * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Footnote * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Footnote * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Footnote * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Footnote * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Footnote * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Reference )( 
            Footnote * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            Footnote * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Footnote * This);
        
        END_INTERFACE
    } FootnoteVtbl;

    interface Footnote
    {
        CONST_VTBL struct FootnoteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Footnote_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Footnote_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Footnote_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Footnote_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Footnote_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Footnote_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Footnote_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Footnote_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Footnote_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Footnote_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Footnote_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Footnote_get_Reference(This,prop)	\
    ( (This)->lpVtbl -> get_Reference(This,prop) ) 

#define Footnote_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define Footnote_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Footnote_INTERFACE_DEFINED__ */


#ifndef __Endnote_INTERFACE_DEFINED__
#define __Endnote_INTERFACE_DEFINED__

/* interface Endnote */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Endnote;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002093E-0000-0000-C000-000000000046")
    Endnote : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Reference( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EndnoteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Endnote * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Endnote * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Endnote * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Endnote * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Endnote * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Endnote * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Endnote * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Endnote * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Endnote * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Endnote * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Endnote * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Reference )( 
            Endnote * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            Endnote * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Endnote * This);
        
        END_INTERFACE
    } EndnoteVtbl;

    interface Endnote
    {
        CONST_VTBL struct EndnoteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Endnote_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Endnote_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Endnote_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Endnote_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Endnote_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Endnote_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Endnote_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Endnote_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Endnote_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Endnote_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Endnote_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Endnote_get_Reference(This,prop)	\
    ( (This)->lpVtbl -> get_Reference(This,prop) ) 

#define Endnote_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define Endnote_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Endnote_INTERFACE_DEFINED__ */


#ifndef __Comment_INTERFACE_DEFINED__
#define __Comment_INTERFACE_DEFINED__

/* interface Comment */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Comment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002093D-0000-0000-C000-000000000046")
    Comment : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Reference( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Scope( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Author( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Author( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Initial( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Initial( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowTip( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowTip( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Edit( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Date( 
            /* [retval][out] */ DATE *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsInk( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CommentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Comment * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Comment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Comment * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Comment * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Comment * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Comment * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Comment * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Comment * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Comment * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Comment * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Comment * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Reference )( 
            Comment * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Scope )( 
            Comment * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            Comment * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Author )( 
            Comment * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Author )( 
            Comment * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Initial )( 
            Comment * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Initial )( 
            Comment * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowTip )( 
            Comment * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowTip )( 
            Comment * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Comment * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Edit )( 
            Comment * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Date )( 
            Comment * This,
            /* [retval][out] */ DATE *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsInk )( 
            Comment * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } CommentVtbl;

    interface Comment
    {
        CONST_VTBL struct CommentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Comment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Comment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Comment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Comment_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Comment_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Comment_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Comment_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Comment_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Comment_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Comment_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Comment_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Comment_get_Reference(This,prop)	\
    ( (This)->lpVtbl -> get_Reference(This,prop) ) 

#define Comment_get_Scope(This,prop)	\
    ( (This)->lpVtbl -> get_Scope(This,prop) ) 

#define Comment_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define Comment_get_Author(This,prop)	\
    ( (This)->lpVtbl -> get_Author(This,prop) ) 

#define Comment_put_Author(This,prop)	\
    ( (This)->lpVtbl -> put_Author(This,prop) ) 

#define Comment_get_Initial(This,prop)	\
    ( (This)->lpVtbl -> get_Initial(This,prop) ) 

#define Comment_put_Initial(This,prop)	\
    ( (This)->lpVtbl -> put_Initial(This,prop) ) 

#define Comment_get_ShowTip(This,prop)	\
    ( (This)->lpVtbl -> get_ShowTip(This,prop) ) 

#define Comment_put_ShowTip(This,prop)	\
    ( (This)->lpVtbl -> put_ShowTip(This,prop) ) 

#define Comment_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Comment_Edit(This)	\
    ( (This)->lpVtbl -> Edit(This) ) 

#define Comment_get_Date(This,prop)	\
    ( (This)->lpVtbl -> get_Date(This,prop) ) 

#define Comment_get_IsInk(This,prop)	\
    ( (This)->lpVtbl -> get_IsInk(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Comment_INTERFACE_DEFINED__ */


#ifndef __Borders_INTERFACE_DEFINED__
#define __Borders_INTERFACE_DEFINED__

/* interface Borders */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Borders;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002093C-0000-0000-C000-000000000046")
    Borders : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Enable( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Enable( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DistanceFromTop( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DistanceFromTop( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Shadow( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsideLineStyle( 
            /* [retval][out] */ WdLineStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsideLineStyle( 
            /* [in] */ WdLineStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OutsideLineStyle( 
            /* [retval][out] */ WdLineStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OutsideLineStyle( 
            /* [in] */ WdLineStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsideLineWidth( 
            /* [retval][out] */ WdLineWidth *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsideLineWidth( 
            /* [in] */ WdLineWidth prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OutsideLineWidth( 
            /* [retval][out] */ WdLineWidth *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OutsideLineWidth( 
            /* [in] */ WdLineWidth prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsideColorIndex( 
            /* [retval][out] */ WdColorIndex *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsideColorIndex( 
            /* [in] */ WdColorIndex prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OutsideColorIndex( 
            /* [retval][out] */ WdColorIndex *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OutsideColorIndex( 
            /* [in] */ WdColorIndex prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DistanceFromLeft( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DistanceFromLeft( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DistanceFromBottom( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DistanceFromBottom( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DistanceFromRight( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DistanceFromRight( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AlwaysInFront( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AlwaysInFront( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SurroundHeader( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SurroundHeader( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SurroundFooter( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SurroundFooter( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_JoinBorders( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_JoinBorders( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasHorizontal( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasVertical( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DistanceFrom( 
            /* [retval][out] */ WdBorderDistanceFrom *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DistanceFrom( 
            /* [in] */ WdBorderDistanceFrom prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableFirstPageInSection( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableFirstPageInSection( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableOtherPagesInSection( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableOtherPagesInSection( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ WdBorderType Index,
            /* [retval][out] */ Border **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyPageBordersToAllSections( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsideColor( 
            /* [retval][out] */ WdColor *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsideColor( 
            /* [in] */ WdColor prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OutsideColor( 
            /* [retval][out] */ WdColor *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OutsideColor( 
            /* [in] */ WdColor prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BordersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Borders * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Borders * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Borders * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Borders * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Borders * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Borders * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Borders * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Borders * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Borders * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Borders * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Borders * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Borders * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Enable )( 
            Borders * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Enable )( 
            Borders * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DistanceFromTop )( 
            Borders * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DistanceFromTop )( 
            Borders * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            Borders * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shadow )( 
            Borders * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsideLineStyle )( 
            Borders * This,
            /* [retval][out] */ WdLineStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsideLineStyle )( 
            Borders * This,
            /* [in] */ WdLineStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OutsideLineStyle )( 
            Borders * This,
            /* [retval][out] */ WdLineStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OutsideLineStyle )( 
            Borders * This,
            /* [in] */ WdLineStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsideLineWidth )( 
            Borders * This,
            /* [retval][out] */ WdLineWidth *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsideLineWidth )( 
            Borders * This,
            /* [in] */ WdLineWidth prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OutsideLineWidth )( 
            Borders * This,
            /* [retval][out] */ WdLineWidth *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OutsideLineWidth )( 
            Borders * This,
            /* [in] */ WdLineWidth prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsideColorIndex )( 
            Borders * This,
            /* [retval][out] */ WdColorIndex *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsideColorIndex )( 
            Borders * This,
            /* [in] */ WdColorIndex prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OutsideColorIndex )( 
            Borders * This,
            /* [retval][out] */ WdColorIndex *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OutsideColorIndex )( 
            Borders * This,
            /* [in] */ WdColorIndex prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DistanceFromLeft )( 
            Borders * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DistanceFromLeft )( 
            Borders * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DistanceFromBottom )( 
            Borders * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DistanceFromBottom )( 
            Borders * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DistanceFromRight )( 
            Borders * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DistanceFromRight )( 
            Borders * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AlwaysInFront )( 
            Borders * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AlwaysInFront )( 
            Borders * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SurroundHeader )( 
            Borders * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SurroundHeader )( 
            Borders * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SurroundFooter )( 
            Borders * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SurroundFooter )( 
            Borders * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_JoinBorders )( 
            Borders * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_JoinBorders )( 
            Borders * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasHorizontal )( 
            Borders * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasVertical )( 
            Borders * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DistanceFrom )( 
            Borders * This,
            /* [retval][out] */ WdBorderDistanceFrom *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DistanceFrom )( 
            Borders * This,
            /* [in] */ WdBorderDistanceFrom prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableFirstPageInSection )( 
            Borders * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableFirstPageInSection )( 
            Borders * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableOtherPagesInSection )( 
            Borders * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableOtherPagesInSection )( 
            Borders * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Borders * This,
            /* [in] */ WdBorderType Index,
            /* [retval][out] */ Border **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyPageBordersToAllSections )( 
            Borders * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsideColor )( 
            Borders * This,
            /* [retval][out] */ WdColor *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsideColor )( 
            Borders * This,
            /* [in] */ WdColor prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OutsideColor )( 
            Borders * This,
            /* [retval][out] */ WdColor *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OutsideColor )( 
            Borders * This,
            /* [in] */ WdColor prop);
        
        END_INTERFACE
    } BordersVtbl;

    interface Borders
    {
        CONST_VTBL struct BordersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Borders_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Borders_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Borders_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Borders_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Borders_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Borders_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Borders_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Borders_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Borders_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Borders_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Borders_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Borders_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Borders_get_Enable(This,prop)	\
    ( (This)->lpVtbl -> get_Enable(This,prop) ) 

#define Borders_put_Enable(This,prop)	\
    ( (This)->lpVtbl -> put_Enable(This,prop) ) 

#define Borders_get_DistanceFromTop(This,prop)	\
    ( (This)->lpVtbl -> get_DistanceFromTop(This,prop) ) 

#define Borders_put_DistanceFromTop(This,prop)	\
    ( (This)->lpVtbl -> put_DistanceFromTop(This,prop) ) 

#define Borders_get_Shadow(This,prop)	\
    ( (This)->lpVtbl -> get_Shadow(This,prop) ) 

#define Borders_put_Shadow(This,prop)	\
    ( (This)->lpVtbl -> put_Shadow(This,prop) ) 

#define Borders_get_InsideLineStyle(This,prop)	\
    ( (This)->lpVtbl -> get_InsideLineStyle(This,prop) ) 

#define Borders_put_InsideLineStyle(This,prop)	\
    ( (This)->lpVtbl -> put_InsideLineStyle(This,prop) ) 

#define Borders_get_OutsideLineStyle(This,prop)	\
    ( (This)->lpVtbl -> get_OutsideLineStyle(This,prop) ) 

#define Borders_put_OutsideLineStyle(This,prop)	\
    ( (This)->lpVtbl -> put_OutsideLineStyle(This,prop) ) 

#define Borders_get_InsideLineWidth(This,prop)	\
    ( (This)->lpVtbl -> get_InsideLineWidth(This,prop) ) 

#define Borders_put_InsideLineWidth(This,prop)	\
    ( (This)->lpVtbl -> put_InsideLineWidth(This,prop) ) 

#define Borders_get_OutsideLineWidth(This,prop)	\
    ( (This)->lpVtbl -> get_OutsideLineWidth(This,prop) ) 

#define Borders_put_OutsideLineWidth(This,prop)	\
    ( (This)->lpVtbl -> put_OutsideLineWidth(This,prop) ) 

#define Borders_get_InsideColorIndex(This,prop)	\
    ( (This)->lpVtbl -> get_InsideColorIndex(This,prop) ) 

#define Borders_put_InsideColorIndex(This,prop)	\
    ( (This)->lpVtbl -> put_InsideColorIndex(This,prop) ) 

#define Borders_get_OutsideColorIndex(This,prop)	\
    ( (This)->lpVtbl -> get_OutsideColorIndex(This,prop) ) 

#define Borders_put_OutsideColorIndex(This,prop)	\
    ( (This)->lpVtbl -> put_OutsideColorIndex(This,prop) ) 

#define Borders_get_DistanceFromLeft(This,prop)	\
    ( (This)->lpVtbl -> get_DistanceFromLeft(This,prop) ) 

#define Borders_put_DistanceFromLeft(This,prop)	\
    ( (This)->lpVtbl -> put_DistanceFromLeft(This,prop) ) 

#define Borders_get_DistanceFromBottom(This,prop)	\
    ( (This)->lpVtbl -> get_DistanceFromBottom(This,prop) ) 

#define Borders_put_DistanceFromBottom(This,prop)	\
    ( (This)->lpVtbl -> put_DistanceFromBottom(This,prop) ) 

#define Borders_get_DistanceFromRight(This,prop)	\
    ( (This)->lpVtbl -> get_DistanceFromRight(This,prop) ) 

#define Borders_put_DistanceFromRight(This,prop)	\
    ( (This)->lpVtbl -> put_DistanceFromRight(This,prop) ) 

#define Borders_get_AlwaysInFront(This,prop)	\
    ( (This)->lpVtbl -> get_AlwaysInFront(This,prop) ) 

#define Borders_put_AlwaysInFront(This,prop)	\
    ( (This)->lpVtbl -> put_AlwaysInFront(This,prop) ) 

#define Borders_get_SurroundHeader(This,prop)	\
    ( (This)->lpVtbl -> get_SurroundHeader(This,prop) ) 

#define Borders_put_SurroundHeader(This,prop)	\
    ( (This)->lpVtbl -> put_SurroundHeader(This,prop) ) 

#define Borders_get_SurroundFooter(This,prop)	\
    ( (This)->lpVtbl -> get_SurroundFooter(This,prop) ) 

#define Borders_put_SurroundFooter(This,prop)	\
    ( (This)->lpVtbl -> put_SurroundFooter(This,prop) ) 

#define Borders_get_JoinBorders(This,prop)	\
    ( (This)->lpVtbl -> get_JoinBorders(This,prop) ) 

#define Borders_put_JoinBorders(This,prop)	\
    ( (This)->lpVtbl -> put_JoinBorders(This,prop) ) 

#define Borders_get_HasHorizontal(This,prop)	\
    ( (This)->lpVtbl -> get_HasHorizontal(This,prop) ) 

#define Borders_get_HasVertical(This,prop)	\
    ( (This)->lpVtbl -> get_HasVertical(This,prop) ) 

#define Borders_get_DistanceFrom(This,prop)	\
    ( (This)->lpVtbl -> get_DistanceFrom(This,prop) ) 

#define Borders_put_DistanceFrom(This,prop)	\
    ( (This)->lpVtbl -> put_DistanceFrom(This,prop) ) 

#define Borders_get_EnableFirstPageInSection(This,prop)	\
    ( (This)->lpVtbl -> get_EnableFirstPageInSection(This,prop) ) 

#define Borders_put_EnableFirstPageInSection(This,prop)	\
    ( (This)->lpVtbl -> put_EnableFirstPageInSection(This,prop) ) 

#define Borders_get_EnableOtherPagesInSection(This,prop)	\
    ( (This)->lpVtbl -> get_EnableOtherPagesInSection(This,prop) ) 

#define Borders_put_EnableOtherPagesInSection(This,prop)	\
    ( (This)->lpVtbl -> put_EnableOtherPagesInSection(This,prop) ) 

#define Borders_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Borders_ApplyPageBordersToAllSections(This)	\
    ( (This)->lpVtbl -> ApplyPageBordersToAllSections(This) ) 

#define Borders_get_InsideColor(This,prop)	\
    ( (This)->lpVtbl -> get_InsideColor(This,prop) ) 

#define Borders_put_InsideColor(This,prop)	\
    ( (This)->lpVtbl -> put_InsideColor(This,prop) ) 

#define Borders_get_OutsideColor(This,prop)	\
    ( (This)->lpVtbl -> get_OutsideColor(This,prop) ) 

#define Borders_put_OutsideColor(This,prop)	\
    ( (This)->lpVtbl -> put_OutsideColor(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Borders_INTERFACE_DEFINED__ */


#ifndef __Border_INTERFACE_DEFINED__
#define __Border_INTERFACE_DEFINED__

/* interface Border */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Border;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002093B-0000-0000-C000-000000000046")
    Border : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColorIndex( 
            /* [retval][out] */ WdColorIndex *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColorIndex( 
            /* [in] */ WdColorIndex prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Inside( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineStyle( 
            /* [retval][out] */ WdLineStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineStyle( 
            /* [in] */ WdLineStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineWidth( 
            /* [retval][out] */ WdLineWidth *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineWidth( 
            /* [in] */ WdLineWidth prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArtStyle( 
            /* [retval][out] */ WdPageBorderArt *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArtStyle( 
            /* [in] */ WdPageBorderArt prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArtWidth( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArtWidth( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Color( 
            /* [retval][out] */ WdColor *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Color( 
            /* [in] */ WdColor prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BorderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Border * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Border * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Border * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Border * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Border * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Border * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Border * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Border * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Border * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Border * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            Border * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            Border * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColorIndex )( 
            Border * This,
            /* [retval][out] */ WdColorIndex *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColorIndex )( 
            Border * This,
            /* [in] */ WdColorIndex prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Inside )( 
            Border * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineStyle )( 
            Border * This,
            /* [retval][out] */ WdLineStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineStyle )( 
            Border * This,
            /* [in] */ WdLineStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineWidth )( 
            Border * This,
            /* [retval][out] */ WdLineWidth *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineWidth )( 
            Border * This,
            /* [in] */ WdLineWidth prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArtStyle )( 
            Border * This,
            /* [retval][out] */ WdPageBorderArt *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArtStyle )( 
            Border * This,
            /* [in] */ WdPageBorderArt prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArtWidth )( 
            Border * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArtWidth )( 
            Border * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Color )( 
            Border * This,
            /* [retval][out] */ WdColor *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Color )( 
            Border * This,
            /* [in] */ WdColor prop);
        
        END_INTERFACE
    } BorderVtbl;

    interface Border
    {
        CONST_VTBL struct BorderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Border_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Border_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Border_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Border_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Border_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Border_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Border_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Border_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Border_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Border_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Border_get_Visible(This,prop)	\
    ( (This)->lpVtbl -> get_Visible(This,prop) ) 

#define Border_put_Visible(This,prop)	\
    ( (This)->lpVtbl -> put_Visible(This,prop) ) 

#define Border_get_ColorIndex(This,prop)	\
    ( (This)->lpVtbl -> get_ColorIndex(This,prop) ) 

#define Border_put_ColorIndex(This,prop)	\
    ( (This)->lpVtbl -> put_ColorIndex(This,prop) ) 

#define Border_get_Inside(This,prop)	\
    ( (This)->lpVtbl -> get_Inside(This,prop) ) 

#define Border_get_LineStyle(This,prop)	\
    ( (This)->lpVtbl -> get_LineStyle(This,prop) ) 

#define Border_put_LineStyle(This,prop)	\
    ( (This)->lpVtbl -> put_LineStyle(This,prop) ) 

#define Border_get_LineWidth(This,prop)	\
    ( (This)->lpVtbl -> get_LineWidth(This,prop) ) 

#define Border_put_LineWidth(This,prop)	\
    ( (This)->lpVtbl -> put_LineWidth(This,prop) ) 

#define Border_get_ArtStyle(This,prop)	\
    ( (This)->lpVtbl -> get_ArtStyle(This,prop) ) 

#define Border_put_ArtStyle(This,prop)	\
    ( (This)->lpVtbl -> put_ArtStyle(This,prop) ) 

#define Border_get_ArtWidth(This,prop)	\
    ( (This)->lpVtbl -> get_ArtWidth(This,prop) ) 

#define Border_put_ArtWidth(This,prop)	\
    ( (This)->lpVtbl -> put_ArtWidth(This,prop) ) 

#define Border_get_Color(This,prop)	\
    ( (This)->lpVtbl -> get_Color(This,prop) ) 

#define Border_put_Color(This,prop)	\
    ( (This)->lpVtbl -> put_Color(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Border_INTERFACE_DEFINED__ */


#ifndef __Shading_INTERFACE_DEFINED__
#define __Shading_INTERFACE_DEFINED__

/* interface Shading */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Shading;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002093A-0000-0000-C000-000000000046")
    Shading : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForegroundPatternColorIndex( 
            /* [retval][out] */ WdColorIndex *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForegroundPatternColorIndex( 
            /* [in] */ WdColorIndex prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundPatternColorIndex( 
            /* [retval][out] */ WdColorIndex *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundPatternColorIndex( 
            /* [in] */ WdColorIndex prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Texture( 
            /* [retval][out] */ WdTextureIndex *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Texture( 
            /* [in] */ WdTextureIndex prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForegroundPatternColor( 
            /* [retval][out] */ WdColor *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ForegroundPatternColor( 
            /* [in] */ WdColor prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundPatternColor( 
            /* [retval][out] */ WdColor *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundPatternColor( 
            /* [in] */ WdColor prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ShadingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Shading * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Shading * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Shading * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Shading * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Shading * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Shading * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Shading * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Shading * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Shading * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Shading * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForegroundPatternColorIndex )( 
            Shading * This,
            /* [retval][out] */ WdColorIndex *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForegroundPatternColorIndex )( 
            Shading * This,
            /* [in] */ WdColorIndex prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundPatternColorIndex )( 
            Shading * This,
            /* [retval][out] */ WdColorIndex *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundPatternColorIndex )( 
            Shading * This,
            /* [in] */ WdColorIndex prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Texture )( 
            Shading * This,
            /* [retval][out] */ WdTextureIndex *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Texture )( 
            Shading * This,
            /* [in] */ WdTextureIndex prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForegroundPatternColor )( 
            Shading * This,
            /* [retval][out] */ WdColor *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ForegroundPatternColor )( 
            Shading * This,
            /* [in] */ WdColor prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundPatternColor )( 
            Shading * This,
            /* [retval][out] */ WdColor *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundPatternColor )( 
            Shading * This,
            /* [in] */ WdColor prop);
        
        END_INTERFACE
    } ShadingVtbl;

    interface Shading
    {
        CONST_VTBL struct ShadingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Shading_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Shading_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Shading_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Shading_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Shading_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Shading_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Shading_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Shading_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Shading_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Shading_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Shading_get_ForegroundPatternColorIndex(This,prop)	\
    ( (This)->lpVtbl -> get_ForegroundPatternColorIndex(This,prop) ) 

#define Shading_put_ForegroundPatternColorIndex(This,prop)	\
    ( (This)->lpVtbl -> put_ForegroundPatternColorIndex(This,prop) ) 

#define Shading_get_BackgroundPatternColorIndex(This,prop)	\
    ( (This)->lpVtbl -> get_BackgroundPatternColorIndex(This,prop) ) 

#define Shading_put_BackgroundPatternColorIndex(This,prop)	\
    ( (This)->lpVtbl -> put_BackgroundPatternColorIndex(This,prop) ) 

#define Shading_get_Texture(This,prop)	\
    ( (This)->lpVtbl -> get_Texture(This,prop) ) 

#define Shading_put_Texture(This,prop)	\
    ( (This)->lpVtbl -> put_Texture(This,prop) ) 

#define Shading_get_ForegroundPatternColor(This,prop)	\
    ( (This)->lpVtbl -> get_ForegroundPatternColor(This,prop) ) 

#define Shading_put_ForegroundPatternColor(This,prop)	\
    ( (This)->lpVtbl -> put_ForegroundPatternColor(This,prop) ) 

#define Shading_get_BackgroundPatternColor(This,prop)	\
    ( (This)->lpVtbl -> get_BackgroundPatternColor(This,prop) ) 

#define Shading_put_BackgroundPatternColor(This,prop)	\
    ( (This)->lpVtbl -> put_BackgroundPatternColor(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Shading_INTERFACE_DEFINED__ */


#ifndef __TextRetrievalMode_INTERFACE_DEFINED__
#define __TextRetrievalMode_INTERFACE_DEFINED__

/* interface TextRetrievalMode */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TextRetrievalMode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020939-0000-0000-C000-000000000046")
    TextRetrievalMode : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ViewType( 
            /* [retval][out] */ WdViewType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ViewType( 
            /* [in] */ WdViewType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Duplicate( 
            /* [retval][out] */ TextRetrievalMode **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludeHiddenText( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludeHiddenText( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludeFieldCodes( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludeFieldCodes( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextRetrievalModeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextRetrievalMode * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextRetrievalMode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextRetrievalMode * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextRetrievalMode * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextRetrievalMode * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextRetrievalMode * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextRetrievalMode * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TextRetrievalMode * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TextRetrievalMode * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextRetrievalMode * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ViewType )( 
            TextRetrievalMode * This,
            /* [retval][out] */ WdViewType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ViewType )( 
            TextRetrievalMode * This,
            /* [in] */ WdViewType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Duplicate )( 
            TextRetrievalMode * This,
            /* [retval][out] */ TextRetrievalMode **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeHiddenText )( 
            TextRetrievalMode * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeHiddenText )( 
            TextRetrievalMode * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeFieldCodes )( 
            TextRetrievalMode * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeFieldCodes )( 
            TextRetrievalMode * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } TextRetrievalModeVtbl;

    interface TextRetrievalMode
    {
        CONST_VTBL struct TextRetrievalModeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextRetrievalMode_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TextRetrievalMode_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TextRetrievalMode_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TextRetrievalMode_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TextRetrievalMode_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TextRetrievalMode_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TextRetrievalMode_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TextRetrievalMode_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TextRetrievalMode_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TextRetrievalMode_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TextRetrievalMode_get_ViewType(This,prop)	\
    ( (This)->lpVtbl -> get_ViewType(This,prop) ) 

#define TextRetrievalMode_put_ViewType(This,prop)	\
    ( (This)->lpVtbl -> put_ViewType(This,prop) ) 

#define TextRetrievalMode_get_Duplicate(This,prop)	\
    ( (This)->lpVtbl -> get_Duplicate(This,prop) ) 

#define TextRetrievalMode_get_IncludeHiddenText(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeHiddenText(This,prop) ) 

#define TextRetrievalMode_put_IncludeHiddenText(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeHiddenText(This,prop) ) 

#define TextRetrievalMode_get_IncludeFieldCodes(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeFieldCodes(This,prop) ) 

#define TextRetrievalMode_put_IncludeFieldCodes(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeFieldCodes(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TextRetrievalMode_INTERFACE_DEFINED__ */


#ifndef __AutoTextEntries_INTERFACE_DEFINED__
#define __AutoTextEntries_INTERFACE_DEFINED__

/* interface AutoTextEntries */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_AutoTextEntries;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020937-0000-0000-C000-000000000046")
    AutoTextEntries : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ AutoTextEntry **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [in] */ Range *Range,
            /* [retval][out] */ AutoTextEntry **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AppendToSpike( 
            /* [in] */ Range *Range,
            /* [retval][out] */ AutoTextEntry **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AutoTextEntriesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AutoTextEntries * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AutoTextEntries * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AutoTextEntries * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AutoTextEntries * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AutoTextEntries * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AutoTextEntries * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AutoTextEntries * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            AutoTextEntries * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            AutoTextEntries * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AutoTextEntries * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            AutoTextEntries * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            AutoTextEntries * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            AutoTextEntries * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ AutoTextEntry **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            AutoTextEntries * This,
            /* [in] */ BSTR Name,
            /* [in] */ Range *Range,
            /* [retval][out] */ AutoTextEntry **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AppendToSpike )( 
            AutoTextEntries * This,
            /* [in] */ Range *Range,
            /* [retval][out] */ AutoTextEntry **prop);
        
        END_INTERFACE
    } AutoTextEntriesVtbl;

    interface AutoTextEntries
    {
        CONST_VTBL struct AutoTextEntriesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AutoTextEntries_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AutoTextEntries_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AutoTextEntries_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AutoTextEntries_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AutoTextEntries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AutoTextEntries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AutoTextEntries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AutoTextEntries_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define AutoTextEntries_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define AutoTextEntries_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define AutoTextEntries_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define AutoTextEntries_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define AutoTextEntries_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define AutoTextEntries_Add(This,Name,Range,prop)	\
    ( (This)->lpVtbl -> Add(This,Name,Range,prop) ) 

#define AutoTextEntries_AppendToSpike(This,Range,prop)	\
    ( (This)->lpVtbl -> AppendToSpike(This,Range,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AutoTextEntries_INTERFACE_DEFINED__ */


#ifndef __AutoTextEntry_INTERFACE_DEFINED__
#define __AutoTextEntry_INTERFACE_DEFINED__

/* interface AutoTextEntry */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_AutoTextEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020936-0000-0000-C000-000000000046")
    AutoTextEntry : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StyleName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ Range *Where,
            /* [optional][in] */ VARIANT *RichText,
            /* [retval][out] */ Range **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AutoTextEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AutoTextEntry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AutoTextEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AutoTextEntry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AutoTextEntry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AutoTextEntry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AutoTextEntry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AutoTextEntry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            AutoTextEntry * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            AutoTextEntry * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AutoTextEntry * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            AutoTextEntry * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            AutoTextEntry * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            AutoTextEntry * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            AutoTextEntry * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            AutoTextEntry * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            AutoTextEntry * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            AutoTextEntry * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            AutoTextEntry * This,
            /* [in] */ Range *Where,
            /* [optional][in] */ VARIANT *RichText,
            /* [retval][out] */ Range **prop);
        
        END_INTERFACE
    } AutoTextEntryVtbl;

    interface AutoTextEntry
    {
        CONST_VTBL struct AutoTextEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AutoTextEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AutoTextEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AutoTextEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AutoTextEntry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AutoTextEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AutoTextEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AutoTextEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AutoTextEntry_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define AutoTextEntry_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define AutoTextEntry_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define AutoTextEntry_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define AutoTextEntry_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define AutoTextEntry_put_Name(This,prop)	\
    ( (This)->lpVtbl -> put_Name(This,prop) ) 

#define AutoTextEntry_get_StyleName(This,prop)	\
    ( (This)->lpVtbl -> get_StyleName(This,prop) ) 

#define AutoTextEntry_get_Value(This,prop)	\
    ( (This)->lpVtbl -> get_Value(This,prop) ) 

#define AutoTextEntry_put_Value(This,prop)	\
    ( (This)->lpVtbl -> put_Value(This,prop) ) 

#define AutoTextEntry_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define AutoTextEntry_Insert(This,Where,RichText,prop)	\
    ( (This)->lpVtbl -> Insert(This,Where,RichText,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AutoTextEntry_INTERFACE_DEFINED__ */


#ifndef __System_INTERFACE_DEFINED__
#define __System_INTERFACE_DEFINED__

/* interface System */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_System;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020935-0000-0000-C000-000000000046")
    System : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OperatingSystem( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProcessorType( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Version( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FreeDiskSpace( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Country( 
            /* [retval][out] */ WdCountry *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageDesignation( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalResolution( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalResolution( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProfileString( 
            /* [in] */ BSTR Section,
            /* [in] */ BSTR Key,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ProfileString( 
            /* [in] */ BSTR Section,
            /* [in] */ BSTR Key,
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrivateProfileString( 
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR Section,
            /* [in] */ BSTR Key,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrivateProfileString( 
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR Section,
            /* [in] */ BSTR Key,
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MathCoprocessorInstalled( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ComputerType( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MacintoshName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_QuickDrawInstalled( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Cursor( 
            /* [retval][out] */ WdCursorType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Cursor( 
            /* [in] */ WdCursorType prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MSInfo( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Connect( 
            /* [in] */ BSTR Path,
            /* [optional][in] */ VARIANT *Drive,
            /* [optional][in] */ VARIANT *Password) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CountryRegion( 
            /* [retval][out] */ WdCountry *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SystemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            System * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            System * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            System * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            System * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            System * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            System * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            System * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            System * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            System * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            System * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OperatingSystem )( 
            System * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProcessorType )( 
            System * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            System * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FreeDiskSpace )( 
            System * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Country )( 
            System * This,
            /* [retval][out] */ WdCountry *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageDesignation )( 
            System * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalResolution )( 
            System * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalResolution )( 
            System * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProfileString )( 
            System * This,
            /* [in] */ BSTR Section,
            /* [in] */ BSTR Key,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ProfileString )( 
            System * This,
            /* [in] */ BSTR Section,
            /* [in] */ BSTR Key,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateProfileString )( 
            System * This,
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR Section,
            /* [in] */ BSTR Key,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrivateProfileString )( 
            System * This,
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR Section,
            /* [in] */ BSTR Key,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MathCoprocessorInstalled )( 
            System * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ComputerType )( 
            System * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MacintoshName )( 
            System * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_QuickDrawInstalled )( 
            System * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Cursor )( 
            System * This,
            /* [retval][out] */ WdCursorType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Cursor )( 
            System * This,
            /* [in] */ WdCursorType prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MSInfo )( 
            System * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Connect )( 
            System * This,
            /* [in] */ BSTR Path,
            /* [optional][in] */ VARIANT *Drive,
            /* [optional][in] */ VARIANT *Password);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CountryRegion )( 
            System * This,
            /* [retval][out] */ WdCountry *prop);
        
        END_INTERFACE
    } SystemVtbl;

    interface System
    {
        CONST_VTBL struct SystemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define System_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define System_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define System_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define System_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define System_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define System_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define System_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define System_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define System_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define System_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define System_get_OperatingSystem(This,prop)	\
    ( (This)->lpVtbl -> get_OperatingSystem(This,prop) ) 

#define System_get_ProcessorType(This,prop)	\
    ( (This)->lpVtbl -> get_ProcessorType(This,prop) ) 

#define System_get_Version(This,prop)	\
    ( (This)->lpVtbl -> get_Version(This,prop) ) 

#define System_get_FreeDiskSpace(This,prop)	\
    ( (This)->lpVtbl -> get_FreeDiskSpace(This,prop) ) 

#define System_get_Country(This,prop)	\
    ( (This)->lpVtbl -> get_Country(This,prop) ) 

#define System_get_LanguageDesignation(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageDesignation(This,prop) ) 

#define System_get_HorizontalResolution(This,prop)	\
    ( (This)->lpVtbl -> get_HorizontalResolution(This,prop) ) 

#define System_get_VerticalResolution(This,prop)	\
    ( (This)->lpVtbl -> get_VerticalResolution(This,prop) ) 

#define System_get_ProfileString(This,Section,Key,prop)	\
    ( (This)->lpVtbl -> get_ProfileString(This,Section,Key,prop) ) 

#define System_put_ProfileString(This,Section,Key,prop)	\
    ( (This)->lpVtbl -> put_ProfileString(This,Section,Key,prop) ) 

#define System_get_PrivateProfileString(This,FileName,Section,Key,prop)	\
    ( (This)->lpVtbl -> get_PrivateProfileString(This,FileName,Section,Key,prop) ) 

#define System_put_PrivateProfileString(This,FileName,Section,Key,prop)	\
    ( (This)->lpVtbl -> put_PrivateProfileString(This,FileName,Section,Key,prop) ) 

#define System_get_MathCoprocessorInstalled(This,prop)	\
    ( (This)->lpVtbl -> get_MathCoprocessorInstalled(This,prop) ) 

#define System_get_ComputerType(This,prop)	\
    ( (This)->lpVtbl -> get_ComputerType(This,prop) ) 

#define System_get_MacintoshName(This,prop)	\
    ( (This)->lpVtbl -> get_MacintoshName(This,prop) ) 

#define System_get_QuickDrawInstalled(This,prop)	\
    ( (This)->lpVtbl -> get_QuickDrawInstalled(This,prop) ) 

#define System_get_Cursor(This,prop)	\
    ( (This)->lpVtbl -> get_Cursor(This,prop) ) 

#define System_put_Cursor(This,prop)	\
    ( (This)->lpVtbl -> put_Cursor(This,prop) ) 

#define System_MSInfo(This)	\
    ( (This)->lpVtbl -> MSInfo(This) ) 

#define System_Connect(This,Path,Drive,Password)	\
    ( (This)->lpVtbl -> Connect(This,Path,Drive,Password) ) 

#define System_get_CountryRegion(This,prop)	\
    ( (This)->lpVtbl -> get_CountryRegion(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __System_INTERFACE_DEFINED__ */


#ifndef __OLEFormat_INTERFACE_DEFINED__
#define __OLEFormat_INTERFACE_DEFINED__

/* interface OLEFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_OLEFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020933-0000-0000-C000-000000000046")
    OLEFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ClassType( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ClassType( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayAsIcon( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayAsIcon( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IconName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IconName( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IconPath( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IconIndex( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IconIndex( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IconLabel( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IconLabel( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Label( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProgID( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Edit( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DoVerb( 
            /* [optional][in] */ VARIANT *VerbIndex) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertTo( 
            /* [optional][in] */ VARIANT *ClassType,
            /* [optional][in] */ VARIANT *DisplayAsIcon,
            /* [optional][in] */ VARIANT *IconFileName,
            /* [optional][in] */ VARIANT *IconIndex,
            /* [optional][in] */ VARIANT *IconLabel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ActivateAs( 
            /* [in] */ BSTR ClassType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PreserveFormattingOnUpdate( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PreserveFormattingOnUpdate( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OLEFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OLEFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OLEFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OLEFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OLEFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OLEFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OLEFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OLEFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            OLEFormat * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            OLEFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            OLEFormat * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ClassType )( 
            OLEFormat * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ClassType )( 
            OLEFormat * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayAsIcon )( 
            OLEFormat * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayAsIcon )( 
            OLEFormat * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IconName )( 
            OLEFormat * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IconName )( 
            OLEFormat * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IconPath )( 
            OLEFormat * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IconIndex )( 
            OLEFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IconIndex )( 
            OLEFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IconLabel )( 
            OLEFormat * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IconLabel )( 
            OLEFormat * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Label )( 
            OLEFormat * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            OLEFormat * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProgID )( 
            OLEFormat * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            OLEFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Edit )( 
            OLEFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            OLEFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DoVerb )( 
            OLEFormat * This,
            /* [optional][in] */ VARIANT *VerbIndex);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertTo )( 
            OLEFormat * This,
            /* [optional][in] */ VARIANT *ClassType,
            /* [optional][in] */ VARIANT *DisplayAsIcon,
            /* [optional][in] */ VARIANT *IconFileName,
            /* [optional][in] */ VARIANT *IconIndex,
            /* [optional][in] */ VARIANT *IconLabel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ActivateAs )( 
            OLEFormat * This,
            /* [in] */ BSTR ClassType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PreserveFormattingOnUpdate )( 
            OLEFormat * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PreserveFormattingOnUpdate )( 
            OLEFormat * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } OLEFormatVtbl;

    interface OLEFormat
    {
        CONST_VTBL struct OLEFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OLEFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define OLEFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define OLEFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define OLEFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define OLEFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define OLEFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define OLEFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define OLEFormat_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define OLEFormat_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define OLEFormat_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define OLEFormat_get_ClassType(This,prop)	\
    ( (This)->lpVtbl -> get_ClassType(This,prop) ) 

#define OLEFormat_put_ClassType(This,prop)	\
    ( (This)->lpVtbl -> put_ClassType(This,prop) ) 

#define OLEFormat_get_DisplayAsIcon(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayAsIcon(This,prop) ) 

#define OLEFormat_put_DisplayAsIcon(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayAsIcon(This,prop) ) 

#define OLEFormat_get_IconName(This,prop)	\
    ( (This)->lpVtbl -> get_IconName(This,prop) ) 

#define OLEFormat_put_IconName(This,prop)	\
    ( (This)->lpVtbl -> put_IconName(This,prop) ) 

#define OLEFormat_get_IconPath(This,prop)	\
    ( (This)->lpVtbl -> get_IconPath(This,prop) ) 

#define OLEFormat_get_IconIndex(This,prop)	\
    ( (This)->lpVtbl -> get_IconIndex(This,prop) ) 

#define OLEFormat_put_IconIndex(This,prop)	\
    ( (This)->lpVtbl -> put_IconIndex(This,prop) ) 

#define OLEFormat_get_IconLabel(This,prop)	\
    ( (This)->lpVtbl -> get_IconLabel(This,prop) ) 

#define OLEFormat_put_IconLabel(This,prop)	\
    ( (This)->lpVtbl -> put_IconLabel(This,prop) ) 

#define OLEFormat_get_Label(This,prop)	\
    ( (This)->lpVtbl -> get_Label(This,prop) ) 

#define OLEFormat_get_Object(This,prop)	\
    ( (This)->lpVtbl -> get_Object(This,prop) ) 

#define OLEFormat_get_ProgID(This,prop)	\
    ( (This)->lpVtbl -> get_ProgID(This,prop) ) 

#define OLEFormat_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define OLEFormat_Edit(This)	\
    ( (This)->lpVtbl -> Edit(This) ) 

#define OLEFormat_Open(This)	\
    ( (This)->lpVtbl -> Open(This) ) 

#define OLEFormat_DoVerb(This,VerbIndex)	\
    ( (This)->lpVtbl -> DoVerb(This,VerbIndex) ) 

#define OLEFormat_ConvertTo(This,ClassType,DisplayAsIcon,IconFileName,IconIndex,IconLabel)	\
    ( (This)->lpVtbl -> ConvertTo(This,ClassType,DisplayAsIcon,IconFileName,IconIndex,IconLabel) ) 

#define OLEFormat_ActivateAs(This,ClassType)	\
    ( (This)->lpVtbl -> ActivateAs(This,ClassType) ) 

#define OLEFormat_get_PreserveFormattingOnUpdate(This,prop)	\
    ( (This)->lpVtbl -> get_PreserveFormattingOnUpdate(This,prop) ) 

#define OLEFormat_put_PreserveFormattingOnUpdate(This,prop)	\
    ( (This)->lpVtbl -> put_PreserveFormattingOnUpdate(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __OLEFormat_INTERFACE_DEFINED__ */


#ifndef __LinkFormat_INTERFACE_DEFINED__
#define __LinkFormat_INTERFACE_DEFINED__

/* interface LinkFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_LinkFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020931-0000-0000-C000-000000000046")
    LinkFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoUpdate( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoUpdate( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SourceName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SourcePath( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Locked( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Locked( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdLinkType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SourceFullName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SourceFullName( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SavePictureWithDocument( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SavePictureWithDocument( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE BreakLink( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LinkFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            LinkFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            LinkFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            LinkFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            LinkFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            LinkFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            LinkFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            LinkFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            LinkFormat * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            LinkFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            LinkFormat * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoUpdate )( 
            LinkFormat * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoUpdate )( 
            LinkFormat * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceName )( 
            LinkFormat * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourcePath )( 
            LinkFormat * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Locked )( 
            LinkFormat * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Locked )( 
            LinkFormat * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            LinkFormat * This,
            /* [retval][out] */ WdLinkType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceFullName )( 
            LinkFormat * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SourceFullName )( 
            LinkFormat * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SavePictureWithDocument )( 
            LinkFormat * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SavePictureWithDocument )( 
            LinkFormat * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BreakLink )( 
            LinkFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            LinkFormat * This);
        
        END_INTERFACE
    } LinkFormatVtbl;

    interface LinkFormat
    {
        CONST_VTBL struct LinkFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define LinkFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define LinkFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define LinkFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define LinkFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define LinkFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define LinkFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define LinkFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define LinkFormat_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define LinkFormat_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define LinkFormat_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define LinkFormat_get_AutoUpdate(This,prop)	\
    ( (This)->lpVtbl -> get_AutoUpdate(This,prop) ) 

#define LinkFormat_put_AutoUpdate(This,prop)	\
    ( (This)->lpVtbl -> put_AutoUpdate(This,prop) ) 

#define LinkFormat_get_SourceName(This,prop)	\
    ( (This)->lpVtbl -> get_SourceName(This,prop) ) 

#define LinkFormat_get_SourcePath(This,prop)	\
    ( (This)->lpVtbl -> get_SourcePath(This,prop) ) 

#define LinkFormat_get_Locked(This,prop)	\
    ( (This)->lpVtbl -> get_Locked(This,prop) ) 

#define LinkFormat_put_Locked(This,prop)	\
    ( (This)->lpVtbl -> put_Locked(This,prop) ) 

#define LinkFormat_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define LinkFormat_get_SourceFullName(This,prop)	\
    ( (This)->lpVtbl -> get_SourceFullName(This,prop) ) 

#define LinkFormat_put_SourceFullName(This,prop)	\
    ( (This)->lpVtbl -> put_SourceFullName(This,prop) ) 

#define LinkFormat_get_SavePictureWithDocument(This,prop)	\
    ( (This)->lpVtbl -> get_SavePictureWithDocument(This,prop) ) 

#define LinkFormat_put_SavePictureWithDocument(This,prop)	\
    ( (This)->lpVtbl -> put_SavePictureWithDocument(This,prop) ) 

#define LinkFormat_BreakLink(This)	\
    ( (This)->lpVtbl -> BreakLink(This) ) 

#define LinkFormat_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __LinkFormat_INTERFACE_DEFINED__ */


#ifndef ___OLEControl_INTERFACE_DEFINED__
#define ___OLEControl_INTERFACE_DEFINED__

/* interface _OLEControl */
/* [object][oleautomation][dual][hidden][helpcontext][version][uuid] */ 


EXTERN_C const IID IID__OLEControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209A4-0000-0000-C000-000000000046")
    _OLEControl : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Automation( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AltHTML( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_AltHTML( 
            /* [in] */ BSTR prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _OLEControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _OLEControl * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _OLEControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _OLEControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _OLEControl * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _OLEControl * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _OLEControl * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _OLEControl * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            _OLEControl * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            _OLEControl * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            _OLEControl * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            _OLEControl * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            _OLEControl * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            _OLEControl * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            _OLEControl * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            _OLEControl * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            _OLEControl * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            _OLEControl * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Automation )( 
            _OLEControl * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            _OLEControl * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            _OLEControl * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            _OLEControl * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            _OLEControl * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            _OLEControl * This);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AltHTML )( 
            _OLEControl * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AltHTML )( 
            _OLEControl * This,
            /* [in] */ BSTR prop);
        
        END_INTERFACE
    } _OLEControlVtbl;

    interface _OLEControl
    {
        CONST_VTBL struct _OLEControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _OLEControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _OLEControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _OLEControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _OLEControl_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _OLEControl_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _OLEControl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _OLEControl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _OLEControl_get_Left(This,prop)	\
    ( (This)->lpVtbl -> get_Left(This,prop) ) 

#define _OLEControl_put_Left(This,prop)	\
    ( (This)->lpVtbl -> put_Left(This,prop) ) 

#define _OLEControl_get_Top(This,prop)	\
    ( (This)->lpVtbl -> get_Top(This,prop) ) 

#define _OLEControl_put_Top(This,prop)	\
    ( (This)->lpVtbl -> put_Top(This,prop) ) 

#define _OLEControl_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define _OLEControl_put_Height(This,prop)	\
    ( (This)->lpVtbl -> put_Height(This,prop) ) 

#define _OLEControl_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define _OLEControl_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define _OLEControl_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define _OLEControl_put_Name(This,prop)	\
    ( (This)->lpVtbl -> put_Name(This,prop) ) 

#define _OLEControl_get_Automation(This,prop)	\
    ( (This)->lpVtbl -> get_Automation(This,prop) ) 

#define _OLEControl_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define _OLEControl_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define _OLEControl_Cut(This)	\
    ( (This)->lpVtbl -> Cut(This) ) 

#define _OLEControl_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define _OLEControl_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define _OLEControl_get_AltHTML(This,prop)	\
    ( (This)->lpVtbl -> get_AltHTML(This,prop) ) 

#define _OLEControl_put_AltHTML(This,prop)	\
    ( (This)->lpVtbl -> put_AltHTML(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___OLEControl_INTERFACE_DEFINED__ */


#ifndef __Fields_INTERFACE_DEFINED__
#define __Fields_INTERFACE_DEFINED__

/* interface Fields */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Fields;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020930-0000-0000-C000-000000000046")
    Fields : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Locked( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Locked( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Field **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToggleShowCodes( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Update( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Unlink( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UpdateSource( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Type,
            /* [optional][in] */ VARIANT *Text,
            /* [optional][in] */ VARIANT *PreserveFormatting,
            /* [retval][out] */ Field **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FieldsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Fields * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Fields * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Fields * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Fields * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Fields * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Fields * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Fields * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Fields * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Fields * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Fields * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Fields * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Locked )( 
            Fields * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Locked )( 
            Fields * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Fields * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Fields * This,
            /* [in] */ long Index,
            /* [retval][out] */ Field **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ToggleShowCodes )( 
            Fields * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            Fields * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Unlink )( 
            Fields * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UpdateSource )( 
            Fields * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Fields * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Type,
            /* [optional][in] */ VARIANT *Text,
            /* [optional][in] */ VARIANT *PreserveFormatting,
            /* [retval][out] */ Field **prop);
        
        END_INTERFACE
    } FieldsVtbl;

    interface Fields
    {
        CONST_VTBL struct FieldsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Fields_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Fields_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Fields_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Fields_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Fields_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Fields_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Fields_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Fields_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Fields_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Fields_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Fields_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Fields_get_Locked(This,prop)	\
    ( (This)->lpVtbl -> get_Locked(This,prop) ) 

#define Fields_put_Locked(This,prop)	\
    ( (This)->lpVtbl -> put_Locked(This,prop) ) 

#define Fields_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Fields_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Fields_ToggleShowCodes(This)	\
    ( (This)->lpVtbl -> ToggleShowCodes(This) ) 

#define Fields_Update(This,prop)	\
    ( (This)->lpVtbl -> Update(This,prop) ) 

#define Fields_Unlink(This)	\
    ( (This)->lpVtbl -> Unlink(This) ) 

#define Fields_UpdateSource(This)	\
    ( (This)->lpVtbl -> UpdateSource(This) ) 

#define Fields_Add(This,Range,Type,Text,PreserveFormatting,prop)	\
    ( (This)->lpVtbl -> Add(This,Range,Type,Text,PreserveFormatting,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Fields_INTERFACE_DEFINED__ */


#ifndef __Field_INTERFACE_DEFINED__
#define __Field_INTERFACE_DEFINED__

/* interface Field */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Field;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002092F-0000-0000-C000-000000000046")
    Field : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Code( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Code( 
            /* [in] */ Range *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdFieldType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Locked( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Locked( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ WdFieldKind *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Result( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Result( 
            /* [in] */ Range *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Data( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Data( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Next( 
            /* [retval][out] */ Field **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Previous( 
            /* [retval][out] */ Field **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowCodes( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowCodes( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinkFormat( 
            /* [retval][out] */ LinkFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OLEFormat( 
            /* [retval][out] */ OLEFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InlineShape( 
            /* [retval][out] */ InlineShape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Update( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Unlink( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UpdateSource( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DoClick( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Field * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Field * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Field * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Field * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Field * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Field * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Field * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Field * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Field * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Field * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Code )( 
            Field * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Code )( 
            Field * This,
            /* [in] */ Range *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Field * This,
            /* [retval][out] */ WdFieldType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Locked )( 
            Field * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Locked )( 
            Field * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            Field * This,
            /* [retval][out] */ WdFieldKind *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Result )( 
            Field * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Result )( 
            Field * This,
            /* [in] */ Range *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Data )( 
            Field * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Data )( 
            Field * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            Field * This,
            /* [retval][out] */ Field **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            Field * This,
            /* [retval][out] */ Field **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            Field * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowCodes )( 
            Field * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowCodes )( 
            Field * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinkFormat )( 
            Field * This,
            /* [retval][out] */ LinkFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OLEFormat )( 
            Field * This,
            /* [retval][out] */ OLEFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InlineShape )( 
            Field * This,
            /* [retval][out] */ InlineShape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Field * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            Field * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Unlink )( 
            Field * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UpdateSource )( 
            Field * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DoClick )( 
            Field * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            Field * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            Field * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Field * This);
        
        END_INTERFACE
    } FieldVtbl;

    interface Field
    {
        CONST_VTBL struct FieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Field_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Field_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Field_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Field_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Field_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Field_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Field_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Field_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Field_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Field_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Field_get_Code(This,prop)	\
    ( (This)->lpVtbl -> get_Code(This,prop) ) 

#define Field_put_Code(This,prop)	\
    ( (This)->lpVtbl -> put_Code(This,prop) ) 

#define Field_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define Field_get_Locked(This,prop)	\
    ( (This)->lpVtbl -> get_Locked(This,prop) ) 

#define Field_put_Locked(This,prop)	\
    ( (This)->lpVtbl -> put_Locked(This,prop) ) 

#define Field_get_Kind(This,prop)	\
    ( (This)->lpVtbl -> get_Kind(This,prop) ) 

#define Field_get_Result(This,prop)	\
    ( (This)->lpVtbl -> get_Result(This,prop) ) 

#define Field_put_Result(This,prop)	\
    ( (This)->lpVtbl -> put_Result(This,prop) ) 

#define Field_get_Data(This,prop)	\
    ( (This)->lpVtbl -> get_Data(This,prop) ) 

#define Field_put_Data(This,prop)	\
    ( (This)->lpVtbl -> put_Data(This,prop) ) 

#define Field_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define Field_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define Field_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define Field_get_ShowCodes(This,prop)	\
    ( (This)->lpVtbl -> get_ShowCodes(This,prop) ) 

#define Field_put_ShowCodes(This,prop)	\
    ( (This)->lpVtbl -> put_ShowCodes(This,prop) ) 

#define Field_get_LinkFormat(This,prop)	\
    ( (This)->lpVtbl -> get_LinkFormat(This,prop) ) 

#define Field_get_OLEFormat(This,prop)	\
    ( (This)->lpVtbl -> get_OLEFormat(This,prop) ) 

#define Field_get_InlineShape(This,prop)	\
    ( (This)->lpVtbl -> get_InlineShape(This,prop) ) 

#define Field_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define Field_Update(This,prop)	\
    ( (This)->lpVtbl -> Update(This,prop) ) 

#define Field_Unlink(This)	\
    ( (This)->lpVtbl -> Unlink(This) ) 

#define Field_UpdateSource(This)	\
    ( (This)->lpVtbl -> UpdateSource(This) ) 

#define Field_DoClick(This)	\
    ( (This)->lpVtbl -> DoClick(This) ) 

#define Field_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define Field_Cut(This)	\
    ( (This)->lpVtbl -> Cut(This) ) 

#define Field_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Field_INTERFACE_DEFINED__ */


#ifndef __Browser_INTERFACE_DEFINED__
#define __Browser_INTERFACE_DEFINED__

/* interface Browser */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Browser;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002092E-0000-0000-C000-000000000046")
    Browser : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Target( 
            /* [retval][out] */ WdBrowseTarget *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Target( 
            /* [in] */ WdBrowseTarget prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Next( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Previous( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BrowserVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Browser * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Browser * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Browser * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Browser * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Browser * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Browser * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Browser * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Browser * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Browser * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Browser * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Target )( 
            Browser * This,
            /* [retval][out] */ WdBrowseTarget *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Target )( 
            Browser * This,
            /* [in] */ WdBrowseTarget prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Next )( 
            Browser * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Previous )( 
            Browser * This);
        
        END_INTERFACE
    } BrowserVtbl;

    interface Browser
    {
        CONST_VTBL struct BrowserVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Browser_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Browser_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Browser_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Browser_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Browser_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Browser_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Browser_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Browser_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Browser_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Browser_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Browser_get_Target(This,prop)	\
    ( (This)->lpVtbl -> get_Target(This,prop) ) 

#define Browser_put_Target(This,prop)	\
    ( (This)->lpVtbl -> put_Target(This,prop) ) 

#define Browser_Next(This)	\
    ( (This)->lpVtbl -> Next(This) ) 

#define Browser_Previous(This)	\
    ( (This)->lpVtbl -> Previous(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Browser_INTERFACE_DEFINED__ */


#ifndef __Styles_INTERFACE_DEFINED__
#define __Styles_INTERFACE_DEFINED__

/* interface Styles */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Styles;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002092D-0000-0000-C000-000000000046")
    Styles : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Style **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Type,
            /* [retval][out] */ Style **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct StylesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Styles * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Styles * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Styles * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Styles * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Styles * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Styles * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Styles * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Styles * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Styles * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Styles * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Styles * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Styles * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Styles * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Style **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Styles * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Type,
            /* [retval][out] */ Style **prop);
        
        END_INTERFACE
    } StylesVtbl;

    interface Styles
    {
        CONST_VTBL struct StylesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Styles_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Styles_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Styles_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Styles_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Styles_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Styles_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Styles_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Styles_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Styles_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Styles_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Styles_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Styles_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Styles_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Styles_Add(This,Name,Type,prop)	\
    ( (This)->lpVtbl -> Add(This,Name,Type,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Styles_INTERFACE_DEFINED__ */


#ifndef __Style_INTERFACE_DEFINED__
#define __Style_INTERFACE_DEFINED__

/* interface Style */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Style;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002092C-0000-0000-C000-000000000046")
    Style : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NameLocal( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NameLocal( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BaseStyle( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BaseStyle( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdStyleType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BuiltIn( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NextParagraphStyle( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NextParagraphStyle( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InUse( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__ParagraphFormat( 
            /* [retval][out] */ _ParagraphFormat **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put__ParagraphFormat( 
            /* [in] */ _ParagraphFormat *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ /* external definition not present */ Font **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Font( 
            /* [in] */ /* external definition not present */ Font *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Frame( 
            /* [retval][out] */ Frame **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageID( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageID( 
            /* [in] */ WdLanguageID prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutomaticallyUpdate( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutomaticallyUpdate( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListTemplate( 
            /* [retval][out] */ ListTemplate **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListLevelNumber( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageIDFarEast( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageIDFarEast( 
            /* [in] */ WdLanguageID prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hidden( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Hidden( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE LinkToListTemplate( 
            /* [in] */ ListTemplate *ListTemplate,
            /* [optional][in] */ VARIANT *ListLevelNumber) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoProofing( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoProofing( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinkStyle( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LinkStyle( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visibility( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visibility( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoSpaceBetweenParagraphsOfSameStyle( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoSpaceBetweenParagraphsOfSameStyle( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Table( 
            /* [retval][out] */ TableStyle **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Locked( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Locked( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct StyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Style * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Style * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Style * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Style * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Style * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Style * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Style * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Style * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Style * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Style * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NameLocal )( 
            Style * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NameLocal )( 
            Style * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BaseStyle )( 
            Style * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BaseStyle )( 
            Style * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            Style * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Style * This,
            /* [retval][out] */ WdStyleType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BuiltIn )( 
            Style * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NextParagraphStyle )( 
            Style * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NextParagraphStyle )( 
            Style * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InUse )( 
            Style * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            Style * This,
            /* [retval][out] */ Shading **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            Style * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            Style * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__ParagraphFormat )( 
            Style * This,
            /* [retval][out] */ _ParagraphFormat **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put__ParagraphFormat )( 
            Style * This,
            /* [in] */ _ParagraphFormat *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            Style * This,
            /* [retval][out] */ /* external definition not present */ Font **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Font )( 
            Style * This,
            /* [in] */ /* external definition not present */ Font *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Frame )( 
            Style * This,
            /* [retval][out] */ Frame **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageID )( 
            Style * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageID )( 
            Style * This,
            /* [in] */ WdLanguageID prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutomaticallyUpdate )( 
            Style * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutomaticallyUpdate )( 
            Style * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListTemplate )( 
            Style * This,
            /* [retval][out] */ ListTemplate **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListLevelNumber )( 
            Style * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageIDFarEast )( 
            Style * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageIDFarEast )( 
            Style * This,
            /* [in] */ WdLanguageID prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hidden )( 
            Style * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Hidden )( 
            Style * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Style * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LinkToListTemplate )( 
            Style * This,
            /* [in] */ ListTemplate *ListTemplate,
            /* [optional][in] */ VARIANT *ListLevelNumber);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoProofing )( 
            Style * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoProofing )( 
            Style * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinkStyle )( 
            Style * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinkStyle )( 
            Style * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visibility )( 
            Style * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visibility )( 
            Style * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoSpaceBetweenParagraphsOfSameStyle )( 
            Style * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoSpaceBetweenParagraphsOfSameStyle )( 
            Style * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Table )( 
            Style * This,
            /* [retval][out] */ TableStyle **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Locked )( 
            Style * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Locked )( 
            Style * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } StyleVtbl;

    interface Style
    {
        CONST_VTBL struct StyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Style_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Style_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Style_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Style_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Style_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Style_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Style_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Style_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Style_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Style_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Style_get_NameLocal(This,prop)	\
    ( (This)->lpVtbl -> get_NameLocal(This,prop) ) 

#define Style_put_NameLocal(This,prop)	\
    ( (This)->lpVtbl -> put_NameLocal(This,prop) ) 

#define Style_get_BaseStyle(This,prop)	\
    ( (This)->lpVtbl -> get_BaseStyle(This,prop) ) 

#define Style_put_BaseStyle(This,prop)	\
    ( (This)->lpVtbl -> put_BaseStyle(This,prop) ) 

#define Style_get_Description(This,prop)	\
    ( (This)->lpVtbl -> get_Description(This,prop) ) 

#define Style_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define Style_get_BuiltIn(This,prop)	\
    ( (This)->lpVtbl -> get_BuiltIn(This,prop) ) 

#define Style_get_NextParagraphStyle(This,prop)	\
    ( (This)->lpVtbl -> get_NextParagraphStyle(This,prop) ) 

#define Style_put_NextParagraphStyle(This,prop)	\
    ( (This)->lpVtbl -> put_NextParagraphStyle(This,prop) ) 

#define Style_get_InUse(This,prop)	\
    ( (This)->lpVtbl -> get_InUse(This,prop) ) 

#define Style_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define Style_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define Style_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define Style_get__ParagraphFormat(This,prop)	\
    ( (This)->lpVtbl -> get__ParagraphFormat(This,prop) ) 

#define Style_put__ParagraphFormat(This,prop)	\
    ( (This)->lpVtbl -> put__ParagraphFormat(This,prop) ) 

#define Style_get_Font(This,prop)	\
    ( (This)->lpVtbl -> get_Font(This,prop) ) 

#define Style_put_Font(This,prop)	\
    ( (This)->lpVtbl -> put_Font(This,prop) ) 

#define Style_get_Frame(This,prop)	\
    ( (This)->lpVtbl -> get_Frame(This,prop) ) 

#define Style_get_LanguageID(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageID(This,prop) ) 

#define Style_put_LanguageID(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageID(This,prop) ) 

#define Style_get_AutomaticallyUpdate(This,prop)	\
    ( (This)->lpVtbl -> get_AutomaticallyUpdate(This,prop) ) 

#define Style_put_AutomaticallyUpdate(This,prop)	\
    ( (This)->lpVtbl -> put_AutomaticallyUpdate(This,prop) ) 

#define Style_get_ListTemplate(This,prop)	\
    ( (This)->lpVtbl -> get_ListTemplate(This,prop) ) 

#define Style_get_ListLevelNumber(This,prop)	\
    ( (This)->lpVtbl -> get_ListLevelNumber(This,prop) ) 

#define Style_get_LanguageIDFarEast(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageIDFarEast(This,prop) ) 

#define Style_put_LanguageIDFarEast(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageIDFarEast(This,prop) ) 

#define Style_get_Hidden(This,prop)	\
    ( (This)->lpVtbl -> get_Hidden(This,prop) ) 

#define Style_put_Hidden(This,prop)	\
    ( (This)->lpVtbl -> put_Hidden(This,prop) ) 

#define Style_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Style_LinkToListTemplate(This,ListTemplate,ListLevelNumber)	\
    ( (This)->lpVtbl -> LinkToListTemplate(This,ListTemplate,ListLevelNumber) ) 

#define Style_get_NoProofing(This,prop)	\
    ( (This)->lpVtbl -> get_NoProofing(This,prop) ) 

#define Style_put_NoProofing(This,prop)	\
    ( (This)->lpVtbl -> put_NoProofing(This,prop) ) 

#define Style_get_LinkStyle(This,prop)	\
    ( (This)->lpVtbl -> get_LinkStyle(This,prop) ) 

#define Style_put_LinkStyle(This,prop)	\
    ( (This)->lpVtbl -> put_LinkStyle(This,prop) ) 

#define Style_get_Visibility(This,prop)	\
    ( (This)->lpVtbl -> get_Visibility(This,prop) ) 

#define Style_put_Visibility(This,prop)	\
    ( (This)->lpVtbl -> put_Visibility(This,prop) ) 

#define Style_get_NoSpaceBetweenParagraphsOfSameStyle(This,prop)	\
    ( (This)->lpVtbl -> get_NoSpaceBetweenParagraphsOfSameStyle(This,prop) ) 

#define Style_put_NoSpaceBetweenParagraphsOfSameStyle(This,prop)	\
    ( (This)->lpVtbl -> put_NoSpaceBetweenParagraphsOfSameStyle(This,prop) ) 

#define Style_get_Table(This,prop)	\
    ( (This)->lpVtbl -> get_Table(This,prop) ) 

#define Style_get_Locked(This,prop)	\
    ( (This)->lpVtbl -> get_Locked(This,prop) ) 

#define Style_put_Locked(This,prop)	\
    ( (This)->lpVtbl -> put_Locked(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Style_INTERFACE_DEFINED__ */


#ifndef __Frames_INTERFACE_DEFINED__
#define __Frames_INTERFACE_DEFINED__

/* interface Frames */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Frames;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002092B-0000-0000-C000-000000000046")
    Frames : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Frame **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ Range *Range,
            /* [retval][out] */ Frame **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FramesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Frames * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Frames * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Frames * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Frames * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Frames * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Frames * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Frames * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Frames * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Frames * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Frames * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Frames * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Frames * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Frames * This,
            /* [in] */ long Index,
            /* [retval][out] */ Frame **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Frames * This,
            /* [in] */ Range *Range,
            /* [retval][out] */ Frame **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Frames * This);
        
        END_INTERFACE
    } FramesVtbl;

    interface Frames
    {
        CONST_VTBL struct FramesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Frames_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Frames_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Frames_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Frames_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Frames_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Frames_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Frames_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Frames_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Frames_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Frames_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Frames_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Frames_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Frames_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Frames_Add(This,Range,prop)	\
    ( (This)->lpVtbl -> Add(This,Range,prop) ) 

#define Frames_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Frames_INTERFACE_DEFINED__ */


#ifndef __Frame_INTERFACE_DEFINED__
#define __Frame_INTERFACE_DEFINED__

/* interface Frame */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Frame;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002092A-0000-0000-C000-000000000046")
    Frame : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeightRule( 
            /* [retval][out] */ WdFrameSizeRule *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HeightRule( 
            /* [in] */ WdFrameSizeRule prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WidthRule( 
            /* [retval][out] */ WdFrameSizeRule *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WidthRule( 
            /* [in] */ WdFrameSizeRule prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalDistanceFromText( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalDistanceFromText( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalPosition( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalPosition( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LockAnchor( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LockAnchor( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelativeHorizontalPosition( 
            /* [retval][out] */ WdRelativeHorizontalPosition *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RelativeHorizontalPosition( 
            /* [in] */ WdRelativeHorizontalPosition prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelativeVerticalPosition( 
            /* [retval][out] */ WdRelativeVerticalPosition *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RelativeVerticalPosition( 
            /* [in] */ WdRelativeVerticalPosition prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalDistanceFromText( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalDistanceFromText( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalPosition( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalPosition( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextWrap( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextWrap( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FrameVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Frame * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Frame * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Frame * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Frame * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Frame * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Frame * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Frame * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Frame * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Frame * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Frame * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeightRule )( 
            Frame * This,
            /* [retval][out] */ WdFrameSizeRule *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HeightRule )( 
            Frame * This,
            /* [in] */ WdFrameSizeRule prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WidthRule )( 
            Frame * This,
            /* [retval][out] */ WdFrameSizeRule *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WidthRule )( 
            Frame * This,
            /* [in] */ WdFrameSizeRule prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalDistanceFromText )( 
            Frame * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalDistanceFromText )( 
            Frame * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Frame * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            Frame * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalPosition )( 
            Frame * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalPosition )( 
            Frame * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LockAnchor )( 
            Frame * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LockAnchor )( 
            Frame * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelativeHorizontalPosition )( 
            Frame * This,
            /* [retval][out] */ WdRelativeHorizontalPosition *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RelativeHorizontalPosition )( 
            Frame * This,
            /* [in] */ WdRelativeHorizontalPosition prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelativeVerticalPosition )( 
            Frame * This,
            /* [retval][out] */ WdRelativeVerticalPosition *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RelativeVerticalPosition )( 
            Frame * This,
            /* [in] */ WdRelativeVerticalPosition prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalDistanceFromText )( 
            Frame * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalDistanceFromText )( 
            Frame * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalPosition )( 
            Frame * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalPosition )( 
            Frame * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Frame * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            Frame * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextWrap )( 
            Frame * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextWrap )( 
            Frame * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            Frame * This,
            /* [retval][out] */ Shading **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            Frame * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            Frame * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Frame * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Frame * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Frame * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            Frame * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            Frame * This);
        
        END_INTERFACE
    } FrameVtbl;

    interface Frame
    {
        CONST_VTBL struct FrameVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Frame_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Frame_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Frame_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Frame_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Frame_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Frame_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Frame_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Frame_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Frame_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Frame_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Frame_get_HeightRule(This,prop)	\
    ( (This)->lpVtbl -> get_HeightRule(This,prop) ) 

#define Frame_put_HeightRule(This,prop)	\
    ( (This)->lpVtbl -> put_HeightRule(This,prop) ) 

#define Frame_get_WidthRule(This,prop)	\
    ( (This)->lpVtbl -> get_WidthRule(This,prop) ) 

#define Frame_put_WidthRule(This,prop)	\
    ( (This)->lpVtbl -> put_WidthRule(This,prop) ) 

#define Frame_get_HorizontalDistanceFromText(This,prop)	\
    ( (This)->lpVtbl -> get_HorizontalDistanceFromText(This,prop) ) 

#define Frame_put_HorizontalDistanceFromText(This,prop)	\
    ( (This)->lpVtbl -> put_HorizontalDistanceFromText(This,prop) ) 

#define Frame_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define Frame_put_Height(This,prop)	\
    ( (This)->lpVtbl -> put_Height(This,prop) ) 

#define Frame_get_HorizontalPosition(This,prop)	\
    ( (This)->lpVtbl -> get_HorizontalPosition(This,prop) ) 

#define Frame_put_HorizontalPosition(This,prop)	\
    ( (This)->lpVtbl -> put_HorizontalPosition(This,prop) ) 

#define Frame_get_LockAnchor(This,prop)	\
    ( (This)->lpVtbl -> get_LockAnchor(This,prop) ) 

#define Frame_put_LockAnchor(This,prop)	\
    ( (This)->lpVtbl -> put_LockAnchor(This,prop) ) 

#define Frame_get_RelativeHorizontalPosition(This,prop)	\
    ( (This)->lpVtbl -> get_RelativeHorizontalPosition(This,prop) ) 

#define Frame_put_RelativeHorizontalPosition(This,prop)	\
    ( (This)->lpVtbl -> put_RelativeHorizontalPosition(This,prop) ) 

#define Frame_get_RelativeVerticalPosition(This,prop)	\
    ( (This)->lpVtbl -> get_RelativeVerticalPosition(This,prop) ) 

#define Frame_put_RelativeVerticalPosition(This,prop)	\
    ( (This)->lpVtbl -> put_RelativeVerticalPosition(This,prop) ) 

#define Frame_get_VerticalDistanceFromText(This,prop)	\
    ( (This)->lpVtbl -> get_VerticalDistanceFromText(This,prop) ) 

#define Frame_put_VerticalDistanceFromText(This,prop)	\
    ( (This)->lpVtbl -> put_VerticalDistanceFromText(This,prop) ) 

#define Frame_get_VerticalPosition(This,prop)	\
    ( (This)->lpVtbl -> get_VerticalPosition(This,prop) ) 

#define Frame_put_VerticalPosition(This,prop)	\
    ( (This)->lpVtbl -> put_VerticalPosition(This,prop) ) 

#define Frame_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define Frame_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define Frame_get_TextWrap(This,prop)	\
    ( (This)->lpVtbl -> get_TextWrap(This,prop) ) 

#define Frame_put_TextWrap(This,prop)	\
    ( (This)->lpVtbl -> put_TextWrap(This,prop) ) 

#define Frame_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define Frame_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define Frame_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define Frame_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Frame_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Frame_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define Frame_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define Frame_Cut(This)	\
    ( (This)->lpVtbl -> Cut(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Frame_INTERFACE_DEFINED__ */


#ifndef __FormFields_INTERFACE_DEFINED__
#define __FormFields_INTERFACE_DEFINED__

/* interface FormFields */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_FormFields;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020929-0000-0000-C000-000000000046")
    FormFields : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shaded( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Shaded( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ FormField **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ Range *Range,
            /* [in] */ WdFieldType Type,
            /* [retval][out] */ FormField **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FormFieldsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FormFields * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FormFields * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FormFields * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FormFields * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FormFields * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FormFields * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FormFields * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            FormFields * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            FormFields * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FormFields * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            FormFields * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shaded )( 
            FormFields * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Shaded )( 
            FormFields * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            FormFields * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            FormFields * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ FormField **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            FormFields * This,
            /* [in] */ Range *Range,
            /* [in] */ WdFieldType Type,
            /* [retval][out] */ FormField **prop);
        
        END_INTERFACE
    } FormFieldsVtbl;

    interface FormFields
    {
        CONST_VTBL struct FormFieldsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FormFields_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FormFields_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FormFields_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FormFields_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FormFields_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FormFields_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FormFields_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FormFields_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define FormFields_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define FormFields_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define FormFields_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define FormFields_get_Shaded(This,prop)	\
    ( (This)->lpVtbl -> get_Shaded(This,prop) ) 

#define FormFields_put_Shaded(This,prop)	\
    ( (This)->lpVtbl -> put_Shaded(This,prop) ) 

#define FormFields_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define FormFields_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define FormFields_Add(This,Range,Type,prop)	\
    ( (This)->lpVtbl -> Add(This,Range,Type,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FormFields_INTERFACE_DEFINED__ */


#ifndef __FormField_INTERFACE_DEFINED__
#define __FormField_INTERFACE_DEFINED__

/* interface FormField */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_FormField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020928-0000-0000-C000-000000000046")
    FormField : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdFieldType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EntryMacro( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EntryMacro( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExitMacro( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExitMacro( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OwnHelp( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OwnHelp( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OwnStatus( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OwnStatus( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HelpText( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HelpText( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StatusText( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StatusText( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Result( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Result( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextInput( 
            /* [retval][out] */ TextInput **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CheckBox( 
            /* [retval][out] */ CheckBox **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DropDown( 
            /* [retval][out] */ DropDown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Next( 
            /* [retval][out] */ FormField **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Previous( 
            /* [retval][out] */ FormField **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CalculateOnExit( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CalculateOnExit( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FormFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FormField * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FormField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FormField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FormField * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FormField * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FormField * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FormField * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            FormField * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            FormField * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FormField * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            FormField * This,
            /* [retval][out] */ WdFieldType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            FormField * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            FormField * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntryMacro )( 
            FormField * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntryMacro )( 
            FormField * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExitMacro )( 
            FormField * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExitMacro )( 
            FormField * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnHelp )( 
            FormField * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OwnHelp )( 
            FormField * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnStatus )( 
            FormField * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OwnStatus )( 
            FormField * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HelpText )( 
            FormField * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HelpText )( 
            FormField * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StatusText )( 
            FormField * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StatusText )( 
            FormField * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            FormField * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            FormField * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Result )( 
            FormField * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Result )( 
            FormField * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextInput )( 
            FormField * This,
            /* [retval][out] */ TextInput **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CheckBox )( 
            FormField * This,
            /* [retval][out] */ CheckBox **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DropDown )( 
            FormField * This,
            /* [retval][out] */ DropDown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            FormField * This,
            /* [retval][out] */ FormField **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            FormField * This,
            /* [retval][out] */ FormField **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CalculateOnExit )( 
            FormField * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CalculateOnExit )( 
            FormField * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            FormField * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            FormField * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            FormField * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            FormField * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            FormField * This);
        
        END_INTERFACE
    } FormFieldVtbl;

    interface FormField
    {
        CONST_VTBL struct FormFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FormField_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FormField_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FormField_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FormField_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FormField_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FormField_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FormField_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FormField_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define FormField_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define FormField_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define FormField_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define FormField_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define FormField_put_Name(This,prop)	\
    ( (This)->lpVtbl -> put_Name(This,prop) ) 

#define FormField_get_EntryMacro(This,prop)	\
    ( (This)->lpVtbl -> get_EntryMacro(This,prop) ) 

#define FormField_put_EntryMacro(This,prop)	\
    ( (This)->lpVtbl -> put_EntryMacro(This,prop) ) 

#define FormField_get_ExitMacro(This,prop)	\
    ( (This)->lpVtbl -> get_ExitMacro(This,prop) ) 

#define FormField_put_ExitMacro(This,prop)	\
    ( (This)->lpVtbl -> put_ExitMacro(This,prop) ) 

#define FormField_get_OwnHelp(This,prop)	\
    ( (This)->lpVtbl -> get_OwnHelp(This,prop) ) 

#define FormField_put_OwnHelp(This,prop)	\
    ( (This)->lpVtbl -> put_OwnHelp(This,prop) ) 

#define FormField_get_OwnStatus(This,prop)	\
    ( (This)->lpVtbl -> get_OwnStatus(This,prop) ) 

#define FormField_put_OwnStatus(This,prop)	\
    ( (This)->lpVtbl -> put_OwnStatus(This,prop) ) 

#define FormField_get_HelpText(This,prop)	\
    ( (This)->lpVtbl -> get_HelpText(This,prop) ) 

#define FormField_put_HelpText(This,prop)	\
    ( (This)->lpVtbl -> put_HelpText(This,prop) ) 

#define FormField_get_StatusText(This,prop)	\
    ( (This)->lpVtbl -> get_StatusText(This,prop) ) 

#define FormField_put_StatusText(This,prop)	\
    ( (This)->lpVtbl -> put_StatusText(This,prop) ) 

#define FormField_get_Enabled(This,prop)	\
    ( (This)->lpVtbl -> get_Enabled(This,prop) ) 

#define FormField_put_Enabled(This,prop)	\
    ( (This)->lpVtbl -> put_Enabled(This,prop) ) 

#define FormField_get_Result(This,prop)	\
    ( (This)->lpVtbl -> get_Result(This,prop) ) 

#define FormField_put_Result(This,prop)	\
    ( (This)->lpVtbl -> put_Result(This,prop) ) 

#define FormField_get_TextInput(This,prop)	\
    ( (This)->lpVtbl -> get_TextInput(This,prop) ) 

#define FormField_get_CheckBox(This,prop)	\
    ( (This)->lpVtbl -> get_CheckBox(This,prop) ) 

#define FormField_get_DropDown(This,prop)	\
    ( (This)->lpVtbl -> get_DropDown(This,prop) ) 

#define FormField_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define FormField_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define FormField_get_CalculateOnExit(This,prop)	\
    ( (This)->lpVtbl -> get_CalculateOnExit(This,prop) ) 

#define FormField_put_CalculateOnExit(This,prop)	\
    ( (This)->lpVtbl -> put_CalculateOnExit(This,prop) ) 

#define FormField_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define FormField_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define FormField_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define FormField_Cut(This)	\
    ( (This)->lpVtbl -> Cut(This) ) 

#define FormField_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FormField_INTERFACE_DEFINED__ */


#ifndef __TextInput_INTERFACE_DEFINED__
#define __TextInput_INTERFACE_DEFINED__

/* interface TextInput */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TextInput;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020927-0000-0000-C000-000000000046")
    TextInput : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Valid( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Default( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Default( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdTextFormFieldType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditType( 
            /* [in] */ WdTextFormFieldType Type,
            /* [optional][in] */ VARIANT *Default,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *Enabled) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextInputVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextInput * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextInput * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextInput * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextInput * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextInput * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextInput * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextInput * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TextInput * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TextInput * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextInput * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Valid )( 
            TextInput * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Default )( 
            TextInput * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Default )( 
            TextInput * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            TextInput * This,
            /* [retval][out] */ WdTextFormFieldType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            TextInput * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            TextInput * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            TextInput * This,
            /* [in] */ long prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            TextInput * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EditType )( 
            TextInput * This,
            /* [in] */ WdTextFormFieldType Type,
            /* [optional][in] */ VARIANT *Default,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *Enabled);
        
        END_INTERFACE
    } TextInputVtbl;

    interface TextInput
    {
        CONST_VTBL struct TextInputVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextInput_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TextInput_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TextInput_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TextInput_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TextInput_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TextInput_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TextInput_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TextInput_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TextInput_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TextInput_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TextInput_get_Valid(This,prop)	\
    ( (This)->lpVtbl -> get_Valid(This,prop) ) 

#define TextInput_get_Default(This,prop)	\
    ( (This)->lpVtbl -> get_Default(This,prop) ) 

#define TextInput_put_Default(This,prop)	\
    ( (This)->lpVtbl -> put_Default(This,prop) ) 

#define TextInput_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define TextInput_get_Format(This,prop)	\
    ( (This)->lpVtbl -> get_Format(This,prop) ) 

#define TextInput_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define TextInput_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define TextInput_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define TextInput_EditType(This,Type,Default,Format,Enabled)	\
    ( (This)->lpVtbl -> EditType(This,Type,Default,Format,Enabled) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TextInput_INTERFACE_DEFINED__ */


#ifndef __CheckBox_INTERFACE_DEFINED__
#define __CheckBox_INTERFACE_DEFINED__

/* interface CheckBox */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_CheckBox;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020926-0000-0000-C000-000000000046")
    CheckBox : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Valid( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoSize( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoSize( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Size( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Default( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Default( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CheckBoxVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CheckBox * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CheckBox * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CheckBox * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CheckBox * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CheckBox * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CheckBox * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CheckBox * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            CheckBox * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            CheckBox * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CheckBox * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Valid )( 
            CheckBox * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSize )( 
            CheckBox * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoSize )( 
            CheckBox * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            CheckBox * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Size )( 
            CheckBox * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Default )( 
            CheckBox * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Default )( 
            CheckBox * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            CheckBox * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            CheckBox * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } CheckBoxVtbl;

    interface CheckBox
    {
        CONST_VTBL struct CheckBoxVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CheckBox_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CheckBox_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CheckBox_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CheckBox_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CheckBox_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CheckBox_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CheckBox_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CheckBox_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define CheckBox_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define CheckBox_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define CheckBox_get_Valid(This,prop)	\
    ( (This)->lpVtbl -> get_Valid(This,prop) ) 

#define CheckBox_get_AutoSize(This,prop)	\
    ( (This)->lpVtbl -> get_AutoSize(This,prop) ) 

#define CheckBox_put_AutoSize(This,prop)	\
    ( (This)->lpVtbl -> put_AutoSize(This,prop) ) 

#define CheckBox_get_Size(This,prop)	\
    ( (This)->lpVtbl -> get_Size(This,prop) ) 

#define CheckBox_put_Size(This,prop)	\
    ( (This)->lpVtbl -> put_Size(This,prop) ) 

#define CheckBox_get_Default(This,prop)	\
    ( (This)->lpVtbl -> get_Default(This,prop) ) 

#define CheckBox_put_Default(This,prop)	\
    ( (This)->lpVtbl -> put_Default(This,prop) ) 

#define CheckBox_get_Value(This,prop)	\
    ( (This)->lpVtbl -> get_Value(This,prop) ) 

#define CheckBox_put_Value(This,prop)	\
    ( (This)->lpVtbl -> put_Value(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CheckBox_INTERFACE_DEFINED__ */


#ifndef __DropDown_INTERFACE_DEFINED__
#define __DropDown_INTERFACE_DEFINED__

/* interface DropDown */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_DropDown;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020925-0000-0000-C000-000000000046")
    DropDown : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Valid( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Default( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Default( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListEntries( 
            /* [retval][out] */ ListEntries **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DropDownVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DropDown * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DropDown * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DropDown * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DropDown * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DropDown * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DropDown * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DropDown * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            DropDown * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            DropDown * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DropDown * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Valid )( 
            DropDown * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Default )( 
            DropDown * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Default )( 
            DropDown * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            DropDown * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            DropDown * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListEntries )( 
            DropDown * This,
            /* [retval][out] */ ListEntries **prop);
        
        END_INTERFACE
    } DropDownVtbl;

    interface DropDown
    {
        CONST_VTBL struct DropDownVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DropDown_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DropDown_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DropDown_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DropDown_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DropDown_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DropDown_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DropDown_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DropDown_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define DropDown_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define DropDown_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define DropDown_get_Valid(This,prop)	\
    ( (This)->lpVtbl -> get_Valid(This,prop) ) 

#define DropDown_get_Default(This,prop)	\
    ( (This)->lpVtbl -> get_Default(This,prop) ) 

#define DropDown_put_Default(This,prop)	\
    ( (This)->lpVtbl -> put_Default(This,prop) ) 

#define DropDown_get_Value(This,prop)	\
    ( (This)->lpVtbl -> get_Value(This,prop) ) 

#define DropDown_put_Value(This,prop)	\
    ( (This)->lpVtbl -> put_Value(This,prop) ) 

#define DropDown_get_ListEntries(This,prop)	\
    ( (This)->lpVtbl -> get_ListEntries(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DropDown_INTERFACE_DEFINED__ */


#ifndef __ListEntries_INTERFACE_DEFINED__
#define __ListEntries_INTERFACE_DEFINED__

/* interface ListEntries */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ListEntries;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020924-0000-0000-C000-000000000046")
    ListEntries : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ ListEntry **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Index,
            /* [retval][out] */ ListEntry **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListEntriesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ListEntries * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ListEntries * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ListEntries * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ListEntries * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ListEntries * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ListEntries * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ListEntries * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ListEntries * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ListEntries * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ListEntries * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ListEntries * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ListEntries * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ListEntries * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ ListEntry **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ListEntries * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Index,
            /* [retval][out] */ ListEntry **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ListEntries * This);
        
        END_INTERFACE
    } ListEntriesVtbl;

    interface ListEntries
    {
        CONST_VTBL struct ListEntriesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ListEntries_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ListEntries_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ListEntries_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ListEntries_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ListEntries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ListEntries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ListEntries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ListEntries_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ListEntries_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ListEntries_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ListEntries_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define ListEntries_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define ListEntries_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define ListEntries_Add(This,Name,Index,prop)	\
    ( (This)->lpVtbl -> Add(This,Name,Index,prop) ) 

#define ListEntries_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ListEntries_INTERFACE_DEFINED__ */


#ifndef __ListEntry_INTERFACE_DEFINED__
#define __ListEntry_INTERFACE_DEFINED__

/* interface ListEntry */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ListEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020923-0000-0000-C000-000000000046")
    ListEntry : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ListEntry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ListEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ListEntry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ListEntry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ListEntry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ListEntry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ListEntry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ListEntry * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ListEntry * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ListEntry * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            ListEntry * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ListEntry * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ListEntry * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ListEntry * This);
        
        END_INTERFACE
    } ListEntryVtbl;

    interface ListEntry
    {
        CONST_VTBL struct ListEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ListEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ListEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ListEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ListEntry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ListEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ListEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ListEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ListEntry_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ListEntry_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ListEntry_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ListEntry_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define ListEntry_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define ListEntry_put_Name(This,prop)	\
    ( (This)->lpVtbl -> put_Name(This,prop) ) 

#define ListEntry_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ListEntry_INTERFACE_DEFINED__ */


#ifndef __TablesOfFigures_INTERFACE_DEFINED__
#define __TablesOfFigures_INTERFACE_DEFINED__

/* interface TablesOfFigures */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TablesOfFigures;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020922-0000-0000-C000-000000000046")
    TablesOfFigures : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ WdTofFormat *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Format( 
            /* [in] */ WdTofFormat prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ TableOfFigures **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AddOld( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Caption,
            /* [optional][in] */ VARIANT *IncludeLabel,
            /* [optional][in] */ VARIANT *UseHeadingStyles,
            /* [optional][in] */ VARIANT *UpperHeadingLevel,
            /* [optional][in] */ VARIANT *LowerHeadingLevel,
            /* [optional][in] */ VARIANT *UseFields,
            /* [optional][in] */ VARIANT *TableID,
            /* [optional][in] */ VARIANT *RightAlignPageNumbers,
            /* [optional][in] */ VARIANT *IncludePageNumbers,
            /* [optional][in] */ VARIANT *AddedStyles,
            /* [retval][out] */ TableOfFigures **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MarkEntry( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Entry,
            /* [optional][in] */ VARIANT *EntryAutoText,
            /* [optional][in] */ VARIANT *TableID,
            /* [optional][in] */ VARIANT *Level,
            /* [retval][out] */ Field **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Caption,
            /* [optional][in] */ VARIANT *IncludeLabel,
            /* [optional][in] */ VARIANT *UseHeadingStyles,
            /* [optional][in] */ VARIANT *UpperHeadingLevel,
            /* [optional][in] */ VARIANT *LowerHeadingLevel,
            /* [optional][in] */ VARIANT *UseFields,
            /* [optional][in] */ VARIANT *TableID,
            /* [optional][in] */ VARIANT *RightAlignPageNumbers,
            /* [optional][in] */ VARIANT *IncludePageNumbers,
            /* [optional][in] */ VARIANT *AddedStyles,
            /* [optional][in] */ VARIANT *UseHyperlinks,
            /* [optional][in] */ VARIANT *HidePageNumbersInWeb,
            /* [retval][out] */ TableOfFigures **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TablesOfFiguresVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TablesOfFigures * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TablesOfFigures * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TablesOfFigures * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TablesOfFigures * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TablesOfFigures * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TablesOfFigures * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TablesOfFigures * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TablesOfFigures * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TablesOfFigures * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TablesOfFigures * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            TablesOfFigures * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TablesOfFigures * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            TablesOfFigures * This,
            /* [retval][out] */ WdTofFormat *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Format )( 
            TablesOfFigures * This,
            /* [in] */ WdTofFormat prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TablesOfFigures * This,
            /* [in] */ long Index,
            /* [retval][out] */ TableOfFigures **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AddOld )( 
            TablesOfFigures * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Caption,
            /* [optional][in] */ VARIANT *IncludeLabel,
            /* [optional][in] */ VARIANT *UseHeadingStyles,
            /* [optional][in] */ VARIANT *UpperHeadingLevel,
            /* [optional][in] */ VARIANT *LowerHeadingLevel,
            /* [optional][in] */ VARIANT *UseFields,
            /* [optional][in] */ VARIANT *TableID,
            /* [optional][in] */ VARIANT *RightAlignPageNumbers,
            /* [optional][in] */ VARIANT *IncludePageNumbers,
            /* [optional][in] */ VARIANT *AddedStyles,
            /* [retval][out] */ TableOfFigures **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MarkEntry )( 
            TablesOfFigures * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Entry,
            /* [optional][in] */ VARIANT *EntryAutoText,
            /* [optional][in] */ VARIANT *TableID,
            /* [optional][in] */ VARIANT *Level,
            /* [retval][out] */ Field **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            TablesOfFigures * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Caption,
            /* [optional][in] */ VARIANT *IncludeLabel,
            /* [optional][in] */ VARIANT *UseHeadingStyles,
            /* [optional][in] */ VARIANT *UpperHeadingLevel,
            /* [optional][in] */ VARIANT *LowerHeadingLevel,
            /* [optional][in] */ VARIANT *UseFields,
            /* [optional][in] */ VARIANT *TableID,
            /* [optional][in] */ VARIANT *RightAlignPageNumbers,
            /* [optional][in] */ VARIANT *IncludePageNumbers,
            /* [optional][in] */ VARIANT *AddedStyles,
            /* [optional][in] */ VARIANT *UseHyperlinks,
            /* [optional][in] */ VARIANT *HidePageNumbersInWeb,
            /* [retval][out] */ TableOfFigures **prop);
        
        END_INTERFACE
    } TablesOfFiguresVtbl;

    interface TablesOfFigures
    {
        CONST_VTBL struct TablesOfFiguresVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TablesOfFigures_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TablesOfFigures_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TablesOfFigures_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TablesOfFigures_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TablesOfFigures_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TablesOfFigures_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TablesOfFigures_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TablesOfFigures_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TablesOfFigures_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TablesOfFigures_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TablesOfFigures_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define TablesOfFigures_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define TablesOfFigures_get_Format(This,prop)	\
    ( (This)->lpVtbl -> get_Format(This,prop) ) 

#define TablesOfFigures_put_Format(This,prop)	\
    ( (This)->lpVtbl -> put_Format(This,prop) ) 

#define TablesOfFigures_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define TablesOfFigures_AddOld(This,Range,Caption,IncludeLabel,UseHeadingStyles,UpperHeadingLevel,LowerHeadingLevel,UseFields,TableID,RightAlignPageNumbers,IncludePageNumbers,AddedStyles,prop)	\
    ( (This)->lpVtbl -> AddOld(This,Range,Caption,IncludeLabel,UseHeadingStyles,UpperHeadingLevel,LowerHeadingLevel,UseFields,TableID,RightAlignPageNumbers,IncludePageNumbers,AddedStyles,prop) ) 

#define TablesOfFigures_MarkEntry(This,Range,Entry,EntryAutoText,TableID,Level,prop)	\
    ( (This)->lpVtbl -> MarkEntry(This,Range,Entry,EntryAutoText,TableID,Level,prop) ) 

#define TablesOfFigures_Add(This,Range,Caption,IncludeLabel,UseHeadingStyles,UpperHeadingLevel,LowerHeadingLevel,UseFields,TableID,RightAlignPageNumbers,IncludePageNumbers,AddedStyles,UseHyperlinks,HidePageNumbersInWeb,prop)	\
    ( (This)->lpVtbl -> Add(This,Range,Caption,IncludeLabel,UseHeadingStyles,UpperHeadingLevel,LowerHeadingLevel,UseFields,TableID,RightAlignPageNumbers,IncludePageNumbers,AddedStyles,UseHyperlinks,HidePageNumbersInWeb,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TablesOfFigures_INTERFACE_DEFINED__ */


#ifndef __TableOfFigures_INTERFACE_DEFINED__
#define __TableOfFigures_INTERFACE_DEFINED__

/* interface TableOfFigures */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TableOfFigures;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020921-0000-0000-C000-000000000046")
    TableOfFigures : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Caption( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Caption( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludeLabel( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludeLabel( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RightAlignPageNumbers( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RightAlignPageNumbers( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseHeadingStyles( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseHeadingStyles( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LowerHeadingLevel( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LowerHeadingLevel( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UpperHeadingLevel( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UpperHeadingLevel( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludePageNumbers( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludePageNumbers( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseFields( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseFields( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TableID( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TableID( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeadingStyles( 
            /* [retval][out] */ HeadingStyles **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TabLeader( 
            /* [retval][out] */ WdTabLeader *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TabLeader( 
            /* [in] */ WdTabLeader prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UpdatePageNumbers( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseHyperlinks( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseHyperlinks( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HidePageNumbersInWeb( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HidePageNumbersInWeb( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TableOfFiguresVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TableOfFigures * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TableOfFigures * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TableOfFigures * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TableOfFigures * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TableOfFigures * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TableOfFigures * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TableOfFigures * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TableOfFigures * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TableOfFigures * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TableOfFigures * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Caption )( 
            TableOfFigures * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Caption )( 
            TableOfFigures * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeLabel )( 
            TableOfFigures * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeLabel )( 
            TableOfFigures * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RightAlignPageNumbers )( 
            TableOfFigures * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RightAlignPageNumbers )( 
            TableOfFigures * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseHeadingStyles )( 
            TableOfFigures * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseHeadingStyles )( 
            TableOfFigures * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LowerHeadingLevel )( 
            TableOfFigures * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LowerHeadingLevel )( 
            TableOfFigures * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpperHeadingLevel )( 
            TableOfFigures * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpperHeadingLevel )( 
            TableOfFigures * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludePageNumbers )( 
            TableOfFigures * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludePageNumbers )( 
            TableOfFigures * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            TableOfFigures * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseFields )( 
            TableOfFigures * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseFields )( 
            TableOfFigures * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TableID )( 
            TableOfFigures * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TableID )( 
            TableOfFigures * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeadingStyles )( 
            TableOfFigures * This,
            /* [retval][out] */ HeadingStyles **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabLeader )( 
            TableOfFigures * This,
            /* [retval][out] */ WdTabLeader *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TabLeader )( 
            TableOfFigures * This,
            /* [in] */ WdTabLeader prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            TableOfFigures * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UpdatePageNumbers )( 
            TableOfFigures * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            TableOfFigures * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseHyperlinks )( 
            TableOfFigures * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseHyperlinks )( 
            TableOfFigures * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HidePageNumbersInWeb )( 
            TableOfFigures * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HidePageNumbersInWeb )( 
            TableOfFigures * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } TableOfFiguresVtbl;

    interface TableOfFigures
    {
        CONST_VTBL struct TableOfFiguresVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TableOfFigures_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TableOfFigures_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TableOfFigures_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TableOfFigures_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TableOfFigures_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TableOfFigures_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TableOfFigures_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TableOfFigures_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TableOfFigures_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TableOfFigures_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TableOfFigures_get_Caption(This,prop)	\
    ( (This)->lpVtbl -> get_Caption(This,prop) ) 

#define TableOfFigures_put_Caption(This,prop)	\
    ( (This)->lpVtbl -> put_Caption(This,prop) ) 

#define TableOfFigures_get_IncludeLabel(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeLabel(This,prop) ) 

#define TableOfFigures_put_IncludeLabel(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeLabel(This,prop) ) 

#define TableOfFigures_get_RightAlignPageNumbers(This,prop)	\
    ( (This)->lpVtbl -> get_RightAlignPageNumbers(This,prop) ) 

#define TableOfFigures_put_RightAlignPageNumbers(This,prop)	\
    ( (This)->lpVtbl -> put_RightAlignPageNumbers(This,prop) ) 

#define TableOfFigures_get_UseHeadingStyles(This,prop)	\
    ( (This)->lpVtbl -> get_UseHeadingStyles(This,prop) ) 

#define TableOfFigures_put_UseHeadingStyles(This,prop)	\
    ( (This)->lpVtbl -> put_UseHeadingStyles(This,prop) ) 

#define TableOfFigures_get_LowerHeadingLevel(This,prop)	\
    ( (This)->lpVtbl -> get_LowerHeadingLevel(This,prop) ) 

#define TableOfFigures_put_LowerHeadingLevel(This,prop)	\
    ( (This)->lpVtbl -> put_LowerHeadingLevel(This,prop) ) 

#define TableOfFigures_get_UpperHeadingLevel(This,prop)	\
    ( (This)->lpVtbl -> get_UpperHeadingLevel(This,prop) ) 

#define TableOfFigures_put_UpperHeadingLevel(This,prop)	\
    ( (This)->lpVtbl -> put_UpperHeadingLevel(This,prop) ) 

#define TableOfFigures_get_IncludePageNumbers(This,prop)	\
    ( (This)->lpVtbl -> get_IncludePageNumbers(This,prop) ) 

#define TableOfFigures_put_IncludePageNumbers(This,prop)	\
    ( (This)->lpVtbl -> put_IncludePageNumbers(This,prop) ) 

#define TableOfFigures_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define TableOfFigures_get_UseFields(This,prop)	\
    ( (This)->lpVtbl -> get_UseFields(This,prop) ) 

#define TableOfFigures_put_UseFields(This,prop)	\
    ( (This)->lpVtbl -> put_UseFields(This,prop) ) 

#define TableOfFigures_get_TableID(This,prop)	\
    ( (This)->lpVtbl -> get_TableID(This,prop) ) 

#define TableOfFigures_put_TableID(This,prop)	\
    ( (This)->lpVtbl -> put_TableID(This,prop) ) 

#define TableOfFigures_get_HeadingStyles(This,prop)	\
    ( (This)->lpVtbl -> get_HeadingStyles(This,prop) ) 

#define TableOfFigures_get_TabLeader(This,prop)	\
    ( (This)->lpVtbl -> get_TabLeader(This,prop) ) 

#define TableOfFigures_put_TabLeader(This,prop)	\
    ( (This)->lpVtbl -> put_TabLeader(This,prop) ) 

#define TableOfFigures_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define TableOfFigures_UpdatePageNumbers(This)	\
    ( (This)->lpVtbl -> UpdatePageNumbers(This) ) 

#define TableOfFigures_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define TableOfFigures_get_UseHyperlinks(This,prop)	\
    ( (This)->lpVtbl -> get_UseHyperlinks(This,prop) ) 

#define TableOfFigures_put_UseHyperlinks(This,prop)	\
    ( (This)->lpVtbl -> put_UseHyperlinks(This,prop) ) 

#define TableOfFigures_get_HidePageNumbersInWeb(This,prop)	\
    ( (This)->lpVtbl -> get_HidePageNumbersInWeb(This,prop) ) 

#define TableOfFigures_put_HidePageNumbersInWeb(This,prop)	\
    ( (This)->lpVtbl -> put_HidePageNumbersInWeb(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TableOfFigures_INTERFACE_DEFINED__ */


#ifndef __MailMerge_INTERFACE_DEFINED__
#define __MailMerge_INTERFACE_DEFINED__

/* interface MailMerge */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_MailMerge;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020920-0000-0000-C000-000000000046")
    MailMerge : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MainDocumentType( 
            /* [retval][out] */ WdMailMergeMainDocType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MainDocumentType( 
            /* [in] */ WdMailMergeMainDocType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_State( 
            /* [retval][out] */ WdMailMergeState *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Destination( 
            /* [retval][out] */ WdMailMergeDestination *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Destination( 
            /* [in] */ WdMailMergeDestination prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DataSource( 
            /* [retval][out] */ MailMergeDataSource **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fields( 
            /* [retval][out] */ MailMergeFields **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ViewMailMergeFieldCodes( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ViewMailMergeFieldCodes( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressBlankLines( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressBlankLines( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MailAsAttachment( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MailAsAttachment( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MailAddressFieldName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MailAddressFieldName( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MailSubject( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MailSubject( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateDataSource( 
            /* [optional][in] */ VARIANT *Name,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *HeaderRecord,
            /* [optional][in] */ VARIANT *MSQuery,
            /* [optional][in] */ VARIANT *SQLStatement,
            /* [optional][in] */ VARIANT *SQLStatement1,
            /* [optional][in] */ VARIANT *Connection,
            /* [optional][in] */ VARIANT *LinkToSource) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateHeaderSource( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *HeaderRecord) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE OpenDataSource2000( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *LinkToSource,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [optional][in] */ VARIANT *Connection,
            /* [optional][in] */ VARIANT *SQLStatement,
            /* [optional][in] */ VARIANT *SQLStatement1) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE OpenHeaderSource2000( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Execute( 
            /* [optional][in] */ VARIANT *Pause) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Check( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditDataSource( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditHeaderSource( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditMainDocument( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE UseAddressBook( 
            /* [in] */ BSTR Type) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HighlightMergeFields( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HighlightMergeFields( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MailFormat( 
            /* [retval][out] */ WdMailMergeMailFormat *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MailFormat( 
            /* [in] */ WdMailMergeMailFormat prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowSendToCustom( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowSendToCustom( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WizardState( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WizardState( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenDataSource( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *LinkToSource,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [optional][in] */ VARIANT *Connection,
            /* [optional][in] */ VARIANT *SQLStatement,
            /* [optional][in] */ VARIANT *SQLStatement1,
            /* [optional][in] */ VARIANT *OpenExclusive,
            /* [optional][in] */ VARIANT *SubType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenHeaderSource( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [optional][in] */ VARIANT *OpenExclusive) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ShowWizard( 
            /* [in] */ VARIANT *InitialState,
            /* [optional][in] */ VARIANT *ShowDocumentStep,
            /* [optional][in] */ VARIANT *ShowTemplateStep,
            /* [optional][in] */ VARIANT *ShowDataStep,
            /* [optional][in] */ VARIANT *ShowWriteStep,
            /* [optional][in] */ VARIANT *ShowPreviewStep,
            /* [optional][in] */ VARIANT *ShowMergeStep) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MailMergeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MailMerge * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MailMerge * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MailMerge * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MailMerge * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MailMerge * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MailMerge * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MailMerge * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            MailMerge * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            MailMerge * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MailMerge * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MainDocumentType )( 
            MailMerge * This,
            /* [retval][out] */ WdMailMergeMainDocType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MainDocumentType )( 
            MailMerge * This,
            /* [in] */ WdMailMergeMainDocType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_State )( 
            MailMerge * This,
            /* [retval][out] */ WdMailMergeState *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Destination )( 
            MailMerge * This,
            /* [retval][out] */ WdMailMergeDestination *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Destination )( 
            MailMerge * This,
            /* [in] */ WdMailMergeDestination prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DataSource )( 
            MailMerge * This,
            /* [retval][out] */ MailMergeDataSource **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fields )( 
            MailMerge * This,
            /* [retval][out] */ MailMergeFields **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ViewMailMergeFieldCodes )( 
            MailMerge * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ViewMailMergeFieldCodes )( 
            MailMerge * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressBlankLines )( 
            MailMerge * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressBlankLines )( 
            MailMerge * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MailAsAttachment )( 
            MailMerge * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MailAsAttachment )( 
            MailMerge * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MailAddressFieldName )( 
            MailMerge * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MailAddressFieldName )( 
            MailMerge * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MailSubject )( 
            MailMerge * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MailSubject )( 
            MailMerge * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateDataSource )( 
            MailMerge * This,
            /* [optional][in] */ VARIANT *Name,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *HeaderRecord,
            /* [optional][in] */ VARIANT *MSQuery,
            /* [optional][in] */ VARIANT *SQLStatement,
            /* [optional][in] */ VARIANT *SQLStatement1,
            /* [optional][in] */ VARIANT *Connection,
            /* [optional][in] */ VARIANT *LinkToSource);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateHeaderSource )( 
            MailMerge * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *HeaderRecord);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *OpenDataSource2000 )( 
            MailMerge * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *LinkToSource,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [optional][in] */ VARIANT *Connection,
            /* [optional][in] */ VARIANT *SQLStatement,
            /* [optional][in] */ VARIANT *SQLStatement1);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *OpenHeaderSource2000 )( 
            MailMerge * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Execute )( 
            MailMerge * This,
            /* [optional][in] */ VARIANT *Pause);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Check )( 
            MailMerge * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EditDataSource )( 
            MailMerge * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EditHeaderSource )( 
            MailMerge * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EditMainDocument )( 
            MailMerge * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *UseAddressBook )( 
            MailMerge * This,
            /* [in] */ BSTR Type);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HighlightMergeFields )( 
            MailMerge * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HighlightMergeFields )( 
            MailMerge * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MailFormat )( 
            MailMerge * This,
            /* [retval][out] */ WdMailMergeMailFormat *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MailFormat )( 
            MailMerge * This,
            /* [in] */ WdMailMergeMailFormat prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowSendToCustom )( 
            MailMerge * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowSendToCustom )( 
            MailMerge * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WizardState )( 
            MailMerge * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WizardState )( 
            MailMerge * This,
            /* [in] */ long prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenDataSource )( 
            MailMerge * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *LinkToSource,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [optional][in] */ VARIANT *Connection,
            /* [optional][in] */ VARIANT *SQLStatement,
            /* [optional][in] */ VARIANT *SQLStatement1,
            /* [optional][in] */ VARIANT *OpenExclusive,
            /* [optional][in] */ VARIANT *SubType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenHeaderSource )( 
            MailMerge * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *AddToRecentFiles,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [optional][in] */ VARIANT *OpenExclusive);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ShowWizard )( 
            MailMerge * This,
            /* [in] */ VARIANT *InitialState,
            /* [optional][in] */ VARIANT *ShowDocumentStep,
            /* [optional][in] */ VARIANT *ShowTemplateStep,
            /* [optional][in] */ VARIANT *ShowDataStep,
            /* [optional][in] */ VARIANT *ShowWriteStep,
            /* [optional][in] */ VARIANT *ShowPreviewStep,
            /* [optional][in] */ VARIANT *ShowMergeStep);
        
        END_INTERFACE
    } MailMergeVtbl;

    interface MailMerge
    {
        CONST_VTBL struct MailMergeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MailMerge_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MailMerge_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MailMerge_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MailMerge_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MailMerge_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MailMerge_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MailMerge_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MailMerge_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define MailMerge_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define MailMerge_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define MailMerge_get_MainDocumentType(This,prop)	\
    ( (This)->lpVtbl -> get_MainDocumentType(This,prop) ) 

#define MailMerge_put_MainDocumentType(This,prop)	\
    ( (This)->lpVtbl -> put_MainDocumentType(This,prop) ) 

#define MailMerge_get_State(This,prop)	\
    ( (This)->lpVtbl -> get_State(This,prop) ) 

#define MailMerge_get_Destination(This,prop)	\
    ( (This)->lpVtbl -> get_Destination(This,prop) ) 

#define MailMerge_put_Destination(This,prop)	\
    ( (This)->lpVtbl -> put_Destination(This,prop) ) 

#define MailMerge_get_DataSource(This,prop)	\
    ( (This)->lpVtbl -> get_DataSource(This,prop) ) 

#define MailMerge_get_Fields(This,prop)	\
    ( (This)->lpVtbl -> get_Fields(This,prop) ) 

#define MailMerge_get_ViewMailMergeFieldCodes(This,prop)	\
    ( (This)->lpVtbl -> get_ViewMailMergeFieldCodes(This,prop) ) 

#define MailMerge_put_ViewMailMergeFieldCodes(This,prop)	\
    ( (This)->lpVtbl -> put_ViewMailMergeFieldCodes(This,prop) ) 

#define MailMerge_get_SuppressBlankLines(This,prop)	\
    ( (This)->lpVtbl -> get_SuppressBlankLines(This,prop) ) 

#define MailMerge_put_SuppressBlankLines(This,prop)	\
    ( (This)->lpVtbl -> put_SuppressBlankLines(This,prop) ) 

#define MailMerge_get_MailAsAttachment(This,prop)	\
    ( (This)->lpVtbl -> get_MailAsAttachment(This,prop) ) 

#define MailMerge_put_MailAsAttachment(This,prop)	\
    ( (This)->lpVtbl -> put_MailAsAttachment(This,prop) ) 

#define MailMerge_get_MailAddressFieldName(This,prop)	\
    ( (This)->lpVtbl -> get_MailAddressFieldName(This,prop) ) 

#define MailMerge_put_MailAddressFieldName(This,prop)	\
    ( (This)->lpVtbl -> put_MailAddressFieldName(This,prop) ) 

#define MailMerge_get_MailSubject(This,prop)	\
    ( (This)->lpVtbl -> get_MailSubject(This,prop) ) 

#define MailMerge_put_MailSubject(This,prop)	\
    ( (This)->lpVtbl -> put_MailSubject(This,prop) ) 

#define MailMerge_CreateDataSource(This,Name,PasswordDocument,WritePasswordDocument,HeaderRecord,MSQuery,SQLStatement,SQLStatement1,Connection,LinkToSource)	\
    ( (This)->lpVtbl -> CreateDataSource(This,Name,PasswordDocument,WritePasswordDocument,HeaderRecord,MSQuery,SQLStatement,SQLStatement1,Connection,LinkToSource) ) 

#define MailMerge_CreateHeaderSource(This,Name,PasswordDocument,WritePasswordDocument,HeaderRecord)	\
    ( (This)->lpVtbl -> CreateHeaderSource(This,Name,PasswordDocument,WritePasswordDocument,HeaderRecord) ) 

#define MailMerge_OpenDataSource2000(This,Name,Format,ConfirmConversions,ReadOnly,LinkToSource,AddToRecentFiles,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate,Connection,SQLStatement,SQLStatement1)	\
    ( (This)->lpVtbl -> OpenDataSource2000(This,Name,Format,ConfirmConversions,ReadOnly,LinkToSource,AddToRecentFiles,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate,Connection,SQLStatement,SQLStatement1) ) 

#define MailMerge_OpenHeaderSource2000(This,Name,Format,ConfirmConversions,ReadOnly,AddToRecentFiles,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate)	\
    ( (This)->lpVtbl -> OpenHeaderSource2000(This,Name,Format,ConfirmConversions,ReadOnly,AddToRecentFiles,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate) ) 

#define MailMerge_Execute(This,Pause)	\
    ( (This)->lpVtbl -> Execute(This,Pause) ) 

#define MailMerge_Check(This)	\
    ( (This)->lpVtbl -> Check(This) ) 

#define MailMerge_EditDataSource(This)	\
    ( (This)->lpVtbl -> EditDataSource(This) ) 

#define MailMerge_EditHeaderSource(This)	\
    ( (This)->lpVtbl -> EditHeaderSource(This) ) 

#define MailMerge_EditMainDocument(This)	\
    ( (This)->lpVtbl -> EditMainDocument(This) ) 

#define MailMerge_UseAddressBook(This,Type)	\
    ( (This)->lpVtbl -> UseAddressBook(This,Type) ) 

#define MailMerge_get_HighlightMergeFields(This,prop)	\
    ( (This)->lpVtbl -> get_HighlightMergeFields(This,prop) ) 

#define MailMerge_put_HighlightMergeFields(This,prop)	\
    ( (This)->lpVtbl -> put_HighlightMergeFields(This,prop) ) 

#define MailMerge_get_MailFormat(This,prop)	\
    ( (This)->lpVtbl -> get_MailFormat(This,prop) ) 

#define MailMerge_put_MailFormat(This,prop)	\
    ( (This)->lpVtbl -> put_MailFormat(This,prop) ) 

#define MailMerge_get_ShowSendToCustom(This,prop)	\
    ( (This)->lpVtbl -> get_ShowSendToCustom(This,prop) ) 

#define MailMerge_put_ShowSendToCustom(This,prop)	\
    ( (This)->lpVtbl -> put_ShowSendToCustom(This,prop) ) 

#define MailMerge_get_WizardState(This,prop)	\
    ( (This)->lpVtbl -> get_WizardState(This,prop) ) 

#define MailMerge_put_WizardState(This,prop)	\
    ( (This)->lpVtbl -> put_WizardState(This,prop) ) 

#define MailMerge_OpenDataSource(This,Name,Format,ConfirmConversions,ReadOnly,LinkToSource,AddToRecentFiles,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate,Connection,SQLStatement,SQLStatement1,OpenExclusive,SubType)	\
    ( (This)->lpVtbl -> OpenDataSource(This,Name,Format,ConfirmConversions,ReadOnly,LinkToSource,AddToRecentFiles,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate,Connection,SQLStatement,SQLStatement1,OpenExclusive,SubType) ) 

#define MailMerge_OpenHeaderSource(This,Name,Format,ConfirmConversions,ReadOnly,AddToRecentFiles,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate,OpenExclusive)	\
    ( (This)->lpVtbl -> OpenHeaderSource(This,Name,Format,ConfirmConversions,ReadOnly,AddToRecentFiles,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate,OpenExclusive) ) 

#define MailMerge_ShowWizard(This,InitialState,ShowDocumentStep,ShowTemplateStep,ShowDataStep,ShowWriteStep,ShowPreviewStep,ShowMergeStep)	\
    ( (This)->lpVtbl -> ShowWizard(This,InitialState,ShowDocumentStep,ShowTemplateStep,ShowDataStep,ShowWriteStep,ShowPreviewStep,ShowMergeStep) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MailMerge_INTERFACE_DEFINED__ */


#ifndef __MailMergeFields_INTERFACE_DEFINED__
#define __MailMergeFields_INTERFACE_DEFINED__

/* interface MailMergeFields */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_MailMergeFields;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002091F-0000-0000-C000-000000000046")
    MailMergeFields : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ MailMergeField **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ Range *Range,
            /* [in] */ BSTR Name,
            /* [retval][out] */ MailMergeField **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAsk( 
            /* [in] */ Range *Range,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Prompt,
            /* [optional][in] */ VARIANT *DefaultAskText,
            /* [optional][in] */ VARIANT *AskOnce,
            /* [retval][out] */ MailMergeField **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFillIn( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Prompt,
            /* [optional][in] */ VARIANT *DefaultFillInText,
            /* [optional][in] */ VARIANT *AskOnce,
            /* [retval][out] */ MailMergeField **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddIf( 
            /* [in] */ Range *Range,
            /* [in] */ BSTR MergeField,
            /* [in] */ WdMailMergeComparison Comparison,
            /* [optional][in] */ VARIANT *CompareTo,
            /* [optional][in] */ VARIANT *TrueAutoText,
            /* [optional][in] */ VARIANT *TrueText,
            /* [optional][in] */ VARIANT *FalseAutoText,
            /* [optional][in] */ VARIANT *FalseText,
            /* [retval][out] */ MailMergeField **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddMergeRec( 
            /* [in] */ Range *Range,
            /* [retval][out] */ MailMergeField **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddMergeSeq( 
            /* [in] */ Range *Range,
            /* [retval][out] */ MailMergeField **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNext( 
            /* [in] */ Range *Range,
            /* [retval][out] */ MailMergeField **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNextIf( 
            /* [in] */ Range *Range,
            /* [in] */ BSTR MergeField,
            /* [in] */ WdMailMergeComparison Comparison,
            /* [optional][in] */ VARIANT *CompareTo,
            /* [retval][out] */ MailMergeField **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddSet( 
            /* [in] */ Range *Range,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *ValueText,
            /* [optional][in] */ VARIANT *ValueAutoText,
            /* [retval][out] */ MailMergeField **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddSkipIf( 
            /* [in] */ Range *Range,
            /* [in] */ BSTR MergeField,
            /* [in] */ WdMailMergeComparison Comparison,
            /* [optional][in] */ VARIANT *CompareTo,
            /* [retval][out] */ MailMergeField **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MailMergeFieldsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MailMergeFields * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MailMergeFields * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MailMergeFields * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MailMergeFields * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MailMergeFields * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MailMergeFields * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MailMergeFields * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            MailMergeFields * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            MailMergeFields * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MailMergeFields * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            MailMergeFields * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            MailMergeFields * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            MailMergeFields * This,
            /* [in] */ long Index,
            /* [retval][out] */ MailMergeField **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            MailMergeFields * This,
            /* [in] */ Range *Range,
            /* [in] */ BSTR Name,
            /* [retval][out] */ MailMergeField **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAsk )( 
            MailMergeFields * This,
            /* [in] */ Range *Range,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Prompt,
            /* [optional][in] */ VARIANT *DefaultAskText,
            /* [optional][in] */ VARIANT *AskOnce,
            /* [retval][out] */ MailMergeField **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFillIn )( 
            MailMergeFields * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Prompt,
            /* [optional][in] */ VARIANT *DefaultFillInText,
            /* [optional][in] */ VARIANT *AskOnce,
            /* [retval][out] */ MailMergeField **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddIf )( 
            MailMergeFields * This,
            /* [in] */ Range *Range,
            /* [in] */ BSTR MergeField,
            /* [in] */ WdMailMergeComparison Comparison,
            /* [optional][in] */ VARIANT *CompareTo,
            /* [optional][in] */ VARIANT *TrueAutoText,
            /* [optional][in] */ VARIANT *TrueText,
            /* [optional][in] */ VARIANT *FalseAutoText,
            /* [optional][in] */ VARIANT *FalseText,
            /* [retval][out] */ MailMergeField **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddMergeRec )( 
            MailMergeFields * This,
            /* [in] */ Range *Range,
            /* [retval][out] */ MailMergeField **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddMergeSeq )( 
            MailMergeFields * This,
            /* [in] */ Range *Range,
            /* [retval][out] */ MailMergeField **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNext )( 
            MailMergeFields * This,
            /* [in] */ Range *Range,
            /* [retval][out] */ MailMergeField **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNextIf )( 
            MailMergeFields * This,
            /* [in] */ Range *Range,
            /* [in] */ BSTR MergeField,
            /* [in] */ WdMailMergeComparison Comparison,
            /* [optional][in] */ VARIANT *CompareTo,
            /* [retval][out] */ MailMergeField **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddSet )( 
            MailMergeFields * This,
            /* [in] */ Range *Range,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *ValueText,
            /* [optional][in] */ VARIANT *ValueAutoText,
            /* [retval][out] */ MailMergeField **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddSkipIf )( 
            MailMergeFields * This,
            /* [in] */ Range *Range,
            /* [in] */ BSTR MergeField,
            /* [in] */ WdMailMergeComparison Comparison,
            /* [optional][in] */ VARIANT *CompareTo,
            /* [retval][out] */ MailMergeField **prop);
        
        END_INTERFACE
    } MailMergeFieldsVtbl;

    interface MailMergeFields
    {
        CONST_VTBL struct MailMergeFieldsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MailMergeFields_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MailMergeFields_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MailMergeFields_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MailMergeFields_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MailMergeFields_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MailMergeFields_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MailMergeFields_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MailMergeFields_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define MailMergeFields_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define MailMergeFields_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define MailMergeFields_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define MailMergeFields_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define MailMergeFields_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define MailMergeFields_Add(This,Range,Name,prop)	\
    ( (This)->lpVtbl -> Add(This,Range,Name,prop) ) 

#define MailMergeFields_AddAsk(This,Range,Name,Prompt,DefaultAskText,AskOnce,prop)	\
    ( (This)->lpVtbl -> AddAsk(This,Range,Name,Prompt,DefaultAskText,AskOnce,prop) ) 

#define MailMergeFields_AddFillIn(This,Range,Prompt,DefaultFillInText,AskOnce,prop)	\
    ( (This)->lpVtbl -> AddFillIn(This,Range,Prompt,DefaultFillInText,AskOnce,prop) ) 

#define MailMergeFields_AddIf(This,Range,MergeField,Comparison,CompareTo,TrueAutoText,TrueText,FalseAutoText,FalseText,prop)	\
    ( (This)->lpVtbl -> AddIf(This,Range,MergeField,Comparison,CompareTo,TrueAutoText,TrueText,FalseAutoText,FalseText,prop) ) 

#define MailMergeFields_AddMergeRec(This,Range,prop)	\
    ( (This)->lpVtbl -> AddMergeRec(This,Range,prop) ) 

#define MailMergeFields_AddMergeSeq(This,Range,prop)	\
    ( (This)->lpVtbl -> AddMergeSeq(This,Range,prop) ) 

#define MailMergeFields_AddNext(This,Range,prop)	\
    ( (This)->lpVtbl -> AddNext(This,Range,prop) ) 

#define MailMergeFields_AddNextIf(This,Range,MergeField,Comparison,CompareTo,prop)	\
    ( (This)->lpVtbl -> AddNextIf(This,Range,MergeField,Comparison,CompareTo,prop) ) 

#define MailMergeFields_AddSet(This,Range,Name,ValueText,ValueAutoText,prop)	\
    ( (This)->lpVtbl -> AddSet(This,Range,Name,ValueText,ValueAutoText,prop) ) 

#define MailMergeFields_AddSkipIf(This,Range,MergeField,Comparison,CompareTo,prop)	\
    ( (This)->lpVtbl -> AddSkipIf(This,Range,MergeField,Comparison,CompareTo,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MailMergeFields_INTERFACE_DEFINED__ */


#ifndef __MailMergeField_INTERFACE_DEFINED__
#define __MailMergeField_INTERFACE_DEFINED__

/* interface MailMergeField */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_MailMergeField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002091E-0000-0000-C000-000000000046")
    MailMergeField : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdFieldType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Locked( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Locked( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Code( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Code( 
            /* [in] */ Range *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Next( 
            /* [retval][out] */ MailMergeField **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Previous( 
            /* [retval][out] */ MailMergeField **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MailMergeFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MailMergeField * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MailMergeField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MailMergeField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MailMergeField * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MailMergeField * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MailMergeField * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MailMergeField * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            MailMergeField * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            MailMergeField * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MailMergeField * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            MailMergeField * This,
            /* [retval][out] */ WdFieldType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Locked )( 
            MailMergeField * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Locked )( 
            MailMergeField * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Code )( 
            MailMergeField * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Code )( 
            MailMergeField * This,
            /* [in] */ Range *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            MailMergeField * This,
            /* [retval][out] */ MailMergeField **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            MailMergeField * This,
            /* [retval][out] */ MailMergeField **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            MailMergeField * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            MailMergeField * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            MailMergeField * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            MailMergeField * This);
        
        END_INTERFACE
    } MailMergeFieldVtbl;

    interface MailMergeField
    {
        CONST_VTBL struct MailMergeFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MailMergeField_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MailMergeField_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MailMergeField_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MailMergeField_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MailMergeField_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MailMergeField_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MailMergeField_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MailMergeField_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define MailMergeField_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define MailMergeField_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define MailMergeField_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define MailMergeField_get_Locked(This,prop)	\
    ( (This)->lpVtbl -> get_Locked(This,prop) ) 

#define MailMergeField_put_Locked(This,prop)	\
    ( (This)->lpVtbl -> put_Locked(This,prop) ) 

#define MailMergeField_get_Code(This,prop)	\
    ( (This)->lpVtbl -> get_Code(This,prop) ) 

#define MailMergeField_put_Code(This,prop)	\
    ( (This)->lpVtbl -> put_Code(This,prop) ) 

#define MailMergeField_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define MailMergeField_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define MailMergeField_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define MailMergeField_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define MailMergeField_Cut(This)	\
    ( (This)->lpVtbl -> Cut(This) ) 

#define MailMergeField_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MailMergeField_INTERFACE_DEFINED__ */


#ifndef __MailMergeDataSource_INTERFACE_DEFINED__
#define __MailMergeDataSource_INTERFACE_DEFINED__

/* interface MailMergeDataSource */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_MailMergeDataSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002091D-0000-0000-C000-000000000046")
    MailMergeDataSource : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeaderSourceName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdMailMergeDataSource *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeaderSourceType( 
            /* [retval][out] */ WdMailMergeDataSource *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConnectString( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_QueryString( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_QueryString( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveRecord( 
            /* [retval][out] */ WdMailMergeActiveRecord *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ActiveRecord( 
            /* [in] */ WdMailMergeActiveRecord prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstRecord( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FirstRecord( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LastRecord( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LastRecord( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FieldNames( 
            /* [retval][out] */ MailMergeFieldNames **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DataFields( 
            /* [retval][out] */ MailMergeDataFields **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE FindRecord2000( 
            /* [in] */ BSTR FindText,
            /* [in] */ BSTR Field,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RecordCount( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Included( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Included( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InvalidAddress( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InvalidAddress( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InvalidComments( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InvalidComments( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MappedDataFields( 
            /* [retval][out] */ MappedDataFields **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TableName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindRecord( 
            /* [in] */ BSTR FindText,
            /* [optional][in] */ VARIANT *Field,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetAllIncludedFlags( 
            /* [in] */ VARIANT_BOOL Included) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetAllErrorFlags( 
            /* [in] */ VARIANT_BOOL Invalid,
            /* [in] */ BSTR InvalidComment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MailMergeDataSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MailMergeDataSource * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MailMergeDataSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MailMergeDataSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MailMergeDataSource * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MailMergeDataSource * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MailMergeDataSource * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MailMergeDataSource * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            MailMergeDataSource * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            MailMergeDataSource * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MailMergeDataSource * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            MailMergeDataSource * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeaderSourceName )( 
            MailMergeDataSource * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            MailMergeDataSource * This,
            /* [retval][out] */ WdMailMergeDataSource *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeaderSourceType )( 
            MailMergeDataSource * This,
            /* [retval][out] */ WdMailMergeDataSource *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectString )( 
            MailMergeDataSource * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_QueryString )( 
            MailMergeDataSource * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_QueryString )( 
            MailMergeDataSource * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveRecord )( 
            MailMergeDataSource * This,
            /* [retval][out] */ WdMailMergeActiveRecord *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ActiveRecord )( 
            MailMergeDataSource * This,
            /* [in] */ WdMailMergeActiveRecord prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstRecord )( 
            MailMergeDataSource * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FirstRecord )( 
            MailMergeDataSource * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastRecord )( 
            MailMergeDataSource * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LastRecord )( 
            MailMergeDataSource * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FieldNames )( 
            MailMergeDataSource * This,
            /* [retval][out] */ MailMergeFieldNames **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DataFields )( 
            MailMergeDataSource * This,
            /* [retval][out] */ MailMergeDataFields **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *FindRecord2000 )( 
            MailMergeDataSource * This,
            /* [in] */ BSTR FindText,
            /* [in] */ BSTR Field,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecordCount )( 
            MailMergeDataSource * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Included )( 
            MailMergeDataSource * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Included )( 
            MailMergeDataSource * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InvalidAddress )( 
            MailMergeDataSource * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InvalidAddress )( 
            MailMergeDataSource * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InvalidComments )( 
            MailMergeDataSource * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InvalidComments )( 
            MailMergeDataSource * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MappedDataFields )( 
            MailMergeDataSource * This,
            /* [retval][out] */ MappedDataFields **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TableName )( 
            MailMergeDataSource * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindRecord )( 
            MailMergeDataSource * This,
            /* [in] */ BSTR FindText,
            /* [optional][in] */ VARIANT *Field,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetAllIncludedFlags )( 
            MailMergeDataSource * This,
            /* [in] */ VARIANT_BOOL Included);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetAllErrorFlags )( 
            MailMergeDataSource * This,
            /* [in] */ VARIANT_BOOL Invalid,
            /* [in] */ BSTR InvalidComment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            MailMergeDataSource * This);
        
        END_INTERFACE
    } MailMergeDataSourceVtbl;

    interface MailMergeDataSource
    {
        CONST_VTBL struct MailMergeDataSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MailMergeDataSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MailMergeDataSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MailMergeDataSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MailMergeDataSource_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MailMergeDataSource_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MailMergeDataSource_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MailMergeDataSource_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MailMergeDataSource_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define MailMergeDataSource_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define MailMergeDataSource_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define MailMergeDataSource_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define MailMergeDataSource_get_HeaderSourceName(This,prop)	\
    ( (This)->lpVtbl -> get_HeaderSourceName(This,prop) ) 

#define MailMergeDataSource_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define MailMergeDataSource_get_HeaderSourceType(This,prop)	\
    ( (This)->lpVtbl -> get_HeaderSourceType(This,prop) ) 

#define MailMergeDataSource_get_ConnectString(This,prop)	\
    ( (This)->lpVtbl -> get_ConnectString(This,prop) ) 

#define MailMergeDataSource_get_QueryString(This,prop)	\
    ( (This)->lpVtbl -> get_QueryString(This,prop) ) 

#define MailMergeDataSource_put_QueryString(This,prop)	\
    ( (This)->lpVtbl -> put_QueryString(This,prop) ) 

#define MailMergeDataSource_get_ActiveRecord(This,prop)	\
    ( (This)->lpVtbl -> get_ActiveRecord(This,prop) ) 

#define MailMergeDataSource_put_ActiveRecord(This,prop)	\
    ( (This)->lpVtbl -> put_ActiveRecord(This,prop) ) 

#define MailMergeDataSource_get_FirstRecord(This,prop)	\
    ( (This)->lpVtbl -> get_FirstRecord(This,prop) ) 

#define MailMergeDataSource_put_FirstRecord(This,prop)	\
    ( (This)->lpVtbl -> put_FirstRecord(This,prop) ) 

#define MailMergeDataSource_get_LastRecord(This,prop)	\
    ( (This)->lpVtbl -> get_LastRecord(This,prop) ) 

#define MailMergeDataSource_put_LastRecord(This,prop)	\
    ( (This)->lpVtbl -> put_LastRecord(This,prop) ) 

#define MailMergeDataSource_get_FieldNames(This,prop)	\
    ( (This)->lpVtbl -> get_FieldNames(This,prop) ) 

#define MailMergeDataSource_get_DataFields(This,prop)	\
    ( (This)->lpVtbl -> get_DataFields(This,prop) ) 

#define MailMergeDataSource_FindRecord2000(This,FindText,Field,prop)	\
    ( (This)->lpVtbl -> FindRecord2000(This,FindText,Field,prop) ) 

#define MailMergeDataSource_get_RecordCount(This,prop)	\
    ( (This)->lpVtbl -> get_RecordCount(This,prop) ) 

#define MailMergeDataSource_get_Included(This,prop)	\
    ( (This)->lpVtbl -> get_Included(This,prop) ) 

#define MailMergeDataSource_put_Included(This,prop)	\
    ( (This)->lpVtbl -> put_Included(This,prop) ) 

#define MailMergeDataSource_get_InvalidAddress(This,prop)	\
    ( (This)->lpVtbl -> get_InvalidAddress(This,prop) ) 

#define MailMergeDataSource_put_InvalidAddress(This,prop)	\
    ( (This)->lpVtbl -> put_InvalidAddress(This,prop) ) 

#define MailMergeDataSource_get_InvalidComments(This,prop)	\
    ( (This)->lpVtbl -> get_InvalidComments(This,prop) ) 

#define MailMergeDataSource_put_InvalidComments(This,prop)	\
    ( (This)->lpVtbl -> put_InvalidComments(This,prop) ) 

#define MailMergeDataSource_get_MappedDataFields(This,prop)	\
    ( (This)->lpVtbl -> get_MappedDataFields(This,prop) ) 

#define MailMergeDataSource_get_TableName(This,prop)	\
    ( (This)->lpVtbl -> get_TableName(This,prop) ) 

#define MailMergeDataSource_FindRecord(This,FindText,Field,prop)	\
    ( (This)->lpVtbl -> FindRecord(This,FindText,Field,prop) ) 

#define MailMergeDataSource_SetAllIncludedFlags(This,Included)	\
    ( (This)->lpVtbl -> SetAllIncludedFlags(This,Included) ) 

#define MailMergeDataSource_SetAllErrorFlags(This,Invalid,InvalidComment)	\
    ( (This)->lpVtbl -> SetAllErrorFlags(This,Invalid,InvalidComment) ) 

#define MailMergeDataSource_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MailMergeDataSource_INTERFACE_DEFINED__ */


#ifndef __MailMergeFieldNames_INTERFACE_DEFINED__
#define __MailMergeFieldNames_INTERFACE_DEFINED__

/* interface MailMergeFieldNames */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_MailMergeFieldNames;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002091C-0000-0000-C000-000000000046")
    MailMergeFieldNames : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ MailMergeFieldName **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MailMergeFieldNamesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MailMergeFieldNames * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MailMergeFieldNames * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MailMergeFieldNames * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MailMergeFieldNames * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MailMergeFieldNames * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MailMergeFieldNames * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MailMergeFieldNames * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            MailMergeFieldNames * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            MailMergeFieldNames * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MailMergeFieldNames * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            MailMergeFieldNames * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            MailMergeFieldNames * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            MailMergeFieldNames * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ MailMergeFieldName **prop);
        
        END_INTERFACE
    } MailMergeFieldNamesVtbl;

    interface MailMergeFieldNames
    {
        CONST_VTBL struct MailMergeFieldNamesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MailMergeFieldNames_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MailMergeFieldNames_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MailMergeFieldNames_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MailMergeFieldNames_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MailMergeFieldNames_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MailMergeFieldNames_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MailMergeFieldNames_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MailMergeFieldNames_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define MailMergeFieldNames_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define MailMergeFieldNames_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define MailMergeFieldNames_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define MailMergeFieldNames_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define MailMergeFieldNames_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MailMergeFieldNames_INTERFACE_DEFINED__ */


#ifndef __MailMergeFieldName_INTERFACE_DEFINED__
#define __MailMergeFieldName_INTERFACE_DEFINED__

/* interface MailMergeFieldName */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_MailMergeFieldName;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002091B-0000-0000-C000-000000000046")
    MailMergeFieldName : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MailMergeFieldNameVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MailMergeFieldName * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MailMergeFieldName * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MailMergeFieldName * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MailMergeFieldName * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MailMergeFieldName * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MailMergeFieldName * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MailMergeFieldName * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            MailMergeFieldName * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            MailMergeFieldName * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MailMergeFieldName * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            MailMergeFieldName * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            MailMergeFieldName * This,
            /* [retval][out] */ long *prop);
        
        END_INTERFACE
    } MailMergeFieldNameVtbl;

    interface MailMergeFieldName
    {
        CONST_VTBL struct MailMergeFieldNameVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MailMergeFieldName_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MailMergeFieldName_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MailMergeFieldName_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MailMergeFieldName_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MailMergeFieldName_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MailMergeFieldName_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MailMergeFieldName_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MailMergeFieldName_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define MailMergeFieldName_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define MailMergeFieldName_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define MailMergeFieldName_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define MailMergeFieldName_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MailMergeFieldName_INTERFACE_DEFINED__ */


#ifndef __MailMergeDataFields_INTERFACE_DEFINED__
#define __MailMergeDataFields_INTERFACE_DEFINED__

/* interface MailMergeDataFields */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_MailMergeDataFields;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002091A-0000-0000-C000-000000000046")
    MailMergeDataFields : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ MailMergeDataField **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MailMergeDataFieldsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MailMergeDataFields * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MailMergeDataFields * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MailMergeDataFields * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MailMergeDataFields * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MailMergeDataFields * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MailMergeDataFields * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MailMergeDataFields * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            MailMergeDataFields * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            MailMergeDataFields * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MailMergeDataFields * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            MailMergeDataFields * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            MailMergeDataFields * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            MailMergeDataFields * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ MailMergeDataField **prop);
        
        END_INTERFACE
    } MailMergeDataFieldsVtbl;

    interface MailMergeDataFields
    {
        CONST_VTBL struct MailMergeDataFieldsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MailMergeDataFields_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MailMergeDataFields_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MailMergeDataFields_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MailMergeDataFields_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MailMergeDataFields_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MailMergeDataFields_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MailMergeDataFields_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MailMergeDataFields_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define MailMergeDataFields_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define MailMergeDataFields_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define MailMergeDataFields_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define MailMergeDataFields_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define MailMergeDataFields_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MailMergeDataFields_INTERFACE_DEFINED__ */


#ifndef __MailMergeDataField_INTERFACE_DEFINED__
#define __MailMergeDataField_INTERFACE_DEFINED__

/* interface MailMergeDataField */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_MailMergeDataField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020919-0000-0000-C000-000000000046")
    MailMergeDataField : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MailMergeDataFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MailMergeDataField * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MailMergeDataField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MailMergeDataField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MailMergeDataField * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MailMergeDataField * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MailMergeDataField * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MailMergeDataField * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            MailMergeDataField * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            MailMergeDataField * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MailMergeDataField * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            MailMergeDataField * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            MailMergeDataField * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            MailMergeDataField * This,
            /* [retval][out] */ long *prop);
        
        END_INTERFACE
    } MailMergeDataFieldVtbl;

    interface MailMergeDataField
    {
        CONST_VTBL struct MailMergeDataFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MailMergeDataField_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MailMergeDataField_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MailMergeDataField_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MailMergeDataField_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MailMergeDataField_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MailMergeDataField_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MailMergeDataField_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MailMergeDataField_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define MailMergeDataField_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define MailMergeDataField_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define MailMergeDataField_get_Value(This,prop)	\
    ( (This)->lpVtbl -> get_Value(This,prop) ) 

#define MailMergeDataField_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define MailMergeDataField_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MailMergeDataField_INTERFACE_DEFINED__ */


#ifndef __Envelope_INTERFACE_DEFINED__
#define __Envelope_INTERFACE_DEFINED__

/* interface Envelope */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Envelope;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020918-0000-0000-C000-000000000046")
    Envelope : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Address( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReturnAddress( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultPrintBarCode( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultPrintBarCode( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultPrintFIMA( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultPrintFIMA( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultHeight( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultHeight( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultWidth( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultWidth( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultSize( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultSize( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultOmitReturnAddress( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultOmitReturnAddress( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FeedSource( 
            /* [retval][out] */ WdPaperTray *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FeedSource( 
            /* [in] */ WdPaperTray prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddressFromLeft( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AddressFromLeft( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddressFromTop( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AddressFromTop( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReturnAddressFromLeft( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReturnAddressFromLeft( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReturnAddressFromTop( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReturnAddressFromTop( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddressStyle( 
            /* [retval][out] */ Style **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReturnAddressStyle( 
            /* [retval][out] */ Style **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultOrientation( 
            /* [retval][out] */ WdEnvelopeOrientation *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultOrientation( 
            /* [in] */ WdEnvelopeOrientation prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultFaceUp( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultFaceUp( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Insert2000( 
            /* [optional][in] */ VARIANT *ExtractAddress,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *AutoText,
            /* [optional][in] */ VARIANT *OmitReturnAddress,
            /* [optional][in] */ VARIANT *ReturnAddress,
            /* [optional][in] */ VARIANT *ReturnAutoText,
            /* [optional][in] */ VARIANT *PrintBarCode,
            /* [optional][in] */ VARIANT *PrintFIMA,
            /* [optional][in] */ VARIANT *Size,
            /* [optional][in] */ VARIANT *Height,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *FeedSource,
            /* [optional][in] */ VARIANT *AddressFromLeft,
            /* [optional][in] */ VARIANT *AddressFromTop,
            /* [optional][in] */ VARIANT *ReturnAddressFromLeft,
            /* [optional][in] */ VARIANT *ReturnAddressFromTop,
            /* [optional][in] */ VARIANT *DefaultFaceUp,
            /* [optional][in] */ VARIANT *DefaultOrientation) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE PrintOut2000( 
            /* [optional][in] */ VARIANT *ExtractAddress,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *AutoText,
            /* [optional][in] */ VARIANT *OmitReturnAddress,
            /* [optional][in] */ VARIANT *ReturnAddress,
            /* [optional][in] */ VARIANT *ReturnAutoText,
            /* [optional][in] */ VARIANT *PrintBarCode,
            /* [optional][in] */ VARIANT *PrintFIMA,
            /* [optional][in] */ VARIANT *Size,
            /* [optional][in] */ VARIANT *Height,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *FeedSource,
            /* [optional][in] */ VARIANT *AddressFromLeft,
            /* [optional][in] */ VARIANT *AddressFromTop,
            /* [optional][in] */ VARIANT *ReturnAddressFromLeft,
            /* [optional][in] */ VARIANT *ReturnAddressFromTop,
            /* [optional][in] */ VARIANT *DefaultFaceUp,
            /* [optional][in] */ VARIANT *DefaultOrientation) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UpdateDocument( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Options( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Vertical( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Vertical( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RecipientNamefromLeft( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RecipientNamefromLeft( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RecipientNamefromTop( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RecipientNamefromTop( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RecipientPostalfromLeft( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RecipientPostalfromLeft( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RecipientPostalfromTop( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RecipientPostalfromTop( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SenderNamefromLeft( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SenderNamefromLeft( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SenderNamefromTop( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SenderNamefromTop( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SenderPostalfromLeft( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SenderPostalfromLeft( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SenderPostalfromTop( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SenderPostalfromTop( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [optional][in] */ VARIANT *ExtractAddress,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *AutoText,
            /* [optional][in] */ VARIANT *OmitReturnAddress,
            /* [optional][in] */ VARIANT *ReturnAddress,
            /* [optional][in] */ VARIANT *ReturnAutoText,
            /* [optional][in] */ VARIANT *PrintBarCode,
            /* [optional][in] */ VARIANT *PrintFIMA,
            /* [optional][in] */ VARIANT *Size,
            /* [optional][in] */ VARIANT *Height,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *FeedSource,
            /* [optional][in] */ VARIANT *AddressFromLeft,
            /* [optional][in] */ VARIANT *AddressFromTop,
            /* [optional][in] */ VARIANT *ReturnAddressFromLeft,
            /* [optional][in] */ VARIANT *ReturnAddressFromTop,
            /* [optional][in] */ VARIANT *DefaultFaceUp,
            /* [optional][in] */ VARIANT *DefaultOrientation,
            /* [optional][in] */ VARIANT *PrintEPostage,
            /* [optional][in] */ VARIANT *Vertical,
            /* [optional][in] */ VARIANT *RecipientNamefromLeft,
            /* [optional][in] */ VARIANT *RecipientNamefromTop,
            /* [optional][in] */ VARIANT *RecipientPostalfromLeft,
            /* [optional][in] */ VARIANT *RecipientPostalfromTop,
            /* [optional][in] */ VARIANT *SenderNamefromLeft,
            /* [optional][in] */ VARIANT *SenderNamefromTop,
            /* [optional][in] */ VARIANT *SenderPostalfromLeft,
            /* [optional][in] */ VARIANT *SenderPostalfromTop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrintOut( 
            /* [optional][in] */ VARIANT *ExtractAddress,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *AutoText,
            /* [optional][in] */ VARIANT *OmitReturnAddress,
            /* [optional][in] */ VARIANT *ReturnAddress,
            /* [optional][in] */ VARIANT *ReturnAutoText,
            /* [optional][in] */ VARIANT *PrintBarCode,
            /* [optional][in] */ VARIANT *PrintFIMA,
            /* [optional][in] */ VARIANT *Size,
            /* [optional][in] */ VARIANT *Height,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *FeedSource,
            /* [optional][in] */ VARIANT *AddressFromLeft,
            /* [optional][in] */ VARIANT *AddressFromTop,
            /* [optional][in] */ VARIANT *ReturnAddressFromLeft,
            /* [optional][in] */ VARIANT *ReturnAddressFromTop,
            /* [optional][in] */ VARIANT *DefaultFaceUp,
            /* [optional][in] */ VARIANT *DefaultOrientation,
            /* [optional][in] */ VARIANT *PrintEPostage,
            /* [optional][in] */ VARIANT *Vertical,
            /* [optional][in] */ VARIANT *RecipientNamefromLeft,
            /* [optional][in] */ VARIANT *RecipientNamefromTop,
            /* [optional][in] */ VARIANT *RecipientPostalfromLeft,
            /* [optional][in] */ VARIANT *RecipientPostalfromTop,
            /* [optional][in] */ VARIANT *SenderNamefromLeft,
            /* [optional][in] */ VARIANT *SenderNamefromTop,
            /* [optional][in] */ VARIANT *SenderPostalfromLeft,
            /* [optional][in] */ VARIANT *SenderPostalfromTop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EnvelopeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Envelope * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Envelope * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Envelope * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Envelope * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Envelope * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Envelope * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Envelope * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Envelope * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Envelope * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Envelope * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Address )( 
            Envelope * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReturnAddress )( 
            Envelope * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultPrintBarCode )( 
            Envelope * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultPrintBarCode )( 
            Envelope * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultPrintFIMA )( 
            Envelope * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultPrintFIMA )( 
            Envelope * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultHeight )( 
            Envelope * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultHeight )( 
            Envelope * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultWidth )( 
            Envelope * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultWidth )( 
            Envelope * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultSize )( 
            Envelope * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultSize )( 
            Envelope * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultOmitReturnAddress )( 
            Envelope * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultOmitReturnAddress )( 
            Envelope * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FeedSource )( 
            Envelope * This,
            /* [retval][out] */ WdPaperTray *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FeedSource )( 
            Envelope * This,
            /* [in] */ WdPaperTray prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddressFromLeft )( 
            Envelope * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AddressFromLeft )( 
            Envelope * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddressFromTop )( 
            Envelope * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AddressFromTop )( 
            Envelope * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReturnAddressFromLeft )( 
            Envelope * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReturnAddressFromLeft )( 
            Envelope * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReturnAddressFromTop )( 
            Envelope * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReturnAddressFromTop )( 
            Envelope * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddressStyle )( 
            Envelope * This,
            /* [retval][out] */ Style **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReturnAddressStyle )( 
            Envelope * This,
            /* [retval][out] */ Style **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultOrientation )( 
            Envelope * This,
            /* [retval][out] */ WdEnvelopeOrientation *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultOrientation )( 
            Envelope * This,
            /* [in] */ WdEnvelopeOrientation prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFaceUp )( 
            Envelope * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultFaceUp )( 
            Envelope * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Insert2000 )( 
            Envelope * This,
            /* [optional][in] */ VARIANT *ExtractAddress,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *AutoText,
            /* [optional][in] */ VARIANT *OmitReturnAddress,
            /* [optional][in] */ VARIANT *ReturnAddress,
            /* [optional][in] */ VARIANT *ReturnAutoText,
            /* [optional][in] */ VARIANT *PrintBarCode,
            /* [optional][in] */ VARIANT *PrintFIMA,
            /* [optional][in] */ VARIANT *Size,
            /* [optional][in] */ VARIANT *Height,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *FeedSource,
            /* [optional][in] */ VARIANT *AddressFromLeft,
            /* [optional][in] */ VARIANT *AddressFromTop,
            /* [optional][in] */ VARIANT *ReturnAddressFromLeft,
            /* [optional][in] */ VARIANT *ReturnAddressFromTop,
            /* [optional][in] */ VARIANT *DefaultFaceUp,
            /* [optional][in] */ VARIANT *DefaultOrientation);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOut2000 )( 
            Envelope * This,
            /* [optional][in] */ VARIANT *ExtractAddress,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *AutoText,
            /* [optional][in] */ VARIANT *OmitReturnAddress,
            /* [optional][in] */ VARIANT *ReturnAddress,
            /* [optional][in] */ VARIANT *ReturnAutoText,
            /* [optional][in] */ VARIANT *PrintBarCode,
            /* [optional][in] */ VARIANT *PrintFIMA,
            /* [optional][in] */ VARIANT *Size,
            /* [optional][in] */ VARIANT *Height,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *FeedSource,
            /* [optional][in] */ VARIANT *AddressFromLeft,
            /* [optional][in] */ VARIANT *AddressFromTop,
            /* [optional][in] */ VARIANT *ReturnAddressFromLeft,
            /* [optional][in] */ VARIANT *ReturnAddressFromTop,
            /* [optional][in] */ VARIANT *DefaultFaceUp,
            /* [optional][in] */ VARIANT *DefaultOrientation);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UpdateDocument )( 
            Envelope * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Options )( 
            Envelope * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Vertical )( 
            Envelope * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Vertical )( 
            Envelope * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecipientNamefromLeft )( 
            Envelope * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RecipientNamefromLeft )( 
            Envelope * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecipientNamefromTop )( 
            Envelope * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RecipientNamefromTop )( 
            Envelope * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecipientPostalfromLeft )( 
            Envelope * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RecipientPostalfromLeft )( 
            Envelope * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecipientPostalfromTop )( 
            Envelope * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RecipientPostalfromTop )( 
            Envelope * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SenderNamefromLeft )( 
            Envelope * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SenderNamefromLeft )( 
            Envelope * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SenderNamefromTop )( 
            Envelope * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SenderNamefromTop )( 
            Envelope * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SenderPostalfromLeft )( 
            Envelope * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SenderPostalfromLeft )( 
            Envelope * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SenderPostalfromTop )( 
            Envelope * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SenderPostalfromTop )( 
            Envelope * This,
            /* [in] */ int prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            Envelope * This,
            /* [optional][in] */ VARIANT *ExtractAddress,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *AutoText,
            /* [optional][in] */ VARIANT *OmitReturnAddress,
            /* [optional][in] */ VARIANT *ReturnAddress,
            /* [optional][in] */ VARIANT *ReturnAutoText,
            /* [optional][in] */ VARIANT *PrintBarCode,
            /* [optional][in] */ VARIANT *PrintFIMA,
            /* [optional][in] */ VARIANT *Size,
            /* [optional][in] */ VARIANT *Height,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *FeedSource,
            /* [optional][in] */ VARIANT *AddressFromLeft,
            /* [optional][in] */ VARIANT *AddressFromTop,
            /* [optional][in] */ VARIANT *ReturnAddressFromLeft,
            /* [optional][in] */ VARIANT *ReturnAddressFromTop,
            /* [optional][in] */ VARIANT *DefaultFaceUp,
            /* [optional][in] */ VARIANT *DefaultOrientation,
            /* [optional][in] */ VARIANT *PrintEPostage,
            /* [optional][in] */ VARIANT *Vertical,
            /* [optional][in] */ VARIANT *RecipientNamefromLeft,
            /* [optional][in] */ VARIANT *RecipientNamefromTop,
            /* [optional][in] */ VARIANT *RecipientPostalfromLeft,
            /* [optional][in] */ VARIANT *RecipientPostalfromTop,
            /* [optional][in] */ VARIANT *SenderNamefromLeft,
            /* [optional][in] */ VARIANT *SenderNamefromTop,
            /* [optional][in] */ VARIANT *SenderPostalfromLeft,
            /* [optional][in] */ VARIANT *SenderPostalfromTop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOut )( 
            Envelope * This,
            /* [optional][in] */ VARIANT *ExtractAddress,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *AutoText,
            /* [optional][in] */ VARIANT *OmitReturnAddress,
            /* [optional][in] */ VARIANT *ReturnAddress,
            /* [optional][in] */ VARIANT *ReturnAutoText,
            /* [optional][in] */ VARIANT *PrintBarCode,
            /* [optional][in] */ VARIANT *PrintFIMA,
            /* [optional][in] */ VARIANT *Size,
            /* [optional][in] */ VARIANT *Height,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *FeedSource,
            /* [optional][in] */ VARIANT *AddressFromLeft,
            /* [optional][in] */ VARIANT *AddressFromTop,
            /* [optional][in] */ VARIANT *ReturnAddressFromLeft,
            /* [optional][in] */ VARIANT *ReturnAddressFromTop,
            /* [optional][in] */ VARIANT *DefaultFaceUp,
            /* [optional][in] */ VARIANT *DefaultOrientation,
            /* [optional][in] */ VARIANT *PrintEPostage,
            /* [optional][in] */ VARIANT *Vertical,
            /* [optional][in] */ VARIANT *RecipientNamefromLeft,
            /* [optional][in] */ VARIANT *RecipientNamefromTop,
            /* [optional][in] */ VARIANT *RecipientPostalfromLeft,
            /* [optional][in] */ VARIANT *RecipientPostalfromTop,
            /* [optional][in] */ VARIANT *SenderNamefromLeft,
            /* [optional][in] */ VARIANT *SenderNamefromTop,
            /* [optional][in] */ VARIANT *SenderPostalfromLeft,
            /* [optional][in] */ VARIANT *SenderPostalfromTop);
        
        END_INTERFACE
    } EnvelopeVtbl;

    interface Envelope
    {
        CONST_VTBL struct EnvelopeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Envelope_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Envelope_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Envelope_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Envelope_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Envelope_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Envelope_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Envelope_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Envelope_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Envelope_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Envelope_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Envelope_get_Address(This,prop)	\
    ( (This)->lpVtbl -> get_Address(This,prop) ) 

#define Envelope_get_ReturnAddress(This,prop)	\
    ( (This)->lpVtbl -> get_ReturnAddress(This,prop) ) 

#define Envelope_get_DefaultPrintBarCode(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultPrintBarCode(This,prop) ) 

#define Envelope_put_DefaultPrintBarCode(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultPrintBarCode(This,prop) ) 

#define Envelope_get_DefaultPrintFIMA(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultPrintFIMA(This,prop) ) 

#define Envelope_put_DefaultPrintFIMA(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultPrintFIMA(This,prop) ) 

#define Envelope_get_DefaultHeight(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultHeight(This,prop) ) 

#define Envelope_put_DefaultHeight(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultHeight(This,prop) ) 

#define Envelope_get_DefaultWidth(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultWidth(This,prop) ) 

#define Envelope_put_DefaultWidth(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultWidth(This,prop) ) 

#define Envelope_get_DefaultSize(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultSize(This,prop) ) 

#define Envelope_put_DefaultSize(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultSize(This,prop) ) 

#define Envelope_get_DefaultOmitReturnAddress(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultOmitReturnAddress(This,prop) ) 

#define Envelope_put_DefaultOmitReturnAddress(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultOmitReturnAddress(This,prop) ) 

#define Envelope_get_FeedSource(This,prop)	\
    ( (This)->lpVtbl -> get_FeedSource(This,prop) ) 

#define Envelope_put_FeedSource(This,prop)	\
    ( (This)->lpVtbl -> put_FeedSource(This,prop) ) 

#define Envelope_get_AddressFromLeft(This,prop)	\
    ( (This)->lpVtbl -> get_AddressFromLeft(This,prop) ) 

#define Envelope_put_AddressFromLeft(This,prop)	\
    ( (This)->lpVtbl -> put_AddressFromLeft(This,prop) ) 

#define Envelope_get_AddressFromTop(This,prop)	\
    ( (This)->lpVtbl -> get_AddressFromTop(This,prop) ) 

#define Envelope_put_AddressFromTop(This,prop)	\
    ( (This)->lpVtbl -> put_AddressFromTop(This,prop) ) 

#define Envelope_get_ReturnAddressFromLeft(This,prop)	\
    ( (This)->lpVtbl -> get_ReturnAddressFromLeft(This,prop) ) 

#define Envelope_put_ReturnAddressFromLeft(This,prop)	\
    ( (This)->lpVtbl -> put_ReturnAddressFromLeft(This,prop) ) 

#define Envelope_get_ReturnAddressFromTop(This,prop)	\
    ( (This)->lpVtbl -> get_ReturnAddressFromTop(This,prop) ) 

#define Envelope_put_ReturnAddressFromTop(This,prop)	\
    ( (This)->lpVtbl -> put_ReturnAddressFromTop(This,prop) ) 

#define Envelope_get_AddressStyle(This,prop)	\
    ( (This)->lpVtbl -> get_AddressStyle(This,prop) ) 

#define Envelope_get_ReturnAddressStyle(This,prop)	\
    ( (This)->lpVtbl -> get_ReturnAddressStyle(This,prop) ) 

#define Envelope_get_DefaultOrientation(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultOrientation(This,prop) ) 

#define Envelope_put_DefaultOrientation(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultOrientation(This,prop) ) 

#define Envelope_get_DefaultFaceUp(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultFaceUp(This,prop) ) 

#define Envelope_put_DefaultFaceUp(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultFaceUp(This,prop) ) 

#define Envelope_Insert2000(This,ExtractAddress,Address,AutoText,OmitReturnAddress,ReturnAddress,ReturnAutoText,PrintBarCode,PrintFIMA,Size,Height,Width,FeedSource,AddressFromLeft,AddressFromTop,ReturnAddressFromLeft,ReturnAddressFromTop,DefaultFaceUp,DefaultOrientation)	\
    ( (This)->lpVtbl -> Insert2000(This,ExtractAddress,Address,AutoText,OmitReturnAddress,ReturnAddress,ReturnAutoText,PrintBarCode,PrintFIMA,Size,Height,Width,FeedSource,AddressFromLeft,AddressFromTop,ReturnAddressFromLeft,ReturnAddressFromTop,DefaultFaceUp,DefaultOrientation) ) 

#define Envelope_PrintOut2000(This,ExtractAddress,Address,AutoText,OmitReturnAddress,ReturnAddress,ReturnAutoText,PrintBarCode,PrintFIMA,Size,Height,Width,FeedSource,AddressFromLeft,AddressFromTop,ReturnAddressFromLeft,ReturnAddressFromTop,DefaultFaceUp,DefaultOrientation)	\
    ( (This)->lpVtbl -> PrintOut2000(This,ExtractAddress,Address,AutoText,OmitReturnAddress,ReturnAddress,ReturnAutoText,PrintBarCode,PrintFIMA,Size,Height,Width,FeedSource,AddressFromLeft,AddressFromTop,ReturnAddressFromLeft,ReturnAddressFromTop,DefaultFaceUp,DefaultOrientation) ) 

#define Envelope_UpdateDocument(This)	\
    ( (This)->lpVtbl -> UpdateDocument(This) ) 

#define Envelope_Options(This)	\
    ( (This)->lpVtbl -> Options(This) ) 

#define Envelope_get_Vertical(This,prop)	\
    ( (This)->lpVtbl -> get_Vertical(This,prop) ) 

#define Envelope_put_Vertical(This,prop)	\
    ( (This)->lpVtbl -> put_Vertical(This,prop) ) 

#define Envelope_get_RecipientNamefromLeft(This,prop)	\
    ( (This)->lpVtbl -> get_RecipientNamefromLeft(This,prop) ) 

#define Envelope_put_RecipientNamefromLeft(This,prop)	\
    ( (This)->lpVtbl -> put_RecipientNamefromLeft(This,prop) ) 

#define Envelope_get_RecipientNamefromTop(This,prop)	\
    ( (This)->lpVtbl -> get_RecipientNamefromTop(This,prop) ) 

#define Envelope_put_RecipientNamefromTop(This,prop)	\
    ( (This)->lpVtbl -> put_RecipientNamefromTop(This,prop) ) 

#define Envelope_get_RecipientPostalfromLeft(This,prop)	\
    ( (This)->lpVtbl -> get_RecipientPostalfromLeft(This,prop) ) 

#define Envelope_put_RecipientPostalfromLeft(This,prop)	\
    ( (This)->lpVtbl -> put_RecipientPostalfromLeft(This,prop) ) 

#define Envelope_get_RecipientPostalfromTop(This,prop)	\
    ( (This)->lpVtbl -> get_RecipientPostalfromTop(This,prop) ) 

#define Envelope_put_RecipientPostalfromTop(This,prop)	\
    ( (This)->lpVtbl -> put_RecipientPostalfromTop(This,prop) ) 

#define Envelope_get_SenderNamefromLeft(This,prop)	\
    ( (This)->lpVtbl -> get_SenderNamefromLeft(This,prop) ) 

#define Envelope_put_SenderNamefromLeft(This,prop)	\
    ( (This)->lpVtbl -> put_SenderNamefromLeft(This,prop) ) 

#define Envelope_get_SenderNamefromTop(This,prop)	\
    ( (This)->lpVtbl -> get_SenderNamefromTop(This,prop) ) 

#define Envelope_put_SenderNamefromTop(This,prop)	\
    ( (This)->lpVtbl -> put_SenderNamefromTop(This,prop) ) 

#define Envelope_get_SenderPostalfromLeft(This,prop)	\
    ( (This)->lpVtbl -> get_SenderPostalfromLeft(This,prop) ) 

#define Envelope_put_SenderPostalfromLeft(This,prop)	\
    ( (This)->lpVtbl -> put_SenderPostalfromLeft(This,prop) ) 

#define Envelope_get_SenderPostalfromTop(This,prop)	\
    ( (This)->lpVtbl -> get_SenderPostalfromTop(This,prop) ) 

#define Envelope_put_SenderPostalfromTop(This,prop)	\
    ( (This)->lpVtbl -> put_SenderPostalfromTop(This,prop) ) 

#define Envelope_Insert(This,ExtractAddress,Address,AutoText,OmitReturnAddress,ReturnAddress,ReturnAutoText,PrintBarCode,PrintFIMA,Size,Height,Width,FeedSource,AddressFromLeft,AddressFromTop,ReturnAddressFromLeft,ReturnAddressFromTop,DefaultFaceUp,DefaultOrientation,PrintEPostage,Vertical,RecipientNamefromLeft,RecipientNamefromTop,RecipientPostalfromLeft,RecipientPostalfromTop,SenderNamefromLeft,SenderNamefromTop,SenderPostalfromLeft,SenderPostalfromTop)	\
    ( (This)->lpVtbl -> Insert(This,ExtractAddress,Address,AutoText,OmitReturnAddress,ReturnAddress,ReturnAutoText,PrintBarCode,PrintFIMA,Size,Height,Width,FeedSource,AddressFromLeft,AddressFromTop,ReturnAddressFromLeft,ReturnAddressFromTop,DefaultFaceUp,DefaultOrientation,PrintEPostage,Vertical,RecipientNamefromLeft,RecipientNamefromTop,RecipientPostalfromLeft,RecipientPostalfromTop,SenderNamefromLeft,SenderNamefromTop,SenderPostalfromLeft,SenderPostalfromTop) ) 

#define Envelope_PrintOut(This,ExtractAddress,Address,AutoText,OmitReturnAddress,ReturnAddress,ReturnAutoText,PrintBarCode,PrintFIMA,Size,Height,Width,FeedSource,AddressFromLeft,AddressFromTop,ReturnAddressFromLeft,ReturnAddressFromTop,DefaultFaceUp,DefaultOrientation,PrintEPostage,Vertical,RecipientNamefromLeft,RecipientNamefromTop,RecipientPostalfromLeft,RecipientPostalfromTop,SenderNamefromLeft,SenderNamefromTop,SenderPostalfromLeft,SenderPostalfromTop)	\
    ( (This)->lpVtbl -> PrintOut(This,ExtractAddress,Address,AutoText,OmitReturnAddress,ReturnAddress,ReturnAutoText,PrintBarCode,PrintFIMA,Size,Height,Width,FeedSource,AddressFromLeft,AddressFromTop,ReturnAddressFromLeft,ReturnAddressFromTop,DefaultFaceUp,DefaultOrientation,PrintEPostage,Vertical,RecipientNamefromLeft,RecipientNamefromTop,RecipientPostalfromLeft,RecipientPostalfromTop,SenderNamefromLeft,SenderNamefromTop,SenderPostalfromLeft,SenderPostalfromTop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Envelope_INTERFACE_DEFINED__ */


#ifndef __MailingLabel_INTERFACE_DEFINED__
#define __MailingLabel_INTERFACE_DEFINED__

/* interface MailingLabel */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_MailingLabel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020917-0000-0000-C000-000000000046")
    MailingLabel : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultPrintBarCode( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultPrintBarCode( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultLaserTray( 
            /* [retval][out] */ WdPaperTray *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultLaserTray( 
            /* [in] */ WdPaperTray prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CustomLabels( 
            /* [retval][out] */ CustomLabels **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultLabelName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultLabelName( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE CreateNewDocument2000( 
            /* [optional][in] */ VARIANT *Name,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *AutoText,
            /* [optional][in] */ VARIANT *ExtractAddress,
            /* [optional][in] */ VARIANT *LaserTray,
            /* [retval][out] */ _Document **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE PrintOut2000( 
            /* [optional][in] */ VARIANT *Name,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *ExtractAddress,
            /* [optional][in] */ VARIANT *LaserTray,
            /* [optional][in] */ VARIANT *SingleLabel,
            /* [optional][in] */ VARIANT *Row,
            /* [optional][in] */ VARIANT *Column) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE LabelOptions( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateNewDocument( 
            /* [optional][in] */ VARIANT *Name,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *AutoText,
            /* [optional][in] */ VARIANT *ExtractAddress,
            /* [optional][in] */ VARIANT *LaserTray,
            /* [optional][in] */ VARIANT *PrintEPostageLabel,
            /* [optional][in] */ VARIANT *Vertical,
            /* [retval][out] */ _Document **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrintOut( 
            /* [optional][in] */ VARIANT *Name,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *ExtractAddress,
            /* [optional][in] */ VARIANT *LaserTray,
            /* [optional][in] */ VARIANT *SingleLabel,
            /* [optional][in] */ VARIANT *Row,
            /* [optional][in] */ VARIANT *Column,
            /* [optional][in] */ VARIANT *PrintEPostageLabel,
            /* [optional][in] */ VARIANT *Vertical) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Vertical( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Vertical( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MailingLabelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MailingLabel * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MailingLabel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MailingLabel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MailingLabel * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MailingLabel * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MailingLabel * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MailingLabel * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            MailingLabel * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            MailingLabel * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MailingLabel * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultPrintBarCode )( 
            MailingLabel * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultPrintBarCode )( 
            MailingLabel * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultLaserTray )( 
            MailingLabel * This,
            /* [retval][out] */ WdPaperTray *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultLaserTray )( 
            MailingLabel * This,
            /* [in] */ WdPaperTray prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CustomLabels )( 
            MailingLabel * This,
            /* [retval][out] */ CustomLabels **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultLabelName )( 
            MailingLabel * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultLabelName )( 
            MailingLabel * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *CreateNewDocument2000 )( 
            MailingLabel * This,
            /* [optional][in] */ VARIANT *Name,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *AutoText,
            /* [optional][in] */ VARIANT *ExtractAddress,
            /* [optional][in] */ VARIANT *LaserTray,
            /* [retval][out] */ _Document **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOut2000 )( 
            MailingLabel * This,
            /* [optional][in] */ VARIANT *Name,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *ExtractAddress,
            /* [optional][in] */ VARIANT *LaserTray,
            /* [optional][in] */ VARIANT *SingleLabel,
            /* [optional][in] */ VARIANT *Row,
            /* [optional][in] */ VARIANT *Column);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LabelOptions )( 
            MailingLabel * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateNewDocument )( 
            MailingLabel * This,
            /* [optional][in] */ VARIANT *Name,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *AutoText,
            /* [optional][in] */ VARIANT *ExtractAddress,
            /* [optional][in] */ VARIANT *LaserTray,
            /* [optional][in] */ VARIANT *PrintEPostageLabel,
            /* [optional][in] */ VARIANT *Vertical,
            /* [retval][out] */ _Document **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOut )( 
            MailingLabel * This,
            /* [optional][in] */ VARIANT *Name,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *ExtractAddress,
            /* [optional][in] */ VARIANT *LaserTray,
            /* [optional][in] */ VARIANT *SingleLabel,
            /* [optional][in] */ VARIANT *Row,
            /* [optional][in] */ VARIANT *Column,
            /* [optional][in] */ VARIANT *PrintEPostageLabel,
            /* [optional][in] */ VARIANT *Vertical);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Vertical )( 
            MailingLabel * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Vertical )( 
            MailingLabel * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } MailingLabelVtbl;

    interface MailingLabel
    {
        CONST_VTBL struct MailingLabelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MailingLabel_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MailingLabel_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MailingLabel_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MailingLabel_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MailingLabel_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MailingLabel_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MailingLabel_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MailingLabel_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define MailingLabel_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define MailingLabel_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define MailingLabel_get_DefaultPrintBarCode(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultPrintBarCode(This,prop) ) 

#define MailingLabel_put_DefaultPrintBarCode(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultPrintBarCode(This,prop) ) 

#define MailingLabel_get_DefaultLaserTray(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultLaserTray(This,prop) ) 

#define MailingLabel_put_DefaultLaserTray(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultLaserTray(This,prop) ) 

#define MailingLabel_get_CustomLabels(This,prop)	\
    ( (This)->lpVtbl -> get_CustomLabels(This,prop) ) 

#define MailingLabel_get_DefaultLabelName(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultLabelName(This,prop) ) 

#define MailingLabel_put_DefaultLabelName(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultLabelName(This,prop) ) 

#define MailingLabel_CreateNewDocument2000(This,Name,Address,AutoText,ExtractAddress,LaserTray,prop)	\
    ( (This)->lpVtbl -> CreateNewDocument2000(This,Name,Address,AutoText,ExtractAddress,LaserTray,prop) ) 

#define MailingLabel_PrintOut2000(This,Name,Address,ExtractAddress,LaserTray,SingleLabel,Row,Column)	\
    ( (This)->lpVtbl -> PrintOut2000(This,Name,Address,ExtractAddress,LaserTray,SingleLabel,Row,Column) ) 

#define MailingLabel_LabelOptions(This)	\
    ( (This)->lpVtbl -> LabelOptions(This) ) 

#define MailingLabel_CreateNewDocument(This,Name,Address,AutoText,ExtractAddress,LaserTray,PrintEPostageLabel,Vertical,prop)	\
    ( (This)->lpVtbl -> CreateNewDocument(This,Name,Address,AutoText,ExtractAddress,LaserTray,PrintEPostageLabel,Vertical,prop) ) 

#define MailingLabel_PrintOut(This,Name,Address,ExtractAddress,LaserTray,SingleLabel,Row,Column,PrintEPostageLabel,Vertical)	\
    ( (This)->lpVtbl -> PrintOut(This,Name,Address,ExtractAddress,LaserTray,SingleLabel,Row,Column,PrintEPostageLabel,Vertical) ) 

#define MailingLabel_get_Vertical(This,prop)	\
    ( (This)->lpVtbl -> get_Vertical(This,prop) ) 

#define MailingLabel_put_Vertical(This,prop)	\
    ( (This)->lpVtbl -> put_Vertical(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MailingLabel_INTERFACE_DEFINED__ */


#ifndef __CustomLabels_INTERFACE_DEFINED__
#define __CustomLabels_INTERFACE_DEFINED__

/* interface CustomLabels */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_CustomLabels;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020916-0000-0000-C000-000000000046")
    CustomLabels : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ CustomLabel **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *DotMatrix,
            /* [retval][out] */ CustomLabel **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CustomLabelsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CustomLabels * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CustomLabels * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CustomLabels * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CustomLabels * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CustomLabels * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CustomLabels * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CustomLabels * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            CustomLabels * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            CustomLabels * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CustomLabels * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            CustomLabels * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            CustomLabels * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            CustomLabels * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ CustomLabel **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            CustomLabels * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *DotMatrix,
            /* [retval][out] */ CustomLabel **prop);
        
        END_INTERFACE
    } CustomLabelsVtbl;

    interface CustomLabels
    {
        CONST_VTBL struct CustomLabelsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CustomLabels_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CustomLabels_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CustomLabels_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CustomLabels_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CustomLabels_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CustomLabels_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CustomLabels_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CustomLabels_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define CustomLabels_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define CustomLabels_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define CustomLabels_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define CustomLabels_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define CustomLabels_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define CustomLabels_Add(This,Name,DotMatrix,prop)	\
    ( (This)->lpVtbl -> Add(This,Name,DotMatrix,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CustomLabels_INTERFACE_DEFINED__ */


#ifndef __CustomLabel_INTERFACE_DEFINED__
#define __CustomLabel_INTERFACE_DEFINED__

/* interface CustomLabel */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_CustomLabel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020915-0000-0000-C000-000000000046")
    CustomLabel : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TopMargin( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TopMargin( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SideMargin( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SideMargin( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalPitch( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalPitch( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalPitch( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HorizontalPitch( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberAcross( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberAcross( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberDown( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberDown( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DotMatrix( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageSize( 
            /* [retval][out] */ WdCustomLabelPageSize *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageSize( 
            /* [in] */ WdCustomLabelPageSize prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Valid( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CustomLabelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CustomLabel * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CustomLabel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CustomLabel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CustomLabel * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CustomLabel * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CustomLabel * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CustomLabel * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            CustomLabel * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            CustomLabel * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CustomLabel * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            CustomLabel * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CustomLabel * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CustomLabel * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TopMargin )( 
            CustomLabel * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TopMargin )( 
            CustomLabel * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SideMargin )( 
            CustomLabel * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SideMargin )( 
            CustomLabel * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            CustomLabel * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            CustomLabel * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            CustomLabel * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            CustomLabel * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalPitch )( 
            CustomLabel * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalPitch )( 
            CustomLabel * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalPitch )( 
            CustomLabel * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HorizontalPitch )( 
            CustomLabel * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberAcross )( 
            CustomLabel * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberAcross )( 
            CustomLabel * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberDown )( 
            CustomLabel * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberDown )( 
            CustomLabel * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DotMatrix )( 
            CustomLabel * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageSize )( 
            CustomLabel * This,
            /* [retval][out] */ WdCustomLabelPageSize *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageSize )( 
            CustomLabel * This,
            /* [in] */ WdCustomLabelPageSize prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Valid )( 
            CustomLabel * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            CustomLabel * This);
        
        END_INTERFACE
    } CustomLabelVtbl;

    interface CustomLabel
    {
        CONST_VTBL struct CustomLabelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CustomLabel_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CustomLabel_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CustomLabel_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CustomLabel_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CustomLabel_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CustomLabel_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CustomLabel_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CustomLabel_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define CustomLabel_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define CustomLabel_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define CustomLabel_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define CustomLabel_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define CustomLabel_put_Name(This,prop)	\
    ( (This)->lpVtbl -> put_Name(This,prop) ) 

#define CustomLabel_get_TopMargin(This,prop)	\
    ( (This)->lpVtbl -> get_TopMargin(This,prop) ) 

#define CustomLabel_put_TopMargin(This,prop)	\
    ( (This)->lpVtbl -> put_TopMargin(This,prop) ) 

#define CustomLabel_get_SideMargin(This,prop)	\
    ( (This)->lpVtbl -> get_SideMargin(This,prop) ) 

#define CustomLabel_put_SideMargin(This,prop)	\
    ( (This)->lpVtbl -> put_SideMargin(This,prop) ) 

#define CustomLabel_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define CustomLabel_put_Height(This,prop)	\
    ( (This)->lpVtbl -> put_Height(This,prop) ) 

#define CustomLabel_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define CustomLabel_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define CustomLabel_get_VerticalPitch(This,prop)	\
    ( (This)->lpVtbl -> get_VerticalPitch(This,prop) ) 

#define CustomLabel_put_VerticalPitch(This,prop)	\
    ( (This)->lpVtbl -> put_VerticalPitch(This,prop) ) 

#define CustomLabel_get_HorizontalPitch(This,prop)	\
    ( (This)->lpVtbl -> get_HorizontalPitch(This,prop) ) 

#define CustomLabel_put_HorizontalPitch(This,prop)	\
    ( (This)->lpVtbl -> put_HorizontalPitch(This,prop) ) 

#define CustomLabel_get_NumberAcross(This,prop)	\
    ( (This)->lpVtbl -> get_NumberAcross(This,prop) ) 

#define CustomLabel_put_NumberAcross(This,prop)	\
    ( (This)->lpVtbl -> put_NumberAcross(This,prop) ) 

#define CustomLabel_get_NumberDown(This,prop)	\
    ( (This)->lpVtbl -> get_NumberDown(This,prop) ) 

#define CustomLabel_put_NumberDown(This,prop)	\
    ( (This)->lpVtbl -> put_NumberDown(This,prop) ) 

#define CustomLabel_get_DotMatrix(This,prop)	\
    ( (This)->lpVtbl -> get_DotMatrix(This,prop) ) 

#define CustomLabel_get_PageSize(This,prop)	\
    ( (This)->lpVtbl -> get_PageSize(This,prop) ) 

#define CustomLabel_put_PageSize(This,prop)	\
    ( (This)->lpVtbl -> put_PageSize(This,prop) ) 

#define CustomLabel_get_Valid(This,prop)	\
    ( (This)->lpVtbl -> get_Valid(This,prop) ) 

#define CustomLabel_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CustomLabel_INTERFACE_DEFINED__ */


#ifndef __TablesOfContents_INTERFACE_DEFINED__
#define __TablesOfContents_INTERFACE_DEFINED__

/* interface TablesOfContents */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TablesOfContents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020914-0000-0000-C000-000000000046")
    TablesOfContents : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ WdTocFormat *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Format( 
            /* [in] */ WdTocFormat prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ TableOfContents **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AddOld( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *UseHeadingStyles,
            /* [optional][in] */ VARIANT *UpperHeadingLevel,
            /* [optional][in] */ VARIANT *LowerHeadingLevel,
            /* [optional][in] */ VARIANT *UseFields,
            /* [optional][in] */ VARIANT *TableID,
            /* [optional][in] */ VARIANT *RightAlignPageNumbers,
            /* [optional][in] */ VARIANT *IncludePageNumbers,
            /* [optional][in] */ VARIANT *AddedStyles,
            /* [retval][out] */ TableOfContents **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MarkEntry( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Entry,
            /* [optional][in] */ VARIANT *EntryAutoText,
            /* [optional][in] */ VARIANT *TableID,
            /* [optional][in] */ VARIANT *Level,
            /* [retval][out] */ Field **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Add2000( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *UseHeadingStyles,
            /* [optional][in] */ VARIANT *UpperHeadingLevel,
            /* [optional][in] */ VARIANT *LowerHeadingLevel,
            /* [optional][in] */ VARIANT *UseFields,
            /* [optional][in] */ VARIANT *TableID,
            /* [optional][in] */ VARIANT *RightAlignPageNumbers,
            /* [optional][in] */ VARIANT *IncludePageNumbers,
            /* [optional][in] */ VARIANT *AddedStyles,
            /* [optional][in] */ VARIANT *UseHyperlinks,
            /* [optional][in] */ VARIANT *HidePageNumbersInWeb,
            /* [retval][out] */ TableOfContents **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *UseHeadingStyles,
            /* [optional][in] */ VARIANT *UpperHeadingLevel,
            /* [optional][in] */ VARIANT *LowerHeadingLevel,
            /* [optional][in] */ VARIANT *UseFields,
            /* [optional][in] */ VARIANT *TableID,
            /* [optional][in] */ VARIANT *RightAlignPageNumbers,
            /* [optional][in] */ VARIANT *IncludePageNumbers,
            /* [optional][in] */ VARIANT *AddedStyles,
            /* [optional][in] */ VARIANT *UseHyperlinks,
            /* [optional][in] */ VARIANT *HidePageNumbersInWeb,
            /* [optional][in] */ VARIANT *UseOutlineLevels,
            /* [retval][out] */ TableOfContents **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TablesOfContentsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TablesOfContents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TablesOfContents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TablesOfContents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TablesOfContents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TablesOfContents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TablesOfContents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TablesOfContents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TablesOfContents * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TablesOfContents * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TablesOfContents * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            TablesOfContents * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TablesOfContents * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            TablesOfContents * This,
            /* [retval][out] */ WdTocFormat *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Format )( 
            TablesOfContents * This,
            /* [in] */ WdTocFormat prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TablesOfContents * This,
            /* [in] */ long Index,
            /* [retval][out] */ TableOfContents **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AddOld )( 
            TablesOfContents * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *UseHeadingStyles,
            /* [optional][in] */ VARIANT *UpperHeadingLevel,
            /* [optional][in] */ VARIANT *LowerHeadingLevel,
            /* [optional][in] */ VARIANT *UseFields,
            /* [optional][in] */ VARIANT *TableID,
            /* [optional][in] */ VARIANT *RightAlignPageNumbers,
            /* [optional][in] */ VARIANT *IncludePageNumbers,
            /* [optional][in] */ VARIANT *AddedStyles,
            /* [retval][out] */ TableOfContents **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MarkEntry )( 
            TablesOfContents * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Entry,
            /* [optional][in] */ VARIANT *EntryAutoText,
            /* [optional][in] */ VARIANT *TableID,
            /* [optional][in] */ VARIANT *Level,
            /* [retval][out] */ Field **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Add2000 )( 
            TablesOfContents * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *UseHeadingStyles,
            /* [optional][in] */ VARIANT *UpperHeadingLevel,
            /* [optional][in] */ VARIANT *LowerHeadingLevel,
            /* [optional][in] */ VARIANT *UseFields,
            /* [optional][in] */ VARIANT *TableID,
            /* [optional][in] */ VARIANT *RightAlignPageNumbers,
            /* [optional][in] */ VARIANT *IncludePageNumbers,
            /* [optional][in] */ VARIANT *AddedStyles,
            /* [optional][in] */ VARIANT *UseHyperlinks,
            /* [optional][in] */ VARIANT *HidePageNumbersInWeb,
            /* [retval][out] */ TableOfContents **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            TablesOfContents * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *UseHeadingStyles,
            /* [optional][in] */ VARIANT *UpperHeadingLevel,
            /* [optional][in] */ VARIANT *LowerHeadingLevel,
            /* [optional][in] */ VARIANT *UseFields,
            /* [optional][in] */ VARIANT *TableID,
            /* [optional][in] */ VARIANT *RightAlignPageNumbers,
            /* [optional][in] */ VARIANT *IncludePageNumbers,
            /* [optional][in] */ VARIANT *AddedStyles,
            /* [optional][in] */ VARIANT *UseHyperlinks,
            /* [optional][in] */ VARIANT *HidePageNumbersInWeb,
            /* [optional][in] */ VARIANT *UseOutlineLevels,
            /* [retval][out] */ TableOfContents **prop);
        
        END_INTERFACE
    } TablesOfContentsVtbl;

    interface TablesOfContents
    {
        CONST_VTBL struct TablesOfContentsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TablesOfContents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TablesOfContents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TablesOfContents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TablesOfContents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TablesOfContents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TablesOfContents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TablesOfContents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TablesOfContents_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TablesOfContents_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TablesOfContents_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TablesOfContents_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define TablesOfContents_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define TablesOfContents_get_Format(This,prop)	\
    ( (This)->lpVtbl -> get_Format(This,prop) ) 

#define TablesOfContents_put_Format(This,prop)	\
    ( (This)->lpVtbl -> put_Format(This,prop) ) 

#define TablesOfContents_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define TablesOfContents_AddOld(This,Range,UseHeadingStyles,UpperHeadingLevel,LowerHeadingLevel,UseFields,TableID,RightAlignPageNumbers,IncludePageNumbers,AddedStyles,prop)	\
    ( (This)->lpVtbl -> AddOld(This,Range,UseHeadingStyles,UpperHeadingLevel,LowerHeadingLevel,UseFields,TableID,RightAlignPageNumbers,IncludePageNumbers,AddedStyles,prop) ) 

#define TablesOfContents_MarkEntry(This,Range,Entry,EntryAutoText,TableID,Level,prop)	\
    ( (This)->lpVtbl -> MarkEntry(This,Range,Entry,EntryAutoText,TableID,Level,prop) ) 

#define TablesOfContents_Add2000(This,Range,UseHeadingStyles,UpperHeadingLevel,LowerHeadingLevel,UseFields,TableID,RightAlignPageNumbers,IncludePageNumbers,AddedStyles,UseHyperlinks,HidePageNumbersInWeb,prop)	\
    ( (This)->lpVtbl -> Add2000(This,Range,UseHeadingStyles,UpperHeadingLevel,LowerHeadingLevel,UseFields,TableID,RightAlignPageNumbers,IncludePageNumbers,AddedStyles,UseHyperlinks,HidePageNumbersInWeb,prop) ) 

#define TablesOfContents_Add(This,Range,UseHeadingStyles,UpperHeadingLevel,LowerHeadingLevel,UseFields,TableID,RightAlignPageNumbers,IncludePageNumbers,AddedStyles,UseHyperlinks,HidePageNumbersInWeb,UseOutlineLevels,prop)	\
    ( (This)->lpVtbl -> Add(This,Range,UseHeadingStyles,UpperHeadingLevel,LowerHeadingLevel,UseFields,TableID,RightAlignPageNumbers,IncludePageNumbers,AddedStyles,UseHyperlinks,HidePageNumbersInWeb,UseOutlineLevels,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TablesOfContents_INTERFACE_DEFINED__ */


#ifndef __TableOfContents_INTERFACE_DEFINED__
#define __TableOfContents_INTERFACE_DEFINED__

/* interface TableOfContents */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TableOfContents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020913-0000-0000-C000-000000000046")
    TableOfContents : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseHeadingStyles( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseHeadingStyles( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseFields( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseFields( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UpperHeadingLevel( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UpperHeadingLevel( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LowerHeadingLevel( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LowerHeadingLevel( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TableID( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TableID( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeadingStyles( 
            /* [retval][out] */ HeadingStyles **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RightAlignPageNumbers( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RightAlignPageNumbers( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludePageNumbers( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludePageNumbers( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TabLeader( 
            /* [retval][out] */ WdTabLeader *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TabLeader( 
            /* [in] */ WdTabLeader prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UpdatePageNumbers( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseHyperlinks( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseHyperlinks( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HidePageNumbersInWeb( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HidePageNumbersInWeb( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TableOfContentsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TableOfContents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TableOfContents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TableOfContents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TableOfContents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TableOfContents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TableOfContents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TableOfContents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TableOfContents * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TableOfContents * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TableOfContents * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseHeadingStyles )( 
            TableOfContents * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseHeadingStyles )( 
            TableOfContents * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseFields )( 
            TableOfContents * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseFields )( 
            TableOfContents * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpperHeadingLevel )( 
            TableOfContents * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpperHeadingLevel )( 
            TableOfContents * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LowerHeadingLevel )( 
            TableOfContents * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LowerHeadingLevel )( 
            TableOfContents * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TableID )( 
            TableOfContents * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TableID )( 
            TableOfContents * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeadingStyles )( 
            TableOfContents * This,
            /* [retval][out] */ HeadingStyles **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RightAlignPageNumbers )( 
            TableOfContents * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RightAlignPageNumbers )( 
            TableOfContents * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludePageNumbers )( 
            TableOfContents * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludePageNumbers )( 
            TableOfContents * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            TableOfContents * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabLeader )( 
            TableOfContents * This,
            /* [retval][out] */ WdTabLeader *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TabLeader )( 
            TableOfContents * This,
            /* [in] */ WdTabLeader prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            TableOfContents * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UpdatePageNumbers )( 
            TableOfContents * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            TableOfContents * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseHyperlinks )( 
            TableOfContents * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseHyperlinks )( 
            TableOfContents * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HidePageNumbersInWeb )( 
            TableOfContents * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HidePageNumbersInWeb )( 
            TableOfContents * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } TableOfContentsVtbl;

    interface TableOfContents
    {
        CONST_VTBL struct TableOfContentsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TableOfContents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TableOfContents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TableOfContents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TableOfContents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TableOfContents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TableOfContents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TableOfContents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TableOfContents_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TableOfContents_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TableOfContents_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TableOfContents_get_UseHeadingStyles(This,prop)	\
    ( (This)->lpVtbl -> get_UseHeadingStyles(This,prop) ) 

#define TableOfContents_put_UseHeadingStyles(This,prop)	\
    ( (This)->lpVtbl -> put_UseHeadingStyles(This,prop) ) 

#define TableOfContents_get_UseFields(This,prop)	\
    ( (This)->lpVtbl -> get_UseFields(This,prop) ) 

#define TableOfContents_put_UseFields(This,prop)	\
    ( (This)->lpVtbl -> put_UseFields(This,prop) ) 

#define TableOfContents_get_UpperHeadingLevel(This,prop)	\
    ( (This)->lpVtbl -> get_UpperHeadingLevel(This,prop) ) 

#define TableOfContents_put_UpperHeadingLevel(This,prop)	\
    ( (This)->lpVtbl -> put_UpperHeadingLevel(This,prop) ) 

#define TableOfContents_get_LowerHeadingLevel(This,prop)	\
    ( (This)->lpVtbl -> get_LowerHeadingLevel(This,prop) ) 

#define TableOfContents_put_LowerHeadingLevel(This,prop)	\
    ( (This)->lpVtbl -> put_LowerHeadingLevel(This,prop) ) 

#define TableOfContents_get_TableID(This,prop)	\
    ( (This)->lpVtbl -> get_TableID(This,prop) ) 

#define TableOfContents_put_TableID(This,prop)	\
    ( (This)->lpVtbl -> put_TableID(This,prop) ) 

#define TableOfContents_get_HeadingStyles(This,prop)	\
    ( (This)->lpVtbl -> get_HeadingStyles(This,prop) ) 

#define TableOfContents_get_RightAlignPageNumbers(This,prop)	\
    ( (This)->lpVtbl -> get_RightAlignPageNumbers(This,prop) ) 

#define TableOfContents_put_RightAlignPageNumbers(This,prop)	\
    ( (This)->lpVtbl -> put_RightAlignPageNumbers(This,prop) ) 

#define TableOfContents_get_IncludePageNumbers(This,prop)	\
    ( (This)->lpVtbl -> get_IncludePageNumbers(This,prop) ) 

#define TableOfContents_put_IncludePageNumbers(This,prop)	\
    ( (This)->lpVtbl -> put_IncludePageNumbers(This,prop) ) 

#define TableOfContents_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define TableOfContents_get_TabLeader(This,prop)	\
    ( (This)->lpVtbl -> get_TabLeader(This,prop) ) 

#define TableOfContents_put_TabLeader(This,prop)	\
    ( (This)->lpVtbl -> put_TabLeader(This,prop) ) 

#define TableOfContents_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define TableOfContents_UpdatePageNumbers(This)	\
    ( (This)->lpVtbl -> UpdatePageNumbers(This) ) 

#define TableOfContents_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define TableOfContents_get_UseHyperlinks(This,prop)	\
    ( (This)->lpVtbl -> get_UseHyperlinks(This,prop) ) 

#define TableOfContents_put_UseHyperlinks(This,prop)	\
    ( (This)->lpVtbl -> put_UseHyperlinks(This,prop) ) 

#define TableOfContents_get_HidePageNumbersInWeb(This,prop)	\
    ( (This)->lpVtbl -> get_HidePageNumbersInWeb(This,prop) ) 

#define TableOfContents_put_HidePageNumbersInWeb(This,prop)	\
    ( (This)->lpVtbl -> put_HidePageNumbersInWeb(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TableOfContents_INTERFACE_DEFINED__ */


#ifndef __TablesOfAuthorities_INTERFACE_DEFINED__
#define __TablesOfAuthorities_INTERFACE_DEFINED__

/* interface TablesOfAuthorities */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TablesOfAuthorities;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020912-0000-0000-C000-000000000046")
    TablesOfAuthorities : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ WdToaFormat *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Format( 
            /* [in] */ WdToaFormat prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ TableOfAuthorities **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Category,
            /* [optional][in] */ VARIANT *Bookmark,
            /* [optional][in] */ VARIANT *Passim,
            /* [optional][in] */ VARIANT *KeepEntryFormatting,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *IncludeSequenceName,
            /* [optional][in] */ VARIANT *EntrySeparator,
            /* [optional][in] */ VARIANT *PageRangeSeparator,
            /* [optional][in] */ VARIANT *IncludeCategoryHeader,
            /* [optional][in] */ VARIANT *PageNumberSeparator,
            /* [retval][out] */ TableOfAuthorities **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextCitation( 
            /* [in] */ BSTR ShortCitation) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MarkCitation( 
            /* [in] */ Range *Range,
            /* [in] */ BSTR ShortCitation,
            /* [optional][in] */ VARIANT *LongCitation,
            /* [optional][in] */ VARIANT *LongCitationAutoText,
            /* [optional][in] */ VARIANT *Category,
            /* [retval][out] */ Field **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MarkAllCitations( 
            /* [in] */ BSTR ShortCitation,
            /* [optional][in] */ VARIANT *LongCitation,
            /* [optional][in] */ VARIANT *LongCitationAutoText,
            /* [optional][in] */ VARIANT *Category) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TablesOfAuthoritiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TablesOfAuthorities * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TablesOfAuthorities * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TablesOfAuthorities * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TablesOfAuthorities * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TablesOfAuthorities * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TablesOfAuthorities * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TablesOfAuthorities * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TablesOfAuthorities * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TablesOfAuthorities * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TablesOfAuthorities * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            TablesOfAuthorities * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TablesOfAuthorities * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            TablesOfAuthorities * This,
            /* [retval][out] */ WdToaFormat *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Format )( 
            TablesOfAuthorities * This,
            /* [in] */ WdToaFormat prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TablesOfAuthorities * This,
            /* [in] */ long Index,
            /* [retval][out] */ TableOfAuthorities **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            TablesOfAuthorities * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Category,
            /* [optional][in] */ VARIANT *Bookmark,
            /* [optional][in] */ VARIANT *Passim,
            /* [optional][in] */ VARIANT *KeepEntryFormatting,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *IncludeSequenceName,
            /* [optional][in] */ VARIANT *EntrySeparator,
            /* [optional][in] */ VARIANT *PageRangeSeparator,
            /* [optional][in] */ VARIANT *IncludeCategoryHeader,
            /* [optional][in] */ VARIANT *PageNumberSeparator,
            /* [retval][out] */ TableOfAuthorities **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextCitation )( 
            TablesOfAuthorities * This,
            /* [in] */ BSTR ShortCitation);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MarkCitation )( 
            TablesOfAuthorities * This,
            /* [in] */ Range *Range,
            /* [in] */ BSTR ShortCitation,
            /* [optional][in] */ VARIANT *LongCitation,
            /* [optional][in] */ VARIANT *LongCitationAutoText,
            /* [optional][in] */ VARIANT *Category,
            /* [retval][out] */ Field **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MarkAllCitations )( 
            TablesOfAuthorities * This,
            /* [in] */ BSTR ShortCitation,
            /* [optional][in] */ VARIANT *LongCitation,
            /* [optional][in] */ VARIANT *LongCitationAutoText,
            /* [optional][in] */ VARIANT *Category);
        
        END_INTERFACE
    } TablesOfAuthoritiesVtbl;

    interface TablesOfAuthorities
    {
        CONST_VTBL struct TablesOfAuthoritiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TablesOfAuthorities_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TablesOfAuthorities_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TablesOfAuthorities_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TablesOfAuthorities_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TablesOfAuthorities_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TablesOfAuthorities_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TablesOfAuthorities_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TablesOfAuthorities_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TablesOfAuthorities_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TablesOfAuthorities_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TablesOfAuthorities_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define TablesOfAuthorities_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define TablesOfAuthorities_get_Format(This,prop)	\
    ( (This)->lpVtbl -> get_Format(This,prop) ) 

#define TablesOfAuthorities_put_Format(This,prop)	\
    ( (This)->lpVtbl -> put_Format(This,prop) ) 

#define TablesOfAuthorities_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define TablesOfAuthorities_Add(This,Range,Category,Bookmark,Passim,KeepEntryFormatting,Separator,IncludeSequenceName,EntrySeparator,PageRangeSeparator,IncludeCategoryHeader,PageNumberSeparator,prop)	\
    ( (This)->lpVtbl -> Add(This,Range,Category,Bookmark,Passim,KeepEntryFormatting,Separator,IncludeSequenceName,EntrySeparator,PageRangeSeparator,IncludeCategoryHeader,PageNumberSeparator,prop) ) 

#define TablesOfAuthorities_NextCitation(This,ShortCitation)	\
    ( (This)->lpVtbl -> NextCitation(This,ShortCitation) ) 

#define TablesOfAuthorities_MarkCitation(This,Range,ShortCitation,LongCitation,LongCitationAutoText,Category,prop)	\
    ( (This)->lpVtbl -> MarkCitation(This,Range,ShortCitation,LongCitation,LongCitationAutoText,Category,prop) ) 

#define TablesOfAuthorities_MarkAllCitations(This,ShortCitation,LongCitation,LongCitationAutoText,Category)	\
    ( (This)->lpVtbl -> MarkAllCitations(This,ShortCitation,LongCitation,LongCitationAutoText,Category) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TablesOfAuthorities_INTERFACE_DEFINED__ */


#ifndef __TableOfAuthorities_INTERFACE_DEFINED__
#define __TableOfAuthorities_INTERFACE_DEFINED__

/* interface TableOfAuthorities */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TableOfAuthorities;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020911-0000-0000-C000-000000000046")
    TableOfAuthorities : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Passim( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Passim( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeepEntryFormatting( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_KeepEntryFormatting( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Category( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Category( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bookmark( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Bookmark( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Separator( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Separator( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludeSequenceName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludeSequenceName( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EntrySeparator( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EntrySeparator( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageRangeSeparator( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageRangeSeparator( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludeCategoryHeader( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludeCategoryHeader( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageNumberSeparator( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageNumberSeparator( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TabLeader( 
            /* [retval][out] */ WdTabLeader *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TabLeader( 
            /* [in] */ WdTabLeader prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TableOfAuthoritiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TableOfAuthorities * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TableOfAuthorities * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TableOfAuthorities * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TableOfAuthorities * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TableOfAuthorities * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TableOfAuthorities * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TableOfAuthorities * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TableOfAuthorities * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TableOfAuthorities * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TableOfAuthorities * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Passim )( 
            TableOfAuthorities * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Passim )( 
            TableOfAuthorities * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeepEntryFormatting )( 
            TableOfAuthorities * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_KeepEntryFormatting )( 
            TableOfAuthorities * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            TableOfAuthorities * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Category )( 
            TableOfAuthorities * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bookmark )( 
            TableOfAuthorities * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Bookmark )( 
            TableOfAuthorities * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Separator )( 
            TableOfAuthorities * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Separator )( 
            TableOfAuthorities * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeSequenceName )( 
            TableOfAuthorities * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeSequenceName )( 
            TableOfAuthorities * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EntrySeparator )( 
            TableOfAuthorities * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EntrySeparator )( 
            TableOfAuthorities * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageRangeSeparator )( 
            TableOfAuthorities * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageRangeSeparator )( 
            TableOfAuthorities * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeCategoryHeader )( 
            TableOfAuthorities * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeCategoryHeader )( 
            TableOfAuthorities * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageNumberSeparator )( 
            TableOfAuthorities * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageNumberSeparator )( 
            TableOfAuthorities * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            TableOfAuthorities * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabLeader )( 
            TableOfAuthorities * This,
            /* [retval][out] */ WdTabLeader *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TabLeader )( 
            TableOfAuthorities * This,
            /* [in] */ WdTabLeader prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            TableOfAuthorities * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            TableOfAuthorities * This);
        
        END_INTERFACE
    } TableOfAuthoritiesVtbl;

    interface TableOfAuthorities
    {
        CONST_VTBL struct TableOfAuthoritiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TableOfAuthorities_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TableOfAuthorities_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TableOfAuthorities_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TableOfAuthorities_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TableOfAuthorities_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TableOfAuthorities_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TableOfAuthorities_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TableOfAuthorities_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TableOfAuthorities_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TableOfAuthorities_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TableOfAuthorities_get_Passim(This,prop)	\
    ( (This)->lpVtbl -> get_Passim(This,prop) ) 

#define TableOfAuthorities_put_Passim(This,prop)	\
    ( (This)->lpVtbl -> put_Passim(This,prop) ) 

#define TableOfAuthorities_get_KeepEntryFormatting(This,prop)	\
    ( (This)->lpVtbl -> get_KeepEntryFormatting(This,prop) ) 

#define TableOfAuthorities_put_KeepEntryFormatting(This,prop)	\
    ( (This)->lpVtbl -> put_KeepEntryFormatting(This,prop) ) 

#define TableOfAuthorities_get_Category(This,prop)	\
    ( (This)->lpVtbl -> get_Category(This,prop) ) 

#define TableOfAuthorities_put_Category(This,prop)	\
    ( (This)->lpVtbl -> put_Category(This,prop) ) 

#define TableOfAuthorities_get_Bookmark(This,prop)	\
    ( (This)->lpVtbl -> get_Bookmark(This,prop) ) 

#define TableOfAuthorities_put_Bookmark(This,prop)	\
    ( (This)->lpVtbl -> put_Bookmark(This,prop) ) 

#define TableOfAuthorities_get_Separator(This,prop)	\
    ( (This)->lpVtbl -> get_Separator(This,prop) ) 

#define TableOfAuthorities_put_Separator(This,prop)	\
    ( (This)->lpVtbl -> put_Separator(This,prop) ) 

#define TableOfAuthorities_get_IncludeSequenceName(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeSequenceName(This,prop) ) 

#define TableOfAuthorities_put_IncludeSequenceName(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeSequenceName(This,prop) ) 

#define TableOfAuthorities_get_EntrySeparator(This,prop)	\
    ( (This)->lpVtbl -> get_EntrySeparator(This,prop) ) 

#define TableOfAuthorities_put_EntrySeparator(This,prop)	\
    ( (This)->lpVtbl -> put_EntrySeparator(This,prop) ) 

#define TableOfAuthorities_get_PageRangeSeparator(This,prop)	\
    ( (This)->lpVtbl -> get_PageRangeSeparator(This,prop) ) 

#define TableOfAuthorities_put_PageRangeSeparator(This,prop)	\
    ( (This)->lpVtbl -> put_PageRangeSeparator(This,prop) ) 

#define TableOfAuthorities_get_IncludeCategoryHeader(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeCategoryHeader(This,prop) ) 

#define TableOfAuthorities_put_IncludeCategoryHeader(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeCategoryHeader(This,prop) ) 

#define TableOfAuthorities_get_PageNumberSeparator(This,prop)	\
    ( (This)->lpVtbl -> get_PageNumberSeparator(This,prop) ) 

#define TableOfAuthorities_put_PageNumberSeparator(This,prop)	\
    ( (This)->lpVtbl -> put_PageNumberSeparator(This,prop) ) 

#define TableOfAuthorities_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define TableOfAuthorities_get_TabLeader(This,prop)	\
    ( (This)->lpVtbl -> get_TabLeader(This,prop) ) 

#define TableOfAuthorities_put_TabLeader(This,prop)	\
    ( (This)->lpVtbl -> put_TabLeader(This,prop) ) 

#define TableOfAuthorities_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define TableOfAuthorities_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TableOfAuthorities_INTERFACE_DEFINED__ */


#ifndef __Dialogs_INTERFACE_DEFINED__
#define __Dialogs_INTERFACE_DEFINED__

/* interface Dialogs */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Dialogs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020910-0000-0000-C000-000000000046")
    Dialogs : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ WdWordDialog Index,
            /* [retval][out] */ Dialog **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DialogsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Dialogs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Dialogs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Dialogs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Dialogs * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Dialogs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Dialogs * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Dialogs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Dialogs * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Dialogs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Dialogs * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Dialogs * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Dialogs * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Dialogs * This,
            /* [in] */ WdWordDialog Index,
            /* [retval][out] */ Dialog **prop);
        
        END_INTERFACE
    } DialogsVtbl;

    interface Dialogs
    {
        CONST_VTBL struct DialogsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Dialogs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Dialogs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Dialogs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Dialogs_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Dialogs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Dialogs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Dialogs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Dialogs_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Dialogs_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Dialogs_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Dialogs_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Dialogs_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Dialogs_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Dialogs_INTERFACE_DEFINED__ */


#ifndef __Dialog_INTERFACE_DEFINED__
#define __Dialog_INTERFACE_DEFINED__

/* interface Dialog */
/* [object][oleautomation][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Dialog;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209B8-0000-0000-C000-000000000046")
    Dialog : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultTab( 
            /* [retval][out] */ WdWordDialogTab *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultTab( 
            /* [in] */ WdWordDialogTab prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdWordDialog *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Show( 
            /* [optional][in] */ VARIANT *TimeOut,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Display( 
            /* [optional][in] */ VARIANT *TimeOut,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Execute( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DialogVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Dialog * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Dialog * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Dialog * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Dialog * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Dialog * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Dialog * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Dialog * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Dialog * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Dialog * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Dialog * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultTab )( 
            Dialog * This,
            /* [retval][out] */ WdWordDialogTab *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultTab )( 
            Dialog * This,
            /* [in] */ WdWordDialogTab prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Dialog * This,
            /* [retval][out] */ WdWordDialog *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Show )( 
            Dialog * This,
            /* [optional][in] */ VARIANT *TimeOut,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Display )( 
            Dialog * This,
            /* [optional][in] */ VARIANT *TimeOut,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Execute )( 
            Dialog * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            Dialog * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandName )( 
            Dialog * This,
            /* [retval][out] */ BSTR *prop);
        
        END_INTERFACE
    } DialogVtbl;

    interface Dialog
    {
        CONST_VTBL struct DialogVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Dialog_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Dialog_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Dialog_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Dialog_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Dialog_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Dialog_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Dialog_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Dialog_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Dialog_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Dialog_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Dialog_get_DefaultTab(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultTab(This,prop) ) 

#define Dialog_put_DefaultTab(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultTab(This,prop) ) 

#define Dialog_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define Dialog_Show(This,TimeOut,prop)	\
    ( (This)->lpVtbl -> Show(This,TimeOut,prop) ) 

#define Dialog_Display(This,TimeOut,prop)	\
    ( (This)->lpVtbl -> Display(This,TimeOut,prop) ) 

#define Dialog_Execute(This)	\
    ( (This)->lpVtbl -> Execute(This) ) 

#define Dialog_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define Dialog_get_CommandName(This,prop)	\
    ( (This)->lpVtbl -> get_CommandName(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Dialog_INTERFACE_DEFINED__ */


#ifndef __PageSetup_INTERFACE_DEFINED__
#define __PageSetup_INTERFACE_DEFINED__

/* interface PageSetup */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_PageSetup;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020971-0000-0000-C000-000000000046")
    PageSetup : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TopMargin( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TopMargin( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BottomMargin( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BottomMargin( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeftMargin( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeftMargin( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RightMargin( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RightMargin( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Gutter( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Gutter( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageWidth( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageWidth( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageHeight( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageHeight( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ WdOrientation *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Orientation( 
            /* [in] */ WdOrientation prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstPageTray( 
            /* [retval][out] */ WdPaperTray *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FirstPageTray( 
            /* [in] */ WdPaperTray prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OtherPagesTray( 
            /* [retval][out] */ WdPaperTray *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OtherPagesTray( 
            /* [in] */ WdPaperTray prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalAlignment( 
            /* [retval][out] */ WdVerticalAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VerticalAlignment( 
            /* [in] */ WdVerticalAlignment prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MirrorMargins( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MirrorMargins( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeaderDistance( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HeaderDistance( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FooterDistance( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FooterDistance( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SectionStart( 
            /* [retval][out] */ WdSectionStart *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SectionStart( 
            /* [in] */ WdSectionStart prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OddAndEvenPagesHeaderFooter( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OddAndEvenPagesHeaderFooter( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DifferentFirstPageHeaderFooter( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DifferentFirstPageHeaderFooter( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressEndnotes( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressEndnotes( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineNumbering( 
            /* [retval][out] */ LineNumbering **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineNumbering( 
            /* [in] */ LineNumbering *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextColumns( 
            /* [retval][out] */ TextColumns **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextColumns( 
            /* [in] */ TextColumns *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PaperSize( 
            /* [retval][out] */ WdPaperSize *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PaperSize( 
            /* [in] */ WdPaperSize prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TwoPagesOnOne( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TwoPagesOnOne( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_GutterOnTop( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_GutterOnTop( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CharsLine( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CharsLine( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinesPage( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LinesPage( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowGrid( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowGrid( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TogglePortrait( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetAsTemplateDefault( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GutterStyle( 
            /* [retval][out] */ WdGutterStyleOld *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GutterStyle( 
            /* [in] */ WdGutterStyleOld prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SectionDirection( 
            /* [retval][out] */ WdSectionDirection *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SectionDirection( 
            /* [in] */ WdSectionDirection prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LayoutMode( 
            /* [retval][out] */ WdLayoutMode *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LayoutMode( 
            /* [in] */ WdLayoutMode prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GutterPos( 
            /* [retval][out] */ WdGutterStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GutterPos( 
            /* [in] */ WdGutterStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BookFoldPrinting( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BookFoldPrinting( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BookFoldRevPrinting( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BookFoldRevPrinting( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BookFoldPrintingSheets( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BookFoldPrintingSheets( 
            /* [in] */ long prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PageSetupVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PageSetup * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PageSetup * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PageSetup * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PageSetup * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PageSetup * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PageSetup * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PageSetup * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            PageSetup * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            PageSetup * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PageSetup * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TopMargin )( 
            PageSetup * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TopMargin )( 
            PageSetup * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BottomMargin )( 
            PageSetup * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BottomMargin )( 
            PageSetup * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeftMargin )( 
            PageSetup * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeftMargin )( 
            PageSetup * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RightMargin )( 
            PageSetup * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RightMargin )( 
            PageSetup * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Gutter )( 
            PageSetup * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Gutter )( 
            PageSetup * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageWidth )( 
            PageSetup * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageWidth )( 
            PageSetup * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageHeight )( 
            PageSetup * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageHeight )( 
            PageSetup * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Orientation )( 
            PageSetup * This,
            /* [retval][out] */ WdOrientation *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Orientation )( 
            PageSetup * This,
            /* [in] */ WdOrientation prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstPageTray )( 
            PageSetup * This,
            /* [retval][out] */ WdPaperTray *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FirstPageTray )( 
            PageSetup * This,
            /* [in] */ WdPaperTray prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OtherPagesTray )( 
            PageSetup * This,
            /* [retval][out] */ WdPaperTray *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OtherPagesTray )( 
            PageSetup * This,
            /* [in] */ WdPaperTray prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )( 
            PageSetup * This,
            /* [retval][out] */ WdVerticalAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )( 
            PageSetup * This,
            /* [in] */ WdVerticalAlignment prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MirrorMargins )( 
            PageSetup * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MirrorMargins )( 
            PageSetup * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeaderDistance )( 
            PageSetup * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HeaderDistance )( 
            PageSetup * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FooterDistance )( 
            PageSetup * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FooterDistance )( 
            PageSetup * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SectionStart )( 
            PageSetup * This,
            /* [retval][out] */ WdSectionStart *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SectionStart )( 
            PageSetup * This,
            /* [in] */ WdSectionStart prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OddAndEvenPagesHeaderFooter )( 
            PageSetup * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OddAndEvenPagesHeaderFooter )( 
            PageSetup * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DifferentFirstPageHeaderFooter )( 
            PageSetup * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DifferentFirstPageHeaderFooter )( 
            PageSetup * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressEndnotes )( 
            PageSetup * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressEndnotes )( 
            PageSetup * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineNumbering )( 
            PageSetup * This,
            /* [retval][out] */ LineNumbering **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineNumbering )( 
            PageSetup * This,
            /* [in] */ LineNumbering *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextColumns )( 
            PageSetup * This,
            /* [retval][out] */ TextColumns **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextColumns )( 
            PageSetup * This,
            /* [in] */ TextColumns *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PaperSize )( 
            PageSetup * This,
            /* [retval][out] */ WdPaperSize *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PaperSize )( 
            PageSetup * This,
            /* [in] */ WdPaperSize prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TwoPagesOnOne )( 
            PageSetup * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TwoPagesOnOne )( 
            PageSetup * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GutterOnTop )( 
            PageSetup * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GutterOnTop )( 
            PageSetup * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CharsLine )( 
            PageSetup * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CharsLine )( 
            PageSetup * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinesPage )( 
            PageSetup * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinesPage )( 
            PageSetup * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowGrid )( 
            PageSetup * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowGrid )( 
            PageSetup * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TogglePortrait )( 
            PageSetup * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetAsTemplateDefault )( 
            PageSetup * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GutterStyle )( 
            PageSetup * This,
            /* [retval][out] */ WdGutterStyleOld *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GutterStyle )( 
            PageSetup * This,
            /* [in] */ WdGutterStyleOld prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SectionDirection )( 
            PageSetup * This,
            /* [retval][out] */ WdSectionDirection *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SectionDirection )( 
            PageSetup * This,
            /* [in] */ WdSectionDirection prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LayoutMode )( 
            PageSetup * This,
            /* [retval][out] */ WdLayoutMode *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LayoutMode )( 
            PageSetup * This,
            /* [in] */ WdLayoutMode prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GutterPos )( 
            PageSetup * This,
            /* [retval][out] */ WdGutterStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GutterPos )( 
            PageSetup * This,
            /* [in] */ WdGutterStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BookFoldPrinting )( 
            PageSetup * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BookFoldPrinting )( 
            PageSetup * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BookFoldRevPrinting )( 
            PageSetup * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BookFoldRevPrinting )( 
            PageSetup * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BookFoldPrintingSheets )( 
            PageSetup * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BookFoldPrintingSheets )( 
            PageSetup * This,
            /* [in] */ long prop);
        
        END_INTERFACE
    } PageSetupVtbl;

    interface PageSetup
    {
        CONST_VTBL struct PageSetupVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PageSetup_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PageSetup_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PageSetup_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PageSetup_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PageSetup_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PageSetup_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PageSetup_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PageSetup_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define PageSetup_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define PageSetup_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define PageSetup_get_TopMargin(This,prop)	\
    ( (This)->lpVtbl -> get_TopMargin(This,prop) ) 

#define PageSetup_put_TopMargin(This,prop)	\
    ( (This)->lpVtbl -> put_TopMargin(This,prop) ) 

#define PageSetup_get_BottomMargin(This,prop)	\
    ( (This)->lpVtbl -> get_BottomMargin(This,prop) ) 

#define PageSetup_put_BottomMargin(This,prop)	\
    ( (This)->lpVtbl -> put_BottomMargin(This,prop) ) 

#define PageSetup_get_LeftMargin(This,prop)	\
    ( (This)->lpVtbl -> get_LeftMargin(This,prop) ) 

#define PageSetup_put_LeftMargin(This,prop)	\
    ( (This)->lpVtbl -> put_LeftMargin(This,prop) ) 

#define PageSetup_get_RightMargin(This,prop)	\
    ( (This)->lpVtbl -> get_RightMargin(This,prop) ) 

#define PageSetup_put_RightMargin(This,prop)	\
    ( (This)->lpVtbl -> put_RightMargin(This,prop) ) 

#define PageSetup_get_Gutter(This,prop)	\
    ( (This)->lpVtbl -> get_Gutter(This,prop) ) 

#define PageSetup_put_Gutter(This,prop)	\
    ( (This)->lpVtbl -> put_Gutter(This,prop) ) 

#define PageSetup_get_PageWidth(This,prop)	\
    ( (This)->lpVtbl -> get_PageWidth(This,prop) ) 

#define PageSetup_put_PageWidth(This,prop)	\
    ( (This)->lpVtbl -> put_PageWidth(This,prop) ) 

#define PageSetup_get_PageHeight(This,prop)	\
    ( (This)->lpVtbl -> get_PageHeight(This,prop) ) 

#define PageSetup_put_PageHeight(This,prop)	\
    ( (This)->lpVtbl -> put_PageHeight(This,prop) ) 

#define PageSetup_get_Orientation(This,prop)	\
    ( (This)->lpVtbl -> get_Orientation(This,prop) ) 

#define PageSetup_put_Orientation(This,prop)	\
    ( (This)->lpVtbl -> put_Orientation(This,prop) ) 

#define PageSetup_get_FirstPageTray(This,prop)	\
    ( (This)->lpVtbl -> get_FirstPageTray(This,prop) ) 

#define PageSetup_put_FirstPageTray(This,prop)	\
    ( (This)->lpVtbl -> put_FirstPageTray(This,prop) ) 

#define PageSetup_get_OtherPagesTray(This,prop)	\
    ( (This)->lpVtbl -> get_OtherPagesTray(This,prop) ) 

#define PageSetup_put_OtherPagesTray(This,prop)	\
    ( (This)->lpVtbl -> put_OtherPagesTray(This,prop) ) 

#define PageSetup_get_VerticalAlignment(This,prop)	\
    ( (This)->lpVtbl -> get_VerticalAlignment(This,prop) ) 

#define PageSetup_put_VerticalAlignment(This,prop)	\
    ( (This)->lpVtbl -> put_VerticalAlignment(This,prop) ) 

#define PageSetup_get_MirrorMargins(This,prop)	\
    ( (This)->lpVtbl -> get_MirrorMargins(This,prop) ) 

#define PageSetup_put_MirrorMargins(This,prop)	\
    ( (This)->lpVtbl -> put_MirrorMargins(This,prop) ) 

#define PageSetup_get_HeaderDistance(This,prop)	\
    ( (This)->lpVtbl -> get_HeaderDistance(This,prop) ) 

#define PageSetup_put_HeaderDistance(This,prop)	\
    ( (This)->lpVtbl -> put_HeaderDistance(This,prop) ) 

#define PageSetup_get_FooterDistance(This,prop)	\
    ( (This)->lpVtbl -> get_FooterDistance(This,prop) ) 

#define PageSetup_put_FooterDistance(This,prop)	\
    ( (This)->lpVtbl -> put_FooterDistance(This,prop) ) 

#define PageSetup_get_SectionStart(This,prop)	\
    ( (This)->lpVtbl -> get_SectionStart(This,prop) ) 

#define PageSetup_put_SectionStart(This,prop)	\
    ( (This)->lpVtbl -> put_SectionStart(This,prop) ) 

#define PageSetup_get_OddAndEvenPagesHeaderFooter(This,prop)	\
    ( (This)->lpVtbl -> get_OddAndEvenPagesHeaderFooter(This,prop) ) 

#define PageSetup_put_OddAndEvenPagesHeaderFooter(This,prop)	\
    ( (This)->lpVtbl -> put_OddAndEvenPagesHeaderFooter(This,prop) ) 

#define PageSetup_get_DifferentFirstPageHeaderFooter(This,prop)	\
    ( (This)->lpVtbl -> get_DifferentFirstPageHeaderFooter(This,prop) ) 

#define PageSetup_put_DifferentFirstPageHeaderFooter(This,prop)	\
    ( (This)->lpVtbl -> put_DifferentFirstPageHeaderFooter(This,prop) ) 

#define PageSetup_get_SuppressEndnotes(This,prop)	\
    ( (This)->lpVtbl -> get_SuppressEndnotes(This,prop) ) 

#define PageSetup_put_SuppressEndnotes(This,prop)	\
    ( (This)->lpVtbl -> put_SuppressEndnotes(This,prop) ) 

#define PageSetup_get_LineNumbering(This,prop)	\
    ( (This)->lpVtbl -> get_LineNumbering(This,prop) ) 

#define PageSetup_put_LineNumbering(This,prop)	\
    ( (This)->lpVtbl -> put_LineNumbering(This,prop) ) 

#define PageSetup_get_TextColumns(This,prop)	\
    ( (This)->lpVtbl -> get_TextColumns(This,prop) ) 

#define PageSetup_put_TextColumns(This,prop)	\
    ( (This)->lpVtbl -> put_TextColumns(This,prop) ) 

#define PageSetup_get_PaperSize(This,prop)	\
    ( (This)->lpVtbl -> get_PaperSize(This,prop) ) 

#define PageSetup_put_PaperSize(This,prop)	\
    ( (This)->lpVtbl -> put_PaperSize(This,prop) ) 

#define PageSetup_get_TwoPagesOnOne(This,prop)	\
    ( (This)->lpVtbl -> get_TwoPagesOnOne(This,prop) ) 

#define PageSetup_put_TwoPagesOnOne(This,prop)	\
    ( (This)->lpVtbl -> put_TwoPagesOnOne(This,prop) ) 

#define PageSetup_get_GutterOnTop(This,prop)	\
    ( (This)->lpVtbl -> get_GutterOnTop(This,prop) ) 

#define PageSetup_put_GutterOnTop(This,prop)	\
    ( (This)->lpVtbl -> put_GutterOnTop(This,prop) ) 

#define PageSetup_get_CharsLine(This,prop)	\
    ( (This)->lpVtbl -> get_CharsLine(This,prop) ) 

#define PageSetup_put_CharsLine(This,prop)	\
    ( (This)->lpVtbl -> put_CharsLine(This,prop) ) 

#define PageSetup_get_LinesPage(This,prop)	\
    ( (This)->lpVtbl -> get_LinesPage(This,prop) ) 

#define PageSetup_put_LinesPage(This,prop)	\
    ( (This)->lpVtbl -> put_LinesPage(This,prop) ) 

#define PageSetup_get_ShowGrid(This,prop)	\
    ( (This)->lpVtbl -> get_ShowGrid(This,prop) ) 

#define PageSetup_put_ShowGrid(This,prop)	\
    ( (This)->lpVtbl -> put_ShowGrid(This,prop) ) 

#define PageSetup_TogglePortrait(This)	\
    ( (This)->lpVtbl -> TogglePortrait(This) ) 

#define PageSetup_SetAsTemplateDefault(This)	\
    ( (This)->lpVtbl -> SetAsTemplateDefault(This) ) 

#define PageSetup_get_GutterStyle(This,prop)	\
    ( (This)->lpVtbl -> get_GutterStyle(This,prop) ) 

#define PageSetup_put_GutterStyle(This,prop)	\
    ( (This)->lpVtbl -> put_GutterStyle(This,prop) ) 

#define PageSetup_get_SectionDirection(This,prop)	\
    ( (This)->lpVtbl -> get_SectionDirection(This,prop) ) 

#define PageSetup_put_SectionDirection(This,prop)	\
    ( (This)->lpVtbl -> put_SectionDirection(This,prop) ) 

#define PageSetup_get_LayoutMode(This,prop)	\
    ( (This)->lpVtbl -> get_LayoutMode(This,prop) ) 

#define PageSetup_put_LayoutMode(This,prop)	\
    ( (This)->lpVtbl -> put_LayoutMode(This,prop) ) 

#define PageSetup_get_GutterPos(This,prop)	\
    ( (This)->lpVtbl -> get_GutterPos(This,prop) ) 

#define PageSetup_put_GutterPos(This,prop)	\
    ( (This)->lpVtbl -> put_GutterPos(This,prop) ) 

#define PageSetup_get_BookFoldPrinting(This,prop)	\
    ( (This)->lpVtbl -> get_BookFoldPrinting(This,prop) ) 

#define PageSetup_put_BookFoldPrinting(This,prop)	\
    ( (This)->lpVtbl -> put_BookFoldPrinting(This,prop) ) 

#define PageSetup_get_BookFoldRevPrinting(This,prop)	\
    ( (This)->lpVtbl -> get_BookFoldRevPrinting(This,prop) ) 

#define PageSetup_put_BookFoldRevPrinting(This,prop)	\
    ( (This)->lpVtbl -> put_BookFoldRevPrinting(This,prop) ) 

#define PageSetup_get_BookFoldPrintingSheets(This,prop)	\
    ( (This)->lpVtbl -> get_BookFoldPrintingSheets(This,prop) ) 

#define PageSetup_put_BookFoldPrintingSheets(This,prop)	\
    ( (This)->lpVtbl -> put_BookFoldPrintingSheets(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PageSetup_INTERFACE_DEFINED__ */


#ifndef __LineNumbering_INTERFACE_DEFINED__
#define __LineNumbering_INTERFACE_DEFINED__

/* interface LineNumbering */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_LineNumbering;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020972-0000-0000-C000-000000000046")
    LineNumbering : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RestartMode( 
            /* [retval][out] */ WdNumberingRule *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RestartMode( 
            /* [in] */ WdNumberingRule prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartingNumber( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartingNumber( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DistanceFromText( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DistanceFromText( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CountBy( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CountBy( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Active( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Active( 
            /* [in] */ long prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LineNumberingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            LineNumbering * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            LineNumbering * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            LineNumbering * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            LineNumbering * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            LineNumbering * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            LineNumbering * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            LineNumbering * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            LineNumbering * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            LineNumbering * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            LineNumbering * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RestartMode )( 
            LineNumbering * This,
            /* [retval][out] */ WdNumberingRule *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RestartMode )( 
            LineNumbering * This,
            /* [in] */ WdNumberingRule prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartingNumber )( 
            LineNumbering * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartingNumber )( 
            LineNumbering * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DistanceFromText )( 
            LineNumbering * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DistanceFromText )( 
            LineNumbering * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CountBy )( 
            LineNumbering * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CountBy )( 
            LineNumbering * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Active )( 
            LineNumbering * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Active )( 
            LineNumbering * This,
            /* [in] */ long prop);
        
        END_INTERFACE
    } LineNumberingVtbl;

    interface LineNumbering
    {
        CONST_VTBL struct LineNumberingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define LineNumbering_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define LineNumbering_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define LineNumbering_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define LineNumbering_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define LineNumbering_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define LineNumbering_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define LineNumbering_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define LineNumbering_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define LineNumbering_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define LineNumbering_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define LineNumbering_get_RestartMode(This,prop)	\
    ( (This)->lpVtbl -> get_RestartMode(This,prop) ) 

#define LineNumbering_put_RestartMode(This,prop)	\
    ( (This)->lpVtbl -> put_RestartMode(This,prop) ) 

#define LineNumbering_get_StartingNumber(This,prop)	\
    ( (This)->lpVtbl -> get_StartingNumber(This,prop) ) 

#define LineNumbering_put_StartingNumber(This,prop)	\
    ( (This)->lpVtbl -> put_StartingNumber(This,prop) ) 

#define LineNumbering_get_DistanceFromText(This,prop)	\
    ( (This)->lpVtbl -> get_DistanceFromText(This,prop) ) 

#define LineNumbering_put_DistanceFromText(This,prop)	\
    ( (This)->lpVtbl -> put_DistanceFromText(This,prop) ) 

#define LineNumbering_get_CountBy(This,prop)	\
    ( (This)->lpVtbl -> get_CountBy(This,prop) ) 

#define LineNumbering_put_CountBy(This,prop)	\
    ( (This)->lpVtbl -> put_CountBy(This,prop) ) 

#define LineNumbering_get_Active(This,prop)	\
    ( (This)->lpVtbl -> get_Active(This,prop) ) 

#define LineNumbering_put_Active(This,prop)	\
    ( (This)->lpVtbl -> put_Active(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __LineNumbering_INTERFACE_DEFINED__ */


#ifndef __TextColumns_INTERFACE_DEFINED__
#define __TextColumns_INTERFACE_DEFINED__

/* interface TextColumns */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TextColumns;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020973-0000-0000-C000-000000000046")
    TextColumns : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EvenlySpaced( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EvenlySpaced( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineBetween( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LineBetween( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Spacing( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Spacing( 
            /* [in] */ int prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ TextColumn **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *Spacing,
            /* [optional][in] */ VARIANT *EvenlySpaced,
            /* [retval][out] */ TextColumn **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetCount( 
            /* [in] */ long NumColumns) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FlowDirection( 
            /* [retval][out] */ WdFlowDirection *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FlowDirection( 
            /* [in] */ WdFlowDirection prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextColumnsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextColumns * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextColumns * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextColumns * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextColumns * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextColumns * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextColumns * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextColumns * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            TextColumns * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TextColumns * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TextColumns * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TextColumns * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextColumns * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EvenlySpaced )( 
            TextColumns * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EvenlySpaced )( 
            TextColumns * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineBetween )( 
            TextColumns * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LineBetween )( 
            TextColumns * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            TextColumns * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            TextColumns * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Spacing )( 
            TextColumns * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Spacing )( 
            TextColumns * This,
            /* [in] */ int prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TextColumns * This,
            /* [in] */ long Index,
            /* [retval][out] */ TextColumn **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            TextColumns * This,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *Spacing,
            /* [optional][in] */ VARIANT *EvenlySpaced,
            /* [retval][out] */ TextColumn **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetCount )( 
            TextColumns * This,
            /* [in] */ long NumColumns);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FlowDirection )( 
            TextColumns * This,
            /* [retval][out] */ WdFlowDirection *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FlowDirection )( 
            TextColumns * This,
            /* [in] */ WdFlowDirection prop);
        
        END_INTERFACE
    } TextColumnsVtbl;

    interface TextColumns
    {
        CONST_VTBL struct TextColumnsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextColumns_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TextColumns_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TextColumns_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TextColumns_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TextColumns_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TextColumns_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TextColumns_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TextColumns_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define TextColumns_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define TextColumns_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TextColumns_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TextColumns_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TextColumns_get_EvenlySpaced(This,prop)	\
    ( (This)->lpVtbl -> get_EvenlySpaced(This,prop) ) 

#define TextColumns_put_EvenlySpaced(This,prop)	\
    ( (This)->lpVtbl -> put_EvenlySpaced(This,prop) ) 

#define TextColumns_get_LineBetween(This,prop)	\
    ( (This)->lpVtbl -> get_LineBetween(This,prop) ) 

#define TextColumns_put_LineBetween(This,prop)	\
    ( (This)->lpVtbl -> put_LineBetween(This,prop) ) 

#define TextColumns_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define TextColumns_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define TextColumns_get_Spacing(This,prop)	\
    ( (This)->lpVtbl -> get_Spacing(This,prop) ) 

#define TextColumns_put_Spacing(This,prop)	\
    ( (This)->lpVtbl -> put_Spacing(This,prop) ) 

#define TextColumns_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define TextColumns_Add(This,Width,Spacing,EvenlySpaced,prop)	\
    ( (This)->lpVtbl -> Add(This,Width,Spacing,EvenlySpaced,prop) ) 

#define TextColumns_SetCount(This,NumColumns)	\
    ( (This)->lpVtbl -> SetCount(This,NumColumns) ) 

#define TextColumns_get_FlowDirection(This,prop)	\
    ( (This)->lpVtbl -> get_FlowDirection(This,prop) ) 

#define TextColumns_put_FlowDirection(This,prop)	\
    ( (This)->lpVtbl -> put_FlowDirection(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TextColumns_INTERFACE_DEFINED__ */


#ifndef __TextColumn_INTERFACE_DEFINED__
#define __TextColumn_INTERFACE_DEFINED__

/* interface TextColumn */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TextColumn;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020974-0000-0000-C000-000000000046")
    TextColumn : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceAfter( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceAfter( 
            /* [in] */ int prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextColumnVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextColumn * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextColumn * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextColumn * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextColumn * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextColumn * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextColumn * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextColumn * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TextColumn * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TextColumn * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextColumn * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            TextColumn * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            TextColumn * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceAfter )( 
            TextColumn * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceAfter )( 
            TextColumn * This,
            /* [in] */ int prop);
        
        END_INTERFACE
    } TextColumnVtbl;

    interface TextColumn
    {
        CONST_VTBL struct TextColumnVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextColumn_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TextColumn_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TextColumn_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TextColumn_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TextColumn_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TextColumn_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TextColumn_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TextColumn_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TextColumn_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TextColumn_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TextColumn_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define TextColumn_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define TextColumn_get_SpaceAfter(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceAfter(This,prop) ) 

#define TextColumn_put_SpaceAfter(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceAfter(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TextColumn_INTERFACE_DEFINED__ */


#ifndef __Selection_INTERFACE_DEFINED__
#define __Selection_INTERFACE_DEFINED__

/* interface Selection */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Selection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020975-0000-0000-C000-000000000046")
    Selection : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormattedText( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormattedText( 
            /* [in] */ Range *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Start( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Start( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_End( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_End( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ /* external definition not present */ Font **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Font( 
            /* [in] */ /* external definition not present */ Font *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdSelectionType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StoryType( 
            /* [retval][out] */ WdStoryType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Style( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Tables( 
            /* [retval][out] */ Tables **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Words( 
            /* [retval][out] */ Words **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Sentences( 
            /* [retval][out] */ Sentences **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Characters( 
            /* [retval][out] */ Characters **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Footnotes( 
            /* [retval][out] */ Footnotes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Endnotes( 
            /* [retval][out] */ Endnotes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comments( 
            /* [retval][out] */ Comments **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Cells( 
            /* [retval][out] */ Cells **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Sections( 
            /* [retval][out] */ Sections **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Paragraphs( 
            /* [retval][out] */ Paragraphs **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fields( 
            /* [retval][out] */ Fields **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormFields( 
            /* [retval][out] */ FormFields **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Frames( 
            /* [retval][out] */ Frames **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__ParagraphFormat( 
            /* [retval][out] */ _ParagraphFormat **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put__ParagraphFormat( 
            /* [in] */ _ParagraphFormat *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageSetup( 
            /* [retval][out] */ PageSetup **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageSetup( 
            /* [in] */ PageSetup *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bookmarks( 
            /* [retval][out] */ Bookmarks **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StoryLength( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageID( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageID( 
            /* [in] */ WdLanguageID prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageIDFarEast( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageIDFarEast( 
            /* [in] */ WdLanguageID prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageIDOther( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageIDOther( 
            /* [in] */ WdLanguageID prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hyperlinks( 
            /* [retval][out] */ Hyperlinks **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Columns( 
            /* [retval][out] */ Columns **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rows( 
            /* [retval][out] */ Rows **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeaderFooter( 
            /* [retval][out] */ HeaderFooter **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsEndOfRowMark( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BookmarkID( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PreviousBookmarkID( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Find( 
            /* [retval][out] */ Find **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Information( 
            /* [in] */ WdInformation Type,
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Flags( 
            /* [retval][out] */ WdSelectionFlags *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Flags( 
            /* [in] */ WdSelectionFlags prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Active( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartIsActive( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartIsActive( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IPAtEndOfLine( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtendMode( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtendMode( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColumnSelectMode( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColumnSelectMode( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ WdTextOrientation *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Orientation( 
            /* [in] */ WdTextOrientation prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InlineShapes( 
            /* [retval][out] */ InlineShapes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Document( 
            /* [retval][out] */ _Document **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShapeRange( 
            /* [retval][out] */ /* external definition not present */ ShapeRange **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetRange( 
            /* [in] */ long Start,
            /* [in] */ long End) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Collapse( 
            /* [optional][in] */ VARIANT *Direction) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertBefore( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertAfter( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Previous( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE StartOf( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndOf( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Move( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveStart( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveEnd( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveWhile( 
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveStartWhile( 
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveEndWhile( 
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveUntil( 
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveStartUntil( 
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveEndUntil( 
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paste( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertBreak( 
            /* [optional][in] */ VARIANT *Type) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertFile( 
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *Link,
            /* [optional][in] */ VARIANT *Attachment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InStory( 
            /* [in] */ Range *Range,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InRange( 
            /* [in] */ Range *Range,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Expand( 
            /* [optional][in] */ VARIANT *Unit,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertParagraph( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertParagraphAfter( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ConvertToTableOld( 
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *NumRows,
            /* [optional][in] */ VARIANT *NumColumns,
            /* [optional][in] */ VARIANT *InitialColumnWidth,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ApplyBorders,
            /* [optional][in] */ VARIANT *ApplyShading,
            /* [optional][in] */ VARIANT *ApplyFont,
            /* [optional][in] */ VARIANT *ApplyColor,
            /* [optional][in] */ VARIANT *ApplyHeadingRows,
            /* [optional][in] */ VARIANT *ApplyLastRow,
            /* [optional][in] */ VARIANT *ApplyFirstColumn,
            /* [optional][in] */ VARIANT *ApplyLastColumn,
            /* [optional][in] */ VARIANT *AutoFit,
            /* [retval][out] */ Table **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE InsertDateTimeOld( 
            /* [optional][in] */ VARIANT *DateTimeFormat,
            /* [optional][in] */ VARIANT *InsertAsField,
            /* [optional][in] */ VARIANT *InsertAsFullWidth) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertSymbol( 
            /* [in] */ long CharacterNumber,
            /* [optional][in] */ VARIANT *Font,
            /* [optional][in] */ VARIANT *Unicode,
            /* [optional][in] */ VARIANT *Bias) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE InsertCrossReference_2002( 
            /* [in] */ VARIANT *ReferenceType,
            /* [in] */ WdReferenceKind ReferenceKind,
            /* [in] */ VARIANT *ReferenceItem,
            /* [optional][in] */ VARIANT *InsertAsHyperlink,
            /* [optional][in] */ VARIANT *IncludePosition) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE InsertCaptionXP( 
            /* [in] */ VARIANT *Label,
            /* [optional][in] */ VARIANT *Title,
            /* [optional][in] */ VARIANT *TitleAutoText,
            /* [optional][in] */ VARIANT *Position) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyAsPicture( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE SortOld( 
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *FieldNumber,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *FieldNumber2,
            /* [optional][in] */ VARIANT *SortFieldType2,
            /* [optional][in] */ VARIANT *SortOrder2,
            /* [optional][in] */ VARIANT *FieldNumber3,
            /* [optional][in] */ VARIANT *SortFieldType3,
            /* [optional][in] */ VARIANT *SortOrder3,
            /* [optional][in] */ VARIANT *SortColumn,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *LanguageID) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SortAscending( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SortDescending( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsEqual( 
            /* [in] */ Range *Range,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Calculate( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GoTo( 
            /* [optional][in] */ VARIANT *What,
            /* [optional][in] */ VARIANT *Which,
            /* [optional][in] */ VARIANT *Count,
            /* [optional][in] */ VARIANT *Name,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GoToNext( 
            /* [in] */ WdGoToItem What,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GoToPrevious( 
            /* [in] */ WdGoToItem What,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PasteSpecial( 
            /* [optional][in] */ VARIANT *IconIndex,
            /* [optional][in] */ VARIANT *Link,
            /* [optional][in] */ VARIANT *Placement,
            /* [optional][in] */ VARIANT *DisplayAsIcon,
            /* [optional][in] */ VARIANT *DataType,
            /* [optional][in] */ VARIANT *IconFileName,
            /* [optional][in] */ VARIANT *IconLabel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PreviousField( 
            /* [retval][out] */ Field **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextField( 
            /* [retval][out] */ Field **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertParagraphBefore( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertCells( 
            /* [optional][in] */ VARIANT *ShiftCells) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Extend( 
            /* [optional][in] */ VARIANT *Character) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Shrink( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveLeft( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveRight( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveUp( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveDown( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE HomeKey( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndKey( 
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EscapeKey( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TypeText( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CopyFormat( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PasteFormat( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TypeParagraph( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TypeBackspace( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextSubdocument( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PreviousSubdocument( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectColumn( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectCurrentFont( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectCurrentAlignment( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectCurrentSpacing( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectCurrentIndent( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectCurrentTabs( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectCurrentColor( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateTextbox( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WholeStory( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectRow( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SplitTable( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertRows( 
            /* [optional][in] */ VARIANT *NumRows) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertColumns( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertFormula( 
            /* [optional][in] */ VARIANT *Formula,
            /* [optional][in] */ VARIANT *NumberFormat) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextRevision( 
            /* [optional][in] */ VARIANT *Wrap,
            /* [retval][out] */ Revision **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PreviousRevision( 
            /* [optional][in] */ VARIANT *Wrap,
            /* [retval][out] */ Revision **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PasteAsNestedTable( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateAutoTextEntry( 
            /* [in] */ BSTR Name,
            /* [in] */ BSTR StyleName,
            /* [retval][out] */ AutoTextEntry **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DetectLanguage( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectCell( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertRowsBelow( 
            /* [optional][in] */ VARIANT *NumRows) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertColumnsRight( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertRowsAbove( 
            /* [optional][in] */ VARIANT *NumRows) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RtlRun( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE LtrRun( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE BoldRun( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ItalicRun( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RtlPara( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE LtrPara( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertDateTime( 
            /* [optional][in] */ VARIANT *DateTimeFormat,
            /* [optional][in] */ VARIANT *InsertAsField,
            /* [optional][in] */ VARIANT *InsertAsFullWidth,
            /* [optional][in] */ VARIANT *DateLanguage,
            /* [optional][in] */ VARIANT *CalendarType) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Sort2000( 
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *FieldNumber,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *FieldNumber2,
            /* [optional][in] */ VARIANT *SortFieldType2,
            /* [optional][in] */ VARIANT *SortOrder2,
            /* [optional][in] */ VARIANT *FieldNumber3,
            /* [optional][in] */ VARIANT *SortFieldType3,
            /* [optional][in] */ VARIANT *SortOrder3,
            /* [optional][in] */ VARIANT *SortColumn,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *BidiSort,
            /* [optional][in] */ VARIANT *IgnoreThe,
            /* [optional][in] */ VARIANT *IgnoreKashida,
            /* [optional][in] */ VARIANT *IgnoreDiacritics,
            /* [optional][in] */ VARIANT *IgnoreHe,
            /* [optional][in] */ VARIANT *LanguageID) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToTable( 
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *NumRows,
            /* [optional][in] */ VARIANT *NumColumns,
            /* [optional][in] */ VARIANT *InitialColumnWidth,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ApplyBorders,
            /* [optional][in] */ VARIANT *ApplyShading,
            /* [optional][in] */ VARIANT *ApplyFont,
            /* [optional][in] */ VARIANT *ApplyColor,
            /* [optional][in] */ VARIANT *ApplyHeadingRows,
            /* [optional][in] */ VARIANT *ApplyLastRow,
            /* [optional][in] */ VARIANT *ApplyFirstColumn,
            /* [optional][in] */ VARIANT *ApplyLastColumn,
            /* [optional][in] */ VARIANT *AutoFit,
            /* [optional][in] */ VARIANT *AutoFitBehavior,
            /* [optional][in] */ VARIANT *DefaultTableBehavior,
            /* [retval][out] */ Table **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoProofing( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoProofing( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TopLevelTables( 
            /* [retval][out] */ Tables **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageDetected( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageDetected( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FitTextWidth( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FitTextWidth( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearFormatting( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PasteAppendTable( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HTMLDivisions( 
            /* [retval][out] */ HTMLDivisions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartTags( 
            /* [retval][out] */ SmartTags **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChildShapeRange( 
            /* [retval][out] */ /* external definition not present */ ShapeRange **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasChildShapeRange( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FootnoteOptions( 
            /* [retval][out] */ FootnoteOptions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndnoteOptions( 
            /* [retval][out] */ EndnoteOptions **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToggleCharacterCode( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PasteAndFormat( 
            /* [in] */ WdRecoveryType Type) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PasteExcelTable( 
            /* [in] */ VARIANT_BOOL LinkedToExcel,
            /* [in] */ VARIANT_BOOL WordFormatting,
            /* [in] */ VARIANT_BOOL RTF) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ShrinkDiscontiguousSelection( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertStyleSeparator( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Sort( 
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *FieldNumber,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *FieldNumber2,
            /* [optional][in] */ VARIANT *SortFieldType2,
            /* [optional][in] */ VARIANT *SortOrder2,
            /* [optional][in] */ VARIANT *FieldNumber3,
            /* [optional][in] */ VARIANT *SortFieldType3,
            /* [optional][in] */ VARIANT *SortOrder3,
            /* [optional][in] */ VARIANT *SortColumn,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *BidiSort,
            /* [optional][in] */ VARIANT *IgnoreThe,
            /* [optional][in] */ VARIANT *IgnoreKashida,
            /* [optional][in] */ VARIANT *IgnoreDiacritics,
            /* [optional][in] */ VARIANT *IgnoreHe,
            /* [optional][in] */ VARIANT *LanguageID,
            /* [optional][in] */ VARIANT *SubFieldNumber,
            /* [optional][in] */ VARIANT *SubFieldNumber2,
            /* [optional][in] */ VARIANT *SubFieldNumber3) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XMLNodes( 
            /* [retval][out] */ XMLNodes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XMLParentNode( 
            /* [retval][out] */ XMLNode **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Editors( 
            /* [retval][out] */ Editors **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XML( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL DataOnly,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnhMetaFileBits( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GoToEditableRange( 
            /* [optional][in] */ VARIANT *EditorID,
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertXML( 
            /* [in] */ BSTR XML,
            /* [optional][in] */ VARIANT *Transform) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertCaption( 
            /* [in] */ VARIANT *Label,
            /* [optional][in] */ VARIANT *Title,
            /* [optional][in] */ VARIANT *TitleAutoText,
            /* [optional][in] */ VARIANT *Position,
            /* [optional][in] */ VARIANT *ExcludeLabel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertCrossReference( 
            /* [in] */ VARIANT *ReferenceType,
            /* [in] */ WdReferenceKind ReferenceKind,
            /* [in] */ VARIANT *ReferenceItem,
            /* [optional][in] */ VARIANT *InsertAsHyperlink,
            /* [optional][in] */ VARIANT *IncludePosition,
            /* [optional][in] */ VARIANT *SeparateNumbers,
            /* [optional][in] */ VARIANT *SeparatorString) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SelectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Selection * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Selection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Selection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Selection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Selection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Selection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Selection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            Selection * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            Selection * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormattedText )( 
            Selection * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormattedText )( 
            Selection * This,
            /* [in] */ Range *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Start )( 
            Selection * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Start )( 
            Selection * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_End )( 
            Selection * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_End )( 
            Selection * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            Selection * This,
            /* [retval][out] */ /* external definition not present */ Font **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Font )( 
            Selection * This,
            /* [in] */ /* external definition not present */ Font *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Selection * This,
            /* [retval][out] */ WdSelectionType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StoryType )( 
            Selection * This,
            /* [retval][out] */ WdStoryType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            Selection * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            Selection * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Tables )( 
            Selection * This,
            /* [retval][out] */ Tables **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Words )( 
            Selection * This,
            /* [retval][out] */ Words **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Sentences )( 
            Selection * This,
            /* [retval][out] */ Sentences **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Characters )( 
            Selection * This,
            /* [retval][out] */ Characters **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Footnotes )( 
            Selection * This,
            /* [retval][out] */ Footnotes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Endnotes )( 
            Selection * This,
            /* [retval][out] */ Endnotes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comments )( 
            Selection * This,
            /* [retval][out] */ Comments **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Cells )( 
            Selection * This,
            /* [retval][out] */ Cells **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Sections )( 
            Selection * This,
            /* [retval][out] */ Sections **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Paragraphs )( 
            Selection * This,
            /* [retval][out] */ Paragraphs **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            Selection * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            Selection * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            Selection * This,
            /* [retval][out] */ Shading **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fields )( 
            Selection * This,
            /* [retval][out] */ Fields **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormFields )( 
            Selection * This,
            /* [retval][out] */ FormFields **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Frames )( 
            Selection * This,
            /* [retval][out] */ Frames **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__ParagraphFormat )( 
            Selection * This,
            /* [retval][out] */ _ParagraphFormat **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put__ParagraphFormat )( 
            Selection * This,
            /* [in] */ _ParagraphFormat *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageSetup )( 
            Selection * This,
            /* [retval][out] */ PageSetup **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageSetup )( 
            Selection * This,
            /* [in] */ PageSetup *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bookmarks )( 
            Selection * This,
            /* [retval][out] */ Bookmarks **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StoryLength )( 
            Selection * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageID )( 
            Selection * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageID )( 
            Selection * This,
            /* [in] */ WdLanguageID prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageIDFarEast )( 
            Selection * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageIDFarEast )( 
            Selection * This,
            /* [in] */ WdLanguageID prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageIDOther )( 
            Selection * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageIDOther )( 
            Selection * This,
            /* [in] */ WdLanguageID prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlinks )( 
            Selection * This,
            /* [retval][out] */ Hyperlinks **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Columns )( 
            Selection * This,
            /* [retval][out] */ Columns **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rows )( 
            Selection * This,
            /* [retval][out] */ Rows **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeaderFooter )( 
            Selection * This,
            /* [retval][out] */ HeaderFooter **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsEndOfRowMark )( 
            Selection * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BookmarkID )( 
            Selection * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PreviousBookmarkID )( 
            Selection * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Find )( 
            Selection * This,
            /* [retval][out] */ Find **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Selection * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Information )( 
            Selection * This,
            /* [in] */ WdInformation Type,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Flags )( 
            Selection * This,
            /* [retval][out] */ WdSelectionFlags *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Flags )( 
            Selection * This,
            /* [in] */ WdSelectionFlags prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Active )( 
            Selection * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartIsActive )( 
            Selection * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartIsActive )( 
            Selection * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IPAtEndOfLine )( 
            Selection * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtendMode )( 
            Selection * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtendMode )( 
            Selection * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColumnSelectMode )( 
            Selection * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColumnSelectMode )( 
            Selection * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Orientation )( 
            Selection * This,
            /* [retval][out] */ WdTextOrientation *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Orientation )( 
            Selection * This,
            /* [in] */ WdTextOrientation prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InlineShapes )( 
            Selection * This,
            /* [retval][out] */ InlineShapes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Selection * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Selection * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Selection * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Document )( 
            Selection * This,
            /* [retval][out] */ _Document **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShapeRange )( 
            Selection * This,
            /* [retval][out] */ /* external definition not present */ ShapeRange **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetRange )( 
            Selection * This,
            /* [in] */ long Start,
            /* [in] */ long End);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Collapse )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Direction);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertBefore )( 
            Selection * This,
            /* [in] */ BSTR Text);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertAfter )( 
            Selection * This,
            /* [in] */ BSTR Text);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Next )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Previous )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StartOf )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndOf )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveStart )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveEnd )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveWhile )( 
            Selection * This,
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveStartWhile )( 
            Selection * This,
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveEndWhile )( 
            Selection * This,
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveUntil )( 
            Selection * This,
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveStartUntil )( 
            Selection * This,
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveEndUntil )( 
            Selection * This,
            /* [in] */ VARIANT *Cset,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paste )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertBreak )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Type);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertFile )( 
            Selection * This,
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *Link,
            /* [optional][in] */ VARIANT *Attachment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InStory )( 
            Selection * This,
            /* [in] */ Range *Range,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InRange )( 
            Selection * This,
            /* [in] */ Range *Range,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Expand )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertParagraph )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertParagraphAfter )( 
            Selection * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToTableOld )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *NumRows,
            /* [optional][in] */ VARIANT *NumColumns,
            /* [optional][in] */ VARIANT *InitialColumnWidth,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ApplyBorders,
            /* [optional][in] */ VARIANT *ApplyShading,
            /* [optional][in] */ VARIANT *ApplyFont,
            /* [optional][in] */ VARIANT *ApplyColor,
            /* [optional][in] */ VARIANT *ApplyHeadingRows,
            /* [optional][in] */ VARIANT *ApplyLastRow,
            /* [optional][in] */ VARIANT *ApplyFirstColumn,
            /* [optional][in] */ VARIANT *ApplyLastColumn,
            /* [optional][in] */ VARIANT *AutoFit,
            /* [retval][out] */ Table **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *InsertDateTimeOld )( 
            Selection * This,
            /* [optional][in] */ VARIANT *DateTimeFormat,
            /* [optional][in] */ VARIANT *InsertAsField,
            /* [optional][in] */ VARIANT *InsertAsFullWidth);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertSymbol )( 
            Selection * This,
            /* [in] */ long CharacterNumber,
            /* [optional][in] */ VARIANT *Font,
            /* [optional][in] */ VARIANT *Unicode,
            /* [optional][in] */ VARIANT *Bias);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *InsertCrossReference_2002 )( 
            Selection * This,
            /* [in] */ VARIANT *ReferenceType,
            /* [in] */ WdReferenceKind ReferenceKind,
            /* [in] */ VARIANT *ReferenceItem,
            /* [optional][in] */ VARIANT *InsertAsHyperlink,
            /* [optional][in] */ VARIANT *IncludePosition);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *InsertCaptionXP )( 
            Selection * This,
            /* [in] */ VARIANT *Label,
            /* [optional][in] */ VARIANT *Title,
            /* [optional][in] */ VARIANT *TitleAutoText,
            /* [optional][in] */ VARIANT *Position);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyAsPicture )( 
            Selection * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *SortOld )( 
            Selection * This,
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *FieldNumber,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *FieldNumber2,
            /* [optional][in] */ VARIANT *SortFieldType2,
            /* [optional][in] */ VARIANT *SortOrder2,
            /* [optional][in] */ VARIANT *FieldNumber3,
            /* [optional][in] */ VARIANT *SortFieldType3,
            /* [optional][in] */ VARIANT *SortOrder3,
            /* [optional][in] */ VARIANT *SortColumn,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *LanguageID);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SortAscending )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SortDescending )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsEqual )( 
            Selection * This,
            /* [in] */ Range *Range,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Calculate )( 
            Selection * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GoTo )( 
            Selection * This,
            /* [optional][in] */ VARIANT *What,
            /* [optional][in] */ VARIANT *Which,
            /* [optional][in] */ VARIANT *Count,
            /* [optional][in] */ VARIANT *Name,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GoToNext )( 
            Selection * This,
            /* [in] */ WdGoToItem What,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GoToPrevious )( 
            Selection * This,
            /* [in] */ WdGoToItem What,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PasteSpecial )( 
            Selection * This,
            /* [optional][in] */ VARIANT *IconIndex,
            /* [optional][in] */ VARIANT *Link,
            /* [optional][in] */ VARIANT *Placement,
            /* [optional][in] */ VARIANT *DisplayAsIcon,
            /* [optional][in] */ VARIANT *DataType,
            /* [optional][in] */ VARIANT *IconFileName,
            /* [optional][in] */ VARIANT *IconLabel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PreviousField )( 
            Selection * This,
            /* [retval][out] */ Field **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextField )( 
            Selection * This,
            /* [retval][out] */ Field **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertParagraphBefore )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertCells )( 
            Selection * This,
            /* [optional][in] */ VARIANT *ShiftCells);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Extend )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Character);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Shrink )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveLeft )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveRight )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveUp )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveDown )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Count,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *HomeKey )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndKey )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Unit,
            /* [optional][in] */ VARIANT *Extend,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EscapeKey )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TypeText )( 
            Selection * This,
            /* [in] */ BSTR Text);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CopyFormat )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PasteFormat )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TypeParagraph )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TypeBackspace )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextSubdocument )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PreviousSubdocument )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectColumn )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectCurrentFont )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectCurrentAlignment )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectCurrentSpacing )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectCurrentIndent )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectCurrentTabs )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectCurrentColor )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateTextbox )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WholeStory )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectRow )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SplitTable )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertRows )( 
            Selection * This,
            /* [optional][in] */ VARIANT *NumRows);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertColumns )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertFormula )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Formula,
            /* [optional][in] */ VARIANT *NumberFormat);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextRevision )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Wrap,
            /* [retval][out] */ Revision **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PreviousRevision )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Wrap,
            /* [retval][out] */ Revision **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PasteAsNestedTable )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateAutoTextEntry )( 
            Selection * This,
            /* [in] */ BSTR Name,
            /* [in] */ BSTR StyleName,
            /* [retval][out] */ AutoTextEntry **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DetectLanguage )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectCell )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertRowsBelow )( 
            Selection * This,
            /* [optional][in] */ VARIANT *NumRows);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertColumnsRight )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertRowsAbove )( 
            Selection * This,
            /* [optional][in] */ VARIANT *NumRows);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RtlRun )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LtrRun )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BoldRun )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ItalicRun )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RtlPara )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LtrPara )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertDateTime )( 
            Selection * This,
            /* [optional][in] */ VARIANT *DateTimeFormat,
            /* [optional][in] */ VARIANT *InsertAsField,
            /* [optional][in] */ VARIANT *InsertAsFullWidth,
            /* [optional][in] */ VARIANT *DateLanguage,
            /* [optional][in] */ VARIANT *CalendarType);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Sort2000 )( 
            Selection * This,
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *FieldNumber,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *FieldNumber2,
            /* [optional][in] */ VARIANT *SortFieldType2,
            /* [optional][in] */ VARIANT *SortOrder2,
            /* [optional][in] */ VARIANT *FieldNumber3,
            /* [optional][in] */ VARIANT *SortFieldType3,
            /* [optional][in] */ VARIANT *SortOrder3,
            /* [optional][in] */ VARIANT *SortColumn,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *BidiSort,
            /* [optional][in] */ VARIANT *IgnoreThe,
            /* [optional][in] */ VARIANT *IgnoreKashida,
            /* [optional][in] */ VARIANT *IgnoreDiacritics,
            /* [optional][in] */ VARIANT *IgnoreHe,
            /* [optional][in] */ VARIANT *LanguageID);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToTable )( 
            Selection * This,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *NumRows,
            /* [optional][in] */ VARIANT *NumColumns,
            /* [optional][in] */ VARIANT *InitialColumnWidth,
            /* [optional][in] */ VARIANT *Format,
            /* [optional][in] */ VARIANT *ApplyBorders,
            /* [optional][in] */ VARIANT *ApplyShading,
            /* [optional][in] */ VARIANT *ApplyFont,
            /* [optional][in] */ VARIANT *ApplyColor,
            /* [optional][in] */ VARIANT *ApplyHeadingRows,
            /* [optional][in] */ VARIANT *ApplyLastRow,
            /* [optional][in] */ VARIANT *ApplyFirstColumn,
            /* [optional][in] */ VARIANT *ApplyLastColumn,
            /* [optional][in] */ VARIANT *AutoFit,
            /* [optional][in] */ VARIANT *AutoFitBehavior,
            /* [optional][in] */ VARIANT *DefaultTableBehavior,
            /* [retval][out] */ Table **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoProofing )( 
            Selection * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoProofing )( 
            Selection * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TopLevelTables )( 
            Selection * This,
            /* [retval][out] */ Tables **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageDetected )( 
            Selection * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageDetected )( 
            Selection * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FitTextWidth )( 
            Selection * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FitTextWidth )( 
            Selection * This,
            /* [in] */ int prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearFormatting )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PasteAppendTable )( 
            Selection * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HTMLDivisions )( 
            Selection * This,
            /* [retval][out] */ HTMLDivisions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartTags )( 
            Selection * This,
            /* [retval][out] */ SmartTags **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChildShapeRange )( 
            Selection * This,
            /* [retval][out] */ /* external definition not present */ ShapeRange **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChildShapeRange )( 
            Selection * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FootnoteOptions )( 
            Selection * This,
            /* [retval][out] */ FootnoteOptions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndnoteOptions )( 
            Selection * This,
            /* [retval][out] */ EndnoteOptions **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ToggleCharacterCode )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PasteAndFormat )( 
            Selection * This,
            /* [in] */ WdRecoveryType Type);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PasteExcelTable )( 
            Selection * This,
            /* [in] */ VARIANT_BOOL LinkedToExcel,
            /* [in] */ VARIANT_BOOL WordFormatting,
            /* [in] */ VARIANT_BOOL RTF);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ShrinkDiscontiguousSelection )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertStyleSeparator )( 
            Selection * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Sort )( 
            Selection * This,
            /* [optional][in] */ VARIANT *ExcludeHeader,
            /* [optional][in] */ VARIANT *FieldNumber,
            /* [optional][in] */ VARIANT *SortFieldType,
            /* [optional][in] */ VARIANT *SortOrder,
            /* [optional][in] */ VARIANT *FieldNumber2,
            /* [optional][in] */ VARIANT *SortFieldType2,
            /* [optional][in] */ VARIANT *SortOrder2,
            /* [optional][in] */ VARIANT *FieldNumber3,
            /* [optional][in] */ VARIANT *SortFieldType3,
            /* [optional][in] */ VARIANT *SortOrder3,
            /* [optional][in] */ VARIANT *SortColumn,
            /* [optional][in] */ VARIANT *Separator,
            /* [optional][in] */ VARIANT *CaseSensitive,
            /* [optional][in] */ VARIANT *BidiSort,
            /* [optional][in] */ VARIANT *IgnoreThe,
            /* [optional][in] */ VARIANT *IgnoreKashida,
            /* [optional][in] */ VARIANT *IgnoreDiacritics,
            /* [optional][in] */ VARIANT *IgnoreHe,
            /* [optional][in] */ VARIANT *LanguageID,
            /* [optional][in] */ VARIANT *SubFieldNumber,
            /* [optional][in] */ VARIANT *SubFieldNumber2,
            /* [optional][in] */ VARIANT *SubFieldNumber3);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XMLNodes )( 
            Selection * This,
            /* [retval][out] */ XMLNodes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XMLParentNode )( 
            Selection * This,
            /* [retval][out] */ XMLNode **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Editors )( 
            Selection * This,
            /* [retval][out] */ Editors **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            Selection * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL DataOnly,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnhMetaFileBits )( 
            Selection * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GoToEditableRange )( 
            Selection * This,
            /* [optional][in] */ VARIANT *EditorID,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertXML )( 
            Selection * This,
            /* [in] */ BSTR XML,
            /* [optional][in] */ VARIANT *Transform);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertCaption )( 
            Selection * This,
            /* [in] */ VARIANT *Label,
            /* [optional][in] */ VARIANT *Title,
            /* [optional][in] */ VARIANT *TitleAutoText,
            /* [optional][in] */ VARIANT *Position,
            /* [optional][in] */ VARIANT *ExcludeLabel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertCrossReference )( 
            Selection * This,
            /* [in] */ VARIANT *ReferenceType,
            /* [in] */ WdReferenceKind ReferenceKind,
            /* [in] */ VARIANT *ReferenceItem,
            /* [optional][in] */ VARIANT *InsertAsHyperlink,
            /* [optional][in] */ VARIANT *IncludePosition,
            /* [optional][in] */ VARIANT *SeparateNumbers,
            /* [optional][in] */ VARIANT *SeparatorString);
        
        END_INTERFACE
    } SelectionVtbl;

    interface Selection
    {
        CONST_VTBL struct SelectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Selection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Selection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Selection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Selection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Selection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Selection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Selection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Selection_get_Text(This,prop)	\
    ( (This)->lpVtbl -> get_Text(This,prop) ) 

#define Selection_put_Text(This,prop)	\
    ( (This)->lpVtbl -> put_Text(This,prop) ) 

#define Selection_get_FormattedText(This,prop)	\
    ( (This)->lpVtbl -> get_FormattedText(This,prop) ) 

#define Selection_put_FormattedText(This,prop)	\
    ( (This)->lpVtbl -> put_FormattedText(This,prop) ) 

#define Selection_get_Start(This,prop)	\
    ( (This)->lpVtbl -> get_Start(This,prop) ) 

#define Selection_put_Start(This,prop)	\
    ( (This)->lpVtbl -> put_Start(This,prop) ) 

#define Selection_get_End(This,prop)	\
    ( (This)->lpVtbl -> get_End(This,prop) ) 

#define Selection_put_End(This,prop)	\
    ( (This)->lpVtbl -> put_End(This,prop) ) 

#define Selection_get_Font(This,prop)	\
    ( (This)->lpVtbl -> get_Font(This,prop) ) 

#define Selection_put_Font(This,prop)	\
    ( (This)->lpVtbl -> put_Font(This,prop) ) 

#define Selection_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define Selection_get_StoryType(This,prop)	\
    ( (This)->lpVtbl -> get_StoryType(This,prop) ) 

#define Selection_get_Style(This,prop)	\
    ( (This)->lpVtbl -> get_Style(This,prop) ) 

#define Selection_put_Style(This,prop)	\
    ( (This)->lpVtbl -> put_Style(This,prop) ) 

#define Selection_get_Tables(This,prop)	\
    ( (This)->lpVtbl -> get_Tables(This,prop) ) 

#define Selection_get_Words(This,prop)	\
    ( (This)->lpVtbl -> get_Words(This,prop) ) 

#define Selection_get_Sentences(This,prop)	\
    ( (This)->lpVtbl -> get_Sentences(This,prop) ) 

#define Selection_get_Characters(This,prop)	\
    ( (This)->lpVtbl -> get_Characters(This,prop) ) 

#define Selection_get_Footnotes(This,prop)	\
    ( (This)->lpVtbl -> get_Footnotes(This,prop) ) 

#define Selection_get_Endnotes(This,prop)	\
    ( (This)->lpVtbl -> get_Endnotes(This,prop) ) 

#define Selection_get_Comments(This,prop)	\
    ( (This)->lpVtbl -> get_Comments(This,prop) ) 

#define Selection_get_Cells(This,prop)	\
    ( (This)->lpVtbl -> get_Cells(This,prop) ) 

#define Selection_get_Sections(This,prop)	\
    ( (This)->lpVtbl -> get_Sections(This,prop) ) 

#define Selection_get_Paragraphs(This,prop)	\
    ( (This)->lpVtbl -> get_Paragraphs(This,prop) ) 

#define Selection_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define Selection_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define Selection_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define Selection_get_Fields(This,prop)	\
    ( (This)->lpVtbl -> get_Fields(This,prop) ) 

#define Selection_get_FormFields(This,prop)	\
    ( (This)->lpVtbl -> get_FormFields(This,prop) ) 

#define Selection_get_Frames(This,prop)	\
    ( (This)->lpVtbl -> get_Frames(This,prop) ) 

#define Selection_get__ParagraphFormat(This,prop)	\
    ( (This)->lpVtbl -> get__ParagraphFormat(This,prop) ) 

#define Selection_put__ParagraphFormat(This,prop)	\
    ( (This)->lpVtbl -> put__ParagraphFormat(This,prop) ) 

#define Selection_get_PageSetup(This,prop)	\
    ( (This)->lpVtbl -> get_PageSetup(This,prop) ) 

#define Selection_put_PageSetup(This,prop)	\
    ( (This)->lpVtbl -> put_PageSetup(This,prop) ) 

#define Selection_get_Bookmarks(This,prop)	\
    ( (This)->lpVtbl -> get_Bookmarks(This,prop) ) 

#define Selection_get_StoryLength(This,prop)	\
    ( (This)->lpVtbl -> get_StoryLength(This,prop) ) 

#define Selection_get_LanguageID(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageID(This,prop) ) 

#define Selection_put_LanguageID(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageID(This,prop) ) 

#define Selection_get_LanguageIDFarEast(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageIDFarEast(This,prop) ) 

#define Selection_put_LanguageIDFarEast(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageIDFarEast(This,prop) ) 

#define Selection_get_LanguageIDOther(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageIDOther(This,prop) ) 

#define Selection_put_LanguageIDOther(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageIDOther(This,prop) ) 

#define Selection_get_Hyperlinks(This,prop)	\
    ( (This)->lpVtbl -> get_Hyperlinks(This,prop) ) 

#define Selection_get_Columns(This,prop)	\
    ( (This)->lpVtbl -> get_Columns(This,prop) ) 

#define Selection_get_Rows(This,prop)	\
    ( (This)->lpVtbl -> get_Rows(This,prop) ) 

#define Selection_get_HeaderFooter(This,prop)	\
    ( (This)->lpVtbl -> get_HeaderFooter(This,prop) ) 

#define Selection_get_IsEndOfRowMark(This,prop)	\
    ( (This)->lpVtbl -> get_IsEndOfRowMark(This,prop) ) 

#define Selection_get_BookmarkID(This,prop)	\
    ( (This)->lpVtbl -> get_BookmarkID(This,prop) ) 

#define Selection_get_PreviousBookmarkID(This,prop)	\
    ( (This)->lpVtbl -> get_PreviousBookmarkID(This,prop) ) 

#define Selection_get_Find(This,prop)	\
    ( (This)->lpVtbl -> get_Find(This,prop) ) 

#define Selection_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Selection_get_Information(This,Type,prop)	\
    ( (This)->lpVtbl -> get_Information(This,Type,prop) ) 

#define Selection_get_Flags(This,prop)	\
    ( (This)->lpVtbl -> get_Flags(This,prop) ) 

#define Selection_put_Flags(This,prop)	\
    ( (This)->lpVtbl -> put_Flags(This,prop) ) 

#define Selection_get_Active(This,prop)	\
    ( (This)->lpVtbl -> get_Active(This,prop) ) 

#define Selection_get_StartIsActive(This,prop)	\
    ( (This)->lpVtbl -> get_StartIsActive(This,prop) ) 

#define Selection_put_StartIsActive(This,prop)	\
    ( (This)->lpVtbl -> put_StartIsActive(This,prop) ) 

#define Selection_get_IPAtEndOfLine(This,prop)	\
    ( (This)->lpVtbl -> get_IPAtEndOfLine(This,prop) ) 

#define Selection_get_ExtendMode(This,prop)	\
    ( (This)->lpVtbl -> get_ExtendMode(This,prop) ) 

#define Selection_put_ExtendMode(This,prop)	\
    ( (This)->lpVtbl -> put_ExtendMode(This,prop) ) 

#define Selection_get_ColumnSelectMode(This,prop)	\
    ( (This)->lpVtbl -> get_ColumnSelectMode(This,prop) ) 

#define Selection_put_ColumnSelectMode(This,prop)	\
    ( (This)->lpVtbl -> put_ColumnSelectMode(This,prop) ) 

#define Selection_get_Orientation(This,prop)	\
    ( (This)->lpVtbl -> get_Orientation(This,prop) ) 

#define Selection_put_Orientation(This,prop)	\
    ( (This)->lpVtbl -> put_Orientation(This,prop) ) 

#define Selection_get_InlineShapes(This,prop)	\
    ( (This)->lpVtbl -> get_InlineShapes(This,prop) ) 

#define Selection_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Selection_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Selection_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Selection_get__Document(This,prop)	\
    ( (This)->lpVtbl -> get__Document(This,prop) ) 

#define Selection_get_ShapeRange(This,prop)	\
    ( (This)->lpVtbl -> get_ShapeRange(This,prop) ) 

#define Selection_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define Selection_SetRange(This,Start,End)	\
    ( (This)->lpVtbl -> SetRange(This,Start,End) ) 

#define Selection_Collapse(This,Direction)	\
    ( (This)->lpVtbl -> Collapse(This,Direction) ) 

#define Selection_InsertBefore(This,Text)	\
    ( (This)->lpVtbl -> InsertBefore(This,Text) ) 

#define Selection_InsertAfter(This,Text)	\
    ( (This)->lpVtbl -> InsertAfter(This,Text) ) 

#define Selection_Next(This,Unit,Count,prop)	\
    ( (This)->lpVtbl -> Next(This,Unit,Count,prop) ) 

#define Selection_Previous(This,Unit,Count,prop)	\
    ( (This)->lpVtbl -> Previous(This,Unit,Count,prop) ) 

#define Selection_StartOf(This,Unit,Extend,prop)	\
    ( (This)->lpVtbl -> StartOf(This,Unit,Extend,prop) ) 

#define Selection_EndOf(This,Unit,Extend,prop)	\
    ( (This)->lpVtbl -> EndOf(This,Unit,Extend,prop) ) 

#define Selection_Move(This,Unit,Count,prop)	\
    ( (This)->lpVtbl -> Move(This,Unit,Count,prop) ) 

#define Selection_MoveStart(This,Unit,Count,prop)	\
    ( (This)->lpVtbl -> MoveStart(This,Unit,Count,prop) ) 

#define Selection_MoveEnd(This,Unit,Count,prop)	\
    ( (This)->lpVtbl -> MoveEnd(This,Unit,Count,prop) ) 

#define Selection_MoveWhile(This,Cset,Count,prop)	\
    ( (This)->lpVtbl -> MoveWhile(This,Cset,Count,prop) ) 

#define Selection_MoveStartWhile(This,Cset,Count,prop)	\
    ( (This)->lpVtbl -> MoveStartWhile(This,Cset,Count,prop) ) 

#define Selection_MoveEndWhile(This,Cset,Count,prop)	\
    ( (This)->lpVtbl -> MoveEndWhile(This,Cset,Count,prop) ) 

#define Selection_MoveUntil(This,Cset,Count,prop)	\
    ( (This)->lpVtbl -> MoveUntil(This,Cset,Count,prop) ) 

#define Selection_MoveStartUntil(This,Cset,Count,prop)	\
    ( (This)->lpVtbl -> MoveStartUntil(This,Cset,Count,prop) ) 

#define Selection_MoveEndUntil(This,Cset,Count,prop)	\
    ( (This)->lpVtbl -> MoveEndUntil(This,Cset,Count,prop) ) 

#define Selection_Cut(This)	\
    ( (This)->lpVtbl -> Cut(This) ) 

#define Selection_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define Selection_Paste(This)	\
    ( (This)->lpVtbl -> Paste(This) ) 

#define Selection_InsertBreak(This,Type)	\
    ( (This)->lpVtbl -> InsertBreak(This,Type) ) 

#define Selection_InsertFile(This,FileName,Range,ConfirmConversions,Link,Attachment)	\
    ( (This)->lpVtbl -> InsertFile(This,FileName,Range,ConfirmConversions,Link,Attachment) ) 

#define Selection_InStory(This,Range,prop)	\
    ( (This)->lpVtbl -> InStory(This,Range,prop) ) 

#define Selection_InRange(This,Range,prop)	\
    ( (This)->lpVtbl -> InRange(This,Range,prop) ) 

#define Selection_Delete(This,Unit,Count,prop)	\
    ( (This)->lpVtbl -> Delete(This,Unit,Count,prop) ) 

#define Selection_Expand(This,Unit,prop)	\
    ( (This)->lpVtbl -> Expand(This,Unit,prop) ) 

#define Selection_InsertParagraph(This)	\
    ( (This)->lpVtbl -> InsertParagraph(This) ) 

#define Selection_InsertParagraphAfter(This)	\
    ( (This)->lpVtbl -> InsertParagraphAfter(This) ) 

#define Selection_ConvertToTableOld(This,Separator,NumRows,NumColumns,InitialColumnWidth,Format,ApplyBorders,ApplyShading,ApplyFont,ApplyColor,ApplyHeadingRows,ApplyLastRow,ApplyFirstColumn,ApplyLastColumn,AutoFit,prop)	\
    ( (This)->lpVtbl -> ConvertToTableOld(This,Separator,NumRows,NumColumns,InitialColumnWidth,Format,ApplyBorders,ApplyShading,ApplyFont,ApplyColor,ApplyHeadingRows,ApplyLastRow,ApplyFirstColumn,ApplyLastColumn,AutoFit,prop) ) 

#define Selection_InsertDateTimeOld(This,DateTimeFormat,InsertAsField,InsertAsFullWidth)	\
    ( (This)->lpVtbl -> InsertDateTimeOld(This,DateTimeFormat,InsertAsField,InsertAsFullWidth) ) 

#define Selection_InsertSymbol(This,CharacterNumber,Font,Unicode,Bias)	\
    ( (This)->lpVtbl -> InsertSymbol(This,CharacterNumber,Font,Unicode,Bias) ) 

#define Selection_InsertCrossReference_2002(This,ReferenceType,ReferenceKind,ReferenceItem,InsertAsHyperlink,IncludePosition)	\
    ( (This)->lpVtbl -> InsertCrossReference_2002(This,ReferenceType,ReferenceKind,ReferenceItem,InsertAsHyperlink,IncludePosition) ) 

#define Selection_InsertCaptionXP(This,Label,Title,TitleAutoText,Position)	\
    ( (This)->lpVtbl -> InsertCaptionXP(This,Label,Title,TitleAutoText,Position) ) 

#define Selection_CopyAsPicture(This)	\
    ( (This)->lpVtbl -> CopyAsPicture(This) ) 

#define Selection_SortOld(This,ExcludeHeader,FieldNumber,SortFieldType,SortOrder,FieldNumber2,SortFieldType2,SortOrder2,FieldNumber3,SortFieldType3,SortOrder3,SortColumn,Separator,CaseSensitive,LanguageID)	\
    ( (This)->lpVtbl -> SortOld(This,ExcludeHeader,FieldNumber,SortFieldType,SortOrder,FieldNumber2,SortFieldType2,SortOrder2,FieldNumber3,SortFieldType3,SortOrder3,SortColumn,Separator,CaseSensitive,LanguageID) ) 

#define Selection_SortAscending(This)	\
    ( (This)->lpVtbl -> SortAscending(This) ) 

#define Selection_SortDescending(This)	\
    ( (This)->lpVtbl -> SortDescending(This) ) 

#define Selection_IsEqual(This,Range,prop)	\
    ( (This)->lpVtbl -> IsEqual(This,Range,prop) ) 

#define Selection_Calculate(This,prop)	\
    ( (This)->lpVtbl -> Calculate(This,prop) ) 

#define Selection_GoTo(This,What,Which,Count,Name,prop)	\
    ( (This)->lpVtbl -> GoTo(This,What,Which,Count,Name,prop) ) 

#define Selection_GoToNext(This,What,prop)	\
    ( (This)->lpVtbl -> GoToNext(This,What,prop) ) 

#define Selection_GoToPrevious(This,What,prop)	\
    ( (This)->lpVtbl -> GoToPrevious(This,What,prop) ) 

#define Selection_PasteSpecial(This,IconIndex,Link,Placement,DisplayAsIcon,DataType,IconFileName,IconLabel)	\
    ( (This)->lpVtbl -> PasteSpecial(This,IconIndex,Link,Placement,DisplayAsIcon,DataType,IconFileName,IconLabel) ) 

#define Selection_PreviousField(This,prop)	\
    ( (This)->lpVtbl -> PreviousField(This,prop) ) 

#define Selection_NextField(This,prop)	\
    ( (This)->lpVtbl -> NextField(This,prop) ) 

#define Selection_InsertParagraphBefore(This)	\
    ( (This)->lpVtbl -> InsertParagraphBefore(This) ) 

#define Selection_InsertCells(This,ShiftCells)	\
    ( (This)->lpVtbl -> InsertCells(This,ShiftCells) ) 

#define Selection_Extend(This,Character)	\
    ( (This)->lpVtbl -> Extend(This,Character) ) 

#define Selection_Shrink(This)	\
    ( (This)->lpVtbl -> Shrink(This) ) 

#define Selection_MoveLeft(This,Unit,Count,Extend,prop)	\
    ( (This)->lpVtbl -> MoveLeft(This,Unit,Count,Extend,prop) ) 

#define Selection_MoveRight(This,Unit,Count,Extend,prop)	\
    ( (This)->lpVtbl -> MoveRight(This,Unit,Count,Extend,prop) ) 

#define Selection_MoveUp(This,Unit,Count,Extend,prop)	\
    ( (This)->lpVtbl -> MoveUp(This,Unit,Count,Extend,prop) ) 

#define Selection_MoveDown(This,Unit,Count,Extend,prop)	\
    ( (This)->lpVtbl -> MoveDown(This,Unit,Count,Extend,prop) ) 

#define Selection_HomeKey(This,Unit,Extend,prop)	\
    ( (This)->lpVtbl -> HomeKey(This,Unit,Extend,prop) ) 

#define Selection_EndKey(This,Unit,Extend,prop)	\
    ( (This)->lpVtbl -> EndKey(This,Unit,Extend,prop) ) 

#define Selection_EscapeKey(This)	\
    ( (This)->lpVtbl -> EscapeKey(This) ) 

#define Selection_TypeText(This,Text)	\
    ( (This)->lpVtbl -> TypeText(This,Text) ) 

#define Selection_CopyFormat(This)	\
    ( (This)->lpVtbl -> CopyFormat(This) ) 

#define Selection_PasteFormat(This)	\
    ( (This)->lpVtbl -> PasteFormat(This) ) 

#define Selection_TypeParagraph(This)	\
    ( (This)->lpVtbl -> TypeParagraph(This) ) 

#define Selection_TypeBackspace(This)	\
    ( (This)->lpVtbl -> TypeBackspace(This) ) 

#define Selection_NextSubdocument(This)	\
    ( (This)->lpVtbl -> NextSubdocument(This) ) 

#define Selection_PreviousSubdocument(This)	\
    ( (This)->lpVtbl -> PreviousSubdocument(This) ) 

#define Selection_SelectColumn(This)	\
    ( (This)->lpVtbl -> SelectColumn(This) ) 

#define Selection_SelectCurrentFont(This)	\
    ( (This)->lpVtbl -> SelectCurrentFont(This) ) 

#define Selection_SelectCurrentAlignment(This)	\
    ( (This)->lpVtbl -> SelectCurrentAlignment(This) ) 

#define Selection_SelectCurrentSpacing(This)	\
    ( (This)->lpVtbl -> SelectCurrentSpacing(This) ) 

#define Selection_SelectCurrentIndent(This)	\
    ( (This)->lpVtbl -> SelectCurrentIndent(This) ) 

#define Selection_SelectCurrentTabs(This)	\
    ( (This)->lpVtbl -> SelectCurrentTabs(This) ) 

#define Selection_SelectCurrentColor(This)	\
    ( (This)->lpVtbl -> SelectCurrentColor(This) ) 

#define Selection_CreateTextbox(This)	\
    ( (This)->lpVtbl -> CreateTextbox(This) ) 

#define Selection_WholeStory(This)	\
    ( (This)->lpVtbl -> WholeStory(This) ) 

#define Selection_SelectRow(This)	\
    ( (This)->lpVtbl -> SelectRow(This) ) 

#define Selection_SplitTable(This)	\
    ( (This)->lpVtbl -> SplitTable(This) ) 

#define Selection_InsertRows(This,NumRows)	\
    ( (This)->lpVtbl -> InsertRows(This,NumRows) ) 

#define Selection_InsertColumns(This)	\
    ( (This)->lpVtbl -> InsertColumns(This) ) 

#define Selection_InsertFormula(This,Formula,NumberFormat)	\
    ( (This)->lpVtbl -> InsertFormula(This,Formula,NumberFormat) ) 

#define Selection_NextRevision(This,Wrap,prop)	\
    ( (This)->lpVtbl -> NextRevision(This,Wrap,prop) ) 

#define Selection_PreviousRevision(This,Wrap,prop)	\
    ( (This)->lpVtbl -> PreviousRevision(This,Wrap,prop) ) 

#define Selection_PasteAsNestedTable(This)	\
    ( (This)->lpVtbl -> PasteAsNestedTable(This) ) 

#define Selection_CreateAutoTextEntry(This,Name,StyleName,prop)	\
    ( (This)->lpVtbl -> CreateAutoTextEntry(This,Name,StyleName,prop) ) 

#define Selection_DetectLanguage(This)	\
    ( (This)->lpVtbl -> DetectLanguage(This) ) 

#define Selection_SelectCell(This)	\
    ( (This)->lpVtbl -> SelectCell(This) ) 

#define Selection_InsertRowsBelow(This,NumRows)	\
    ( (This)->lpVtbl -> InsertRowsBelow(This,NumRows) ) 

#define Selection_InsertColumnsRight(This)	\
    ( (This)->lpVtbl -> InsertColumnsRight(This) ) 

#define Selection_InsertRowsAbove(This,NumRows)	\
    ( (This)->lpVtbl -> InsertRowsAbove(This,NumRows) ) 

#define Selection_RtlRun(This)	\
    ( (This)->lpVtbl -> RtlRun(This) ) 

#define Selection_LtrRun(This)	\
    ( (This)->lpVtbl -> LtrRun(This) ) 

#define Selection_BoldRun(This)	\
    ( (This)->lpVtbl -> BoldRun(This) ) 

#define Selection_ItalicRun(This)	\
    ( (This)->lpVtbl -> ItalicRun(This) ) 

#define Selection_RtlPara(This)	\
    ( (This)->lpVtbl -> RtlPara(This) ) 

#define Selection_LtrPara(This)	\
    ( (This)->lpVtbl -> LtrPara(This) ) 

#define Selection_InsertDateTime(This,DateTimeFormat,InsertAsField,InsertAsFullWidth,DateLanguage,CalendarType)	\
    ( (This)->lpVtbl -> InsertDateTime(This,DateTimeFormat,InsertAsField,InsertAsFullWidth,DateLanguage,CalendarType) ) 

#define Selection_Sort2000(This,ExcludeHeader,FieldNumber,SortFieldType,SortOrder,FieldNumber2,SortFieldType2,SortOrder2,FieldNumber3,SortFieldType3,SortOrder3,SortColumn,Separator,CaseSensitive,BidiSort,IgnoreThe,IgnoreKashida,IgnoreDiacritics,IgnoreHe,LanguageID)	\
    ( (This)->lpVtbl -> Sort2000(This,ExcludeHeader,FieldNumber,SortFieldType,SortOrder,FieldNumber2,SortFieldType2,SortOrder2,FieldNumber3,SortFieldType3,SortOrder3,SortColumn,Separator,CaseSensitive,BidiSort,IgnoreThe,IgnoreKashida,IgnoreDiacritics,IgnoreHe,LanguageID) ) 

#define Selection_ConvertToTable(This,Separator,NumRows,NumColumns,InitialColumnWidth,Format,ApplyBorders,ApplyShading,ApplyFont,ApplyColor,ApplyHeadingRows,ApplyLastRow,ApplyFirstColumn,ApplyLastColumn,AutoFit,AutoFitBehavior,DefaultTableBehavior,prop)	\
    ( (This)->lpVtbl -> ConvertToTable(This,Separator,NumRows,NumColumns,InitialColumnWidth,Format,ApplyBorders,ApplyShading,ApplyFont,ApplyColor,ApplyHeadingRows,ApplyLastRow,ApplyFirstColumn,ApplyLastColumn,AutoFit,AutoFitBehavior,DefaultTableBehavior,prop) ) 

#define Selection_get_NoProofing(This,prop)	\
    ( (This)->lpVtbl -> get_NoProofing(This,prop) ) 

#define Selection_put_NoProofing(This,prop)	\
    ( (This)->lpVtbl -> put_NoProofing(This,prop) ) 

#define Selection_get_TopLevelTables(This,prop)	\
    ( (This)->lpVtbl -> get_TopLevelTables(This,prop) ) 

#define Selection_get_LanguageDetected(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageDetected(This,prop) ) 

#define Selection_put_LanguageDetected(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageDetected(This,prop) ) 

#define Selection_get_FitTextWidth(This,prop)	\
    ( (This)->lpVtbl -> get_FitTextWidth(This,prop) ) 

#define Selection_put_FitTextWidth(This,prop)	\
    ( (This)->lpVtbl -> put_FitTextWidth(This,prop) ) 

#define Selection_ClearFormatting(This)	\
    ( (This)->lpVtbl -> ClearFormatting(This) ) 

#define Selection_PasteAppendTable(This)	\
    ( (This)->lpVtbl -> PasteAppendTable(This) ) 

#define Selection_get_HTMLDivisions(This,prop)	\
    ( (This)->lpVtbl -> get_HTMLDivisions(This,prop) ) 

#define Selection_get_SmartTags(This,prop)	\
    ( (This)->lpVtbl -> get_SmartTags(This,prop) ) 

#define Selection_get_ChildShapeRange(This,prop)	\
    ( (This)->lpVtbl -> get_ChildShapeRange(This,prop) ) 

#define Selection_get_HasChildShapeRange(This,prop)	\
    ( (This)->lpVtbl -> get_HasChildShapeRange(This,prop) ) 

#define Selection_get_FootnoteOptions(This,prop)	\
    ( (This)->lpVtbl -> get_FootnoteOptions(This,prop) ) 

#define Selection_get_EndnoteOptions(This,prop)	\
    ( (This)->lpVtbl -> get_EndnoteOptions(This,prop) ) 

#define Selection_ToggleCharacterCode(This)	\
    ( (This)->lpVtbl -> ToggleCharacterCode(This) ) 

#define Selection_PasteAndFormat(This,Type)	\
    ( (This)->lpVtbl -> PasteAndFormat(This,Type) ) 

#define Selection_PasteExcelTable(This,LinkedToExcel,WordFormatting,RTF)	\
    ( (This)->lpVtbl -> PasteExcelTable(This,LinkedToExcel,WordFormatting,RTF) ) 

#define Selection_ShrinkDiscontiguousSelection(This)	\
    ( (This)->lpVtbl -> ShrinkDiscontiguousSelection(This) ) 

#define Selection_InsertStyleSeparator(This)	\
    ( (This)->lpVtbl -> InsertStyleSeparator(This) ) 

#define Selection_Sort(This,ExcludeHeader,FieldNumber,SortFieldType,SortOrder,FieldNumber2,SortFieldType2,SortOrder2,FieldNumber3,SortFieldType3,SortOrder3,SortColumn,Separator,CaseSensitive,BidiSort,IgnoreThe,IgnoreKashida,IgnoreDiacritics,IgnoreHe,LanguageID,SubFieldNumber,SubFieldNumber2,SubFieldNumber3)	\
    ( (This)->lpVtbl -> Sort(This,ExcludeHeader,FieldNumber,SortFieldType,SortOrder,FieldNumber2,SortFieldType2,SortOrder2,FieldNumber3,SortFieldType3,SortOrder3,SortColumn,Separator,CaseSensitive,BidiSort,IgnoreThe,IgnoreKashida,IgnoreDiacritics,IgnoreHe,LanguageID,SubFieldNumber,SubFieldNumber2,SubFieldNumber3) ) 

#define Selection_get_XMLNodes(This,prop)	\
    ( (This)->lpVtbl -> get_XMLNodes(This,prop) ) 

#define Selection_get_XMLParentNode(This,prop)	\
    ( (This)->lpVtbl -> get_XMLParentNode(This,prop) ) 

#define Selection_get_Editors(This,prop)	\
    ( (This)->lpVtbl -> get_Editors(This,prop) ) 

#define Selection_get_XML(This,DataOnly,prop)	\
    ( (This)->lpVtbl -> get_XML(This,DataOnly,prop) ) 

#define Selection_get_EnhMetaFileBits(This,prop)	\
    ( (This)->lpVtbl -> get_EnhMetaFileBits(This,prop) ) 

#define Selection_GoToEditableRange(This,EditorID,prop)	\
    ( (This)->lpVtbl -> GoToEditableRange(This,EditorID,prop) ) 

#define Selection_InsertXML(This,XML,Transform)	\
    ( (This)->lpVtbl -> InsertXML(This,XML,Transform) ) 

#define Selection_InsertCaption(This,Label,Title,TitleAutoText,Position,ExcludeLabel)	\
    ( (This)->lpVtbl -> InsertCaption(This,Label,Title,TitleAutoText,Position,ExcludeLabel) ) 

#define Selection_InsertCrossReference(This,ReferenceType,ReferenceKind,ReferenceItem,InsertAsHyperlink,IncludePosition,SeparateNumbers,SeparatorString)	\
    ( (This)->lpVtbl -> InsertCrossReference(This,ReferenceType,ReferenceKind,ReferenceItem,InsertAsHyperlink,IncludePosition,SeparateNumbers,SeparatorString) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_MoveRight_Proxy( 
    Selection * This,
    /* [optional][in] */ VARIANT *Unit,
    /* [optional][in] */ VARIANT *Count,
    /* [optional][in] */ VARIANT *Extend,
    /* [retval][out] */ long *prop);


void __RPC_STUB Selection_MoveRight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_MoveUp_Proxy( 
    Selection * This,
    /* [optional][in] */ VARIANT *Unit,
    /* [optional][in] */ VARIANT *Count,
    /* [optional][in] */ VARIANT *Extend,
    /* [retval][out] */ long *prop);


void __RPC_STUB Selection_MoveUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_MoveDown_Proxy( 
    Selection * This,
    /* [optional][in] */ VARIANT *Unit,
    /* [optional][in] */ VARIANT *Count,
    /* [optional][in] */ VARIANT *Extend,
    /* [retval][out] */ long *prop);


void __RPC_STUB Selection_MoveDown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_HomeKey_Proxy( 
    Selection * This,
    /* [optional][in] */ VARIANT *Unit,
    /* [optional][in] */ VARIANT *Extend,
    /* [retval][out] */ long *prop);


void __RPC_STUB Selection_HomeKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_EndKey_Proxy( 
    Selection * This,
    /* [optional][in] */ VARIANT *Unit,
    /* [optional][in] */ VARIANT *Extend,
    /* [retval][out] */ long *prop);


void __RPC_STUB Selection_EndKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_EscapeKey_Proxy( 
    Selection * This);


void __RPC_STUB Selection_EscapeKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_TypeText_Proxy( 
    Selection * This,
    /* [in] */ BSTR Text);


void __RPC_STUB Selection_TypeText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_CopyFormat_Proxy( 
    Selection * This);


void __RPC_STUB Selection_CopyFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_PasteFormat_Proxy( 
    Selection * This);


void __RPC_STUB Selection_PasteFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_TypeParagraph_Proxy( 
    Selection * This);


void __RPC_STUB Selection_TypeParagraph_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_TypeBackspace_Proxy( 
    Selection * This);


void __RPC_STUB Selection_TypeBackspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_NextSubdocument_Proxy( 
    Selection * This);


void __RPC_STUB Selection_NextSubdocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_PreviousSubdocument_Proxy( 
    Selection * This);


void __RPC_STUB Selection_PreviousSubdocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_SelectColumn_Proxy( 
    Selection * This);


void __RPC_STUB Selection_SelectColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_SelectCurrentFont_Proxy( 
    Selection * This);


void __RPC_STUB Selection_SelectCurrentFont_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_SelectCurrentAlignment_Proxy( 
    Selection * This);


void __RPC_STUB Selection_SelectCurrentAlignment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_SelectCurrentSpacing_Proxy( 
    Selection * This);


void __RPC_STUB Selection_SelectCurrentSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_SelectCurrentIndent_Proxy( 
    Selection * This);


void __RPC_STUB Selection_SelectCurrentIndent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_SelectCurrentTabs_Proxy( 
    Selection * This);


void __RPC_STUB Selection_SelectCurrentTabs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_SelectCurrentColor_Proxy( 
    Selection * This);


void __RPC_STUB Selection_SelectCurrentColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_CreateTextbox_Proxy( 
    Selection * This);


void __RPC_STUB Selection_CreateTextbox_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_WholeStory_Proxy( 
    Selection * This);


void __RPC_STUB Selection_WholeStory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_SelectRow_Proxy( 
    Selection * This);


void __RPC_STUB Selection_SelectRow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_SplitTable_Proxy( 
    Selection * This);


void __RPC_STUB Selection_SplitTable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_InsertRows_Proxy( 
    Selection * This,
    /* [optional][in] */ VARIANT *NumRows);


void __RPC_STUB Selection_InsertRows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_InsertColumns_Proxy( 
    Selection * This);


void __RPC_STUB Selection_InsertColumns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_InsertFormula_Proxy( 
    Selection * This,
    /* [optional][in] */ VARIANT *Formula,
    /* [optional][in] */ VARIANT *NumberFormat);


void __RPC_STUB Selection_InsertFormula_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_NextRevision_Proxy( 
    Selection * This,
    /* [optional][in] */ VARIANT *Wrap,
    /* [retval][out] */ Revision **prop);


void __RPC_STUB Selection_NextRevision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_PreviousRevision_Proxy( 
    Selection * This,
    /* [optional][in] */ VARIANT *Wrap,
    /* [retval][out] */ Revision **prop);


void __RPC_STUB Selection_PreviousRevision_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_PasteAsNestedTable_Proxy( 
    Selection * This);


void __RPC_STUB Selection_PasteAsNestedTable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_CreateAutoTextEntry_Proxy( 
    Selection * This,
    /* [in] */ BSTR Name,
    /* [in] */ BSTR StyleName,
    /* [retval][out] */ AutoTextEntry **prop);


void __RPC_STUB Selection_CreateAutoTextEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_DetectLanguage_Proxy( 
    Selection * This);


void __RPC_STUB Selection_DetectLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_SelectCell_Proxy( 
    Selection * This);


void __RPC_STUB Selection_SelectCell_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_InsertRowsBelow_Proxy( 
    Selection * This,
    /* [optional][in] */ VARIANT *NumRows);


void __RPC_STUB Selection_InsertRowsBelow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_InsertColumnsRight_Proxy( 
    Selection * This);


void __RPC_STUB Selection_InsertColumnsRight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_InsertRowsAbove_Proxy( 
    Selection * This,
    /* [optional][in] */ VARIANT *NumRows);


void __RPC_STUB Selection_InsertRowsAbove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_RtlRun_Proxy( 
    Selection * This);


void __RPC_STUB Selection_RtlRun_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_LtrRun_Proxy( 
    Selection * This);


void __RPC_STUB Selection_LtrRun_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_BoldRun_Proxy( 
    Selection * This);


void __RPC_STUB Selection_BoldRun_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_ItalicRun_Proxy( 
    Selection * This);


void __RPC_STUB Selection_ItalicRun_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_RtlPara_Proxy( 
    Selection * This);


void __RPC_STUB Selection_RtlPara_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_LtrPara_Proxy( 
    Selection * This);


void __RPC_STUB Selection_LtrPara_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_InsertDateTime_Proxy( 
    Selection * This,
    /* [optional][in] */ VARIANT *DateTimeFormat,
    /* [optional][in] */ VARIANT *InsertAsField,
    /* [optional][in] */ VARIANT *InsertAsFullWidth,
    /* [optional][in] */ VARIANT *DateLanguage,
    /* [optional][in] */ VARIANT *CalendarType);


void __RPC_STUB Selection_InsertDateTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Selection_Sort2000_Proxy( 
    Selection * This,
    /* [optional][in] */ VARIANT *ExcludeHeader,
    /* [optional][in] */ VARIANT *FieldNumber,
    /* [optional][in] */ VARIANT *SortFieldType,
    /* [optional][in] */ VARIANT *SortOrder,
    /* [optional][in] */ VARIANT *FieldNumber2,
    /* [optional][in] */ VARIANT *SortFieldType2,
    /* [optional][in] */ VARIANT *SortOrder2,
    /* [optional][in] */ VARIANT *FieldNumber3,
    /* [optional][in] */ VARIANT *SortFieldType3,
    /* [optional][in] */ VARIANT *SortOrder3,
    /* [optional][in] */ VARIANT *SortColumn,
    /* [optional][in] */ VARIANT *Separator,
    /* [optional][in] */ VARIANT *CaseSensitive,
    /* [optional][in] */ VARIANT *BidiSort,
    /* [optional][in] */ VARIANT *IgnoreThe,
    /* [optional][in] */ VARIANT *IgnoreKashida,
    /* [optional][in] */ VARIANT *IgnoreDiacritics,
    /* [optional][in] */ VARIANT *IgnoreHe,
    /* [optional][in] */ VARIANT *LanguageID);


void __RPC_STUB Selection_Sort2000_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_ConvertToTable_Proxy( 
    Selection * This,
    /* [optional][in] */ VARIANT *Separator,
    /* [optional][in] */ VARIANT *NumRows,
    /* [optional][in] */ VARIANT *NumColumns,
    /* [optional][in] */ VARIANT *InitialColumnWidth,
    /* [optional][in] */ VARIANT *Format,
    /* [optional][in] */ VARIANT *ApplyBorders,
    /* [optional][in] */ VARIANT *ApplyShading,
    /* [optional][in] */ VARIANT *ApplyFont,
    /* [optional][in] */ VARIANT *ApplyColor,
    /* [optional][in] */ VARIANT *ApplyHeadingRows,
    /* [optional][in] */ VARIANT *ApplyLastRow,
    /* [optional][in] */ VARIANT *ApplyFirstColumn,
    /* [optional][in] */ VARIANT *ApplyLastColumn,
    /* [optional][in] */ VARIANT *AutoFit,
    /* [optional][in] */ VARIANT *AutoFitBehavior,
    /* [optional][in] */ VARIANT *DefaultTableBehavior,
    /* [retval][out] */ Table **prop);


void __RPC_STUB Selection_ConvertToTable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Selection_get_NoProofing_Proxy( 
    Selection * This,
    /* [retval][out] */ long *prop);


void __RPC_STUB Selection_get_NoProofing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Selection_put_NoProofing_Proxy( 
    Selection * This,
    /* [in] */ long prop);


void __RPC_STUB Selection_put_NoProofing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Selection_get_TopLevelTables_Proxy( 
    Selection * This,
    /* [retval][out] */ Tables **prop);


void __RPC_STUB Selection_get_TopLevelTables_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Selection_get_LanguageDetected_Proxy( 
    Selection * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Selection_get_LanguageDetected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Selection_put_LanguageDetected_Proxy( 
    Selection * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Selection_put_LanguageDetected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Selection_get_FitTextWidth_Proxy( 
    Selection * This,
    /* [retval][out] */ int *prop);


void __RPC_STUB Selection_get_FitTextWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Selection_put_FitTextWidth_Proxy( 
    Selection * This,
    /* [in] */ int prop);


void __RPC_STUB Selection_put_FitTextWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_ClearFormatting_Proxy( 
    Selection * This);


void __RPC_STUB Selection_ClearFormatting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_PasteAppendTable_Proxy( 
    Selection * This);


void __RPC_STUB Selection_PasteAppendTable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Selection_get_HTMLDivisions_Proxy( 
    Selection * This,
    /* [retval][out] */ HTMLDivisions **prop);


void __RPC_STUB Selection_get_HTMLDivisions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Selection_get_SmartTags_Proxy( 
    Selection * This,
    /* [retval][out] */ SmartTags **prop);


void __RPC_STUB Selection_get_SmartTags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Selection_get_ChildShapeRange_Proxy( 
    Selection * This,
    /* [retval][out] */ /* external definition not present */ ShapeRange **prop);


void __RPC_STUB Selection_get_ChildShapeRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Selection_get_HasChildShapeRange_Proxy( 
    Selection * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Selection_get_HasChildShapeRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Selection_get_FootnoteOptions_Proxy( 
    Selection * This,
    /* [retval][out] */ FootnoteOptions **prop);


void __RPC_STUB Selection_get_FootnoteOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Selection_get_EndnoteOptions_Proxy( 
    Selection * This,
    /* [retval][out] */ EndnoteOptions **prop);


void __RPC_STUB Selection_get_EndnoteOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_ToggleCharacterCode_Proxy( 
    Selection * This);


void __RPC_STUB Selection_ToggleCharacterCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_PasteAndFormat_Proxy( 
    Selection * This,
    /* [in] */ WdRecoveryType Type);


void __RPC_STUB Selection_PasteAndFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_PasteExcelTable_Proxy( 
    Selection * This,
    /* [in] */ VARIANT_BOOL LinkedToExcel,
    /* [in] */ VARIANT_BOOL WordFormatting,
    /* [in] */ VARIANT_BOOL RTF);


void __RPC_STUB Selection_PasteExcelTable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_ShrinkDiscontiguousSelection_Proxy( 
    Selection * This);


void __RPC_STUB Selection_ShrinkDiscontiguousSelection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_InsertStyleSeparator_Proxy( 
    Selection * This);


void __RPC_STUB Selection_InsertStyleSeparator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_Sort_Proxy( 
    Selection * This,
    /* [optional][in] */ VARIANT *ExcludeHeader,
    /* [optional][in] */ VARIANT *FieldNumber,
    /* [optional][in] */ VARIANT *SortFieldType,
    /* [optional][in] */ VARIANT *SortOrder,
    /* [optional][in] */ VARIANT *FieldNumber2,
    /* [optional][in] */ VARIANT *SortFieldType2,
    /* [optional][in] */ VARIANT *SortOrder2,
    /* [optional][in] */ VARIANT *FieldNumber3,
    /* [optional][in] */ VARIANT *SortFieldType3,
    /* [optional][in] */ VARIANT *SortOrder3,
    /* [optional][in] */ VARIANT *SortColumn,
    /* [optional][in] */ VARIANT *Separator,
    /* [optional][in] */ VARIANT *CaseSensitive,
    /* [optional][in] */ VARIANT *BidiSort,
    /* [optional][in] */ VARIANT *IgnoreThe,
    /* [optional][in] */ VARIANT *IgnoreKashida,
    /* [optional][in] */ VARIANT *IgnoreDiacritics,
    /* [optional][in] */ VARIANT *IgnoreHe,
    /* [optional][in] */ VARIANT *LanguageID,
    /* [optional][in] */ VARIANT *SubFieldNumber,
    /* [optional][in] */ VARIANT *SubFieldNumber2,
    /* [optional][in] */ VARIANT *SubFieldNumber3);


void __RPC_STUB Selection_Sort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Selection_get_XMLNodes_Proxy( 
    Selection * This,
    /* [retval][out] */ XMLNodes **prop);


void __RPC_STUB Selection_get_XMLNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Selection_get_XMLParentNode_Proxy( 
    Selection * This,
    /* [retval][out] */ XMLNode **prop);


void __RPC_STUB Selection_get_XMLParentNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Selection_get_Editors_Proxy( 
    Selection * This,
    /* [retval][out] */ Editors **prop);


void __RPC_STUB Selection_get_Editors_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Selection_get_XML_Proxy( 
    Selection * This,
    /* [defaultvalue][optional][in] */ VARIANT_BOOL DataOnly,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB Selection_get_XML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Selection_get_EnhMetaFileBits_Proxy( 
    Selection * This,
    /* [retval][out] */ VARIANT *prop);


void __RPC_STUB Selection_get_EnhMetaFileBits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_GoToEditableRange_Proxy( 
    Selection * This,
    /* [optional][in] */ VARIANT *EditorID,
    /* [retval][out] */ Range **prop);


void __RPC_STUB Selection_GoToEditableRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_InsertXML_Proxy( 
    Selection * This,
    /* [in] */ BSTR XML,
    /* [optional][in] */ VARIANT *Transform);


void __RPC_STUB Selection_InsertXML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_InsertCaption_Proxy( 
    Selection * This,
    /* [in] */ VARIANT *Label,
    /* [optional][in] */ VARIANT *Title,
    /* [optional][in] */ VARIANT *TitleAutoText,
    /* [optional][in] */ VARIANT *Position,
    /* [optional][in] */ VARIANT *ExcludeLabel);


void __RPC_STUB Selection_InsertCaption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Selection_InsertCrossReference_Proxy( 
    Selection * This,
    /* [in] */ VARIANT *ReferenceType,
    /* [in] */ WdReferenceKind ReferenceKind,
    /* [in] */ VARIANT *ReferenceItem,
    /* [optional][in] */ VARIANT *InsertAsHyperlink,
    /* [optional][in] */ VARIANT *IncludePosition,
    /* [optional][in] */ VARIANT *SeparateNumbers,
    /* [optional][in] */ VARIANT *SeparatorString);


void __RPC_STUB Selection_InsertCrossReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Selection_INTERFACE_DEFINED__ */


#ifndef __TablesOfAuthoritiesCategories_INTERFACE_DEFINED__
#define __TablesOfAuthoritiesCategories_INTERFACE_DEFINED__

/* interface TablesOfAuthoritiesCategories */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TablesOfAuthoritiesCategories;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020976-0000-0000-C000-000000000046")
    TablesOfAuthoritiesCategories : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ TableOfAuthoritiesCategory **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TablesOfAuthoritiesCategoriesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TablesOfAuthoritiesCategories * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TablesOfAuthoritiesCategories * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TablesOfAuthoritiesCategories * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TablesOfAuthoritiesCategories * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TablesOfAuthoritiesCategories * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TablesOfAuthoritiesCategories * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TablesOfAuthoritiesCategories * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TablesOfAuthoritiesCategories * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TablesOfAuthoritiesCategories * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TablesOfAuthoritiesCategories * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            TablesOfAuthoritiesCategories * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TablesOfAuthoritiesCategories * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TablesOfAuthoritiesCategories * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ TableOfAuthoritiesCategory **prop);
        
        END_INTERFACE
    } TablesOfAuthoritiesCategoriesVtbl;

    interface TablesOfAuthoritiesCategories
    {
        CONST_VTBL struct TablesOfAuthoritiesCategoriesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TablesOfAuthoritiesCategories_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TablesOfAuthoritiesCategories_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TablesOfAuthoritiesCategories_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TablesOfAuthoritiesCategories_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TablesOfAuthoritiesCategories_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TablesOfAuthoritiesCategories_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TablesOfAuthoritiesCategories_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TablesOfAuthoritiesCategories_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TablesOfAuthoritiesCategories_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TablesOfAuthoritiesCategories_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TablesOfAuthoritiesCategories_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define TablesOfAuthoritiesCategories_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define TablesOfAuthoritiesCategories_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TablesOfAuthoritiesCategories_INTERFACE_DEFINED__ */


#ifndef __TableOfAuthoritiesCategory_INTERFACE_DEFINED__
#define __TableOfAuthoritiesCategory_INTERFACE_DEFINED__

/* interface TableOfAuthoritiesCategory */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TableOfAuthoritiesCategory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020977-0000-0000-C000-000000000046")
    TableOfAuthoritiesCategory : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TableOfAuthoritiesCategoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TableOfAuthoritiesCategory * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TableOfAuthoritiesCategory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TableOfAuthoritiesCategory * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TableOfAuthoritiesCategory * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TableOfAuthoritiesCategory * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TableOfAuthoritiesCategory * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TableOfAuthoritiesCategory * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TableOfAuthoritiesCategory * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TableOfAuthoritiesCategory * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TableOfAuthoritiesCategory * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            TableOfAuthoritiesCategory * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            TableOfAuthoritiesCategory * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            TableOfAuthoritiesCategory * This,
            /* [retval][out] */ long *prop);
        
        END_INTERFACE
    } TableOfAuthoritiesCategoryVtbl;

    interface TableOfAuthoritiesCategory
    {
        CONST_VTBL struct TableOfAuthoritiesCategoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TableOfAuthoritiesCategory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TableOfAuthoritiesCategory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TableOfAuthoritiesCategory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TableOfAuthoritiesCategory_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TableOfAuthoritiesCategory_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TableOfAuthoritiesCategory_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TableOfAuthoritiesCategory_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TableOfAuthoritiesCategory_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TableOfAuthoritiesCategory_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TableOfAuthoritiesCategory_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TableOfAuthoritiesCategory_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define TableOfAuthoritiesCategory_put_Name(This,prop)	\
    ( (This)->lpVtbl -> put_Name(This,prop) ) 

#define TableOfAuthoritiesCategory_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TableOfAuthoritiesCategory_INTERFACE_DEFINED__ */


#ifndef __CaptionLabels_INTERFACE_DEFINED__
#define __CaptionLabels_INTERFACE_DEFINED__

/* interface CaptionLabels */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_CaptionLabels;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020978-0000-0000-C000-000000000046")
    CaptionLabels : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ CaptionLabel **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ CaptionLabel **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CaptionLabelsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CaptionLabels * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CaptionLabels * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CaptionLabels * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CaptionLabels * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CaptionLabels * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CaptionLabels * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CaptionLabels * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            CaptionLabels * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            CaptionLabels * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CaptionLabels * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            CaptionLabels * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            CaptionLabels * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            CaptionLabels * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ CaptionLabel **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            CaptionLabels * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ CaptionLabel **prop);
        
        END_INTERFACE
    } CaptionLabelsVtbl;

    interface CaptionLabels
    {
        CONST_VTBL struct CaptionLabelsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CaptionLabels_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CaptionLabels_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CaptionLabels_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CaptionLabels_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CaptionLabels_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CaptionLabels_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CaptionLabels_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CaptionLabels_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define CaptionLabels_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define CaptionLabels_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define CaptionLabels_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define CaptionLabels_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define CaptionLabels_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define CaptionLabels_Add(This,Name,prop)	\
    ( (This)->lpVtbl -> Add(This,Name,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CaptionLabels_INTERFACE_DEFINED__ */


#ifndef __CaptionLabel_INTERFACE_DEFINED__
#define __CaptionLabel_INTERFACE_DEFINED__

/* interface CaptionLabel */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_CaptionLabel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020979-0000-0000-C000-000000000046")
    CaptionLabel : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BuiltIn( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ WdCaptionLabelID *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludeChapterNumber( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludeChapterNumber( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberStyle( 
            /* [retval][out] */ WdCaptionNumberStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberStyle( 
            /* [in] */ WdCaptionNumberStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChapterStyleLevel( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ChapterStyleLevel( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Separator( 
            /* [retval][out] */ WdSeparatorType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Separator( 
            /* [in] */ WdSeparatorType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Position( 
            /* [retval][out] */ WdCaptionPosition *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Position( 
            /* [in] */ WdCaptionPosition prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CaptionLabelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CaptionLabel * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CaptionLabel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CaptionLabel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CaptionLabel * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CaptionLabel * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CaptionLabel * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CaptionLabel * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            CaptionLabel * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            CaptionLabel * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CaptionLabel * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CaptionLabel * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BuiltIn )( 
            CaptionLabel * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            CaptionLabel * This,
            /* [retval][out] */ WdCaptionLabelID *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeChapterNumber )( 
            CaptionLabel * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeChapterNumber )( 
            CaptionLabel * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberStyle )( 
            CaptionLabel * This,
            /* [retval][out] */ WdCaptionNumberStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberStyle )( 
            CaptionLabel * This,
            /* [in] */ WdCaptionNumberStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChapterStyleLevel )( 
            CaptionLabel * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ChapterStyleLevel )( 
            CaptionLabel * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Separator )( 
            CaptionLabel * This,
            /* [retval][out] */ WdSeparatorType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Separator )( 
            CaptionLabel * This,
            /* [in] */ WdSeparatorType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Position )( 
            CaptionLabel * This,
            /* [retval][out] */ WdCaptionPosition *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Position )( 
            CaptionLabel * This,
            /* [in] */ WdCaptionPosition prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            CaptionLabel * This);
        
        END_INTERFACE
    } CaptionLabelVtbl;

    interface CaptionLabel
    {
        CONST_VTBL struct CaptionLabelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CaptionLabel_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CaptionLabel_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CaptionLabel_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CaptionLabel_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CaptionLabel_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CaptionLabel_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CaptionLabel_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CaptionLabel_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define CaptionLabel_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define CaptionLabel_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define CaptionLabel_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define CaptionLabel_get_BuiltIn(This,prop)	\
    ( (This)->lpVtbl -> get_BuiltIn(This,prop) ) 

#define CaptionLabel_get_ID(This,prop)	\
    ( (This)->lpVtbl -> get_ID(This,prop) ) 

#define CaptionLabel_get_IncludeChapterNumber(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeChapterNumber(This,prop) ) 

#define CaptionLabel_put_IncludeChapterNumber(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeChapterNumber(This,prop) ) 

#define CaptionLabel_get_NumberStyle(This,prop)	\
    ( (This)->lpVtbl -> get_NumberStyle(This,prop) ) 

#define CaptionLabel_put_NumberStyle(This,prop)	\
    ( (This)->lpVtbl -> put_NumberStyle(This,prop) ) 

#define CaptionLabel_get_ChapterStyleLevel(This,prop)	\
    ( (This)->lpVtbl -> get_ChapterStyleLevel(This,prop) ) 

#define CaptionLabel_put_ChapterStyleLevel(This,prop)	\
    ( (This)->lpVtbl -> put_ChapterStyleLevel(This,prop) ) 

#define CaptionLabel_get_Separator(This,prop)	\
    ( (This)->lpVtbl -> get_Separator(This,prop) ) 

#define CaptionLabel_put_Separator(This,prop)	\
    ( (This)->lpVtbl -> put_Separator(This,prop) ) 

#define CaptionLabel_get_Position(This,prop)	\
    ( (This)->lpVtbl -> get_Position(This,prop) ) 

#define CaptionLabel_put_Position(This,prop)	\
    ( (This)->lpVtbl -> put_Position(This,prop) ) 

#define CaptionLabel_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CaptionLabel_INTERFACE_DEFINED__ */


#ifndef __AutoCaptions_INTERFACE_DEFINED__
#define __AutoCaptions_INTERFACE_DEFINED__

/* interface AutoCaptions */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_AutoCaptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002097A-0000-0000-C000-000000000046")
    AutoCaptions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ AutoCaption **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CancelAutoInsert( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AutoCaptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AutoCaptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AutoCaptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AutoCaptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AutoCaptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AutoCaptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AutoCaptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AutoCaptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            AutoCaptions * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            AutoCaptions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AutoCaptions * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            AutoCaptions * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            AutoCaptions * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            AutoCaptions * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ AutoCaption **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CancelAutoInsert )( 
            AutoCaptions * This);
        
        END_INTERFACE
    } AutoCaptionsVtbl;

    interface AutoCaptions
    {
        CONST_VTBL struct AutoCaptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AutoCaptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AutoCaptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AutoCaptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AutoCaptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AutoCaptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AutoCaptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AutoCaptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AutoCaptions_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define AutoCaptions_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define AutoCaptions_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define AutoCaptions_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define AutoCaptions_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define AutoCaptions_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define AutoCaptions_CancelAutoInsert(This)	\
    ( (This)->lpVtbl -> CancelAutoInsert(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AutoCaptions_INTERFACE_DEFINED__ */


#ifndef __AutoCaption_INTERFACE_DEFINED__
#define __AutoCaption_INTERFACE_DEFINED__

/* interface AutoCaption */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_AutoCaption;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002097B-0000-0000-C000-000000000046")
    AutoCaption : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoInsert( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoInsert( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CaptionLabel( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CaptionLabel( 
            /* [in] */ VARIANT *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AutoCaptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AutoCaption * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AutoCaption * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AutoCaption * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AutoCaption * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AutoCaption * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AutoCaption * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AutoCaption * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            AutoCaption * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            AutoCaption * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AutoCaption * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            AutoCaption * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoInsert )( 
            AutoCaption * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoInsert )( 
            AutoCaption * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            AutoCaption * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CaptionLabel )( 
            AutoCaption * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CaptionLabel )( 
            AutoCaption * This,
            /* [in] */ VARIANT *prop);
        
        END_INTERFACE
    } AutoCaptionVtbl;

    interface AutoCaption
    {
        CONST_VTBL struct AutoCaptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AutoCaption_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AutoCaption_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AutoCaption_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AutoCaption_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AutoCaption_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AutoCaption_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AutoCaption_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AutoCaption_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define AutoCaption_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define AutoCaption_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define AutoCaption_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define AutoCaption_get_AutoInsert(This,prop)	\
    ( (This)->lpVtbl -> get_AutoInsert(This,prop) ) 

#define AutoCaption_put_AutoInsert(This,prop)	\
    ( (This)->lpVtbl -> put_AutoInsert(This,prop) ) 

#define AutoCaption_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define AutoCaption_get_CaptionLabel(This,prop)	\
    ( (This)->lpVtbl -> get_CaptionLabel(This,prop) ) 

#define AutoCaption_put_CaptionLabel(This,prop)	\
    ( (This)->lpVtbl -> put_CaptionLabel(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AutoCaption_INTERFACE_DEFINED__ */


#ifndef __Indexes_INTERFACE_DEFINED__
#define __Indexes_INTERFACE_DEFINED__

/* interface Indexes */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Indexes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002097C-0000-0000-C000-000000000046")
    Indexes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ WdIndexFormat *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Format( 
            /* [in] */ WdIndexFormat prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ /*Index*/ void **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AddOld( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *HeadingSeparator,
            /* [optional][in] */ VARIANT *RightAlignPageNumbers,
            /* [optional][in] */ VARIANT *Type,
            /* [optional][in] */ VARIANT *NumberOfColumns,
            /* [optional][in] */ VARIANT *AccentedLetters,
            /* [retval][out] */ /*Index*/ void **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MarkEntry( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Entry,
            /* [optional][in] */ VARIANT *EntryAutoText,
            /* [optional][in] */ VARIANT *CrossReference,
            /* [optional][in] */ VARIANT *CrossReferenceAutoText,
            /* [optional][in] */ VARIANT *BookmarkName,
            /* [optional][in] */ VARIANT *Bold,
            /* [optional][in] */ VARIANT *Italic,
            /* [optional][in] */ VARIANT *Reading,
            /* [retval][out] */ Field **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MarkAllEntries( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Entry,
            /* [optional][in] */ VARIANT *EntryAutoText,
            /* [optional][in] */ VARIANT *CrossReference,
            /* [optional][in] */ VARIANT *CrossReferenceAutoText,
            /* [optional][in] */ VARIANT *BookmarkName,
            /* [optional][in] */ VARIANT *Bold,
            /* [optional][in] */ VARIANT *Italic) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AutoMarkEntries( 
            /* [in] */ BSTR ConcordanceFileName) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *HeadingSeparator,
            /* [optional][in] */ VARIANT *RightAlignPageNumbers,
            /* [optional][in] */ VARIANT *Type,
            /* [optional][in] */ VARIANT *NumberOfColumns,
            /* [optional][in] */ VARIANT *AccentedLetters,
            /* [optional][in] */ VARIANT *SortBy,
            /* [optional][in] */ VARIANT *IndexLanguage,
            /* [retval][out] */ /*Index*/ void **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IndexesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Indexes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Indexes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Indexes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Indexes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Indexes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Indexes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Indexes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Indexes * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Indexes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Indexes * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Indexes * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Indexes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            Indexes * This,
            /* [retval][out] */ WdIndexFormat *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Format )( 
            Indexes * This,
            /* [in] */ WdIndexFormat prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Indexes * This,
            /* [in] */ long Index,
            /* [retval][out] */ /*Index*/ void **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AddOld )( 
            Indexes * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *HeadingSeparator,
            /* [optional][in] */ VARIANT *RightAlignPageNumbers,
            /* [optional][in] */ VARIANT *Type,
            /* [optional][in] */ VARIANT *NumberOfColumns,
            /* [optional][in] */ VARIANT *AccentedLetters,
            /* [retval][out] */ /*Index*/ void **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MarkEntry )( 
            Indexes * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Entry,
            /* [optional][in] */ VARIANT *EntryAutoText,
            /* [optional][in] */ VARIANT *CrossReference,
            /* [optional][in] */ VARIANT *CrossReferenceAutoText,
            /* [optional][in] */ VARIANT *BookmarkName,
            /* [optional][in] */ VARIANT *Bold,
            /* [optional][in] */ VARIANT *Italic,
            /* [optional][in] */ VARIANT *Reading,
            /* [retval][out] */ Field **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MarkAllEntries )( 
            Indexes * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *Entry,
            /* [optional][in] */ VARIANT *EntryAutoText,
            /* [optional][in] */ VARIANT *CrossReference,
            /* [optional][in] */ VARIANT *CrossReferenceAutoText,
            /* [optional][in] */ VARIANT *BookmarkName,
            /* [optional][in] */ VARIANT *Bold,
            /* [optional][in] */ VARIANT *Italic);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AutoMarkEntries )( 
            Indexes * This,
            /* [in] */ BSTR ConcordanceFileName);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Indexes * This,
            /* [in] */ Range *Range,
            /* [optional][in] */ VARIANT *HeadingSeparator,
            /* [optional][in] */ VARIANT *RightAlignPageNumbers,
            /* [optional][in] */ VARIANT *Type,
            /* [optional][in] */ VARIANT *NumberOfColumns,
            /* [optional][in] */ VARIANT *AccentedLetters,
            /* [optional][in] */ VARIANT *SortBy,
            /* [optional][in] */ VARIANT *IndexLanguage,
            /* [retval][out] */ /*Index*/ void **prop);
        
        END_INTERFACE
    } IndexesVtbl;

    interface Indexes
    {
        CONST_VTBL struct IndexesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Indexes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Indexes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Indexes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Indexes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Indexes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Indexes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Indexes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Indexes_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Indexes_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Indexes_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Indexes_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Indexes_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Indexes_get_Format(This,prop)	\
    ( (This)->lpVtbl -> get_Format(This,prop) ) 

#define Indexes_put_Format(This,prop)	\
    ( (This)->lpVtbl -> put_Format(This,prop) ) 

#define Indexes_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Indexes_AddOld(This,Range,HeadingSeparator,RightAlignPageNumbers,Type,NumberOfColumns,AccentedLetters,prop)	\
    ( (This)->lpVtbl -> AddOld(This,Range,HeadingSeparator,RightAlignPageNumbers,Type,NumberOfColumns,AccentedLetters,prop) ) 

#define Indexes_MarkEntry(This,Range,Entry,EntryAutoText,CrossReference,CrossReferenceAutoText,BookmarkName,Bold,Italic,Reading,prop)	\
    ( (This)->lpVtbl -> MarkEntry(This,Range,Entry,EntryAutoText,CrossReference,CrossReferenceAutoText,BookmarkName,Bold,Italic,Reading,prop) ) 

#define Indexes_MarkAllEntries(This,Range,Entry,EntryAutoText,CrossReference,CrossReferenceAutoText,BookmarkName,Bold,Italic)	\
    ( (This)->lpVtbl -> MarkAllEntries(This,Range,Entry,EntryAutoText,CrossReference,CrossReferenceAutoText,BookmarkName,Bold,Italic) ) 

#define Indexes_AutoMarkEntries(This,ConcordanceFileName)	\
    ( (This)->lpVtbl -> AutoMarkEntries(This,ConcordanceFileName) ) 

#define Indexes_Add(This,Range,HeadingSeparator,RightAlignPageNumbers,Type,NumberOfColumns,AccentedLetters,SortBy,IndexLanguage,prop)	\
    ( (This)->lpVtbl -> Add(This,Range,HeadingSeparator,RightAlignPageNumbers,Type,NumberOfColumns,AccentedLetters,SortBy,IndexLanguage,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Indexes_INTERFACE_DEFINED__ */


#ifndef __Index_INTERFACE_DEFINED__
#define __Index_INTERFACE_DEFINED__

/* interface Index */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Index;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002097D-0000-0000-C000-000000000046")
    Index : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeadingSeparator( 
            /* [retval][out] */ WdHeadingSeparator *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HeadingSeparator( 
            /* [in] */ WdHeadingSeparator prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RightAlignPageNumbers( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RightAlignPageNumbers( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdIndexType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ WdIndexType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberOfColumns( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberOfColumns( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TabLeader( 
            /* [retval][out] */ WdTabLeader *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TabLeader( 
            /* [in] */ WdTabLeader prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AccentedLetters( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AccentedLetters( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SortBy( 
            /* [retval][out] */ WdIndexSortBy *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SortBy( 
            /* [in] */ WdIndexSortBy prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Filter( 
            /* [retval][out] */ WdIndexFilter *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Filter( 
            /* [in] */ WdIndexFilter prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IndexLanguage( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IndexLanguage( 
            /* [in] */ WdLanguageID prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IndexVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Index * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Index * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Index * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Index * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Index * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Index * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Index * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Index * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Index * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Index * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeadingSeparator )( 
            Index * This,
            /* [retval][out] */ WdHeadingSeparator *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HeadingSeparator )( 
            Index * This,
            /* [in] */ WdHeadingSeparator prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RightAlignPageNumbers )( 
            Index * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RightAlignPageNumbers )( 
            Index * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Index * This,
            /* [retval][out] */ WdIndexType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            Index * This,
            /* [in] */ WdIndexType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberOfColumns )( 
            Index * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberOfColumns )( 
            Index * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Index * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabLeader )( 
            Index * This,
            /* [retval][out] */ WdTabLeader *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TabLeader )( 
            Index * This,
            /* [in] */ WdTabLeader prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AccentedLetters )( 
            Index * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AccentedLetters )( 
            Index * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SortBy )( 
            Index * This,
            /* [retval][out] */ WdIndexSortBy *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SortBy )( 
            Index * This,
            /* [in] */ WdIndexSortBy prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Filter )( 
            Index * This,
            /* [retval][out] */ WdIndexFilter *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Filter )( 
            Index * This,
            /* [in] */ WdIndexFilter prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Index * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            Index * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IndexLanguage )( 
            Index * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IndexLanguage )( 
            Index * This,
            /* [in] */ WdLanguageID prop);
        
        END_INTERFACE
    } IndexVtbl;

    interface Index
    {
        CONST_VTBL struct IndexVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Index_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Index_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Index_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Index_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Index_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Index_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Index_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Index_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Index_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Index_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Index_get_HeadingSeparator(This,prop)	\
    ( (This)->lpVtbl -> get_HeadingSeparator(This,prop) ) 

#define Index_put_HeadingSeparator(This,prop)	\
    ( (This)->lpVtbl -> put_HeadingSeparator(This,prop) ) 

#define Index_get_RightAlignPageNumbers(This,prop)	\
    ( (This)->lpVtbl -> get_RightAlignPageNumbers(This,prop) ) 

#define Index_put_RightAlignPageNumbers(This,prop)	\
    ( (This)->lpVtbl -> put_RightAlignPageNumbers(This,prop) ) 

#define Index_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define Index_put_Type(This,prop)	\
    ( (This)->lpVtbl -> put_Type(This,prop) ) 

#define Index_get_NumberOfColumns(This,prop)	\
    ( (This)->lpVtbl -> get_NumberOfColumns(This,prop) ) 

#define Index_put_NumberOfColumns(This,prop)	\
    ( (This)->lpVtbl -> put_NumberOfColumns(This,prop) ) 

#define Index_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Index_get_TabLeader(This,prop)	\
    ( (This)->lpVtbl -> get_TabLeader(This,prop) ) 

#define Index_put_TabLeader(This,prop)	\
    ( (This)->lpVtbl -> put_TabLeader(This,prop) ) 

#define Index_get_AccentedLetters(This,prop)	\
    ( (This)->lpVtbl -> get_AccentedLetters(This,prop) ) 

#define Index_put_AccentedLetters(This,prop)	\
    ( (This)->lpVtbl -> put_AccentedLetters(This,prop) ) 

#define Index_get_SortBy(This,prop)	\
    ( (This)->lpVtbl -> get_SortBy(This,prop) ) 

#define Index_put_SortBy(This,prop)	\
    ( (This)->lpVtbl -> put_SortBy(This,prop) ) 

#define Index_get_Filter(This,prop)	\
    ( (This)->lpVtbl -> get_Filter(This,prop) ) 

#define Index_put_Filter(This,prop)	\
    ( (This)->lpVtbl -> put_Filter(This,prop) ) 

#define Index_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Index_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define Index_get_IndexLanguage(This,prop)	\
    ( (This)->lpVtbl -> get_IndexLanguage(This,prop) ) 

#define Index_put_IndexLanguage(This,prop)	\
    ( (This)->lpVtbl -> put_IndexLanguage(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Index_INTERFACE_DEFINED__ */


#ifndef __AddIn_INTERFACE_DEFINED__
#define __AddIn_INTERFACE_DEFINED__

/* interface AddIn */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_AddIn;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002097E-0000-0000-C000-000000000046")
    AddIn : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Installed( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Installed( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Compiled( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Autoload( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AddInVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AddIn * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AddIn * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AddIn * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AddIn * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AddIn * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AddIn * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AddIn * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            AddIn * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            AddIn * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AddIn * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            AddIn * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            AddIn * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            AddIn * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Installed )( 
            AddIn * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Installed )( 
            AddIn * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Compiled )( 
            AddIn * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Autoload )( 
            AddIn * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            AddIn * This);
        
        END_INTERFACE
    } AddInVtbl;

    interface AddIn
    {
        CONST_VTBL struct AddInVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AddIn_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AddIn_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AddIn_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AddIn_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AddIn_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AddIn_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AddIn_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AddIn_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define AddIn_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define AddIn_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define AddIn_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define AddIn_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define AddIn_get_Path(This,prop)	\
    ( (This)->lpVtbl -> get_Path(This,prop) ) 

#define AddIn_get_Installed(This,prop)	\
    ( (This)->lpVtbl -> get_Installed(This,prop) ) 

#define AddIn_put_Installed(This,prop)	\
    ( (This)->lpVtbl -> put_Installed(This,prop) ) 

#define AddIn_get_Compiled(This,prop)	\
    ( (This)->lpVtbl -> get_Compiled(This,prop) ) 

#define AddIn_get_Autoload(This,prop)	\
    ( (This)->lpVtbl -> get_Autoload(This,prop) ) 

#define AddIn_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AddIn_INTERFACE_DEFINED__ */


#ifndef __AddIns_INTERFACE_DEFINED__
#define __AddIns_INTERFACE_DEFINED__

/* interface AddIns */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_AddIns;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002097F-0000-0000-C000-000000000046")
    AddIns : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ AddIn **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *Install,
            /* [retval][out] */ AddIn **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Unload( 
            /* [in] */ VARIANT_BOOL RemoveFromList) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AddInsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AddIns * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AddIns * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AddIns * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AddIns * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AddIns * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AddIns * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AddIns * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            AddIns * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            AddIns * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AddIns * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            AddIns * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            AddIns * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            AddIns * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ AddIn **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            AddIns * This,
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *Install,
            /* [retval][out] */ AddIn **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Unload )( 
            AddIns * This,
            /* [in] */ VARIANT_BOOL RemoveFromList);
        
        END_INTERFACE
    } AddInsVtbl;

    interface AddIns
    {
        CONST_VTBL struct AddInsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AddIns_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define AddIns_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define AddIns_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define AddIns_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define AddIns_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define AddIns_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define AddIns_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define AddIns_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define AddIns_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define AddIns_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define AddIns_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define AddIns_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define AddIns_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define AddIns_Add(This,FileName,Install,prop)	\
    ( (This)->lpVtbl -> Add(This,FileName,Install,prop) ) 

#define AddIns_Unload(This,RemoveFromList)	\
    ( (This)->lpVtbl -> Unload(This,RemoveFromList) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __AddIns_INTERFACE_DEFINED__ */


#ifndef __Revisions_INTERFACE_DEFINED__
#define __Revisions_INTERFACE_DEFINED__

/* interface Revisions */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Revisions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020980-0000-0000-C000-000000000046")
    Revisions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Revision **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AcceptAll( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RejectAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RevisionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Revisions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Revisions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Revisions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Revisions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Revisions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Revisions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Revisions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Revisions * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Revisions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Revisions * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Revisions * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Revisions * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Revisions * This,
            /* [in] */ long Index,
            /* [retval][out] */ Revision **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AcceptAll )( 
            Revisions * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RejectAll )( 
            Revisions * This);
        
        END_INTERFACE
    } RevisionsVtbl;

    interface Revisions
    {
        CONST_VTBL struct RevisionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Revisions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Revisions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Revisions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Revisions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Revisions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Revisions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Revisions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Revisions_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Revisions_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Revisions_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Revisions_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Revisions_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Revisions_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Revisions_AcceptAll(This)	\
    ( (This)->lpVtbl -> AcceptAll(This) ) 

#define Revisions_RejectAll(This)	\
    ( (This)->lpVtbl -> RejectAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Revisions_INTERFACE_DEFINED__ */


#ifndef __Revision_INTERFACE_DEFINED__
#define __Revision_INTERFACE_DEFINED__

/* interface Revision */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Revision;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020981-0000-0000-C000-000000000046")
    Revision : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Author( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Date( 
            /* [retval][out] */ DATE *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdRevisionType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Accept( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Reject( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ Style **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormatDescription( 
            /* [retval][out] */ BSTR *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RevisionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Revision * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Revision * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Revision * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Revision * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Revision * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Revision * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Revision * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Revision * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Revision * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Revision * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Author )( 
            Revision * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Date )( 
            Revision * This,
            /* [retval][out] */ DATE *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Revision * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Revision * This,
            /* [retval][out] */ WdRevisionType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            Revision * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Accept )( 
            Revision * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Reject )( 
            Revision * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            Revision * This,
            /* [retval][out] */ Style **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormatDescription )( 
            Revision * This,
            /* [retval][out] */ BSTR *prop);
        
        END_INTERFACE
    } RevisionVtbl;

    interface Revision
    {
        CONST_VTBL struct RevisionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Revision_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Revision_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Revision_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Revision_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Revision_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Revision_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Revision_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Revision_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Revision_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Revision_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Revision_get_Author(This,prop)	\
    ( (This)->lpVtbl -> get_Author(This,prop) ) 

#define Revision_get_Date(This,prop)	\
    ( (This)->lpVtbl -> get_Date(This,prop) ) 

#define Revision_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Revision_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define Revision_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define Revision_Accept(This)	\
    ( (This)->lpVtbl -> Accept(This) ) 

#define Revision_Reject(This)	\
    ( (This)->lpVtbl -> Reject(This) ) 

#define Revision_get_Style(This,prop)	\
    ( (This)->lpVtbl -> get_Style(This,prop) ) 

#define Revision_get_FormatDescription(This,prop)	\
    ( (This)->lpVtbl -> get_FormatDescription(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Revision_INTERFACE_DEFINED__ */


#ifndef __Task_INTERFACE_DEFINED__
#define __Task_INTERFACE_DEFINED__

/* interface Task */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Task;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020982-0000-0000-C000-000000000046")
    Task : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WindowState( 
            /* [retval][out] */ WdWindowState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WindowState( 
            /* [in] */ WdWindowState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( 
            /* [optional][in] */ VARIANT *Wait) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Move( 
            /* [in] */ long Left,
            /* [in] */ long Top) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Resize( 
            /* [in] */ long Width,
            /* [in] */ long Height) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SendWindowMessage( 
            /* [in] */ long Message,
            /* [in] */ long wParam,
            /* [in] */ long lParam) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TaskVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Task * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Task * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Task * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Task * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Task * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Task * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Task * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Task * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Task * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Task * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Task * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            Task * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            Task * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            Task * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            Task * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Task * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            Task * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Task * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            Task * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowState )( 
            Task * This,
            /* [retval][out] */ WdWindowState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WindowState )( 
            Task * This,
            /* [in] */ WdWindowState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            Task * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            Task * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            Task * This,
            /* [optional][in] */ VARIANT *Wait);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            Task * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            Task * This,
            /* [in] */ long Left,
            /* [in] */ long Top);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Resize )( 
            Task * This,
            /* [in] */ long Width,
            /* [in] */ long Height);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SendWindowMessage )( 
            Task * This,
            /* [in] */ long Message,
            /* [in] */ long wParam,
            /* [in] */ long lParam);
        
        END_INTERFACE
    } TaskVtbl;

    interface Task
    {
        CONST_VTBL struct TaskVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Task_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Task_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Task_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Task_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Task_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Task_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Task_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Task_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Task_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Task_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Task_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define Task_get_Left(This,prop)	\
    ( (This)->lpVtbl -> get_Left(This,prop) ) 

#define Task_put_Left(This,prop)	\
    ( (This)->lpVtbl -> put_Left(This,prop) ) 

#define Task_get_Top(This,prop)	\
    ( (This)->lpVtbl -> get_Top(This,prop) ) 

#define Task_put_Top(This,prop)	\
    ( (This)->lpVtbl -> put_Top(This,prop) ) 

#define Task_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define Task_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define Task_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define Task_put_Height(This,prop)	\
    ( (This)->lpVtbl -> put_Height(This,prop) ) 

#define Task_get_WindowState(This,prop)	\
    ( (This)->lpVtbl -> get_WindowState(This,prop) ) 

#define Task_put_WindowState(This,prop)	\
    ( (This)->lpVtbl -> put_WindowState(This,prop) ) 

#define Task_get_Visible(This,prop)	\
    ( (This)->lpVtbl -> get_Visible(This,prop) ) 

#define Task_put_Visible(This,prop)	\
    ( (This)->lpVtbl -> put_Visible(This,prop) ) 

#define Task_Activate(This,Wait)	\
    ( (This)->lpVtbl -> Activate(This,Wait) ) 

#define Task_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define Task_Move(This,Left,Top)	\
    ( (This)->lpVtbl -> Move(This,Left,Top) ) 

#define Task_Resize(This,Width,Height)	\
    ( (This)->lpVtbl -> Resize(This,Width,Height) ) 

#define Task_SendWindowMessage(This,Message,wParam,lParam)	\
    ( (This)->lpVtbl -> SendWindowMessage(This,Message,wParam,lParam) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Task_INTERFACE_DEFINED__ */


#ifndef __Tasks_INTERFACE_DEFINED__
#define __Tasks_INTERFACE_DEFINED__

/* interface Tasks */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Tasks;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020983-0000-0000-C000-000000000046")
    Tasks : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Task **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Exists( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExitWindows( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TasksVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Tasks * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Tasks * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Tasks * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Tasks * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Tasks * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Tasks * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Tasks * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Tasks * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Tasks * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Tasks * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Tasks * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Tasks * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Tasks * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Task **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Exists )( 
            Tasks * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExitWindows )( 
            Tasks * This);
        
        END_INTERFACE
    } TasksVtbl;

    interface Tasks
    {
        CONST_VTBL struct TasksVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Tasks_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Tasks_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Tasks_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Tasks_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Tasks_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Tasks_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Tasks_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Tasks_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Tasks_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Tasks_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Tasks_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Tasks_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Tasks_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Tasks_Exists(This,Name,prop)	\
    ( (This)->lpVtbl -> Exists(This,Name,prop) ) 

#define Tasks_ExitWindows(This)	\
    ( (This)->lpVtbl -> ExitWindows(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Tasks_INTERFACE_DEFINED__ */


#ifndef __HeadersFooters_INTERFACE_DEFINED__
#define __HeadersFooters_INTERFACE_DEFINED__

/* interface HeadersFooters */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_HeadersFooters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020984-0000-0000-C000-000000000046")
    HeadersFooters : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ WdHeaderFooterIndex Index,
            /* [retval][out] */ HeaderFooter **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HeadersFootersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HeadersFooters * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HeadersFooters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HeadersFooters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HeadersFooters * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HeadersFooters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HeadersFooters * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HeadersFooters * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            HeadersFooters * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            HeadersFooters * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HeadersFooters * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            HeadersFooters * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            HeadersFooters * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            HeadersFooters * This,
            /* [in] */ WdHeaderFooterIndex Index,
            /* [retval][out] */ HeaderFooter **prop);
        
        END_INTERFACE
    } HeadersFootersVtbl;

    interface HeadersFooters
    {
        CONST_VTBL struct HeadersFootersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HeadersFooters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HeadersFooters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HeadersFooters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HeadersFooters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HeadersFooters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HeadersFooters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HeadersFooters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HeadersFooters_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define HeadersFooters_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define HeadersFooters_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define HeadersFooters_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define HeadersFooters_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define HeadersFooters_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HeadersFooters_INTERFACE_DEFINED__ */


#ifndef __HeaderFooter_INTERFACE_DEFINED__
#define __HeaderFooter_INTERFACE_DEFINED__

/* interface HeaderFooter */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_HeaderFooter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020985-0000-0000-C000-000000000046")
    HeaderFooter : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ WdHeaderFooterIndex *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsHeader( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Exists( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Exists( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageNumbers( 
            /* [retval][out] */ PageNumbers **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinkToPrevious( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LinkToPrevious( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shapes( 
            /* [retval][out] */ /* external definition not present */ Shapes **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HeaderFooterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HeaderFooter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HeaderFooter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HeaderFooter * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HeaderFooter * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HeaderFooter * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HeaderFooter * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HeaderFooter * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            HeaderFooter * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            HeaderFooter * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HeaderFooter * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            HeaderFooter * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            HeaderFooter * This,
            /* [retval][out] */ WdHeaderFooterIndex *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsHeader )( 
            HeaderFooter * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Exists )( 
            HeaderFooter * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Exists )( 
            HeaderFooter * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageNumbers )( 
            HeaderFooter * This,
            /* [retval][out] */ PageNumbers **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinkToPrevious )( 
            HeaderFooter * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinkToPrevious )( 
            HeaderFooter * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shapes )( 
            HeaderFooter * This,
            /* [retval][out] */ /* external definition not present */ Shapes **prop);
        
        END_INTERFACE
    } HeaderFooterVtbl;

    interface HeaderFooter
    {
        CONST_VTBL struct HeaderFooterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HeaderFooter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HeaderFooter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HeaderFooter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HeaderFooter_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HeaderFooter_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HeaderFooter_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HeaderFooter_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HeaderFooter_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define HeaderFooter_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define HeaderFooter_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define HeaderFooter_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define HeaderFooter_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define HeaderFooter_get_IsHeader(This,prop)	\
    ( (This)->lpVtbl -> get_IsHeader(This,prop) ) 

#define HeaderFooter_get_Exists(This,prop)	\
    ( (This)->lpVtbl -> get_Exists(This,prop) ) 

#define HeaderFooter_put_Exists(This,prop)	\
    ( (This)->lpVtbl -> put_Exists(This,prop) ) 

#define HeaderFooter_get_PageNumbers(This,prop)	\
    ( (This)->lpVtbl -> get_PageNumbers(This,prop) ) 

#define HeaderFooter_get_LinkToPrevious(This,prop)	\
    ( (This)->lpVtbl -> get_LinkToPrevious(This,prop) ) 

#define HeaderFooter_put_LinkToPrevious(This,prop)	\
    ( (This)->lpVtbl -> put_LinkToPrevious(This,prop) ) 

#define HeaderFooter_get_Shapes(This,prop)	\
    ( (This)->lpVtbl -> get_Shapes(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HeaderFooter_INTERFACE_DEFINED__ */


#ifndef __PageNumbers_INTERFACE_DEFINED__
#define __PageNumbers_INTERFACE_DEFINED__

/* interface PageNumbers */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_PageNumbers;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020986-0000-0000-C000-000000000046")
    PageNumbers : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberStyle( 
            /* [retval][out] */ WdPageNumberStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberStyle( 
            /* [in] */ WdPageNumberStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludeChapterNumber( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludeChapterNumber( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeadingLevelForChapter( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HeadingLevelForChapter( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChapterPageSeparator( 
            /* [retval][out] */ WdSeparatorType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ChapterPageSeparator( 
            /* [in] */ WdSeparatorType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RestartNumberingAtSection( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RestartNumberingAtSection( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartingNumber( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartingNumber( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowFirstPageNumber( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowFirstPageNumber( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ PageNumber **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [optional][in] */ VARIANT *PageNumberAlignment,
            /* [optional][in] */ VARIANT *FirstPage,
            /* [retval][out] */ PageNumber **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DoubleQuote( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DoubleQuote( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PageNumbersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PageNumbers * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PageNumbers * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PageNumbers * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PageNumbers * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PageNumbers * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PageNumbers * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PageNumbers * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            PageNumbers * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            PageNumbers * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PageNumbers * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            PageNumbers * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            PageNumbers * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberStyle )( 
            PageNumbers * This,
            /* [retval][out] */ WdPageNumberStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberStyle )( 
            PageNumbers * This,
            /* [in] */ WdPageNumberStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeChapterNumber )( 
            PageNumbers * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeChapterNumber )( 
            PageNumbers * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeadingLevelForChapter )( 
            PageNumbers * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HeadingLevelForChapter )( 
            PageNumbers * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChapterPageSeparator )( 
            PageNumbers * This,
            /* [retval][out] */ WdSeparatorType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ChapterPageSeparator )( 
            PageNumbers * This,
            /* [in] */ WdSeparatorType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RestartNumberingAtSection )( 
            PageNumbers * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RestartNumberingAtSection )( 
            PageNumbers * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartingNumber )( 
            PageNumbers * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartingNumber )( 
            PageNumbers * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowFirstPageNumber )( 
            PageNumbers * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowFirstPageNumber )( 
            PageNumbers * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            PageNumbers * This,
            /* [in] */ long Index,
            /* [retval][out] */ PageNumber **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            PageNumbers * This,
            /* [optional][in] */ VARIANT *PageNumberAlignment,
            /* [optional][in] */ VARIANT *FirstPage,
            /* [retval][out] */ PageNumber **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DoubleQuote )( 
            PageNumbers * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DoubleQuote )( 
            PageNumbers * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } PageNumbersVtbl;

    interface PageNumbers
    {
        CONST_VTBL struct PageNumbersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PageNumbers_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PageNumbers_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PageNumbers_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PageNumbers_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PageNumbers_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PageNumbers_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PageNumbers_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PageNumbers_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define PageNumbers_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define PageNumbers_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define PageNumbers_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define PageNumbers_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define PageNumbers_get_NumberStyle(This,prop)	\
    ( (This)->lpVtbl -> get_NumberStyle(This,prop) ) 

#define PageNumbers_put_NumberStyle(This,prop)	\
    ( (This)->lpVtbl -> put_NumberStyle(This,prop) ) 

#define PageNumbers_get_IncludeChapterNumber(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeChapterNumber(This,prop) ) 

#define PageNumbers_put_IncludeChapterNumber(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeChapterNumber(This,prop) ) 

#define PageNumbers_get_HeadingLevelForChapter(This,prop)	\
    ( (This)->lpVtbl -> get_HeadingLevelForChapter(This,prop) ) 

#define PageNumbers_put_HeadingLevelForChapter(This,prop)	\
    ( (This)->lpVtbl -> put_HeadingLevelForChapter(This,prop) ) 

#define PageNumbers_get_ChapterPageSeparator(This,prop)	\
    ( (This)->lpVtbl -> get_ChapterPageSeparator(This,prop) ) 

#define PageNumbers_put_ChapterPageSeparator(This,prop)	\
    ( (This)->lpVtbl -> put_ChapterPageSeparator(This,prop) ) 

#define PageNumbers_get_RestartNumberingAtSection(This,prop)	\
    ( (This)->lpVtbl -> get_RestartNumberingAtSection(This,prop) ) 

#define PageNumbers_put_RestartNumberingAtSection(This,prop)	\
    ( (This)->lpVtbl -> put_RestartNumberingAtSection(This,prop) ) 

#define PageNumbers_get_StartingNumber(This,prop)	\
    ( (This)->lpVtbl -> get_StartingNumber(This,prop) ) 

#define PageNumbers_put_StartingNumber(This,prop)	\
    ( (This)->lpVtbl -> put_StartingNumber(This,prop) ) 

#define PageNumbers_get_ShowFirstPageNumber(This,prop)	\
    ( (This)->lpVtbl -> get_ShowFirstPageNumber(This,prop) ) 

#define PageNumbers_put_ShowFirstPageNumber(This,prop)	\
    ( (This)->lpVtbl -> put_ShowFirstPageNumber(This,prop) ) 

#define PageNumbers_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define PageNumbers_Add(This,PageNumberAlignment,FirstPage,prop)	\
    ( (This)->lpVtbl -> Add(This,PageNumberAlignment,FirstPage,prop) ) 

#define PageNumbers_get_DoubleQuote(This,prop)	\
    ( (This)->lpVtbl -> get_DoubleQuote(This,prop) ) 

#define PageNumbers_put_DoubleQuote(This,prop)	\
    ( (This)->lpVtbl -> put_DoubleQuote(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PageNumbers_INTERFACE_DEFINED__ */


#ifndef __PageNumber_INTERFACE_DEFINED__
#define __PageNumber_INTERFACE_DEFINED__

/* interface PageNumber */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_PageNumber;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020987-0000-0000-C000-000000000046")
    PageNumber : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ WdPageNumberAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ WdPageNumberAlignment prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PageNumberVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PageNumber * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PageNumber * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PageNumber * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PageNumber * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PageNumber * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PageNumber * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PageNumber * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            PageNumber * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            PageNumber * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PageNumber * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            PageNumber * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            PageNumber * This,
            /* [retval][out] */ WdPageNumberAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            PageNumber * This,
            /* [in] */ WdPageNumberAlignment prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            PageNumber * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            PageNumber * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            PageNumber * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            PageNumber * This);
        
        END_INTERFACE
    } PageNumberVtbl;

    interface PageNumber
    {
        CONST_VTBL struct PageNumberVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PageNumber_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PageNumber_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PageNumber_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PageNumber_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PageNumber_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PageNumber_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PageNumber_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PageNumber_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define PageNumber_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define PageNumber_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define PageNumber_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define PageNumber_get_Alignment(This,prop)	\
    ( (This)->lpVtbl -> get_Alignment(This,prop) ) 

#define PageNumber_put_Alignment(This,prop)	\
    ( (This)->lpVtbl -> put_Alignment(This,prop) ) 

#define PageNumber_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define PageNumber_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define PageNumber_Cut(This)	\
    ( (This)->lpVtbl -> Cut(This) ) 

#define PageNumber_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PageNumber_INTERFACE_DEFINED__ */


#ifndef __Subdocuments_INTERFACE_DEFINED__
#define __Subdocuments_INTERFACE_DEFINED__

/* interface Subdocuments */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Subdocuments;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020988-0000-0000-C000-000000000046")
    Subdocuments : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Expanded( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Expanded( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Subdocument **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromFile( 
            /* [in] */ VARIANT *Name,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [retval][out] */ Subdocument **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromRange( 
            /* [in] */ Range *Range,
            /* [retval][out] */ Subdocument **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Merge( 
            /* [optional][in] */ VARIANT *FirstSubdocument,
            /* [optional][in] */ VARIANT *LastSubdocument) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SubdocumentsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Subdocuments * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Subdocuments * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Subdocuments * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Subdocuments * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Subdocuments * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Subdocuments * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Subdocuments * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Subdocuments * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Subdocuments * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Subdocuments * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Subdocuments * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Subdocuments * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Expanded )( 
            Subdocuments * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Expanded )( 
            Subdocuments * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Subdocuments * This,
            /* [in] */ long Index,
            /* [retval][out] */ Subdocument **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromFile )( 
            Subdocuments * This,
            /* [in] */ VARIANT *Name,
            /* [optional][in] */ VARIANT *ConfirmConversions,
            /* [optional][in] */ VARIANT *ReadOnly,
            /* [optional][in] */ VARIANT *PasswordDocument,
            /* [optional][in] */ VARIANT *PasswordTemplate,
            /* [optional][in] */ VARIANT *Revert,
            /* [optional][in] */ VARIANT *WritePasswordDocument,
            /* [optional][in] */ VARIANT *WritePasswordTemplate,
            /* [retval][out] */ Subdocument **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromRange )( 
            Subdocuments * This,
            /* [in] */ Range *Range,
            /* [retval][out] */ Subdocument **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Merge )( 
            Subdocuments * This,
            /* [optional][in] */ VARIANT *FirstSubdocument,
            /* [optional][in] */ VARIANT *LastSubdocument);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Subdocuments * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Subdocuments * This);
        
        END_INTERFACE
    } SubdocumentsVtbl;

    interface Subdocuments
    {
        CONST_VTBL struct SubdocumentsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Subdocuments_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Subdocuments_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Subdocuments_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Subdocuments_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Subdocuments_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Subdocuments_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Subdocuments_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Subdocuments_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Subdocuments_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Subdocuments_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Subdocuments_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Subdocuments_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Subdocuments_get_Expanded(This,prop)	\
    ( (This)->lpVtbl -> get_Expanded(This,prop) ) 

#define Subdocuments_put_Expanded(This,prop)	\
    ( (This)->lpVtbl -> put_Expanded(This,prop) ) 

#define Subdocuments_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Subdocuments_AddFromFile(This,Name,ConfirmConversions,ReadOnly,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate,prop)	\
    ( (This)->lpVtbl -> AddFromFile(This,Name,ConfirmConversions,ReadOnly,PasswordDocument,PasswordTemplate,Revert,WritePasswordDocument,WritePasswordTemplate,prop) ) 

#define Subdocuments_AddFromRange(This,Range,prop)	\
    ( (This)->lpVtbl -> AddFromRange(This,Range,prop) ) 

#define Subdocuments_Merge(This,FirstSubdocument,LastSubdocument)	\
    ( (This)->lpVtbl -> Merge(This,FirstSubdocument,LastSubdocument) ) 

#define Subdocuments_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Subdocuments_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Subdocuments_INTERFACE_DEFINED__ */


#ifndef __Subdocument_INTERFACE_DEFINED__
#define __Subdocument_INTERFACE_DEFINED__

/* interface Subdocument */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Subdocument;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020989-0000-0000-C000-000000000046")
    Subdocument : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Locked( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Locked( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasFile( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Level( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Split( 
            /* [in] */ Range *Range) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [retval][out] */ _Document **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SubdocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Subdocument * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Subdocument * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Subdocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Subdocument * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Subdocument * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Subdocument * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Subdocument * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Subdocument * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Subdocument * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Subdocument * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Locked )( 
            Subdocument * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Locked )( 
            Subdocument * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Subdocument * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Subdocument * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            Subdocument * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasFile )( 
            Subdocument * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Level )( 
            Subdocument * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Subdocument * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Split )( 
            Subdocument * This,
            /* [in] */ Range *Range);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            Subdocument * This,
            /* [retval][out] */ _Document **prop);
        
        END_INTERFACE
    } SubdocumentVtbl;

    interface Subdocument
    {
        CONST_VTBL struct SubdocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Subdocument_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Subdocument_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Subdocument_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Subdocument_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Subdocument_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Subdocument_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Subdocument_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Subdocument_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Subdocument_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Subdocument_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Subdocument_get_Locked(This,prop)	\
    ( (This)->lpVtbl -> get_Locked(This,prop) ) 

#define Subdocument_put_Locked(This,prop)	\
    ( (This)->lpVtbl -> put_Locked(This,prop) ) 

#define Subdocument_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Subdocument_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define Subdocument_get_Path(This,prop)	\
    ( (This)->lpVtbl -> get_Path(This,prop) ) 

#define Subdocument_get_HasFile(This,prop)	\
    ( (This)->lpVtbl -> get_HasFile(This,prop) ) 

#define Subdocument_get_Level(This,prop)	\
    ( (This)->lpVtbl -> get_Level(This,prop) ) 

#define Subdocument_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Subdocument_Split(This,Range)	\
    ( (This)->lpVtbl -> Split(This,Range) ) 

#define Subdocument_Open(This,prop)	\
    ( (This)->lpVtbl -> Open(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Subdocument_INTERFACE_DEFINED__ */


#ifndef __HeadingStyles_INTERFACE_DEFINED__
#define __HeadingStyles_INTERFACE_DEFINED__

/* interface HeadingStyles */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_HeadingStyles;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002098A-0000-0000-C000-000000000046")
    HeadingStyles : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ HeadingStyle **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ VARIANT *Style,
            /* [in] */ short Level,
            /* [retval][out] */ HeadingStyle **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HeadingStylesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HeadingStyles * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HeadingStyles * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HeadingStyles * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HeadingStyles * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HeadingStyles * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HeadingStyles * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HeadingStyles * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            HeadingStyles * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            HeadingStyles * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HeadingStyles * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            HeadingStyles * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            HeadingStyles * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            HeadingStyles * This,
            /* [in] */ long Index,
            /* [retval][out] */ HeadingStyle **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            HeadingStyles * This,
            /* [in] */ VARIANT *Style,
            /* [in] */ short Level,
            /* [retval][out] */ HeadingStyle **prop);
        
        END_INTERFACE
    } HeadingStylesVtbl;

    interface HeadingStyles
    {
        CONST_VTBL struct HeadingStylesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HeadingStyles_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HeadingStyles_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HeadingStyles_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HeadingStyles_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HeadingStyles_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HeadingStyles_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HeadingStyles_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HeadingStyles_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define HeadingStyles_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define HeadingStyles_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define HeadingStyles_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define HeadingStyles_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define HeadingStyles_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define HeadingStyles_Add(This,Style,Level,prop)	\
    ( (This)->lpVtbl -> Add(This,Style,Level,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HeadingStyles_INTERFACE_DEFINED__ */


#ifndef __HeadingStyle_INTERFACE_DEFINED__
#define __HeadingStyle_INTERFACE_DEFINED__

/* interface HeadingStyle */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_HeadingStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002098B-0000-0000-C000-000000000046")
    HeadingStyle : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Style( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Level( 
            /* [retval][out] */ short *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Level( 
            /* [in] */ short prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HeadingStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HeadingStyle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HeadingStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HeadingStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HeadingStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HeadingStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HeadingStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HeadingStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            HeadingStyle * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            HeadingStyle * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HeadingStyle * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            HeadingStyle * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            HeadingStyle * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Level )( 
            HeadingStyle * This,
            /* [retval][out] */ short *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Level )( 
            HeadingStyle * This,
            /* [in] */ short prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            HeadingStyle * This);
        
        END_INTERFACE
    } HeadingStyleVtbl;

    interface HeadingStyle
    {
        CONST_VTBL struct HeadingStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HeadingStyle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HeadingStyle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HeadingStyle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HeadingStyle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HeadingStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HeadingStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HeadingStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HeadingStyle_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define HeadingStyle_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define HeadingStyle_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define HeadingStyle_get_Style(This,prop)	\
    ( (This)->lpVtbl -> get_Style(This,prop) ) 

#define HeadingStyle_put_Style(This,prop)	\
    ( (This)->lpVtbl -> put_Style(This,prop) ) 

#define HeadingStyle_get_Level(This,prop)	\
    ( (This)->lpVtbl -> get_Level(This,prop) ) 

#define HeadingStyle_put_Level(This,prop)	\
    ( (This)->lpVtbl -> put_Level(This,prop) ) 

#define HeadingStyle_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HeadingStyle_INTERFACE_DEFINED__ */


#ifndef __StoryRanges_INTERFACE_DEFINED__
#define __StoryRanges_INTERFACE_DEFINED__

/* interface StoryRanges */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_StoryRanges;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002098C-0000-0000-C000-000000000046")
    StoryRanges : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ WdStoryType Index,
            /* [retval][out] */ Range **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct StoryRangesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            StoryRanges * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            StoryRanges * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            StoryRanges * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            StoryRanges * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            StoryRanges * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            StoryRanges * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            StoryRanges * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            StoryRanges * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            StoryRanges * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            StoryRanges * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            StoryRanges * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            StoryRanges * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            StoryRanges * This,
            /* [in] */ WdStoryType Index,
            /* [retval][out] */ Range **prop);
        
        END_INTERFACE
    } StoryRangesVtbl;

    interface StoryRanges
    {
        CONST_VTBL struct StoryRangesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define StoryRanges_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define StoryRanges_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define StoryRanges_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define StoryRanges_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define StoryRanges_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define StoryRanges_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define StoryRanges_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define StoryRanges_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define StoryRanges_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define StoryRanges_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define StoryRanges_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define StoryRanges_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define StoryRanges_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __StoryRanges_INTERFACE_DEFINED__ */


#ifndef __ListLevel_INTERFACE_DEFINED__
#define __ListLevel_INTERFACE_DEFINED__

/* interface ListLevel */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ListLevel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002098D-0000-0000-C000-000000000046")
    ListLevel : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberFormat( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberFormat( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TrailingCharacter( 
            /* [retval][out] */ WdTrailingCharacter *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TrailingCharacter( 
            /* [in] */ WdTrailingCharacter prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberStyle( 
            /* [retval][out] */ WdListNumberStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberStyle( 
            /* [in] */ WdListNumberStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberPosition( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberPosition( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ WdListLevelAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ WdListLevelAlignment prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextPosition( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextPosition( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TabPosition( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TabPosition( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_ResetOnHigherOld( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_ResetOnHigherOld( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartAt( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartAt( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinkedStyle( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LinkedStyle( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ /* external definition not present */ Font **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Font( 
            /* [in] */ /* external definition not present */ Font *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ResetOnHigher( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ResetOnHigher( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureBullet( 
            /* [retval][out] */ InlineShape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyPictureBullet( 
            /* [in] */ BSTR FileName,
            /* [retval][out] */ InlineShape **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListLevelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ListLevel * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ListLevel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ListLevel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ListLevel * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ListLevel * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ListLevel * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ListLevel * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            ListLevel * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberFormat )( 
            ListLevel * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberFormat )( 
            ListLevel * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TrailingCharacter )( 
            ListLevel * This,
            /* [retval][out] */ WdTrailingCharacter *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TrailingCharacter )( 
            ListLevel * This,
            /* [in] */ WdTrailingCharacter prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberStyle )( 
            ListLevel * This,
            /* [retval][out] */ WdListNumberStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberStyle )( 
            ListLevel * This,
            /* [in] */ WdListNumberStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberPosition )( 
            ListLevel * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberPosition )( 
            ListLevel * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            ListLevel * This,
            /* [retval][out] */ WdListLevelAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            ListLevel * This,
            /* [in] */ WdListLevelAlignment prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPosition )( 
            ListLevel * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextPosition )( 
            ListLevel * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabPosition )( 
            ListLevel * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TabPosition )( 
            ListLevel * This,
            /* [in] */ int prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResetOnHigherOld )( 
            ListLevel * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ResetOnHigherOld )( 
            ListLevel * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartAt )( 
            ListLevel * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartAt )( 
            ListLevel * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinkedStyle )( 
            ListLevel * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LinkedStyle )( 
            ListLevel * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            ListLevel * This,
            /* [retval][out] */ /* external definition not present */ Font **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Font )( 
            ListLevel * This,
            /* [in] */ /* external definition not present */ Font *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ListLevel * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ListLevel * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ListLevel * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResetOnHigher )( 
            ListLevel * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ResetOnHigher )( 
            ListLevel * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureBullet )( 
            ListLevel * This,
            /* [retval][out] */ InlineShape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyPictureBullet )( 
            ListLevel * This,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ InlineShape **prop);
        
        END_INTERFACE
    } ListLevelVtbl;

    interface ListLevel
    {
        CONST_VTBL struct ListLevelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ListLevel_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ListLevel_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ListLevel_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ListLevel_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ListLevel_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ListLevel_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ListLevel_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ListLevel_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define ListLevel_get_NumberFormat(This,prop)	\
    ( (This)->lpVtbl -> get_NumberFormat(This,prop) ) 

#define ListLevel_put_NumberFormat(This,prop)	\
    ( (This)->lpVtbl -> put_NumberFormat(This,prop) ) 

#define ListLevel_get_TrailingCharacter(This,prop)	\
    ( (This)->lpVtbl -> get_TrailingCharacter(This,prop) ) 

#define ListLevel_put_TrailingCharacter(This,prop)	\
    ( (This)->lpVtbl -> put_TrailingCharacter(This,prop) ) 

#define ListLevel_get_NumberStyle(This,prop)	\
    ( (This)->lpVtbl -> get_NumberStyle(This,prop) ) 

#define ListLevel_put_NumberStyle(This,prop)	\
    ( (This)->lpVtbl -> put_NumberStyle(This,prop) ) 

#define ListLevel_get_NumberPosition(This,prop)	\
    ( (This)->lpVtbl -> get_NumberPosition(This,prop) ) 

#define ListLevel_put_NumberPosition(This,prop)	\
    ( (This)->lpVtbl -> put_NumberPosition(This,prop) ) 

#define ListLevel_get_Alignment(This,prop)	\
    ( (This)->lpVtbl -> get_Alignment(This,prop) ) 

#define ListLevel_put_Alignment(This,prop)	\
    ( (This)->lpVtbl -> put_Alignment(This,prop) ) 

#define ListLevel_get_TextPosition(This,prop)	\
    ( (This)->lpVtbl -> get_TextPosition(This,prop) ) 

#define ListLevel_put_TextPosition(This,prop)	\
    ( (This)->lpVtbl -> put_TextPosition(This,prop) ) 

#define ListLevel_get_TabPosition(This,prop)	\
    ( (This)->lpVtbl -> get_TabPosition(This,prop) ) 

#define ListLevel_put_TabPosition(This,prop)	\
    ( (This)->lpVtbl -> put_TabPosition(This,prop) ) 

#define ListLevel_get_ResetOnHigherOld(This,prop)	\
    ( (This)->lpVtbl -> get_ResetOnHigherOld(This,prop) ) 

#define ListLevel_put_ResetOnHigherOld(This,prop)	\
    ( (This)->lpVtbl -> put_ResetOnHigherOld(This,prop) ) 

#define ListLevel_get_StartAt(This,prop)	\
    ( (This)->lpVtbl -> get_StartAt(This,prop) ) 

#define ListLevel_put_StartAt(This,prop)	\
    ( (This)->lpVtbl -> put_StartAt(This,prop) ) 

#define ListLevel_get_LinkedStyle(This,prop)	\
    ( (This)->lpVtbl -> get_LinkedStyle(This,prop) ) 

#define ListLevel_put_LinkedStyle(This,prop)	\
    ( (This)->lpVtbl -> put_LinkedStyle(This,prop) ) 

#define ListLevel_get_Font(This,prop)	\
    ( (This)->lpVtbl -> get_Font(This,prop) ) 

#define ListLevel_put_Font(This,prop)	\
    ( (This)->lpVtbl -> put_Font(This,prop) ) 

#define ListLevel_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ListLevel_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ListLevel_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ListLevel_get_ResetOnHigher(This,prop)	\
    ( (This)->lpVtbl -> get_ResetOnHigher(This,prop) ) 

#define ListLevel_put_ResetOnHigher(This,prop)	\
    ( (This)->lpVtbl -> put_ResetOnHigher(This,prop) ) 

#define ListLevel_get_PictureBullet(This,prop)	\
    ( (This)->lpVtbl -> get_PictureBullet(This,prop) ) 

#define ListLevel_ApplyPictureBullet(This,FileName,prop)	\
    ( (This)->lpVtbl -> ApplyPictureBullet(This,FileName,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ListLevel_INTERFACE_DEFINED__ */


#ifndef __ListLevels_INTERFACE_DEFINED__
#define __ListLevels_INTERFACE_DEFINED__

/* interface ListLevels */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ListLevels;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002098E-0000-0000-C000-000000000046")
    ListLevels : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ ListLevel **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListLevelsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ListLevels * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ListLevels * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ListLevels * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ListLevels * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ListLevels * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ListLevels * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ListLevels * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ListLevels * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ListLevels * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ListLevels * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ListLevels * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ListLevels * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ListLevels * This,
            /* [in] */ long Index,
            /* [retval][out] */ ListLevel **prop);
        
        END_INTERFACE
    } ListLevelsVtbl;

    interface ListLevels
    {
        CONST_VTBL struct ListLevelsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ListLevels_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ListLevels_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ListLevels_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ListLevels_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ListLevels_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ListLevels_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ListLevels_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ListLevels_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define ListLevels_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define ListLevels_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ListLevels_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ListLevels_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ListLevels_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ListLevels_INTERFACE_DEFINED__ */


#ifndef __ListTemplate_INTERFACE_DEFINED__
#define __ListTemplate_INTERFACE_DEFINED__

/* interface ListTemplate */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ListTemplate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002098F-0000-0000-C000-000000000046")
    ListTemplate : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OutlineNumbered( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OutlineNumbered( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListLevels( 
            /* [retval][out] */ ListLevels **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Convert( 
            /* [optional][in] */ VARIANT *Level,
            /* [retval][out] */ ListTemplate **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListTemplateVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ListTemplate * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ListTemplate * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ListTemplate * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ListTemplate * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ListTemplate * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ListTemplate * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ListTemplate * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ListTemplate * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ListTemplate * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ListTemplate * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OutlineNumbered )( 
            ListTemplate * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OutlineNumbered )( 
            ListTemplate * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ListTemplate * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ListTemplate * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListLevels )( 
            ListTemplate * This,
            /* [retval][out] */ ListLevels **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Convert )( 
            ListTemplate * This,
            /* [optional][in] */ VARIANT *Level,
            /* [retval][out] */ ListTemplate **prop);
        
        END_INTERFACE
    } ListTemplateVtbl;

    interface ListTemplate
    {
        CONST_VTBL struct ListTemplateVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ListTemplate_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ListTemplate_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ListTemplate_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ListTemplate_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ListTemplate_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ListTemplate_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ListTemplate_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ListTemplate_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ListTemplate_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ListTemplate_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ListTemplate_get_OutlineNumbered(This,prop)	\
    ( (This)->lpVtbl -> get_OutlineNumbered(This,prop) ) 

#define ListTemplate_put_OutlineNumbered(This,prop)	\
    ( (This)->lpVtbl -> put_OutlineNumbered(This,prop) ) 

#define ListTemplate_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define ListTemplate_put_Name(This,prop)	\
    ( (This)->lpVtbl -> put_Name(This,prop) ) 

#define ListTemplate_get_ListLevels(This,prop)	\
    ( (This)->lpVtbl -> get_ListLevels(This,prop) ) 

#define ListTemplate_Convert(This,Level,prop)	\
    ( (This)->lpVtbl -> Convert(This,Level,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ListTemplate_INTERFACE_DEFINED__ */


#ifndef __ListTemplates_INTERFACE_DEFINED__
#define __ListTemplates_INTERFACE_DEFINED__

/* interface ListTemplates */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ListTemplates;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020990-0000-0000-C000-000000000046")
    ListTemplates : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ ListTemplate **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [optional][in] */ VARIANT *OutlineNumbered,
            /* [optional][in] */ VARIANT *Name,
            /* [retval][out] */ ListTemplate **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListTemplatesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ListTemplates * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ListTemplates * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ListTemplates * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ListTemplates * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ListTemplates * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ListTemplates * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ListTemplates * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ListTemplates * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ListTemplates * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ListTemplates * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ListTemplates * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ListTemplates * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ListTemplates * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ ListTemplate **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ListTemplates * This,
            /* [optional][in] */ VARIANT *OutlineNumbered,
            /* [optional][in] */ VARIANT *Name,
            /* [retval][out] */ ListTemplate **prop);
        
        END_INTERFACE
    } ListTemplatesVtbl;

    interface ListTemplates
    {
        CONST_VTBL struct ListTemplatesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ListTemplates_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ListTemplates_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ListTemplates_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ListTemplates_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ListTemplates_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ListTemplates_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ListTemplates_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ListTemplates_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define ListTemplates_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define ListTemplates_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ListTemplates_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ListTemplates_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ListTemplates_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define ListTemplates_Add(This,OutlineNumbered,Name,prop)	\
    ( (This)->lpVtbl -> Add(This,OutlineNumbered,Name,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ListTemplates_INTERFACE_DEFINED__ */


#ifndef __ListParagraphs_INTERFACE_DEFINED__
#define __ListParagraphs_INTERFACE_DEFINED__

/* interface ListParagraphs */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ListParagraphs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020991-0000-0000-C000-000000000046")
    ListParagraphs : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Paragraph **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListParagraphsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ListParagraphs * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ListParagraphs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ListParagraphs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ListParagraphs * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ListParagraphs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ListParagraphs * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ListParagraphs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ListParagraphs * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ListParagraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ListParagraphs * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ListParagraphs * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ListParagraphs * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ListParagraphs * This,
            /* [in] */ long Index,
            /* [retval][out] */ Paragraph **prop);
        
        END_INTERFACE
    } ListParagraphsVtbl;

    interface ListParagraphs
    {
        CONST_VTBL struct ListParagraphsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ListParagraphs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ListParagraphs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ListParagraphs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ListParagraphs_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ListParagraphs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ListParagraphs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ListParagraphs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ListParagraphs_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define ListParagraphs_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define ListParagraphs_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ListParagraphs_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ListParagraphs_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ListParagraphs_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ListParagraphs_INTERFACE_DEFINED__ */


#ifndef __List_INTERFACE_DEFINED__
#define __List_INTERFACE_DEFINED__

/* interface List */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_List;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020992-0000-0000-C000-000000000046")
    List : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListParagraphs( 
            /* [retval][out] */ ListParagraphs **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SingleListTemplate( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertNumbersToText( 
            /* [optional][in] */ VARIANT *NumberType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveNumbers( 
            /* [optional][in] */ VARIANT *NumberType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CountNumberedItems( 
            /* [optional][in] */ VARIANT *NumberType,
            /* [optional][in] */ VARIANT *Level,
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ApplyListTemplateOld( 
            /* [in] */ ListTemplate *ListTemplate,
            /* [optional][in] */ VARIANT *ContinuePreviousList) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanContinuePreviousList( 
            /* [in] */ ListTemplate *ListTemplate,
            /* [retval][out] */ WdContinue *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ApplyListTemplate( 
            /* [in] */ ListTemplate *ListTemplate,
            /* [optional][in] */ VARIANT *ContinuePreviousList,
            /* [optional][in] */ VARIANT *DefaultListBehavior) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StyleName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            List * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            List * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            List * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            List * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            List * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            List * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            List * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            List * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListParagraphs )( 
            List * This,
            /* [retval][out] */ ListParagraphs **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SingleListTemplate )( 
            List * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            List * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            List * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            List * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertNumbersToText )( 
            List * This,
            /* [optional][in] */ VARIANT *NumberType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveNumbers )( 
            List * This,
            /* [optional][in] */ VARIANT *NumberType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CountNumberedItems )( 
            List * This,
            /* [optional][in] */ VARIANT *NumberType,
            /* [optional][in] */ VARIANT *Level,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyListTemplateOld )( 
            List * This,
            /* [in] */ ListTemplate *ListTemplate,
            /* [optional][in] */ VARIANT *ContinuePreviousList);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanContinuePreviousList )( 
            List * This,
            /* [in] */ ListTemplate *ListTemplate,
            /* [retval][out] */ WdContinue *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ApplyListTemplate )( 
            List * This,
            /* [in] */ ListTemplate *ListTemplate,
            /* [optional][in] */ VARIANT *ContinuePreviousList,
            /* [optional][in] */ VARIANT *DefaultListBehavior);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StyleName )( 
            List * This,
            /* [retval][out] */ BSTR *prop);
        
        END_INTERFACE
    } ListVtbl;

    interface List
    {
        CONST_VTBL struct ListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define List_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define List_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define List_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define List_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define List_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define List_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define List_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define List_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define List_get_ListParagraphs(This,prop)	\
    ( (This)->lpVtbl -> get_ListParagraphs(This,prop) ) 

#define List_get_SingleListTemplate(This,prop)	\
    ( (This)->lpVtbl -> get_SingleListTemplate(This,prop) ) 

#define List_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define List_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define List_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define List_ConvertNumbersToText(This,NumberType)	\
    ( (This)->lpVtbl -> ConvertNumbersToText(This,NumberType) ) 

#define List_RemoveNumbers(This,NumberType)	\
    ( (This)->lpVtbl -> RemoveNumbers(This,NumberType) ) 

#define List_CountNumberedItems(This,NumberType,Level,prop)	\
    ( (This)->lpVtbl -> CountNumberedItems(This,NumberType,Level,prop) ) 

#define List_ApplyListTemplateOld(This,ListTemplate,ContinuePreviousList)	\
    ( (This)->lpVtbl -> ApplyListTemplateOld(This,ListTemplate,ContinuePreviousList) ) 

#define List_CanContinuePreviousList(This,ListTemplate,prop)	\
    ( (This)->lpVtbl -> CanContinuePreviousList(This,ListTemplate,prop) ) 

#define List_ApplyListTemplate(This,ListTemplate,ContinuePreviousList,DefaultListBehavior)	\
    ( (This)->lpVtbl -> ApplyListTemplate(This,ListTemplate,ContinuePreviousList,DefaultListBehavior) ) 

#define List_get_StyleName(This,prop)	\
    ( (This)->lpVtbl -> get_StyleName(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __List_INTERFACE_DEFINED__ */


#ifndef __Lists_INTERFACE_DEFINED__
#define __Lists_INTERFACE_DEFINED__

/* interface Lists */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Lists;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020993-0000-0000-C000-000000000046")
    Lists : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ List **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Lists * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Lists * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Lists * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Lists * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Lists * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Lists * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Lists * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Lists * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Lists * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Lists * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Lists * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Lists * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Lists * This,
            /* [in] */ long Index,
            /* [retval][out] */ List **prop);
        
        END_INTERFACE
    } ListsVtbl;

    interface Lists
    {
        CONST_VTBL struct ListsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Lists_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Lists_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Lists_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Lists_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Lists_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Lists_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Lists_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Lists_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Lists_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Lists_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Lists_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Lists_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Lists_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Lists_INTERFACE_DEFINED__ */


#ifndef __ListGallery_INTERFACE_DEFINED__
#define __ListGallery_INTERFACE_DEFINED__

/* interface ListGallery */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ListGallery;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020994-0000-0000-C000-000000000046")
    ListGallery : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListTemplates( 
            /* [retval][out] */ ListTemplates **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Modified( 
            /* [in] */ long Index,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Reset( 
            /* [in] */ long Index) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListGalleryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ListGallery * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ListGallery * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ListGallery * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ListGallery * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ListGallery * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ListGallery * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ListGallery * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListTemplates )( 
            ListGallery * This,
            /* [retval][out] */ ListTemplates **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ListGallery * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ListGallery * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ListGallery * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Modified )( 
            ListGallery * This,
            /* [in] */ long Index,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ListGallery * This,
            /* [in] */ long Index);
        
        END_INTERFACE
    } ListGalleryVtbl;

    interface ListGallery
    {
        CONST_VTBL struct ListGalleryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ListGallery_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ListGallery_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ListGallery_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ListGallery_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ListGallery_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ListGallery_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ListGallery_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ListGallery_get_ListTemplates(This,prop)	\
    ( (This)->lpVtbl -> get_ListTemplates(This,prop) ) 

#define ListGallery_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ListGallery_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ListGallery_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ListGallery_get_Modified(This,Index,prop)	\
    ( (This)->lpVtbl -> get_Modified(This,Index,prop) ) 

#define ListGallery_Reset(This,Index)	\
    ( (This)->lpVtbl -> Reset(This,Index) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ListGallery_INTERFACE_DEFINED__ */


#ifndef __ListGalleries_INTERFACE_DEFINED__
#define __ListGalleries_INTERFACE_DEFINED__

/* interface ListGalleries */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ListGalleries;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020995-0000-0000-C000-000000000046")
    ListGalleries : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ WdListGalleryType Index,
            /* [retval][out] */ ListGallery **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ListGalleriesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ListGalleries * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ListGalleries * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ListGalleries * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ListGalleries * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ListGalleries * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ListGalleries * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ListGalleries * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ListGalleries * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ListGalleries * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ListGalleries * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ListGalleries * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ListGalleries * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ListGalleries * This,
            /* [in] */ WdListGalleryType Index,
            /* [retval][out] */ ListGallery **prop);
        
        END_INTERFACE
    } ListGalleriesVtbl;

    interface ListGalleries
    {
        CONST_VTBL struct ListGalleriesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ListGalleries_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ListGalleries_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ListGalleries_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ListGalleries_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ListGalleries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ListGalleries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ListGalleries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ListGalleries_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define ListGalleries_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define ListGalleries_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ListGalleries_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ListGalleries_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ListGalleries_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ListGalleries_INTERFACE_DEFINED__ */


#ifndef __KeyBindings_INTERFACE_DEFINED__
#define __KeyBindings_INTERFACE_DEFINED__

/* interface KeyBindings */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_KeyBindings;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020996-0000-0000-C000-000000000046")
    KeyBindings : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Context( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ KeyBinding **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ WdKeyCategory KeyCategory,
            /* [in] */ BSTR Command,
            /* [in] */ long KeyCode,
            /* [optional][in] */ VARIANT *KeyCode2,
            /* [optional][in] */ VARIANT *CommandParameter,
            /* [retval][out] */ KeyBinding **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearAll( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Key( 
            /* [in] */ long KeyCode,
            /* [optional][in] */ VARIANT *KeyCode2,
            /* [retval][out] */ KeyBinding **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct KeyBindingsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            KeyBindings * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            KeyBindings * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            KeyBindings * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            KeyBindings * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            KeyBindings * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            KeyBindings * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            KeyBindings * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            KeyBindings * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            KeyBindings * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            KeyBindings * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            KeyBindings * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            KeyBindings * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Context )( 
            KeyBindings * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            KeyBindings * This,
            /* [in] */ long Index,
            /* [retval][out] */ KeyBinding **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            KeyBindings * This,
            /* [in] */ WdKeyCategory KeyCategory,
            /* [in] */ BSTR Command,
            /* [in] */ long KeyCode,
            /* [optional][in] */ VARIANT *KeyCode2,
            /* [optional][in] */ VARIANT *CommandParameter,
            /* [retval][out] */ KeyBinding **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearAll )( 
            KeyBindings * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Key )( 
            KeyBindings * This,
            /* [in] */ long KeyCode,
            /* [optional][in] */ VARIANT *KeyCode2,
            /* [retval][out] */ KeyBinding **prop);
        
        END_INTERFACE
    } KeyBindingsVtbl;

    interface KeyBindings
    {
        CONST_VTBL struct KeyBindingsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define KeyBindings_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define KeyBindings_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define KeyBindings_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define KeyBindings_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define KeyBindings_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define KeyBindings_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define KeyBindings_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define KeyBindings_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define KeyBindings_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define KeyBindings_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define KeyBindings_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define KeyBindings_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define KeyBindings_get_Context(This,prop)	\
    ( (This)->lpVtbl -> get_Context(This,prop) ) 

#define KeyBindings_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define KeyBindings_Add(This,KeyCategory,Command,KeyCode,KeyCode2,CommandParameter,prop)	\
    ( (This)->lpVtbl -> Add(This,KeyCategory,Command,KeyCode,KeyCode2,CommandParameter,prop) ) 

#define KeyBindings_ClearAll(This)	\
    ( (This)->lpVtbl -> ClearAll(This) ) 

#define KeyBindings_Key(This,KeyCode,KeyCode2,prop)	\
    ( (This)->lpVtbl -> Key(This,KeyCode,KeyCode2,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __KeyBindings_INTERFACE_DEFINED__ */


#ifndef __KeysBoundTo_INTERFACE_DEFINED__
#define __KeysBoundTo_INTERFACE_DEFINED__

/* interface KeysBoundTo */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_KeysBoundTo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020997-0000-0000-C000-000000000046")
    KeysBoundTo : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeyCategory( 
            /* [retval][out] */ WdKeyCategory *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Command( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandParameter( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Context( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ KeyBinding **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Key( 
            /* [in] */ long KeyCode,
            /* [optional][in] */ VARIANT *KeyCode2,
            /* [retval][out] */ KeyBinding **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct KeysBoundToVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            KeysBoundTo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            KeysBoundTo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            KeysBoundTo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            KeysBoundTo * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            KeysBoundTo * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            KeysBoundTo * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            KeysBoundTo * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            KeysBoundTo * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            KeysBoundTo * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            KeysBoundTo * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            KeysBoundTo * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            KeysBoundTo * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeyCategory )( 
            KeysBoundTo * This,
            /* [retval][out] */ WdKeyCategory *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Command )( 
            KeysBoundTo * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandParameter )( 
            KeysBoundTo * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Context )( 
            KeysBoundTo * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            KeysBoundTo * This,
            /* [in] */ long Index,
            /* [retval][out] */ KeyBinding **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Key )( 
            KeysBoundTo * This,
            /* [in] */ long KeyCode,
            /* [optional][in] */ VARIANT *KeyCode2,
            /* [retval][out] */ KeyBinding **prop);
        
        END_INTERFACE
    } KeysBoundToVtbl;

    interface KeysBoundTo
    {
        CONST_VTBL struct KeysBoundToVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define KeysBoundTo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define KeysBoundTo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define KeysBoundTo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define KeysBoundTo_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define KeysBoundTo_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define KeysBoundTo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define KeysBoundTo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define KeysBoundTo_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define KeysBoundTo_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define KeysBoundTo_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define KeysBoundTo_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define KeysBoundTo_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define KeysBoundTo_get_KeyCategory(This,prop)	\
    ( (This)->lpVtbl -> get_KeyCategory(This,prop) ) 

#define KeysBoundTo_get_Command(This,prop)	\
    ( (This)->lpVtbl -> get_Command(This,prop) ) 

#define KeysBoundTo_get_CommandParameter(This,prop)	\
    ( (This)->lpVtbl -> get_CommandParameter(This,prop) ) 

#define KeysBoundTo_get_Context(This,prop)	\
    ( (This)->lpVtbl -> get_Context(This,prop) ) 

#define KeysBoundTo_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define KeysBoundTo_Key(This,KeyCode,KeyCode2,prop)	\
    ( (This)->lpVtbl -> Key(This,KeyCode,KeyCode2,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __KeysBoundTo_INTERFACE_DEFINED__ */


#ifndef __KeyBinding_INTERFACE_DEFINED__
#define __KeyBinding_INTERFACE_DEFINED__

/* interface KeyBinding */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_KeyBinding;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020998-0000-0000-C000-000000000046")
    KeyBinding : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Command( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeyString( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Protected( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeyCategory( 
            /* [retval][out] */ WdKeyCategory *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeyCode( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeyCode2( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandParameter( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Context( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Disable( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Execute( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Rebind( 
            /* [in] */ WdKeyCategory KeyCategory,
            /* [in] */ BSTR Command,
            /* [optional][in] */ VARIANT *CommandParameter) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct KeyBindingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            KeyBinding * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            KeyBinding * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            KeyBinding * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            KeyBinding * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            KeyBinding * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            KeyBinding * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            KeyBinding * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            KeyBinding * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            KeyBinding * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            KeyBinding * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Command )( 
            KeyBinding * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeyString )( 
            KeyBinding * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Protected )( 
            KeyBinding * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeyCategory )( 
            KeyBinding * This,
            /* [retval][out] */ WdKeyCategory *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeyCode )( 
            KeyBinding * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeyCode2 )( 
            KeyBinding * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandParameter )( 
            KeyBinding * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Context )( 
            KeyBinding * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            KeyBinding * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Disable )( 
            KeyBinding * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Execute )( 
            KeyBinding * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Rebind )( 
            KeyBinding * This,
            /* [in] */ WdKeyCategory KeyCategory,
            /* [in] */ BSTR Command,
            /* [optional][in] */ VARIANT *CommandParameter);
        
        END_INTERFACE
    } KeyBindingVtbl;

    interface KeyBinding
    {
        CONST_VTBL struct KeyBindingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define KeyBinding_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define KeyBinding_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define KeyBinding_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define KeyBinding_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define KeyBinding_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define KeyBinding_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define KeyBinding_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define KeyBinding_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define KeyBinding_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define KeyBinding_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define KeyBinding_get_Command(This,prop)	\
    ( (This)->lpVtbl -> get_Command(This,prop) ) 

#define KeyBinding_get_KeyString(This,prop)	\
    ( (This)->lpVtbl -> get_KeyString(This,prop) ) 

#define KeyBinding_get_Protected(This,prop)	\
    ( (This)->lpVtbl -> get_Protected(This,prop) ) 

#define KeyBinding_get_KeyCategory(This,prop)	\
    ( (This)->lpVtbl -> get_KeyCategory(This,prop) ) 

#define KeyBinding_get_KeyCode(This,prop)	\
    ( (This)->lpVtbl -> get_KeyCode(This,prop) ) 

#define KeyBinding_get_KeyCode2(This,prop)	\
    ( (This)->lpVtbl -> get_KeyCode2(This,prop) ) 

#define KeyBinding_get_CommandParameter(This,prop)	\
    ( (This)->lpVtbl -> get_CommandParameter(This,prop) ) 

#define KeyBinding_get_Context(This,prop)	\
    ( (This)->lpVtbl -> get_Context(This,prop) ) 

#define KeyBinding_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define KeyBinding_Disable(This)	\
    ( (This)->lpVtbl -> Disable(This) ) 

#define KeyBinding_Execute(This)	\
    ( (This)->lpVtbl -> Execute(This) ) 

#define KeyBinding_Rebind(This,KeyCategory,Command,CommandParameter)	\
    ( (This)->lpVtbl -> Rebind(This,KeyCategory,Command,CommandParameter) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __KeyBinding_INTERFACE_DEFINED__ */


#ifndef __FileConverter_INTERFACE_DEFINED__
#define __FileConverter_INTERFACE_DEFINED__

/* interface FileConverter */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_FileConverter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020999-0000-0000-C000-000000000046")
    FileConverter : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormatName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ClassName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SaveFormat( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OpenFormat( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanSave( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanOpen( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extensions( 
            /* [retval][out] */ BSTR *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FileConverterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FileConverter * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FileConverter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FileConverter * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FileConverter * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FileConverter * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FileConverter * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FileConverter * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            FileConverter * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            FileConverter * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FileConverter * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormatName )( 
            FileConverter * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ClassName )( 
            FileConverter * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SaveFormat )( 
            FileConverter * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OpenFormat )( 
            FileConverter * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanSave )( 
            FileConverter * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanOpen )( 
            FileConverter * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            FileConverter * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            FileConverter * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extensions )( 
            FileConverter * This,
            /* [retval][out] */ BSTR *prop);
        
        END_INTERFACE
    } FileConverterVtbl;

    interface FileConverter
    {
        CONST_VTBL struct FileConverterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FileConverter_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FileConverter_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FileConverter_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FileConverter_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FileConverter_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FileConverter_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FileConverter_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FileConverter_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define FileConverter_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define FileConverter_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define FileConverter_get_FormatName(This,prop)	\
    ( (This)->lpVtbl -> get_FormatName(This,prop) ) 

#define FileConverter_get_ClassName(This,prop)	\
    ( (This)->lpVtbl -> get_ClassName(This,prop) ) 

#define FileConverter_get_SaveFormat(This,prop)	\
    ( (This)->lpVtbl -> get_SaveFormat(This,prop) ) 

#define FileConverter_get_OpenFormat(This,prop)	\
    ( (This)->lpVtbl -> get_OpenFormat(This,prop) ) 

#define FileConverter_get_CanSave(This,prop)	\
    ( (This)->lpVtbl -> get_CanSave(This,prop) ) 

#define FileConverter_get_CanOpen(This,prop)	\
    ( (This)->lpVtbl -> get_CanOpen(This,prop) ) 

#define FileConverter_get_Path(This,prop)	\
    ( (This)->lpVtbl -> get_Path(This,prop) ) 

#define FileConverter_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define FileConverter_get_Extensions(This,prop)	\
    ( (This)->lpVtbl -> get_Extensions(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FileConverter_INTERFACE_DEFINED__ */


#ifndef __FileConverters_INTERFACE_DEFINED__
#define __FileConverters_INTERFACE_DEFINED__

/* interface FileConverters */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_FileConverters;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002099A-0000-0000-C000-000000000046")
    FileConverters : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConvertMacWordChevrons( 
            /* [retval][out] */ WdChevronConvertRule *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ConvertMacWordChevrons( 
            /* [in] */ WdChevronConvertRule prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ FileConverter **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FileConvertersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FileConverters * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FileConverters * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FileConverters * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FileConverters * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FileConverters * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FileConverters * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FileConverters * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            FileConverters * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            FileConverters * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FileConverters * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            FileConverters * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            FileConverters * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConvertMacWordChevrons )( 
            FileConverters * This,
            /* [retval][out] */ WdChevronConvertRule *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ConvertMacWordChevrons )( 
            FileConverters * This,
            /* [in] */ WdChevronConvertRule prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            FileConverters * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ FileConverter **prop);
        
        END_INTERFACE
    } FileConvertersVtbl;

    interface FileConverters
    {
        CONST_VTBL struct FileConvertersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FileConverters_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FileConverters_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FileConverters_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FileConverters_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FileConverters_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FileConverters_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FileConverters_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FileConverters_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define FileConverters_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define FileConverters_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define FileConverters_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define FileConverters_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define FileConverters_get_ConvertMacWordChevrons(This,prop)	\
    ( (This)->lpVtbl -> get_ConvertMacWordChevrons(This,prop) ) 

#define FileConverters_put_ConvertMacWordChevrons(This,prop)	\
    ( (This)->lpVtbl -> put_ConvertMacWordChevrons(This,prop) ) 

#define FileConverters_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FileConverters_INTERFACE_DEFINED__ */


#ifndef __SynonymInfo_INTERFACE_DEFINED__
#define __SynonymInfo_INTERFACE_DEFINED__

/* interface SynonymInfo */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_SynonymInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002099B-0000-0000-C000-000000000046")
    SynonymInfo : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Word( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Found( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MeaningCount( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MeaningList( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PartOfSpeechList( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SynonymList( 
            /* [in] */ VARIANT *Meaning,
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AntonymList( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelatedExpressionList( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelatedWordList( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SynonymInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SynonymInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SynonymInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SynonymInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SynonymInfo * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SynonymInfo * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SynonymInfo * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SynonymInfo * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            SynonymInfo * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            SynonymInfo * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SynonymInfo * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Word )( 
            SynonymInfo * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Found )( 
            SynonymInfo * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MeaningCount )( 
            SynonymInfo * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MeaningList )( 
            SynonymInfo * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PartOfSpeechList )( 
            SynonymInfo * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SynonymList )( 
            SynonymInfo * This,
            /* [in] */ VARIANT *Meaning,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AntonymList )( 
            SynonymInfo * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelatedExpressionList )( 
            SynonymInfo * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelatedWordList )( 
            SynonymInfo * This,
            /* [retval][out] */ VARIANT *prop);
        
        END_INTERFACE
    } SynonymInfoVtbl;

    interface SynonymInfo
    {
        CONST_VTBL struct SynonymInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SynonymInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SynonymInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SynonymInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SynonymInfo_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SynonymInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SynonymInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SynonymInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SynonymInfo_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define SynonymInfo_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define SynonymInfo_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define SynonymInfo_get_Word(This,prop)	\
    ( (This)->lpVtbl -> get_Word(This,prop) ) 

#define SynonymInfo_get_Found(This,prop)	\
    ( (This)->lpVtbl -> get_Found(This,prop) ) 

#define SynonymInfo_get_MeaningCount(This,prop)	\
    ( (This)->lpVtbl -> get_MeaningCount(This,prop) ) 

#define SynonymInfo_get_MeaningList(This,prop)	\
    ( (This)->lpVtbl -> get_MeaningList(This,prop) ) 

#define SynonymInfo_get_PartOfSpeechList(This,prop)	\
    ( (This)->lpVtbl -> get_PartOfSpeechList(This,prop) ) 

#define SynonymInfo_get_SynonymList(This,Meaning,prop)	\
    ( (This)->lpVtbl -> get_SynonymList(This,Meaning,prop) ) 

#define SynonymInfo_get_AntonymList(This,prop)	\
    ( (This)->lpVtbl -> get_AntonymList(This,prop) ) 

#define SynonymInfo_get_RelatedExpressionList(This,prop)	\
    ( (This)->lpVtbl -> get_RelatedExpressionList(This,prop) ) 

#define SynonymInfo_get_RelatedWordList(This,prop)	\
    ( (This)->lpVtbl -> get_RelatedWordList(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SynonymInfo_INTERFACE_DEFINED__ */


#ifndef __Hyperlinks_INTERFACE_DEFINED__
#define __Hyperlinks_INTERFACE_DEFINED__

/* interface Hyperlinks */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Hyperlinks;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002099C-0000-0000-C000-000000000046")
    Hyperlinks : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Hyperlink **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE _Add( 
            /* [in] */ IDispatch *Anchor,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *SubAddress,
            /* [retval][out] */ Hyperlink **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IDispatch *Anchor,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *SubAddress,
            /* [optional][in] */ VARIANT *ScreenTip,
            /* [optional][in] */ VARIANT *TextToDisplay,
            /* [optional][in] */ VARIANT *Target,
            /* [retval][out] */ Hyperlink **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HyperlinksVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Hyperlinks * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Hyperlinks * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Hyperlinks * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Hyperlinks * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Hyperlinks * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Hyperlinks * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Hyperlinks * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Hyperlinks * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Hyperlinks * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Hyperlinks * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Hyperlinks * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Hyperlinks * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Hyperlinks * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Hyperlink **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *_Add )( 
            Hyperlinks * This,
            /* [in] */ IDispatch *Anchor,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *SubAddress,
            /* [retval][out] */ Hyperlink **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Hyperlinks * This,
            /* [in] */ IDispatch *Anchor,
            /* [optional][in] */ VARIANT *Address,
            /* [optional][in] */ VARIANT *SubAddress,
            /* [optional][in] */ VARIANT *ScreenTip,
            /* [optional][in] */ VARIANT *TextToDisplay,
            /* [optional][in] */ VARIANT *Target,
            /* [retval][out] */ Hyperlink **prop);
        
        END_INTERFACE
    } HyperlinksVtbl;

    interface Hyperlinks
    {
        CONST_VTBL struct HyperlinksVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Hyperlinks_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Hyperlinks_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Hyperlinks_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Hyperlinks_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Hyperlinks_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Hyperlinks_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Hyperlinks_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Hyperlinks_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Hyperlinks_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Hyperlinks_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Hyperlinks_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Hyperlinks_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Hyperlinks_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Hyperlinks__Add(This,Anchor,Address,SubAddress,prop)	\
    ( (This)->lpVtbl -> _Add(This,Anchor,Address,SubAddress,prop) ) 

#define Hyperlinks_Add(This,Anchor,Address,SubAddress,ScreenTip,TextToDisplay,Target,prop)	\
    ( (This)->lpVtbl -> Add(This,Anchor,Address,SubAddress,ScreenTip,TextToDisplay,Target,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Hyperlinks_INTERFACE_DEFINED__ */


#ifndef __Hyperlink_INTERFACE_DEFINED__
#define __Hyperlink_INTERFACE_DEFINED__

/* interface Hyperlink */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Hyperlink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002099D-0000-0000-C000-000000000046")
    Hyperlink : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddressOld( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoHyperlinkType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shape( 
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_SubAddressOld( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtraInfoRequired( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Follow( 
            /* [optional][in] */ VARIANT *NewWindow,
            /* [optional][in] */ VARIANT *AddHistory,
            /* [optional][in] */ VARIANT *ExtraInfo,
            /* [optional][in] */ VARIANT *Method,
            /* [optional][in] */ VARIANT *HeaderInfo) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddToFavorites( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateNewDocument( 
            /* [in] */ BSTR FileName,
            /* [in] */ VARIANT_BOOL EditNow,
            /* [in] */ VARIANT_BOOL Overwrite) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Address( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Address( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SubAddress( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SubAddress( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EmailSubject( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EmailSubject( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScreenTip( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScreenTip( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextToDisplay( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextToDisplay( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Target( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Target( 
            /* [in] */ BSTR prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HyperlinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Hyperlink * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Hyperlink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Hyperlink * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Hyperlink * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Hyperlink * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Hyperlink * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Hyperlink * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Hyperlink * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Hyperlink * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Hyperlink * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Hyperlink * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddressOld )( 
            Hyperlink * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Hyperlink * This,
            /* [retval][out] */ MsoHyperlinkType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Hyperlink * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shape )( 
            Hyperlink * This,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SubAddressOld )( 
            Hyperlink * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtraInfoRequired )( 
            Hyperlink * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Hyperlink * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Follow )( 
            Hyperlink * This,
            /* [optional][in] */ VARIANT *NewWindow,
            /* [optional][in] */ VARIANT *AddHistory,
            /* [optional][in] */ VARIANT *ExtraInfo,
            /* [optional][in] */ VARIANT *Method,
            /* [optional][in] */ VARIANT *HeaderInfo);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddToFavorites )( 
            Hyperlink * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateNewDocument )( 
            Hyperlink * This,
            /* [in] */ BSTR FileName,
            /* [in] */ VARIANT_BOOL EditNow,
            /* [in] */ VARIANT_BOOL Overwrite);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Address )( 
            Hyperlink * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Address )( 
            Hyperlink * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SubAddress )( 
            Hyperlink * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SubAddress )( 
            Hyperlink * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EmailSubject )( 
            Hyperlink * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EmailSubject )( 
            Hyperlink * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScreenTip )( 
            Hyperlink * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScreenTip )( 
            Hyperlink * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextToDisplay )( 
            Hyperlink * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextToDisplay )( 
            Hyperlink * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Target )( 
            Hyperlink * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Target )( 
            Hyperlink * This,
            /* [in] */ BSTR prop);
        
        END_INTERFACE
    } HyperlinkVtbl;

    interface Hyperlink
    {
        CONST_VTBL struct HyperlinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Hyperlink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Hyperlink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Hyperlink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Hyperlink_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Hyperlink_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Hyperlink_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Hyperlink_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Hyperlink_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Hyperlink_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Hyperlink_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Hyperlink_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define Hyperlink_get_AddressOld(This,prop)	\
    ( (This)->lpVtbl -> get_AddressOld(This,prop) ) 

#define Hyperlink_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define Hyperlink_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Hyperlink_get_Shape(This,prop)	\
    ( (This)->lpVtbl -> get_Shape(This,prop) ) 

#define Hyperlink_get_SubAddressOld(This,prop)	\
    ( (This)->lpVtbl -> get_SubAddressOld(This,prop) ) 

#define Hyperlink_get_ExtraInfoRequired(This,prop)	\
    ( (This)->lpVtbl -> get_ExtraInfoRequired(This,prop) ) 

#define Hyperlink_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Hyperlink_Follow(This,NewWindow,AddHistory,ExtraInfo,Method,HeaderInfo)	\
    ( (This)->lpVtbl -> Follow(This,NewWindow,AddHistory,ExtraInfo,Method,HeaderInfo) ) 

#define Hyperlink_AddToFavorites(This)	\
    ( (This)->lpVtbl -> AddToFavorites(This) ) 

#define Hyperlink_CreateNewDocument(This,FileName,EditNow,Overwrite)	\
    ( (This)->lpVtbl -> CreateNewDocument(This,FileName,EditNow,Overwrite) ) 

#define Hyperlink_get_Address(This,prop)	\
    ( (This)->lpVtbl -> get_Address(This,prop) ) 

#define Hyperlink_put_Address(This,prop)	\
    ( (This)->lpVtbl -> put_Address(This,prop) ) 

#define Hyperlink_get_SubAddress(This,prop)	\
    ( (This)->lpVtbl -> get_SubAddress(This,prop) ) 

#define Hyperlink_put_SubAddress(This,prop)	\
    ( (This)->lpVtbl -> put_SubAddress(This,prop) ) 

#define Hyperlink_get_EmailSubject(This,prop)	\
    ( (This)->lpVtbl -> get_EmailSubject(This,prop) ) 

#define Hyperlink_put_EmailSubject(This,prop)	\
    ( (This)->lpVtbl -> put_EmailSubject(This,prop) ) 

#define Hyperlink_get_ScreenTip(This,prop)	\
    ( (This)->lpVtbl -> get_ScreenTip(This,prop) ) 

#define Hyperlink_put_ScreenTip(This,prop)	\
    ( (This)->lpVtbl -> put_ScreenTip(This,prop) ) 

#define Hyperlink_get_TextToDisplay(This,prop)	\
    ( (This)->lpVtbl -> get_TextToDisplay(This,prop) ) 

#define Hyperlink_put_TextToDisplay(This,prop)	\
    ( (This)->lpVtbl -> put_TextToDisplay(This,prop) ) 

#define Hyperlink_get_Target(This,prop)	\
    ( (This)->lpVtbl -> get_Target(This,prop) ) 

#define Hyperlink_put_Target(This,prop)	\
    ( (This)->lpVtbl -> put_Target(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Hyperlink_INTERFACE_DEFINED__ */


#ifndef __Shapes_INTERFACE_DEFINED__
#define __Shapes_INTERFACE_DEFINED__

/* interface Shapes */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Shapes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0002099F-0000-0000-C000-000000000046")
    Shapes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddCallout( 
            /* [in] */ MsoCalloutType Type,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE AddConnector( 
            /* [in] */ MsoConnectorType Type,
            /* [in] */ int BeginX,
            /* [in] */ int BeginY,
            /* [in] */ int EndX,
            /* [in] */ int EndY,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddCurve( 
            /* [in] */ VARIANT *SafeArrayOfPoints,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddLabel( 
            /* [in] */ MsoTextOrientation Orientation,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddLine( 
            /* [in] */ int BeginX,
            /* [in] */ int BeginY,
            /* [in] */ int EndX,
            /* [in] */ int EndY,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPicture( 
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *LinkToFile,
            /* [optional][in] */ VARIANT *SaveWithDocument,
            /* [optional][in] */ VARIANT *Left,
            /* [optional][in] */ VARIANT *Top,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPolyline( 
            /* [in] */ VARIANT *SafeArrayOfPoints,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddShape( 
            /* [in] */ long Type,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddTextEffect( 
            /* [in] */ MsoPresetTextEffect PresetTextEffect,
            /* [in] */ BSTR Text,
            /* [in] */ BSTR FontName,
            /* [in] */ int FontSize,
            /* [in] */ MsoTriState FontBold,
            /* [in] */ MsoTriState FontItalic,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddTextbox( 
            /* [in] */ MsoTextOrientation Orientation,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE BuildFreeform( 
            /* [in] */ MsoEditingType EditingType,
            /* [in] */ int X1,
            /* [in] */ int Y1,
            /* [retval][out] */ /* external definition not present */ FreeformBuilder **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ /* external definition not present */ ShapeRange **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectAll( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddOLEObject( 
            /* [optional][in] */ VARIANT *ClassType,
            /* [optional][in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *LinkToFile,
            /* [optional][in] */ VARIANT *DisplayAsIcon,
            /* [optional][in] */ VARIANT *IconFileName,
            /* [optional][in] */ VARIANT *IconIndex,
            /* [optional][in] */ VARIANT *IconLabel,
            /* [optional][in] */ VARIANT *Left,
            /* [optional][in] */ VARIANT *Top,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddOLEControl( 
            /* [optional][in] */ VARIANT *ClassType,
            /* [optional][in] */ VARIANT *Left,
            /* [optional][in] */ VARIANT *Top,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddDiagram( 
            /* [in] */ MsoDiagramType Type,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddCanvas( 
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ShapesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Shapes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Shapes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Shapes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Shapes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Shapes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Shapes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Shapes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Shapes * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Shapes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Shapes * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Shapes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Shapes * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Shapes * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddCallout )( 
            Shapes * This,
            /* [in] */ MsoCalloutType Type,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *AddConnector )( 
            Shapes * This,
            /* [in] */ MsoConnectorType Type,
            /* [in] */ int BeginX,
            /* [in] */ int BeginY,
            /* [in] */ int EndX,
            /* [in] */ int EndY,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddCurve )( 
            Shapes * This,
            /* [in] */ VARIANT *SafeArrayOfPoints,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddLabel )( 
            Shapes * This,
            /* [in] */ MsoTextOrientation Orientation,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddLine )( 
            Shapes * This,
            /* [in] */ int BeginX,
            /* [in] */ int BeginY,
            /* [in] */ int EndX,
            /* [in] */ int EndY,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPicture )( 
            Shapes * This,
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *LinkToFile,
            /* [optional][in] */ VARIANT *SaveWithDocument,
            /* [optional][in] */ VARIANT *Left,
            /* [optional][in] */ VARIANT *Top,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPolyline )( 
            Shapes * This,
            /* [in] */ VARIANT *SafeArrayOfPoints,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddShape )( 
            Shapes * This,
            /* [in] */ long Type,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddTextEffect )( 
            Shapes * This,
            /* [in] */ MsoPresetTextEffect PresetTextEffect,
            /* [in] */ BSTR Text,
            /* [in] */ BSTR FontName,
            /* [in] */ int FontSize,
            /* [in] */ MsoTriState FontBold,
            /* [in] */ MsoTriState FontItalic,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddTextbox )( 
            Shapes * This,
            /* [in] */ MsoTextOrientation Orientation,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BuildFreeform )( 
            Shapes * This,
            /* [in] */ MsoEditingType EditingType,
            /* [in] */ int X1,
            /* [in] */ int Y1,
            /* [retval][out] */ /* external definition not present */ FreeformBuilder **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Range )( 
            Shapes * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ /* external definition not present */ ShapeRange **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectAll )( 
            Shapes * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddOLEObject )( 
            Shapes * This,
            /* [optional][in] */ VARIANT *ClassType,
            /* [optional][in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *LinkToFile,
            /* [optional][in] */ VARIANT *DisplayAsIcon,
            /* [optional][in] */ VARIANT *IconFileName,
            /* [optional][in] */ VARIANT *IconIndex,
            /* [optional][in] */ VARIANT *IconLabel,
            /* [optional][in] */ VARIANT *Left,
            /* [optional][in] */ VARIANT *Top,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddOLEControl )( 
            Shapes * This,
            /* [optional][in] */ VARIANT *ClassType,
            /* [optional][in] */ VARIANT *Left,
            /* [optional][in] */ VARIANT *Top,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddDiagram )( 
            Shapes * This,
            /* [in] */ MsoDiagramType Type,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddCanvas )( 
            Shapes * This,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        END_INTERFACE
    } ShapesVtbl;

    interface Shapes
    {
        CONST_VTBL struct ShapesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Shapes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Shapes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Shapes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Shapes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Shapes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Shapes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Shapes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Shapes_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Shapes_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Shapes_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Shapes_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Shapes_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Shapes_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Shapes_AddCallout(This,Type,Left,Top,Width,Height,Anchor,prop)	\
    ( (This)->lpVtbl -> AddCallout(This,Type,Left,Top,Width,Height,Anchor,prop) ) 

#define Shapes_AddConnector(This,Type,BeginX,BeginY,EndX,EndY,prop)	\
    ( (This)->lpVtbl -> AddConnector(This,Type,BeginX,BeginY,EndX,EndY,prop) ) 

#define Shapes_AddCurve(This,SafeArrayOfPoints,Anchor,prop)	\
    ( (This)->lpVtbl -> AddCurve(This,SafeArrayOfPoints,Anchor,prop) ) 

#define Shapes_AddLabel(This,Orientation,Left,Top,Width,Height,Anchor,prop)	\
    ( (This)->lpVtbl -> AddLabel(This,Orientation,Left,Top,Width,Height,Anchor,prop) ) 

#define Shapes_AddLine(This,BeginX,BeginY,EndX,EndY,Anchor,prop)	\
    ( (This)->lpVtbl -> AddLine(This,BeginX,BeginY,EndX,EndY,Anchor,prop) ) 

#define Shapes_AddPicture(This,FileName,LinkToFile,SaveWithDocument,Left,Top,Width,Height,Anchor,prop)	\
    ( (This)->lpVtbl -> AddPicture(This,FileName,LinkToFile,SaveWithDocument,Left,Top,Width,Height,Anchor,prop) ) 

#define Shapes_AddPolyline(This,SafeArrayOfPoints,Anchor,prop)	\
    ( (This)->lpVtbl -> AddPolyline(This,SafeArrayOfPoints,Anchor,prop) ) 

#define Shapes_AddShape(This,Type,Left,Top,Width,Height,Anchor,prop)	\
    ( (This)->lpVtbl -> AddShape(This,Type,Left,Top,Width,Height,Anchor,prop) ) 

#define Shapes_AddTextEffect(This,PresetTextEffect,Text,FontName,FontSize,FontBold,FontItalic,Left,Top,Anchor,prop)	\
    ( (This)->lpVtbl -> AddTextEffect(This,PresetTextEffect,Text,FontName,FontSize,FontBold,FontItalic,Left,Top,Anchor,prop) ) 

#define Shapes_AddTextbox(This,Orientation,Left,Top,Width,Height,Anchor,prop)	\
    ( (This)->lpVtbl -> AddTextbox(This,Orientation,Left,Top,Width,Height,Anchor,prop) ) 

#define Shapes_BuildFreeform(This,EditingType,X1,Y1,prop)	\
    ( (This)->lpVtbl -> BuildFreeform(This,EditingType,X1,Y1,prop) ) 

#define Shapes_Range(This,Index,prop)	\
    ( (This)->lpVtbl -> Range(This,Index,prop) ) 

#define Shapes_SelectAll(This)	\
    ( (This)->lpVtbl -> SelectAll(This) ) 

#define Shapes_AddOLEObject(This,ClassType,FileName,LinkToFile,DisplayAsIcon,IconFileName,IconIndex,IconLabel,Left,Top,Width,Height,Anchor,prop)	\
    ( (This)->lpVtbl -> AddOLEObject(This,ClassType,FileName,LinkToFile,DisplayAsIcon,IconFileName,IconIndex,IconLabel,Left,Top,Width,Height,Anchor,prop) ) 

#define Shapes_AddOLEControl(This,ClassType,Left,Top,Width,Height,Anchor,prop)	\
    ( (This)->lpVtbl -> AddOLEControl(This,ClassType,Left,Top,Width,Height,Anchor,prop) ) 

#define Shapes_AddDiagram(This,Type,Left,Top,Width,Height,Anchor,prop)	\
    ( (This)->lpVtbl -> AddDiagram(This,Type,Left,Top,Width,Height,Anchor,prop) ) 

#define Shapes_AddCanvas(This,Left,Top,Width,Height,Anchor,prop)	\
    ( (This)->lpVtbl -> AddCanvas(This,Left,Top,Width,Height,Anchor,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Shapes_INTERFACE_DEFINED__ */


#ifndef __ShapeRange_INTERFACE_DEFINED__
#define __ShapeRange_INTERFACE_DEFINED__

/* interface ShapeRange */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ShapeRange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209B5-0000-0000-C000-000000000046")
    ShapeRange : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Adjustments( 
            /* [retval][out] */ /* external definition not present */ Adjustments **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoShapeType( 
            /* [retval][out] */ MsoAutoShapeType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoShapeType( 
            /* [in] */ MsoAutoShapeType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Callout( 
            /* [retval][out] */ /* external definition not present */ CalloutFormat **prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConnectionSiteCount( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Connector( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConnectorFormat( 
            /* [retval][out] */ /* external definition not present */ ConnectorFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ /* external definition not present */ FillFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GroupItems( 
            /* [retval][out] */ /* external definition not present */ GroupShapes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalFlip( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Line( 
            /* [retval][out] */ /* external definition not present */ LineFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LockAspectRatio( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LockAspectRatio( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Nodes( 
            /* [retval][out] */ /* external definition not present */ ShapeNodes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureFormat( 
            /* [retval][out] */ /* external definition not present */ PictureFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ /* external definition not present */ ShadowFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextEffect( 
            /* [retval][out] */ /* external definition not present */ TextEffectFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextFrame( 
            /* [retval][out] */ /* external definition not present */ TextFrame **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ThreeD( 
            /* [retval][out] */ /* external definition not present */ ThreeDFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoShapeType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalFlip( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Vertices( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ZOrderPosition( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hyperlink( 
            /* [retval][out] */ Hyperlink **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelativeHorizontalPosition( 
            /* [retval][out] */ WdRelativeHorizontalPosition *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RelativeHorizontalPosition( 
            /* [in] */ WdRelativeHorizontalPosition prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelativeVerticalPosition( 
            /* [retval][out] */ WdRelativeVerticalPosition *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RelativeVerticalPosition( 
            /* [in] */ WdRelativeVerticalPosition prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LockAnchor( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LockAnchor( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WrapFormat( 
            /* [retval][out] */ WrapFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Anchor( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Align( 
            /* [in] */ MsoAlignCmd Align,
            /* [in] */ long RelativeTo) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Apply( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Distribute( 
            /* [in] */ MsoDistributeCmd Distribute,
            /* [in] */ long RelativeTo) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Duplicate( 
            /* [retval][out] */ ShapeRange **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Flip( 
            /* [in] */ MsoFlipCmd FlipCmd) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementLeft( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementRotation( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementTop( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Group( 
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PickUp( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Regroup( 
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE RerouteConnections( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScaleHeight( 
            /* [in] */ int Factor,
            /* [in] */ MsoTriState RelativeToOriginalSize,
            /* [defaultvalue][optional][in] */ MsoScaleFrom Scale = 0) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScaleWidth( 
            /* [in] */ int Factor,
            /* [in] */ MsoTriState RelativeToOriginalSize,
            /* [defaultvalue][optional][in] */ MsoScaleFrom Scale = 0) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [optional][in] */ VARIANT *Replace) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetShapesDefaultProperties( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Ungroup( 
            /* [retval][out] */ ShapeRange **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ZOrder( 
            /* [in] */ MsoZOrderCmd ZOrderCmd) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToFrame( 
            /* [retval][out] */ Frame **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToInlineShape( 
            /* [retval][out] */ InlineShape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AlternativeText( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AlternativeText( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasDiagram( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Diagram( 
            /* [retval][out] */ /* external definition not present */ IMsoDiagram **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasDiagramNode( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DiagramNode( 
            /* [retval][out] */ /* external definition not present */ DiagramNode **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Child( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ParentGroup( 
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanvasItems( 
            /* [retval][out] */ /* external definition not present */ CanvasShapes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanvasCropLeft( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanvasCropTop( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanvasCropRight( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanvasCropBottom( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_RTF( 
            /* [in] */ BSTR rhs) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LayoutInCell( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LayoutInCell( 
            /* [in] */ long prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ShapeRangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ShapeRange * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ShapeRange * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ShapeRange * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ShapeRange * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ShapeRange * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ShapeRange * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ShapeRange * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ShapeRange * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ShapeRange * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ShapeRange * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ShapeRange * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ShapeRange * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Adjustments )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ Adjustments **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoShapeType )( 
            ShapeRange * This,
            /* [retval][out] */ MsoAutoShapeType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoShapeType )( 
            ShapeRange * This,
            /* [in] */ MsoAutoShapeType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Callout )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ CalloutFormat **prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectionSiteCount )( 
            ShapeRange * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Connector )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectorFormat )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ ConnectorFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ FillFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GroupItems )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ GroupShapes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            ShapeRange * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            ShapeRange * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalFlip )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            ShapeRange * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            ShapeRange * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ LineFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LockAspectRatio )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LockAspectRatio )( 
            ShapeRange * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ShapeRange * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ShapeRange * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Nodes )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ ShapeNodes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            ShapeRange * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            ShapeRange * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureFormat )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ PictureFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ ShadowFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextEffect )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ TextEffectFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFrame )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ TextFrame **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ThreeD )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ ThreeDFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            ShapeRange * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            ShapeRange * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ShapeRange * This,
            /* [retval][out] */ MsoShapeType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalFlip )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Vertices )( 
            ShapeRange * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            ShapeRange * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            ShapeRange * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            ShapeRange * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZOrderPosition )( 
            ShapeRange * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlink )( 
            ShapeRange * This,
            /* [retval][out] */ Hyperlink **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelativeHorizontalPosition )( 
            ShapeRange * This,
            /* [retval][out] */ WdRelativeHorizontalPosition *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RelativeHorizontalPosition )( 
            ShapeRange * This,
            /* [in] */ WdRelativeHorizontalPosition prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelativeVerticalPosition )( 
            ShapeRange * This,
            /* [retval][out] */ WdRelativeVerticalPosition *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RelativeVerticalPosition )( 
            ShapeRange * This,
            /* [in] */ WdRelativeVerticalPosition prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LockAnchor )( 
            ShapeRange * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LockAnchor )( 
            ShapeRange * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WrapFormat )( 
            ShapeRange * This,
            /* [retval][out] */ WrapFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Anchor )( 
            ShapeRange * This,
            /* [retval][out] */ Range **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ShapeRange * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Align )( 
            ShapeRange * This,
            /* [in] */ MsoAlignCmd Align,
            /* [in] */ long RelativeTo);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Apply )( 
            ShapeRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ShapeRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Distribute )( 
            ShapeRange * This,
            /* [in] */ MsoDistributeCmd Distribute,
            /* [in] */ long RelativeTo);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Duplicate )( 
            ShapeRange * This,
            /* [retval][out] */ ShapeRange **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Flip )( 
            ShapeRange * This,
            /* [in] */ MsoFlipCmd FlipCmd);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementLeft )( 
            ShapeRange * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementRotation )( 
            ShapeRange * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementTop )( 
            ShapeRange * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Group )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PickUp )( 
            ShapeRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Regroup )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *RerouteConnections )( 
            ShapeRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleHeight )( 
            ShapeRange * This,
            /* [in] */ int Factor,
            /* [in] */ MsoTriState RelativeToOriginalSize,
            /* [defaultvalue][optional][in] */ MsoScaleFrom Scale);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleWidth )( 
            ShapeRange * This,
            /* [in] */ int Factor,
            /* [in] */ MsoTriState RelativeToOriginalSize,
            /* [defaultvalue][optional][in] */ MsoScaleFrom Scale);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            ShapeRange * This,
            /* [optional][in] */ VARIANT *Replace);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetShapesDefaultProperties )( 
            ShapeRange * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Ungroup )( 
            ShapeRange * This,
            /* [retval][out] */ ShapeRange **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ZOrder )( 
            ShapeRange * This,
            /* [in] */ MsoZOrderCmd ZOrderCmd);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToFrame )( 
            ShapeRange * This,
            /* [retval][out] */ Frame **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToInlineShape )( 
            ShapeRange * This,
            /* [retval][out] */ InlineShape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            ShapeRange * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AlternativeText )( 
            ShapeRange * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AlternativeText )( 
            ShapeRange * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasDiagram )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Diagram )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ IMsoDiagram **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasDiagramNode )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DiagramNode )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ DiagramNode **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Child )( 
            ShapeRange * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ParentGroup )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanvasItems )( 
            ShapeRange * This,
            /* [retval][out] */ /* external definition not present */ CanvasShapes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            ShapeRange * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanvasCropLeft )( 
            ShapeRange * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanvasCropTop )( 
            ShapeRange * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanvasCropRight )( 
            ShapeRange * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanvasCropBottom )( 
            ShapeRange * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RTF )( 
            ShapeRange * This,
            /* [in] */ BSTR rhs);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LayoutInCell )( 
            ShapeRange * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LayoutInCell )( 
            ShapeRange * This,
            /* [in] */ long prop);
        
        END_INTERFACE
    } ShapeRangeVtbl;

    interface ShapeRange
    {
        CONST_VTBL struct ShapeRangeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ShapeRange_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ShapeRange_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ShapeRange_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ShapeRange_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ShapeRange_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ShapeRange_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ShapeRange_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ShapeRange_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ShapeRange_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ShapeRange_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ShapeRange_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define ShapeRange_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define ShapeRange_get_Adjustments(This,prop)	\
    ( (This)->lpVtbl -> get_Adjustments(This,prop) ) 

#define ShapeRange_get_AutoShapeType(This,prop)	\
    ( (This)->lpVtbl -> get_AutoShapeType(This,prop) ) 

#define ShapeRange_put_AutoShapeType(This,prop)	\
    ( (This)->lpVtbl -> put_AutoShapeType(This,prop) ) 

#define ShapeRange_get_Callout(This,prop)	\
    ( (This)->lpVtbl -> get_Callout(This,prop) ) 

#define ShapeRange_get_ConnectionSiteCount(This,prop)	\
    ( (This)->lpVtbl -> get_ConnectionSiteCount(This,prop) ) 

#define ShapeRange_get_Connector(This,prop)	\
    ( (This)->lpVtbl -> get_Connector(This,prop) ) 

#define ShapeRange_get_ConnectorFormat(This,prop)	\
    ( (This)->lpVtbl -> get_ConnectorFormat(This,prop) ) 

#define ShapeRange_get_Fill(This,prop)	\
    ( (This)->lpVtbl -> get_Fill(This,prop) ) 

#define ShapeRange_get_GroupItems(This,prop)	\
    ( (This)->lpVtbl -> get_GroupItems(This,prop) ) 

#define ShapeRange_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define ShapeRange_put_Height(This,prop)	\
    ( (This)->lpVtbl -> put_Height(This,prop) ) 

#define ShapeRange_get_HorizontalFlip(This,prop)	\
    ( (This)->lpVtbl -> get_HorizontalFlip(This,prop) ) 

#define ShapeRange_get_Left(This,prop)	\
    ( (This)->lpVtbl -> get_Left(This,prop) ) 

#define ShapeRange_put_Left(This,prop)	\
    ( (This)->lpVtbl -> put_Left(This,prop) ) 

#define ShapeRange_get_Line(This,prop)	\
    ( (This)->lpVtbl -> get_Line(This,prop) ) 

#define ShapeRange_get_LockAspectRatio(This,prop)	\
    ( (This)->lpVtbl -> get_LockAspectRatio(This,prop) ) 

#define ShapeRange_put_LockAspectRatio(This,prop)	\
    ( (This)->lpVtbl -> put_LockAspectRatio(This,prop) ) 

#define ShapeRange_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define ShapeRange_put_Name(This,prop)	\
    ( (This)->lpVtbl -> put_Name(This,prop) ) 

#define ShapeRange_get_Nodes(This,prop)	\
    ( (This)->lpVtbl -> get_Nodes(This,prop) ) 

#define ShapeRange_get_Rotation(This,prop)	\
    ( (This)->lpVtbl -> get_Rotation(This,prop) ) 

#define ShapeRange_put_Rotation(This,prop)	\
    ( (This)->lpVtbl -> put_Rotation(This,prop) ) 

#define ShapeRange_get_PictureFormat(This,prop)	\
    ( (This)->lpVtbl -> get_PictureFormat(This,prop) ) 

#define ShapeRange_get_Shadow(This,prop)	\
    ( (This)->lpVtbl -> get_Shadow(This,prop) ) 

#define ShapeRange_get_TextEffect(This,prop)	\
    ( (This)->lpVtbl -> get_TextEffect(This,prop) ) 

#define ShapeRange_get_TextFrame(This,prop)	\
    ( (This)->lpVtbl -> get_TextFrame(This,prop) ) 

#define ShapeRange_get_ThreeD(This,prop)	\
    ( (This)->lpVtbl -> get_ThreeD(This,prop) ) 

#define ShapeRange_get_Top(This,prop)	\
    ( (This)->lpVtbl -> get_Top(This,prop) ) 

#define ShapeRange_put_Top(This,prop)	\
    ( (This)->lpVtbl -> put_Top(This,prop) ) 

#define ShapeRange_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define ShapeRange_get_VerticalFlip(This,prop)	\
    ( (This)->lpVtbl -> get_VerticalFlip(This,prop) ) 

#define ShapeRange_get_Vertices(This,prop)	\
    ( (This)->lpVtbl -> get_Vertices(This,prop) ) 

#define ShapeRange_get_Visible(This,prop)	\
    ( (This)->lpVtbl -> get_Visible(This,prop) ) 

#define ShapeRange_put_Visible(This,prop)	\
    ( (This)->lpVtbl -> put_Visible(This,prop) ) 

#define ShapeRange_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define ShapeRange_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define ShapeRange_get_ZOrderPosition(This,prop)	\
    ( (This)->lpVtbl -> get_ZOrderPosition(This,prop) ) 

#define ShapeRange_get_Hyperlink(This,prop)	\
    ( (This)->lpVtbl -> get_Hyperlink(This,prop) ) 

#define ShapeRange_get_RelativeHorizontalPosition(This,prop)	\
    ( (This)->lpVtbl -> get_RelativeHorizontalPosition(This,prop) ) 

#define ShapeRange_put_RelativeHorizontalPosition(This,prop)	\
    ( (This)->lpVtbl -> put_RelativeHorizontalPosition(This,prop) ) 

#define ShapeRange_get_RelativeVerticalPosition(This,prop)	\
    ( (This)->lpVtbl -> get_RelativeVerticalPosition(This,prop) ) 

#define ShapeRange_put_RelativeVerticalPosition(This,prop)	\
    ( (This)->lpVtbl -> put_RelativeVerticalPosition(This,prop) ) 

#define ShapeRange_get_LockAnchor(This,prop)	\
    ( (This)->lpVtbl -> get_LockAnchor(This,prop) ) 

#define ShapeRange_put_LockAnchor(This,prop)	\
    ( (This)->lpVtbl -> put_LockAnchor(This,prop) ) 

#define ShapeRange_get_WrapFormat(This,prop)	\
    ( (This)->lpVtbl -> get_WrapFormat(This,prop) ) 

#define ShapeRange_get_Anchor(This,prop)	\
    ( (This)->lpVtbl -> get_Anchor(This,prop) ) 

#define ShapeRange_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define ShapeRange_Align(This,Align,RelativeTo)	\
    ( (This)->lpVtbl -> Align(This,Align,RelativeTo) ) 

#define ShapeRange_Apply(This)	\
    ( (This)->lpVtbl -> Apply(This) ) 

#define ShapeRange_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define ShapeRange_Distribute(This,Distribute,RelativeTo)	\
    ( (This)->lpVtbl -> Distribute(This,Distribute,RelativeTo) ) 

#define ShapeRange_Duplicate(This,prop)	\
    ( (This)->lpVtbl -> Duplicate(This,prop) ) 

#define ShapeRange_Flip(This,FlipCmd)	\
    ( (This)->lpVtbl -> Flip(This,FlipCmd) ) 

#define ShapeRange_IncrementLeft(This,Increment)	\
    ( (This)->lpVtbl -> IncrementLeft(This,Increment) ) 

#define ShapeRange_IncrementRotation(This,Increment)	\
    ( (This)->lpVtbl -> IncrementRotation(This,Increment) ) 

#define ShapeRange_IncrementTop(This,Increment)	\
    ( (This)->lpVtbl -> IncrementTop(This,Increment) ) 

#define ShapeRange_Group(This,prop)	\
    ( (This)->lpVtbl -> Group(This,prop) ) 

#define ShapeRange_PickUp(This)	\
    ( (This)->lpVtbl -> PickUp(This) ) 

#define ShapeRange_Regroup(This,prop)	\
    ( (This)->lpVtbl -> Regroup(This,prop) ) 

#define ShapeRange_RerouteConnections(This)	\
    ( (This)->lpVtbl -> RerouteConnections(This) ) 

#define ShapeRange_ScaleHeight(This,Factor,RelativeToOriginalSize,Scale)	\
    ( (This)->lpVtbl -> ScaleHeight(This,Factor,RelativeToOriginalSize,Scale) ) 

#define ShapeRange_ScaleWidth(This,Factor,RelativeToOriginalSize,Scale)	\
    ( (This)->lpVtbl -> ScaleWidth(This,Factor,RelativeToOriginalSize,Scale) ) 

#define ShapeRange_Select(This,Replace)	\
    ( (This)->lpVtbl -> Select(This,Replace) ) 

#define ShapeRange_SetShapesDefaultProperties(This)	\
    ( (This)->lpVtbl -> SetShapesDefaultProperties(This) ) 

#define ShapeRange_Ungroup(This,prop)	\
    ( (This)->lpVtbl -> Ungroup(This,prop) ) 

#define ShapeRange_ZOrder(This,ZOrderCmd)	\
    ( (This)->lpVtbl -> ZOrder(This,ZOrderCmd) ) 

#define ShapeRange_ConvertToFrame(This,prop)	\
    ( (This)->lpVtbl -> ConvertToFrame(This,prop) ) 

#define ShapeRange_ConvertToInlineShape(This,prop)	\
    ( (This)->lpVtbl -> ConvertToInlineShape(This,prop) ) 

#define ShapeRange_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define ShapeRange_get_AlternativeText(This,prop)	\
    ( (This)->lpVtbl -> get_AlternativeText(This,prop) ) 

#define ShapeRange_put_AlternativeText(This,prop)	\
    ( (This)->lpVtbl -> put_AlternativeText(This,prop) ) 

#define ShapeRange_get_HasDiagram(This,prop)	\
    ( (This)->lpVtbl -> get_HasDiagram(This,prop) ) 

#define ShapeRange_get_Diagram(This,prop)	\
    ( (This)->lpVtbl -> get_Diagram(This,prop) ) 

#define ShapeRange_get_HasDiagramNode(This,prop)	\
    ( (This)->lpVtbl -> get_HasDiagramNode(This,prop) ) 

#define ShapeRange_get_DiagramNode(This,prop)	\
    ( (This)->lpVtbl -> get_DiagramNode(This,prop) ) 

#define ShapeRange_get_Child(This,prop)	\
    ( (This)->lpVtbl -> get_Child(This,prop) ) 

#define ShapeRange_get_ParentGroup(This,prop)	\
    ( (This)->lpVtbl -> get_ParentGroup(This,prop) ) 

#define ShapeRange_get_CanvasItems(This,prop)	\
    ( (This)->lpVtbl -> get_CanvasItems(This,prop) ) 

#define ShapeRange_get_ID(This,prop)	\
    ( (This)->lpVtbl -> get_ID(This,prop) ) 

#define ShapeRange_CanvasCropLeft(This,Increment)	\
    ( (This)->lpVtbl -> CanvasCropLeft(This,Increment) ) 

#define ShapeRange_CanvasCropTop(This,Increment)	\
    ( (This)->lpVtbl -> CanvasCropTop(This,Increment) ) 

#define ShapeRange_CanvasCropRight(This,Increment)	\
    ( (This)->lpVtbl -> CanvasCropRight(This,Increment) ) 

#define ShapeRange_CanvasCropBottom(This,Increment)	\
    ( (This)->lpVtbl -> CanvasCropBottom(This,Increment) ) 

#define ShapeRange_put_RTF(This,rhs)	\
    ( (This)->lpVtbl -> put_RTF(This,rhs) ) 

#define ShapeRange_get_LayoutInCell(This,prop)	\
    ( (This)->lpVtbl -> get_LayoutInCell(This,prop) ) 

#define ShapeRange_put_LayoutInCell(This,prop)	\
    ( (This)->lpVtbl -> put_LayoutInCell(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ShapeRange_INTERFACE_DEFINED__ */


#ifndef __GroupShapes_INTERFACE_DEFINED__
#define __GroupShapes_INTERFACE_DEFINED__

/* interface GroupShapes */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_GroupShapes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209B6-0000-0000-C000-000000000046")
    GroupShapes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ /* external definition not present */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ ShapeRange **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct GroupShapesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            GroupShapes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            GroupShapes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            GroupShapes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            GroupShapes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            GroupShapes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            GroupShapes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            GroupShapes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            GroupShapes * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            GroupShapes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            GroupShapes * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            GroupShapes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            GroupShapes * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            GroupShapes * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ /* external definition not present */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Range )( 
            GroupShapes * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ ShapeRange **prop);
        
        END_INTERFACE
    } GroupShapesVtbl;

    interface GroupShapes
    {
        CONST_VTBL struct GroupShapesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define GroupShapes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define GroupShapes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define GroupShapes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define GroupShapes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define GroupShapes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define GroupShapes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define GroupShapes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define GroupShapes_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define GroupShapes_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define GroupShapes_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define GroupShapes_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define GroupShapes_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define GroupShapes_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define GroupShapes_Range(This,Index,prop)	\
    ( (This)->lpVtbl -> Range(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __GroupShapes_INTERFACE_DEFINED__ */


#ifndef __Shape_INTERFACE_DEFINED__
#define __Shape_INTERFACE_DEFINED__

/* interface Shape */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Shape;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209A0-0000-0000-C000-000000000046")
    Shape : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Adjustments( 
            /* [retval][out] */ /* external definition not present */ Adjustments **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoShapeType( 
            /* [retval][out] */ MsoAutoShapeType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoShapeType( 
            /* [in] */ MsoAutoShapeType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Callout( 
            /* [retval][out] */ /* external definition not present */ CalloutFormat **prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConnectionSiteCount( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Connector( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConnectorFormat( 
            /* [retval][out] */ /* external definition not present */ ConnectorFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ /* external definition not present */ FillFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GroupItems( 
            /* [retval][out] */ GroupShapes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalFlip( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Line( 
            /* [retval][out] */ /* external definition not present */ LineFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LockAspectRatio( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LockAspectRatio( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Nodes( 
            /* [retval][out] */ /* external definition not present */ ShapeNodes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rotation( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Rotation( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureFormat( 
            /* [retval][out] */ /* external definition not present */ PictureFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shadow( 
            /* [retval][out] */ /* external definition not present */ ShadowFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextEffect( 
            /* [retval][out] */ /* external definition not present */ TextEffectFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextFrame( 
            /* [retval][out] */ /* external definition not present */ TextFrame **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ThreeD( 
            /* [retval][out] */ /* external definition not present */ ThreeDFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoShapeType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VerticalFlip( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Vertices( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ZOrderPosition( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hyperlink( 
            /* [retval][out] */ Hyperlink **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelativeHorizontalPosition( 
            /* [retval][out] */ WdRelativeHorizontalPosition *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RelativeHorizontalPosition( 
            /* [in] */ WdRelativeHorizontalPosition prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelativeVerticalPosition( 
            /* [retval][out] */ WdRelativeVerticalPosition *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RelativeVerticalPosition( 
            /* [in] */ WdRelativeVerticalPosition prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LockAnchor( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LockAnchor( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WrapFormat( 
            /* [retval][out] */ WrapFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OLEFormat( 
            /* [retval][out] */ OLEFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Anchor( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinkFormat( 
            /* [retval][out] */ LinkFormat **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Apply( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Duplicate( 
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Flip( 
            /* [in] */ MsoFlipCmd FlipCmd) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementLeft( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementRotation( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementTop( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PickUp( void) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE RerouteConnections( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScaleHeight( 
            /* [in] */ int Factor,
            /* [in] */ MsoTriState RelativeToOriginalSize,
            /* [defaultvalue][optional][in] */ MsoScaleFrom Scale = 0) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ScaleWidth( 
            /* [in] */ int Factor,
            /* [in] */ MsoTriState RelativeToOriginalSize,
            /* [defaultvalue][optional][in] */ MsoScaleFrom Scale = 0) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [optional][in] */ VARIANT *Replace) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetShapesDefaultProperties( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Ungroup( 
            /* [retval][out] */ ShapeRange **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ZOrder( 
            /* [in] */ MsoZOrderCmd ZOrderCmd) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToInlineShape( 
            /* [retval][out] */ InlineShape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToFrame( 
            /* [retval][out] */ Frame **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AlternativeText( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AlternativeText( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Script( 
            /* [retval][out] */ /* external definition not present */ Script **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasDiagram( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Diagram( 
            /* [retval][out] */ /* external definition not present */ IMsoDiagram **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasDiagramNode( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DiagramNode( 
            /* [retval][out] */ /* external definition not present */ DiagramNode **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Child( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ParentGroup( 
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanvasItems( 
            /* [retval][out] */ /* external definition not present */ CanvasShapes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanvasCropLeft( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanvasCropTop( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanvasCropRight( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanvasCropBottom( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_RTF( 
            /* [in] */ BSTR rhs) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LayoutInCell( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LayoutInCell( 
            /* [in] */ long prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ShapeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Shape * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Shape * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Shape * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Shape * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Shape * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Shape * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Shape * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Shape * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Shape * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Shape * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Adjustments )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ Adjustments **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoShapeType )( 
            Shape * This,
            /* [retval][out] */ MsoAutoShapeType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoShapeType )( 
            Shape * This,
            /* [in] */ MsoAutoShapeType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Callout )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ CalloutFormat **prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectionSiteCount )( 
            Shape * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Connector )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectorFormat )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ ConnectorFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ FillFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GroupItems )( 
            Shape * This,
            /* [retval][out] */ GroupShapes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Shape * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            Shape * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalFlip )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            Shape * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            Shape * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ LineFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LockAspectRatio )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LockAspectRatio )( 
            Shape * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Shape * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            Shape * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Nodes )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ ShapeNodes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rotation )( 
            Shape * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Rotation )( 
            Shape * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureFormat )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ PictureFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shadow )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ ShadowFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextEffect )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ TextEffectFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextFrame )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ TextFrame **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ThreeD )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ ThreeDFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            Shape * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            Shape * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Shape * This,
            /* [retval][out] */ MsoShapeType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VerticalFlip )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Vertices )( 
            Shape * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            Shape * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Shape * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            Shape * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ZOrderPosition )( 
            Shape * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlink )( 
            Shape * This,
            /* [retval][out] */ Hyperlink **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelativeHorizontalPosition )( 
            Shape * This,
            /* [retval][out] */ WdRelativeHorizontalPosition *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RelativeHorizontalPosition )( 
            Shape * This,
            /* [in] */ WdRelativeHorizontalPosition prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelativeVerticalPosition )( 
            Shape * This,
            /* [retval][out] */ WdRelativeVerticalPosition *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RelativeVerticalPosition )( 
            Shape * This,
            /* [in] */ WdRelativeVerticalPosition prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LockAnchor )( 
            Shape * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LockAnchor )( 
            Shape * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WrapFormat )( 
            Shape * This,
            /* [retval][out] */ WrapFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OLEFormat )( 
            Shape * This,
            /* [retval][out] */ OLEFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Anchor )( 
            Shape * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinkFormat )( 
            Shape * This,
            /* [retval][out] */ LinkFormat **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Apply )( 
            Shape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Shape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Duplicate )( 
            Shape * This,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Flip )( 
            Shape * This,
            /* [in] */ MsoFlipCmd FlipCmd);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementLeft )( 
            Shape * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementRotation )( 
            Shape * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementTop )( 
            Shape * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PickUp )( 
            Shape * This);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *RerouteConnections )( 
            Shape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleHeight )( 
            Shape * This,
            /* [in] */ int Factor,
            /* [in] */ MsoTriState RelativeToOriginalSize,
            /* [defaultvalue][optional][in] */ MsoScaleFrom Scale);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ScaleWidth )( 
            Shape * This,
            /* [in] */ int Factor,
            /* [in] */ MsoTriState RelativeToOriginalSize,
            /* [defaultvalue][optional][in] */ MsoScaleFrom Scale);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            Shape * This,
            /* [optional][in] */ VARIANT *Replace);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetShapesDefaultProperties )( 
            Shape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Ungroup )( 
            Shape * This,
            /* [retval][out] */ ShapeRange **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ZOrder )( 
            Shape * This,
            /* [in] */ MsoZOrderCmd ZOrderCmd);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToInlineShape )( 
            Shape * This,
            /* [retval][out] */ InlineShape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToFrame )( 
            Shape * This,
            /* [retval][out] */ Frame **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            Shape * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AlternativeText )( 
            Shape * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AlternativeText )( 
            Shape * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Script )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ Script **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasDiagram )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Diagram )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ IMsoDiagram **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasDiagramNode )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DiagramNode )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ DiagramNode **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Child )( 
            Shape * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ParentGroup )( 
            Shape * This,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanvasItems )( 
            Shape * This,
            /* [retval][out] */ /* external definition not present */ CanvasShapes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            Shape * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanvasCropLeft )( 
            Shape * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanvasCropTop )( 
            Shape * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanvasCropRight )( 
            Shape * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanvasCropBottom )( 
            Shape * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RTF )( 
            Shape * This,
            /* [in] */ BSTR rhs);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LayoutInCell )( 
            Shape * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LayoutInCell )( 
            Shape * This,
            /* [in] */ long prop);
        
        END_INTERFACE
    } ShapeVtbl;

    interface Shape
    {
        CONST_VTBL struct ShapeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Shape_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Shape_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Shape_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Shape_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Shape_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Shape_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Shape_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Shape_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Shape_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Shape_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Shape_get_Adjustments(This,prop)	\
    ( (This)->lpVtbl -> get_Adjustments(This,prop) ) 

#define Shape_get_AutoShapeType(This,prop)	\
    ( (This)->lpVtbl -> get_AutoShapeType(This,prop) ) 

#define Shape_put_AutoShapeType(This,prop)	\
    ( (This)->lpVtbl -> put_AutoShapeType(This,prop) ) 

#define Shape_get_Callout(This,prop)	\
    ( (This)->lpVtbl -> get_Callout(This,prop) ) 

#define Shape_get_ConnectionSiteCount(This,prop)	\
    ( (This)->lpVtbl -> get_ConnectionSiteCount(This,prop) ) 

#define Shape_get_Connector(This,prop)	\
    ( (This)->lpVtbl -> get_Connector(This,prop) ) 

#define Shape_get_ConnectorFormat(This,prop)	\
    ( (This)->lpVtbl -> get_ConnectorFormat(This,prop) ) 

#define Shape_get_Fill(This,prop)	\
    ( (This)->lpVtbl -> get_Fill(This,prop) ) 

#define Shape_get_GroupItems(This,prop)	\
    ( (This)->lpVtbl -> get_GroupItems(This,prop) ) 

#define Shape_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define Shape_put_Height(This,prop)	\
    ( (This)->lpVtbl -> put_Height(This,prop) ) 

#define Shape_get_HorizontalFlip(This,prop)	\
    ( (This)->lpVtbl -> get_HorizontalFlip(This,prop) ) 

#define Shape_get_Left(This,prop)	\
    ( (This)->lpVtbl -> get_Left(This,prop) ) 

#define Shape_put_Left(This,prop)	\
    ( (This)->lpVtbl -> put_Left(This,prop) ) 

#define Shape_get_Line(This,prop)	\
    ( (This)->lpVtbl -> get_Line(This,prop) ) 

#define Shape_get_LockAspectRatio(This,prop)	\
    ( (This)->lpVtbl -> get_LockAspectRatio(This,prop) ) 

#define Shape_put_LockAspectRatio(This,prop)	\
    ( (This)->lpVtbl -> put_LockAspectRatio(This,prop) ) 

#define Shape_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define Shape_put_Name(This,prop)	\
    ( (This)->lpVtbl -> put_Name(This,prop) ) 

#define Shape_get_Nodes(This,prop)	\
    ( (This)->lpVtbl -> get_Nodes(This,prop) ) 

#define Shape_get_Rotation(This,prop)	\
    ( (This)->lpVtbl -> get_Rotation(This,prop) ) 

#define Shape_put_Rotation(This,prop)	\
    ( (This)->lpVtbl -> put_Rotation(This,prop) ) 

#define Shape_get_PictureFormat(This,prop)	\
    ( (This)->lpVtbl -> get_PictureFormat(This,prop) ) 

#define Shape_get_Shadow(This,prop)	\
    ( (This)->lpVtbl -> get_Shadow(This,prop) ) 

#define Shape_get_TextEffect(This,prop)	\
    ( (This)->lpVtbl -> get_TextEffect(This,prop) ) 

#define Shape_get_TextFrame(This,prop)	\
    ( (This)->lpVtbl -> get_TextFrame(This,prop) ) 

#define Shape_get_ThreeD(This,prop)	\
    ( (This)->lpVtbl -> get_ThreeD(This,prop) ) 

#define Shape_get_Top(This,prop)	\
    ( (This)->lpVtbl -> get_Top(This,prop) ) 

#define Shape_put_Top(This,prop)	\
    ( (This)->lpVtbl -> put_Top(This,prop) ) 

#define Shape_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define Shape_get_VerticalFlip(This,prop)	\
    ( (This)->lpVtbl -> get_VerticalFlip(This,prop) ) 

#define Shape_get_Vertices(This,prop)	\
    ( (This)->lpVtbl -> get_Vertices(This,prop) ) 

#define Shape_get_Visible(This,prop)	\
    ( (This)->lpVtbl -> get_Visible(This,prop) ) 

#define Shape_put_Visible(This,prop)	\
    ( (This)->lpVtbl -> put_Visible(This,prop) ) 

#define Shape_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define Shape_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define Shape_get_ZOrderPosition(This,prop)	\
    ( (This)->lpVtbl -> get_ZOrderPosition(This,prop) ) 

#define Shape_get_Hyperlink(This,prop)	\
    ( (This)->lpVtbl -> get_Hyperlink(This,prop) ) 

#define Shape_get_RelativeHorizontalPosition(This,prop)	\
    ( (This)->lpVtbl -> get_RelativeHorizontalPosition(This,prop) ) 

#define Shape_put_RelativeHorizontalPosition(This,prop)	\
    ( (This)->lpVtbl -> put_RelativeHorizontalPosition(This,prop) ) 

#define Shape_get_RelativeVerticalPosition(This,prop)	\
    ( (This)->lpVtbl -> get_RelativeVerticalPosition(This,prop) ) 

#define Shape_put_RelativeVerticalPosition(This,prop)	\
    ( (This)->lpVtbl -> put_RelativeVerticalPosition(This,prop) ) 

#define Shape_get_LockAnchor(This,prop)	\
    ( (This)->lpVtbl -> get_LockAnchor(This,prop) ) 

#define Shape_put_LockAnchor(This,prop)	\
    ( (This)->lpVtbl -> put_LockAnchor(This,prop) ) 

#define Shape_get_WrapFormat(This,prop)	\
    ( (This)->lpVtbl -> get_WrapFormat(This,prop) ) 

#define Shape_get_OLEFormat(This,prop)	\
    ( (This)->lpVtbl -> get_OLEFormat(This,prop) ) 

#define Shape_get_Anchor(This,prop)	\
    ( (This)->lpVtbl -> get_Anchor(This,prop) ) 

#define Shape_get_LinkFormat(This,prop)	\
    ( (This)->lpVtbl -> get_LinkFormat(This,prop) ) 

#define Shape_Apply(This)	\
    ( (This)->lpVtbl -> Apply(This) ) 

#define Shape_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Shape_Duplicate(This,prop)	\
    ( (This)->lpVtbl -> Duplicate(This,prop) ) 

#define Shape_Flip(This,FlipCmd)	\
    ( (This)->lpVtbl -> Flip(This,FlipCmd) ) 

#define Shape_IncrementLeft(This,Increment)	\
    ( (This)->lpVtbl -> IncrementLeft(This,Increment) ) 

#define Shape_IncrementRotation(This,Increment)	\
    ( (This)->lpVtbl -> IncrementRotation(This,Increment) ) 

#define Shape_IncrementTop(This,Increment)	\
    ( (This)->lpVtbl -> IncrementTop(This,Increment) ) 

#define Shape_PickUp(This)	\
    ( (This)->lpVtbl -> PickUp(This) ) 

#define Shape_RerouteConnections(This)	\
    ( (This)->lpVtbl -> RerouteConnections(This) ) 

#define Shape_ScaleHeight(This,Factor,RelativeToOriginalSize,Scale)	\
    ( (This)->lpVtbl -> ScaleHeight(This,Factor,RelativeToOriginalSize,Scale) ) 

#define Shape_ScaleWidth(This,Factor,RelativeToOriginalSize,Scale)	\
    ( (This)->lpVtbl -> ScaleWidth(This,Factor,RelativeToOriginalSize,Scale) ) 

#define Shape_Select(This,Replace)	\
    ( (This)->lpVtbl -> Select(This,Replace) ) 

#define Shape_SetShapesDefaultProperties(This)	\
    ( (This)->lpVtbl -> SetShapesDefaultProperties(This) ) 

#define Shape_Ungroup(This,prop)	\
    ( (This)->lpVtbl -> Ungroup(This,prop) ) 

#define Shape_ZOrder(This,ZOrderCmd)	\
    ( (This)->lpVtbl -> ZOrder(This,ZOrderCmd) ) 

#define Shape_ConvertToInlineShape(This,prop)	\
    ( (This)->lpVtbl -> ConvertToInlineShape(This,prop) ) 

#define Shape_ConvertToFrame(This,prop)	\
    ( (This)->lpVtbl -> ConvertToFrame(This,prop) ) 

#define Shape_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define Shape_get_AlternativeText(This,prop)	\
    ( (This)->lpVtbl -> get_AlternativeText(This,prop) ) 

#define Shape_put_AlternativeText(This,prop)	\
    ( (This)->lpVtbl -> put_AlternativeText(This,prop) ) 

#define Shape_get_Script(This,prop)	\
    ( (This)->lpVtbl -> get_Script(This,prop) ) 

#define Shape_get_HasDiagram(This,prop)	\
    ( (This)->lpVtbl -> get_HasDiagram(This,prop) ) 

#define Shape_get_Diagram(This,prop)	\
    ( (This)->lpVtbl -> get_Diagram(This,prop) ) 

#define Shape_get_HasDiagramNode(This,prop)	\
    ( (This)->lpVtbl -> get_HasDiagramNode(This,prop) ) 

#define Shape_get_DiagramNode(This,prop)	\
    ( (This)->lpVtbl -> get_DiagramNode(This,prop) ) 

#define Shape_get_Child(This,prop)	\
    ( (This)->lpVtbl -> get_Child(This,prop) ) 

#define Shape_get_ParentGroup(This,prop)	\
    ( (This)->lpVtbl -> get_ParentGroup(This,prop) ) 

#define Shape_get_CanvasItems(This,prop)	\
    ( (This)->lpVtbl -> get_CanvasItems(This,prop) ) 

#define Shape_get_ID(This,prop)	\
    ( (This)->lpVtbl -> get_ID(This,prop) ) 

#define Shape_CanvasCropLeft(This,Increment)	\
    ( (This)->lpVtbl -> CanvasCropLeft(This,Increment) ) 

#define Shape_CanvasCropTop(This,Increment)	\
    ( (This)->lpVtbl -> CanvasCropTop(This,Increment) ) 

#define Shape_CanvasCropRight(This,Increment)	\
    ( (This)->lpVtbl -> CanvasCropRight(This,Increment) ) 

#define Shape_CanvasCropBottom(This,Increment)	\
    ( (This)->lpVtbl -> CanvasCropBottom(This,Increment) ) 

#define Shape_put_RTF(This,rhs)	\
    ( (This)->lpVtbl -> put_RTF(This,rhs) ) 

#define Shape_get_LayoutInCell(This,prop)	\
    ( (This)->lpVtbl -> get_LayoutInCell(This,prop) ) 

#define Shape_put_LayoutInCell(This,prop)	\
    ( (This)->lpVtbl -> put_LayoutInCell(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Shape_INTERFACE_DEFINED__ */


#ifndef __TextFrame_INTERFACE_DEFINED__
#define __TextFrame_INTERFACE_DEFINED__

/* interface TextFrame */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TextFrame;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209B2-0000-0000-C000-000000000046")
    TextFrame : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarginBottom( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarginBottom( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarginLeft( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarginLeft( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarginRight( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarginRight( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarginTop( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarginTop( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Orientation( 
            /* [retval][out] */ MsoTextOrientation *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Orientation( 
            /* [in] */ MsoTextOrientation prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextRange( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContainingRange( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Next( 
            /* [retval][out] */ TextFrame **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Next( 
            /* [in] */ TextFrame *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Previous( 
            /* [retval][out] */ TextFrame **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Previous( 
            /* [in] */ TextFrame *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Overflowing( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasText( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE BreakForwardLink( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ValidLinkTarget( 
            /* [in] */ TextFrame *TargetTextFrame,
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoSize( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoSize( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WordWrap( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WordWrap( 
            /* [in] */ long prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextFrameVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextFrame * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextFrame * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextFrame * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextFrame * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextFrame * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextFrame * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextFrame * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TextFrame * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TextFrame * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextFrame * This,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarginBottom )( 
            TextFrame * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarginBottom )( 
            TextFrame * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarginLeft )( 
            TextFrame * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarginLeft )( 
            TextFrame * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarginRight )( 
            TextFrame * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarginRight )( 
            TextFrame * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarginTop )( 
            TextFrame * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarginTop )( 
            TextFrame * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Orientation )( 
            TextFrame * This,
            /* [retval][out] */ MsoTextOrientation *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Orientation )( 
            TextFrame * This,
            /* [in] */ MsoTextOrientation prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRange )( 
            TextFrame * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContainingRange )( 
            TextFrame * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Next )( 
            TextFrame * This,
            /* [retval][out] */ TextFrame **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Next )( 
            TextFrame * This,
            /* [in] */ TextFrame *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Previous )( 
            TextFrame * This,
            /* [retval][out] */ TextFrame **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Previous )( 
            TextFrame * This,
            /* [in] */ TextFrame *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Overflowing )( 
            TextFrame * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasText )( 
            TextFrame * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BreakForwardLink )( 
            TextFrame * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ValidLinkTarget )( 
            TextFrame * This,
            /* [in] */ TextFrame *TargetTextFrame,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoSize )( 
            TextFrame * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoSize )( 
            TextFrame * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WordWrap )( 
            TextFrame * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WordWrap )( 
            TextFrame * This,
            /* [in] */ long prop);
        
        END_INTERFACE
    } TextFrameVtbl;

    interface TextFrame
    {
        CONST_VTBL struct TextFrameVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextFrame_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TextFrame_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TextFrame_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TextFrame_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TextFrame_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TextFrame_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TextFrame_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TextFrame_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TextFrame_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TextFrame_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TextFrame_get_MarginBottom(This,prop)	\
    ( (This)->lpVtbl -> get_MarginBottom(This,prop) ) 

#define TextFrame_put_MarginBottom(This,prop)	\
    ( (This)->lpVtbl -> put_MarginBottom(This,prop) ) 

#define TextFrame_get_MarginLeft(This,prop)	\
    ( (This)->lpVtbl -> get_MarginLeft(This,prop) ) 

#define TextFrame_put_MarginLeft(This,prop)	\
    ( (This)->lpVtbl -> put_MarginLeft(This,prop) ) 

#define TextFrame_get_MarginRight(This,prop)	\
    ( (This)->lpVtbl -> get_MarginRight(This,prop) ) 

#define TextFrame_put_MarginRight(This,prop)	\
    ( (This)->lpVtbl -> put_MarginRight(This,prop) ) 

#define TextFrame_get_MarginTop(This,prop)	\
    ( (This)->lpVtbl -> get_MarginTop(This,prop) ) 

#define TextFrame_put_MarginTop(This,prop)	\
    ( (This)->lpVtbl -> put_MarginTop(This,prop) ) 

#define TextFrame_get_Orientation(This,prop)	\
    ( (This)->lpVtbl -> get_Orientation(This,prop) ) 

#define TextFrame_put_Orientation(This,prop)	\
    ( (This)->lpVtbl -> put_Orientation(This,prop) ) 

#define TextFrame_get_TextRange(This,prop)	\
    ( (This)->lpVtbl -> get_TextRange(This,prop) ) 

#define TextFrame_get_ContainingRange(This,prop)	\
    ( (This)->lpVtbl -> get_ContainingRange(This,prop) ) 

#define TextFrame_get_Next(This,prop)	\
    ( (This)->lpVtbl -> get_Next(This,prop) ) 

#define TextFrame_put_Next(This,prop)	\
    ( (This)->lpVtbl -> put_Next(This,prop) ) 

#define TextFrame_get_Previous(This,prop)	\
    ( (This)->lpVtbl -> get_Previous(This,prop) ) 

#define TextFrame_put_Previous(This,prop)	\
    ( (This)->lpVtbl -> put_Previous(This,prop) ) 

#define TextFrame_get_Overflowing(This,prop)	\
    ( (This)->lpVtbl -> get_Overflowing(This,prop) ) 

#define TextFrame_get_HasText(This,prop)	\
    ( (This)->lpVtbl -> get_HasText(This,prop) ) 

#define TextFrame_BreakForwardLink(This)	\
    ( (This)->lpVtbl -> BreakForwardLink(This) ) 

#define TextFrame_ValidLinkTarget(This,TargetTextFrame,prop)	\
    ( (This)->lpVtbl -> ValidLinkTarget(This,TargetTextFrame,prop) ) 

#define TextFrame_get_AutoSize(This,prop)	\
    ( (This)->lpVtbl -> get_AutoSize(This,prop) ) 

#define TextFrame_put_AutoSize(This,prop)	\
    ( (This)->lpVtbl -> put_AutoSize(This,prop) ) 

#define TextFrame_get_WordWrap(This,prop)	\
    ( (This)->lpVtbl -> get_WordWrap(This,prop) ) 

#define TextFrame_put_WordWrap(This,prop)	\
    ( (This)->lpVtbl -> put_WordWrap(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TextFrame_INTERFACE_DEFINED__ */


#ifndef ___LetterContent_INTERFACE_DEFINED__
#define ___LetterContent_INTERFACE_DEFINED__

/* interface _LetterContent */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][version][uuid] */ 


EXTERN_C const IID IID__LetterContent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209A1-0000-0000-C000-000000000046")
    _LetterContent : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Duplicate( 
            /* [retval][out] */ _LetterContent **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DateFormat( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DateFormat( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IncludeHeaderFooter( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IncludeHeaderFooter( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageDesign( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageDesign( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LetterStyle( 
            /* [retval][out] */ WdLetterStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LetterStyle( 
            /* [in] */ WdLetterStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Letterhead( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Letterhead( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LetterheadLocation( 
            /* [retval][out] */ WdLetterheadLocation *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LetterheadLocation( 
            /* [in] */ WdLetterheadLocation prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LetterheadSize( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LetterheadSize( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RecipientName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RecipientName( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RecipientAddress( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RecipientAddress( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Salutation( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Salutation( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SalutationType( 
            /* [retval][out] */ WdSalutationType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SalutationType( 
            /* [in] */ WdSalutationType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RecipientReference( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RecipientReference( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MailingInstructions( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MailingInstructions( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AttentionLine( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AttentionLine( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Subject( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Subject( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnclosureNumber( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EnclosureNumber( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CCList( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CCList( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReturnAddress( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReturnAddress( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SenderName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SenderName( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Closing( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Closing( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SenderCompany( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SenderCompany( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SenderJobTitle( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SenderJobTitle( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SenderInitials( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SenderInitials( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoBlock( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InfoBlock( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RecipientCode( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RecipientCode( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RecipientGender( 
            /* [retval][out] */ WdSalutationGender *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RecipientGender( 
            /* [in] */ WdSalutationGender prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReturnAddressShortForm( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReturnAddressShortForm( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SenderCity( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SenderCity( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SenderCode( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SenderCode( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SenderGender( 
            /* [retval][out] */ WdSalutationGender *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SenderGender( 
            /* [in] */ WdSalutationGender prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SenderReference( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SenderReference( 
            /* [in] */ BSTR prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _LetterContentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _LetterContent * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _LetterContent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _LetterContent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _LetterContent * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _LetterContent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _LetterContent * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _LetterContent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            _LetterContent * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            _LetterContent * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _LetterContent * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Duplicate )( 
            _LetterContent * This,
            /* [retval][out] */ _LetterContent **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DateFormat )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DateFormat )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IncludeHeaderFooter )( 
            _LetterContent * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IncludeHeaderFooter )( 
            _LetterContent * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageDesign )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageDesign )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LetterStyle )( 
            _LetterContent * This,
            /* [retval][out] */ WdLetterStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LetterStyle )( 
            _LetterContent * This,
            /* [in] */ WdLetterStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Letterhead )( 
            _LetterContent * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Letterhead )( 
            _LetterContent * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LetterheadLocation )( 
            _LetterContent * This,
            /* [retval][out] */ WdLetterheadLocation *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LetterheadLocation )( 
            _LetterContent * This,
            /* [in] */ WdLetterheadLocation prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LetterheadSize )( 
            _LetterContent * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LetterheadSize )( 
            _LetterContent * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecipientName )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RecipientName )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecipientAddress )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RecipientAddress )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Salutation )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Salutation )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SalutationType )( 
            _LetterContent * This,
            /* [retval][out] */ WdSalutationType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SalutationType )( 
            _LetterContent * This,
            /* [in] */ WdSalutationType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecipientReference )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RecipientReference )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MailingInstructions )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MailingInstructions )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AttentionLine )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AttentionLine )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Subject )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Subject )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnclosureNumber )( 
            _LetterContent * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnclosureNumber )( 
            _LetterContent * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CCList )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CCList )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReturnAddress )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReturnAddress )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SenderName )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SenderName )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Closing )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Closing )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SenderCompany )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SenderCompany )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SenderJobTitle )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SenderJobTitle )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SenderInitials )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SenderInitials )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoBlock )( 
            _LetterContent * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InfoBlock )( 
            _LetterContent * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecipientCode )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RecipientCode )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RecipientGender )( 
            _LetterContent * This,
            /* [retval][out] */ WdSalutationGender *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RecipientGender )( 
            _LetterContent * This,
            /* [in] */ WdSalutationGender prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReturnAddressShortForm )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReturnAddressShortForm )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SenderCity )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SenderCity )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SenderCode )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SenderCode )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SenderGender )( 
            _LetterContent * This,
            /* [retval][out] */ WdSalutationGender *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SenderGender )( 
            _LetterContent * This,
            /* [in] */ WdSalutationGender prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SenderReference )( 
            _LetterContent * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SenderReference )( 
            _LetterContent * This,
            /* [in] */ BSTR prop);
        
        END_INTERFACE
    } _LetterContentVtbl;

    interface _LetterContent
    {
        CONST_VTBL struct _LetterContentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _LetterContent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _LetterContent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _LetterContent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _LetterContent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _LetterContent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _LetterContent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _LetterContent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define _LetterContent_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define _LetterContent_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define _LetterContent_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define _LetterContent_get_Duplicate(This,prop)	\
    ( (This)->lpVtbl -> get_Duplicate(This,prop) ) 

#define _LetterContent_get_DateFormat(This,prop)	\
    ( (This)->lpVtbl -> get_DateFormat(This,prop) ) 

#define _LetterContent_put_DateFormat(This,prop)	\
    ( (This)->lpVtbl -> put_DateFormat(This,prop) ) 

#define _LetterContent_get_IncludeHeaderFooter(This,prop)	\
    ( (This)->lpVtbl -> get_IncludeHeaderFooter(This,prop) ) 

#define _LetterContent_put_IncludeHeaderFooter(This,prop)	\
    ( (This)->lpVtbl -> put_IncludeHeaderFooter(This,prop) ) 

#define _LetterContent_get_PageDesign(This,prop)	\
    ( (This)->lpVtbl -> get_PageDesign(This,prop) ) 

#define _LetterContent_put_PageDesign(This,prop)	\
    ( (This)->lpVtbl -> put_PageDesign(This,prop) ) 

#define _LetterContent_get_LetterStyle(This,prop)	\
    ( (This)->lpVtbl -> get_LetterStyle(This,prop) ) 

#define _LetterContent_put_LetterStyle(This,prop)	\
    ( (This)->lpVtbl -> put_LetterStyle(This,prop) ) 

#define _LetterContent_get_Letterhead(This,prop)	\
    ( (This)->lpVtbl -> get_Letterhead(This,prop) ) 

#define _LetterContent_put_Letterhead(This,prop)	\
    ( (This)->lpVtbl -> put_Letterhead(This,prop) ) 

#define _LetterContent_get_LetterheadLocation(This,prop)	\
    ( (This)->lpVtbl -> get_LetterheadLocation(This,prop) ) 

#define _LetterContent_put_LetterheadLocation(This,prop)	\
    ( (This)->lpVtbl -> put_LetterheadLocation(This,prop) ) 

#define _LetterContent_get_LetterheadSize(This,prop)	\
    ( (This)->lpVtbl -> get_LetterheadSize(This,prop) ) 

#define _LetterContent_put_LetterheadSize(This,prop)	\
    ( (This)->lpVtbl -> put_LetterheadSize(This,prop) ) 

#define _LetterContent_get_RecipientName(This,prop)	\
    ( (This)->lpVtbl -> get_RecipientName(This,prop) ) 

#define _LetterContent_put_RecipientName(This,prop)	\
    ( (This)->lpVtbl -> put_RecipientName(This,prop) ) 

#define _LetterContent_get_RecipientAddress(This,prop)	\
    ( (This)->lpVtbl -> get_RecipientAddress(This,prop) ) 

#define _LetterContent_put_RecipientAddress(This,prop)	\
    ( (This)->lpVtbl -> put_RecipientAddress(This,prop) ) 

#define _LetterContent_get_Salutation(This,prop)	\
    ( (This)->lpVtbl -> get_Salutation(This,prop) ) 

#define _LetterContent_put_Salutation(This,prop)	\
    ( (This)->lpVtbl -> put_Salutation(This,prop) ) 

#define _LetterContent_get_SalutationType(This,prop)	\
    ( (This)->lpVtbl -> get_SalutationType(This,prop) ) 

#define _LetterContent_put_SalutationType(This,prop)	\
    ( (This)->lpVtbl -> put_SalutationType(This,prop) ) 

#define _LetterContent_get_RecipientReference(This,prop)	\
    ( (This)->lpVtbl -> get_RecipientReference(This,prop) ) 

#define _LetterContent_put_RecipientReference(This,prop)	\
    ( (This)->lpVtbl -> put_RecipientReference(This,prop) ) 

#define _LetterContent_get_MailingInstructions(This,prop)	\
    ( (This)->lpVtbl -> get_MailingInstructions(This,prop) ) 

#define _LetterContent_put_MailingInstructions(This,prop)	\
    ( (This)->lpVtbl -> put_MailingInstructions(This,prop) ) 

#define _LetterContent_get_AttentionLine(This,prop)	\
    ( (This)->lpVtbl -> get_AttentionLine(This,prop) ) 

#define _LetterContent_put_AttentionLine(This,prop)	\
    ( (This)->lpVtbl -> put_AttentionLine(This,prop) ) 

#define _LetterContent_get_Subject(This,prop)	\
    ( (This)->lpVtbl -> get_Subject(This,prop) ) 

#define _LetterContent_put_Subject(This,prop)	\
    ( (This)->lpVtbl -> put_Subject(This,prop) ) 

#define _LetterContent_get_EnclosureNumber(This,prop)	\
    ( (This)->lpVtbl -> get_EnclosureNumber(This,prop) ) 

#define _LetterContent_put_EnclosureNumber(This,prop)	\
    ( (This)->lpVtbl -> put_EnclosureNumber(This,prop) ) 

#define _LetterContent_get_CCList(This,prop)	\
    ( (This)->lpVtbl -> get_CCList(This,prop) ) 

#define _LetterContent_put_CCList(This,prop)	\
    ( (This)->lpVtbl -> put_CCList(This,prop) ) 

#define _LetterContent_get_ReturnAddress(This,prop)	\
    ( (This)->lpVtbl -> get_ReturnAddress(This,prop) ) 

#define _LetterContent_put_ReturnAddress(This,prop)	\
    ( (This)->lpVtbl -> put_ReturnAddress(This,prop) ) 

#define _LetterContent_get_SenderName(This,prop)	\
    ( (This)->lpVtbl -> get_SenderName(This,prop) ) 

#define _LetterContent_put_SenderName(This,prop)	\
    ( (This)->lpVtbl -> put_SenderName(This,prop) ) 

#define _LetterContent_get_Closing(This,prop)	\
    ( (This)->lpVtbl -> get_Closing(This,prop) ) 

#define _LetterContent_put_Closing(This,prop)	\
    ( (This)->lpVtbl -> put_Closing(This,prop) ) 

#define _LetterContent_get_SenderCompany(This,prop)	\
    ( (This)->lpVtbl -> get_SenderCompany(This,prop) ) 

#define _LetterContent_put_SenderCompany(This,prop)	\
    ( (This)->lpVtbl -> put_SenderCompany(This,prop) ) 

#define _LetterContent_get_SenderJobTitle(This,prop)	\
    ( (This)->lpVtbl -> get_SenderJobTitle(This,prop) ) 

#define _LetterContent_put_SenderJobTitle(This,prop)	\
    ( (This)->lpVtbl -> put_SenderJobTitle(This,prop) ) 

#define _LetterContent_get_SenderInitials(This,prop)	\
    ( (This)->lpVtbl -> get_SenderInitials(This,prop) ) 

#define _LetterContent_put_SenderInitials(This,prop)	\
    ( (This)->lpVtbl -> put_SenderInitials(This,prop) ) 

#define _LetterContent_get_InfoBlock(This,prop)	\
    ( (This)->lpVtbl -> get_InfoBlock(This,prop) ) 

#define _LetterContent_put_InfoBlock(This,prop)	\
    ( (This)->lpVtbl -> put_InfoBlock(This,prop) ) 

#define _LetterContent_get_RecipientCode(This,prop)	\
    ( (This)->lpVtbl -> get_RecipientCode(This,prop) ) 

#define _LetterContent_put_RecipientCode(This,prop)	\
    ( (This)->lpVtbl -> put_RecipientCode(This,prop) ) 

#define _LetterContent_get_RecipientGender(This,prop)	\
    ( (This)->lpVtbl -> get_RecipientGender(This,prop) ) 

#define _LetterContent_put_RecipientGender(This,prop)	\
    ( (This)->lpVtbl -> put_RecipientGender(This,prop) ) 

#define _LetterContent_get_ReturnAddressShortForm(This,prop)	\
    ( (This)->lpVtbl -> get_ReturnAddressShortForm(This,prop) ) 

#define _LetterContent_put_ReturnAddressShortForm(This,prop)	\
    ( (This)->lpVtbl -> put_ReturnAddressShortForm(This,prop) ) 

#define _LetterContent_get_SenderCity(This,prop)	\
    ( (This)->lpVtbl -> get_SenderCity(This,prop) ) 

#define _LetterContent_put_SenderCity(This,prop)	\
    ( (This)->lpVtbl -> put_SenderCity(This,prop) ) 

#define _LetterContent_get_SenderCode(This,prop)	\
    ( (This)->lpVtbl -> get_SenderCode(This,prop) ) 

#define _LetterContent_put_SenderCode(This,prop)	\
    ( (This)->lpVtbl -> put_SenderCode(This,prop) ) 

#define _LetterContent_get_SenderGender(This,prop)	\
    ( (This)->lpVtbl -> get_SenderGender(This,prop) ) 

#define _LetterContent_put_SenderGender(This,prop)	\
    ( (This)->lpVtbl -> put_SenderGender(This,prop) ) 

#define _LetterContent_get_SenderReference(This,prop)	\
    ( (This)->lpVtbl -> get_SenderReference(This,prop) ) 

#define _LetterContent_put_SenderReference(This,prop)	\
    ( (This)->lpVtbl -> put_SenderReference(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___LetterContent_INTERFACE_DEFINED__ */


#ifndef __View_INTERFACE_DEFINED__
#define __View_INTERFACE_DEFINED__

/* interface View */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_View;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209A5-0000-0000-C000-000000000046")
    View : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdViewType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ WdViewType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullScreen( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FullScreen( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Draft( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Draft( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowAll( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowAll( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowFieldCodes( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowFieldCodes( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MailMergeDataView( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MailMergeDataView( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Magnifier( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Magnifier( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowFirstLineOnly( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowFirstLineOnly( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowFormat( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowFormat( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Zoom( 
            /* [retval][out] */ Zoom **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowObjectAnchors( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowObjectAnchors( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowTextBoundaries( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowTextBoundaries( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowHighlight( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowHighlight( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowDrawings( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowDrawings( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowTabs( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowTabs( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowSpaces( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowSpaces( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowParagraphs( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowParagraphs( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowHyphens( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowHyphens( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowHiddenText( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowHiddenText( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WrapToWindow( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WrapToWindow( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowPicturePlaceHolders( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowPicturePlaceHolders( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowBookmarks( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowBookmarks( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FieldShading( 
            /* [retval][out] */ WdFieldShading *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FieldShading( 
            /* [in] */ WdFieldShading prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowAnimation( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowAnimation( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TableGridlines( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TableGridlines( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnlargeFontsLessThan( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_EnlargeFontsLessThan( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowMainTextLayer( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowMainTextLayer( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SeekView( 
            /* [retval][out] */ WdSeekView *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SeekView( 
            /* [in] */ WdSeekView prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SplitSpecial( 
            /* [retval][out] */ WdSpecialPane *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SplitSpecial( 
            /* [in] */ WdSpecialPane prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_BrowseToWindow( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_BrowseToWindow( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowOptionalBreaks( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowOptionalBreaks( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CollapseOutline( 
            /* [optional][in] */ VARIANT *Range) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExpandOutline( 
            /* [optional][in] */ VARIANT *Range) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ShowAllHeadings( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ShowHeading( 
            /* [in] */ long Level) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PreviousHeaderFooter( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextHeaderFooter( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayPageBoundaries( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayPageBoundaries( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplaySmartTags( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplaySmartTags( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowRevisionsAndComments( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowRevisionsAndComments( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowComments( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowComments( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowInsertionsAndDeletions( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowInsertionsAndDeletions( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowFormatChanges( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowFormatChanges( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RevisionsView( 
            /* [retval][out] */ WdRevisionsView *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RevisionsView( 
            /* [in] */ WdRevisionsView prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RevisionsMode( 
            /* [retval][out] */ WdRevisionsMode *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RevisionsMode( 
            /* [in] */ WdRevisionsMode prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RevisionsBalloonWidth( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RevisionsBalloonWidth( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RevisionsBalloonWidthType( 
            /* [retval][out] */ WdRevisionsBalloonWidthType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RevisionsBalloonWidthType( 
            /* [in] */ WdRevisionsBalloonWidthType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RevisionsBalloonSide( 
            /* [retval][out] */ WdRevisionsBalloonMargin *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RevisionsBalloonSide( 
            /* [in] */ WdRevisionsBalloonMargin prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Reviewers( 
            /* [retval][out] */ Reviewers **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RevisionsBalloonShowConnectingLines( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RevisionsBalloonShowConnectingLines( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadingLayout( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadingLayout( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowXMLMarkup( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowXMLMarkup( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShadeEditableRanges( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShadeEditableRanges( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowInkAnnotations( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowInkAnnotations( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayBackgrounds( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayBackgrounds( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadingLayoutActualView( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadingLayoutActualView( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadingLayoutAllowMultiplePages( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadingLayoutAllowMultiplePages( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            View * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            View * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            View * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            View * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            View * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            View * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            View * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            View * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            View * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            View * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            View * This,
            /* [retval][out] */ WdViewType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            View * This,
            /* [in] */ WdViewType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullScreen )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FullScreen )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Draft )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Draft )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowAll )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowAll )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowFieldCodes )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowFieldCodes )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MailMergeDataView )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MailMergeDataView )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Magnifier )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Magnifier )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowFirstLineOnly )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowFirstLineOnly )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowFormat )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowFormat )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Zoom )( 
            View * This,
            /* [retval][out] */ Zoom **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowObjectAnchors )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowObjectAnchors )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowTextBoundaries )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowTextBoundaries )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowHighlight )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowHighlight )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowDrawings )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowDrawings )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowTabs )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowTabs )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowSpaces )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowSpaces )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowParagraphs )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowParagraphs )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowHyphens )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowHyphens )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowHiddenText )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowHiddenText )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WrapToWindow )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WrapToWindow )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowPicturePlaceHolders )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowPicturePlaceHolders )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowBookmarks )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowBookmarks )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FieldShading )( 
            View * This,
            /* [retval][out] */ WdFieldShading *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FieldShading )( 
            View * This,
            /* [in] */ WdFieldShading prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowAnimation )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowAnimation )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TableGridlines )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TableGridlines )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnlargeFontsLessThan )( 
            View * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnlargeFontsLessThan )( 
            View * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowMainTextLayer )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowMainTextLayer )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SeekView )( 
            View * This,
            /* [retval][out] */ WdSeekView *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SeekView )( 
            View * This,
            /* [in] */ WdSeekView prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SplitSpecial )( 
            View * This,
            /* [retval][out] */ WdSpecialPane *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SplitSpecial )( 
            View * This,
            /* [in] */ WdSpecialPane prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BrowseToWindow )( 
            View * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BrowseToWindow )( 
            View * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowOptionalBreaks )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowOptionalBreaks )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CollapseOutline )( 
            View * This,
            /* [optional][in] */ VARIANT *Range);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExpandOutline )( 
            View * This,
            /* [optional][in] */ VARIANT *Range);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ShowAllHeadings )( 
            View * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ShowHeading )( 
            View * This,
            /* [in] */ long Level);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PreviousHeaderFooter )( 
            View * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextHeaderFooter )( 
            View * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayPageBoundaries )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayPageBoundaries )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplaySmartTags )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplaySmartTags )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowRevisionsAndComments )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowRevisionsAndComments )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowComments )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowComments )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowInsertionsAndDeletions )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowInsertionsAndDeletions )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowFormatChanges )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowFormatChanges )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RevisionsView )( 
            View * This,
            /* [retval][out] */ WdRevisionsView *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RevisionsView )( 
            View * This,
            /* [in] */ WdRevisionsView prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RevisionsMode )( 
            View * This,
            /* [retval][out] */ WdRevisionsMode *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RevisionsMode )( 
            View * This,
            /* [in] */ WdRevisionsMode prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RevisionsBalloonWidth )( 
            View * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RevisionsBalloonWidth )( 
            View * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RevisionsBalloonWidthType )( 
            View * This,
            /* [retval][out] */ WdRevisionsBalloonWidthType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RevisionsBalloonWidthType )( 
            View * This,
            /* [in] */ WdRevisionsBalloonWidthType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RevisionsBalloonSide )( 
            View * This,
            /* [retval][out] */ WdRevisionsBalloonMargin *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RevisionsBalloonSide )( 
            View * This,
            /* [in] */ WdRevisionsBalloonMargin prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Reviewers )( 
            View * This,
            /* [retval][out] */ Reviewers **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RevisionsBalloonShowConnectingLines )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RevisionsBalloonShowConnectingLines )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingLayout )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingLayout )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowXMLMarkup )( 
            View * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowXMLMarkup )( 
            View * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShadeEditableRanges )( 
            View * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShadeEditableRanges )( 
            View * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowInkAnnotations )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowInkAnnotations )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayBackgrounds )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayBackgrounds )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingLayoutActualView )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingLayoutActualView )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadingLayoutAllowMultiplePages )( 
            View * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadingLayoutAllowMultiplePages )( 
            View * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } ViewVtbl;

    interface View
    {
        CONST_VTBL struct ViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define View_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define View_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define View_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define View_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define View_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define View_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define View_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define View_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define View_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define View_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define View_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define View_put_Type(This,prop)	\
    ( (This)->lpVtbl -> put_Type(This,prop) ) 

#define View_get_FullScreen(This,prop)	\
    ( (This)->lpVtbl -> get_FullScreen(This,prop) ) 

#define View_put_FullScreen(This,prop)	\
    ( (This)->lpVtbl -> put_FullScreen(This,prop) ) 

#define View_get_Draft(This,prop)	\
    ( (This)->lpVtbl -> get_Draft(This,prop) ) 

#define View_put_Draft(This,prop)	\
    ( (This)->lpVtbl -> put_Draft(This,prop) ) 

#define View_get_ShowAll(This,prop)	\
    ( (This)->lpVtbl -> get_ShowAll(This,prop) ) 

#define View_put_ShowAll(This,prop)	\
    ( (This)->lpVtbl -> put_ShowAll(This,prop) ) 

#define View_get_ShowFieldCodes(This,prop)	\
    ( (This)->lpVtbl -> get_ShowFieldCodes(This,prop) ) 

#define View_put_ShowFieldCodes(This,prop)	\
    ( (This)->lpVtbl -> put_ShowFieldCodes(This,prop) ) 

#define View_get_MailMergeDataView(This,prop)	\
    ( (This)->lpVtbl -> get_MailMergeDataView(This,prop) ) 

#define View_put_MailMergeDataView(This,prop)	\
    ( (This)->lpVtbl -> put_MailMergeDataView(This,prop) ) 

#define View_get_Magnifier(This,prop)	\
    ( (This)->lpVtbl -> get_Magnifier(This,prop) ) 

#define View_put_Magnifier(This,prop)	\
    ( (This)->lpVtbl -> put_Magnifier(This,prop) ) 

#define View_get_ShowFirstLineOnly(This,prop)	\
    ( (This)->lpVtbl -> get_ShowFirstLineOnly(This,prop) ) 

#define View_put_ShowFirstLineOnly(This,prop)	\
    ( (This)->lpVtbl -> put_ShowFirstLineOnly(This,prop) ) 

#define View_get_ShowFormat(This,prop)	\
    ( (This)->lpVtbl -> get_ShowFormat(This,prop) ) 

#define View_put_ShowFormat(This,prop)	\
    ( (This)->lpVtbl -> put_ShowFormat(This,prop) ) 

#define View_get_Zoom(This,prop)	\
    ( (This)->lpVtbl -> get_Zoom(This,prop) ) 

#define View_get_ShowObjectAnchors(This,prop)	\
    ( (This)->lpVtbl -> get_ShowObjectAnchors(This,prop) ) 

#define View_put_ShowObjectAnchors(This,prop)	\
    ( (This)->lpVtbl -> put_ShowObjectAnchors(This,prop) ) 

#define View_get_ShowTextBoundaries(This,prop)	\
    ( (This)->lpVtbl -> get_ShowTextBoundaries(This,prop) ) 

#define View_put_ShowTextBoundaries(This,prop)	\
    ( (This)->lpVtbl -> put_ShowTextBoundaries(This,prop) ) 

#define View_get_ShowHighlight(This,prop)	\
    ( (This)->lpVtbl -> get_ShowHighlight(This,prop) ) 

#define View_put_ShowHighlight(This,prop)	\
    ( (This)->lpVtbl -> put_ShowHighlight(This,prop) ) 

#define View_get_ShowDrawings(This,prop)	\
    ( (This)->lpVtbl -> get_ShowDrawings(This,prop) ) 

#define View_put_ShowDrawings(This,prop)	\
    ( (This)->lpVtbl -> put_ShowDrawings(This,prop) ) 

#define View_get_ShowTabs(This,prop)	\
    ( (This)->lpVtbl -> get_ShowTabs(This,prop) ) 

#define View_put_ShowTabs(This,prop)	\
    ( (This)->lpVtbl -> put_ShowTabs(This,prop) ) 

#define View_get_ShowSpaces(This,prop)	\
    ( (This)->lpVtbl -> get_ShowSpaces(This,prop) ) 

#define View_put_ShowSpaces(This,prop)	\
    ( (This)->lpVtbl -> put_ShowSpaces(This,prop) ) 

#define View_get_ShowParagraphs(This,prop)	\
    ( (This)->lpVtbl -> get_ShowParagraphs(This,prop) ) 

#define View_put_ShowParagraphs(This,prop)	\
    ( (This)->lpVtbl -> put_ShowParagraphs(This,prop) ) 

#define View_get_ShowHyphens(This,prop)	\
    ( (This)->lpVtbl -> get_ShowHyphens(This,prop) ) 

#define View_put_ShowHyphens(This,prop)	\
    ( (This)->lpVtbl -> put_ShowHyphens(This,prop) ) 

#define View_get_ShowHiddenText(This,prop)	\
    ( (This)->lpVtbl -> get_ShowHiddenText(This,prop) ) 

#define View_put_ShowHiddenText(This,prop)	\
    ( (This)->lpVtbl -> put_ShowHiddenText(This,prop) ) 

#define View_get_WrapToWindow(This,prop)	\
    ( (This)->lpVtbl -> get_WrapToWindow(This,prop) ) 

#define View_put_WrapToWindow(This,prop)	\
    ( (This)->lpVtbl -> put_WrapToWindow(This,prop) ) 

#define View_get_ShowPicturePlaceHolders(This,prop)	\
    ( (This)->lpVtbl -> get_ShowPicturePlaceHolders(This,prop) ) 

#define View_put_ShowPicturePlaceHolders(This,prop)	\
    ( (This)->lpVtbl -> put_ShowPicturePlaceHolders(This,prop) ) 

#define View_get_ShowBookmarks(This,prop)	\
    ( (This)->lpVtbl -> get_ShowBookmarks(This,prop) ) 

#define View_put_ShowBookmarks(This,prop)	\
    ( (This)->lpVtbl -> put_ShowBookmarks(This,prop) ) 

#define View_get_FieldShading(This,prop)	\
    ( (This)->lpVtbl -> get_FieldShading(This,prop) ) 

#define View_put_FieldShading(This,prop)	\
    ( (This)->lpVtbl -> put_FieldShading(This,prop) ) 

#define View_get_ShowAnimation(This,prop)	\
    ( (This)->lpVtbl -> get_ShowAnimation(This,prop) ) 

#define View_put_ShowAnimation(This,prop)	\
    ( (This)->lpVtbl -> put_ShowAnimation(This,prop) ) 

#define View_get_TableGridlines(This,prop)	\
    ( (This)->lpVtbl -> get_TableGridlines(This,prop) ) 

#define View_put_TableGridlines(This,prop)	\
    ( (This)->lpVtbl -> put_TableGridlines(This,prop) ) 

#define View_get_EnlargeFontsLessThan(This,prop)	\
    ( (This)->lpVtbl -> get_EnlargeFontsLessThan(This,prop) ) 

#define View_put_EnlargeFontsLessThan(This,prop)	\
    ( (This)->lpVtbl -> put_EnlargeFontsLessThan(This,prop) ) 

#define View_get_ShowMainTextLayer(This,prop)	\
    ( (This)->lpVtbl -> get_ShowMainTextLayer(This,prop) ) 

#define View_put_ShowMainTextLayer(This,prop)	\
    ( (This)->lpVtbl -> put_ShowMainTextLayer(This,prop) ) 

#define View_get_SeekView(This,prop)	\
    ( (This)->lpVtbl -> get_SeekView(This,prop) ) 

#define View_put_SeekView(This,prop)	\
    ( (This)->lpVtbl -> put_SeekView(This,prop) ) 

#define View_get_SplitSpecial(This,prop)	\
    ( (This)->lpVtbl -> get_SplitSpecial(This,prop) ) 

#define View_put_SplitSpecial(This,prop)	\
    ( (This)->lpVtbl -> put_SplitSpecial(This,prop) ) 

#define View_get_BrowseToWindow(This,prop)	\
    ( (This)->lpVtbl -> get_BrowseToWindow(This,prop) ) 

#define View_put_BrowseToWindow(This,prop)	\
    ( (This)->lpVtbl -> put_BrowseToWindow(This,prop) ) 

#define View_get_ShowOptionalBreaks(This,prop)	\
    ( (This)->lpVtbl -> get_ShowOptionalBreaks(This,prop) ) 

#define View_put_ShowOptionalBreaks(This,prop)	\
    ( (This)->lpVtbl -> put_ShowOptionalBreaks(This,prop) ) 

#define View_CollapseOutline(This,Range)	\
    ( (This)->lpVtbl -> CollapseOutline(This,Range) ) 

#define View_ExpandOutline(This,Range)	\
    ( (This)->lpVtbl -> ExpandOutline(This,Range) ) 

#define View_ShowAllHeadings(This)	\
    ( (This)->lpVtbl -> ShowAllHeadings(This) ) 

#define View_ShowHeading(This,Level)	\
    ( (This)->lpVtbl -> ShowHeading(This,Level) ) 

#define View_PreviousHeaderFooter(This)	\
    ( (This)->lpVtbl -> PreviousHeaderFooter(This) ) 

#define View_NextHeaderFooter(This)	\
    ( (This)->lpVtbl -> NextHeaderFooter(This) ) 

#define View_get_DisplayPageBoundaries(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayPageBoundaries(This,prop) ) 

#define View_put_DisplayPageBoundaries(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayPageBoundaries(This,prop) ) 

#define View_get_DisplaySmartTags(This,prop)	\
    ( (This)->lpVtbl -> get_DisplaySmartTags(This,prop) ) 

#define View_put_DisplaySmartTags(This,prop)	\
    ( (This)->lpVtbl -> put_DisplaySmartTags(This,prop) ) 

#define View_get_ShowRevisionsAndComments(This,prop)	\
    ( (This)->lpVtbl -> get_ShowRevisionsAndComments(This,prop) ) 

#define View_put_ShowRevisionsAndComments(This,prop)	\
    ( (This)->lpVtbl -> put_ShowRevisionsAndComments(This,prop) ) 

#define View_get_ShowComments(This,prop)	\
    ( (This)->lpVtbl -> get_ShowComments(This,prop) ) 

#define View_put_ShowComments(This,prop)	\
    ( (This)->lpVtbl -> put_ShowComments(This,prop) ) 

#define View_get_ShowInsertionsAndDeletions(This,prop)	\
    ( (This)->lpVtbl -> get_ShowInsertionsAndDeletions(This,prop) ) 

#define View_put_ShowInsertionsAndDeletions(This,prop)	\
    ( (This)->lpVtbl -> put_ShowInsertionsAndDeletions(This,prop) ) 

#define View_get_ShowFormatChanges(This,prop)	\
    ( (This)->lpVtbl -> get_ShowFormatChanges(This,prop) ) 

#define View_put_ShowFormatChanges(This,prop)	\
    ( (This)->lpVtbl -> put_ShowFormatChanges(This,prop) ) 

#define View_get_RevisionsView(This,prop)	\
    ( (This)->lpVtbl -> get_RevisionsView(This,prop) ) 

#define View_put_RevisionsView(This,prop)	\
    ( (This)->lpVtbl -> put_RevisionsView(This,prop) ) 

#define View_get_RevisionsMode(This,prop)	\
    ( (This)->lpVtbl -> get_RevisionsMode(This,prop) ) 

#define View_put_RevisionsMode(This,prop)	\
    ( (This)->lpVtbl -> put_RevisionsMode(This,prop) ) 

#define View_get_RevisionsBalloonWidth(This,prop)	\
    ( (This)->lpVtbl -> get_RevisionsBalloonWidth(This,prop) ) 

#define View_put_RevisionsBalloonWidth(This,prop)	\
    ( (This)->lpVtbl -> put_RevisionsBalloonWidth(This,prop) ) 

#define View_get_RevisionsBalloonWidthType(This,prop)	\
    ( (This)->lpVtbl -> get_RevisionsBalloonWidthType(This,prop) ) 

#define View_put_RevisionsBalloonWidthType(This,prop)	\
    ( (This)->lpVtbl -> put_RevisionsBalloonWidthType(This,prop) ) 

#define View_get_RevisionsBalloonSide(This,prop)	\
    ( (This)->lpVtbl -> get_RevisionsBalloonSide(This,prop) ) 

#define View_put_RevisionsBalloonSide(This,prop)	\
    ( (This)->lpVtbl -> put_RevisionsBalloonSide(This,prop) ) 

#define View_get_Reviewers(This,prop)	\
    ( (This)->lpVtbl -> get_Reviewers(This,prop) ) 

#define View_get_RevisionsBalloonShowConnectingLines(This,prop)	\
    ( (This)->lpVtbl -> get_RevisionsBalloonShowConnectingLines(This,prop) ) 

#define View_put_RevisionsBalloonShowConnectingLines(This,prop)	\
    ( (This)->lpVtbl -> put_RevisionsBalloonShowConnectingLines(This,prop) ) 

#define View_get_ReadingLayout(This,prop)	\
    ( (This)->lpVtbl -> get_ReadingLayout(This,prop) ) 

#define View_put_ReadingLayout(This,prop)	\
    ( (This)->lpVtbl -> put_ReadingLayout(This,prop) ) 

#define View_get_ShowXMLMarkup(This,prop)	\
    ( (This)->lpVtbl -> get_ShowXMLMarkup(This,prop) ) 

#define View_put_ShowXMLMarkup(This,prop)	\
    ( (This)->lpVtbl -> put_ShowXMLMarkup(This,prop) ) 

#define View_get_ShadeEditableRanges(This,prop)	\
    ( (This)->lpVtbl -> get_ShadeEditableRanges(This,prop) ) 

#define View_put_ShadeEditableRanges(This,prop)	\
    ( (This)->lpVtbl -> put_ShadeEditableRanges(This,prop) ) 

#define View_get_ShowInkAnnotations(This,prop)	\
    ( (This)->lpVtbl -> get_ShowInkAnnotations(This,prop) ) 

#define View_put_ShowInkAnnotations(This,prop)	\
    ( (This)->lpVtbl -> put_ShowInkAnnotations(This,prop) ) 

#define View_get_DisplayBackgrounds(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayBackgrounds(This,prop) ) 

#define View_put_DisplayBackgrounds(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayBackgrounds(This,prop) ) 

#define View_get_ReadingLayoutActualView(This,prop)	\
    ( (This)->lpVtbl -> get_ReadingLayoutActualView(This,prop) ) 

#define View_put_ReadingLayoutActualView(This,prop)	\
    ( (This)->lpVtbl -> put_ReadingLayoutActualView(This,prop) ) 

#define View_get_ReadingLayoutAllowMultiplePages(This,prop)	\
    ( (This)->lpVtbl -> get_ReadingLayoutAllowMultiplePages(This,prop) ) 

#define View_put_ReadingLayoutAllowMultiplePages(This,prop)	\
    ( (This)->lpVtbl -> put_ReadingLayoutAllowMultiplePages(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __View_INTERFACE_DEFINED__ */


#ifndef __Zoom_INTERFACE_DEFINED__
#define __Zoom_INTERFACE_DEFINED__

/* interface Zoom */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Zoom;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209A6-0000-0000-C000-000000000046")
    Zoom : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Percentage( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Percentage( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageFit( 
            /* [retval][out] */ WdPageFit *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageFit( 
            /* [in] */ WdPageFit prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageRows( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageRows( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageColumns( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PageColumns( 
            /* [in] */ long prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ZoomVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Zoom * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Zoom * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Zoom * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Zoom * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Zoom * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Zoom * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Zoom * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Zoom * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Zoom * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Zoom * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Percentage )( 
            Zoom * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Percentage )( 
            Zoom * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageFit )( 
            Zoom * This,
            /* [retval][out] */ WdPageFit *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageFit )( 
            Zoom * This,
            /* [in] */ WdPageFit prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageRows )( 
            Zoom * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageRows )( 
            Zoom * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageColumns )( 
            Zoom * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PageColumns )( 
            Zoom * This,
            /* [in] */ long prop);
        
        END_INTERFACE
    } ZoomVtbl;

    interface Zoom
    {
        CONST_VTBL struct ZoomVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Zoom_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Zoom_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Zoom_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Zoom_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Zoom_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Zoom_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Zoom_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Zoom_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Zoom_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Zoom_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Zoom_get_Percentage(This,prop)	\
    ( (This)->lpVtbl -> get_Percentage(This,prop) ) 

#define Zoom_put_Percentage(This,prop)	\
    ( (This)->lpVtbl -> put_Percentage(This,prop) ) 

#define Zoom_get_PageFit(This,prop)	\
    ( (This)->lpVtbl -> get_PageFit(This,prop) ) 

#define Zoom_put_PageFit(This,prop)	\
    ( (This)->lpVtbl -> put_PageFit(This,prop) ) 

#define Zoom_get_PageRows(This,prop)	\
    ( (This)->lpVtbl -> get_PageRows(This,prop) ) 

#define Zoom_put_PageRows(This,prop)	\
    ( (This)->lpVtbl -> put_PageRows(This,prop) ) 

#define Zoom_get_PageColumns(This,prop)	\
    ( (This)->lpVtbl -> get_PageColumns(This,prop) ) 

#define Zoom_put_PageColumns(This,prop)	\
    ( (This)->lpVtbl -> put_PageColumns(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Zoom_INTERFACE_DEFINED__ */


#ifndef __Zooms_INTERFACE_DEFINED__
#define __Zooms_INTERFACE_DEFINED__

/* interface Zooms */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Zooms;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209A7-0000-0000-C000-000000000046")
    Zooms : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ WdViewType Index,
            /* [retval][out] */ Zoom **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ZoomsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Zooms * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Zooms * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Zooms * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Zooms * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Zooms * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Zooms * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Zooms * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Zooms * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Zooms * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Zooms * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Zooms * This,
            /* [in] */ WdViewType Index,
            /* [retval][out] */ Zoom **prop);
        
        END_INTERFACE
    } ZoomsVtbl;

    interface Zooms
    {
        CONST_VTBL struct ZoomsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Zooms_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Zooms_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Zooms_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Zooms_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Zooms_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Zooms_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Zooms_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Zooms_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Zooms_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Zooms_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Zooms_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Zooms_INTERFACE_DEFINED__ */


#ifndef __InlineShape_INTERFACE_DEFINED__
#define __InlineShape_INTERFACE_DEFINED__

/* interface InlineShape */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_InlineShape;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209A8-0000-0000-C000-000000000046")
    InlineShape : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinkFormat( 
            /* [retval][out] */ LinkFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Field( 
            /* [retval][out] */ Field **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OLEFormat( 
            /* [retval][out] */ OLEFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdInlineShapeType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Hyperlink( 
            /* [retval][out] */ Hyperlink **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleHeight( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleHeight( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScaleWidth( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScaleWidth( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LockAspectRatio( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LockAspectRatio( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Line( 
            /* [retval][out] */ /* external definition not present */ LineFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fill( 
            /* [retval][out] */ /* external definition not present */ FillFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureFormat( 
            /* [retval][out] */ /* external definition not present */ PictureFormat **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PictureFormat( 
            /* [in] */ /* external definition not present */ PictureFormat *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToShape( 
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HorizontalLineFormat( 
            /* [retval][out] */ HorizontalLineFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Script( 
            /* [retval][out] */ /* external definition not present */ Script **prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_OWSAnchor( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextEffect( 
            /* [retval][out] */ /* external definition not present */ TextEffectFormat **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextEffect( 
            /* [in] */ /* external definition not present */ TextEffectFormat *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AlternativeText( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AlternativeText( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsPictureBullet( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct InlineShapeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            InlineShape * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            InlineShape * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            InlineShape * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            InlineShape * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            InlineShape * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            InlineShape * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            InlineShape * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            InlineShape * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            InlineShape * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            InlineShape * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            InlineShape * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            InlineShape * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            InlineShape * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinkFormat )( 
            InlineShape * This,
            /* [retval][out] */ LinkFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Field )( 
            InlineShape * This,
            /* [retval][out] */ Field **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OLEFormat )( 
            InlineShape * This,
            /* [retval][out] */ OLEFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            InlineShape * This,
            /* [retval][out] */ WdInlineShapeType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Hyperlink )( 
            InlineShape * This,
            /* [retval][out] */ Hyperlink **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            InlineShape * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            InlineShape * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            InlineShape * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            InlineShape * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleHeight )( 
            InlineShape * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleHeight )( 
            InlineShape * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScaleWidth )( 
            InlineShape * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScaleWidth )( 
            InlineShape * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LockAspectRatio )( 
            InlineShape * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LockAspectRatio )( 
            InlineShape * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            InlineShape * This,
            /* [retval][out] */ /* external definition not present */ LineFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fill )( 
            InlineShape * This,
            /* [retval][out] */ /* external definition not present */ FillFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureFormat )( 
            InlineShape * This,
            /* [retval][out] */ /* external definition not present */ PictureFormat **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PictureFormat )( 
            InlineShape * This,
            /* [in] */ /* external definition not present */ PictureFormat *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            InlineShape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            InlineShape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            InlineShape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            InlineShape * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToShape )( 
            InlineShape * This,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HorizontalLineFormat )( 
            InlineShape * This,
            /* [retval][out] */ HorizontalLineFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Script )( 
            InlineShape * This,
            /* [retval][out] */ /* external definition not present */ Script **prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OWSAnchor )( 
            InlineShape * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextEffect )( 
            InlineShape * This,
            /* [retval][out] */ /* external definition not present */ TextEffectFormat **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextEffect )( 
            InlineShape * This,
            /* [in] */ /* external definition not present */ TextEffectFormat *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AlternativeText )( 
            InlineShape * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AlternativeText )( 
            InlineShape * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsPictureBullet )( 
            InlineShape * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        END_INTERFACE
    } InlineShapeVtbl;

    interface InlineShape
    {
        CONST_VTBL struct InlineShapeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define InlineShape_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define InlineShape_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define InlineShape_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define InlineShape_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define InlineShape_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define InlineShape_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define InlineShape_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define InlineShape_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define InlineShape_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define InlineShape_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define InlineShape_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define InlineShape_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define InlineShape_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define InlineShape_get_LinkFormat(This,prop)	\
    ( (This)->lpVtbl -> get_LinkFormat(This,prop) ) 

#define InlineShape_get_Field(This,prop)	\
    ( (This)->lpVtbl -> get_Field(This,prop) ) 

#define InlineShape_get_OLEFormat(This,prop)	\
    ( (This)->lpVtbl -> get_OLEFormat(This,prop) ) 

#define InlineShape_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define InlineShape_get_Hyperlink(This,prop)	\
    ( (This)->lpVtbl -> get_Hyperlink(This,prop) ) 

#define InlineShape_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define InlineShape_put_Height(This,prop)	\
    ( (This)->lpVtbl -> put_Height(This,prop) ) 

#define InlineShape_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define InlineShape_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define InlineShape_get_ScaleHeight(This,prop)	\
    ( (This)->lpVtbl -> get_ScaleHeight(This,prop) ) 

#define InlineShape_put_ScaleHeight(This,prop)	\
    ( (This)->lpVtbl -> put_ScaleHeight(This,prop) ) 

#define InlineShape_get_ScaleWidth(This,prop)	\
    ( (This)->lpVtbl -> get_ScaleWidth(This,prop) ) 

#define InlineShape_put_ScaleWidth(This,prop)	\
    ( (This)->lpVtbl -> put_ScaleWidth(This,prop) ) 

#define InlineShape_get_LockAspectRatio(This,prop)	\
    ( (This)->lpVtbl -> get_LockAspectRatio(This,prop) ) 

#define InlineShape_put_LockAspectRatio(This,prop)	\
    ( (This)->lpVtbl -> put_LockAspectRatio(This,prop) ) 

#define InlineShape_get_Line(This,prop)	\
    ( (This)->lpVtbl -> get_Line(This,prop) ) 

#define InlineShape_get_Fill(This,prop)	\
    ( (This)->lpVtbl -> get_Fill(This,prop) ) 

#define InlineShape_get_PictureFormat(This,prop)	\
    ( (This)->lpVtbl -> get_PictureFormat(This,prop) ) 

#define InlineShape_put_PictureFormat(This,prop)	\
    ( (This)->lpVtbl -> put_PictureFormat(This,prop) ) 

#define InlineShape_Activate(This)	\
    ( (This)->lpVtbl -> Activate(This) ) 

#define InlineShape_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define InlineShape_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define InlineShape_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define InlineShape_ConvertToShape(This,prop)	\
    ( (This)->lpVtbl -> ConvertToShape(This,prop) ) 

#define InlineShape_get_HorizontalLineFormat(This,prop)	\
    ( (This)->lpVtbl -> get_HorizontalLineFormat(This,prop) ) 

#define InlineShape_get_Script(This,prop)	\
    ( (This)->lpVtbl -> get_Script(This,prop) ) 

#define InlineShape_get_OWSAnchor(This,prop)	\
    ( (This)->lpVtbl -> get_OWSAnchor(This,prop) ) 

#define InlineShape_get_TextEffect(This,prop)	\
    ( (This)->lpVtbl -> get_TextEffect(This,prop) ) 

#define InlineShape_put_TextEffect(This,prop)	\
    ( (This)->lpVtbl -> put_TextEffect(This,prop) ) 

#define InlineShape_get_AlternativeText(This,prop)	\
    ( (This)->lpVtbl -> get_AlternativeText(This,prop) ) 

#define InlineShape_put_AlternativeText(This,prop)	\
    ( (This)->lpVtbl -> put_AlternativeText(This,prop) ) 

#define InlineShape_get_IsPictureBullet(This,prop)	\
    ( (This)->lpVtbl -> get_IsPictureBullet(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __InlineShape_INTERFACE_DEFINED__ */


#ifndef __InlineShapes_INTERFACE_DEFINED__
#define __InlineShapes_INTERFACE_DEFINED__

/* interface InlineShapes */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_InlineShapes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209A9-0000-0000-C000-000000000046")
    InlineShapes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ InlineShape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPicture( 
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *LinkToFile,
            /* [optional][in] */ VARIANT *SaveWithDocument,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ InlineShape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddOLEObject( 
            /* [optional][in] */ VARIANT *ClassType,
            /* [optional][in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *LinkToFile,
            /* [optional][in] */ VARIANT *DisplayAsIcon,
            /* [optional][in] */ VARIANT *IconFileName,
            /* [optional][in] */ VARIANT *IconIndex,
            /* [optional][in] */ VARIANT *IconLabel,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ InlineShape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddOLEControl( 
            /* [optional][in] */ VARIANT *ClassType,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ InlineShape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE New( 
            /* [in] */ Range *Range,
            /* [retval][out] */ InlineShape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddHorizontalLine( 
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ InlineShape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddHorizontalLineStandard( 
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ InlineShape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPictureBullet( 
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ InlineShape **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct InlineShapesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            InlineShapes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            InlineShapes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            InlineShapes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            InlineShapes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            InlineShapes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            InlineShapes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            InlineShapes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            InlineShapes * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            InlineShapes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            InlineShapes * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            InlineShapes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            InlineShapes * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            InlineShapes * This,
            /* [in] */ long Index,
            /* [retval][out] */ InlineShape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPicture )( 
            InlineShapes * This,
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *LinkToFile,
            /* [optional][in] */ VARIANT *SaveWithDocument,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ InlineShape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddOLEObject )( 
            InlineShapes * This,
            /* [optional][in] */ VARIANT *ClassType,
            /* [optional][in] */ VARIANT *FileName,
            /* [optional][in] */ VARIANT *LinkToFile,
            /* [optional][in] */ VARIANT *DisplayAsIcon,
            /* [optional][in] */ VARIANT *IconFileName,
            /* [optional][in] */ VARIANT *IconIndex,
            /* [optional][in] */ VARIANT *IconLabel,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ InlineShape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddOLEControl )( 
            InlineShapes * This,
            /* [optional][in] */ VARIANT *ClassType,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ InlineShape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *New )( 
            InlineShapes * This,
            /* [in] */ Range *Range,
            /* [retval][out] */ InlineShape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddHorizontalLine )( 
            InlineShapes * This,
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ InlineShape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddHorizontalLineStandard )( 
            InlineShapes * This,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ InlineShape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPictureBullet )( 
            InlineShapes * This,
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ InlineShape **prop);
        
        END_INTERFACE
    } InlineShapesVtbl;

    interface InlineShapes
    {
        CONST_VTBL struct InlineShapesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define InlineShapes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define InlineShapes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define InlineShapes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define InlineShapes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define InlineShapes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define InlineShapes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define InlineShapes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define InlineShapes_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define InlineShapes_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define InlineShapes_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define InlineShapes_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define InlineShapes_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define InlineShapes_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define InlineShapes_AddPicture(This,FileName,LinkToFile,SaveWithDocument,Range,prop)	\
    ( (This)->lpVtbl -> AddPicture(This,FileName,LinkToFile,SaveWithDocument,Range,prop) ) 

#define InlineShapes_AddOLEObject(This,ClassType,FileName,LinkToFile,DisplayAsIcon,IconFileName,IconIndex,IconLabel,Range,prop)	\
    ( (This)->lpVtbl -> AddOLEObject(This,ClassType,FileName,LinkToFile,DisplayAsIcon,IconFileName,IconIndex,IconLabel,Range,prop) ) 

#define InlineShapes_AddOLEControl(This,ClassType,Range,prop)	\
    ( (This)->lpVtbl -> AddOLEControl(This,ClassType,Range,prop) ) 

#define InlineShapes_New(This,Range,prop)	\
    ( (This)->lpVtbl -> New(This,Range,prop) ) 

#define InlineShapes_AddHorizontalLine(This,FileName,Range,prop)	\
    ( (This)->lpVtbl -> AddHorizontalLine(This,FileName,Range,prop) ) 

#define InlineShapes_AddHorizontalLineStandard(This,Range,prop)	\
    ( (This)->lpVtbl -> AddHorizontalLineStandard(This,Range,prop) ) 

#define InlineShapes_AddPictureBullet(This,FileName,Range,prop)	\
    ( (This)->lpVtbl -> AddPictureBullet(This,FileName,Range,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __InlineShapes_INTERFACE_DEFINED__ */


#ifndef __SpellingSuggestions_INTERFACE_DEFINED__
#define __SpellingSuggestions_INTERFACE_DEFINED__

/* interface SpellingSuggestions */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_SpellingSuggestions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209AA-0000-0000-C000-000000000046")
    SpellingSuggestions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpellingErrorType( 
            /* [retval][out] */ WdSpellingErrorType *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ SpellingSuggestion **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SpellingSuggestionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SpellingSuggestions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SpellingSuggestions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SpellingSuggestions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SpellingSuggestions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SpellingSuggestions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SpellingSuggestions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SpellingSuggestions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            SpellingSuggestions * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            SpellingSuggestions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SpellingSuggestions * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            SpellingSuggestions * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SpellingSuggestions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpellingErrorType )( 
            SpellingSuggestions * This,
            /* [retval][out] */ WdSpellingErrorType *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            SpellingSuggestions * This,
            /* [in] */ long Index,
            /* [retval][out] */ SpellingSuggestion **prop);
        
        END_INTERFACE
    } SpellingSuggestionsVtbl;

    interface SpellingSuggestions
    {
        CONST_VTBL struct SpellingSuggestionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SpellingSuggestions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SpellingSuggestions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SpellingSuggestions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SpellingSuggestions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SpellingSuggestions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SpellingSuggestions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SpellingSuggestions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SpellingSuggestions_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define SpellingSuggestions_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define SpellingSuggestions_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define SpellingSuggestions_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define SpellingSuggestions_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define SpellingSuggestions_get_SpellingErrorType(This,prop)	\
    ( (This)->lpVtbl -> get_SpellingErrorType(This,prop) ) 

#define SpellingSuggestions_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SpellingSuggestions_INTERFACE_DEFINED__ */


#ifndef __SpellingSuggestion_INTERFACE_DEFINED__
#define __SpellingSuggestion_INTERFACE_DEFINED__

/* interface SpellingSuggestion */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_SpellingSuggestion;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209AB-0000-0000-C000-000000000046")
    SpellingSuggestion : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SpellingSuggestionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SpellingSuggestion * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SpellingSuggestion * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SpellingSuggestion * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SpellingSuggestion * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SpellingSuggestion * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SpellingSuggestion * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SpellingSuggestion * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            SpellingSuggestion * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            SpellingSuggestion * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SpellingSuggestion * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            SpellingSuggestion * This,
            /* [retval][out] */ BSTR *prop);
        
        END_INTERFACE
    } SpellingSuggestionVtbl;

    interface SpellingSuggestion
    {
        CONST_VTBL struct SpellingSuggestionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SpellingSuggestion_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SpellingSuggestion_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SpellingSuggestion_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SpellingSuggestion_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SpellingSuggestion_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SpellingSuggestion_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SpellingSuggestion_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SpellingSuggestion_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define SpellingSuggestion_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define SpellingSuggestion_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define SpellingSuggestion_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SpellingSuggestion_INTERFACE_DEFINED__ */


#ifndef __Dictionaries_INTERFACE_DEFINED__
#define __Dictionaries_INTERFACE_DEFINED__

/* interface Dictionaries */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Dictionaries;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209AC-0000-0000-C000-000000000046")
    Dictionaries : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Maximum( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveCustomDictionary( 
            /* [retval][out] */ Dictionary **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ActiveCustomDictionary( 
            /* [in] */ Dictionary *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Dictionary **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR FileName,
            /* [retval][out] */ Dictionary **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DictionariesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Dictionaries * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Dictionaries * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Dictionaries * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Dictionaries * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Dictionaries * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Dictionaries * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Dictionaries * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Dictionaries * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Dictionaries * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Dictionaries * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Dictionaries * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Dictionaries * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Maximum )( 
            Dictionaries * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveCustomDictionary )( 
            Dictionaries * This,
            /* [retval][out] */ Dictionary **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ActiveCustomDictionary )( 
            Dictionaries * This,
            /* [in] */ Dictionary *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Dictionaries * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Dictionary **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Dictionaries * This,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ Dictionary **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearAll )( 
            Dictionaries * This);
        
        END_INTERFACE
    } DictionariesVtbl;

    interface Dictionaries
    {
        CONST_VTBL struct DictionariesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Dictionaries_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Dictionaries_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Dictionaries_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Dictionaries_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Dictionaries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Dictionaries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Dictionaries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Dictionaries_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Dictionaries_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Dictionaries_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Dictionaries_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Dictionaries_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Dictionaries_get_Maximum(This,prop)	\
    ( (This)->lpVtbl -> get_Maximum(This,prop) ) 

#define Dictionaries_get_ActiveCustomDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_ActiveCustomDictionary(This,prop) ) 

#define Dictionaries_put_ActiveCustomDictionary(This,prop)	\
    ( (This)->lpVtbl -> put_ActiveCustomDictionary(This,prop) ) 

#define Dictionaries_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Dictionaries_Add(This,FileName,prop)	\
    ( (This)->lpVtbl -> Add(This,FileName,prop) ) 

#define Dictionaries_ClearAll(This)	\
    ( (This)->lpVtbl -> ClearAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Dictionaries_INTERFACE_DEFINED__ */


#ifndef __HangulHanjaConversionDictionaries_INTERFACE_DEFINED__
#define __HangulHanjaConversionDictionaries_INTERFACE_DEFINED__

/* interface HangulHanjaConversionDictionaries */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_HangulHanjaConversionDictionaries;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209E0-0000-0000-C000-000000000046")
    HangulHanjaConversionDictionaries : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Maximum( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveCustomDictionary( 
            /* [retval][out] */ Dictionary **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ActiveCustomDictionary( 
            /* [in] */ Dictionary *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BuiltinDictionary( 
            /* [retval][out] */ Dictionary **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Dictionary **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR FileName,
            /* [retval][out] */ Dictionary **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HangulHanjaConversionDictionariesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HangulHanjaConversionDictionaries * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HangulHanjaConversionDictionaries * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HangulHanjaConversionDictionaries * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HangulHanjaConversionDictionaries * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HangulHanjaConversionDictionaries * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HangulHanjaConversionDictionaries * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HangulHanjaConversionDictionaries * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            HangulHanjaConversionDictionaries * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            HangulHanjaConversionDictionaries * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HangulHanjaConversionDictionaries * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            HangulHanjaConversionDictionaries * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            HangulHanjaConversionDictionaries * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Maximum )( 
            HangulHanjaConversionDictionaries * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveCustomDictionary )( 
            HangulHanjaConversionDictionaries * This,
            /* [retval][out] */ Dictionary **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ActiveCustomDictionary )( 
            HangulHanjaConversionDictionaries * This,
            /* [in] */ Dictionary *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BuiltinDictionary )( 
            HangulHanjaConversionDictionaries * This,
            /* [retval][out] */ Dictionary **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            HangulHanjaConversionDictionaries * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Dictionary **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            HangulHanjaConversionDictionaries * This,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ Dictionary **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearAll )( 
            HangulHanjaConversionDictionaries * This);
        
        END_INTERFACE
    } HangulHanjaConversionDictionariesVtbl;

    interface HangulHanjaConversionDictionaries
    {
        CONST_VTBL struct HangulHanjaConversionDictionariesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HangulHanjaConversionDictionaries_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HangulHanjaConversionDictionaries_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HangulHanjaConversionDictionaries_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HangulHanjaConversionDictionaries_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HangulHanjaConversionDictionaries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HangulHanjaConversionDictionaries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HangulHanjaConversionDictionaries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HangulHanjaConversionDictionaries_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define HangulHanjaConversionDictionaries_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define HangulHanjaConversionDictionaries_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define HangulHanjaConversionDictionaries_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define HangulHanjaConversionDictionaries_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define HangulHanjaConversionDictionaries_get_Maximum(This,prop)	\
    ( (This)->lpVtbl -> get_Maximum(This,prop) ) 

#define HangulHanjaConversionDictionaries_get_ActiveCustomDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_ActiveCustomDictionary(This,prop) ) 

#define HangulHanjaConversionDictionaries_put_ActiveCustomDictionary(This,prop)	\
    ( (This)->lpVtbl -> put_ActiveCustomDictionary(This,prop) ) 

#define HangulHanjaConversionDictionaries_get_BuiltinDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_BuiltinDictionary(This,prop) ) 

#define HangulHanjaConversionDictionaries_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define HangulHanjaConversionDictionaries_Add(This,FileName,prop)	\
    ( (This)->lpVtbl -> Add(This,FileName,prop) ) 

#define HangulHanjaConversionDictionaries_ClearAll(This)	\
    ( (This)->lpVtbl -> ClearAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HangulHanjaConversionDictionaries_INTERFACE_DEFINED__ */


#ifndef __Dictionary_INTERFACE_DEFINED__
#define __Dictionary_INTERFACE_DEFINED__

/* interface Dictionary */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Dictionary;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209AD-0000-0000-C000-000000000046")
    Dictionary : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageID( 
            /* [retval][out] */ WdLanguageID *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageID( 
            /* [in] */ WdLanguageID prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadOnly( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdDictionaryType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LanguageSpecific( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LanguageSpecific( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DictionaryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Dictionary * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Dictionary * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Dictionary * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Dictionary * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Dictionary * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Dictionary * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Dictionary * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Dictionary * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Dictionary * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Dictionary * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Dictionary * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            Dictionary * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageID )( 
            Dictionary * This,
            /* [retval][out] */ WdLanguageID *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageID )( 
            Dictionary * This,
            /* [in] */ WdLanguageID prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            Dictionary * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Dictionary * This,
            /* [retval][out] */ WdDictionaryType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LanguageSpecific )( 
            Dictionary * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LanguageSpecific )( 
            Dictionary * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Dictionary * This);
        
        END_INTERFACE
    } DictionaryVtbl;

    interface Dictionary
    {
        CONST_VTBL struct DictionaryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Dictionary_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Dictionary_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Dictionary_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Dictionary_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Dictionary_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Dictionary_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Dictionary_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Dictionary_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Dictionary_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Dictionary_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Dictionary_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define Dictionary_get_Path(This,prop)	\
    ( (This)->lpVtbl -> get_Path(This,prop) ) 

#define Dictionary_get_LanguageID(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageID(This,prop) ) 

#define Dictionary_put_LanguageID(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageID(This,prop) ) 

#define Dictionary_get_ReadOnly(This,prop)	\
    ( (This)->lpVtbl -> get_ReadOnly(This,prop) ) 

#define Dictionary_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define Dictionary_get_LanguageSpecific(This,prop)	\
    ( (This)->lpVtbl -> get_LanguageSpecific(This,prop) ) 

#define Dictionary_put_LanguageSpecific(This,prop)	\
    ( (This)->lpVtbl -> put_LanguageSpecific(This,prop) ) 

#define Dictionary_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Dictionary_INTERFACE_DEFINED__ */


#ifndef __ReadabilityStatistics_INTERFACE_DEFINED__
#define __ReadabilityStatistics_INTERFACE_DEFINED__

/* interface ReadabilityStatistics */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ReadabilityStatistics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209AE-0000-0000-C000-000000000046")
    ReadabilityStatistics : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ ReadabilityStatistic **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ReadabilityStatisticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ReadabilityStatistics * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ReadabilityStatistics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ReadabilityStatistics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ReadabilityStatistics * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ReadabilityStatistics * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ReadabilityStatistics * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ReadabilityStatistics * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ReadabilityStatistics * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ReadabilityStatistics * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ReadabilityStatistics * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ReadabilityStatistics * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ReadabilityStatistics * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ReadabilityStatistics * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ ReadabilityStatistic **prop);
        
        END_INTERFACE
    } ReadabilityStatisticsVtbl;

    interface ReadabilityStatistics
    {
        CONST_VTBL struct ReadabilityStatisticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ReadabilityStatistics_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ReadabilityStatistics_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ReadabilityStatistics_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ReadabilityStatistics_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ReadabilityStatistics_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ReadabilityStatistics_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ReadabilityStatistics_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ReadabilityStatistics_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ReadabilityStatistics_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ReadabilityStatistics_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ReadabilityStatistics_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define ReadabilityStatistics_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define ReadabilityStatistics_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ReadabilityStatistics_INTERFACE_DEFINED__ */


#ifndef __ReadabilityStatistic_INTERFACE_DEFINED__
#define __ReadabilityStatistic_INTERFACE_DEFINED__

/* interface ReadabilityStatistic */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ReadabilityStatistic;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209AF-0000-0000-C000-000000000046")
    ReadabilityStatistic : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ int *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ReadabilityStatisticVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ReadabilityStatistic * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ReadabilityStatistic * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ReadabilityStatistic * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ReadabilityStatistic * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ReadabilityStatistic * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ReadabilityStatistic * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ReadabilityStatistic * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ReadabilityStatistic * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ReadabilityStatistic * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ReadabilityStatistic * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ReadabilityStatistic * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            ReadabilityStatistic * This,
            /* [retval][out] */ int *prop);
        
        END_INTERFACE
    } ReadabilityStatisticVtbl;

    interface ReadabilityStatistic
    {
        CONST_VTBL struct ReadabilityStatisticVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ReadabilityStatistic_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ReadabilityStatistic_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ReadabilityStatistic_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ReadabilityStatistic_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ReadabilityStatistic_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ReadabilityStatistic_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ReadabilityStatistic_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ReadabilityStatistic_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ReadabilityStatistic_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ReadabilityStatistic_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ReadabilityStatistic_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define ReadabilityStatistic_get_Value(This,prop)	\
    ( (This)->lpVtbl -> get_Value(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ReadabilityStatistic_INTERFACE_DEFINED__ */


#ifndef __Versions_INTERFACE_DEFINED__
#define __Versions_INTERFACE_DEFINED__

/* interface Versions */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Versions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209B3-0000-0000-C000-000000000046")
    Versions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoVersion( 
            /* [retval][out] */ WdAutoVersions *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoVersion( 
            /* [in] */ WdAutoVersions prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Version **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [optional][in] */ VARIANT *Comment) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct VersionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Versions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Versions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Versions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Versions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Versions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Versions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Versions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Versions * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Versions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Versions * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Versions * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Versions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoVersion )( 
            Versions * This,
            /* [retval][out] */ WdAutoVersions *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoVersion )( 
            Versions * This,
            /* [in] */ WdAutoVersions prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Versions * This,
            /* [in] */ long Index,
            /* [retval][out] */ Version **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            Versions * This,
            /* [optional][in] */ VARIANT *Comment);
        
        END_INTERFACE
    } VersionsVtbl;

    interface Versions
    {
        CONST_VTBL struct VersionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Versions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Versions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Versions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Versions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Versions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Versions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Versions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Versions_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Versions_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Versions_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Versions_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Versions_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Versions_get_AutoVersion(This,prop)	\
    ( (This)->lpVtbl -> get_AutoVersion(This,prop) ) 

#define Versions_put_AutoVersion(This,prop)	\
    ( (This)->lpVtbl -> put_AutoVersion(This,prop) ) 

#define Versions_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Versions_Save(This,Comment)	\
    ( (This)->lpVtbl -> Save(This,Comment) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Versions_INTERFACE_DEFINED__ */


#ifndef __Version_INTERFACE_DEFINED__
#define __Version_INTERFACE_DEFINED__

/* interface Version */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Version;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209B4-0000-0000-C000-000000000046")
    Version : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SavedBy( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Date( 
            /* [retval][out] */ DATE *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE OpenOld( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [retval][out] */ _Document **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct VersionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Version * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Version * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Version * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Version * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Version * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Version * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Version * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Version * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Version * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Version * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SavedBy )( 
            Version * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            Version * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Date )( 
            Version * This,
            /* [retval][out] */ DATE *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            Version * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *OpenOld )( 
            Version * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Version * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            Version * This,
            /* [retval][out] */ _Document **prop);
        
        END_INTERFACE
    } VersionVtbl;

    interface Version
    {
        CONST_VTBL struct VersionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Version_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Version_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Version_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Version_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Version_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Version_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Version_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Version_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Version_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Version_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Version_get_SavedBy(This,prop)	\
    ( (This)->lpVtbl -> get_SavedBy(This,prop) ) 

#define Version_get_Comment(This,prop)	\
    ( (This)->lpVtbl -> get_Comment(This,prop) ) 

#define Version_get_Date(This,prop)	\
    ( (This)->lpVtbl -> get_Date(This,prop) ) 

#define Version_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define Version_OpenOld(This)	\
    ( (This)->lpVtbl -> OpenOld(This) ) 

#define Version_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Version_Open(This,prop)	\
    ( (This)->lpVtbl -> Open(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Version_INTERFACE_DEFINED__ */


#ifndef __Options_INTERFACE_DEFINED__
#define __Options_INTERFACE_DEFINED__

/* interface Options */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Options;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209B7-0000-0000-C000-000000000046")
    Options : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowAccentedUppercase( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowAccentedUppercase( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WPHelp( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WPHelp( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WPDocNavKeys( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WPDocNavKeys( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Pagination( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Pagination( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BlueScreen( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BlueScreen( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableSound( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableSound( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConfirmConversions( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ConfirmConversions( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UpdateLinksAtOpen( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UpdateLinksAtOpen( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SendMailAttach( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SendMailAttach( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MeasurementUnit( 
            /* [retval][out] */ WdMeasurementUnits *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MeasurementUnit( 
            /* [in] */ WdMeasurementUnits prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ButtonFieldClicks( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ButtonFieldClicks( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShortMenuNames( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShortMenuNames( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RTFInClipboard( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RTFInClipboard( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UpdateFieldsAtPrint( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UpdateFieldsAtPrint( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintProperties( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintProperties( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintFieldCodes( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintFieldCodes( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintComments( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintComments( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintHiddenText( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintHiddenText( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnvelopeFeederInstalled( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UpdateLinksAtPrint( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UpdateLinksAtPrint( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintBackground( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintBackground( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintDrawingObjects( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintDrawingObjects( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultTray( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultTray( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultTrayID( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultTrayID( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CreateBackup( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CreateBackup( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowFastSave( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowFastSave( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SavePropertiesPrompt( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SavePropertiesPrompt( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SaveNormalPrompt( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SaveNormalPrompt( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SaveInterval( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SaveInterval( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundSave( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundSave( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsertedTextMark( 
            /* [retval][out] */ WdInsertedTextMark *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsertedTextMark( 
            /* [in] */ WdInsertedTextMark prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DeletedTextMark( 
            /* [retval][out] */ WdDeletedTextMark *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DeletedTextMark( 
            /* [in] */ WdDeletedTextMark prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RevisedLinesMark( 
            /* [retval][out] */ WdRevisedLinesMark *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RevisedLinesMark( 
            /* [in] */ WdRevisedLinesMark prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsertedTextColor( 
            /* [retval][out] */ WdColorIndex *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsertedTextColor( 
            /* [in] */ WdColorIndex prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DeletedTextColor( 
            /* [retval][out] */ WdColorIndex *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DeletedTextColor( 
            /* [in] */ WdColorIndex prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RevisedLinesColor( 
            /* [retval][out] */ WdColorIndex *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RevisedLinesColor( 
            /* [in] */ WdColorIndex prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultFilePath( 
            /* [in] */ WdDefaultFilePath Path,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultFilePath( 
            /* [in] */ WdDefaultFilePath Path,
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Overtype( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Overtype( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReplaceSelection( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReplaceSelection( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowDragAndDrop( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowDragAndDrop( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoWordSelection( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoWordSelection( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_INSKeyForPaste( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_INSKeyForPaste( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartCutPaste( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SmartCutPaste( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TabIndentKey( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TabIndentKey( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureEditor( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PictureEditor( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnimateScreenMovements( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AnimateScreenMovements( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_VirusProtection( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_VirusProtection( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RevisedPropertiesMark( 
            /* [retval][out] */ WdRevisedPropertiesMark *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RevisedPropertiesMark( 
            /* [in] */ WdRevisedPropertiesMark prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RevisedPropertiesColor( 
            /* [retval][out] */ WdColorIndex *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RevisedPropertiesColor( 
            /* [in] */ WdColorIndex prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SnapToGrid( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SnapToGrid( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SnapToShapes( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SnapToShapes( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GridDistanceHorizontal( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GridDistanceHorizontal( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GridDistanceVertical( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GridDistanceVertical( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GridOriginHorizontal( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GridOriginHorizontal( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GridOriginVertical( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_GridOriginVertical( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InlineConversion( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InlineConversion( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IMEAutomaticControl( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IMEAutomaticControl( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatApplyHeadings( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatApplyHeadings( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatApplyLists( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatApplyLists( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatApplyBulletedLists( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatApplyBulletedLists( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatApplyOtherParas( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatApplyOtherParas( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatReplaceQuotes( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatReplaceQuotes( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatReplaceSymbols( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatReplaceSymbols( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatReplaceOrdinals( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatReplaceOrdinals( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatReplaceFractions( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatReplaceFractions( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatReplacePlainTextEmphasis( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatReplacePlainTextEmphasis( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatPreserveStyles( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatPreserveStyles( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeApplyHeadings( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeApplyHeadings( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeApplyBorders( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeApplyBorders( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeApplyBulletedLists( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeApplyBulletedLists( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeApplyNumberedLists( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeApplyNumberedLists( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeReplaceQuotes( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeReplaceQuotes( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeReplaceSymbols( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeReplaceSymbols( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeReplaceOrdinals( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeReplaceOrdinals( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeReplaceFractions( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeReplaceFractions( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeReplacePlainTextEmphasis( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeReplacePlainTextEmphasis( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeFormatListItemBeginning( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeFormatListItemBeginning( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeDefineStyles( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeDefineStyles( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatPlainTextWordMail( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatPlainTextWordMail( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeReplaceHyperlinks( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeReplaceHyperlinks( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatReplaceHyperlinks( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatReplaceHyperlinks( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultHighlightColorIndex( 
            /* [retval][out] */ WdColorIndex *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultHighlightColorIndex( 
            /* [in] */ WdColorIndex prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultBorderLineStyle( 
            /* [retval][out] */ WdLineStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultBorderLineStyle( 
            /* [in] */ WdLineStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CheckSpellingAsYouType( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CheckSpellingAsYouType( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CheckGrammarAsYouType( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CheckGrammarAsYouType( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IgnoreInternetAndFileAddresses( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IgnoreInternetAndFileAddresses( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowReadabilityStatistics( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowReadabilityStatistics( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IgnoreUppercase( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IgnoreUppercase( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IgnoreMixedDigits( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IgnoreMixedDigits( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuggestFromMainDictionaryOnly( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuggestFromMainDictionaryOnly( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuggestSpellingCorrections( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuggestSpellingCorrections( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultBorderLineWidth( 
            /* [retval][out] */ WdLineWidth *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultBorderLineWidth( 
            /* [in] */ WdLineWidth prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CheckGrammarWithSpelling( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CheckGrammarWithSpelling( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultOpenFormat( 
            /* [retval][out] */ WdOpenFormat *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultOpenFormat( 
            /* [in] */ WdOpenFormat prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintDraft( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintDraft( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintReverse( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintReverse( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MapPaperSize( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MapPaperSize( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeApplyTables( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeApplyTables( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatApplyFirstIndents( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatApplyFirstIndents( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatMatchParentheses( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatMatchParentheses( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatReplaceFarEastDashes( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatReplaceFarEastDashes( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatDeleteAutoSpaces( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatDeleteAutoSpaces( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeApplyFirstIndents( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeApplyFirstIndents( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeApplyDates( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeApplyDates( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeApplyClosings( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeApplyClosings( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeMatchParentheses( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeMatchParentheses( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeReplaceFarEastDashes( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeReplaceFarEastDashes( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeDeleteAutoSpaces( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeDeleteAutoSpaces( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeInsertClosings( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeInsertClosings( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeAutoLetterWizard( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeAutoLetterWizard( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeInsertOvers( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeInsertOvers( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayGridLines( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayGridLines( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzyCase( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzyCase( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzyByte( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzyByte( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzyHiragana( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzyHiragana( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzySmallKana( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzySmallKana( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzyDash( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzyDash( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzyIterationMark( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzyIterationMark( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzyKanji( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzyKanji( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzyOldKana( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzyOldKana( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzyProlongedSoundMark( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzyProlongedSoundMark( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzyDZ( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzyDZ( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzyBV( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzyBV( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzyTC( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzyTC( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzyHF( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzyHF( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzyZJ( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzyZJ( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzyAY( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzyAY( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzyKiKu( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzyKiKu( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzyPunctuation( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzyPunctuation( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchFuzzySpace( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchFuzzySpace( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ApplyFarEastFontsToAscii( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ApplyFarEastFontsToAscii( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConvertHighAnsiToFarEast( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ConvertHighAnsiToFarEast( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintOddPagesInAscendingOrder( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintOddPagesInAscendingOrder( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintEvenPagesInAscendingOrder( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintEvenPagesInAscendingOrder( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultBorderColorIndex( 
            /* [retval][out] */ WdColorIndex *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultBorderColorIndex( 
            /* [in] */ WdColorIndex prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableMisusedWordsDictionary( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableMisusedWordsDictionary( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowCombinedAuxiliaryForms( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowCombinedAuxiliaryForms( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HangulHanjaFastConversion( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HangulHanjaFastConversion( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CheckHangulEndings( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CheckHangulEndings( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EnableHangulHanjaRecentOrdering( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EnableHangulHanjaRecentOrdering( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MultipleWordConversionsMode( 
            /* [retval][out] */ WdMultipleWordConversionsMode *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MultipleWordConversionsMode( 
            /* [in] */ WdMultipleWordConversionsMode prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetWPHelpOptions( 
            /* [optional][in] */ VARIANT *CommandKeyHelp,
            /* [optional][in] */ VARIANT *DocNavigationKeys,
            /* [optional][in] */ VARIANT *MouseSimulation,
            /* [optional][in] */ VARIANT *DemoGuidance,
            /* [optional][in] */ VARIANT *DemoSpeed,
            /* [optional][in] */ VARIANT *HelpType) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultBorderColor( 
            /* [retval][out] */ WdColor *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultBorderColor( 
            /* [in] */ WdColor prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowPixelUnits( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowPixelUnits( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseCharacterUnit( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseCharacterUnit( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowCompoundNounProcessing( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowCompoundNounProcessing( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoKeyboardSwitching( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoKeyboardSwitching( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocumentViewDirection( 
            /* [retval][out] */ WdDocumentViewDirection *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocumentViewDirection( 
            /* [in] */ WdDocumentViewDirection prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArabicNumeral( 
            /* [retval][out] */ WdArabicNumeral *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArabicNumeral( 
            /* [in] */ WdArabicNumeral prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MonthNames( 
            /* [retval][out] */ WdMonthNames *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MonthNames( 
            /* [in] */ WdMonthNames prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CursorMovement( 
            /* [retval][out] */ WdCursorMovement *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CursorMovement( 
            /* [in] */ WdCursorMovement prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VisualSelection( 
            /* [retval][out] */ WdVisualSelection *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VisualSelection( 
            /* [in] */ WdVisualSelection prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowDiacritics( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowDiacritics( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowControlCharacters( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowControlCharacters( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddControlCharacters( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AddControlCharacters( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddBiDirectionalMarksWhenSavingTextFile( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AddBiDirectionalMarksWhenSavingTextFile( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StrictInitialAlefHamza( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StrictInitialAlefHamza( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StrictFinalYaa( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StrictFinalYaa( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HebrewMode( 
            /* [retval][out] */ WdHebSpellStart *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HebrewMode( 
            /* [in] */ WdHebSpellStart prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ArabicMode( 
            /* [retval][out] */ WdAraSpeller *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ArabicMode( 
            /* [in] */ WdAraSpeller prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowClickAndTypeMouse( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowClickAndTypeMouse( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseGermanSpellingReform( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseGermanSpellingReform( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InterpretHighAnsi( 
            /* [retval][out] */ WdHighAnsiText *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InterpretHighAnsi( 
            /* [in] */ WdHighAnsiText prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddHebDoubleQuote( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AddHebDoubleQuote( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseDiffDiacColor( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseDiffDiacColor( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DiacriticColorVal( 
            /* [retval][out] */ WdColor *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DiacriticColorVal( 
            /* [in] */ WdColor prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OptimizeForWord97byDefault( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OptimizeForWord97byDefault( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LocalNetworkFile( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LocalNetworkFile( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TypeNReplace( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TypeNReplace( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SequenceCheck( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SequenceCheck( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackgroundOpen( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BackgroundOpen( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisableFeaturesbyDefault( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisableFeaturesbyDefault( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PasteAdjustWordSpacing( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PasteAdjustWordSpacing( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PasteAdjustParagraphSpacing( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PasteAdjustParagraphSpacing( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PasteAdjustTableFormatting( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PasteAdjustTableFormatting( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PasteSmartStyleBehavior( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PasteSmartStyleBehavior( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PasteMergeFromPPT( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PasteMergeFromPPT( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PasteMergeFromXL( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PasteMergeFromXL( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CtrlClickHyperlinkToOpen( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CtrlClickHyperlinkToOpen( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PictureWrapType( 
            /* [retval][out] */ WdWrapTypeMerged *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PictureWrapType( 
            /* [in] */ WdWrapTypeMerged prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisableFeaturesIntroducedAfterbyDefault( 
            /* [retval][out] */ WdDisableFeaturesIntroducedAfter *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisableFeaturesIntroducedAfterbyDefault( 
            /* [in] */ WdDisableFeaturesIntroducedAfter prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PasteSmartCutPaste( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PasteSmartCutPaste( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayPasteOptions( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayPasteOptions( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PromptUpdateStyle( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PromptUpdateStyle( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultEPostageApp( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultEPostageApp( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultTextEncoding( 
            /* [retval][out] */ MsoEncoding *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultTextEncoding( 
            /* [in] */ MsoEncoding prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LabelSmartTags( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LabelSmartTags( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplaySmartTagButtons( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplaySmartTagButtons( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WarnBeforeSavingPrintingSendingMarkup( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WarnBeforeSavingPrintingSendingMarkup( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StoreRSIDOnSave( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StoreRSIDOnSave( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowFormatError( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowFormatError( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FormatScanning( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FormatScanning( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PasteMergeLists( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PasteMergeLists( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoCreateNewDrawings( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoCreateNewDrawings( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartParaSelection( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SmartParaSelection( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RevisionsBalloonPrintOrientation( 
            /* [retval][out] */ WdRevisionsBalloonPrintOrientation *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RevisionsBalloonPrintOrientation( 
            /* [in] */ WdRevisionsBalloonPrintOrientation prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommentsColor( 
            /* [retval][out] */ WdColorIndex *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CommentsColor( 
            /* [in] */ WdColorIndex prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintXMLTag( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintXMLTag( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PrintBackgrounds( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PrintBackgrounds( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowReadingMode( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowReadingMode( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowMarkupOpenSave( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowMarkupOpenSave( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartCursoring( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SmartCursoring( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Options * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Options * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Options * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Options * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Options * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Options * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Options * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Options * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Options * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Options * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowAccentedUppercase )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowAccentedUppercase )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WPHelp )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WPHelp )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WPDocNavKeys )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WPDocNavKeys )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Pagination )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Pagination )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BlueScreen )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BlueScreen )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableSound )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableSound )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConfirmConversions )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ConfirmConversions )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateLinksAtOpen )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateLinksAtOpen )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SendMailAttach )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SendMailAttach )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MeasurementUnit )( 
            Options * This,
            /* [retval][out] */ WdMeasurementUnits *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MeasurementUnit )( 
            Options * This,
            /* [in] */ WdMeasurementUnits prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ButtonFieldClicks )( 
            Options * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ButtonFieldClicks )( 
            Options * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShortMenuNames )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShortMenuNames )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RTFInClipboard )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RTFInClipboard )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateFieldsAtPrint )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateFieldsAtPrint )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintProperties )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintProperties )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintFieldCodes )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintFieldCodes )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintComments )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintComments )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintHiddenText )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintHiddenText )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnvelopeFeederInstalled )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateLinksAtPrint )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateLinksAtPrint )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintBackground )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintBackground )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintDrawingObjects )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintDrawingObjects )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultTray )( 
            Options * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultTray )( 
            Options * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultTrayID )( 
            Options * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultTrayID )( 
            Options * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CreateBackup )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CreateBackup )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowFastSave )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowFastSave )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SavePropertiesPrompt )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SavePropertiesPrompt )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SaveNormalPrompt )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SaveNormalPrompt )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SaveInterval )( 
            Options * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SaveInterval )( 
            Options * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundSave )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundSave )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertedTextMark )( 
            Options * This,
            /* [retval][out] */ WdInsertedTextMark *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertedTextMark )( 
            Options * This,
            /* [in] */ WdInsertedTextMark prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeletedTextMark )( 
            Options * This,
            /* [retval][out] */ WdDeletedTextMark *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DeletedTextMark )( 
            Options * This,
            /* [in] */ WdDeletedTextMark prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RevisedLinesMark )( 
            Options * This,
            /* [retval][out] */ WdRevisedLinesMark *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RevisedLinesMark )( 
            Options * This,
            /* [in] */ WdRevisedLinesMark prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsertedTextColor )( 
            Options * This,
            /* [retval][out] */ WdColorIndex *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsertedTextColor )( 
            Options * This,
            /* [in] */ WdColorIndex prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DeletedTextColor )( 
            Options * This,
            /* [retval][out] */ WdColorIndex *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DeletedTextColor )( 
            Options * This,
            /* [in] */ WdColorIndex prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RevisedLinesColor )( 
            Options * This,
            /* [retval][out] */ WdColorIndex *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RevisedLinesColor )( 
            Options * This,
            /* [in] */ WdColorIndex prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFilePath )( 
            Options * This,
            /* [in] */ WdDefaultFilePath Path,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultFilePath )( 
            Options * This,
            /* [in] */ WdDefaultFilePath Path,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Overtype )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Overtype )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReplaceSelection )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReplaceSelection )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowDragAndDrop )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowDragAndDrop )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoWordSelection )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoWordSelection )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_INSKeyForPaste )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_INSKeyForPaste )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartCutPaste )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SmartCutPaste )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabIndentKey )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TabIndentKey )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureEditor )( 
            Options * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PictureEditor )( 
            Options * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnimateScreenMovements )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AnimateScreenMovements )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VirusProtection )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VirusProtection )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RevisedPropertiesMark )( 
            Options * This,
            /* [retval][out] */ WdRevisedPropertiesMark *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RevisedPropertiesMark )( 
            Options * This,
            /* [in] */ WdRevisedPropertiesMark prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RevisedPropertiesColor )( 
            Options * This,
            /* [retval][out] */ WdColorIndex *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RevisedPropertiesColor )( 
            Options * This,
            /* [in] */ WdColorIndex prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SnapToGrid )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SnapToGrid )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SnapToShapes )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SnapToShapes )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GridDistanceHorizontal )( 
            Options * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GridDistanceHorizontal )( 
            Options * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GridDistanceVertical )( 
            Options * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GridDistanceVertical )( 
            Options * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GridOriginHorizontal )( 
            Options * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GridOriginHorizontal )( 
            Options * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GridOriginVertical )( 
            Options * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_GridOriginVertical )( 
            Options * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InlineConversion )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InlineConversion )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IMEAutomaticControl )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IMEAutomaticControl )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatApplyHeadings )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatApplyHeadings )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatApplyLists )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatApplyLists )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatApplyBulletedLists )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatApplyBulletedLists )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatApplyOtherParas )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatApplyOtherParas )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatReplaceQuotes )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatReplaceQuotes )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatReplaceSymbols )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatReplaceSymbols )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatReplaceOrdinals )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatReplaceOrdinals )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatReplaceFractions )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatReplaceFractions )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatReplacePlainTextEmphasis )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatReplacePlainTextEmphasis )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatPreserveStyles )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatPreserveStyles )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeApplyHeadings )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeApplyHeadings )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeApplyBorders )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeApplyBorders )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeApplyBulletedLists )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeApplyBulletedLists )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeApplyNumberedLists )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeApplyNumberedLists )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeReplaceQuotes )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeReplaceQuotes )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeReplaceSymbols )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeReplaceSymbols )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeReplaceOrdinals )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeReplaceOrdinals )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeReplaceFractions )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeReplaceFractions )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeReplacePlainTextEmphasis )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeReplacePlainTextEmphasis )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeFormatListItemBeginning )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeFormatListItemBeginning )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeDefineStyles )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeDefineStyles )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatPlainTextWordMail )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatPlainTextWordMail )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeReplaceHyperlinks )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeReplaceHyperlinks )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatReplaceHyperlinks )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatReplaceHyperlinks )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultHighlightColorIndex )( 
            Options * This,
            /* [retval][out] */ WdColorIndex *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultHighlightColorIndex )( 
            Options * This,
            /* [in] */ WdColorIndex prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultBorderLineStyle )( 
            Options * This,
            /* [retval][out] */ WdLineStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultBorderLineStyle )( 
            Options * This,
            /* [in] */ WdLineStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CheckSpellingAsYouType )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CheckSpellingAsYouType )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CheckGrammarAsYouType )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CheckGrammarAsYouType )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IgnoreInternetAndFileAddresses )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IgnoreInternetAndFileAddresses )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowReadabilityStatistics )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowReadabilityStatistics )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IgnoreUppercase )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IgnoreUppercase )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IgnoreMixedDigits )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IgnoreMixedDigits )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuggestFromMainDictionaryOnly )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuggestFromMainDictionaryOnly )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuggestSpellingCorrections )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuggestSpellingCorrections )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultBorderLineWidth )( 
            Options * This,
            /* [retval][out] */ WdLineWidth *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultBorderLineWidth )( 
            Options * This,
            /* [in] */ WdLineWidth prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CheckGrammarWithSpelling )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CheckGrammarWithSpelling )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultOpenFormat )( 
            Options * This,
            /* [retval][out] */ WdOpenFormat *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultOpenFormat )( 
            Options * This,
            /* [in] */ WdOpenFormat prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintDraft )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintDraft )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintReverse )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintReverse )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MapPaperSize )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MapPaperSize )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeApplyTables )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeApplyTables )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatApplyFirstIndents )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatApplyFirstIndents )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatMatchParentheses )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatMatchParentheses )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatReplaceFarEastDashes )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatReplaceFarEastDashes )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatDeleteAutoSpaces )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatDeleteAutoSpaces )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeApplyFirstIndents )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeApplyFirstIndents )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeApplyDates )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeApplyDates )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeApplyClosings )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeApplyClosings )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeMatchParentheses )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeMatchParentheses )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeReplaceFarEastDashes )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeReplaceFarEastDashes )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeDeleteAutoSpaces )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeDeleteAutoSpaces )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeInsertClosings )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeInsertClosings )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeAutoLetterWizard )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeAutoLetterWizard )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeInsertOvers )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeInsertOvers )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayGridLines )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayGridLines )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzyCase )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzyCase )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzyByte )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzyByte )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzyHiragana )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzyHiragana )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzySmallKana )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzySmallKana )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzyDash )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzyDash )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzyIterationMark )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzyIterationMark )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzyKanji )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzyKanji )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzyOldKana )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzyOldKana )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzyProlongedSoundMark )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzyProlongedSoundMark )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzyDZ )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzyDZ )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzyBV )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzyBV )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzyTC )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzyTC )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzyHF )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzyHF )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzyZJ )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzyZJ )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzyAY )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzyAY )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzyKiKu )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzyKiKu )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzyPunctuation )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzyPunctuation )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchFuzzySpace )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchFuzzySpace )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ApplyFarEastFontsToAscii )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ApplyFarEastFontsToAscii )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConvertHighAnsiToFarEast )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ConvertHighAnsiToFarEast )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintOddPagesInAscendingOrder )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintOddPagesInAscendingOrder )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintEvenPagesInAscendingOrder )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintEvenPagesInAscendingOrder )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultBorderColorIndex )( 
            Options * This,
            /* [retval][out] */ WdColorIndex *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultBorderColorIndex )( 
            Options * This,
            /* [in] */ WdColorIndex prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableMisusedWordsDictionary )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableMisusedWordsDictionary )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowCombinedAuxiliaryForms )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowCombinedAuxiliaryForms )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HangulHanjaFastConversion )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HangulHanjaFastConversion )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CheckHangulEndings )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CheckHangulEndings )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EnableHangulHanjaRecentOrdering )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EnableHangulHanjaRecentOrdering )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MultipleWordConversionsMode )( 
            Options * This,
            /* [retval][out] */ WdMultipleWordConversionsMode *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MultipleWordConversionsMode )( 
            Options * This,
            /* [in] */ WdMultipleWordConversionsMode prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetWPHelpOptions )( 
            Options * This,
            /* [optional][in] */ VARIANT *CommandKeyHelp,
            /* [optional][in] */ VARIANT *DocNavigationKeys,
            /* [optional][in] */ VARIANT *MouseSimulation,
            /* [optional][in] */ VARIANT *DemoGuidance,
            /* [optional][in] */ VARIANT *DemoSpeed,
            /* [optional][in] */ VARIANT *HelpType);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultBorderColor )( 
            Options * This,
            /* [retval][out] */ WdColor *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultBorderColor )( 
            Options * This,
            /* [in] */ WdColor prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPixelUnits )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPixelUnits )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseCharacterUnit )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseCharacterUnit )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowCompoundNounProcessing )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowCompoundNounProcessing )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoKeyboardSwitching )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoKeyboardSwitching )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentViewDirection )( 
            Options * This,
            /* [retval][out] */ WdDocumentViewDirection *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocumentViewDirection )( 
            Options * This,
            /* [in] */ WdDocumentViewDirection prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArabicNumeral )( 
            Options * This,
            /* [retval][out] */ WdArabicNumeral *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArabicNumeral )( 
            Options * This,
            /* [in] */ WdArabicNumeral prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MonthNames )( 
            Options * This,
            /* [retval][out] */ WdMonthNames *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MonthNames )( 
            Options * This,
            /* [in] */ WdMonthNames prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CursorMovement )( 
            Options * This,
            /* [retval][out] */ WdCursorMovement *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CursorMovement )( 
            Options * This,
            /* [in] */ WdCursorMovement prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VisualSelection )( 
            Options * This,
            /* [retval][out] */ WdVisualSelection *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VisualSelection )( 
            Options * This,
            /* [in] */ WdVisualSelection prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowDiacritics )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowDiacritics )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowControlCharacters )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowControlCharacters )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddControlCharacters )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AddControlCharacters )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddBiDirectionalMarksWhenSavingTextFile )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AddBiDirectionalMarksWhenSavingTextFile )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StrictInitialAlefHamza )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StrictInitialAlefHamza )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StrictFinalYaa )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StrictFinalYaa )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HebrewMode )( 
            Options * This,
            /* [retval][out] */ WdHebSpellStart *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HebrewMode )( 
            Options * This,
            /* [in] */ WdHebSpellStart prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ArabicMode )( 
            Options * This,
            /* [retval][out] */ WdAraSpeller *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ArabicMode )( 
            Options * This,
            /* [in] */ WdAraSpeller prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowClickAndTypeMouse )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowClickAndTypeMouse )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseGermanSpellingReform )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseGermanSpellingReform )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InterpretHighAnsi )( 
            Options * This,
            /* [retval][out] */ WdHighAnsiText *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InterpretHighAnsi )( 
            Options * This,
            /* [in] */ WdHighAnsiText prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddHebDoubleQuote )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AddHebDoubleQuote )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseDiffDiacColor )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseDiffDiacColor )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DiacriticColorVal )( 
            Options * This,
            /* [retval][out] */ WdColor *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DiacriticColorVal )( 
            Options * This,
            /* [in] */ WdColor prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OptimizeForWord97byDefault )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OptimizeForWord97byDefault )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LocalNetworkFile )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LocalNetworkFile )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TypeNReplace )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TypeNReplace )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SequenceCheck )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SequenceCheck )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundOpen )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundOpen )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisableFeaturesbyDefault )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisableFeaturesbyDefault )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PasteAdjustWordSpacing )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PasteAdjustWordSpacing )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PasteAdjustParagraphSpacing )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PasteAdjustParagraphSpacing )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PasteAdjustTableFormatting )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PasteAdjustTableFormatting )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PasteSmartStyleBehavior )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PasteSmartStyleBehavior )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PasteMergeFromPPT )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PasteMergeFromPPT )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PasteMergeFromXL )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PasteMergeFromXL )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CtrlClickHyperlinkToOpen )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CtrlClickHyperlinkToOpen )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PictureWrapType )( 
            Options * This,
            /* [retval][out] */ WdWrapTypeMerged *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PictureWrapType )( 
            Options * This,
            /* [in] */ WdWrapTypeMerged prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisableFeaturesIntroducedAfterbyDefault )( 
            Options * This,
            /* [retval][out] */ WdDisableFeaturesIntroducedAfter *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisableFeaturesIntroducedAfterbyDefault )( 
            Options * This,
            /* [in] */ WdDisableFeaturesIntroducedAfter prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PasteSmartCutPaste )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PasteSmartCutPaste )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayPasteOptions )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayPasteOptions )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PromptUpdateStyle )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PromptUpdateStyle )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultEPostageApp )( 
            Options * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultEPostageApp )( 
            Options * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultTextEncoding )( 
            Options * This,
            /* [retval][out] */ MsoEncoding *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultTextEncoding )( 
            Options * This,
            /* [in] */ MsoEncoding prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LabelSmartTags )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LabelSmartTags )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplaySmartTagButtons )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplaySmartTagButtons )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WarnBeforeSavingPrintingSendingMarkup )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WarnBeforeSavingPrintingSendingMarkup )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StoreRSIDOnSave )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StoreRSIDOnSave )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowFormatError )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowFormatError )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FormatScanning )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FormatScanning )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PasteMergeLists )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PasteMergeLists )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoCreateNewDrawings )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoCreateNewDrawings )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartParaSelection )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SmartParaSelection )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RevisionsBalloonPrintOrientation )( 
            Options * This,
            /* [retval][out] */ WdRevisionsBalloonPrintOrientation *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RevisionsBalloonPrintOrientation )( 
            Options * This,
            /* [in] */ WdRevisionsBalloonPrintOrientation prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommentsColor )( 
            Options * This,
            /* [retval][out] */ WdColorIndex *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CommentsColor )( 
            Options * This,
            /* [in] */ WdColorIndex prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintXMLTag )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintXMLTag )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PrintBackgrounds )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PrintBackgrounds )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowReadingMode )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowReadingMode )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowMarkupOpenSave )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowMarkupOpenSave )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartCursoring )( 
            Options * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SmartCursoring )( 
            Options * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } OptionsVtbl;

    interface Options
    {
        CONST_VTBL struct OptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Options_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Options_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Options_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Options_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Options_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Options_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Options_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Options_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Options_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Options_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Options_get_AllowAccentedUppercase(This,prop)	\
    ( (This)->lpVtbl -> get_AllowAccentedUppercase(This,prop) ) 

#define Options_put_AllowAccentedUppercase(This,prop)	\
    ( (This)->lpVtbl -> put_AllowAccentedUppercase(This,prop) ) 

#define Options_get_WPHelp(This,prop)	\
    ( (This)->lpVtbl -> get_WPHelp(This,prop) ) 

#define Options_put_WPHelp(This,prop)	\
    ( (This)->lpVtbl -> put_WPHelp(This,prop) ) 

#define Options_get_WPDocNavKeys(This,prop)	\
    ( (This)->lpVtbl -> get_WPDocNavKeys(This,prop) ) 

#define Options_put_WPDocNavKeys(This,prop)	\
    ( (This)->lpVtbl -> put_WPDocNavKeys(This,prop) ) 

#define Options_get_Pagination(This,prop)	\
    ( (This)->lpVtbl -> get_Pagination(This,prop) ) 

#define Options_put_Pagination(This,prop)	\
    ( (This)->lpVtbl -> put_Pagination(This,prop) ) 

#define Options_get_BlueScreen(This,prop)	\
    ( (This)->lpVtbl -> get_BlueScreen(This,prop) ) 

#define Options_put_BlueScreen(This,prop)	\
    ( (This)->lpVtbl -> put_BlueScreen(This,prop) ) 

#define Options_get_EnableSound(This,prop)	\
    ( (This)->lpVtbl -> get_EnableSound(This,prop) ) 

#define Options_put_EnableSound(This,prop)	\
    ( (This)->lpVtbl -> put_EnableSound(This,prop) ) 

#define Options_get_ConfirmConversions(This,prop)	\
    ( (This)->lpVtbl -> get_ConfirmConversions(This,prop) ) 

#define Options_put_ConfirmConversions(This,prop)	\
    ( (This)->lpVtbl -> put_ConfirmConversions(This,prop) ) 

#define Options_get_UpdateLinksAtOpen(This,prop)	\
    ( (This)->lpVtbl -> get_UpdateLinksAtOpen(This,prop) ) 

#define Options_put_UpdateLinksAtOpen(This,prop)	\
    ( (This)->lpVtbl -> put_UpdateLinksAtOpen(This,prop) ) 

#define Options_get_SendMailAttach(This,prop)	\
    ( (This)->lpVtbl -> get_SendMailAttach(This,prop) ) 

#define Options_put_SendMailAttach(This,prop)	\
    ( (This)->lpVtbl -> put_SendMailAttach(This,prop) ) 

#define Options_get_MeasurementUnit(This,prop)	\
    ( (This)->lpVtbl -> get_MeasurementUnit(This,prop) ) 

#define Options_put_MeasurementUnit(This,prop)	\
    ( (This)->lpVtbl -> put_MeasurementUnit(This,prop) ) 

#define Options_get_ButtonFieldClicks(This,prop)	\
    ( (This)->lpVtbl -> get_ButtonFieldClicks(This,prop) ) 

#define Options_put_ButtonFieldClicks(This,prop)	\
    ( (This)->lpVtbl -> put_ButtonFieldClicks(This,prop) ) 

#define Options_get_ShortMenuNames(This,prop)	\
    ( (This)->lpVtbl -> get_ShortMenuNames(This,prop) ) 

#define Options_put_ShortMenuNames(This,prop)	\
    ( (This)->lpVtbl -> put_ShortMenuNames(This,prop) ) 

#define Options_get_RTFInClipboard(This,prop)	\
    ( (This)->lpVtbl -> get_RTFInClipboard(This,prop) ) 

#define Options_put_RTFInClipboard(This,prop)	\
    ( (This)->lpVtbl -> put_RTFInClipboard(This,prop) ) 

#define Options_get_UpdateFieldsAtPrint(This,prop)	\
    ( (This)->lpVtbl -> get_UpdateFieldsAtPrint(This,prop) ) 

#define Options_put_UpdateFieldsAtPrint(This,prop)	\
    ( (This)->lpVtbl -> put_UpdateFieldsAtPrint(This,prop) ) 

#define Options_get_PrintProperties(This,prop)	\
    ( (This)->lpVtbl -> get_PrintProperties(This,prop) ) 

#define Options_put_PrintProperties(This,prop)	\
    ( (This)->lpVtbl -> put_PrintProperties(This,prop) ) 

#define Options_get_PrintFieldCodes(This,prop)	\
    ( (This)->lpVtbl -> get_PrintFieldCodes(This,prop) ) 

#define Options_put_PrintFieldCodes(This,prop)	\
    ( (This)->lpVtbl -> put_PrintFieldCodes(This,prop) ) 

#define Options_get_PrintComments(This,prop)	\
    ( (This)->lpVtbl -> get_PrintComments(This,prop) ) 

#define Options_put_PrintComments(This,prop)	\
    ( (This)->lpVtbl -> put_PrintComments(This,prop) ) 

#define Options_get_PrintHiddenText(This,prop)	\
    ( (This)->lpVtbl -> get_PrintHiddenText(This,prop) ) 

#define Options_put_PrintHiddenText(This,prop)	\
    ( (This)->lpVtbl -> put_PrintHiddenText(This,prop) ) 

#define Options_get_EnvelopeFeederInstalled(This,prop)	\
    ( (This)->lpVtbl -> get_EnvelopeFeederInstalled(This,prop) ) 

#define Options_get_UpdateLinksAtPrint(This,prop)	\
    ( (This)->lpVtbl -> get_UpdateLinksAtPrint(This,prop) ) 

#define Options_put_UpdateLinksAtPrint(This,prop)	\
    ( (This)->lpVtbl -> put_UpdateLinksAtPrint(This,prop) ) 

#define Options_get_PrintBackground(This,prop)	\
    ( (This)->lpVtbl -> get_PrintBackground(This,prop) ) 

#define Options_put_PrintBackground(This,prop)	\
    ( (This)->lpVtbl -> put_PrintBackground(This,prop) ) 

#define Options_get_PrintDrawingObjects(This,prop)	\
    ( (This)->lpVtbl -> get_PrintDrawingObjects(This,prop) ) 

#define Options_put_PrintDrawingObjects(This,prop)	\
    ( (This)->lpVtbl -> put_PrintDrawingObjects(This,prop) ) 

#define Options_get_DefaultTray(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultTray(This,prop) ) 

#define Options_put_DefaultTray(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultTray(This,prop) ) 

#define Options_get_DefaultTrayID(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultTrayID(This,prop) ) 

#define Options_put_DefaultTrayID(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultTrayID(This,prop) ) 

#define Options_get_CreateBackup(This,prop)	\
    ( (This)->lpVtbl -> get_CreateBackup(This,prop) ) 

#define Options_put_CreateBackup(This,prop)	\
    ( (This)->lpVtbl -> put_CreateBackup(This,prop) ) 

#define Options_get_AllowFastSave(This,prop)	\
    ( (This)->lpVtbl -> get_AllowFastSave(This,prop) ) 

#define Options_put_AllowFastSave(This,prop)	\
    ( (This)->lpVtbl -> put_AllowFastSave(This,prop) ) 

#define Options_get_SavePropertiesPrompt(This,prop)	\
    ( (This)->lpVtbl -> get_SavePropertiesPrompt(This,prop) ) 

#define Options_put_SavePropertiesPrompt(This,prop)	\
    ( (This)->lpVtbl -> put_SavePropertiesPrompt(This,prop) ) 

#define Options_get_SaveNormalPrompt(This,prop)	\
    ( (This)->lpVtbl -> get_SaveNormalPrompt(This,prop) ) 

#define Options_put_SaveNormalPrompt(This,prop)	\
    ( (This)->lpVtbl -> put_SaveNormalPrompt(This,prop) ) 

#define Options_get_SaveInterval(This,prop)	\
    ( (This)->lpVtbl -> get_SaveInterval(This,prop) ) 

#define Options_put_SaveInterval(This,prop)	\
    ( (This)->lpVtbl -> put_SaveInterval(This,prop) ) 

#define Options_get_BackgroundSave(This,prop)	\
    ( (This)->lpVtbl -> get_BackgroundSave(This,prop) ) 

#define Options_put_BackgroundSave(This,prop)	\
    ( (This)->lpVtbl -> put_BackgroundSave(This,prop) ) 

#define Options_get_InsertedTextMark(This,prop)	\
    ( (This)->lpVtbl -> get_InsertedTextMark(This,prop) ) 

#define Options_put_InsertedTextMark(This,prop)	\
    ( (This)->lpVtbl -> put_InsertedTextMark(This,prop) ) 

#define Options_get_DeletedTextMark(This,prop)	\
    ( (This)->lpVtbl -> get_DeletedTextMark(This,prop) ) 

#define Options_put_DeletedTextMark(This,prop)	\
    ( (This)->lpVtbl -> put_DeletedTextMark(This,prop) ) 

#define Options_get_RevisedLinesMark(This,prop)	\
    ( (This)->lpVtbl -> get_RevisedLinesMark(This,prop) ) 

#define Options_put_RevisedLinesMark(This,prop)	\
    ( (This)->lpVtbl -> put_RevisedLinesMark(This,prop) ) 

#define Options_get_InsertedTextColor(This,prop)	\
    ( (This)->lpVtbl -> get_InsertedTextColor(This,prop) ) 

#define Options_put_InsertedTextColor(This,prop)	\
    ( (This)->lpVtbl -> put_InsertedTextColor(This,prop) ) 

#define Options_get_DeletedTextColor(This,prop)	\
    ( (This)->lpVtbl -> get_DeletedTextColor(This,prop) ) 

#define Options_put_DeletedTextColor(This,prop)	\
    ( (This)->lpVtbl -> put_DeletedTextColor(This,prop) ) 

#define Options_get_RevisedLinesColor(This,prop)	\
    ( (This)->lpVtbl -> get_RevisedLinesColor(This,prop) ) 

#define Options_put_RevisedLinesColor(This,prop)	\
    ( (This)->lpVtbl -> put_RevisedLinesColor(This,prop) ) 

#define Options_get_DefaultFilePath(This,Path,prop)	\
    ( (This)->lpVtbl -> get_DefaultFilePath(This,Path,prop) ) 

#define Options_put_DefaultFilePath(This,Path,prop)	\
    ( (This)->lpVtbl -> put_DefaultFilePath(This,Path,prop) ) 

#define Options_get_Overtype(This,prop)	\
    ( (This)->lpVtbl -> get_Overtype(This,prop) ) 

#define Options_put_Overtype(This,prop)	\
    ( (This)->lpVtbl -> put_Overtype(This,prop) ) 

#define Options_get_ReplaceSelection(This,prop)	\
    ( (This)->lpVtbl -> get_ReplaceSelection(This,prop) ) 

#define Options_put_ReplaceSelection(This,prop)	\
    ( (This)->lpVtbl -> put_ReplaceSelection(This,prop) ) 

#define Options_get_AllowDragAndDrop(This,prop)	\
    ( (This)->lpVtbl -> get_AllowDragAndDrop(This,prop) ) 

#define Options_put_AllowDragAndDrop(This,prop)	\
    ( (This)->lpVtbl -> put_AllowDragAndDrop(This,prop) ) 

#define Options_get_AutoWordSelection(This,prop)	\
    ( (This)->lpVtbl -> get_AutoWordSelection(This,prop) ) 

#define Options_put_AutoWordSelection(This,prop)	\
    ( (This)->lpVtbl -> put_AutoWordSelection(This,prop) ) 

#define Options_get_INSKeyForPaste(This,prop)	\
    ( (This)->lpVtbl -> get_INSKeyForPaste(This,prop) ) 

#define Options_put_INSKeyForPaste(This,prop)	\
    ( (This)->lpVtbl -> put_INSKeyForPaste(This,prop) ) 

#define Options_get_SmartCutPaste(This,prop)	\
    ( (This)->lpVtbl -> get_SmartCutPaste(This,prop) ) 

#define Options_put_SmartCutPaste(This,prop)	\
    ( (This)->lpVtbl -> put_SmartCutPaste(This,prop) ) 

#define Options_get_TabIndentKey(This,prop)	\
    ( (This)->lpVtbl -> get_TabIndentKey(This,prop) ) 

#define Options_put_TabIndentKey(This,prop)	\
    ( (This)->lpVtbl -> put_TabIndentKey(This,prop) ) 

#define Options_get_PictureEditor(This,prop)	\
    ( (This)->lpVtbl -> get_PictureEditor(This,prop) ) 

#define Options_put_PictureEditor(This,prop)	\
    ( (This)->lpVtbl -> put_PictureEditor(This,prop) ) 

#define Options_get_AnimateScreenMovements(This,prop)	\
    ( (This)->lpVtbl -> get_AnimateScreenMovements(This,prop) ) 

#define Options_put_AnimateScreenMovements(This,prop)	\
    ( (This)->lpVtbl -> put_AnimateScreenMovements(This,prop) ) 

#define Options_get_VirusProtection(This,prop)	\
    ( (This)->lpVtbl -> get_VirusProtection(This,prop) ) 

#define Options_put_VirusProtection(This,prop)	\
    ( (This)->lpVtbl -> put_VirusProtection(This,prop) ) 

#define Options_get_RevisedPropertiesMark(This,prop)	\
    ( (This)->lpVtbl -> get_RevisedPropertiesMark(This,prop) ) 

#define Options_put_RevisedPropertiesMark(This,prop)	\
    ( (This)->lpVtbl -> put_RevisedPropertiesMark(This,prop) ) 

#define Options_get_RevisedPropertiesColor(This,prop)	\
    ( (This)->lpVtbl -> get_RevisedPropertiesColor(This,prop) ) 

#define Options_put_RevisedPropertiesColor(This,prop)	\
    ( (This)->lpVtbl -> put_RevisedPropertiesColor(This,prop) ) 

#define Options_get_SnapToGrid(This,prop)	\
    ( (This)->lpVtbl -> get_SnapToGrid(This,prop) ) 

#define Options_put_SnapToGrid(This,prop)	\
    ( (This)->lpVtbl -> put_SnapToGrid(This,prop) ) 

#define Options_get_SnapToShapes(This,prop)	\
    ( (This)->lpVtbl -> get_SnapToShapes(This,prop) ) 

#define Options_put_SnapToShapes(This,prop)	\
    ( (This)->lpVtbl -> put_SnapToShapes(This,prop) ) 

#define Options_get_GridDistanceHorizontal(This,prop)	\
    ( (This)->lpVtbl -> get_GridDistanceHorizontal(This,prop) ) 

#define Options_put_GridDistanceHorizontal(This,prop)	\
    ( (This)->lpVtbl -> put_GridDistanceHorizontal(This,prop) ) 

#define Options_get_GridDistanceVertical(This,prop)	\
    ( (This)->lpVtbl -> get_GridDistanceVertical(This,prop) ) 

#define Options_put_GridDistanceVertical(This,prop)	\
    ( (This)->lpVtbl -> put_GridDistanceVertical(This,prop) ) 

#define Options_get_GridOriginHorizontal(This,prop)	\
    ( (This)->lpVtbl -> get_GridOriginHorizontal(This,prop) ) 

#define Options_put_GridOriginHorizontal(This,prop)	\
    ( (This)->lpVtbl -> put_GridOriginHorizontal(This,prop) ) 

#define Options_get_GridOriginVertical(This,prop)	\
    ( (This)->lpVtbl -> get_GridOriginVertical(This,prop) ) 

#define Options_put_GridOriginVertical(This,prop)	\
    ( (This)->lpVtbl -> put_GridOriginVertical(This,prop) ) 

#define Options_get_InlineConversion(This,prop)	\
    ( (This)->lpVtbl -> get_InlineConversion(This,prop) ) 

#define Options_put_InlineConversion(This,prop)	\
    ( (This)->lpVtbl -> put_InlineConversion(This,prop) ) 

#define Options_get_IMEAutomaticControl(This,prop)	\
    ( (This)->lpVtbl -> get_IMEAutomaticControl(This,prop) ) 

#define Options_put_IMEAutomaticControl(This,prop)	\
    ( (This)->lpVtbl -> put_IMEAutomaticControl(This,prop) ) 

#define Options_get_AutoFormatApplyHeadings(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatApplyHeadings(This,prop) ) 

#define Options_put_AutoFormatApplyHeadings(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatApplyHeadings(This,prop) ) 

#define Options_get_AutoFormatApplyLists(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatApplyLists(This,prop) ) 

#define Options_put_AutoFormatApplyLists(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatApplyLists(This,prop) ) 

#define Options_get_AutoFormatApplyBulletedLists(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatApplyBulletedLists(This,prop) ) 

#define Options_put_AutoFormatApplyBulletedLists(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatApplyBulletedLists(This,prop) ) 

#define Options_get_AutoFormatApplyOtherParas(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatApplyOtherParas(This,prop) ) 

#define Options_put_AutoFormatApplyOtherParas(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatApplyOtherParas(This,prop) ) 

#define Options_get_AutoFormatReplaceQuotes(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatReplaceQuotes(This,prop) ) 

#define Options_put_AutoFormatReplaceQuotes(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatReplaceQuotes(This,prop) ) 

#define Options_get_AutoFormatReplaceSymbols(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatReplaceSymbols(This,prop) ) 

#define Options_put_AutoFormatReplaceSymbols(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatReplaceSymbols(This,prop) ) 

#define Options_get_AutoFormatReplaceOrdinals(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatReplaceOrdinals(This,prop) ) 

#define Options_put_AutoFormatReplaceOrdinals(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatReplaceOrdinals(This,prop) ) 

#define Options_get_AutoFormatReplaceFractions(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatReplaceFractions(This,prop) ) 

#define Options_put_AutoFormatReplaceFractions(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatReplaceFractions(This,prop) ) 

#define Options_get_AutoFormatReplacePlainTextEmphasis(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatReplacePlainTextEmphasis(This,prop) ) 

#define Options_put_AutoFormatReplacePlainTextEmphasis(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatReplacePlainTextEmphasis(This,prop) ) 

#define Options_get_AutoFormatPreserveStyles(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatPreserveStyles(This,prop) ) 

#define Options_put_AutoFormatPreserveStyles(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatPreserveStyles(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeApplyHeadings(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeApplyHeadings(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeApplyHeadings(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeApplyHeadings(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeApplyBorders(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeApplyBorders(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeApplyBorders(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeApplyBorders(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeApplyBulletedLists(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeApplyBulletedLists(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeApplyBulletedLists(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeApplyBulletedLists(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeApplyNumberedLists(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeApplyNumberedLists(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeApplyNumberedLists(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeApplyNumberedLists(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeReplaceQuotes(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeReplaceQuotes(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeReplaceQuotes(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeReplaceQuotes(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeReplaceSymbols(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeReplaceSymbols(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeReplaceSymbols(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeReplaceSymbols(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeReplaceOrdinals(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeReplaceOrdinals(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeReplaceOrdinals(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeReplaceOrdinals(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeReplaceFractions(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeReplaceFractions(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeReplaceFractions(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeReplaceFractions(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeReplacePlainTextEmphasis(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeReplacePlainTextEmphasis(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeReplacePlainTextEmphasis(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeReplacePlainTextEmphasis(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeFormatListItemBeginning(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeFormatListItemBeginning(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeFormatListItemBeginning(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeFormatListItemBeginning(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeDefineStyles(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeDefineStyles(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeDefineStyles(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeDefineStyles(This,prop) ) 

#define Options_get_AutoFormatPlainTextWordMail(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatPlainTextWordMail(This,prop) ) 

#define Options_put_AutoFormatPlainTextWordMail(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatPlainTextWordMail(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeReplaceHyperlinks(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeReplaceHyperlinks(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeReplaceHyperlinks(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeReplaceHyperlinks(This,prop) ) 

#define Options_get_AutoFormatReplaceHyperlinks(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatReplaceHyperlinks(This,prop) ) 

#define Options_put_AutoFormatReplaceHyperlinks(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatReplaceHyperlinks(This,prop) ) 

#define Options_get_DefaultHighlightColorIndex(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultHighlightColorIndex(This,prop) ) 

#define Options_put_DefaultHighlightColorIndex(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultHighlightColorIndex(This,prop) ) 

#define Options_get_DefaultBorderLineStyle(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultBorderLineStyle(This,prop) ) 

#define Options_put_DefaultBorderLineStyle(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultBorderLineStyle(This,prop) ) 

#define Options_get_CheckSpellingAsYouType(This,prop)	\
    ( (This)->lpVtbl -> get_CheckSpellingAsYouType(This,prop) ) 

#define Options_put_CheckSpellingAsYouType(This,prop)	\
    ( (This)->lpVtbl -> put_CheckSpellingAsYouType(This,prop) ) 

#define Options_get_CheckGrammarAsYouType(This,prop)	\
    ( (This)->lpVtbl -> get_CheckGrammarAsYouType(This,prop) ) 

#define Options_put_CheckGrammarAsYouType(This,prop)	\
    ( (This)->lpVtbl -> put_CheckGrammarAsYouType(This,prop) ) 

#define Options_get_IgnoreInternetAndFileAddresses(This,prop)	\
    ( (This)->lpVtbl -> get_IgnoreInternetAndFileAddresses(This,prop) ) 

#define Options_put_IgnoreInternetAndFileAddresses(This,prop)	\
    ( (This)->lpVtbl -> put_IgnoreInternetAndFileAddresses(This,prop) ) 

#define Options_get_ShowReadabilityStatistics(This,prop)	\
    ( (This)->lpVtbl -> get_ShowReadabilityStatistics(This,prop) ) 

#define Options_put_ShowReadabilityStatistics(This,prop)	\
    ( (This)->lpVtbl -> put_ShowReadabilityStatistics(This,prop) ) 

#define Options_get_IgnoreUppercase(This,prop)	\
    ( (This)->lpVtbl -> get_IgnoreUppercase(This,prop) ) 

#define Options_put_IgnoreUppercase(This,prop)	\
    ( (This)->lpVtbl -> put_IgnoreUppercase(This,prop) ) 

#define Options_get_IgnoreMixedDigits(This,prop)	\
    ( (This)->lpVtbl -> get_IgnoreMixedDigits(This,prop) ) 

#define Options_put_IgnoreMixedDigits(This,prop)	\
    ( (This)->lpVtbl -> put_IgnoreMixedDigits(This,prop) ) 

#define Options_get_SuggestFromMainDictionaryOnly(This,prop)	\
    ( (This)->lpVtbl -> get_SuggestFromMainDictionaryOnly(This,prop) ) 

#define Options_put_SuggestFromMainDictionaryOnly(This,prop)	\
    ( (This)->lpVtbl -> put_SuggestFromMainDictionaryOnly(This,prop) ) 

#define Options_get_SuggestSpellingCorrections(This,prop)	\
    ( (This)->lpVtbl -> get_SuggestSpellingCorrections(This,prop) ) 

#define Options_put_SuggestSpellingCorrections(This,prop)	\
    ( (This)->lpVtbl -> put_SuggestSpellingCorrections(This,prop) ) 

#define Options_get_DefaultBorderLineWidth(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultBorderLineWidth(This,prop) ) 

#define Options_put_DefaultBorderLineWidth(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultBorderLineWidth(This,prop) ) 

#define Options_get_CheckGrammarWithSpelling(This,prop)	\
    ( (This)->lpVtbl -> get_CheckGrammarWithSpelling(This,prop) ) 

#define Options_put_CheckGrammarWithSpelling(This,prop)	\
    ( (This)->lpVtbl -> put_CheckGrammarWithSpelling(This,prop) ) 

#define Options_get_DefaultOpenFormat(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultOpenFormat(This,prop) ) 

#define Options_put_DefaultOpenFormat(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultOpenFormat(This,prop) ) 

#define Options_get_PrintDraft(This,prop)	\
    ( (This)->lpVtbl -> get_PrintDraft(This,prop) ) 

#define Options_put_PrintDraft(This,prop)	\
    ( (This)->lpVtbl -> put_PrintDraft(This,prop) ) 

#define Options_get_PrintReverse(This,prop)	\
    ( (This)->lpVtbl -> get_PrintReverse(This,prop) ) 

#define Options_put_PrintReverse(This,prop)	\
    ( (This)->lpVtbl -> put_PrintReverse(This,prop) ) 

#define Options_get_MapPaperSize(This,prop)	\
    ( (This)->lpVtbl -> get_MapPaperSize(This,prop) ) 

#define Options_put_MapPaperSize(This,prop)	\
    ( (This)->lpVtbl -> put_MapPaperSize(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeApplyTables(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeApplyTables(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeApplyTables(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeApplyTables(This,prop) ) 

#define Options_get_AutoFormatApplyFirstIndents(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatApplyFirstIndents(This,prop) ) 

#define Options_put_AutoFormatApplyFirstIndents(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatApplyFirstIndents(This,prop) ) 

#define Options_get_AutoFormatMatchParentheses(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatMatchParentheses(This,prop) ) 

#define Options_put_AutoFormatMatchParentheses(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatMatchParentheses(This,prop) ) 

#define Options_get_AutoFormatReplaceFarEastDashes(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatReplaceFarEastDashes(This,prop) ) 

#define Options_put_AutoFormatReplaceFarEastDashes(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatReplaceFarEastDashes(This,prop) ) 

#define Options_get_AutoFormatDeleteAutoSpaces(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatDeleteAutoSpaces(This,prop) ) 

#define Options_put_AutoFormatDeleteAutoSpaces(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatDeleteAutoSpaces(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeApplyFirstIndents(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeApplyFirstIndents(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeApplyFirstIndents(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeApplyFirstIndents(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeApplyDates(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeApplyDates(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeApplyDates(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeApplyDates(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeApplyClosings(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeApplyClosings(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeApplyClosings(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeApplyClosings(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeMatchParentheses(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeMatchParentheses(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeMatchParentheses(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeMatchParentheses(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeReplaceFarEastDashes(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeReplaceFarEastDashes(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeReplaceFarEastDashes(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeReplaceFarEastDashes(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeDeleteAutoSpaces(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeDeleteAutoSpaces(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeDeleteAutoSpaces(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeDeleteAutoSpaces(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeInsertClosings(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeInsertClosings(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeInsertClosings(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeInsertClosings(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeAutoLetterWizard(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeAutoLetterWizard(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeAutoLetterWizard(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeAutoLetterWizard(This,prop) ) 

#define Options_get_AutoFormatAsYouTypeInsertOvers(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeInsertOvers(This,prop) ) 

#define Options_put_AutoFormatAsYouTypeInsertOvers(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeInsertOvers(This,prop) ) 

#define Options_get_DisplayGridLines(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayGridLines(This,prop) ) 

#define Options_put_DisplayGridLines(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayGridLines(This,prop) ) 

#define Options_get_MatchFuzzyCase(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzyCase(This,prop) ) 

#define Options_put_MatchFuzzyCase(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzyCase(This,prop) ) 

#define Options_get_MatchFuzzyByte(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzyByte(This,prop) ) 

#define Options_put_MatchFuzzyByte(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzyByte(This,prop) ) 

#define Options_get_MatchFuzzyHiragana(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzyHiragana(This,prop) ) 

#define Options_put_MatchFuzzyHiragana(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzyHiragana(This,prop) ) 

#define Options_get_MatchFuzzySmallKana(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzySmallKana(This,prop) ) 

#define Options_put_MatchFuzzySmallKana(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzySmallKana(This,prop) ) 

#define Options_get_MatchFuzzyDash(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzyDash(This,prop) ) 

#define Options_put_MatchFuzzyDash(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzyDash(This,prop) ) 

#define Options_get_MatchFuzzyIterationMark(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzyIterationMark(This,prop) ) 

#define Options_put_MatchFuzzyIterationMark(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzyIterationMark(This,prop) ) 

#define Options_get_MatchFuzzyKanji(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzyKanji(This,prop) ) 

#define Options_put_MatchFuzzyKanji(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzyKanji(This,prop) ) 

#define Options_get_MatchFuzzyOldKana(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzyOldKana(This,prop) ) 

#define Options_put_MatchFuzzyOldKana(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzyOldKana(This,prop) ) 

#define Options_get_MatchFuzzyProlongedSoundMark(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzyProlongedSoundMark(This,prop) ) 

#define Options_put_MatchFuzzyProlongedSoundMark(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzyProlongedSoundMark(This,prop) ) 

#define Options_get_MatchFuzzyDZ(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzyDZ(This,prop) ) 

#define Options_put_MatchFuzzyDZ(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzyDZ(This,prop) ) 

#define Options_get_MatchFuzzyBV(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzyBV(This,prop) ) 

#define Options_put_MatchFuzzyBV(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzyBV(This,prop) ) 

#define Options_get_MatchFuzzyTC(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzyTC(This,prop) ) 

#define Options_put_MatchFuzzyTC(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzyTC(This,prop) ) 

#define Options_get_MatchFuzzyHF(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzyHF(This,prop) ) 

#define Options_put_MatchFuzzyHF(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzyHF(This,prop) ) 

#define Options_get_MatchFuzzyZJ(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzyZJ(This,prop) ) 

#define Options_put_MatchFuzzyZJ(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzyZJ(This,prop) ) 

#define Options_get_MatchFuzzyAY(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzyAY(This,prop) ) 

#define Options_put_MatchFuzzyAY(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzyAY(This,prop) ) 

#define Options_get_MatchFuzzyKiKu(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzyKiKu(This,prop) ) 

#define Options_put_MatchFuzzyKiKu(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzyKiKu(This,prop) ) 

#define Options_get_MatchFuzzyPunctuation(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzyPunctuation(This,prop) ) 

#define Options_put_MatchFuzzyPunctuation(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzyPunctuation(This,prop) ) 

#define Options_get_MatchFuzzySpace(This,prop)	\
    ( (This)->lpVtbl -> get_MatchFuzzySpace(This,prop) ) 

#define Options_put_MatchFuzzySpace(This,prop)	\
    ( (This)->lpVtbl -> put_MatchFuzzySpace(This,prop) ) 

#define Options_get_ApplyFarEastFontsToAscii(This,prop)	\
    ( (This)->lpVtbl -> get_ApplyFarEastFontsToAscii(This,prop) ) 

#define Options_put_ApplyFarEastFontsToAscii(This,prop)	\
    ( (This)->lpVtbl -> put_ApplyFarEastFontsToAscii(This,prop) ) 

#define Options_get_ConvertHighAnsiToFarEast(This,prop)	\
    ( (This)->lpVtbl -> get_ConvertHighAnsiToFarEast(This,prop) ) 

#define Options_put_ConvertHighAnsiToFarEast(This,prop)	\
    ( (This)->lpVtbl -> put_ConvertHighAnsiToFarEast(This,prop) ) 

#define Options_get_PrintOddPagesInAscendingOrder(This,prop)	\
    ( (This)->lpVtbl -> get_PrintOddPagesInAscendingOrder(This,prop) ) 

#define Options_put_PrintOddPagesInAscendingOrder(This,prop)	\
    ( (This)->lpVtbl -> put_PrintOddPagesInAscendingOrder(This,prop) ) 

#define Options_get_PrintEvenPagesInAscendingOrder(This,prop)	\
    ( (This)->lpVtbl -> get_PrintEvenPagesInAscendingOrder(This,prop) ) 

#define Options_put_PrintEvenPagesInAscendingOrder(This,prop)	\
    ( (This)->lpVtbl -> put_PrintEvenPagesInAscendingOrder(This,prop) ) 

#define Options_get_DefaultBorderColorIndex(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultBorderColorIndex(This,prop) ) 

#define Options_put_DefaultBorderColorIndex(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultBorderColorIndex(This,prop) ) 

#define Options_get_EnableMisusedWordsDictionary(This,prop)	\
    ( (This)->lpVtbl -> get_EnableMisusedWordsDictionary(This,prop) ) 

#define Options_put_EnableMisusedWordsDictionary(This,prop)	\
    ( (This)->lpVtbl -> put_EnableMisusedWordsDictionary(This,prop) ) 

#define Options_get_AllowCombinedAuxiliaryForms(This,prop)	\
    ( (This)->lpVtbl -> get_AllowCombinedAuxiliaryForms(This,prop) ) 

#define Options_put_AllowCombinedAuxiliaryForms(This,prop)	\
    ( (This)->lpVtbl -> put_AllowCombinedAuxiliaryForms(This,prop) ) 

#define Options_get_HangulHanjaFastConversion(This,prop)	\
    ( (This)->lpVtbl -> get_HangulHanjaFastConversion(This,prop) ) 

#define Options_put_HangulHanjaFastConversion(This,prop)	\
    ( (This)->lpVtbl -> put_HangulHanjaFastConversion(This,prop) ) 

#define Options_get_CheckHangulEndings(This,prop)	\
    ( (This)->lpVtbl -> get_CheckHangulEndings(This,prop) ) 

#define Options_put_CheckHangulEndings(This,prop)	\
    ( (This)->lpVtbl -> put_CheckHangulEndings(This,prop) ) 

#define Options_get_EnableHangulHanjaRecentOrdering(This,prop)	\
    ( (This)->lpVtbl -> get_EnableHangulHanjaRecentOrdering(This,prop) ) 

#define Options_put_EnableHangulHanjaRecentOrdering(This,prop)	\
    ( (This)->lpVtbl -> put_EnableHangulHanjaRecentOrdering(This,prop) ) 

#define Options_get_MultipleWordConversionsMode(This,prop)	\
    ( (This)->lpVtbl -> get_MultipleWordConversionsMode(This,prop) ) 

#define Options_put_MultipleWordConversionsMode(This,prop)	\
    ( (This)->lpVtbl -> put_MultipleWordConversionsMode(This,prop) ) 

#define Options_SetWPHelpOptions(This,CommandKeyHelp,DocNavigationKeys,MouseSimulation,DemoGuidance,DemoSpeed,HelpType)	\
    ( (This)->lpVtbl -> SetWPHelpOptions(This,CommandKeyHelp,DocNavigationKeys,MouseSimulation,DemoGuidance,DemoSpeed,HelpType) ) 

#define Options_get_DefaultBorderColor(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultBorderColor(This,prop) ) 

#define Options_put_DefaultBorderColor(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultBorderColor(This,prop) ) 

#define Options_get_AllowPixelUnits(This,prop)	\
    ( (This)->lpVtbl -> get_AllowPixelUnits(This,prop) ) 

#define Options_put_AllowPixelUnits(This,prop)	\
    ( (This)->lpVtbl -> put_AllowPixelUnits(This,prop) ) 

#define Options_get_UseCharacterUnit(This,prop)	\
    ( (This)->lpVtbl -> get_UseCharacterUnit(This,prop) ) 

#define Options_put_UseCharacterUnit(This,prop)	\
    ( (This)->lpVtbl -> put_UseCharacterUnit(This,prop) ) 

#define Options_get_AllowCompoundNounProcessing(This,prop)	\
    ( (This)->lpVtbl -> get_AllowCompoundNounProcessing(This,prop) ) 

#define Options_put_AllowCompoundNounProcessing(This,prop)	\
    ( (This)->lpVtbl -> put_AllowCompoundNounProcessing(This,prop) ) 

#define Options_get_AutoKeyboardSwitching(This,prop)	\
    ( (This)->lpVtbl -> get_AutoKeyboardSwitching(This,prop) ) 

#define Options_put_AutoKeyboardSwitching(This,prop)	\
    ( (This)->lpVtbl -> put_AutoKeyboardSwitching(This,prop) ) 

#define Options_get_DocumentViewDirection(This,prop)	\
    ( (This)->lpVtbl -> get_DocumentViewDirection(This,prop) ) 

#define Options_put_DocumentViewDirection(This,prop)	\
    ( (This)->lpVtbl -> put_DocumentViewDirection(This,prop) ) 

#define Options_get_ArabicNumeral(This,prop)	\
    ( (This)->lpVtbl -> get_ArabicNumeral(This,prop) ) 

#define Options_put_ArabicNumeral(This,prop)	\
    ( (This)->lpVtbl -> put_ArabicNumeral(This,prop) ) 

#define Options_get_MonthNames(This,prop)	\
    ( (This)->lpVtbl -> get_MonthNames(This,prop) ) 

#define Options_put_MonthNames(This,prop)	\
    ( (This)->lpVtbl -> put_MonthNames(This,prop) ) 

#define Options_get_CursorMovement(This,prop)	\
    ( (This)->lpVtbl -> get_CursorMovement(This,prop) ) 

#define Options_put_CursorMovement(This,prop)	\
    ( (This)->lpVtbl -> put_CursorMovement(This,prop) ) 

#define Options_get_VisualSelection(This,prop)	\
    ( (This)->lpVtbl -> get_VisualSelection(This,prop) ) 

#define Options_put_VisualSelection(This,prop)	\
    ( (This)->lpVtbl -> put_VisualSelection(This,prop) ) 

#define Options_get_ShowDiacritics(This,prop)	\
    ( (This)->lpVtbl -> get_ShowDiacritics(This,prop) ) 

#define Options_put_ShowDiacritics(This,prop)	\
    ( (This)->lpVtbl -> put_ShowDiacritics(This,prop) ) 

#define Options_get_ShowControlCharacters(This,prop)	\
    ( (This)->lpVtbl -> get_ShowControlCharacters(This,prop) ) 

#define Options_put_ShowControlCharacters(This,prop)	\
    ( (This)->lpVtbl -> put_ShowControlCharacters(This,prop) ) 

#define Options_get_AddControlCharacters(This,prop)	\
    ( (This)->lpVtbl -> get_AddControlCharacters(This,prop) ) 

#define Options_put_AddControlCharacters(This,prop)	\
    ( (This)->lpVtbl -> put_AddControlCharacters(This,prop) ) 

#define Options_get_AddBiDirectionalMarksWhenSavingTextFile(This,prop)	\
    ( (This)->lpVtbl -> get_AddBiDirectionalMarksWhenSavingTextFile(This,prop) ) 

#define Options_put_AddBiDirectionalMarksWhenSavingTextFile(This,prop)	\
    ( (This)->lpVtbl -> put_AddBiDirectionalMarksWhenSavingTextFile(This,prop) ) 

#define Options_get_StrictInitialAlefHamza(This,prop)	\
    ( (This)->lpVtbl -> get_StrictInitialAlefHamza(This,prop) ) 

#define Options_put_StrictInitialAlefHamza(This,prop)	\
    ( (This)->lpVtbl -> put_StrictInitialAlefHamza(This,prop) ) 

#define Options_get_StrictFinalYaa(This,prop)	\
    ( (This)->lpVtbl -> get_StrictFinalYaa(This,prop) ) 

#define Options_put_StrictFinalYaa(This,prop)	\
    ( (This)->lpVtbl -> put_StrictFinalYaa(This,prop) ) 

#define Options_get_HebrewMode(This,prop)	\
    ( (This)->lpVtbl -> get_HebrewMode(This,prop) ) 

#define Options_put_HebrewMode(This,prop)	\
    ( (This)->lpVtbl -> put_HebrewMode(This,prop) ) 

#define Options_get_ArabicMode(This,prop)	\
    ( (This)->lpVtbl -> get_ArabicMode(This,prop) ) 

#define Options_put_ArabicMode(This,prop)	\
    ( (This)->lpVtbl -> put_ArabicMode(This,prop) ) 

#define Options_get_AllowClickAndTypeMouse(This,prop)	\
    ( (This)->lpVtbl -> get_AllowClickAndTypeMouse(This,prop) ) 

#define Options_put_AllowClickAndTypeMouse(This,prop)	\
    ( (This)->lpVtbl -> put_AllowClickAndTypeMouse(This,prop) ) 

#define Options_get_UseGermanSpellingReform(This,prop)	\
    ( (This)->lpVtbl -> get_UseGermanSpellingReform(This,prop) ) 

#define Options_put_UseGermanSpellingReform(This,prop)	\
    ( (This)->lpVtbl -> put_UseGermanSpellingReform(This,prop) ) 

#define Options_get_InterpretHighAnsi(This,prop)	\
    ( (This)->lpVtbl -> get_InterpretHighAnsi(This,prop) ) 

#define Options_put_InterpretHighAnsi(This,prop)	\
    ( (This)->lpVtbl -> put_InterpretHighAnsi(This,prop) ) 

#define Options_get_AddHebDoubleQuote(This,prop)	\
    ( (This)->lpVtbl -> get_AddHebDoubleQuote(This,prop) ) 

#define Options_put_AddHebDoubleQuote(This,prop)	\
    ( (This)->lpVtbl -> put_AddHebDoubleQuote(This,prop) ) 

#define Options_get_UseDiffDiacColor(This,prop)	\
    ( (This)->lpVtbl -> get_UseDiffDiacColor(This,prop) ) 

#define Options_put_UseDiffDiacColor(This,prop)	\
    ( (This)->lpVtbl -> put_UseDiffDiacColor(This,prop) ) 

#define Options_get_DiacriticColorVal(This,prop)	\
    ( (This)->lpVtbl -> get_DiacriticColorVal(This,prop) ) 

#define Options_put_DiacriticColorVal(This,prop)	\
    ( (This)->lpVtbl -> put_DiacriticColorVal(This,prop) ) 

#define Options_get_OptimizeForWord97byDefault(This,prop)	\
    ( (This)->lpVtbl -> get_OptimizeForWord97byDefault(This,prop) ) 

#define Options_put_OptimizeForWord97byDefault(This,prop)	\
    ( (This)->lpVtbl -> put_OptimizeForWord97byDefault(This,prop) ) 

#define Options_get_LocalNetworkFile(This,prop)	\
    ( (This)->lpVtbl -> get_LocalNetworkFile(This,prop) ) 

#define Options_put_LocalNetworkFile(This,prop)	\
    ( (This)->lpVtbl -> put_LocalNetworkFile(This,prop) ) 

#define Options_get_TypeNReplace(This,prop)	\
    ( (This)->lpVtbl -> get_TypeNReplace(This,prop) ) 

#define Options_put_TypeNReplace(This,prop)	\
    ( (This)->lpVtbl -> put_TypeNReplace(This,prop) ) 

#define Options_get_SequenceCheck(This,prop)	\
    ( (This)->lpVtbl -> get_SequenceCheck(This,prop) ) 

#define Options_put_SequenceCheck(This,prop)	\
    ( (This)->lpVtbl -> put_SequenceCheck(This,prop) ) 

#define Options_get_BackgroundOpen(This,prop)	\
    ( (This)->lpVtbl -> get_BackgroundOpen(This,prop) ) 

#define Options_put_BackgroundOpen(This,prop)	\
    ( (This)->lpVtbl -> put_BackgroundOpen(This,prop) ) 

#define Options_get_DisableFeaturesbyDefault(This,prop)	\
    ( (This)->lpVtbl -> get_DisableFeaturesbyDefault(This,prop) ) 

#define Options_put_DisableFeaturesbyDefault(This,prop)	\
    ( (This)->lpVtbl -> put_DisableFeaturesbyDefault(This,prop) ) 

#define Options_get_PasteAdjustWordSpacing(This,prop)	\
    ( (This)->lpVtbl -> get_PasteAdjustWordSpacing(This,prop) ) 

#define Options_put_PasteAdjustWordSpacing(This,prop)	\
    ( (This)->lpVtbl -> put_PasteAdjustWordSpacing(This,prop) ) 

#define Options_get_PasteAdjustParagraphSpacing(This,prop)	\
    ( (This)->lpVtbl -> get_PasteAdjustParagraphSpacing(This,prop) ) 

#define Options_put_PasteAdjustParagraphSpacing(This,prop)	\
    ( (This)->lpVtbl -> put_PasteAdjustParagraphSpacing(This,prop) ) 

#define Options_get_PasteAdjustTableFormatting(This,prop)	\
    ( (This)->lpVtbl -> get_PasteAdjustTableFormatting(This,prop) ) 

#define Options_put_PasteAdjustTableFormatting(This,prop)	\
    ( (This)->lpVtbl -> put_PasteAdjustTableFormatting(This,prop) ) 

#define Options_get_PasteSmartStyleBehavior(This,prop)	\
    ( (This)->lpVtbl -> get_PasteSmartStyleBehavior(This,prop) ) 

#define Options_put_PasteSmartStyleBehavior(This,prop)	\
    ( (This)->lpVtbl -> put_PasteSmartStyleBehavior(This,prop) ) 

#define Options_get_PasteMergeFromPPT(This,prop)	\
    ( (This)->lpVtbl -> get_PasteMergeFromPPT(This,prop) ) 

#define Options_put_PasteMergeFromPPT(This,prop)	\
    ( (This)->lpVtbl -> put_PasteMergeFromPPT(This,prop) ) 

#define Options_get_PasteMergeFromXL(This,prop)	\
    ( (This)->lpVtbl -> get_PasteMergeFromXL(This,prop) ) 

#define Options_put_PasteMergeFromXL(This,prop)	\
    ( (This)->lpVtbl -> put_PasteMergeFromXL(This,prop) ) 

#define Options_get_CtrlClickHyperlinkToOpen(This,prop)	\
    ( (This)->lpVtbl -> get_CtrlClickHyperlinkToOpen(This,prop) ) 

#define Options_put_CtrlClickHyperlinkToOpen(This,prop)	\
    ( (This)->lpVtbl -> put_CtrlClickHyperlinkToOpen(This,prop) ) 

#define Options_get_PictureWrapType(This,prop)	\
    ( (This)->lpVtbl -> get_PictureWrapType(This,prop) ) 

#define Options_put_PictureWrapType(This,prop)	\
    ( (This)->lpVtbl -> put_PictureWrapType(This,prop) ) 

#define Options_get_DisableFeaturesIntroducedAfterbyDefault(This,prop)	\
    ( (This)->lpVtbl -> get_DisableFeaturesIntroducedAfterbyDefault(This,prop) ) 

#define Options_put_DisableFeaturesIntroducedAfterbyDefault(This,prop)	\
    ( (This)->lpVtbl -> put_DisableFeaturesIntroducedAfterbyDefault(This,prop) ) 

#define Options_get_PasteSmartCutPaste(This,prop)	\
    ( (This)->lpVtbl -> get_PasteSmartCutPaste(This,prop) ) 

#define Options_put_PasteSmartCutPaste(This,prop)	\
    ( (This)->lpVtbl -> put_PasteSmartCutPaste(This,prop) ) 

#define Options_get_DisplayPasteOptions(This,prop)	\
    ( (This)->lpVtbl -> get_DisplayPasteOptions(This,prop) ) 

#define Options_put_DisplayPasteOptions(This,prop)	\
    ( (This)->lpVtbl -> put_DisplayPasteOptions(This,prop) ) 

#define Options_get_PromptUpdateStyle(This,prop)	\
    ( (This)->lpVtbl -> get_PromptUpdateStyle(This,prop) ) 

#define Options_put_PromptUpdateStyle(This,prop)	\
    ( (This)->lpVtbl -> put_PromptUpdateStyle(This,prop) ) 

#define Options_get_DefaultEPostageApp(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultEPostageApp(This,prop) ) 

#define Options_put_DefaultEPostageApp(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultEPostageApp(This,prop) ) 

#define Options_get_DefaultTextEncoding(This,prop)	\
    ( (This)->lpVtbl -> get_DefaultTextEncoding(This,prop) ) 

#define Options_put_DefaultTextEncoding(This,prop)	\
    ( (This)->lpVtbl -> put_DefaultTextEncoding(This,prop) ) 

#define Options_get_LabelSmartTags(This,prop)	\
    ( (This)->lpVtbl -> get_LabelSmartTags(This,prop) ) 

#define Options_put_LabelSmartTags(This,prop)	\
    ( (This)->lpVtbl -> put_LabelSmartTags(This,prop) ) 

#define Options_get_DisplaySmartTagButtons(This,prop)	\
    ( (This)->lpVtbl -> get_DisplaySmartTagButtons(This,prop) ) 

#define Options_put_DisplaySmartTagButtons(This,prop)	\
    ( (This)->lpVtbl -> put_DisplaySmartTagButtons(This,prop) ) 

#define Options_get_WarnBeforeSavingPrintingSendingMarkup(This,prop)	\
    ( (This)->lpVtbl -> get_WarnBeforeSavingPrintingSendingMarkup(This,prop) ) 

#define Options_put_WarnBeforeSavingPrintingSendingMarkup(This,prop)	\
    ( (This)->lpVtbl -> put_WarnBeforeSavingPrintingSendingMarkup(This,prop) ) 

#define Options_get_StoreRSIDOnSave(This,prop)	\
    ( (This)->lpVtbl -> get_StoreRSIDOnSave(This,prop) ) 

#define Options_put_StoreRSIDOnSave(This,prop)	\
    ( (This)->lpVtbl -> put_StoreRSIDOnSave(This,prop) ) 

#define Options_get_ShowFormatError(This,prop)	\
    ( (This)->lpVtbl -> get_ShowFormatError(This,prop) ) 

#define Options_put_ShowFormatError(This,prop)	\
    ( (This)->lpVtbl -> put_ShowFormatError(This,prop) ) 

#define Options_get_FormatScanning(This,prop)	\
    ( (This)->lpVtbl -> get_FormatScanning(This,prop) ) 

#define Options_put_FormatScanning(This,prop)	\
    ( (This)->lpVtbl -> put_FormatScanning(This,prop) ) 

#define Options_get_PasteMergeLists(This,prop)	\
    ( (This)->lpVtbl -> get_PasteMergeLists(This,prop) ) 

#define Options_put_PasteMergeLists(This,prop)	\
    ( (This)->lpVtbl -> put_PasteMergeLists(This,prop) ) 

#define Options_get_AutoCreateNewDrawings(This,prop)	\
    ( (This)->lpVtbl -> get_AutoCreateNewDrawings(This,prop) ) 

#define Options_put_AutoCreateNewDrawings(This,prop)	\
    ( (This)->lpVtbl -> put_AutoCreateNewDrawings(This,prop) ) 

#define Options_get_SmartParaSelection(This,prop)	\
    ( (This)->lpVtbl -> get_SmartParaSelection(This,prop) ) 

#define Options_put_SmartParaSelection(This,prop)	\
    ( (This)->lpVtbl -> put_SmartParaSelection(This,prop) ) 

#define Options_get_RevisionsBalloonPrintOrientation(This,prop)	\
    ( (This)->lpVtbl -> get_RevisionsBalloonPrintOrientation(This,prop) ) 

#define Options_put_RevisionsBalloonPrintOrientation(This,prop)	\
    ( (This)->lpVtbl -> put_RevisionsBalloonPrintOrientation(This,prop) ) 

#define Options_get_CommentsColor(This,prop)	\
    ( (This)->lpVtbl -> get_CommentsColor(This,prop) ) 

#define Options_put_CommentsColor(This,prop)	\
    ( (This)->lpVtbl -> put_CommentsColor(This,prop) ) 

#define Options_get_PrintXMLTag(This,prop)	\
    ( (This)->lpVtbl -> get_PrintXMLTag(This,prop) ) 

#define Options_put_PrintXMLTag(This,prop)	\
    ( (This)->lpVtbl -> put_PrintXMLTag(This,prop) ) 

#define Options_get_PrintBackgrounds(This,prop)	\
    ( (This)->lpVtbl -> get_PrintBackgrounds(This,prop) ) 

#define Options_put_PrintBackgrounds(This,prop)	\
    ( (This)->lpVtbl -> put_PrintBackgrounds(This,prop) ) 

#define Options_get_AllowReadingMode(This,prop)	\
    ( (This)->lpVtbl -> get_AllowReadingMode(This,prop) ) 

#define Options_put_AllowReadingMode(This,prop)	\
    ( (This)->lpVtbl -> put_AllowReadingMode(This,prop) ) 

#define Options_get_ShowMarkupOpenSave(This,prop)	\
    ( (This)->lpVtbl -> get_ShowMarkupOpenSave(This,prop) ) 

#define Options_put_ShowMarkupOpenSave(This,prop)	\
    ( (This)->lpVtbl -> put_ShowMarkupOpenSave(This,prop) ) 

#define Options_get_SmartCursoring(This,prop)	\
    ( (This)->lpVtbl -> get_SmartCursoring(This,prop) ) 

#define Options_put_SmartCursoring(This,prop)	\
    ( (This)->lpVtbl -> put_SmartCursoring(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatApplyBulletedLists_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatApplyBulletedLists_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatApplyOtherParas_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatApplyOtherParas_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatApplyOtherParas_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatApplyOtherParas_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatReplaceQuotes_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatReplaceQuotes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatReplaceQuotes_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatReplaceQuotes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatReplaceSymbols_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatReplaceSymbols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatReplaceSymbols_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatReplaceSymbols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatReplaceOrdinals_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatReplaceOrdinals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatReplaceOrdinals_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatReplaceOrdinals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatReplaceFractions_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatReplaceFractions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatReplaceFractions_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatReplaceFractions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatReplacePlainTextEmphasis_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatReplacePlainTextEmphasis_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatReplacePlainTextEmphasis_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatReplacePlainTextEmphasis_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatPreserveStyles_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatPreserveStyles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatPreserveStyles_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatPreserveStyles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeApplyHeadings_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeApplyHeadings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeApplyHeadings_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeApplyHeadings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeApplyBorders_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeApplyBorders_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeApplyBorders_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeApplyBorders_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeApplyBulletedLists_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeApplyBulletedLists_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeApplyBulletedLists_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeApplyBulletedLists_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeApplyNumberedLists_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeApplyNumberedLists_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeApplyNumberedLists_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeApplyNumberedLists_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeReplaceQuotes_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeReplaceQuotes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeReplaceQuotes_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeReplaceQuotes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeReplaceSymbols_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeReplaceSymbols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeReplaceSymbols_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeReplaceSymbols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeReplaceOrdinals_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeReplaceOrdinals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeReplaceOrdinals_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeReplaceOrdinals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeReplaceFractions_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeReplaceFractions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeReplaceFractions_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeReplaceFractions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeReplacePlainTextEmphasis_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeReplacePlainTextEmphasis_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeReplacePlainTextEmphasis_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeReplacePlainTextEmphasis_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeFormatListItemBeginning_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeFormatListItemBeginning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeFormatListItemBeginning_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeFormatListItemBeginning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeDefineStyles_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeDefineStyles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeDefineStyles_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeDefineStyles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatPlainTextWordMail_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatPlainTextWordMail_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatPlainTextWordMail_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatPlainTextWordMail_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeReplaceHyperlinks_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeReplaceHyperlinks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeReplaceHyperlinks_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeReplaceHyperlinks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatReplaceHyperlinks_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatReplaceHyperlinks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatReplaceHyperlinks_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatReplaceHyperlinks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_DefaultHighlightColorIndex_Proxy( 
    Options * This,
    /* [retval][out] */ WdColorIndex *prop);


void __RPC_STUB Options_get_DefaultHighlightColorIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_DefaultHighlightColorIndex_Proxy( 
    Options * This,
    /* [in] */ WdColorIndex prop);


void __RPC_STUB Options_put_DefaultHighlightColorIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_DefaultBorderLineStyle_Proxy( 
    Options * This,
    /* [retval][out] */ WdLineStyle *prop);


void __RPC_STUB Options_get_DefaultBorderLineStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_DefaultBorderLineStyle_Proxy( 
    Options * This,
    /* [in] */ WdLineStyle prop);


void __RPC_STUB Options_put_DefaultBorderLineStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_CheckSpellingAsYouType_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_CheckSpellingAsYouType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_CheckSpellingAsYouType_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_CheckSpellingAsYouType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_CheckGrammarAsYouType_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_CheckGrammarAsYouType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_CheckGrammarAsYouType_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_CheckGrammarAsYouType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_IgnoreInternetAndFileAddresses_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_IgnoreInternetAndFileAddresses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_IgnoreInternetAndFileAddresses_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_IgnoreInternetAndFileAddresses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_ShowReadabilityStatistics_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_ShowReadabilityStatistics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_ShowReadabilityStatistics_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_ShowReadabilityStatistics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_IgnoreUppercase_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_IgnoreUppercase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_IgnoreUppercase_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_IgnoreUppercase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_IgnoreMixedDigits_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_IgnoreMixedDigits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_IgnoreMixedDigits_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_IgnoreMixedDigits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_SuggestFromMainDictionaryOnly_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_SuggestFromMainDictionaryOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_SuggestFromMainDictionaryOnly_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_SuggestFromMainDictionaryOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_SuggestSpellingCorrections_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_SuggestSpellingCorrections_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_SuggestSpellingCorrections_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_SuggestSpellingCorrections_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_DefaultBorderLineWidth_Proxy( 
    Options * This,
    /* [retval][out] */ WdLineWidth *prop);


void __RPC_STUB Options_get_DefaultBorderLineWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_DefaultBorderLineWidth_Proxy( 
    Options * This,
    /* [in] */ WdLineWidth prop);


void __RPC_STUB Options_put_DefaultBorderLineWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_CheckGrammarWithSpelling_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_CheckGrammarWithSpelling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_CheckGrammarWithSpelling_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_CheckGrammarWithSpelling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_DefaultOpenFormat_Proxy( 
    Options * This,
    /* [retval][out] */ WdOpenFormat *prop);


void __RPC_STUB Options_get_DefaultOpenFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_DefaultOpenFormat_Proxy( 
    Options * This,
    /* [in] */ WdOpenFormat prop);


void __RPC_STUB Options_put_DefaultOpenFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_PrintDraft_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_PrintDraft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_PrintDraft_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_PrintDraft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_PrintReverse_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_PrintReverse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_PrintReverse_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_PrintReverse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MapPaperSize_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MapPaperSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MapPaperSize_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MapPaperSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeApplyTables_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeApplyTables_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeApplyTables_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeApplyTables_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatApplyFirstIndents_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatApplyFirstIndents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatApplyFirstIndents_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatApplyFirstIndents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatMatchParentheses_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatMatchParentheses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatMatchParentheses_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatMatchParentheses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatReplaceFarEastDashes_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatReplaceFarEastDashes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatReplaceFarEastDashes_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatReplaceFarEastDashes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatDeleteAutoSpaces_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatDeleteAutoSpaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatDeleteAutoSpaces_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatDeleteAutoSpaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeApplyFirstIndents_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeApplyFirstIndents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeApplyFirstIndents_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeApplyFirstIndents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeApplyDates_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeApplyDates_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeApplyDates_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeApplyDates_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeApplyClosings_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeApplyClosings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeApplyClosings_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeApplyClosings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeMatchParentheses_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeMatchParentheses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeMatchParentheses_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeMatchParentheses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeReplaceFarEastDashes_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeReplaceFarEastDashes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeReplaceFarEastDashes_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeReplaceFarEastDashes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeDeleteAutoSpaces_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeDeleteAutoSpaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeDeleteAutoSpaces_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeDeleteAutoSpaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeInsertClosings_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeInsertClosings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeInsertClosings_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeInsertClosings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeAutoLetterWizard_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeAutoLetterWizard_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeAutoLetterWizard_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeAutoLetterWizard_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoFormatAsYouTypeInsertOvers_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoFormatAsYouTypeInsertOvers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoFormatAsYouTypeInsertOvers_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoFormatAsYouTypeInsertOvers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_DisplayGridLines_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_DisplayGridLines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_DisplayGridLines_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_DisplayGridLines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzyCase_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzyCase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzyCase_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzyCase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzyByte_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzyByte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzyByte_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzyByte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzyHiragana_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzyHiragana_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzyHiragana_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzyHiragana_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzySmallKana_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzySmallKana_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzySmallKana_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzySmallKana_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzyDash_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzyDash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzyDash_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzyDash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzyIterationMark_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzyIterationMark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzyIterationMark_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzyIterationMark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzyKanji_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzyKanji_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzyKanji_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzyKanji_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzyOldKana_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzyOldKana_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzyOldKana_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzyOldKana_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzyProlongedSoundMark_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzyProlongedSoundMark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzyProlongedSoundMark_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzyProlongedSoundMark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzyDZ_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzyDZ_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzyDZ_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzyDZ_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzyBV_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzyBV_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzyBV_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzyBV_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzyTC_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzyTC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzyTC_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzyTC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzyHF_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzyHF_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzyHF_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzyHF_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzyZJ_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzyZJ_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzyZJ_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzyZJ_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzyAY_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzyAY_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzyAY_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzyAY_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzyKiKu_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzyKiKu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzyKiKu_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzyKiKu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzyPunctuation_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzyPunctuation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzyPunctuation_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzyPunctuation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MatchFuzzySpace_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_MatchFuzzySpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MatchFuzzySpace_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_MatchFuzzySpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_ApplyFarEastFontsToAscii_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_ApplyFarEastFontsToAscii_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_ApplyFarEastFontsToAscii_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_ApplyFarEastFontsToAscii_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_ConvertHighAnsiToFarEast_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_ConvertHighAnsiToFarEast_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_ConvertHighAnsiToFarEast_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_ConvertHighAnsiToFarEast_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_PrintOddPagesInAscendingOrder_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_PrintOddPagesInAscendingOrder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_PrintOddPagesInAscendingOrder_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_PrintOddPagesInAscendingOrder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_PrintEvenPagesInAscendingOrder_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_PrintEvenPagesInAscendingOrder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_PrintEvenPagesInAscendingOrder_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_PrintEvenPagesInAscendingOrder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_DefaultBorderColorIndex_Proxy( 
    Options * This,
    /* [retval][out] */ WdColorIndex *prop);


void __RPC_STUB Options_get_DefaultBorderColorIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_DefaultBorderColorIndex_Proxy( 
    Options * This,
    /* [in] */ WdColorIndex prop);


void __RPC_STUB Options_put_DefaultBorderColorIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_EnableMisusedWordsDictionary_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_EnableMisusedWordsDictionary_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_EnableMisusedWordsDictionary_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_EnableMisusedWordsDictionary_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AllowCombinedAuxiliaryForms_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AllowCombinedAuxiliaryForms_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AllowCombinedAuxiliaryForms_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AllowCombinedAuxiliaryForms_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_HangulHanjaFastConversion_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_HangulHanjaFastConversion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_HangulHanjaFastConversion_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_HangulHanjaFastConversion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_CheckHangulEndings_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_CheckHangulEndings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_CheckHangulEndings_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_CheckHangulEndings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_EnableHangulHanjaRecentOrdering_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_EnableHangulHanjaRecentOrdering_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_EnableHangulHanjaRecentOrdering_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_EnableHangulHanjaRecentOrdering_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MultipleWordConversionsMode_Proxy( 
    Options * This,
    /* [retval][out] */ WdMultipleWordConversionsMode *prop);


void __RPC_STUB Options_get_MultipleWordConversionsMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MultipleWordConversionsMode_Proxy( 
    Options * This,
    /* [in] */ WdMultipleWordConversionsMode prop);


void __RPC_STUB Options_put_MultipleWordConversionsMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Options_SetWPHelpOptions_Proxy( 
    Options * This,
    /* [optional][in] */ VARIANT *CommandKeyHelp,
    /* [optional][in] */ VARIANT *DocNavigationKeys,
    /* [optional][in] */ VARIANT *MouseSimulation,
    /* [optional][in] */ VARIANT *DemoGuidance,
    /* [optional][in] */ VARIANT *DemoSpeed,
    /* [optional][in] */ VARIANT *HelpType);


void __RPC_STUB Options_SetWPHelpOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_DefaultBorderColor_Proxy( 
    Options * This,
    /* [retval][out] */ WdColor *prop);


void __RPC_STUB Options_get_DefaultBorderColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_DefaultBorderColor_Proxy( 
    Options * This,
    /* [in] */ WdColor prop);


void __RPC_STUB Options_put_DefaultBorderColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AllowPixelUnits_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AllowPixelUnits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AllowPixelUnits_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AllowPixelUnits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_UseCharacterUnit_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_UseCharacterUnit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_UseCharacterUnit_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_UseCharacterUnit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AllowCompoundNounProcessing_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AllowCompoundNounProcessing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AllowCompoundNounProcessing_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AllowCompoundNounProcessing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoKeyboardSwitching_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoKeyboardSwitching_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoKeyboardSwitching_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoKeyboardSwitching_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_DocumentViewDirection_Proxy( 
    Options * This,
    /* [retval][out] */ WdDocumentViewDirection *prop);


void __RPC_STUB Options_get_DocumentViewDirection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_DocumentViewDirection_Proxy( 
    Options * This,
    /* [in] */ WdDocumentViewDirection prop);


void __RPC_STUB Options_put_DocumentViewDirection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_ArabicNumeral_Proxy( 
    Options * This,
    /* [retval][out] */ WdArabicNumeral *prop);


void __RPC_STUB Options_get_ArabicNumeral_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_ArabicNumeral_Proxy( 
    Options * This,
    /* [in] */ WdArabicNumeral prop);


void __RPC_STUB Options_put_ArabicNumeral_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_MonthNames_Proxy( 
    Options * This,
    /* [retval][out] */ WdMonthNames *prop);


void __RPC_STUB Options_get_MonthNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_MonthNames_Proxy( 
    Options * This,
    /* [in] */ WdMonthNames prop);


void __RPC_STUB Options_put_MonthNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_CursorMovement_Proxy( 
    Options * This,
    /* [retval][out] */ WdCursorMovement *prop);


void __RPC_STUB Options_get_CursorMovement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_CursorMovement_Proxy( 
    Options * This,
    /* [in] */ WdCursorMovement prop);


void __RPC_STUB Options_put_CursorMovement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_VisualSelection_Proxy( 
    Options * This,
    /* [retval][out] */ WdVisualSelection *prop);


void __RPC_STUB Options_get_VisualSelection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_VisualSelection_Proxy( 
    Options * This,
    /* [in] */ WdVisualSelection prop);


void __RPC_STUB Options_put_VisualSelection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_ShowDiacritics_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_ShowDiacritics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_ShowDiacritics_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_ShowDiacritics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_ShowControlCharacters_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_ShowControlCharacters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_ShowControlCharacters_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_ShowControlCharacters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AddControlCharacters_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AddControlCharacters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AddControlCharacters_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AddControlCharacters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AddBiDirectionalMarksWhenSavingTextFile_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AddBiDirectionalMarksWhenSavingTextFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AddBiDirectionalMarksWhenSavingTextFile_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AddBiDirectionalMarksWhenSavingTextFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_StrictInitialAlefHamza_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_StrictInitialAlefHamza_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_StrictInitialAlefHamza_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_StrictInitialAlefHamza_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_StrictFinalYaa_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_StrictFinalYaa_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_StrictFinalYaa_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_StrictFinalYaa_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_HebrewMode_Proxy( 
    Options * This,
    /* [retval][out] */ WdHebSpellStart *prop);


void __RPC_STUB Options_get_HebrewMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_HebrewMode_Proxy( 
    Options * This,
    /* [in] */ WdHebSpellStart prop);


void __RPC_STUB Options_put_HebrewMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_ArabicMode_Proxy( 
    Options * This,
    /* [retval][out] */ WdAraSpeller *prop);


void __RPC_STUB Options_get_ArabicMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_ArabicMode_Proxy( 
    Options * This,
    /* [in] */ WdAraSpeller prop);


void __RPC_STUB Options_put_ArabicMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AllowClickAndTypeMouse_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AllowClickAndTypeMouse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AllowClickAndTypeMouse_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AllowClickAndTypeMouse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_UseGermanSpellingReform_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_UseGermanSpellingReform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_UseGermanSpellingReform_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_UseGermanSpellingReform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_InterpretHighAnsi_Proxy( 
    Options * This,
    /* [retval][out] */ WdHighAnsiText *prop);


void __RPC_STUB Options_get_InterpretHighAnsi_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_InterpretHighAnsi_Proxy( 
    Options * This,
    /* [in] */ WdHighAnsiText prop);


void __RPC_STUB Options_put_InterpretHighAnsi_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AddHebDoubleQuote_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AddHebDoubleQuote_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AddHebDoubleQuote_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AddHebDoubleQuote_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_UseDiffDiacColor_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_UseDiffDiacColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_UseDiffDiacColor_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_UseDiffDiacColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_DiacriticColorVal_Proxy( 
    Options * This,
    /* [retval][out] */ WdColor *prop);


void __RPC_STUB Options_get_DiacriticColorVal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_DiacriticColorVal_Proxy( 
    Options * This,
    /* [in] */ WdColor prop);


void __RPC_STUB Options_put_DiacriticColorVal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_OptimizeForWord97byDefault_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_OptimizeForWord97byDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_OptimizeForWord97byDefault_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_OptimizeForWord97byDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_LocalNetworkFile_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_LocalNetworkFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_LocalNetworkFile_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_LocalNetworkFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_TypeNReplace_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_TypeNReplace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_TypeNReplace_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_TypeNReplace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_SequenceCheck_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_SequenceCheck_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_SequenceCheck_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_SequenceCheck_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_BackgroundOpen_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_BackgroundOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_BackgroundOpen_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_BackgroundOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_DisableFeaturesbyDefault_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_DisableFeaturesbyDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_DisableFeaturesbyDefault_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_DisableFeaturesbyDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_PasteAdjustWordSpacing_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_PasteAdjustWordSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_PasteAdjustWordSpacing_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_PasteAdjustWordSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_PasteAdjustParagraphSpacing_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_PasteAdjustParagraphSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_PasteAdjustParagraphSpacing_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_PasteAdjustParagraphSpacing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_PasteAdjustTableFormatting_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_PasteAdjustTableFormatting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_PasteAdjustTableFormatting_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_PasteAdjustTableFormatting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_PasteSmartStyleBehavior_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_PasteSmartStyleBehavior_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_PasteSmartStyleBehavior_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_PasteSmartStyleBehavior_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_PasteMergeFromPPT_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_PasteMergeFromPPT_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_PasteMergeFromPPT_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_PasteMergeFromPPT_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_PasteMergeFromXL_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_PasteMergeFromXL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_PasteMergeFromXL_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_PasteMergeFromXL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_CtrlClickHyperlinkToOpen_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_CtrlClickHyperlinkToOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_CtrlClickHyperlinkToOpen_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_CtrlClickHyperlinkToOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_PictureWrapType_Proxy( 
    Options * This,
    /* [retval][out] */ WdWrapTypeMerged *prop);


void __RPC_STUB Options_get_PictureWrapType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_PictureWrapType_Proxy( 
    Options * This,
    /* [in] */ WdWrapTypeMerged prop);


void __RPC_STUB Options_put_PictureWrapType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_DisableFeaturesIntroducedAfterbyDefault_Proxy( 
    Options * This,
    /* [retval][out] */ WdDisableFeaturesIntroducedAfter *prop);


void __RPC_STUB Options_get_DisableFeaturesIntroducedAfterbyDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_DisableFeaturesIntroducedAfterbyDefault_Proxy( 
    Options * This,
    /* [in] */ WdDisableFeaturesIntroducedAfter prop);


void __RPC_STUB Options_put_DisableFeaturesIntroducedAfterbyDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_PasteSmartCutPaste_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_PasteSmartCutPaste_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_PasteSmartCutPaste_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_PasteSmartCutPaste_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_DisplayPasteOptions_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_DisplayPasteOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_DisplayPasteOptions_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_DisplayPasteOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_PromptUpdateStyle_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_PromptUpdateStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_PromptUpdateStyle_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_PromptUpdateStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_DefaultEPostageApp_Proxy( 
    Options * This,
    /* [retval][out] */ BSTR *prop);


void __RPC_STUB Options_get_DefaultEPostageApp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_DefaultEPostageApp_Proxy( 
    Options * This,
    /* [in] */ BSTR prop);


void __RPC_STUB Options_put_DefaultEPostageApp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_DefaultTextEncoding_Proxy( 
    Options * This,
    /* [retval][out] */ MsoEncoding *prop);


void __RPC_STUB Options_get_DefaultTextEncoding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_DefaultTextEncoding_Proxy( 
    Options * This,
    /* [in] */ MsoEncoding prop);


void __RPC_STUB Options_put_DefaultTextEncoding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_LabelSmartTags_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_LabelSmartTags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_LabelSmartTags_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_LabelSmartTags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_DisplaySmartTagButtons_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_DisplaySmartTagButtons_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_DisplaySmartTagButtons_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_DisplaySmartTagButtons_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_WarnBeforeSavingPrintingSendingMarkup_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_WarnBeforeSavingPrintingSendingMarkup_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_WarnBeforeSavingPrintingSendingMarkup_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_WarnBeforeSavingPrintingSendingMarkup_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_StoreRSIDOnSave_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_StoreRSIDOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_StoreRSIDOnSave_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_StoreRSIDOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_ShowFormatError_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_ShowFormatError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_ShowFormatError_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_ShowFormatError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_FormatScanning_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_FormatScanning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_FormatScanning_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_FormatScanning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_PasteMergeLists_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_PasteMergeLists_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_PasteMergeLists_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_PasteMergeLists_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AutoCreateNewDrawings_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AutoCreateNewDrawings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AutoCreateNewDrawings_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AutoCreateNewDrawings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_SmartParaSelection_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_SmartParaSelection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_SmartParaSelection_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_SmartParaSelection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_RevisionsBalloonPrintOrientation_Proxy( 
    Options * This,
    /* [retval][out] */ WdRevisionsBalloonPrintOrientation *prop);


void __RPC_STUB Options_get_RevisionsBalloonPrintOrientation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_RevisionsBalloonPrintOrientation_Proxy( 
    Options * This,
    /* [in] */ WdRevisionsBalloonPrintOrientation prop);


void __RPC_STUB Options_put_RevisionsBalloonPrintOrientation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_CommentsColor_Proxy( 
    Options * This,
    /* [retval][out] */ WdColorIndex *prop);


void __RPC_STUB Options_get_CommentsColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_CommentsColor_Proxy( 
    Options * This,
    /* [in] */ WdColorIndex prop);


void __RPC_STUB Options_put_CommentsColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_PrintXMLTag_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_PrintXMLTag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_PrintXMLTag_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_PrintXMLTag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_PrintBackgrounds_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_PrintBackgrounds_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_PrintBackgrounds_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_PrintBackgrounds_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_AllowReadingMode_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_AllowReadingMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_AllowReadingMode_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_AllowReadingMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_ShowMarkupOpenSave_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_ShowMarkupOpenSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_ShowMarkupOpenSave_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_ShowMarkupOpenSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Options_get_SmartCursoring_Proxy( 
    Options * This,
    /* [retval][out] */ VARIANT_BOOL *prop);


void __RPC_STUB Options_get_SmartCursoring_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Options_put_SmartCursoring_Proxy( 
    Options * This,
    /* [in] */ VARIANT_BOOL prop);


void __RPC_STUB Options_put_SmartCursoring_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Options_INTERFACE_DEFINED__ */


#ifndef __MailMessage_INTERFACE_DEFINED__
#define __MailMessage_INTERFACE_DEFINED__

/* interface MailMessage */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_MailMessage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209BA-0000-0000-C000-000000000046")
    MailMessage : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckName( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DisplayMoveDialog( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DisplayProperties( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DisplaySelectNamesDialog( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Forward( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GoToNext( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE GoToPrevious( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Reply( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReplyAll( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToggleHeader( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MailMessageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MailMessage * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MailMessage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MailMessage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MailMessage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MailMessage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MailMessage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MailMessage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            MailMessage * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            MailMessage * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MailMessage * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckName )( 
            MailMessage * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            MailMessage * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DisplayMoveDialog )( 
            MailMessage * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DisplayProperties )( 
            MailMessage * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DisplaySelectNamesDialog )( 
            MailMessage * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Forward )( 
            MailMessage * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GoToNext )( 
            MailMessage * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GoToPrevious )( 
            MailMessage * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Reply )( 
            MailMessage * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReplyAll )( 
            MailMessage * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ToggleHeader )( 
            MailMessage * This);
        
        END_INTERFACE
    } MailMessageVtbl;

    interface MailMessage
    {
        CONST_VTBL struct MailMessageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MailMessage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MailMessage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MailMessage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MailMessage_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MailMessage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MailMessage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MailMessage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MailMessage_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define MailMessage_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define MailMessage_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define MailMessage_CheckName(This)	\
    ( (This)->lpVtbl -> CheckName(This) ) 

#define MailMessage_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define MailMessage_DisplayMoveDialog(This)	\
    ( (This)->lpVtbl -> DisplayMoveDialog(This) ) 

#define MailMessage_DisplayProperties(This)	\
    ( (This)->lpVtbl -> DisplayProperties(This) ) 

#define MailMessage_DisplaySelectNamesDialog(This)	\
    ( (This)->lpVtbl -> DisplaySelectNamesDialog(This) ) 

#define MailMessage_Forward(This)	\
    ( (This)->lpVtbl -> Forward(This) ) 

#define MailMessage_GoToNext(This)	\
    ( (This)->lpVtbl -> GoToNext(This) ) 

#define MailMessage_GoToPrevious(This)	\
    ( (This)->lpVtbl -> GoToPrevious(This) ) 

#define MailMessage_Reply(This)	\
    ( (This)->lpVtbl -> Reply(This) ) 

#define MailMessage_ReplyAll(This)	\
    ( (This)->lpVtbl -> ReplyAll(This) ) 

#define MailMessage_ToggleHeader(This)	\
    ( (This)->lpVtbl -> ToggleHeader(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MailMessage_INTERFACE_DEFINED__ */


#ifndef __ProofreadingErrors_INTERFACE_DEFINED__
#define __ProofreadingErrors_INTERFACE_DEFINED__

/* interface ProofreadingErrors */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ProofreadingErrors;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209BB-0000-0000-C000-000000000046")
    ProofreadingErrors : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdProofreadingErrorType *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Range **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProofreadingErrorsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ProofreadingErrors * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ProofreadingErrors * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ProofreadingErrors * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ProofreadingErrors * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ProofreadingErrors * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ProofreadingErrors * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ProofreadingErrors * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ProofreadingErrors * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ProofreadingErrors * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ProofreadingErrors * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ProofreadingErrors * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ProofreadingErrors * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ProofreadingErrors * This,
            /* [retval][out] */ WdProofreadingErrorType *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ProofreadingErrors * This,
            /* [in] */ long Index,
            /* [retval][out] */ Range **prop);
        
        END_INTERFACE
    } ProofreadingErrorsVtbl;

    interface ProofreadingErrors
    {
        CONST_VTBL struct ProofreadingErrorsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ProofreadingErrors_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ProofreadingErrors_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ProofreadingErrors_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ProofreadingErrors_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ProofreadingErrors_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ProofreadingErrors_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ProofreadingErrors_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ProofreadingErrors_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ProofreadingErrors_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ProofreadingErrors_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ProofreadingErrors_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define ProofreadingErrors_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define ProofreadingErrors_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define ProofreadingErrors_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ProofreadingErrors_INTERFACE_DEFINED__ */


#ifndef __Mailer_INTERFACE_DEFINED__
#define __Mailer_INTERFACE_DEFINED__

/* interface Mailer */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Mailer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209BD-0000-0000-C000-000000000046")
    Mailer : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BCCRecipients( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BCCRecipients( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CCRecipients( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CCRecipients( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Recipients( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Recipients( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Enclosures( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Enclosures( 
            /* [in] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Sender( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SendDateTime( 
            /* [retval][out] */ DATE *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Received( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Subject( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Subject( 
            /* [in] */ BSTR prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MailerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Mailer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Mailer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Mailer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Mailer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Mailer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Mailer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Mailer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Mailer * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Mailer * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Mailer * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BCCRecipients )( 
            Mailer * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BCCRecipients )( 
            Mailer * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CCRecipients )( 
            Mailer * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CCRecipients )( 
            Mailer * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Recipients )( 
            Mailer * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Recipients )( 
            Mailer * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Enclosures )( 
            Mailer * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Enclosures )( 
            Mailer * This,
            /* [in] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Sender )( 
            Mailer * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SendDateTime )( 
            Mailer * This,
            /* [retval][out] */ DATE *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Received )( 
            Mailer * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Subject )( 
            Mailer * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Subject )( 
            Mailer * This,
            /* [in] */ BSTR prop);
        
        END_INTERFACE
    } MailerVtbl;

    interface Mailer
    {
        CONST_VTBL struct MailerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Mailer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Mailer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Mailer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Mailer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Mailer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Mailer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Mailer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Mailer_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Mailer_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Mailer_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Mailer_get_BCCRecipients(This,prop)	\
    ( (This)->lpVtbl -> get_BCCRecipients(This,prop) ) 

#define Mailer_put_BCCRecipients(This,prop)	\
    ( (This)->lpVtbl -> put_BCCRecipients(This,prop) ) 

#define Mailer_get_CCRecipients(This,prop)	\
    ( (This)->lpVtbl -> get_CCRecipients(This,prop) ) 

#define Mailer_put_CCRecipients(This,prop)	\
    ( (This)->lpVtbl -> put_CCRecipients(This,prop) ) 

#define Mailer_get_Recipients(This,prop)	\
    ( (This)->lpVtbl -> get_Recipients(This,prop) ) 

#define Mailer_put_Recipients(This,prop)	\
    ( (This)->lpVtbl -> put_Recipients(This,prop) ) 

#define Mailer_get_Enclosures(This,prop)	\
    ( (This)->lpVtbl -> get_Enclosures(This,prop) ) 

#define Mailer_put_Enclosures(This,prop)	\
    ( (This)->lpVtbl -> put_Enclosures(This,prop) ) 

#define Mailer_get_Sender(This,prop)	\
    ( (This)->lpVtbl -> get_Sender(This,prop) ) 

#define Mailer_get_SendDateTime(This,prop)	\
    ( (This)->lpVtbl -> get_SendDateTime(This,prop) ) 

#define Mailer_get_Received(This,prop)	\
    ( (This)->lpVtbl -> get_Received(This,prop) ) 

#define Mailer_get_Subject(This,prop)	\
    ( (This)->lpVtbl -> get_Subject(This,prop) ) 

#define Mailer_put_Subject(This,prop)	\
    ( (This)->lpVtbl -> put_Subject(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Mailer_INTERFACE_DEFINED__ */


#ifndef __WrapFormat_INTERFACE_DEFINED__
#define __WrapFormat_INTERFACE_DEFINED__

/* interface WrapFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_WrapFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209C3-0000-0000-C000-000000000046")
    WrapFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdWrapType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ WdWrapType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Side( 
            /* [retval][out] */ WdWrapSideType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Side( 
            /* [in] */ WdWrapSideType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DistanceTop( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DistanceTop( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DistanceBottom( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DistanceBottom( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DistanceLeft( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DistanceLeft( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DistanceRight( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DistanceRight( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowOverlap( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowOverlap( 
            /* [in] */ long prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WrapFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WrapFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WrapFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WrapFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WrapFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WrapFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WrapFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WrapFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            WrapFormat * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            WrapFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WrapFormat * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            WrapFormat * This,
            /* [retval][out] */ WdWrapType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            WrapFormat * This,
            /* [in] */ WdWrapType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Side )( 
            WrapFormat * This,
            /* [retval][out] */ WdWrapSideType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Side )( 
            WrapFormat * This,
            /* [in] */ WdWrapSideType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DistanceTop )( 
            WrapFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DistanceTop )( 
            WrapFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DistanceBottom )( 
            WrapFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DistanceBottom )( 
            WrapFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DistanceLeft )( 
            WrapFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DistanceLeft )( 
            WrapFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DistanceRight )( 
            WrapFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DistanceRight )( 
            WrapFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowOverlap )( 
            WrapFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowOverlap )( 
            WrapFormat * This,
            /* [in] */ long prop);
        
        END_INTERFACE
    } WrapFormatVtbl;

    interface WrapFormat
    {
        CONST_VTBL struct WrapFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WrapFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WrapFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WrapFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WrapFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WrapFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WrapFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WrapFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WrapFormat_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define WrapFormat_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define WrapFormat_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define WrapFormat_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define WrapFormat_put_Type(This,prop)	\
    ( (This)->lpVtbl -> put_Type(This,prop) ) 

#define WrapFormat_get_Side(This,prop)	\
    ( (This)->lpVtbl -> get_Side(This,prop) ) 

#define WrapFormat_put_Side(This,prop)	\
    ( (This)->lpVtbl -> put_Side(This,prop) ) 

#define WrapFormat_get_DistanceTop(This,prop)	\
    ( (This)->lpVtbl -> get_DistanceTop(This,prop) ) 

#define WrapFormat_put_DistanceTop(This,prop)	\
    ( (This)->lpVtbl -> put_DistanceTop(This,prop) ) 

#define WrapFormat_get_DistanceBottom(This,prop)	\
    ( (This)->lpVtbl -> get_DistanceBottom(This,prop) ) 

#define WrapFormat_put_DistanceBottom(This,prop)	\
    ( (This)->lpVtbl -> put_DistanceBottom(This,prop) ) 

#define WrapFormat_get_DistanceLeft(This,prop)	\
    ( (This)->lpVtbl -> get_DistanceLeft(This,prop) ) 

#define WrapFormat_put_DistanceLeft(This,prop)	\
    ( (This)->lpVtbl -> put_DistanceLeft(This,prop) ) 

#define WrapFormat_get_DistanceRight(This,prop)	\
    ( (This)->lpVtbl -> get_DistanceRight(This,prop) ) 

#define WrapFormat_put_DistanceRight(This,prop)	\
    ( (This)->lpVtbl -> put_DistanceRight(This,prop) ) 

#define WrapFormat_get_AllowOverlap(This,prop)	\
    ( (This)->lpVtbl -> get_AllowOverlap(This,prop) ) 

#define WrapFormat_put_AllowOverlap(This,prop)	\
    ( (This)->lpVtbl -> put_AllowOverlap(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WrapFormat_INTERFACE_DEFINED__ */


#ifndef __HangulAndAlphabetExceptions_INTERFACE_DEFINED__
#define __HangulAndAlphabetExceptions_INTERFACE_DEFINED__

/* interface HangulAndAlphabetExceptions */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_HangulAndAlphabetExceptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209D1-0000-0000-C000-000000000046")
    HangulAndAlphabetExceptions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ HangulAndAlphabetException **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ HangulAndAlphabetException **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HangulAndAlphabetExceptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HangulAndAlphabetExceptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HangulAndAlphabetExceptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HangulAndAlphabetExceptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HangulAndAlphabetExceptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HangulAndAlphabetExceptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HangulAndAlphabetExceptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HangulAndAlphabetExceptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            HangulAndAlphabetExceptions * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            HangulAndAlphabetExceptions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HangulAndAlphabetExceptions * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            HangulAndAlphabetExceptions * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            HangulAndAlphabetExceptions * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            HangulAndAlphabetExceptions * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ HangulAndAlphabetException **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            HangulAndAlphabetExceptions * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ HangulAndAlphabetException **prop);
        
        END_INTERFACE
    } HangulAndAlphabetExceptionsVtbl;

    interface HangulAndAlphabetExceptions
    {
        CONST_VTBL struct HangulAndAlphabetExceptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HangulAndAlphabetExceptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HangulAndAlphabetExceptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HangulAndAlphabetExceptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HangulAndAlphabetExceptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HangulAndAlphabetExceptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HangulAndAlphabetExceptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HangulAndAlphabetExceptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HangulAndAlphabetExceptions_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define HangulAndAlphabetExceptions_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define HangulAndAlphabetExceptions_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define HangulAndAlphabetExceptions_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define HangulAndAlphabetExceptions_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define HangulAndAlphabetExceptions_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define HangulAndAlphabetExceptions_Add(This,Name,prop)	\
    ( (This)->lpVtbl -> Add(This,Name,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HangulAndAlphabetExceptions_INTERFACE_DEFINED__ */


#ifndef __HangulAndAlphabetException_INTERFACE_DEFINED__
#define __HangulAndAlphabetException_INTERFACE_DEFINED__

/* interface HangulAndAlphabetException */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_HangulAndAlphabetException;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209D2-0000-0000-C000-000000000046")
    HangulAndAlphabetException : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HangulAndAlphabetExceptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HangulAndAlphabetException * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HangulAndAlphabetException * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HangulAndAlphabetException * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HangulAndAlphabetException * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HangulAndAlphabetException * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HangulAndAlphabetException * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HangulAndAlphabetException * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            HangulAndAlphabetException * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            HangulAndAlphabetException * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HangulAndAlphabetException * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            HangulAndAlphabetException * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            HangulAndAlphabetException * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            HangulAndAlphabetException * This);
        
        END_INTERFACE
    } HangulAndAlphabetExceptionVtbl;

    interface HangulAndAlphabetException
    {
        CONST_VTBL struct HangulAndAlphabetExceptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HangulAndAlphabetException_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HangulAndAlphabetException_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HangulAndAlphabetException_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HangulAndAlphabetException_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HangulAndAlphabetException_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HangulAndAlphabetException_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HangulAndAlphabetException_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HangulAndAlphabetException_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define HangulAndAlphabetException_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define HangulAndAlphabetException_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define HangulAndAlphabetException_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define HangulAndAlphabetException_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define HangulAndAlphabetException_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HangulAndAlphabetException_INTERFACE_DEFINED__ */


#ifndef __Adjustments_INTERFACE_DEFINED__
#define __Adjustments_INTERFACE_DEFINED__

/* interface Adjustments */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Adjustments;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209C4-0000-0000-C000-000000000046")
    Adjustments : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ long Index,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Item( 
            /* [in] */ long Index,
            /* [in] */ int prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AdjustmentsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Adjustments * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Adjustments * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Adjustments * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Adjustments * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Adjustments * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Adjustments * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Adjustments * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            Adjustments * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Adjustments * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Adjustments * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Adjustments * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            Adjustments * This,
            /* [in] */ long Index,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Item )( 
            Adjustments * This,
            /* [in] */ long Index,
            /* [in] */ int prop);
        
        END_INTERFACE
    } AdjustmentsVtbl;

    interface Adjustments
    {
        CONST_VTBL struct AdjustmentsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Adjustments_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Adjustments_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Adjustments_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Adjustments_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Adjustments_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Adjustments_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Adjustments_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Adjustments_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define Adjustments_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Adjustments_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Adjustments_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Adjustments_get_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> get_Item(This,Index,prop) ) 

#define Adjustments_put_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> put_Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Adjustments_INTERFACE_DEFINED__ */


#ifndef __CalloutFormat_INTERFACE_DEFINED__
#define __CalloutFormat_INTERFACE_DEFINED__

/* interface CalloutFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_CalloutFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209C5-0000-0000-C000-000000000046")
    CalloutFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Accent( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Accent( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Angle( 
            /* [retval][out] */ MsoCalloutAngleType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Angle( 
            /* [in] */ MsoCalloutAngleType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoAttach( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoAttach( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoLength( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Border( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Border( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Drop( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DropType( 
            /* [retval][out] */ MsoCalloutDropType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Gap( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Gap( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoCalloutType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ MsoCalloutType prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AutomaticLength( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CustomDrop( 
            /* [in] */ int Drop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CustomLength( 
            /* [in] */ int Length) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PresetDrop( 
            /* [in] */ MsoCalloutDropType DropType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CalloutFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CalloutFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CalloutFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CalloutFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CalloutFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CalloutFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CalloutFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CalloutFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            CalloutFormat * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            CalloutFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CalloutFormat * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Accent )( 
            CalloutFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Accent )( 
            CalloutFormat * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Angle )( 
            CalloutFormat * This,
            /* [retval][out] */ MsoCalloutAngleType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Angle )( 
            CalloutFormat * This,
            /* [in] */ MsoCalloutAngleType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoAttach )( 
            CalloutFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoAttach )( 
            CalloutFormat * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoLength )( 
            CalloutFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Border )( 
            CalloutFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Border )( 
            CalloutFormat * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Drop )( 
            CalloutFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DropType )( 
            CalloutFormat * This,
            /* [retval][out] */ MsoCalloutDropType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Gap )( 
            CalloutFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Gap )( 
            CalloutFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            CalloutFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            CalloutFormat * This,
            /* [retval][out] */ MsoCalloutType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            CalloutFormat * This,
            /* [in] */ MsoCalloutType prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AutomaticLength )( 
            CalloutFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CustomDrop )( 
            CalloutFormat * This,
            /* [in] */ int Drop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CustomLength )( 
            CalloutFormat * This,
            /* [in] */ int Length);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PresetDrop )( 
            CalloutFormat * This,
            /* [in] */ MsoCalloutDropType DropType);
        
        END_INTERFACE
    } CalloutFormatVtbl;

    interface CalloutFormat
    {
        CONST_VTBL struct CalloutFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CalloutFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CalloutFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CalloutFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CalloutFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CalloutFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CalloutFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CalloutFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CalloutFormat_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define CalloutFormat_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define CalloutFormat_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define CalloutFormat_get_Accent(This,prop)	\
    ( (This)->lpVtbl -> get_Accent(This,prop) ) 

#define CalloutFormat_put_Accent(This,prop)	\
    ( (This)->lpVtbl -> put_Accent(This,prop) ) 

#define CalloutFormat_get_Angle(This,prop)	\
    ( (This)->lpVtbl -> get_Angle(This,prop) ) 

#define CalloutFormat_put_Angle(This,prop)	\
    ( (This)->lpVtbl -> put_Angle(This,prop) ) 

#define CalloutFormat_get_AutoAttach(This,prop)	\
    ( (This)->lpVtbl -> get_AutoAttach(This,prop) ) 

#define CalloutFormat_put_AutoAttach(This,prop)	\
    ( (This)->lpVtbl -> put_AutoAttach(This,prop) ) 

#define CalloutFormat_get_AutoLength(This,prop)	\
    ( (This)->lpVtbl -> get_AutoLength(This,prop) ) 

#define CalloutFormat_get_Border(This,prop)	\
    ( (This)->lpVtbl -> get_Border(This,prop) ) 

#define CalloutFormat_put_Border(This,prop)	\
    ( (This)->lpVtbl -> put_Border(This,prop) ) 

#define CalloutFormat_get_Drop(This,prop)	\
    ( (This)->lpVtbl -> get_Drop(This,prop) ) 

#define CalloutFormat_get_DropType(This,prop)	\
    ( (This)->lpVtbl -> get_DropType(This,prop) ) 

#define CalloutFormat_get_Gap(This,prop)	\
    ( (This)->lpVtbl -> get_Gap(This,prop) ) 

#define CalloutFormat_put_Gap(This,prop)	\
    ( (This)->lpVtbl -> put_Gap(This,prop) ) 

#define CalloutFormat_get_Length(This,prop)	\
    ( (This)->lpVtbl -> get_Length(This,prop) ) 

#define CalloutFormat_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define CalloutFormat_put_Type(This,prop)	\
    ( (This)->lpVtbl -> put_Type(This,prop) ) 

#define CalloutFormat_AutomaticLength(This)	\
    ( (This)->lpVtbl -> AutomaticLength(This) ) 

#define CalloutFormat_CustomDrop(This,Drop)	\
    ( (This)->lpVtbl -> CustomDrop(This,Drop) ) 

#define CalloutFormat_CustomLength(This,Length)	\
    ( (This)->lpVtbl -> CustomLength(This,Length) ) 

#define CalloutFormat_PresetDrop(This,DropType)	\
    ( (This)->lpVtbl -> PresetDrop(This,DropType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CalloutFormat_INTERFACE_DEFINED__ */


#ifndef __ColorFormat_INTERFACE_DEFINED__
#define __ColorFormat_INTERFACE_DEFINED__

/* interface ColorFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ColorFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209C6-0000-0000-C000-000000000046")
    ColorFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RGB( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RGB( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_SchemeColor( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_SchemeColor( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoColorType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TintAndShade( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TintAndShade( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OverPrint( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OverPrint( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Ink( 
            /* [in] */ long Index,
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Ink( 
            /* [in] */ long Index,
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Cyan( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Cyan( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Magenta( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Magenta( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Yellow( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Yellow( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Black( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Black( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetCMYK( 
            /* [in] */ long Cyan,
            /* [in] */ long Magenta,
            /* [in] */ long Yellow,
            /* [in] */ long Black) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ColorFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ColorFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ColorFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ColorFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ColorFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ColorFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ColorFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ColorFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ColorFormat * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ColorFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ColorFormat * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RGB )( 
            ColorFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RGB )( 
            ColorFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SchemeColor )( 
            ColorFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SchemeColor )( 
            ColorFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ColorFormat * This,
            /* [retval][out] */ MsoColorType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ColorFormat * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ColorFormat * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TintAndShade )( 
            ColorFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TintAndShade )( 
            ColorFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OverPrint )( 
            ColorFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OverPrint )( 
            ColorFormat * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Ink )( 
            ColorFormat * This,
            /* [in] */ long Index,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Ink )( 
            ColorFormat * This,
            /* [in] */ long Index,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Cyan )( 
            ColorFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Cyan )( 
            ColorFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Magenta )( 
            ColorFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Magenta )( 
            ColorFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Yellow )( 
            ColorFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Yellow )( 
            ColorFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Black )( 
            ColorFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Black )( 
            ColorFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetCMYK )( 
            ColorFormat * This,
            /* [in] */ long Cyan,
            /* [in] */ long Magenta,
            /* [in] */ long Yellow,
            /* [in] */ long Black);
        
        END_INTERFACE
    } ColorFormatVtbl;

    interface ColorFormat
    {
        CONST_VTBL struct ColorFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ColorFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ColorFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ColorFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ColorFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ColorFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ColorFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ColorFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ColorFormat_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ColorFormat_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ColorFormat_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ColorFormat_get_RGB(This,prop)	\
    ( (This)->lpVtbl -> get_RGB(This,prop) ) 

#define ColorFormat_put_RGB(This,prop)	\
    ( (This)->lpVtbl -> put_RGB(This,prop) ) 

#define ColorFormat_get_SchemeColor(This,prop)	\
    ( (This)->lpVtbl -> get_SchemeColor(This,prop) ) 

#define ColorFormat_put_SchemeColor(This,prop)	\
    ( (This)->lpVtbl -> put_SchemeColor(This,prop) ) 

#define ColorFormat_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define ColorFormat_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define ColorFormat_put_Name(This,prop)	\
    ( (This)->lpVtbl -> put_Name(This,prop) ) 

#define ColorFormat_get_TintAndShade(This,prop)	\
    ( (This)->lpVtbl -> get_TintAndShade(This,prop) ) 

#define ColorFormat_put_TintAndShade(This,prop)	\
    ( (This)->lpVtbl -> put_TintAndShade(This,prop) ) 

#define ColorFormat_get_OverPrint(This,prop)	\
    ( (This)->lpVtbl -> get_OverPrint(This,prop) ) 

#define ColorFormat_put_OverPrint(This,prop)	\
    ( (This)->lpVtbl -> put_OverPrint(This,prop) ) 

#define ColorFormat_get_Ink(This,Index,prop)	\
    ( (This)->lpVtbl -> get_Ink(This,Index,prop) ) 

#define ColorFormat_put_Ink(This,Index,prop)	\
    ( (This)->lpVtbl -> put_Ink(This,Index,prop) ) 

#define ColorFormat_get_Cyan(This,prop)	\
    ( (This)->lpVtbl -> get_Cyan(This,prop) ) 

#define ColorFormat_put_Cyan(This,prop)	\
    ( (This)->lpVtbl -> put_Cyan(This,prop) ) 

#define ColorFormat_get_Magenta(This,prop)	\
    ( (This)->lpVtbl -> get_Magenta(This,prop) ) 

#define ColorFormat_put_Magenta(This,prop)	\
    ( (This)->lpVtbl -> put_Magenta(This,prop) ) 

#define ColorFormat_get_Yellow(This,prop)	\
    ( (This)->lpVtbl -> get_Yellow(This,prop) ) 

#define ColorFormat_put_Yellow(This,prop)	\
    ( (This)->lpVtbl -> put_Yellow(This,prop) ) 

#define ColorFormat_get_Black(This,prop)	\
    ( (This)->lpVtbl -> get_Black(This,prop) ) 

#define ColorFormat_put_Black(This,prop)	\
    ( (This)->lpVtbl -> put_Black(This,prop) ) 

#define ColorFormat_SetCMYK(This,Cyan,Magenta,Yellow,Black)	\
    ( (This)->lpVtbl -> SetCMYK(This,Cyan,Magenta,Yellow,Black) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ColorFormat_INTERFACE_DEFINED__ */


#ifndef __ConnectorFormat_INTERFACE_DEFINED__
#define __ConnectorFormat_INTERFACE_DEFINED__

/* interface ConnectorFormat */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ConnectorFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209C7-0000-0000-C000-000000000046")
    ConnectorFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BeginConnected( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BeginConnectedShape( 
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BeginConnectionSite( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndConnected( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndConnectedShape( 
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndConnectionSite( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoConnectorType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ MsoConnectorType prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE BeginConnect( 
            /* [out] */ Shape **ConnectedShape,
            /* [in] */ long ConnectionSite) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE BeginDisconnect( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndConnect( 
            /* [out] */ Shape **ConnectedShape,
            /* [in] */ long ConnectionSite) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndDisconnect( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ConnectorFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ConnectorFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ConnectorFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ConnectorFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ConnectorFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ConnectorFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ConnectorFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ConnectorFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ConnectorFormat * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ConnectorFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BeginConnected )( 
            ConnectorFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BeginConnectedShape )( 
            ConnectorFormat * This,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BeginConnectionSite )( 
            ConnectorFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndConnected )( 
            ConnectorFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndConnectedShape )( 
            ConnectorFormat * This,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndConnectionSite )( 
            ConnectorFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ConnectorFormat * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ConnectorFormat * This,
            /* [retval][out] */ MsoConnectorType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            ConnectorFormat * This,
            /* [in] */ MsoConnectorType prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BeginConnect )( 
            ConnectorFormat * This,
            /* [out] */ Shape **ConnectedShape,
            /* [in] */ long ConnectionSite);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BeginDisconnect )( 
            ConnectorFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndConnect )( 
            ConnectorFormat * This,
            /* [out] */ Shape **ConnectedShape,
            /* [in] */ long ConnectionSite);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndDisconnect )( 
            ConnectorFormat * This);
        
        END_INTERFACE
    } ConnectorFormatVtbl;

    interface ConnectorFormat
    {
        CONST_VTBL struct ConnectorFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ConnectorFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ConnectorFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ConnectorFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ConnectorFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ConnectorFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ConnectorFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ConnectorFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ConnectorFormat_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ConnectorFormat_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ConnectorFormat_get_BeginConnected(This,prop)	\
    ( (This)->lpVtbl -> get_BeginConnected(This,prop) ) 

#define ConnectorFormat_get_BeginConnectedShape(This,prop)	\
    ( (This)->lpVtbl -> get_BeginConnectedShape(This,prop) ) 

#define ConnectorFormat_get_BeginConnectionSite(This,prop)	\
    ( (This)->lpVtbl -> get_BeginConnectionSite(This,prop) ) 

#define ConnectorFormat_get_EndConnected(This,prop)	\
    ( (This)->lpVtbl -> get_EndConnected(This,prop) ) 

#define ConnectorFormat_get_EndConnectedShape(This,prop)	\
    ( (This)->lpVtbl -> get_EndConnectedShape(This,prop) ) 

#define ConnectorFormat_get_EndConnectionSite(This,prop)	\
    ( (This)->lpVtbl -> get_EndConnectionSite(This,prop) ) 

#define ConnectorFormat_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ConnectorFormat_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define ConnectorFormat_put_Type(This,prop)	\
    ( (This)->lpVtbl -> put_Type(This,prop) ) 

#define ConnectorFormat_BeginConnect(This,ConnectedShape,ConnectionSite)	\
    ( (This)->lpVtbl -> BeginConnect(This,ConnectedShape,ConnectionSite) ) 

#define ConnectorFormat_BeginDisconnect(This)	\
    ( (This)->lpVtbl -> BeginDisconnect(This) ) 

#define ConnectorFormat_EndConnect(This,ConnectedShape,ConnectionSite)	\
    ( (This)->lpVtbl -> EndConnect(This,ConnectedShape,ConnectionSite) ) 

#define ConnectorFormat_EndDisconnect(This)	\
    ( (This)->lpVtbl -> EndDisconnect(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ConnectorFormat_INTERFACE_DEFINED__ */


#ifndef __FillFormat_INTERFACE_DEFINED__
#define __FillFormat_INTERFACE_DEFINED__

/* interface FillFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_FillFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209C8-0000-0000-C000-000000000046")
    FillFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackColor( 
            /* [retval][out] */ ColorFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForeColor( 
            /* [retval][out] */ ColorFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientColorType( 
            /* [retval][out] */ MsoGradientColorType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientDegree( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientStyle( 
            /* [retval][out] */ MsoGradientStyle *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GradientVariant( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Pattern( 
            /* [retval][out] */ MsoPatternType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetGradientType( 
            /* [retval][out] */ MsoPresetGradientType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetTexture( 
            /* [retval][out] */ MsoPresetTexture *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextureName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextureType( 
            /* [retval][out] */ MsoTextureType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Transparency( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Transparency( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoFillType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Background( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE OneColorGradient( 
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ long Variant,
            /* [in] */ int Degree) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Patterned( 
            /* [in] */ MsoPatternType Pattern) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PresetGradient( 
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ long Variant,
            /* [in] */ MsoPresetGradientType PresetGradientType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PresetTextured( 
            /* [in] */ MsoPresetTexture PresetTexture) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Solid( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TwoColorGradient( 
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ long Variant) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UserPicture( 
            /* [in] */ BSTR PictureFile) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UserTextured( 
            /* [in] */ BSTR TextureFile) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FillFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FillFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FillFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FillFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FillFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FillFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FillFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FillFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            FillFormat * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            FillFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FillFormat * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackColor )( 
            FillFormat * This,
            /* [retval][out] */ ColorFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForeColor )( 
            FillFormat * This,
            /* [retval][out] */ ColorFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientColorType )( 
            FillFormat * This,
            /* [retval][out] */ MsoGradientColorType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientDegree )( 
            FillFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientStyle )( 
            FillFormat * This,
            /* [retval][out] */ MsoGradientStyle *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GradientVariant )( 
            FillFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Pattern )( 
            FillFormat * This,
            /* [retval][out] */ MsoPatternType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetGradientType )( 
            FillFormat * This,
            /* [retval][out] */ MsoPresetGradientType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetTexture )( 
            FillFormat * This,
            /* [retval][out] */ MsoPresetTexture *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextureName )( 
            FillFormat * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextureType )( 
            FillFormat * This,
            /* [retval][out] */ MsoTextureType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Transparency )( 
            FillFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Transparency )( 
            FillFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            FillFormat * This,
            /* [retval][out] */ MsoFillType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            FillFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            FillFormat * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Background )( 
            FillFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OneColorGradient )( 
            FillFormat * This,
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ long Variant,
            /* [in] */ int Degree);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Patterned )( 
            FillFormat * This,
            /* [in] */ MsoPatternType Pattern);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PresetGradient )( 
            FillFormat * This,
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ long Variant,
            /* [in] */ MsoPresetGradientType PresetGradientType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PresetTextured )( 
            FillFormat * This,
            /* [in] */ MsoPresetTexture PresetTexture);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Solid )( 
            FillFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TwoColorGradient )( 
            FillFormat * This,
            /* [in] */ MsoGradientStyle Style,
            /* [in] */ long Variant);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UserPicture )( 
            FillFormat * This,
            /* [in] */ BSTR PictureFile);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UserTextured )( 
            FillFormat * This,
            /* [in] */ BSTR TextureFile);
        
        END_INTERFACE
    } FillFormatVtbl;

    interface FillFormat
    {
        CONST_VTBL struct FillFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FillFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FillFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FillFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FillFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FillFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FillFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FillFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FillFormat_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define FillFormat_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define FillFormat_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define FillFormat_get_BackColor(This,prop)	\
    ( (This)->lpVtbl -> get_BackColor(This,prop) ) 

#define FillFormat_get_ForeColor(This,prop)	\
    ( (This)->lpVtbl -> get_ForeColor(This,prop) ) 

#define FillFormat_get_GradientColorType(This,prop)	\
    ( (This)->lpVtbl -> get_GradientColorType(This,prop) ) 

#define FillFormat_get_GradientDegree(This,prop)	\
    ( (This)->lpVtbl -> get_GradientDegree(This,prop) ) 

#define FillFormat_get_GradientStyle(This,prop)	\
    ( (This)->lpVtbl -> get_GradientStyle(This,prop) ) 

#define FillFormat_get_GradientVariant(This,prop)	\
    ( (This)->lpVtbl -> get_GradientVariant(This,prop) ) 

#define FillFormat_get_Pattern(This,prop)	\
    ( (This)->lpVtbl -> get_Pattern(This,prop) ) 

#define FillFormat_get_PresetGradientType(This,prop)	\
    ( (This)->lpVtbl -> get_PresetGradientType(This,prop) ) 

#define FillFormat_get_PresetTexture(This,prop)	\
    ( (This)->lpVtbl -> get_PresetTexture(This,prop) ) 

#define FillFormat_get_TextureName(This,prop)	\
    ( (This)->lpVtbl -> get_TextureName(This,prop) ) 

#define FillFormat_get_TextureType(This,prop)	\
    ( (This)->lpVtbl -> get_TextureType(This,prop) ) 

#define FillFormat_get_Transparency(This,prop)	\
    ( (This)->lpVtbl -> get_Transparency(This,prop) ) 

#define FillFormat_put_Transparency(This,prop)	\
    ( (This)->lpVtbl -> put_Transparency(This,prop) ) 

#define FillFormat_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define FillFormat_get_Visible(This,prop)	\
    ( (This)->lpVtbl -> get_Visible(This,prop) ) 

#define FillFormat_put_Visible(This,prop)	\
    ( (This)->lpVtbl -> put_Visible(This,prop) ) 

#define FillFormat_Background(This)	\
    ( (This)->lpVtbl -> Background(This) ) 

#define FillFormat_OneColorGradient(This,Style,Variant,Degree)	\
    ( (This)->lpVtbl -> OneColorGradient(This,Style,Variant,Degree) ) 

#define FillFormat_Patterned(This,Pattern)	\
    ( (This)->lpVtbl -> Patterned(This,Pattern) ) 

#define FillFormat_PresetGradient(This,Style,Variant,PresetGradientType)	\
    ( (This)->lpVtbl -> PresetGradient(This,Style,Variant,PresetGradientType) ) 

#define FillFormat_PresetTextured(This,PresetTexture)	\
    ( (This)->lpVtbl -> PresetTextured(This,PresetTexture) ) 

#define FillFormat_Solid(This)	\
    ( (This)->lpVtbl -> Solid(This) ) 

#define FillFormat_TwoColorGradient(This,Style,Variant)	\
    ( (This)->lpVtbl -> TwoColorGradient(This,Style,Variant) ) 

#define FillFormat_UserPicture(This,PictureFile)	\
    ( (This)->lpVtbl -> UserPicture(This,PictureFile) ) 

#define FillFormat_UserTextured(This,TextureFile)	\
    ( (This)->lpVtbl -> UserTextured(This,TextureFile) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FillFormat_INTERFACE_DEFINED__ */


#ifndef __FreeformBuilder_INTERFACE_DEFINED__
#define __FreeformBuilder_INTERFACE_DEFINED__

/* interface FreeformBuilder */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_FreeformBuilder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209C9-0000-0000-C000-000000000046")
    FreeformBuilder : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNodes( 
            /* [in] */ MsoSegmentType SegmentType,
            /* [in] */ MsoEditingType EditingType,
            /* [in] */ int X1,
            /* [in] */ int Y1,
            /* [defaultvalue][optional][in] */ int X2 = 0,
            /* [defaultvalue][optional][in] */ int Y2 = 0,
            /* [defaultvalue][optional][in] */ int X3 = 0,
            /* [defaultvalue][optional][in] */ int Y3 = 0) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConvertToShape( 
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ Shape **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FreeformBuilderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FreeformBuilder * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FreeformBuilder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FreeformBuilder * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FreeformBuilder * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FreeformBuilder * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FreeformBuilder * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FreeformBuilder * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            FreeformBuilder * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            FreeformBuilder * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FreeformBuilder * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNodes )( 
            FreeformBuilder * This,
            /* [in] */ MsoSegmentType SegmentType,
            /* [in] */ MsoEditingType EditingType,
            /* [in] */ int X1,
            /* [in] */ int Y1,
            /* [defaultvalue][optional][in] */ int X2,
            /* [defaultvalue][optional][in] */ int Y2,
            /* [defaultvalue][optional][in] */ int X3,
            /* [defaultvalue][optional][in] */ int Y3);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertToShape )( 
            FreeformBuilder * This,
            /* [optional][in] */ VARIANT *Anchor,
            /* [retval][out] */ Shape **prop);
        
        END_INTERFACE
    } FreeformBuilderVtbl;

    interface FreeformBuilder
    {
        CONST_VTBL struct FreeformBuilderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FreeformBuilder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FreeformBuilder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FreeformBuilder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FreeformBuilder_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FreeformBuilder_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FreeformBuilder_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FreeformBuilder_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FreeformBuilder_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define FreeformBuilder_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define FreeformBuilder_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define FreeformBuilder_AddNodes(This,SegmentType,EditingType,X1,Y1,X2,Y2,X3,Y3)	\
    ( (This)->lpVtbl -> AddNodes(This,SegmentType,EditingType,X1,Y1,X2,Y2,X3,Y3) ) 

#define FreeformBuilder_ConvertToShape(This,Anchor,prop)	\
    ( (This)->lpVtbl -> ConvertToShape(This,Anchor,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FreeformBuilder_INTERFACE_DEFINED__ */


#ifndef __LineFormat_INTERFACE_DEFINED__
#define __LineFormat_INTERFACE_DEFINED__

/* interface LineFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_LineFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209CA-0000-0000-C000-000000000046")
    LineFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BackColor( 
            /* [retval][out] */ ColorFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BeginArrowheadLength( 
            /* [retval][out] */ MsoArrowheadLength *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BeginArrowheadLength( 
            /* [in] */ MsoArrowheadLength prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BeginArrowheadStyle( 
            /* [retval][out] */ MsoArrowheadStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BeginArrowheadStyle( 
            /* [in] */ MsoArrowheadStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BeginArrowheadWidth( 
            /* [retval][out] */ MsoArrowheadWidth *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BeginArrowheadWidth( 
            /* [in] */ MsoArrowheadWidth prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DashStyle( 
            /* [retval][out] */ MsoLineDashStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DashStyle( 
            /* [in] */ MsoLineDashStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndArrowheadLength( 
            /* [retval][out] */ MsoArrowheadLength *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EndArrowheadLength( 
            /* [in] */ MsoArrowheadLength prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndArrowheadStyle( 
            /* [retval][out] */ MsoArrowheadStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EndArrowheadStyle( 
            /* [in] */ MsoArrowheadStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndArrowheadWidth( 
            /* [retval][out] */ MsoArrowheadWidth *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EndArrowheadWidth( 
            /* [in] */ MsoArrowheadWidth prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForeColor( 
            /* [retval][out] */ ColorFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Pattern( 
            /* [retval][out] */ MsoPatternType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Pattern( 
            /* [in] */ MsoPatternType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ MsoLineStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Style( 
            /* [in] */ MsoLineStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Transparency( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Transparency( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Weight( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Weight( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InsetPen( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InsetPen( 
            /* [in] */ MsoTriState prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LineFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            LineFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            LineFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            LineFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            LineFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            LineFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            LineFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            LineFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            LineFormat * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            LineFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            LineFormat * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BackColor )( 
            LineFormat * This,
            /* [retval][out] */ ColorFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BeginArrowheadLength )( 
            LineFormat * This,
            /* [retval][out] */ MsoArrowheadLength *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BeginArrowheadLength )( 
            LineFormat * This,
            /* [in] */ MsoArrowheadLength prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BeginArrowheadStyle )( 
            LineFormat * This,
            /* [retval][out] */ MsoArrowheadStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BeginArrowheadStyle )( 
            LineFormat * This,
            /* [in] */ MsoArrowheadStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BeginArrowheadWidth )( 
            LineFormat * This,
            /* [retval][out] */ MsoArrowheadWidth *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BeginArrowheadWidth )( 
            LineFormat * This,
            /* [in] */ MsoArrowheadWidth prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DashStyle )( 
            LineFormat * This,
            /* [retval][out] */ MsoLineDashStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DashStyle )( 
            LineFormat * This,
            /* [in] */ MsoLineDashStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndArrowheadLength )( 
            LineFormat * This,
            /* [retval][out] */ MsoArrowheadLength *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndArrowheadLength )( 
            LineFormat * This,
            /* [in] */ MsoArrowheadLength prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndArrowheadStyle )( 
            LineFormat * This,
            /* [retval][out] */ MsoArrowheadStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndArrowheadStyle )( 
            LineFormat * This,
            /* [in] */ MsoArrowheadStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndArrowheadWidth )( 
            LineFormat * This,
            /* [retval][out] */ MsoArrowheadWidth *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EndArrowheadWidth )( 
            LineFormat * This,
            /* [in] */ MsoArrowheadWidth prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForeColor )( 
            LineFormat * This,
            /* [retval][out] */ ColorFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Pattern )( 
            LineFormat * This,
            /* [retval][out] */ MsoPatternType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Pattern )( 
            LineFormat * This,
            /* [in] */ MsoPatternType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            LineFormat * This,
            /* [retval][out] */ MsoLineStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Style )( 
            LineFormat * This,
            /* [in] */ MsoLineStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Transparency )( 
            LineFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Transparency )( 
            LineFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            LineFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            LineFormat * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Weight )( 
            LineFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Weight )( 
            LineFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InsetPen )( 
            LineFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InsetPen )( 
            LineFormat * This,
            /* [in] */ MsoTriState prop);
        
        END_INTERFACE
    } LineFormatVtbl;

    interface LineFormat
    {
        CONST_VTBL struct LineFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define LineFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define LineFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define LineFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define LineFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define LineFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define LineFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define LineFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define LineFormat_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define LineFormat_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define LineFormat_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define LineFormat_get_BackColor(This,prop)	\
    ( (This)->lpVtbl -> get_BackColor(This,prop) ) 

#define LineFormat_get_BeginArrowheadLength(This,prop)	\
    ( (This)->lpVtbl -> get_BeginArrowheadLength(This,prop) ) 

#define LineFormat_put_BeginArrowheadLength(This,prop)	\
    ( (This)->lpVtbl -> put_BeginArrowheadLength(This,prop) ) 

#define LineFormat_get_BeginArrowheadStyle(This,prop)	\
    ( (This)->lpVtbl -> get_BeginArrowheadStyle(This,prop) ) 

#define LineFormat_put_BeginArrowheadStyle(This,prop)	\
    ( (This)->lpVtbl -> put_BeginArrowheadStyle(This,prop) ) 

#define LineFormat_get_BeginArrowheadWidth(This,prop)	\
    ( (This)->lpVtbl -> get_BeginArrowheadWidth(This,prop) ) 

#define LineFormat_put_BeginArrowheadWidth(This,prop)	\
    ( (This)->lpVtbl -> put_BeginArrowheadWidth(This,prop) ) 

#define LineFormat_get_DashStyle(This,prop)	\
    ( (This)->lpVtbl -> get_DashStyle(This,prop) ) 

#define LineFormat_put_DashStyle(This,prop)	\
    ( (This)->lpVtbl -> put_DashStyle(This,prop) ) 

#define LineFormat_get_EndArrowheadLength(This,prop)	\
    ( (This)->lpVtbl -> get_EndArrowheadLength(This,prop) ) 

#define LineFormat_put_EndArrowheadLength(This,prop)	\
    ( (This)->lpVtbl -> put_EndArrowheadLength(This,prop) ) 

#define LineFormat_get_EndArrowheadStyle(This,prop)	\
    ( (This)->lpVtbl -> get_EndArrowheadStyle(This,prop) ) 

#define LineFormat_put_EndArrowheadStyle(This,prop)	\
    ( (This)->lpVtbl -> put_EndArrowheadStyle(This,prop) ) 

#define LineFormat_get_EndArrowheadWidth(This,prop)	\
    ( (This)->lpVtbl -> get_EndArrowheadWidth(This,prop) ) 

#define LineFormat_put_EndArrowheadWidth(This,prop)	\
    ( (This)->lpVtbl -> put_EndArrowheadWidth(This,prop) ) 

#define LineFormat_get_ForeColor(This,prop)	\
    ( (This)->lpVtbl -> get_ForeColor(This,prop) ) 

#define LineFormat_get_Pattern(This,prop)	\
    ( (This)->lpVtbl -> get_Pattern(This,prop) ) 

#define LineFormat_put_Pattern(This,prop)	\
    ( (This)->lpVtbl -> put_Pattern(This,prop) ) 

#define LineFormat_get_Style(This,prop)	\
    ( (This)->lpVtbl -> get_Style(This,prop) ) 

#define LineFormat_put_Style(This,prop)	\
    ( (This)->lpVtbl -> put_Style(This,prop) ) 

#define LineFormat_get_Transparency(This,prop)	\
    ( (This)->lpVtbl -> get_Transparency(This,prop) ) 

#define LineFormat_put_Transparency(This,prop)	\
    ( (This)->lpVtbl -> put_Transparency(This,prop) ) 

#define LineFormat_get_Visible(This,prop)	\
    ( (This)->lpVtbl -> get_Visible(This,prop) ) 

#define LineFormat_put_Visible(This,prop)	\
    ( (This)->lpVtbl -> put_Visible(This,prop) ) 

#define LineFormat_get_Weight(This,prop)	\
    ( (This)->lpVtbl -> get_Weight(This,prop) ) 

#define LineFormat_put_Weight(This,prop)	\
    ( (This)->lpVtbl -> put_Weight(This,prop) ) 

#define LineFormat_get_InsetPen(This,prop)	\
    ( (This)->lpVtbl -> get_InsetPen(This,prop) ) 

#define LineFormat_put_InsetPen(This,prop)	\
    ( (This)->lpVtbl -> put_InsetPen(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __LineFormat_INTERFACE_DEFINED__ */


#ifndef __PictureFormat_INTERFACE_DEFINED__
#define __PictureFormat_INTERFACE_DEFINED__

/* interface PictureFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_PictureFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209CB-0000-0000-C000-000000000046")
    PictureFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Brightness( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Brightness( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColorType( 
            /* [retval][out] */ MsoPictureColorType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColorType( 
            /* [in] */ MsoPictureColorType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Contrast( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Contrast( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CropBottom( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CropBottom( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CropLeft( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CropLeft( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CropRight( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CropRight( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CropTop( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CropTop( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TransparencyColor( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TransparencyColor( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TransparentBackground( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TransparentBackground( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementBrightness( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementContrast( 
            /* [in] */ int Increment) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PictureFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            PictureFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            PictureFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            PictureFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            PictureFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            PictureFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            PictureFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            PictureFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            PictureFormat * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            PictureFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            PictureFormat * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Brightness )( 
            PictureFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Brightness )( 
            PictureFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColorType )( 
            PictureFormat * This,
            /* [retval][out] */ MsoPictureColorType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColorType )( 
            PictureFormat * This,
            /* [in] */ MsoPictureColorType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Contrast )( 
            PictureFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Contrast )( 
            PictureFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CropBottom )( 
            PictureFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CropBottom )( 
            PictureFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CropLeft )( 
            PictureFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CropLeft )( 
            PictureFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CropRight )( 
            PictureFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CropRight )( 
            PictureFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CropTop )( 
            PictureFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CropTop )( 
            PictureFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TransparencyColor )( 
            PictureFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TransparencyColor )( 
            PictureFormat * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TransparentBackground )( 
            PictureFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TransparentBackground )( 
            PictureFormat * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementBrightness )( 
            PictureFormat * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementContrast )( 
            PictureFormat * This,
            /* [in] */ int Increment);
        
        END_INTERFACE
    } PictureFormatVtbl;

    interface PictureFormat
    {
        CONST_VTBL struct PictureFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define PictureFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define PictureFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define PictureFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define PictureFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define PictureFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define PictureFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define PictureFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define PictureFormat_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define PictureFormat_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define PictureFormat_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define PictureFormat_get_Brightness(This,prop)	\
    ( (This)->lpVtbl -> get_Brightness(This,prop) ) 

#define PictureFormat_put_Brightness(This,prop)	\
    ( (This)->lpVtbl -> put_Brightness(This,prop) ) 

#define PictureFormat_get_ColorType(This,prop)	\
    ( (This)->lpVtbl -> get_ColorType(This,prop) ) 

#define PictureFormat_put_ColorType(This,prop)	\
    ( (This)->lpVtbl -> put_ColorType(This,prop) ) 

#define PictureFormat_get_Contrast(This,prop)	\
    ( (This)->lpVtbl -> get_Contrast(This,prop) ) 

#define PictureFormat_put_Contrast(This,prop)	\
    ( (This)->lpVtbl -> put_Contrast(This,prop) ) 

#define PictureFormat_get_CropBottom(This,prop)	\
    ( (This)->lpVtbl -> get_CropBottom(This,prop) ) 

#define PictureFormat_put_CropBottom(This,prop)	\
    ( (This)->lpVtbl -> put_CropBottom(This,prop) ) 

#define PictureFormat_get_CropLeft(This,prop)	\
    ( (This)->lpVtbl -> get_CropLeft(This,prop) ) 

#define PictureFormat_put_CropLeft(This,prop)	\
    ( (This)->lpVtbl -> put_CropLeft(This,prop) ) 

#define PictureFormat_get_CropRight(This,prop)	\
    ( (This)->lpVtbl -> get_CropRight(This,prop) ) 

#define PictureFormat_put_CropRight(This,prop)	\
    ( (This)->lpVtbl -> put_CropRight(This,prop) ) 

#define PictureFormat_get_CropTop(This,prop)	\
    ( (This)->lpVtbl -> get_CropTop(This,prop) ) 

#define PictureFormat_put_CropTop(This,prop)	\
    ( (This)->lpVtbl -> put_CropTop(This,prop) ) 

#define PictureFormat_get_TransparencyColor(This,prop)	\
    ( (This)->lpVtbl -> get_TransparencyColor(This,prop) ) 

#define PictureFormat_put_TransparencyColor(This,prop)	\
    ( (This)->lpVtbl -> put_TransparencyColor(This,prop) ) 

#define PictureFormat_get_TransparentBackground(This,prop)	\
    ( (This)->lpVtbl -> get_TransparentBackground(This,prop) ) 

#define PictureFormat_put_TransparentBackground(This,prop)	\
    ( (This)->lpVtbl -> put_TransparentBackground(This,prop) ) 

#define PictureFormat_IncrementBrightness(This,Increment)	\
    ( (This)->lpVtbl -> IncrementBrightness(This,Increment) ) 

#define PictureFormat_IncrementContrast(This,Increment)	\
    ( (This)->lpVtbl -> IncrementContrast(This,Increment) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __PictureFormat_INTERFACE_DEFINED__ */


#ifndef __ShadowFormat_INTERFACE_DEFINED__
#define __ShadowFormat_INTERFACE_DEFINED__

/* interface ShadowFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ShadowFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209CC-0000-0000-C000-000000000046")
    ShadowFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ForeColor( 
            /* [retval][out] */ ColorFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Obscured( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Obscured( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OffsetX( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OffsetX( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OffsetY( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OffsetY( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Transparency( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Transparency( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoShadowType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ MsoShadowType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementOffsetX( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementOffsetY( 
            /* [in] */ int Increment) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ShadowFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ShadowFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ShadowFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ShadowFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ShadowFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ShadowFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ShadowFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ShadowFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ShadowFormat * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ShadowFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ShadowFormat * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ForeColor )( 
            ShadowFormat * This,
            /* [retval][out] */ ColorFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Obscured )( 
            ShadowFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Obscured )( 
            ShadowFormat * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OffsetX )( 
            ShadowFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OffsetX )( 
            ShadowFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OffsetY )( 
            ShadowFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OffsetY )( 
            ShadowFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Transparency )( 
            ShadowFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Transparency )( 
            ShadowFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ShadowFormat * This,
            /* [retval][out] */ MsoShadowType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            ShadowFormat * This,
            /* [in] */ MsoShadowType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            ShadowFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            ShadowFormat * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementOffsetX )( 
            ShadowFormat * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementOffsetY )( 
            ShadowFormat * This,
            /* [in] */ int Increment);
        
        END_INTERFACE
    } ShadowFormatVtbl;

    interface ShadowFormat
    {
        CONST_VTBL struct ShadowFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ShadowFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ShadowFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ShadowFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ShadowFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ShadowFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ShadowFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ShadowFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ShadowFormat_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ShadowFormat_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ShadowFormat_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ShadowFormat_get_ForeColor(This,prop)	\
    ( (This)->lpVtbl -> get_ForeColor(This,prop) ) 

#define ShadowFormat_get_Obscured(This,prop)	\
    ( (This)->lpVtbl -> get_Obscured(This,prop) ) 

#define ShadowFormat_put_Obscured(This,prop)	\
    ( (This)->lpVtbl -> put_Obscured(This,prop) ) 

#define ShadowFormat_get_OffsetX(This,prop)	\
    ( (This)->lpVtbl -> get_OffsetX(This,prop) ) 

#define ShadowFormat_put_OffsetX(This,prop)	\
    ( (This)->lpVtbl -> put_OffsetX(This,prop) ) 

#define ShadowFormat_get_OffsetY(This,prop)	\
    ( (This)->lpVtbl -> get_OffsetY(This,prop) ) 

#define ShadowFormat_put_OffsetY(This,prop)	\
    ( (This)->lpVtbl -> put_OffsetY(This,prop) ) 

#define ShadowFormat_get_Transparency(This,prop)	\
    ( (This)->lpVtbl -> get_Transparency(This,prop) ) 

#define ShadowFormat_put_Transparency(This,prop)	\
    ( (This)->lpVtbl -> put_Transparency(This,prop) ) 

#define ShadowFormat_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define ShadowFormat_put_Type(This,prop)	\
    ( (This)->lpVtbl -> put_Type(This,prop) ) 

#define ShadowFormat_get_Visible(This,prop)	\
    ( (This)->lpVtbl -> get_Visible(This,prop) ) 

#define ShadowFormat_put_Visible(This,prop)	\
    ( (This)->lpVtbl -> put_Visible(This,prop) ) 

#define ShadowFormat_IncrementOffsetX(This,Increment)	\
    ( (This)->lpVtbl -> IncrementOffsetX(This,Increment) ) 

#define ShadowFormat_IncrementOffsetY(This,Increment)	\
    ( (This)->lpVtbl -> IncrementOffsetY(This,Increment) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ShadowFormat_INTERFACE_DEFINED__ */


#ifndef __ShapeNode_INTERFACE_DEFINED__
#define __ShapeNode_INTERFACE_DEFINED__

/* interface ShapeNode */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ShapeNode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209CD-0000-0000-C000-000000000046")
    ShapeNode : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EditingType( 
            /* [retval][out] */ MsoEditingType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Points( 
            /* [retval][out] */ VARIANT *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SegmentType( 
            /* [retval][out] */ MsoSegmentType *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ShapeNodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ShapeNode * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ShapeNode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ShapeNode * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ShapeNode * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ShapeNode * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ShapeNode * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ShapeNode * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ShapeNode * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ShapeNode * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ShapeNode * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EditingType )( 
            ShapeNode * This,
            /* [retval][out] */ MsoEditingType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Points )( 
            ShapeNode * This,
            /* [retval][out] */ VARIANT *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SegmentType )( 
            ShapeNode * This,
            /* [retval][out] */ MsoSegmentType *prop);
        
        END_INTERFACE
    } ShapeNodeVtbl;

    interface ShapeNode
    {
        CONST_VTBL struct ShapeNodeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ShapeNode_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ShapeNode_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ShapeNode_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ShapeNode_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ShapeNode_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ShapeNode_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ShapeNode_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ShapeNode_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ShapeNode_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ShapeNode_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ShapeNode_get_EditingType(This,prop)	\
    ( (This)->lpVtbl -> get_EditingType(This,prop) ) 

#define ShapeNode_get_Points(This,prop)	\
    ( (This)->lpVtbl -> get_Points(This,prop) ) 

#define ShapeNode_get_SegmentType(This,prop)	\
    ( (This)->lpVtbl -> get_SegmentType(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ShapeNode_INTERFACE_DEFINED__ */


#ifndef __ShapeNodes_INTERFACE_DEFINED__
#define __ShapeNodes_INTERFACE_DEFINED__

/* interface ShapeNodes */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ShapeNodes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209CE-0000-0000-C000-000000000046")
    ShapeNodes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ long Index) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ ShapeNode **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetEditingType( 
            /* [in] */ long Index,
            /* [in] */ MsoEditingType EditingType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetPosition( 
            /* [in] */ long Index,
            /* [in] */ int X1,
            /* [in] */ int Y1) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetSegmentType( 
            /* [in] */ long Index,
            /* [in] */ MsoSegmentType SegmentType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ long Index,
            /* [in] */ MsoSegmentType SegmentType,
            /* [in] */ MsoEditingType EditingType,
            /* [in] */ int X1,
            /* [in] */ int Y1,
            /* [defaultvalue][optional][in] */ int X2 = 0,
            /* [defaultvalue][optional][in] */ int Y2 = 0,
            /* [defaultvalue][optional][in] */ int X3 = 0,
            /* [defaultvalue][optional][in] */ int Y3 = 0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ShapeNodesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ShapeNodes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ShapeNodes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ShapeNodes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ShapeNodes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ShapeNodes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ShapeNodes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ShapeNodes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ShapeNodes * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ShapeNodes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ShapeNodes * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ShapeNodes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            ShapeNodes * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ShapeNodes * This,
            /* [in] */ long Index);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ShapeNodes * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ ShapeNode **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetEditingType )( 
            ShapeNodes * This,
            /* [in] */ long Index,
            /* [in] */ MsoEditingType EditingType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetPosition )( 
            ShapeNodes * This,
            /* [in] */ long Index,
            /* [in] */ int X1,
            /* [in] */ int Y1);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetSegmentType )( 
            ShapeNodes * This,
            /* [in] */ long Index,
            /* [in] */ MsoSegmentType SegmentType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            ShapeNodes * This,
            /* [in] */ long Index,
            /* [in] */ MsoSegmentType SegmentType,
            /* [in] */ MsoEditingType EditingType,
            /* [in] */ int X1,
            /* [in] */ int Y1,
            /* [defaultvalue][optional][in] */ int X2,
            /* [defaultvalue][optional][in] */ int Y2,
            /* [defaultvalue][optional][in] */ int X3,
            /* [defaultvalue][optional][in] */ int Y3);
        
        END_INTERFACE
    } ShapeNodesVtbl;

    interface ShapeNodes
    {
        CONST_VTBL struct ShapeNodesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ShapeNodes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ShapeNodes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ShapeNodes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ShapeNodes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ShapeNodes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ShapeNodes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ShapeNodes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ShapeNodes_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ShapeNodes_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ShapeNodes_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ShapeNodes_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define ShapeNodes_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define ShapeNodes_Delete(This,Index)	\
    ( (This)->lpVtbl -> Delete(This,Index) ) 

#define ShapeNodes_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define ShapeNodes_SetEditingType(This,Index,EditingType)	\
    ( (This)->lpVtbl -> SetEditingType(This,Index,EditingType) ) 

#define ShapeNodes_SetPosition(This,Index,X1,Y1)	\
    ( (This)->lpVtbl -> SetPosition(This,Index,X1,Y1) ) 

#define ShapeNodes_SetSegmentType(This,Index,SegmentType)	\
    ( (This)->lpVtbl -> SetSegmentType(This,Index,SegmentType) ) 

#define ShapeNodes_Insert(This,Index,SegmentType,EditingType,X1,Y1,X2,Y2,X3,Y3)	\
    ( (This)->lpVtbl -> Insert(This,Index,SegmentType,EditingType,X1,Y1,X2,Y2,X3,Y3) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ShapeNodes_INTERFACE_DEFINED__ */


#ifndef __TextEffectFormat_INTERFACE_DEFINED__
#define __TextEffectFormat_INTERFACE_DEFINED__

/* interface TextEffectFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TextEffectFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209CF-0000-0000-C000-000000000046")
    TextEffectFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ MsoTextEffectAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ MsoTextEffectAlignment prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontBold( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontBold( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontItalic( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontItalic( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontName( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FontSize( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FontSize( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KernedPairs( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_KernedPairs( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NormalizedHeight( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NormalizedHeight( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetShape( 
            /* [retval][out] */ MsoPresetTextEffectShape *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PresetShape( 
            /* [in] */ MsoPresetTextEffectShape prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetTextEffect( 
            /* [retval][out] */ MsoPresetTextEffect *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PresetTextEffect( 
            /* [in] */ MsoPresetTextEffect prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RotatedChars( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RotatedChars( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Tracking( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Tracking( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToggleVerticalText( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextEffectFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextEffectFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextEffectFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextEffectFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextEffectFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextEffectFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextEffectFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextEffectFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            TextEffectFormat * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TextEffectFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextEffectFormat * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            TextEffectFormat * This,
            /* [retval][out] */ MsoTextEffectAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            TextEffectFormat * This,
            /* [in] */ MsoTextEffectAlignment prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontBold )( 
            TextEffectFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontBold )( 
            TextEffectFormat * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontItalic )( 
            TextEffectFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontItalic )( 
            TextEffectFormat * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontName )( 
            TextEffectFormat * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontName )( 
            TextEffectFormat * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FontSize )( 
            TextEffectFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FontSize )( 
            TextEffectFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KernedPairs )( 
            TextEffectFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_KernedPairs )( 
            TextEffectFormat * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NormalizedHeight )( 
            TextEffectFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NormalizedHeight )( 
            TextEffectFormat * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetShape )( 
            TextEffectFormat * This,
            /* [retval][out] */ MsoPresetTextEffectShape *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PresetShape )( 
            TextEffectFormat * This,
            /* [in] */ MsoPresetTextEffectShape prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetTextEffect )( 
            TextEffectFormat * This,
            /* [retval][out] */ MsoPresetTextEffect *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PresetTextEffect )( 
            TextEffectFormat * This,
            /* [in] */ MsoPresetTextEffect prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RotatedChars )( 
            TextEffectFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RotatedChars )( 
            TextEffectFormat * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            TextEffectFormat * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            TextEffectFormat * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Tracking )( 
            TextEffectFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Tracking )( 
            TextEffectFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ToggleVerticalText )( 
            TextEffectFormat * This);
        
        END_INTERFACE
    } TextEffectFormatVtbl;

    interface TextEffectFormat
    {
        CONST_VTBL struct TextEffectFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextEffectFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TextEffectFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TextEffectFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TextEffectFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TextEffectFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TextEffectFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TextEffectFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TextEffectFormat_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define TextEffectFormat_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TextEffectFormat_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TextEffectFormat_get_Alignment(This,prop)	\
    ( (This)->lpVtbl -> get_Alignment(This,prop) ) 

#define TextEffectFormat_put_Alignment(This,prop)	\
    ( (This)->lpVtbl -> put_Alignment(This,prop) ) 

#define TextEffectFormat_get_FontBold(This,prop)	\
    ( (This)->lpVtbl -> get_FontBold(This,prop) ) 

#define TextEffectFormat_put_FontBold(This,prop)	\
    ( (This)->lpVtbl -> put_FontBold(This,prop) ) 

#define TextEffectFormat_get_FontItalic(This,prop)	\
    ( (This)->lpVtbl -> get_FontItalic(This,prop) ) 

#define TextEffectFormat_put_FontItalic(This,prop)	\
    ( (This)->lpVtbl -> put_FontItalic(This,prop) ) 

#define TextEffectFormat_get_FontName(This,prop)	\
    ( (This)->lpVtbl -> get_FontName(This,prop) ) 

#define TextEffectFormat_put_FontName(This,prop)	\
    ( (This)->lpVtbl -> put_FontName(This,prop) ) 

#define TextEffectFormat_get_FontSize(This,prop)	\
    ( (This)->lpVtbl -> get_FontSize(This,prop) ) 

#define TextEffectFormat_put_FontSize(This,prop)	\
    ( (This)->lpVtbl -> put_FontSize(This,prop) ) 

#define TextEffectFormat_get_KernedPairs(This,prop)	\
    ( (This)->lpVtbl -> get_KernedPairs(This,prop) ) 

#define TextEffectFormat_put_KernedPairs(This,prop)	\
    ( (This)->lpVtbl -> put_KernedPairs(This,prop) ) 

#define TextEffectFormat_get_NormalizedHeight(This,prop)	\
    ( (This)->lpVtbl -> get_NormalizedHeight(This,prop) ) 

#define TextEffectFormat_put_NormalizedHeight(This,prop)	\
    ( (This)->lpVtbl -> put_NormalizedHeight(This,prop) ) 

#define TextEffectFormat_get_PresetShape(This,prop)	\
    ( (This)->lpVtbl -> get_PresetShape(This,prop) ) 

#define TextEffectFormat_put_PresetShape(This,prop)	\
    ( (This)->lpVtbl -> put_PresetShape(This,prop) ) 

#define TextEffectFormat_get_PresetTextEffect(This,prop)	\
    ( (This)->lpVtbl -> get_PresetTextEffect(This,prop) ) 

#define TextEffectFormat_put_PresetTextEffect(This,prop)	\
    ( (This)->lpVtbl -> put_PresetTextEffect(This,prop) ) 

#define TextEffectFormat_get_RotatedChars(This,prop)	\
    ( (This)->lpVtbl -> get_RotatedChars(This,prop) ) 

#define TextEffectFormat_put_RotatedChars(This,prop)	\
    ( (This)->lpVtbl -> put_RotatedChars(This,prop) ) 

#define TextEffectFormat_get_Text(This,prop)	\
    ( (This)->lpVtbl -> get_Text(This,prop) ) 

#define TextEffectFormat_put_Text(This,prop)	\
    ( (This)->lpVtbl -> put_Text(This,prop) ) 

#define TextEffectFormat_get_Tracking(This,prop)	\
    ( (This)->lpVtbl -> get_Tracking(This,prop) ) 

#define TextEffectFormat_put_Tracking(This,prop)	\
    ( (This)->lpVtbl -> put_Tracking(This,prop) ) 

#define TextEffectFormat_ToggleVerticalText(This)	\
    ( (This)->lpVtbl -> ToggleVerticalText(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TextEffectFormat_INTERFACE_DEFINED__ */


#ifndef __ThreeDFormat_INTERFACE_DEFINED__
#define __ThreeDFormat_INTERFACE_DEFINED__

/* interface ThreeDFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ThreeDFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209D0-0000-0000-C000-000000000046")
    ThreeDFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__Application( 
            /* [retval][out] */ _Application **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Depth( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Depth( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtrusionColor( 
            /* [retval][out] */ ColorFormat **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtrusionColorType( 
            /* [retval][out] */ MsoExtrusionColorType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExtrusionColorType( 
            /* [in] */ MsoExtrusionColorType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Perspective( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Perspective( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetExtrusionDirection( 
            /* [retval][out] */ MsoPresetExtrusionDirection *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetLightingDirection( 
            /* [retval][out] */ MsoPresetLightingDirection *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PresetLightingDirection( 
            /* [in] */ MsoPresetLightingDirection prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetLightingSoftness( 
            /* [retval][out] */ MsoPresetLightingSoftness *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PresetLightingSoftness( 
            /* [in] */ MsoPresetLightingSoftness prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetMaterial( 
            /* [retval][out] */ MsoPresetMaterial *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PresetMaterial( 
            /* [in] */ MsoPresetMaterial prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresetThreeDFormat( 
            /* [retval][out] */ MsoPresetThreeDFormat *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RotationX( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RotationX( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RotationY( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RotationY( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementRotationX( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE IncrementRotationY( 
            /* [in] */ int Increment) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ResetRotation( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetExtrusionDirection( 
            /* [in] */ MsoPresetExtrusionDirection PresetExtrusionDirection) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetThreeDFormat( 
            /* [in] */ MsoPresetThreeDFormat PresetThreeDFormat) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ThreeDFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ThreeDFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ThreeDFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ThreeDFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ThreeDFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ThreeDFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ThreeDFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ThreeDFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__Application )( 
            ThreeDFormat * This,
            /* [retval][out] */ _Application **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ThreeDFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ThreeDFormat * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Depth )( 
            ThreeDFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Depth )( 
            ThreeDFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtrusionColor )( 
            ThreeDFormat * This,
            /* [retval][out] */ ColorFormat **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtrusionColorType )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoExtrusionColorType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExtrusionColorType )( 
            ThreeDFormat * This,
            /* [in] */ MsoExtrusionColorType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Perspective )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Perspective )( 
            ThreeDFormat * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetExtrusionDirection )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoPresetExtrusionDirection *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetLightingDirection )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoPresetLightingDirection *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PresetLightingDirection )( 
            ThreeDFormat * This,
            /* [in] */ MsoPresetLightingDirection prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetLightingSoftness )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoPresetLightingSoftness *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PresetLightingSoftness )( 
            ThreeDFormat * This,
            /* [in] */ MsoPresetLightingSoftness prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetMaterial )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoPresetMaterial *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PresetMaterial )( 
            ThreeDFormat * This,
            /* [in] */ MsoPresetMaterial prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresetThreeDFormat )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoPresetThreeDFormat *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RotationX )( 
            ThreeDFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RotationX )( 
            ThreeDFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RotationY )( 
            ThreeDFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RotationY )( 
            ThreeDFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            ThreeDFormat * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            ThreeDFormat * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementRotationX )( 
            ThreeDFormat * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IncrementRotationY )( 
            ThreeDFormat * This,
            /* [in] */ int Increment);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ResetRotation )( 
            ThreeDFormat * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetExtrusionDirection )( 
            ThreeDFormat * This,
            /* [in] */ MsoPresetExtrusionDirection PresetExtrusionDirection);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetThreeDFormat )( 
            ThreeDFormat * This,
            /* [in] */ MsoPresetThreeDFormat PresetThreeDFormat);
        
        END_INTERFACE
    } ThreeDFormatVtbl;

    interface ThreeDFormat
    {
        CONST_VTBL struct ThreeDFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ThreeDFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ThreeDFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ThreeDFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ThreeDFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ThreeDFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ThreeDFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ThreeDFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ThreeDFormat_get__Application(This,prop)	\
    ( (This)->lpVtbl -> get__Application(This,prop) ) 

#define ThreeDFormat_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ThreeDFormat_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ThreeDFormat_get_Depth(This,prop)	\
    ( (This)->lpVtbl -> get_Depth(This,prop) ) 

#define ThreeDFormat_put_Depth(This,prop)	\
    ( (This)->lpVtbl -> put_Depth(This,prop) ) 

#define ThreeDFormat_get_ExtrusionColor(This,prop)	\
    ( (This)->lpVtbl -> get_ExtrusionColor(This,prop) ) 

#define ThreeDFormat_get_ExtrusionColorType(This,prop)	\
    ( (This)->lpVtbl -> get_ExtrusionColorType(This,prop) ) 

#define ThreeDFormat_put_ExtrusionColorType(This,prop)	\
    ( (This)->lpVtbl -> put_ExtrusionColorType(This,prop) ) 

#define ThreeDFormat_get_Perspective(This,prop)	\
    ( (This)->lpVtbl -> get_Perspective(This,prop) ) 

#define ThreeDFormat_put_Perspective(This,prop)	\
    ( (This)->lpVtbl -> put_Perspective(This,prop) ) 

#define ThreeDFormat_get_PresetExtrusionDirection(This,prop)	\
    ( (This)->lpVtbl -> get_PresetExtrusionDirection(This,prop) ) 

#define ThreeDFormat_get_PresetLightingDirection(This,prop)	\
    ( (This)->lpVtbl -> get_PresetLightingDirection(This,prop) ) 

#define ThreeDFormat_put_PresetLightingDirection(This,prop)	\
    ( (This)->lpVtbl -> put_PresetLightingDirection(This,prop) ) 

#define ThreeDFormat_get_PresetLightingSoftness(This,prop)	\
    ( (This)->lpVtbl -> get_PresetLightingSoftness(This,prop) ) 

#define ThreeDFormat_put_PresetLightingSoftness(This,prop)	\
    ( (This)->lpVtbl -> put_PresetLightingSoftness(This,prop) ) 

#define ThreeDFormat_get_PresetMaterial(This,prop)	\
    ( (This)->lpVtbl -> get_PresetMaterial(This,prop) ) 

#define ThreeDFormat_put_PresetMaterial(This,prop)	\
    ( (This)->lpVtbl -> put_PresetMaterial(This,prop) ) 

#define ThreeDFormat_get_PresetThreeDFormat(This,prop)	\
    ( (This)->lpVtbl -> get_PresetThreeDFormat(This,prop) ) 

#define ThreeDFormat_get_RotationX(This,prop)	\
    ( (This)->lpVtbl -> get_RotationX(This,prop) ) 

#define ThreeDFormat_put_RotationX(This,prop)	\
    ( (This)->lpVtbl -> put_RotationX(This,prop) ) 

#define ThreeDFormat_get_RotationY(This,prop)	\
    ( (This)->lpVtbl -> get_RotationY(This,prop) ) 

#define ThreeDFormat_put_RotationY(This,prop)	\
    ( (This)->lpVtbl -> put_RotationY(This,prop) ) 

#define ThreeDFormat_get_Visible(This,prop)	\
    ( (This)->lpVtbl -> get_Visible(This,prop) ) 

#define ThreeDFormat_put_Visible(This,prop)	\
    ( (This)->lpVtbl -> put_Visible(This,prop) ) 

#define ThreeDFormat_IncrementRotationX(This,Increment)	\
    ( (This)->lpVtbl -> IncrementRotationX(This,Increment) ) 

#define ThreeDFormat_IncrementRotationY(This,Increment)	\
    ( (This)->lpVtbl -> IncrementRotationY(This,Increment) ) 

#define ThreeDFormat_ResetRotation(This)	\
    ( (This)->lpVtbl -> ResetRotation(This) ) 

#define ThreeDFormat_SetExtrusionDirection(This,PresetExtrusionDirection)	\
    ( (This)->lpVtbl -> SetExtrusionDirection(This,PresetExtrusionDirection) ) 

#define ThreeDFormat_SetThreeDFormat(This,PresetThreeDFormat)	\
    ( (This)->lpVtbl -> SetThreeDFormat(This,PresetThreeDFormat) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ThreeDFormat_INTERFACE_DEFINED__ */


#ifndef __ApplicationEvents_DISPINTERFACE_DEFINED__
#define __ApplicationEvents_DISPINTERFACE_DEFINED__

/* dispinterface ApplicationEvents */
/* [hidden][helpcontext][uuid] */ 


EXTERN_C const IID DIID_ApplicationEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("000209F7-0000-0000-C000-000000000046")
    ApplicationEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ApplicationEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ApplicationEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ApplicationEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ApplicationEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ApplicationEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ApplicationEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ApplicationEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ApplicationEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } ApplicationEventsVtbl;

    interface ApplicationEvents
    {
        CONST_VTBL struct ApplicationEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ApplicationEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ApplicationEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ApplicationEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ApplicationEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ApplicationEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ApplicationEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ApplicationEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ApplicationEvents_DISPINTERFACE_DEFINED__ */


#ifndef __DocumentEvents_DISPINTERFACE_DEFINED__
#define __DocumentEvents_DISPINTERFACE_DEFINED__

/* dispinterface DocumentEvents */
/* [hidden][helpcontext][uuid] */ 


EXTERN_C const IID DIID_DocumentEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("000209F6-0000-0000-C000-000000000046")
    DocumentEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DocumentEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DocumentEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DocumentEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DocumentEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DocumentEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DocumentEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DocumentEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DocumentEventsVtbl;

    interface DocumentEvents
    {
        CONST_VTBL struct DocumentEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DocumentEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DocumentEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DocumentEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DocumentEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DocumentEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DocumentEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DocumentEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DocumentEvents_DISPINTERFACE_DEFINED__ */


#ifndef __OCXEvents_DISPINTERFACE_DEFINED__
#define __OCXEvents_DISPINTERFACE_DEFINED__

/* dispinterface OCXEvents */
/* [hidden][helpcontext][uuid] */ 


EXTERN_C const IID DIID_OCXEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("000209F3-0000-0000-C000-000000000046")
    OCXEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct OCXEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OCXEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OCXEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OCXEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OCXEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OCXEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OCXEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OCXEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } OCXEventsVtbl;

    interface OCXEvents
    {
        CONST_VTBL struct OCXEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OCXEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define OCXEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define OCXEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define OCXEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define OCXEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define OCXEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define OCXEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __OCXEvents_DISPINTERFACE_DEFINED__ */


#ifndef __IApplicationEvents_INTERFACE_DEFINED__
#define __IApplicationEvents_INTERFACE_DEFINED__

/* interface IApplicationEvents */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_IApplicationEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209F7-0001-0000-C000-000000000046")
    IApplicationEvents : public IDispatch
    {
    public:
        virtual /* [hidden][restricted][id] */ HRESULT STDMETHODCALLTYPE Startup( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Quit( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentChange( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IApplicationEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IApplicationEvents * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IApplicationEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IApplicationEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IApplicationEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IApplicationEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IApplicationEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IApplicationEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *Startup )( 
            IApplicationEvents * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Quit )( 
            IApplicationEvents * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentChange )( 
            IApplicationEvents * This);
        
        END_INTERFACE
    } IApplicationEventsVtbl;

    interface IApplicationEvents
    {
        CONST_VTBL struct IApplicationEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IApplicationEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IApplicationEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IApplicationEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IApplicationEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IApplicationEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IApplicationEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IApplicationEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IApplicationEvents_Startup(This)	\
    ( (This)->lpVtbl -> Startup(This) ) 

#define IApplicationEvents_Quit(This)	\
    ( (This)->lpVtbl -> Quit(This) ) 

#define IApplicationEvents_DocumentChange(This)	\
    ( (This)->lpVtbl -> DocumentChange(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IApplicationEvents_INTERFACE_DEFINED__ */


#ifndef __IApplicationEvents2_INTERFACE_DEFINED__
#define __IApplicationEvents2_INTERFACE_DEFINED__

/* interface IApplicationEvents2 */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_IApplicationEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209FE-0001-0000-C000-000000000046")
    IApplicationEvents2 : public IDispatch
    {
    public:
        virtual /* [hidden][restricted][id] */ HRESULT STDMETHODCALLTYPE Startup( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Quit( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentChange( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentOpen( 
            /* [in] */ Document	*Doc) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentBeforeClose( 
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentBeforePrint( 
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentBeforeSave( 
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *SaveAsUI,
            /* [in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewDocument( 
            /* [in] */ Document	*Doc) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowActivate( 
            /* [in] */ Document	*Doc,
            /* [in] */ Window *Wn) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowDeactivate( 
            /* [in] */ Document	*Doc,
            /* [in] */ Window *Wn) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowSelectionChange( 
            /* [in] */ Selection *Sel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowBeforeRightClick( 
            /* [in] */ Selection *Sel,
            /* [in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowBeforeDoubleClick( 
            /* [in] */ Selection *Sel,
            /* [in] */ VARIANT_BOOL *Cancel) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IApplicationEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IApplicationEvents2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IApplicationEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IApplicationEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IApplicationEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IApplicationEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IApplicationEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IApplicationEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *Startup )( 
            IApplicationEvents2 * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Quit )( 
            IApplicationEvents2 * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentChange )( 
            IApplicationEvents2 * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentOpen )( 
            IApplicationEvents2 * This,
            /* [in] */ Document	*Doc);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentBeforeClose )( 
            IApplicationEvents2 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentBeforePrint )( 
            IApplicationEvents2 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentBeforeSave )( 
            IApplicationEvents2 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *SaveAsUI,
            /* [in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewDocument )( 
            IApplicationEvents2 * This,
            /* [in] */ Document	*Doc);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowActivate )( 
            IApplicationEvents2 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ Window *Wn);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowDeactivate )( 
            IApplicationEvents2 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ Window *Wn);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowSelectionChange )( 
            IApplicationEvents2 * This,
            /* [in] */ Selection *Sel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowBeforeRightClick )( 
            IApplicationEvents2 * This,
            /* [in] */ Selection *Sel,
            /* [in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowBeforeDoubleClick )( 
            IApplicationEvents2 * This,
            /* [in] */ Selection *Sel,
            /* [in] */ VARIANT_BOOL *Cancel);
        
        END_INTERFACE
    } IApplicationEvents2Vtbl;

    interface IApplicationEvents2
    {
        CONST_VTBL struct IApplicationEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IApplicationEvents2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IApplicationEvents2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IApplicationEvents2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IApplicationEvents2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IApplicationEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IApplicationEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IApplicationEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IApplicationEvents2_Startup(This)	\
    ( (This)->lpVtbl -> Startup(This) ) 

#define IApplicationEvents2_Quit(This)	\
    ( (This)->lpVtbl -> Quit(This) ) 

#define IApplicationEvents2_DocumentChange(This)	\
    ( (This)->lpVtbl -> DocumentChange(This) ) 

#define IApplicationEvents2_DocumentOpen(This,Doc)	\
    ( (This)->lpVtbl -> DocumentOpen(This,Doc) ) 

#define IApplicationEvents2_DocumentBeforeClose(This,Doc,Cancel)	\
    ( (This)->lpVtbl -> DocumentBeforeClose(This,Doc,Cancel) ) 

#define IApplicationEvents2_DocumentBeforePrint(This,Doc,Cancel)	\
    ( (This)->lpVtbl -> DocumentBeforePrint(This,Doc,Cancel) ) 

#define IApplicationEvents2_DocumentBeforeSave(This,Doc,SaveAsUI,Cancel)	\
    ( (This)->lpVtbl -> DocumentBeforeSave(This,Doc,SaveAsUI,Cancel) ) 

#define IApplicationEvents2_NewDocument(This,Doc)	\
    ( (This)->lpVtbl -> NewDocument(This,Doc) ) 

#define IApplicationEvents2_WindowActivate(This,Doc,Wn)	\
    ( (This)->lpVtbl -> WindowActivate(This,Doc,Wn) ) 

#define IApplicationEvents2_WindowDeactivate(This,Doc,Wn)	\
    ( (This)->lpVtbl -> WindowDeactivate(This,Doc,Wn) ) 

#define IApplicationEvents2_WindowSelectionChange(This,Sel)	\
    ( (This)->lpVtbl -> WindowSelectionChange(This,Sel) ) 

#define IApplicationEvents2_WindowBeforeRightClick(This,Sel,Cancel)	\
    ( (This)->lpVtbl -> WindowBeforeRightClick(This,Sel,Cancel) ) 

#define IApplicationEvents2_WindowBeforeDoubleClick(This,Sel,Cancel)	\
    ( (This)->lpVtbl -> WindowBeforeDoubleClick(This,Sel,Cancel) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IApplicationEvents2_INTERFACE_DEFINED__ */


#ifndef __ApplicationEvents2_DISPINTERFACE_DEFINED__
#define __ApplicationEvents2_DISPINTERFACE_DEFINED__

/* dispinterface ApplicationEvents2 */
/* [hidden][helpcontext][uuid] */ 


EXTERN_C const IID DIID_ApplicationEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("000209FE-0000-0000-C000-000000000046")
    ApplicationEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ApplicationEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ApplicationEvents2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ApplicationEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ApplicationEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ApplicationEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ApplicationEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ApplicationEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ApplicationEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } ApplicationEvents2Vtbl;

    interface ApplicationEvents2
    {
        CONST_VTBL struct ApplicationEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ApplicationEvents2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ApplicationEvents2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ApplicationEvents2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ApplicationEvents2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ApplicationEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ApplicationEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ApplicationEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ApplicationEvents2_DISPINTERFACE_DEFINED__ */


#ifndef __EmailAuthor_INTERFACE_DEFINED__
#define __EmailAuthor_INTERFACE_DEFINED__

/* interface EmailAuthor */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_EmailAuthor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209D7-0000-0000-C000-000000000046")
    EmailAuthor : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Style( 
            /* [retval][out] */ Style **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EmailAuthorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            EmailAuthor * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            EmailAuthor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            EmailAuthor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            EmailAuthor * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            EmailAuthor * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            EmailAuthor * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            EmailAuthor * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            EmailAuthor * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            EmailAuthor * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            EmailAuthor * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Style )( 
            EmailAuthor * This,
            /* [retval][out] */ Style **prop);
        
        END_INTERFACE
    } EmailAuthorVtbl;

    interface EmailAuthor
    {
        CONST_VTBL struct EmailAuthorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define EmailAuthor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define EmailAuthor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define EmailAuthor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define EmailAuthor_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define EmailAuthor_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define EmailAuthor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define EmailAuthor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define EmailAuthor_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define EmailAuthor_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define EmailAuthor_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define EmailAuthor_get_Style(This,prop)	\
    ( (This)->lpVtbl -> get_Style(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __EmailAuthor_INTERFACE_DEFINED__ */


#ifndef __EmailOptions_INTERFACE_DEFINED__
#define __EmailOptions_INTERFACE_DEFINED__

/* interface EmailOptions */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_EmailOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209DB-0000-0000-C000-000000000046")
    EmailOptions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseThemeStyle( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseThemeStyle( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkCommentsWith( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkCommentsWith( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MarkComments( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MarkComments( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EmailSignature( 
            /* [retval][out] */ EmailSignature **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ComposeStyle( 
            /* [retval][out] */ Style **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReplyStyle( 
            /* [retval][out] */ Style **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ThemeName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ThemeName( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Dummy1( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Dummy2( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Dummy3( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NewColorOnReply( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NewColorOnReply( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlainTextStyle( 
            /* [retval][out] */ Style **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseThemeStyleOnReply( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseThemeStyleOnReply( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeApplyHeadings( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeApplyHeadings( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeApplyBorders( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeApplyBorders( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeApplyBulletedLists( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeApplyBulletedLists( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeApplyNumberedLists( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeApplyNumberedLists( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeReplaceQuotes( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeReplaceQuotes( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeReplaceSymbols( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeReplaceSymbols( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeReplaceOrdinals( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeReplaceOrdinals( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeReplaceFractions( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeReplaceFractions( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeReplacePlainTextEmphasis( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeReplacePlainTextEmphasis( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeFormatListItemBeginning( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeFormatListItemBeginning( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeDefineStyles( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeDefineStyles( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeReplaceHyperlinks( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeReplaceHyperlinks( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeApplyTables( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeApplyTables( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeApplyFirstIndents( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeApplyFirstIndents( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeApplyDates( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeApplyDates( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeApplyClosings( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeApplyClosings( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeMatchParentheses( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeMatchParentheses( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeReplaceFarEastDashes( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeReplaceFarEastDashes( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeDeleteAutoSpaces( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeDeleteAutoSpaces( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeInsertClosings( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeInsertClosings( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeAutoLetterWizard( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeAutoLetterWizard( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormatAsYouTypeInsertOvers( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormatAsYouTypeInsertOvers( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelyOnCSS( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RelyOnCSS( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HTMLFidelity( 
            /* [retval][out] */ WdEmailHTMLFidelity *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HTMLFidelity( 
            /* [in] */ WdEmailHTMLFidelity prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EmbedSmartTag( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_EmbedSmartTag( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TabIndentKey( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TabIndentKey( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EmailOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            EmailOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            EmailOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            EmailOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            EmailOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            EmailOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            EmailOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            EmailOptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            EmailOptions * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            EmailOptions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            EmailOptions * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseThemeStyle )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseThemeStyle )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkCommentsWith )( 
            EmailOptions * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkCommentsWith )( 
            EmailOptions * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MarkComments )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MarkComments )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EmailSignature )( 
            EmailOptions * This,
            /* [retval][out] */ EmailSignature **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ComposeStyle )( 
            EmailOptions * This,
            /* [retval][out] */ Style **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReplyStyle )( 
            EmailOptions * This,
            /* [retval][out] */ Style **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ThemeName )( 
            EmailOptions * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ThemeName )( 
            EmailOptions * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Dummy1 )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Dummy2 )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Dummy3 )( 
            EmailOptions * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NewColorOnReply )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NewColorOnReply )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlainTextStyle )( 
            EmailOptions * This,
            /* [retval][out] */ Style **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseThemeStyleOnReply )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseThemeStyleOnReply )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeApplyHeadings )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeApplyHeadings )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeApplyBorders )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeApplyBorders )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeApplyBulletedLists )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeApplyBulletedLists )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeApplyNumberedLists )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeApplyNumberedLists )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeReplaceQuotes )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeReplaceQuotes )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeReplaceSymbols )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeReplaceSymbols )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeReplaceOrdinals )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeReplaceOrdinals )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeReplaceFractions )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeReplaceFractions )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeReplacePlainTextEmphasis )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeReplacePlainTextEmphasis )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeFormatListItemBeginning )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeFormatListItemBeginning )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeDefineStyles )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeDefineStyles )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeReplaceHyperlinks )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeReplaceHyperlinks )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeApplyTables )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeApplyTables )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeApplyFirstIndents )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeApplyFirstIndents )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeApplyDates )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeApplyDates )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeApplyClosings )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeApplyClosings )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeMatchParentheses )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeMatchParentheses )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeReplaceFarEastDashes )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeReplaceFarEastDashes )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeDeleteAutoSpaces )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeDeleteAutoSpaces )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeInsertClosings )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeInsertClosings )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeAutoLetterWizard )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeAutoLetterWizard )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormatAsYouTypeInsertOvers )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormatAsYouTypeInsertOvers )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelyOnCSS )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RelyOnCSS )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HTMLFidelity )( 
            EmailOptions * This,
            /* [retval][out] */ WdEmailHTMLFidelity *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HTMLFidelity )( 
            EmailOptions * This,
            /* [in] */ WdEmailHTMLFidelity prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EmbedSmartTag )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_EmbedSmartTag )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabIndentKey )( 
            EmailOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TabIndentKey )( 
            EmailOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } EmailOptionsVtbl;

    interface EmailOptions
    {
        CONST_VTBL struct EmailOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define EmailOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define EmailOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define EmailOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define EmailOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define EmailOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define EmailOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define EmailOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define EmailOptions_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define EmailOptions_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define EmailOptions_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define EmailOptions_get_UseThemeStyle(This,prop)	\
    ( (This)->lpVtbl -> get_UseThemeStyle(This,prop) ) 

#define EmailOptions_put_UseThemeStyle(This,prop)	\
    ( (This)->lpVtbl -> put_UseThemeStyle(This,prop) ) 

#define EmailOptions_get_MarkCommentsWith(This,prop)	\
    ( (This)->lpVtbl -> get_MarkCommentsWith(This,prop) ) 

#define EmailOptions_put_MarkCommentsWith(This,prop)	\
    ( (This)->lpVtbl -> put_MarkCommentsWith(This,prop) ) 

#define EmailOptions_get_MarkComments(This,prop)	\
    ( (This)->lpVtbl -> get_MarkComments(This,prop) ) 

#define EmailOptions_put_MarkComments(This,prop)	\
    ( (This)->lpVtbl -> put_MarkComments(This,prop) ) 

#define EmailOptions_get_EmailSignature(This,prop)	\
    ( (This)->lpVtbl -> get_EmailSignature(This,prop) ) 

#define EmailOptions_get_ComposeStyle(This,prop)	\
    ( (This)->lpVtbl -> get_ComposeStyle(This,prop) ) 

#define EmailOptions_get_ReplyStyle(This,prop)	\
    ( (This)->lpVtbl -> get_ReplyStyle(This,prop) ) 

#define EmailOptions_get_ThemeName(This,prop)	\
    ( (This)->lpVtbl -> get_ThemeName(This,prop) ) 

#define EmailOptions_put_ThemeName(This,prop)	\
    ( (This)->lpVtbl -> put_ThemeName(This,prop) ) 

#define EmailOptions_get_Dummy1(This,prop)	\
    ( (This)->lpVtbl -> get_Dummy1(This,prop) ) 

#define EmailOptions_get_Dummy2(This,prop)	\
    ( (This)->lpVtbl -> get_Dummy2(This,prop) ) 

#define EmailOptions_Dummy3(This)	\
    ( (This)->lpVtbl -> Dummy3(This) ) 

#define EmailOptions_get_NewColorOnReply(This,prop)	\
    ( (This)->lpVtbl -> get_NewColorOnReply(This,prop) ) 

#define EmailOptions_put_NewColorOnReply(This,prop)	\
    ( (This)->lpVtbl -> put_NewColorOnReply(This,prop) ) 

#define EmailOptions_get_PlainTextStyle(This,prop)	\
    ( (This)->lpVtbl -> get_PlainTextStyle(This,prop) ) 

#define EmailOptions_get_UseThemeStyleOnReply(This,prop)	\
    ( (This)->lpVtbl -> get_UseThemeStyleOnReply(This,prop) ) 

#define EmailOptions_put_UseThemeStyleOnReply(This,prop)	\
    ( (This)->lpVtbl -> put_UseThemeStyleOnReply(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeApplyHeadings(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeApplyHeadings(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeApplyHeadings(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeApplyHeadings(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeApplyBorders(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeApplyBorders(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeApplyBorders(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeApplyBorders(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeApplyBulletedLists(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeApplyBulletedLists(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeApplyBulletedLists(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeApplyBulletedLists(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeApplyNumberedLists(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeApplyNumberedLists(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeApplyNumberedLists(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeApplyNumberedLists(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeReplaceQuotes(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeReplaceQuotes(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeReplaceQuotes(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeReplaceQuotes(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeReplaceSymbols(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeReplaceSymbols(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeReplaceSymbols(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeReplaceSymbols(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeReplaceOrdinals(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeReplaceOrdinals(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeReplaceOrdinals(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeReplaceOrdinals(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeReplaceFractions(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeReplaceFractions(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeReplaceFractions(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeReplaceFractions(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeReplacePlainTextEmphasis(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeReplacePlainTextEmphasis(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeReplacePlainTextEmphasis(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeReplacePlainTextEmphasis(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeFormatListItemBeginning(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeFormatListItemBeginning(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeFormatListItemBeginning(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeFormatListItemBeginning(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeDefineStyles(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeDefineStyles(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeDefineStyles(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeDefineStyles(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeReplaceHyperlinks(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeReplaceHyperlinks(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeReplaceHyperlinks(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeReplaceHyperlinks(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeApplyTables(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeApplyTables(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeApplyTables(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeApplyTables(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeApplyFirstIndents(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeApplyFirstIndents(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeApplyFirstIndents(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeApplyFirstIndents(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeApplyDates(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeApplyDates(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeApplyDates(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeApplyDates(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeApplyClosings(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeApplyClosings(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeApplyClosings(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeApplyClosings(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeMatchParentheses(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeMatchParentheses(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeMatchParentheses(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeMatchParentheses(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeReplaceFarEastDashes(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeReplaceFarEastDashes(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeReplaceFarEastDashes(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeReplaceFarEastDashes(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeDeleteAutoSpaces(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeDeleteAutoSpaces(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeDeleteAutoSpaces(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeDeleteAutoSpaces(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeInsertClosings(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeInsertClosings(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeInsertClosings(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeInsertClosings(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeAutoLetterWizard(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeAutoLetterWizard(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeAutoLetterWizard(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeAutoLetterWizard(This,prop) ) 

#define EmailOptions_get_AutoFormatAsYouTypeInsertOvers(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormatAsYouTypeInsertOvers(This,prop) ) 

#define EmailOptions_put_AutoFormatAsYouTypeInsertOvers(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormatAsYouTypeInsertOvers(This,prop) ) 

#define EmailOptions_get_RelyOnCSS(This,prop)	\
    ( (This)->lpVtbl -> get_RelyOnCSS(This,prop) ) 

#define EmailOptions_put_RelyOnCSS(This,prop)	\
    ( (This)->lpVtbl -> put_RelyOnCSS(This,prop) ) 

#define EmailOptions_get_HTMLFidelity(This,prop)	\
    ( (This)->lpVtbl -> get_HTMLFidelity(This,prop) ) 

#define EmailOptions_put_HTMLFidelity(This,prop)	\
    ( (This)->lpVtbl -> put_HTMLFidelity(This,prop) ) 

#define EmailOptions_get_EmbedSmartTag(This,prop)	\
    ( (This)->lpVtbl -> get_EmbedSmartTag(This,prop) ) 

#define EmailOptions_put_EmbedSmartTag(This,prop)	\
    ( (This)->lpVtbl -> put_EmbedSmartTag(This,prop) ) 

#define EmailOptions_get_TabIndentKey(This,prop)	\
    ( (This)->lpVtbl -> get_TabIndentKey(This,prop) ) 

#define EmailOptions_put_TabIndentKey(This,prop)	\
    ( (This)->lpVtbl -> put_TabIndentKey(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __EmailOptions_INTERFACE_DEFINED__ */


#ifndef __EmailSignature_INTERFACE_DEFINED__
#define __EmailSignature_INTERFACE_DEFINED__

/* interface EmailSignature */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_EmailSignature;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209DC-0000-0000-C000-000000000046")
    EmailSignature : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NewMessageSignature( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NewMessageSignature( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReplyMessageSignature( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReplyMessageSignature( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EmailSignatureEntries( 
            /* [retval][out] */ EmailSignatureEntries **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EmailSignatureVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            EmailSignature * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            EmailSignature * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            EmailSignature * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            EmailSignature * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            EmailSignature * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            EmailSignature * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            EmailSignature * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            EmailSignature * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            EmailSignature * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            EmailSignature * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NewMessageSignature )( 
            EmailSignature * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NewMessageSignature )( 
            EmailSignature * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReplyMessageSignature )( 
            EmailSignature * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReplyMessageSignature )( 
            EmailSignature * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EmailSignatureEntries )( 
            EmailSignature * This,
            /* [retval][out] */ EmailSignatureEntries **prop);
        
        END_INTERFACE
    } EmailSignatureVtbl;

    interface EmailSignature
    {
        CONST_VTBL struct EmailSignatureVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define EmailSignature_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define EmailSignature_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define EmailSignature_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define EmailSignature_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define EmailSignature_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define EmailSignature_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define EmailSignature_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define EmailSignature_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define EmailSignature_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define EmailSignature_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define EmailSignature_get_NewMessageSignature(This,prop)	\
    ( (This)->lpVtbl -> get_NewMessageSignature(This,prop) ) 

#define EmailSignature_put_NewMessageSignature(This,prop)	\
    ( (This)->lpVtbl -> put_NewMessageSignature(This,prop) ) 

#define EmailSignature_get_ReplyMessageSignature(This,prop)	\
    ( (This)->lpVtbl -> get_ReplyMessageSignature(This,prop) ) 

#define EmailSignature_put_ReplyMessageSignature(This,prop)	\
    ( (This)->lpVtbl -> put_ReplyMessageSignature(This,prop) ) 

#define EmailSignature_get_EmailSignatureEntries(This,prop)	\
    ( (This)->lpVtbl -> get_EmailSignatureEntries(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __EmailSignature_INTERFACE_DEFINED__ */


#ifndef __Email_INTERFACE_DEFINED__
#define __Email_INTERFACE_DEFINED__

/* interface Email */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Email;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209DD-0000-0000-C000-000000000046")
    Email : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentEmailAuthor( 
            /* [retval][out] */ EmailAuthor **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EmailVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Email * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Email * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Email * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Email * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Email * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Email * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Email * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Email * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Email * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Email * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentEmailAuthor )( 
            Email * This,
            /* [retval][out] */ EmailAuthor **prop);
        
        END_INTERFACE
    } EmailVtbl;

    interface Email
    {
        CONST_VTBL struct EmailVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Email_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Email_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Email_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Email_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Email_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Email_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Email_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Email_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define Email_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Email_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Email_get_CurrentEmailAuthor(This,prop)	\
    ( (This)->lpVtbl -> get_CurrentEmailAuthor(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Email_INTERFACE_DEFINED__ */


#ifndef __HorizontalLineFormat_INTERFACE_DEFINED__
#define __HorizontalLineFormat_INTERFACE_DEFINED__

/* interface HorizontalLineFormat */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_HorizontalLineFormat;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209DE-0000-0000-C000-000000000046")
    HorizontalLineFormat : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PercentWidth( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PercentWidth( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NoShade( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoShade( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ WdHorizontalLineAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ WdHorizontalLineAlignment prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WidthType( 
            /* [retval][out] */ WdHorizontalLineWidthType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WidthType( 
            /* [in] */ WdHorizontalLineWidthType prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HorizontalLineFormatVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HorizontalLineFormat * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HorizontalLineFormat * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HorizontalLineFormat * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HorizontalLineFormat * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HorizontalLineFormat * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HorizontalLineFormat * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HorizontalLineFormat * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            HorizontalLineFormat * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            HorizontalLineFormat * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HorizontalLineFormat * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PercentWidth )( 
            HorizontalLineFormat * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PercentWidth )( 
            HorizontalLineFormat * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NoShade )( 
            HorizontalLineFormat * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NoShade )( 
            HorizontalLineFormat * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            HorizontalLineFormat * This,
            /* [retval][out] */ WdHorizontalLineAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            HorizontalLineFormat * This,
            /* [in] */ WdHorizontalLineAlignment prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WidthType )( 
            HorizontalLineFormat * This,
            /* [retval][out] */ WdHorizontalLineWidthType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WidthType )( 
            HorizontalLineFormat * This,
            /* [in] */ WdHorizontalLineWidthType prop);
        
        END_INTERFACE
    } HorizontalLineFormatVtbl;

    interface HorizontalLineFormat
    {
        CONST_VTBL struct HorizontalLineFormatVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HorizontalLineFormat_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HorizontalLineFormat_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HorizontalLineFormat_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HorizontalLineFormat_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HorizontalLineFormat_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HorizontalLineFormat_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HorizontalLineFormat_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HorizontalLineFormat_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define HorizontalLineFormat_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define HorizontalLineFormat_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define HorizontalLineFormat_get_PercentWidth(This,prop)	\
    ( (This)->lpVtbl -> get_PercentWidth(This,prop) ) 

#define HorizontalLineFormat_put_PercentWidth(This,prop)	\
    ( (This)->lpVtbl -> put_PercentWidth(This,prop) ) 

#define HorizontalLineFormat_get_NoShade(This,prop)	\
    ( (This)->lpVtbl -> get_NoShade(This,prop) ) 

#define HorizontalLineFormat_put_NoShade(This,prop)	\
    ( (This)->lpVtbl -> put_NoShade(This,prop) ) 

#define HorizontalLineFormat_get_Alignment(This,prop)	\
    ( (This)->lpVtbl -> get_Alignment(This,prop) ) 

#define HorizontalLineFormat_put_Alignment(This,prop)	\
    ( (This)->lpVtbl -> put_Alignment(This,prop) ) 

#define HorizontalLineFormat_get_WidthType(This,prop)	\
    ( (This)->lpVtbl -> get_WidthType(This,prop) ) 

#define HorizontalLineFormat_put_WidthType(This,prop)	\
    ( (This)->lpVtbl -> put_WidthType(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HorizontalLineFormat_INTERFACE_DEFINED__ */


#ifndef __Frameset_INTERFACE_DEFINED__
#define __Frameset_INTERFACE_DEFINED__

/* interface Frameset */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Frameset;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209E2-0000-0000-C000-000000000046")
    Frameset : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ParentFrameset( 
            /* [retval][out] */ Frameset **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdFramesetType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WidthType( 
            /* [retval][out] */ WdFramesetSizeType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WidthType( 
            /* [in] */ WdFramesetSizeType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HeightType( 
            /* [retval][out] */ WdFramesetSizeType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HeightType( 
            /* [in] */ WdFramesetSizeType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChildFramesetCount( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChildFramesetItem( 
            /* [in] */ long Index,
            /* [retval][out] */ Frameset **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FramesetBorderWidth( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FramesetBorderWidth( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FramesetBorderColor( 
            /* [retval][out] */ WdColor *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FramesetBorderColor( 
            /* [in] */ WdColor prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FrameScrollbarType( 
            /* [retval][out] */ WdScrollbarType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FrameScrollbarType( 
            /* [in] */ WdScrollbarType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FrameResizable( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FrameResizable( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FrameName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FrameName( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FrameDisplayBorders( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FrameDisplayBorders( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FrameDefaultURL( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FrameDefaultURL( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FrameLinkToFile( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FrameLinkToFile( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNewFrame( 
            /* [in] */ WdFramesetNewFrameLocation Where,
            /* [retval][out] */ Frameset **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FramesetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Frameset * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Frameset * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Frameset * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Frameset * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Frameset * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Frameset * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Frameset * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Frameset * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Frameset * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Frameset * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Frameset * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ParentFrameset )( 
            Frameset * This,
            /* [retval][out] */ Frameset **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Frameset * This,
            /* [retval][out] */ WdFramesetType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WidthType )( 
            Frameset * This,
            /* [retval][out] */ WdFramesetSizeType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WidthType )( 
            Frameset * This,
            /* [in] */ WdFramesetSizeType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HeightType )( 
            Frameset * This,
            /* [retval][out] */ WdFramesetSizeType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HeightType )( 
            Frameset * This,
            /* [in] */ WdFramesetSizeType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Frameset * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            Frameset * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Frameset * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            Frameset * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChildFramesetCount )( 
            Frameset * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChildFramesetItem )( 
            Frameset * This,
            /* [in] */ long Index,
            /* [retval][out] */ Frameset **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FramesetBorderWidth )( 
            Frameset * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FramesetBorderWidth )( 
            Frameset * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FramesetBorderColor )( 
            Frameset * This,
            /* [retval][out] */ WdColor *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FramesetBorderColor )( 
            Frameset * This,
            /* [in] */ WdColor prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FrameScrollbarType )( 
            Frameset * This,
            /* [retval][out] */ WdScrollbarType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FrameScrollbarType )( 
            Frameset * This,
            /* [in] */ WdScrollbarType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FrameResizable )( 
            Frameset * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FrameResizable )( 
            Frameset * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FrameName )( 
            Frameset * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FrameName )( 
            Frameset * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FrameDisplayBorders )( 
            Frameset * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FrameDisplayBorders )( 
            Frameset * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FrameDefaultURL )( 
            Frameset * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FrameDefaultURL )( 
            Frameset * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FrameLinkToFile )( 
            Frameset * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FrameLinkToFile )( 
            Frameset * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNewFrame )( 
            Frameset * This,
            /* [in] */ WdFramesetNewFrameLocation Where,
            /* [retval][out] */ Frameset **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Frameset * This);
        
        END_INTERFACE
    } FramesetVtbl;

    interface Frameset
    {
        CONST_VTBL struct FramesetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Frameset_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Frameset_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Frameset_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Frameset_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Frameset_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Frameset_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Frameset_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Frameset_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define Frameset_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Frameset_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Frameset_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Frameset_get_ParentFrameset(This,prop)	\
    ( (This)->lpVtbl -> get_ParentFrameset(This,prop) ) 

#define Frameset_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define Frameset_get_WidthType(This,prop)	\
    ( (This)->lpVtbl -> get_WidthType(This,prop) ) 

#define Frameset_put_WidthType(This,prop)	\
    ( (This)->lpVtbl -> put_WidthType(This,prop) ) 

#define Frameset_get_HeightType(This,prop)	\
    ( (This)->lpVtbl -> get_HeightType(This,prop) ) 

#define Frameset_put_HeightType(This,prop)	\
    ( (This)->lpVtbl -> put_HeightType(This,prop) ) 

#define Frameset_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define Frameset_put_Width(This,prop)	\
    ( (This)->lpVtbl -> put_Width(This,prop) ) 

#define Frameset_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define Frameset_put_Height(This,prop)	\
    ( (This)->lpVtbl -> put_Height(This,prop) ) 

#define Frameset_get_ChildFramesetCount(This,prop)	\
    ( (This)->lpVtbl -> get_ChildFramesetCount(This,prop) ) 

#define Frameset_get_ChildFramesetItem(This,Index,prop)	\
    ( (This)->lpVtbl -> get_ChildFramesetItem(This,Index,prop) ) 

#define Frameset_get_FramesetBorderWidth(This,prop)	\
    ( (This)->lpVtbl -> get_FramesetBorderWidth(This,prop) ) 

#define Frameset_put_FramesetBorderWidth(This,prop)	\
    ( (This)->lpVtbl -> put_FramesetBorderWidth(This,prop) ) 

#define Frameset_get_FramesetBorderColor(This,prop)	\
    ( (This)->lpVtbl -> get_FramesetBorderColor(This,prop) ) 

#define Frameset_put_FramesetBorderColor(This,prop)	\
    ( (This)->lpVtbl -> put_FramesetBorderColor(This,prop) ) 

#define Frameset_get_FrameScrollbarType(This,prop)	\
    ( (This)->lpVtbl -> get_FrameScrollbarType(This,prop) ) 

#define Frameset_put_FrameScrollbarType(This,prop)	\
    ( (This)->lpVtbl -> put_FrameScrollbarType(This,prop) ) 

#define Frameset_get_FrameResizable(This,prop)	\
    ( (This)->lpVtbl -> get_FrameResizable(This,prop) ) 

#define Frameset_put_FrameResizable(This,prop)	\
    ( (This)->lpVtbl -> put_FrameResizable(This,prop) ) 

#define Frameset_get_FrameName(This,prop)	\
    ( (This)->lpVtbl -> get_FrameName(This,prop) ) 

#define Frameset_put_FrameName(This,prop)	\
    ( (This)->lpVtbl -> put_FrameName(This,prop) ) 

#define Frameset_get_FrameDisplayBorders(This,prop)	\
    ( (This)->lpVtbl -> get_FrameDisplayBorders(This,prop) ) 

#define Frameset_put_FrameDisplayBorders(This,prop)	\
    ( (This)->lpVtbl -> put_FrameDisplayBorders(This,prop) ) 

#define Frameset_get_FrameDefaultURL(This,prop)	\
    ( (This)->lpVtbl -> get_FrameDefaultURL(This,prop) ) 

#define Frameset_put_FrameDefaultURL(This,prop)	\
    ( (This)->lpVtbl -> put_FrameDefaultURL(This,prop) ) 

#define Frameset_get_FrameLinkToFile(This,prop)	\
    ( (This)->lpVtbl -> get_FrameLinkToFile(This,prop) ) 

#define Frameset_put_FrameLinkToFile(This,prop)	\
    ( (This)->lpVtbl -> put_FrameLinkToFile(This,prop) ) 

#define Frameset_AddNewFrame(This,Where,prop)	\
    ( (This)->lpVtbl -> AddNewFrame(This,Where,prop) ) 

#define Frameset_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Frameset_INTERFACE_DEFINED__ */


#ifndef __DefaultWebOptions_INTERFACE_DEFINED__
#define __DefaultWebOptions_INTERFACE_DEFINED__

/* interface DefaultWebOptions */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_DefaultWebOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209E3-0000-0000-C000-000000000046")
    DefaultWebOptions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OptimizeForBrowser( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OptimizeForBrowser( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BrowserLevel( 
            /* [retval][out] */ WdBrowserLevel *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BrowserLevel( 
            /* [in] */ WdBrowserLevel prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelyOnCSS( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RelyOnCSS( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OrganizeInFolder( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OrganizeInFolder( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UpdateLinksOnSave( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UpdateLinksOnSave( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseLongFileNames( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseLongFileNames( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CheckIfOfficeIsHTMLEditor( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CheckIfOfficeIsHTMLEditor( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CheckIfWordIsDefaultHTMLEditor( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CheckIfWordIsDefaultHTMLEditor( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelyOnVML( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RelyOnVML( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowPNG( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowPNG( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScreenSize( 
            /* [retval][out] */ MsoScreenSize *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScreenSize( 
            /* [in] */ MsoScreenSize prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PixelsPerInch( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PixelsPerInch( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Encoding( 
            /* [retval][out] */ MsoEncoding *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Encoding( 
            /* [in] */ MsoEncoding prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AlwaysSaveInDefaultEncoding( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AlwaysSaveInDefaultEncoding( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Fonts( 
            /* [retval][out] */ /* external definition not present */ WebPageFonts **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FolderSuffix( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TargetBrowser( 
            /* [retval][out] */ MsoTargetBrowser *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TargetBrowser( 
            /* [in] */ MsoTargetBrowser prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SaveNewWebPagesAsWebArchives( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SaveNewWebPagesAsWebArchives( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DefaultWebOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DefaultWebOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DefaultWebOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DefaultWebOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DefaultWebOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DefaultWebOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DefaultWebOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DefaultWebOptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            DefaultWebOptions * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            DefaultWebOptions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DefaultWebOptions * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OptimizeForBrowser )( 
            DefaultWebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OptimizeForBrowser )( 
            DefaultWebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BrowserLevel )( 
            DefaultWebOptions * This,
            /* [retval][out] */ WdBrowserLevel *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BrowserLevel )( 
            DefaultWebOptions * This,
            /* [in] */ WdBrowserLevel prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelyOnCSS )( 
            DefaultWebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RelyOnCSS )( 
            DefaultWebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OrganizeInFolder )( 
            DefaultWebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OrganizeInFolder )( 
            DefaultWebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateLinksOnSave )( 
            DefaultWebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateLinksOnSave )( 
            DefaultWebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseLongFileNames )( 
            DefaultWebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseLongFileNames )( 
            DefaultWebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CheckIfOfficeIsHTMLEditor )( 
            DefaultWebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CheckIfOfficeIsHTMLEditor )( 
            DefaultWebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CheckIfWordIsDefaultHTMLEditor )( 
            DefaultWebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CheckIfWordIsDefaultHTMLEditor )( 
            DefaultWebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelyOnVML )( 
            DefaultWebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RelyOnVML )( 
            DefaultWebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPNG )( 
            DefaultWebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPNG )( 
            DefaultWebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScreenSize )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoScreenSize *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScreenSize )( 
            DefaultWebOptions * This,
            /* [in] */ MsoScreenSize prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PixelsPerInch )( 
            DefaultWebOptions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PixelsPerInch )( 
            DefaultWebOptions * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Encoding )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoEncoding *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Encoding )( 
            DefaultWebOptions * This,
            /* [in] */ MsoEncoding prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AlwaysSaveInDefaultEncoding )( 
            DefaultWebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AlwaysSaveInDefaultEncoding )( 
            DefaultWebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Fonts )( 
            DefaultWebOptions * This,
            /* [retval][out] */ /* external definition not present */ WebPageFonts **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FolderSuffix )( 
            DefaultWebOptions * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TargetBrowser )( 
            DefaultWebOptions * This,
            /* [retval][out] */ MsoTargetBrowser *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TargetBrowser )( 
            DefaultWebOptions * This,
            /* [in] */ MsoTargetBrowser prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SaveNewWebPagesAsWebArchives )( 
            DefaultWebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SaveNewWebPagesAsWebArchives )( 
            DefaultWebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } DefaultWebOptionsVtbl;

    interface DefaultWebOptions
    {
        CONST_VTBL struct DefaultWebOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DefaultWebOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DefaultWebOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DefaultWebOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DefaultWebOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DefaultWebOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DefaultWebOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DefaultWebOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DefaultWebOptions_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define DefaultWebOptions_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define DefaultWebOptions_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define DefaultWebOptions_get_OptimizeForBrowser(This,prop)	\
    ( (This)->lpVtbl -> get_OptimizeForBrowser(This,prop) ) 

#define DefaultWebOptions_put_OptimizeForBrowser(This,prop)	\
    ( (This)->lpVtbl -> put_OptimizeForBrowser(This,prop) ) 

#define DefaultWebOptions_get_BrowserLevel(This,prop)	\
    ( (This)->lpVtbl -> get_BrowserLevel(This,prop) ) 

#define DefaultWebOptions_put_BrowserLevel(This,prop)	\
    ( (This)->lpVtbl -> put_BrowserLevel(This,prop) ) 

#define DefaultWebOptions_get_RelyOnCSS(This,prop)	\
    ( (This)->lpVtbl -> get_RelyOnCSS(This,prop) ) 

#define DefaultWebOptions_put_RelyOnCSS(This,prop)	\
    ( (This)->lpVtbl -> put_RelyOnCSS(This,prop) ) 

#define DefaultWebOptions_get_OrganizeInFolder(This,prop)	\
    ( (This)->lpVtbl -> get_OrganizeInFolder(This,prop) ) 

#define DefaultWebOptions_put_OrganizeInFolder(This,prop)	\
    ( (This)->lpVtbl -> put_OrganizeInFolder(This,prop) ) 

#define DefaultWebOptions_get_UpdateLinksOnSave(This,prop)	\
    ( (This)->lpVtbl -> get_UpdateLinksOnSave(This,prop) ) 

#define DefaultWebOptions_put_UpdateLinksOnSave(This,prop)	\
    ( (This)->lpVtbl -> put_UpdateLinksOnSave(This,prop) ) 

#define DefaultWebOptions_get_UseLongFileNames(This,prop)	\
    ( (This)->lpVtbl -> get_UseLongFileNames(This,prop) ) 

#define DefaultWebOptions_put_UseLongFileNames(This,prop)	\
    ( (This)->lpVtbl -> put_UseLongFileNames(This,prop) ) 

#define DefaultWebOptions_get_CheckIfOfficeIsHTMLEditor(This,prop)	\
    ( (This)->lpVtbl -> get_CheckIfOfficeIsHTMLEditor(This,prop) ) 

#define DefaultWebOptions_put_CheckIfOfficeIsHTMLEditor(This,prop)	\
    ( (This)->lpVtbl -> put_CheckIfOfficeIsHTMLEditor(This,prop) ) 

#define DefaultWebOptions_get_CheckIfWordIsDefaultHTMLEditor(This,prop)	\
    ( (This)->lpVtbl -> get_CheckIfWordIsDefaultHTMLEditor(This,prop) ) 

#define DefaultWebOptions_put_CheckIfWordIsDefaultHTMLEditor(This,prop)	\
    ( (This)->lpVtbl -> put_CheckIfWordIsDefaultHTMLEditor(This,prop) ) 

#define DefaultWebOptions_get_RelyOnVML(This,prop)	\
    ( (This)->lpVtbl -> get_RelyOnVML(This,prop) ) 

#define DefaultWebOptions_put_RelyOnVML(This,prop)	\
    ( (This)->lpVtbl -> put_RelyOnVML(This,prop) ) 

#define DefaultWebOptions_get_AllowPNG(This,prop)	\
    ( (This)->lpVtbl -> get_AllowPNG(This,prop) ) 

#define DefaultWebOptions_put_AllowPNG(This,prop)	\
    ( (This)->lpVtbl -> put_AllowPNG(This,prop) ) 

#define DefaultWebOptions_get_ScreenSize(This,prop)	\
    ( (This)->lpVtbl -> get_ScreenSize(This,prop) ) 

#define DefaultWebOptions_put_ScreenSize(This,prop)	\
    ( (This)->lpVtbl -> put_ScreenSize(This,prop) ) 

#define DefaultWebOptions_get_PixelsPerInch(This,prop)	\
    ( (This)->lpVtbl -> get_PixelsPerInch(This,prop) ) 

#define DefaultWebOptions_put_PixelsPerInch(This,prop)	\
    ( (This)->lpVtbl -> put_PixelsPerInch(This,prop) ) 

#define DefaultWebOptions_get_Encoding(This,prop)	\
    ( (This)->lpVtbl -> get_Encoding(This,prop) ) 

#define DefaultWebOptions_put_Encoding(This,prop)	\
    ( (This)->lpVtbl -> put_Encoding(This,prop) ) 

#define DefaultWebOptions_get_AlwaysSaveInDefaultEncoding(This,prop)	\
    ( (This)->lpVtbl -> get_AlwaysSaveInDefaultEncoding(This,prop) ) 

#define DefaultWebOptions_put_AlwaysSaveInDefaultEncoding(This,prop)	\
    ( (This)->lpVtbl -> put_AlwaysSaveInDefaultEncoding(This,prop) ) 

#define DefaultWebOptions_get_Fonts(This,prop)	\
    ( (This)->lpVtbl -> get_Fonts(This,prop) ) 

#define DefaultWebOptions_get_FolderSuffix(This,prop)	\
    ( (This)->lpVtbl -> get_FolderSuffix(This,prop) ) 

#define DefaultWebOptions_get_TargetBrowser(This,prop)	\
    ( (This)->lpVtbl -> get_TargetBrowser(This,prop) ) 

#define DefaultWebOptions_put_TargetBrowser(This,prop)	\
    ( (This)->lpVtbl -> put_TargetBrowser(This,prop) ) 

#define DefaultWebOptions_get_SaveNewWebPagesAsWebArchives(This,prop)	\
    ( (This)->lpVtbl -> get_SaveNewWebPagesAsWebArchives(This,prop) ) 

#define DefaultWebOptions_put_SaveNewWebPagesAsWebArchives(This,prop)	\
    ( (This)->lpVtbl -> put_SaveNewWebPagesAsWebArchives(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DefaultWebOptions_INTERFACE_DEFINED__ */


#ifndef __WebOptions_INTERFACE_DEFINED__
#define __WebOptions_INTERFACE_DEFINED__

/* interface WebOptions */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_WebOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209E4-0000-0000-C000-000000000046")
    WebOptions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OptimizeForBrowser( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OptimizeForBrowser( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BrowserLevel( 
            /* [retval][out] */ WdBrowserLevel *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BrowserLevel( 
            /* [in] */ WdBrowserLevel prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelyOnCSS( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RelyOnCSS( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OrganizeInFolder( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_OrganizeInFolder( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UseLongFileNames( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UseLongFileNames( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RelyOnVML( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RelyOnVML( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowPNG( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowPNG( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ScreenSize( 
            /* [retval][out] */ MsoScreenSize *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ScreenSize( 
            /* [in] */ MsoScreenSize prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PixelsPerInch( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PixelsPerInch( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Encoding( 
            /* [retval][out] */ MsoEncoding *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Encoding( 
            /* [in] */ MsoEncoding prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FolderSuffix( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE UseDefaultFolderSuffix( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TargetBrowser( 
            /* [retval][out] */ MsoTargetBrowser *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TargetBrowser( 
            /* [in] */ MsoTargetBrowser prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WebOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WebOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WebOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WebOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WebOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WebOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WebOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WebOptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            WebOptions * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            WebOptions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WebOptions * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OptimizeForBrowser )( 
            WebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OptimizeForBrowser )( 
            WebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BrowserLevel )( 
            WebOptions * This,
            /* [retval][out] */ WdBrowserLevel *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BrowserLevel )( 
            WebOptions * This,
            /* [in] */ WdBrowserLevel prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelyOnCSS )( 
            WebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RelyOnCSS )( 
            WebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OrganizeInFolder )( 
            WebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_OrganizeInFolder )( 
            WebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UseLongFileNames )( 
            WebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UseLongFileNames )( 
            WebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RelyOnVML )( 
            WebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RelyOnVML )( 
            WebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPNG )( 
            WebOptions * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPNG )( 
            WebOptions * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ScreenSize )( 
            WebOptions * This,
            /* [retval][out] */ MsoScreenSize *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ScreenSize )( 
            WebOptions * This,
            /* [in] */ MsoScreenSize prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PixelsPerInch )( 
            WebOptions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PixelsPerInch )( 
            WebOptions * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Encoding )( 
            WebOptions * This,
            /* [retval][out] */ MsoEncoding *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Encoding )( 
            WebOptions * This,
            /* [in] */ MsoEncoding prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FolderSuffix )( 
            WebOptions * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UseDefaultFolderSuffix )( 
            WebOptions * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TargetBrowser )( 
            WebOptions * This,
            /* [retval][out] */ MsoTargetBrowser *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TargetBrowser )( 
            WebOptions * This,
            /* [in] */ MsoTargetBrowser prop);
        
        END_INTERFACE
    } WebOptionsVtbl;

    interface WebOptions
    {
        CONST_VTBL struct WebOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WebOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define WebOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define WebOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define WebOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define WebOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define WebOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define WebOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define WebOptions_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define WebOptions_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define WebOptions_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define WebOptions_get_OptimizeForBrowser(This,prop)	\
    ( (This)->lpVtbl -> get_OptimizeForBrowser(This,prop) ) 

#define WebOptions_put_OptimizeForBrowser(This,prop)	\
    ( (This)->lpVtbl -> put_OptimizeForBrowser(This,prop) ) 

#define WebOptions_get_BrowserLevel(This,prop)	\
    ( (This)->lpVtbl -> get_BrowserLevel(This,prop) ) 

#define WebOptions_put_BrowserLevel(This,prop)	\
    ( (This)->lpVtbl -> put_BrowserLevel(This,prop) ) 

#define WebOptions_get_RelyOnCSS(This,prop)	\
    ( (This)->lpVtbl -> get_RelyOnCSS(This,prop) ) 

#define WebOptions_put_RelyOnCSS(This,prop)	\
    ( (This)->lpVtbl -> put_RelyOnCSS(This,prop) ) 

#define WebOptions_get_OrganizeInFolder(This,prop)	\
    ( (This)->lpVtbl -> get_OrganizeInFolder(This,prop) ) 

#define WebOptions_put_OrganizeInFolder(This,prop)	\
    ( (This)->lpVtbl -> put_OrganizeInFolder(This,prop) ) 

#define WebOptions_get_UseLongFileNames(This,prop)	\
    ( (This)->lpVtbl -> get_UseLongFileNames(This,prop) ) 

#define WebOptions_put_UseLongFileNames(This,prop)	\
    ( (This)->lpVtbl -> put_UseLongFileNames(This,prop) ) 

#define WebOptions_get_RelyOnVML(This,prop)	\
    ( (This)->lpVtbl -> get_RelyOnVML(This,prop) ) 

#define WebOptions_put_RelyOnVML(This,prop)	\
    ( (This)->lpVtbl -> put_RelyOnVML(This,prop) ) 

#define WebOptions_get_AllowPNG(This,prop)	\
    ( (This)->lpVtbl -> get_AllowPNG(This,prop) ) 

#define WebOptions_put_AllowPNG(This,prop)	\
    ( (This)->lpVtbl -> put_AllowPNG(This,prop) ) 

#define WebOptions_get_ScreenSize(This,prop)	\
    ( (This)->lpVtbl -> get_ScreenSize(This,prop) ) 

#define WebOptions_put_ScreenSize(This,prop)	\
    ( (This)->lpVtbl -> put_ScreenSize(This,prop) ) 

#define WebOptions_get_PixelsPerInch(This,prop)	\
    ( (This)->lpVtbl -> get_PixelsPerInch(This,prop) ) 

#define WebOptions_put_PixelsPerInch(This,prop)	\
    ( (This)->lpVtbl -> put_PixelsPerInch(This,prop) ) 

#define WebOptions_get_Encoding(This,prop)	\
    ( (This)->lpVtbl -> get_Encoding(This,prop) ) 

#define WebOptions_put_Encoding(This,prop)	\
    ( (This)->lpVtbl -> put_Encoding(This,prop) ) 

#define WebOptions_get_FolderSuffix(This,prop)	\
    ( (This)->lpVtbl -> get_FolderSuffix(This,prop) ) 

#define WebOptions_UseDefaultFolderSuffix(This)	\
    ( (This)->lpVtbl -> UseDefaultFolderSuffix(This) ) 

#define WebOptions_get_TargetBrowser(This,prop)	\
    ( (This)->lpVtbl -> get_TargetBrowser(This,prop) ) 

#define WebOptions_put_TargetBrowser(This,prop)	\
    ( (This)->lpVtbl -> put_TargetBrowser(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __WebOptions_INTERFACE_DEFINED__ */


#ifndef __OtherCorrectionsExceptions_INTERFACE_DEFINED__
#define __OtherCorrectionsExceptions_INTERFACE_DEFINED__

/* interface OtherCorrectionsExceptions */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_OtherCorrectionsExceptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209DF-0000-0000-C000-000000000046")
    OtherCorrectionsExceptions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ OtherCorrectionsException **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ OtherCorrectionsException **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OtherCorrectionsExceptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OtherCorrectionsExceptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OtherCorrectionsExceptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OtherCorrectionsExceptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OtherCorrectionsExceptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OtherCorrectionsExceptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OtherCorrectionsExceptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OtherCorrectionsExceptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            OtherCorrectionsExceptions * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            OtherCorrectionsExceptions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            OtherCorrectionsExceptions * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            OtherCorrectionsExceptions * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            OtherCorrectionsExceptions * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            OtherCorrectionsExceptions * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ OtherCorrectionsException **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            OtherCorrectionsExceptions * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ OtherCorrectionsException **prop);
        
        END_INTERFACE
    } OtherCorrectionsExceptionsVtbl;

    interface OtherCorrectionsExceptions
    {
        CONST_VTBL struct OtherCorrectionsExceptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OtherCorrectionsExceptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define OtherCorrectionsExceptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define OtherCorrectionsExceptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define OtherCorrectionsExceptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define OtherCorrectionsExceptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define OtherCorrectionsExceptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define OtherCorrectionsExceptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define OtherCorrectionsExceptions_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define OtherCorrectionsExceptions_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define OtherCorrectionsExceptions_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define OtherCorrectionsExceptions_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define OtherCorrectionsExceptions_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define OtherCorrectionsExceptions_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define OtherCorrectionsExceptions_Add(This,Name,prop)	\
    ( (This)->lpVtbl -> Add(This,Name,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __OtherCorrectionsExceptions_INTERFACE_DEFINED__ */


#ifndef __OtherCorrectionsException_INTERFACE_DEFINED__
#define __OtherCorrectionsException_INTERFACE_DEFINED__

/* interface OtherCorrectionsException */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_OtherCorrectionsException;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209E1-0000-0000-C000-000000000046")
    OtherCorrectionsException : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OtherCorrectionsExceptionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OtherCorrectionsException * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OtherCorrectionsException * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OtherCorrectionsException * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OtherCorrectionsException * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OtherCorrectionsException * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OtherCorrectionsException * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OtherCorrectionsException * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            OtherCorrectionsException * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            OtherCorrectionsException * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            OtherCorrectionsException * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            OtherCorrectionsException * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            OtherCorrectionsException * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            OtherCorrectionsException * This);
        
        END_INTERFACE
    } OtherCorrectionsExceptionVtbl;

    interface OtherCorrectionsException
    {
        CONST_VTBL struct OtherCorrectionsExceptionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OtherCorrectionsException_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define OtherCorrectionsException_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define OtherCorrectionsException_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define OtherCorrectionsException_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define OtherCorrectionsException_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define OtherCorrectionsException_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define OtherCorrectionsException_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define OtherCorrectionsException_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define OtherCorrectionsException_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define OtherCorrectionsException_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define OtherCorrectionsException_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define OtherCorrectionsException_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define OtherCorrectionsException_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __OtherCorrectionsException_INTERFACE_DEFINED__ */


#ifndef __EmailSignatureEntries_INTERFACE_DEFINED__
#define __EmailSignatureEntries_INTERFACE_DEFINED__

/* interface EmailSignatureEntries */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_EmailSignatureEntries;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209E5-0000-0000-C000-000000000046")
    EmailSignatureEntries : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ EmailSignatureEntry **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [in] */ Range *Range,
            /* [retval][out] */ EmailSignatureEntry **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EmailSignatureEntriesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            EmailSignatureEntries * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            EmailSignatureEntries * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            EmailSignatureEntries * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            EmailSignatureEntries * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            EmailSignatureEntries * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            EmailSignatureEntries * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            EmailSignatureEntries * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            EmailSignatureEntries * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            EmailSignatureEntries * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            EmailSignatureEntries * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            EmailSignatureEntries * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            EmailSignatureEntries * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            EmailSignatureEntries * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ EmailSignatureEntry **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            EmailSignatureEntries * This,
            /* [in] */ BSTR Name,
            /* [in] */ Range *Range,
            /* [retval][out] */ EmailSignatureEntry **prop);
        
        END_INTERFACE
    } EmailSignatureEntriesVtbl;

    interface EmailSignatureEntries
    {
        CONST_VTBL struct EmailSignatureEntriesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define EmailSignatureEntries_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define EmailSignatureEntries_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define EmailSignatureEntries_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define EmailSignatureEntries_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define EmailSignatureEntries_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define EmailSignatureEntries_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define EmailSignatureEntries_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define EmailSignatureEntries_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define EmailSignatureEntries_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define EmailSignatureEntries_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define EmailSignatureEntries_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define EmailSignatureEntries_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define EmailSignatureEntries_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define EmailSignatureEntries_Add(This,Name,Range,prop)	\
    ( (This)->lpVtbl -> Add(This,Name,Range,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __EmailSignatureEntries_INTERFACE_DEFINED__ */


#ifndef __EmailSignatureEntry_INTERFACE_DEFINED__
#define __EmailSignatureEntry_INTERFACE_DEFINED__

/* interface EmailSignatureEntry */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_EmailSignatureEntry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209E6-0000-0000-C000-000000000046")
    EmailSignatureEntry : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EmailSignatureEntryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            EmailSignatureEntry * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            EmailSignatureEntry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            EmailSignatureEntry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            EmailSignatureEntry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            EmailSignatureEntry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            EmailSignatureEntry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            EmailSignatureEntry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            EmailSignatureEntry * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            EmailSignatureEntry * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            EmailSignatureEntry * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            EmailSignatureEntry * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            EmailSignatureEntry * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            EmailSignatureEntry * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            EmailSignatureEntry * This);
        
        END_INTERFACE
    } EmailSignatureEntryVtbl;

    interface EmailSignatureEntry
    {
        CONST_VTBL struct EmailSignatureEntryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define EmailSignatureEntry_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define EmailSignatureEntry_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define EmailSignatureEntry_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define EmailSignatureEntry_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define EmailSignatureEntry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define EmailSignatureEntry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define EmailSignatureEntry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define EmailSignatureEntry_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define EmailSignatureEntry_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define EmailSignatureEntry_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define EmailSignatureEntry_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define EmailSignatureEntry_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define EmailSignatureEntry_put_Name(This,prop)	\
    ( (This)->lpVtbl -> put_Name(This,prop) ) 

#define EmailSignatureEntry_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __EmailSignatureEntry_INTERFACE_DEFINED__ */


#ifndef __HTMLDivision_INTERFACE_DEFINED__
#define __HTMLDivision_INTERFACE_DEFINED__

/* interface HTMLDivision */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_HTMLDivision;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209E7-0000-0000-C000-000000000046")
    HTMLDivision : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeftIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeftIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RightIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RightIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceBefore( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceBefore( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SpaceAfter( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SpaceAfter( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HTMLDivisions( 
            /* [retval][out] */ HTMLDivisions **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE HTMLDivisionParent( 
            /* [optional][in] */ VARIANT *LevelsUp,
            /* [retval][out] */ HTMLDivision **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HTMLDivisionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLDivision * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLDivision * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLDivision * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLDivision * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLDivision * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLDivision * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLDivision * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            HTMLDivision * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            HTMLDivision * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HTMLDivision * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            HTMLDivision * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            HTMLDivision * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeftIndent )( 
            HTMLDivision * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeftIndent )( 
            HTMLDivision * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RightIndent )( 
            HTMLDivision * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RightIndent )( 
            HTMLDivision * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceBefore )( 
            HTMLDivision * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceBefore )( 
            HTMLDivision * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SpaceAfter )( 
            HTMLDivision * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SpaceAfter )( 
            HTMLDivision * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HTMLDivisions )( 
            HTMLDivision * This,
            /* [retval][out] */ HTMLDivisions **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *HTMLDivisionParent )( 
            HTMLDivision * This,
            /* [optional][in] */ VARIANT *LevelsUp,
            /* [retval][out] */ HTMLDivision **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            HTMLDivision * This);
        
        END_INTERFACE
    } HTMLDivisionVtbl;

    interface HTMLDivision
    {
        CONST_VTBL struct HTMLDivisionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLDivision_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HTMLDivision_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HTMLDivision_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HTMLDivision_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HTMLDivision_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HTMLDivision_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HTMLDivision_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HTMLDivision_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define HTMLDivision_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define HTMLDivision_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define HTMLDivision_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define HTMLDivision_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define HTMLDivision_get_LeftIndent(This,prop)	\
    ( (This)->lpVtbl -> get_LeftIndent(This,prop) ) 

#define HTMLDivision_put_LeftIndent(This,prop)	\
    ( (This)->lpVtbl -> put_LeftIndent(This,prop) ) 

#define HTMLDivision_get_RightIndent(This,prop)	\
    ( (This)->lpVtbl -> get_RightIndent(This,prop) ) 

#define HTMLDivision_put_RightIndent(This,prop)	\
    ( (This)->lpVtbl -> put_RightIndent(This,prop) ) 

#define HTMLDivision_get_SpaceBefore(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceBefore(This,prop) ) 

#define HTMLDivision_put_SpaceBefore(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceBefore(This,prop) ) 

#define HTMLDivision_get_SpaceAfter(This,prop)	\
    ( (This)->lpVtbl -> get_SpaceAfter(This,prop) ) 

#define HTMLDivision_put_SpaceAfter(This,prop)	\
    ( (This)->lpVtbl -> put_SpaceAfter(This,prop) ) 

#define HTMLDivision_get_HTMLDivisions(This,prop)	\
    ( (This)->lpVtbl -> get_HTMLDivisions(This,prop) ) 

#define HTMLDivision_HTMLDivisionParent(This,LevelsUp,prop)	\
    ( (This)->lpVtbl -> HTMLDivisionParent(This,LevelsUp,prop) ) 

#define HTMLDivision_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HTMLDivision_INTERFACE_DEFINED__ */


#ifndef __HTMLDivisions_INTERFACE_DEFINED__
#define __HTMLDivisions_INTERFACE_DEFINED__

/* interface HTMLDivisions */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_HTMLDivisions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209E8-0000-0000-C000-000000000046")
    HTMLDivisions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NestingLevel( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ HTMLDivision **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ HTMLDivision **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HTMLDivisionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            HTMLDivisions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            HTMLDivisions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            HTMLDivisions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            HTMLDivisions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            HTMLDivisions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            HTMLDivisions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            HTMLDivisions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            HTMLDivisions * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            HTMLDivisions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            HTMLDivisions * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            HTMLDivisions * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            HTMLDivisions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NestingLevel )( 
            HTMLDivisions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            HTMLDivisions * This,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ HTMLDivision **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            HTMLDivisions * This,
            /* [in] */ long Index,
            /* [retval][out] */ HTMLDivision **prop);
        
        END_INTERFACE
    } HTMLDivisionsVtbl;

    interface HTMLDivisions
    {
        CONST_VTBL struct HTMLDivisionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define HTMLDivisions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define HTMLDivisions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define HTMLDivisions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define HTMLDivisions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define HTMLDivisions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define HTMLDivisions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define HTMLDivisions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define HTMLDivisions_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define HTMLDivisions_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define HTMLDivisions_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define HTMLDivisions_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define HTMLDivisions_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define HTMLDivisions_get_NestingLevel(This,prop)	\
    ( (This)->lpVtbl -> get_NestingLevel(This,prop) ) 

#define HTMLDivisions_Add(This,Range,prop)	\
    ( (This)->lpVtbl -> Add(This,Range,prop) ) 

#define HTMLDivisions_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __HTMLDivisions_INTERFACE_DEFINED__ */


#ifndef __DiagramNode_INTERFACE_DEFINED__
#define __DiagramNode_INTERFACE_DEFINED__

/* interface DiagramNode */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_DiagramNode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209E9-0000-0000-C000-000000000046")
    DiagramNode : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ /* external definition not present */ DiagramNodeChildren **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shape( 
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Root( 
            /* [retval][out] */ DiagramNode **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Diagram( 
            /* [retval][out] */ Diagram **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Layout( 
            /* [retval][out] */ MsoOrgChartLayoutType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Layout( 
            /* [in] */ MsoOrgChartLayoutType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextShape( 
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNode( 
            /* [defaultvalue][optional][in] */ MsoRelativeNodePosition Pos,
            /* [defaultvalue][optional][in] */ MsoDiagramNodeType NodeType,
            /* [retval][out] */ DiagramNode **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveNode( 
            /* [out] */ DiagramNode **TargetNode,
            /* [in] */ MsoRelativeNodePosition Pos) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReplaceNode( 
            /* [out] */ DiagramNode **TargetNode) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SwapNode( 
            /* [out] */ DiagramNode **TargetNode,
            /* [defaultvalue][optional][in] */ MsoRelativeNodePosition Pos = -1) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE CloneNode( 
            /* [in] */ VARIANT_BOOL copyChildren,
            /* [defaultvalue][optional][out] */ DiagramNode **TargetNode,
            /* [defaultvalue][optional][in] */ MsoRelativeNodePosition Pos,
            /* [retval][out] */ DiagramNode **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE TransferChildren( 
            /* [out] */ DiagramNode **ReceivingNode) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextNode( 
            /* [retval][out] */ DiagramNode **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE PrevNode( 
            /* [retval][out] */ DiagramNode **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DiagramNodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DiagramNode * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DiagramNode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DiagramNode * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DiagramNode * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DiagramNode * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DiagramNode * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DiagramNode * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            DiagramNode * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            DiagramNode * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DiagramNode * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            DiagramNode * This,
            /* [retval][out] */ /* external definition not present */ DiagramNodeChildren **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shape )( 
            DiagramNode * This,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Root )( 
            DiagramNode * This,
            /* [retval][out] */ DiagramNode **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Diagram )( 
            DiagramNode * This,
            /* [retval][out] */ Diagram **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Layout )( 
            DiagramNode * This,
            /* [retval][out] */ MsoOrgChartLayoutType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Layout )( 
            DiagramNode * This,
            /* [in] */ MsoOrgChartLayoutType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextShape )( 
            DiagramNode * This,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNode )( 
            DiagramNode * This,
            /* [defaultvalue][optional][in] */ MsoRelativeNodePosition Pos,
            /* [defaultvalue][optional][in] */ MsoDiagramNodeType NodeType,
            /* [retval][out] */ DiagramNode **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            DiagramNode * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveNode )( 
            DiagramNode * This,
            /* [out] */ DiagramNode **TargetNode,
            /* [in] */ MsoRelativeNodePosition Pos);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReplaceNode )( 
            DiagramNode * This,
            /* [out] */ DiagramNode **TargetNode);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SwapNode )( 
            DiagramNode * This,
            /* [out] */ DiagramNode **TargetNode,
            /* [defaultvalue][optional][in] */ MsoRelativeNodePosition Pos);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CloneNode )( 
            DiagramNode * This,
            /* [in] */ VARIANT_BOOL copyChildren,
            /* [defaultvalue][optional][out] */ DiagramNode **TargetNode,
            /* [defaultvalue][optional][in] */ MsoRelativeNodePosition Pos,
            /* [retval][out] */ DiagramNode **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TransferChildren )( 
            DiagramNode * This,
            /* [out] */ DiagramNode **ReceivingNode);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextNode )( 
            DiagramNode * This,
            /* [retval][out] */ DiagramNode **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PrevNode )( 
            DiagramNode * This,
            /* [retval][out] */ DiagramNode **prop);
        
        END_INTERFACE
    } DiagramNodeVtbl;

    interface DiagramNode
    {
        CONST_VTBL struct DiagramNodeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DiagramNode_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DiagramNode_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DiagramNode_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DiagramNode_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DiagramNode_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DiagramNode_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DiagramNode_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DiagramNode_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define DiagramNode_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define DiagramNode_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define DiagramNode_get_Children(This,prop)	\
    ( (This)->lpVtbl -> get_Children(This,prop) ) 

#define DiagramNode_get_Shape(This,prop)	\
    ( (This)->lpVtbl -> get_Shape(This,prop) ) 

#define DiagramNode_get_Root(This,prop)	\
    ( (This)->lpVtbl -> get_Root(This,prop) ) 

#define DiagramNode_get_Diagram(This,prop)	\
    ( (This)->lpVtbl -> get_Diagram(This,prop) ) 

#define DiagramNode_get_Layout(This,prop)	\
    ( (This)->lpVtbl -> get_Layout(This,prop) ) 

#define DiagramNode_put_Layout(This,prop)	\
    ( (This)->lpVtbl -> put_Layout(This,prop) ) 

#define DiagramNode_get_TextShape(This,prop)	\
    ( (This)->lpVtbl -> get_TextShape(This,prop) ) 

#define DiagramNode_AddNode(This,Pos,NodeType,prop)	\
    ( (This)->lpVtbl -> AddNode(This,Pos,NodeType,prop) ) 

#define DiagramNode_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define DiagramNode_MoveNode(This,TargetNode,Pos)	\
    ( (This)->lpVtbl -> MoveNode(This,TargetNode,Pos) ) 

#define DiagramNode_ReplaceNode(This,TargetNode)	\
    ( (This)->lpVtbl -> ReplaceNode(This,TargetNode) ) 

#define DiagramNode_SwapNode(This,TargetNode,Pos)	\
    ( (This)->lpVtbl -> SwapNode(This,TargetNode,Pos) ) 

#define DiagramNode_CloneNode(This,copyChildren,TargetNode,Pos,prop)	\
    ( (This)->lpVtbl -> CloneNode(This,copyChildren,TargetNode,Pos,prop) ) 

#define DiagramNode_TransferChildren(This,ReceivingNode)	\
    ( (This)->lpVtbl -> TransferChildren(This,ReceivingNode) ) 

#define DiagramNode_NextNode(This,prop)	\
    ( (This)->lpVtbl -> NextNode(This,prop) ) 

#define DiagramNode_PrevNode(This,prop)	\
    ( (This)->lpVtbl -> PrevNode(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DiagramNode_INTERFACE_DEFINED__ */


#ifndef __DiagramNodeChildren_INTERFACE_DEFINED__
#define __DiagramNodeChildren_INTERFACE_DEFINED__

/* interface DiagramNodeChildren */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_DiagramNodeChildren;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209EA-0000-0000-C000-000000000046")
    DiagramNodeChildren : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstChild( 
            /* [retval][out] */ DiagramNode **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LastChild( 
            /* [retval][out] */ DiagramNode **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ DiagramNode **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNode( 
            /* [defaultvalue][optional][in] */ VARIANT *Index,
            /* [defaultvalue][optional][in] */ MsoDiagramNodeType NodeType,
            /* [retval][out] */ DiagramNode **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DiagramNodeChildrenVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DiagramNodeChildren * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DiagramNodeChildren * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DiagramNodeChildren * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DiagramNodeChildren * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DiagramNodeChildren * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DiagramNodeChildren * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DiagramNodeChildren * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            DiagramNodeChildren * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            DiagramNodeChildren * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            DiagramNodeChildren * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DiagramNodeChildren * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            DiagramNodeChildren * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstChild )( 
            DiagramNodeChildren * This,
            /* [retval][out] */ DiagramNode **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastChild )( 
            DiagramNodeChildren * This,
            /* [retval][out] */ DiagramNode **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            DiagramNodeChildren * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ DiagramNode **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNode )( 
            DiagramNodeChildren * This,
            /* [defaultvalue][optional][in] */ VARIANT *Index,
            /* [defaultvalue][optional][in] */ MsoDiagramNodeType NodeType,
            /* [retval][out] */ DiagramNode **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectAll )( 
            DiagramNodeChildren * This);
        
        END_INTERFACE
    } DiagramNodeChildrenVtbl;

    interface DiagramNodeChildren
    {
        CONST_VTBL struct DiagramNodeChildrenVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DiagramNodeChildren_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DiagramNodeChildren_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DiagramNodeChildren_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DiagramNodeChildren_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DiagramNodeChildren_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DiagramNodeChildren_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DiagramNodeChildren_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DiagramNodeChildren_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define DiagramNodeChildren_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define DiagramNodeChildren_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define DiagramNodeChildren_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define DiagramNodeChildren_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define DiagramNodeChildren_get_FirstChild(This,prop)	\
    ( (This)->lpVtbl -> get_FirstChild(This,prop) ) 

#define DiagramNodeChildren_get_LastChild(This,prop)	\
    ( (This)->lpVtbl -> get_LastChild(This,prop) ) 

#define DiagramNodeChildren_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define DiagramNodeChildren_AddNode(This,Index,NodeType,prop)	\
    ( (This)->lpVtbl -> AddNode(This,Index,NodeType,prop) ) 

#define DiagramNodeChildren_SelectAll(This)	\
    ( (This)->lpVtbl -> SelectAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DiagramNodeChildren_INTERFACE_DEFINED__ */


#ifndef __DiagramNodes_INTERFACE_DEFINED__
#define __DiagramNodes_INTERFACE_DEFINED__

/* interface DiagramNodes */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_DiagramNodes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209EB-0000-0000-C000-000000000046")
    DiagramNodes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ DiagramNode **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DiagramNodesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DiagramNodes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DiagramNodes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DiagramNodes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DiagramNodes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DiagramNodes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DiagramNodes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DiagramNodes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            DiagramNodes * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            DiagramNodes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            DiagramNodes * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            DiagramNodes * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            DiagramNodes * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            DiagramNodes * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ DiagramNode **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectAll )( 
            DiagramNodes * This);
        
        END_INTERFACE
    } DiagramNodesVtbl;

    interface DiagramNodes
    {
        CONST_VTBL struct DiagramNodesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DiagramNodes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DiagramNodes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DiagramNodes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DiagramNodes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DiagramNodes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DiagramNodes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DiagramNodes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define DiagramNodes_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define DiagramNodes_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define DiagramNodes_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define DiagramNodes_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define DiagramNodes_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define DiagramNodes_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define DiagramNodes_SelectAll(This)	\
    ( (This)->lpVtbl -> SelectAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DiagramNodes_INTERFACE_DEFINED__ */


#ifndef __Diagram_INTERFACE_DEFINED__
#define __Diagram_INTERFACE_DEFINED__

/* interface Diagram */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Diagram;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209EC-0000-0000-C000-000000000046")
    Diagram : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Nodes( 
            /* [retval][out] */ DiagramNodes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ MsoDiagramType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoLayout( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoLayout( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Reverse( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Reverse( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoFormat( 
            /* [retval][out] */ MsoTriState *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoFormat( 
            /* [in] */ MsoTriState prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Convert( 
            /* [in] */ MsoDiagramType Type) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE FitText( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DiagramVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Diagram * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Diagram * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Diagram * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Diagram * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Diagram * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Diagram * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Diagram * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Diagram * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Diagram * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Diagram * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Nodes )( 
            Diagram * This,
            /* [retval][out] */ DiagramNodes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Diagram * This,
            /* [retval][out] */ MsoDiagramType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoLayout )( 
            Diagram * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoLayout )( 
            Diagram * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Reverse )( 
            Diagram * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Reverse )( 
            Diagram * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoFormat )( 
            Diagram * This,
            /* [retval][out] */ MsoTriState *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoFormat )( 
            Diagram * This,
            /* [in] */ MsoTriState prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Convert )( 
            Diagram * This,
            /* [in] */ MsoDiagramType Type);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FitText )( 
            Diagram * This);
        
        END_INTERFACE
    } DiagramVtbl;

    interface Diagram
    {
        CONST_VTBL struct DiagramVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Diagram_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Diagram_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Diagram_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Diagram_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Diagram_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Diagram_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Diagram_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Diagram_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define Diagram_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Diagram_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Diagram_get_Nodes(This,prop)	\
    ( (This)->lpVtbl -> get_Nodes(This,prop) ) 

#define Diagram_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define Diagram_get_AutoLayout(This,prop)	\
    ( (This)->lpVtbl -> get_AutoLayout(This,prop) ) 

#define Diagram_put_AutoLayout(This,prop)	\
    ( (This)->lpVtbl -> put_AutoLayout(This,prop) ) 

#define Diagram_get_Reverse(This,prop)	\
    ( (This)->lpVtbl -> get_Reverse(This,prop) ) 

#define Diagram_put_Reverse(This,prop)	\
    ( (This)->lpVtbl -> put_Reverse(This,prop) ) 

#define Diagram_get_AutoFormat(This,prop)	\
    ( (This)->lpVtbl -> get_AutoFormat(This,prop) ) 

#define Diagram_put_AutoFormat(This,prop)	\
    ( (This)->lpVtbl -> put_AutoFormat(This,prop) ) 

#define Diagram_Convert(This,Type)	\
    ( (This)->lpVtbl -> Convert(This,Type) ) 

#define Diagram_FitText(This)	\
    ( (This)->lpVtbl -> FitText(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Diagram_INTERFACE_DEFINED__ */


#ifndef __CustomProperty_INTERFACE_DEFINED__
#define __CustomProperty_INTERFACE_DEFINED__

/* interface CustomProperty */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_CustomProperty;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B923FDE0-F08C-11D3-91B0-00105A0A19FD")
    CustomProperty : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CustomPropertyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CustomProperty * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CustomProperty * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CustomProperty * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CustomProperty * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CustomProperty * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CustomProperty * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CustomProperty * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CustomProperty * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            CustomProperty * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            CustomProperty * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CustomProperty * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            CustomProperty * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CustomProperty * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            CustomProperty * This);
        
        END_INTERFACE
    } CustomPropertyVtbl;

    interface CustomProperty
    {
        CONST_VTBL struct CustomPropertyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CustomProperty_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CustomProperty_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CustomProperty_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CustomProperty_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CustomProperty_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CustomProperty_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CustomProperty_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CustomProperty_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define CustomProperty_get_Value(This,prop)	\
    ( (This)->lpVtbl -> get_Value(This,prop) ) 

#define CustomProperty_put_Value(This,prop)	\
    ( (This)->lpVtbl -> put_Value(This,prop) ) 

#define CustomProperty_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define CustomProperty_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define CustomProperty_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define CustomProperty_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CustomProperty_INTERFACE_DEFINED__ */


#ifndef __CustomProperties_INTERFACE_DEFINED__
#define __CustomProperties_INTERFACE_DEFINED__

/* interface CustomProperties */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_CustomProperties;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B923FDE1-F08C-11D3-91B0-00105A0A19FD")
    CustomProperties : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ CustomProperty **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [in] */ BSTR Value,
            /* [retval][out] */ CustomProperty **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CustomPropertiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CustomProperties * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CustomProperties * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CustomProperties * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CustomProperties * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CustomProperties * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CustomProperties * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CustomProperties * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            CustomProperties * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            CustomProperties * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CustomProperties * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            CustomProperties * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CustomProperties * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            CustomProperties * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ CustomProperty **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            CustomProperties * This,
            /* [in] */ BSTR Name,
            /* [in] */ BSTR Value,
            /* [retval][out] */ CustomProperty **prop);
        
        END_INTERFACE
    } CustomPropertiesVtbl;

    interface CustomProperties
    {
        CONST_VTBL struct CustomPropertiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CustomProperties_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CustomProperties_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CustomProperties_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CustomProperties_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CustomProperties_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CustomProperties_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CustomProperties_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CustomProperties_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define CustomProperties_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define CustomProperties_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define CustomProperties_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define CustomProperties_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define CustomProperties_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define CustomProperties_Add(This,Name,Value,prop)	\
    ( (This)->lpVtbl -> Add(This,Name,Value,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CustomProperties_INTERFACE_DEFINED__ */


#ifndef __SmartTag_INTERFACE_DEFINED__
#define __SmartTag_INTERFACE_DEFINED__

/* interface SmartTag */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_SmartTag;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209ED-0000-0000-C000-000000000046")
    SmartTag : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XML( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DownloadURL( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ CustomProperties **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartTagActions( 
            /* [retval][out] */ SmartTagActions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XMLNode( 
            /* [retval][out] */ XMLNode **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SmartTagVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SmartTag * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SmartTag * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SmartTag * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SmartTag * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SmartTag * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SmartTag * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SmartTag * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            SmartTag * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            SmartTag * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            SmartTag * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DownloadURL )( 
            SmartTag * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            SmartTag * This,
            /* [retval][out] */ CustomProperties **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SmartTag * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            SmartTag * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SmartTag * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            SmartTag * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            SmartTag * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartTagActions )( 
            SmartTag * This,
            /* [retval][out] */ SmartTagActions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XMLNode )( 
            SmartTag * This,
            /* [retval][out] */ XMLNode **prop);
        
        END_INTERFACE
    } SmartTagVtbl;

    interface SmartTag
    {
        CONST_VTBL struct SmartTagVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SmartTag_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SmartTag_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SmartTag_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SmartTag_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SmartTag_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SmartTag_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SmartTag_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SmartTag_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define SmartTag_get_XML(This,prop)	\
    ( (This)->lpVtbl -> get_XML(This,prop) ) 

#define SmartTag_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define SmartTag_get_DownloadURL(This,prop)	\
    ( (This)->lpVtbl -> get_DownloadURL(This,prop) ) 

#define SmartTag_get_Properties(This,prop)	\
    ( (This)->lpVtbl -> get_Properties(This,prop) ) 

#define SmartTag_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define SmartTag_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define SmartTag_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define SmartTag_Select(This)	\
    ( (This)->lpVtbl -> Select(This) ) 

#define SmartTag_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define SmartTag_get_SmartTagActions(This,prop)	\
    ( (This)->lpVtbl -> get_SmartTagActions(This,prop) ) 

#define SmartTag_get_XMLNode(This,prop)	\
    ( (This)->lpVtbl -> get_XMLNode(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SmartTag_INTERFACE_DEFINED__ */


#ifndef __SmartTags_INTERFACE_DEFINED__
#define __SmartTags_INTERFACE_DEFINED__

/* interface SmartTags */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_SmartTags;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209EE-0000-0000-C000-000000000046")
    SmartTags : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ SmartTag **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *Properties,
            /* [retval][out] */ SmartTag **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SmartTagsByType( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ SmartTags **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SmartTagsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SmartTags * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SmartTags * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SmartTags * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SmartTags * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SmartTags * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SmartTags * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SmartTags * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            SmartTags * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SmartTags * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SmartTags * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            SmartTags * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SmartTags * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            SmartTags * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ SmartTag **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            SmartTags * This,
            /* [in] */ BSTR Name,
            /* [optional][in] */ VARIANT *Range,
            /* [optional][in] */ VARIANT *Properties,
            /* [retval][out] */ SmartTag **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SmartTagsByType )( 
            SmartTags * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ SmartTags **prop);
        
        END_INTERFACE
    } SmartTagsVtbl;

    interface SmartTags
    {
        CONST_VTBL struct SmartTagsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SmartTags_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SmartTags_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SmartTags_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SmartTags_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SmartTags_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SmartTags_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SmartTags_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SmartTags_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define SmartTags_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define SmartTags_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define SmartTags_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define SmartTags_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define SmartTags_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define SmartTags_Add(This,Name,Range,Properties,prop)	\
    ( (This)->lpVtbl -> Add(This,Name,Range,Properties,prop) ) 

#define SmartTags_SmartTagsByType(This,Name,prop)	\
    ( (This)->lpVtbl -> SmartTagsByType(This,Name,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SmartTags_INTERFACE_DEFINED__ */


#ifndef __StyleSheet_INTERFACE_DEFINED__
#define __StyleSheet_INTERFACE_DEFINED__

/* interface StyleSheet */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_StyleSheet;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("000209EF-0000-0000-C000-000000000046")
    StyleSheet : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdStyleSheetLinkType *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ WdStyleSheetLinkType prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Title( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Title( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Move( 
            /* [in] */ WdStyleSheetPrecedence Precedence) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct StyleSheetVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            StyleSheet * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            StyleSheet * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            StyleSheet * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            StyleSheet * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            StyleSheet * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            StyleSheet * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            StyleSheet * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            StyleSheet * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            StyleSheet * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            StyleSheet * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            StyleSheet * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            StyleSheet * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            StyleSheet * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            StyleSheet * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            StyleSheet * This,
            /* [retval][out] */ WdStyleSheetLinkType *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            StyleSheet * This,
            /* [in] */ WdStyleSheetLinkType prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            StyleSheet * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Title )( 
            StyleSheet * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            StyleSheet * This,
            /* [in] */ WdStyleSheetPrecedence Precedence);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            StyleSheet * This);
        
        END_INTERFACE
    } StyleSheetVtbl;

    interface StyleSheet
    {
        CONST_VTBL struct StyleSheetVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define StyleSheet_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define StyleSheet_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define StyleSheet_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define StyleSheet_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define StyleSheet_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define StyleSheet_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define StyleSheet_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define StyleSheet_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define StyleSheet_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define StyleSheet_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define StyleSheet_get_FullName(This,prop)	\
    ( (This)->lpVtbl -> get_FullName(This,prop) ) 

#define StyleSheet_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define StyleSheet_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define StyleSheet_get_Path(This,prop)	\
    ( (This)->lpVtbl -> get_Path(This,prop) ) 

#define StyleSheet_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define StyleSheet_put_Type(This,prop)	\
    ( (This)->lpVtbl -> put_Type(This,prop) ) 

#define StyleSheet_get_Title(This,prop)	\
    ( (This)->lpVtbl -> get_Title(This,prop) ) 

#define StyleSheet_put_Title(This,prop)	\
    ( (This)->lpVtbl -> put_Title(This,prop) ) 

#define StyleSheet_Move(This,Precedence)	\
    ( (This)->lpVtbl -> Move(This,Precedence) ) 

#define StyleSheet_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __StyleSheet_INTERFACE_DEFINED__ */


#ifndef __StyleSheets_INTERFACE_DEFINED__
#define __StyleSheets_INTERFACE_DEFINED__

/* interface StyleSheets */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_StyleSheets;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("07B7CC7E-E66C-11D3-9454-00105AA31A08")
    StyleSheets : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ StyleSheet **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR FileName,
            /* [in] */ WdStyleSheetLinkType LinkType,
            /* [in] */ BSTR Title,
            /* [in] */ WdStyleSheetPrecedence Precedence,
            /* [retval][out] */ StyleSheet **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct StyleSheetsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            StyleSheets * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            StyleSheets * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            StyleSheets * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            StyleSheets * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            StyleSheets * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            StyleSheets * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            StyleSheets * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            StyleSheets * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            StyleSheets * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            StyleSheets * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            StyleSheets * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            StyleSheets * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            StyleSheets * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ StyleSheet **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            StyleSheets * This,
            /* [in] */ BSTR FileName,
            /* [in] */ WdStyleSheetLinkType LinkType,
            /* [in] */ BSTR Title,
            /* [in] */ WdStyleSheetPrecedence Precedence,
            /* [retval][out] */ StyleSheet **prop);
        
        END_INTERFACE
    } StyleSheetsVtbl;

    interface StyleSheets
    {
        CONST_VTBL struct StyleSheetsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define StyleSheets_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define StyleSheets_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define StyleSheets_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define StyleSheets_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define StyleSheets_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define StyleSheets_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define StyleSheets_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define StyleSheets_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define StyleSheets_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define StyleSheets_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define StyleSheets_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define StyleSheets_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define StyleSheets_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define StyleSheets_Add(This,FileName,LinkType,Title,Precedence,prop)	\
    ( (This)->lpVtbl -> Add(This,FileName,LinkType,Title,Precedence,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __StyleSheets_INTERFACE_DEFINED__ */


#ifndef __MappedDataField_INTERFACE_DEFINED__
#define __MappedDataField_INTERFACE_DEFINED__

/* interface MappedDataField */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_MappedDataField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5D311669-EA51-11D3-87CC-00105AA31A34")
    MappedDataField : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Index( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DataFieldName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DataFieldIndex( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DataFieldIndex( 
            /* [in] */ long prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MappedDataFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MappedDataField * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MappedDataField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MappedDataField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MappedDataField * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MappedDataField * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MappedDataField * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MappedDataField * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            MappedDataField * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            MappedDataField * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MappedDataField * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Index )( 
            MappedDataField * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DataFieldName )( 
            MappedDataField * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            MappedDataField * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            MappedDataField * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DataFieldIndex )( 
            MappedDataField * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DataFieldIndex )( 
            MappedDataField * This,
            /* [in] */ long prop);
        
        END_INTERFACE
    } MappedDataFieldVtbl;

    interface MappedDataField
    {
        CONST_VTBL struct MappedDataFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MappedDataField_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MappedDataField_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MappedDataField_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MappedDataField_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MappedDataField_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MappedDataField_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MappedDataField_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MappedDataField_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define MappedDataField_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define MappedDataField_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define MappedDataField_get_Index(This,prop)	\
    ( (This)->lpVtbl -> get_Index(This,prop) ) 

#define MappedDataField_get_DataFieldName(This,prop)	\
    ( (This)->lpVtbl -> get_DataFieldName(This,prop) ) 

#define MappedDataField_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define MappedDataField_get_Value(This,prop)	\
    ( (This)->lpVtbl -> get_Value(This,prop) ) 

#define MappedDataField_get_DataFieldIndex(This,prop)	\
    ( (This)->lpVtbl -> get_DataFieldIndex(This,prop) ) 

#define MappedDataField_put_DataFieldIndex(This,prop)	\
    ( (This)->lpVtbl -> put_DataFieldIndex(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MappedDataField_INTERFACE_DEFINED__ */


#ifndef __MappedDataFields_INTERFACE_DEFINED__
#define __MappedDataFields_INTERFACE_DEFINED__

/* interface MappedDataFields */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_MappedDataFields;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("799A6814-EA41-11D3-87CC-00105AA31A34")
    MappedDataFields : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ WdMappedDataFields Index,
            /* [retval][out] */ MappedDataField **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MappedDataFieldsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            MappedDataFields * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            MappedDataFields * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            MappedDataFields * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            MappedDataFields * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            MappedDataFields * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            MappedDataFields * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            MappedDataFields * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            MappedDataFields * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            MappedDataFields * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            MappedDataFields * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            MappedDataFields * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            MappedDataFields * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            MappedDataFields * This,
            /* [in] */ WdMappedDataFields Index,
            /* [retval][out] */ MappedDataField **prop);
        
        END_INTERFACE
    } MappedDataFieldsVtbl;

    interface MappedDataFields
    {
        CONST_VTBL struct MappedDataFieldsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define MappedDataFields_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define MappedDataFields_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define MappedDataFields_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define MappedDataFields_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define MappedDataFields_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define MappedDataFields_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define MappedDataFields_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define MappedDataFields_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define MappedDataFields_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define MappedDataFields_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define MappedDataFields_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define MappedDataFields_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define MappedDataFields_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __MappedDataFields_INTERFACE_DEFINED__ */


#ifndef __CanvasShapes_INTERFACE_DEFINED__
#define __CanvasShapes_INTERFACE_DEFINED__

/* interface CanvasShapes */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_CanvasShapes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("396F9073-F9FD-11D3-8EA0-0050049A1A01")
    CanvasShapes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddCallout( 
            /* [in] */ MsoCalloutType Type,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddConnector( 
            /* [in] */ MsoConnectorType Type,
            /* [in] */ int BeginX,
            /* [in] */ int BeginY,
            /* [in] */ int EndX,
            /* [in] */ int EndY,
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddCurve( 
            /* [in] */ VARIANT *SafeArrayOfPoints,
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddLabel( 
            /* [in] */ MsoTextOrientation Orientation,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddLine( 
            /* [in] */ int BeginX,
            /* [in] */ int BeginY,
            /* [in] */ int EndX,
            /* [in] */ int EndY,
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPicture( 
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *LinkToFile,
            /* [optional][in] */ VARIANT *SaveWithDocument,
            /* [optional][in] */ VARIANT *Left,
            /* [optional][in] */ VARIANT *Top,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *Height,
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPolyline( 
            /* [in] */ VARIANT *SafeArrayOfPoints,
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddShape( 
            /* [in] */ long Type,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddTextEffect( 
            /* [in] */ MsoPresetTextEffect PresetTextEffect,
            /* [in] */ BSTR Text,
            /* [in] */ BSTR FontName,
            /* [in] */ int FontSize,
            /* [in] */ MsoTriState FontBold,
            /* [in] */ MsoTriState FontItalic,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddTextbox( 
            /* [in] */ MsoTextOrientation Orientation,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [retval][out] */ Shape **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE BuildFreeform( 
            /* [in] */ MsoEditingType EditingType,
            /* [in] */ int X1,
            /* [in] */ int Y1,
            /* [retval][out] */ FreeformBuilder **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Range( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ ShapeRange **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CanvasShapesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CanvasShapes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CanvasShapes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CanvasShapes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CanvasShapes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CanvasShapes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CanvasShapes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CanvasShapes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            CanvasShapes * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            CanvasShapes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CanvasShapes * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            CanvasShapes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            CanvasShapes * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            CanvasShapes * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddCallout )( 
            CanvasShapes * This,
            /* [in] */ MsoCalloutType Type,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddConnector )( 
            CanvasShapes * This,
            /* [in] */ MsoConnectorType Type,
            /* [in] */ int BeginX,
            /* [in] */ int BeginY,
            /* [in] */ int EndX,
            /* [in] */ int EndY,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddCurve )( 
            CanvasShapes * This,
            /* [in] */ VARIANT *SafeArrayOfPoints,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddLabel )( 
            CanvasShapes * This,
            /* [in] */ MsoTextOrientation Orientation,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddLine )( 
            CanvasShapes * This,
            /* [in] */ int BeginX,
            /* [in] */ int BeginY,
            /* [in] */ int EndX,
            /* [in] */ int EndY,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPicture )( 
            CanvasShapes * This,
            /* [in] */ BSTR FileName,
            /* [optional][in] */ VARIANT *LinkToFile,
            /* [optional][in] */ VARIANT *SaveWithDocument,
            /* [optional][in] */ VARIANT *Left,
            /* [optional][in] */ VARIANT *Top,
            /* [optional][in] */ VARIANT *Width,
            /* [optional][in] */ VARIANT *Height,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPolyline )( 
            CanvasShapes * This,
            /* [in] */ VARIANT *SafeArrayOfPoints,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddShape )( 
            CanvasShapes * This,
            /* [in] */ long Type,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddTextEffect )( 
            CanvasShapes * This,
            /* [in] */ MsoPresetTextEffect PresetTextEffect,
            /* [in] */ BSTR Text,
            /* [in] */ BSTR FontName,
            /* [in] */ int FontSize,
            /* [in] */ MsoTriState FontBold,
            /* [in] */ MsoTriState FontItalic,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddTextbox )( 
            CanvasShapes * This,
            /* [in] */ MsoTextOrientation Orientation,
            /* [in] */ int Left,
            /* [in] */ int Top,
            /* [in] */ int Width,
            /* [in] */ int Height,
            /* [retval][out] */ Shape **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BuildFreeform )( 
            CanvasShapes * This,
            /* [in] */ MsoEditingType EditingType,
            /* [in] */ int X1,
            /* [in] */ int Y1,
            /* [retval][out] */ FreeformBuilder **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Range )( 
            CanvasShapes * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ ShapeRange **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectAll )( 
            CanvasShapes * This);
        
        END_INTERFACE
    } CanvasShapesVtbl;

    interface CanvasShapes
    {
        CONST_VTBL struct CanvasShapesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CanvasShapes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define CanvasShapes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define CanvasShapes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define CanvasShapes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define CanvasShapes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define CanvasShapes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define CanvasShapes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define CanvasShapes_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define CanvasShapes_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define CanvasShapes_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define CanvasShapes_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define CanvasShapes_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define CanvasShapes_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define CanvasShapes_AddCallout(This,Type,Left,Top,Width,Height,prop)	\
    ( (This)->lpVtbl -> AddCallout(This,Type,Left,Top,Width,Height,prop) ) 

#define CanvasShapes_AddConnector(This,Type,BeginX,BeginY,EndX,EndY,prop)	\
    ( (This)->lpVtbl -> AddConnector(This,Type,BeginX,BeginY,EndX,EndY,prop) ) 

#define CanvasShapes_AddCurve(This,SafeArrayOfPoints,prop)	\
    ( (This)->lpVtbl -> AddCurve(This,SafeArrayOfPoints,prop) ) 

#define CanvasShapes_AddLabel(This,Orientation,Left,Top,Width,Height,prop)	\
    ( (This)->lpVtbl -> AddLabel(This,Orientation,Left,Top,Width,Height,prop) ) 

#define CanvasShapes_AddLine(This,BeginX,BeginY,EndX,EndY,prop)	\
    ( (This)->lpVtbl -> AddLine(This,BeginX,BeginY,EndX,EndY,prop) ) 

#define CanvasShapes_AddPicture(This,FileName,LinkToFile,SaveWithDocument,Left,Top,Width,Height,prop)	\
    ( (This)->lpVtbl -> AddPicture(This,FileName,LinkToFile,SaveWithDocument,Left,Top,Width,Height,prop) ) 

#define CanvasShapes_AddPolyline(This,SafeArrayOfPoints,prop)	\
    ( (This)->lpVtbl -> AddPolyline(This,SafeArrayOfPoints,prop) ) 

#define CanvasShapes_AddShape(This,Type,Left,Top,Width,Height,prop)	\
    ( (This)->lpVtbl -> AddShape(This,Type,Left,Top,Width,Height,prop) ) 

#define CanvasShapes_AddTextEffect(This,PresetTextEffect,Text,FontName,FontSize,FontBold,FontItalic,Left,Top,prop)	\
    ( (This)->lpVtbl -> AddTextEffect(This,PresetTextEffect,Text,FontName,FontSize,FontBold,FontItalic,Left,Top,prop) ) 

#define CanvasShapes_AddTextbox(This,Orientation,Left,Top,Width,Height,prop)	\
    ( (This)->lpVtbl -> AddTextbox(This,Orientation,Left,Top,Width,Height,prop) ) 

#define CanvasShapes_BuildFreeform(This,EditingType,X1,Y1,prop)	\
    ( (This)->lpVtbl -> BuildFreeform(This,EditingType,X1,Y1,prop) ) 

#define CanvasShapes_Range(This,Index,prop)	\
    ( (This)->lpVtbl -> Range(This,Index,prop) ) 

#define CanvasShapes_SelectAll(This)	\
    ( (This)->lpVtbl -> SelectAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __CanvasShapes_INTERFACE_DEFINED__ */


#ifndef __TableStyle_INTERFACE_DEFINED__
#define __TableStyle_INTERFACE_DEFINED__

/* interface TableStyle */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TableStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B7564E97-0519-4C68-B400-3803E7C63242")
    TableStyle : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowPageBreaks( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowPageBreaks( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BottomPadding( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BottomPadding( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeftPadding( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeftPadding( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TopPadding( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TopPadding( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RightPadding( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RightPadding( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alignment( 
            /* [retval][out] */ WdRowAlignment *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alignment( 
            /* [in] */ WdRowAlignment prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Spacing( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Spacing( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Condition( 
            /* [in] */ WdConditionCode ConditionCode,
            /* [retval][out] */ ConditionalStyle **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TableDirection( 
            /* [retval][out] */ WdTableDirection *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TableDirection( 
            /* [in] */ WdTableDirection prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowBreakAcrossPage( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowBreakAcrossPage( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeftIndent( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeftIndent( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RowStripe( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RowStripe( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ColumnStripe( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ColumnStripe( 
            /* [in] */ long prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TableStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TableStyle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TableStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TableStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TableStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TableStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TableStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TableStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TableStyle * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TableStyle * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TableStyle * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowPageBreaks )( 
            TableStyle * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowPageBreaks )( 
            TableStyle * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            TableStyle * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            TableStyle * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BottomPadding )( 
            TableStyle * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BottomPadding )( 
            TableStyle * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeftPadding )( 
            TableStyle * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeftPadding )( 
            TableStyle * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TopPadding )( 
            TableStyle * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TopPadding )( 
            TableStyle * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RightPadding )( 
            TableStyle * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RightPadding )( 
            TableStyle * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alignment )( 
            TableStyle * This,
            /* [retval][out] */ WdRowAlignment *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alignment )( 
            TableStyle * This,
            /* [in] */ WdRowAlignment prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Spacing )( 
            TableStyle * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Spacing )( 
            TableStyle * This,
            /* [in] */ int prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Condition )( 
            TableStyle * This,
            /* [in] */ WdConditionCode ConditionCode,
            /* [retval][out] */ ConditionalStyle **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TableDirection )( 
            TableStyle * This,
            /* [retval][out] */ WdTableDirection *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TableDirection )( 
            TableStyle * This,
            /* [in] */ WdTableDirection prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowBreakAcrossPage )( 
            TableStyle * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowBreakAcrossPage )( 
            TableStyle * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeftIndent )( 
            TableStyle * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeftIndent )( 
            TableStyle * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            TableStyle * This,
            /* [retval][out] */ Shading **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RowStripe )( 
            TableStyle * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RowStripe )( 
            TableStyle * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ColumnStripe )( 
            TableStyle * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ColumnStripe )( 
            TableStyle * This,
            /* [in] */ long prop);
        
        END_INTERFACE
    } TableStyleVtbl;

    interface TableStyle
    {
        CONST_VTBL struct TableStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TableStyle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TableStyle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TableStyle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TableStyle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TableStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TableStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TableStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TableStyle_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define TableStyle_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TableStyle_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TableStyle_get_AllowPageBreaks(This,prop)	\
    ( (This)->lpVtbl -> get_AllowPageBreaks(This,prop) ) 

#define TableStyle_put_AllowPageBreaks(This,prop)	\
    ( (This)->lpVtbl -> put_AllowPageBreaks(This,prop) ) 

#define TableStyle_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define TableStyle_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define TableStyle_get_BottomPadding(This,prop)	\
    ( (This)->lpVtbl -> get_BottomPadding(This,prop) ) 

#define TableStyle_put_BottomPadding(This,prop)	\
    ( (This)->lpVtbl -> put_BottomPadding(This,prop) ) 

#define TableStyle_get_LeftPadding(This,prop)	\
    ( (This)->lpVtbl -> get_LeftPadding(This,prop) ) 

#define TableStyle_put_LeftPadding(This,prop)	\
    ( (This)->lpVtbl -> put_LeftPadding(This,prop) ) 

#define TableStyle_get_TopPadding(This,prop)	\
    ( (This)->lpVtbl -> get_TopPadding(This,prop) ) 

#define TableStyle_put_TopPadding(This,prop)	\
    ( (This)->lpVtbl -> put_TopPadding(This,prop) ) 

#define TableStyle_get_RightPadding(This,prop)	\
    ( (This)->lpVtbl -> get_RightPadding(This,prop) ) 

#define TableStyle_put_RightPadding(This,prop)	\
    ( (This)->lpVtbl -> put_RightPadding(This,prop) ) 

#define TableStyle_get_Alignment(This,prop)	\
    ( (This)->lpVtbl -> get_Alignment(This,prop) ) 

#define TableStyle_put_Alignment(This,prop)	\
    ( (This)->lpVtbl -> put_Alignment(This,prop) ) 

#define TableStyle_get_Spacing(This,prop)	\
    ( (This)->lpVtbl -> get_Spacing(This,prop) ) 

#define TableStyle_put_Spacing(This,prop)	\
    ( (This)->lpVtbl -> put_Spacing(This,prop) ) 

#define TableStyle_Condition(This,ConditionCode,prop)	\
    ( (This)->lpVtbl -> Condition(This,ConditionCode,prop) ) 

#define TableStyle_get_TableDirection(This,prop)	\
    ( (This)->lpVtbl -> get_TableDirection(This,prop) ) 

#define TableStyle_put_TableDirection(This,prop)	\
    ( (This)->lpVtbl -> put_TableDirection(This,prop) ) 

#define TableStyle_get_AllowBreakAcrossPage(This,prop)	\
    ( (This)->lpVtbl -> get_AllowBreakAcrossPage(This,prop) ) 

#define TableStyle_put_AllowBreakAcrossPage(This,prop)	\
    ( (This)->lpVtbl -> put_AllowBreakAcrossPage(This,prop) ) 

#define TableStyle_get_LeftIndent(This,prop)	\
    ( (This)->lpVtbl -> get_LeftIndent(This,prop) ) 

#define TableStyle_put_LeftIndent(This,prop)	\
    ( (This)->lpVtbl -> put_LeftIndent(This,prop) ) 

#define TableStyle_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define TableStyle_get_RowStripe(This,prop)	\
    ( (This)->lpVtbl -> get_RowStripe(This,prop) ) 

#define TableStyle_put_RowStripe(This,prop)	\
    ( (This)->lpVtbl -> put_RowStripe(This,prop) ) 

#define TableStyle_get_ColumnStripe(This,prop)	\
    ( (This)->lpVtbl -> get_ColumnStripe(This,prop) ) 

#define TableStyle_put_ColumnStripe(This,prop)	\
    ( (This)->lpVtbl -> put_ColumnStripe(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TableStyle_INTERFACE_DEFINED__ */


#ifndef __ConditionalStyle_INTERFACE_DEFINED__
#define __ConditionalStyle_INTERFACE_DEFINED__

/* interface ConditionalStyle */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_ConditionalStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1498F56D-ED33-41F9-B37B-EF30E50B08AC")
    ConditionalStyle : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Shading( 
            /* [retval][out] */ Shading **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Borders( 
            /* [retval][out] */ Borders **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Borders( 
            /* [in] */ Borders *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BottomPadding( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_BottomPadding( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TopPadding( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TopPadding( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LeftPadding( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_LeftPadding( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RightPadding( 
            /* [retval][out] */ int *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RightPadding( 
            /* [in] */ int prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ParagraphFormat( 
            /* [retval][out] */ ParagraphFormat	**prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ParagraphFormat( 
            /* [in] */ ParagraphFormat	*prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Font( 
            /* [retval][out] */ Font	**prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Font( 
            /* [in] */ Font	*prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ConditionalStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ConditionalStyle * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ConditionalStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ConditionalStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ConditionalStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ConditionalStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ConditionalStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ConditionalStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            ConditionalStyle * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            ConditionalStyle * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ConditionalStyle * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Shading )( 
            ConditionalStyle * This,
            /* [retval][out] */ Shading **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Borders )( 
            ConditionalStyle * This,
            /* [retval][out] */ Borders **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Borders )( 
            ConditionalStyle * This,
            /* [in] */ Borders *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BottomPadding )( 
            ConditionalStyle * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_BottomPadding )( 
            ConditionalStyle * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TopPadding )( 
            ConditionalStyle * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TopPadding )( 
            ConditionalStyle * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LeftPadding )( 
            ConditionalStyle * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_LeftPadding )( 
            ConditionalStyle * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RightPadding )( 
            ConditionalStyle * This,
            /* [retval][out] */ int *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RightPadding )( 
            ConditionalStyle * This,
            /* [in] */ int prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ParagraphFormat )( 
            ConditionalStyle * This,
            /* [retval][out] */ ParagraphFormat	**prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ParagraphFormat )( 
            ConditionalStyle * This,
            /* [in] */ ParagraphFormat	*prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Font )( 
            ConditionalStyle * This,
            /* [retval][out] */ Font	**prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Font )( 
            ConditionalStyle * This,
            /* [in] */ Font	*prop);
        
        END_INTERFACE
    } ConditionalStyleVtbl;

    interface ConditionalStyle
    {
        CONST_VTBL struct ConditionalStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ConditionalStyle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ConditionalStyle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ConditionalStyle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ConditionalStyle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ConditionalStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ConditionalStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ConditionalStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ConditionalStyle_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define ConditionalStyle_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define ConditionalStyle_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define ConditionalStyle_get_Shading(This,prop)	\
    ( (This)->lpVtbl -> get_Shading(This,prop) ) 

#define ConditionalStyle_get_Borders(This,prop)	\
    ( (This)->lpVtbl -> get_Borders(This,prop) ) 

#define ConditionalStyle_put_Borders(This,prop)	\
    ( (This)->lpVtbl -> put_Borders(This,prop) ) 

#define ConditionalStyle_get_BottomPadding(This,prop)	\
    ( (This)->lpVtbl -> get_BottomPadding(This,prop) ) 

#define ConditionalStyle_put_BottomPadding(This,prop)	\
    ( (This)->lpVtbl -> put_BottomPadding(This,prop) ) 

#define ConditionalStyle_get_TopPadding(This,prop)	\
    ( (This)->lpVtbl -> get_TopPadding(This,prop) ) 

#define ConditionalStyle_put_TopPadding(This,prop)	\
    ( (This)->lpVtbl -> put_TopPadding(This,prop) ) 

#define ConditionalStyle_get_LeftPadding(This,prop)	\
    ( (This)->lpVtbl -> get_LeftPadding(This,prop) ) 

#define ConditionalStyle_put_LeftPadding(This,prop)	\
    ( (This)->lpVtbl -> put_LeftPadding(This,prop) ) 

#define ConditionalStyle_get_RightPadding(This,prop)	\
    ( (This)->lpVtbl -> get_RightPadding(This,prop) ) 

#define ConditionalStyle_put_RightPadding(This,prop)	\
    ( (This)->lpVtbl -> put_RightPadding(This,prop) ) 

#define ConditionalStyle_get_ParagraphFormat(This,prop)	\
    ( (This)->lpVtbl -> get_ParagraphFormat(This,prop) ) 

#define ConditionalStyle_put_ParagraphFormat(This,prop)	\
    ( (This)->lpVtbl -> put_ParagraphFormat(This,prop) ) 

#define ConditionalStyle_get_Font(This,prop)	\
    ( (This)->lpVtbl -> get_Font(This,prop) ) 

#define ConditionalStyle_put_Font(This,prop)	\
    ( (This)->lpVtbl -> put_Font(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ConditionalStyle_INTERFACE_DEFINED__ */


#ifndef __FootnoteOptions_INTERFACE_DEFINED__
#define __FootnoteOptions_INTERFACE_DEFINED__

/* interface FootnoteOptions */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_FootnoteOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BEA85A24-D7DA-4F3D-B58C-ED90FB01D615")
    FootnoteOptions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Location( 
            /* [retval][out] */ WdFootnoteLocation *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Location( 
            /* [in] */ WdFootnoteLocation prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberStyle( 
            /* [retval][out] */ WdNoteNumberStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberStyle( 
            /* [in] */ WdNoteNumberStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartingNumber( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartingNumber( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberingRule( 
            /* [retval][out] */ WdNumberingRule *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberingRule( 
            /* [in] */ WdNumberingRule prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FootnoteOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            FootnoteOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            FootnoteOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            FootnoteOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            FootnoteOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            FootnoteOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            FootnoteOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            FootnoteOptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            FootnoteOptions * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            FootnoteOptions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            FootnoteOptions * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            FootnoteOptions * This,
            /* [retval][out] */ WdFootnoteLocation *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Location )( 
            FootnoteOptions * This,
            /* [in] */ WdFootnoteLocation prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberStyle )( 
            FootnoteOptions * This,
            /* [retval][out] */ WdNoteNumberStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberStyle )( 
            FootnoteOptions * This,
            /* [in] */ WdNoteNumberStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartingNumber )( 
            FootnoteOptions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartingNumber )( 
            FootnoteOptions * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberingRule )( 
            FootnoteOptions * This,
            /* [retval][out] */ WdNumberingRule *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberingRule )( 
            FootnoteOptions * This,
            /* [in] */ WdNumberingRule prop);
        
        END_INTERFACE
    } FootnoteOptionsVtbl;

    interface FootnoteOptions
    {
        CONST_VTBL struct FootnoteOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define FootnoteOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define FootnoteOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define FootnoteOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define FootnoteOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define FootnoteOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define FootnoteOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define FootnoteOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define FootnoteOptions_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define FootnoteOptions_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define FootnoteOptions_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define FootnoteOptions_get_Location(This,prop)	\
    ( (This)->lpVtbl -> get_Location(This,prop) ) 

#define FootnoteOptions_put_Location(This,prop)	\
    ( (This)->lpVtbl -> put_Location(This,prop) ) 

#define FootnoteOptions_get_NumberStyle(This,prop)	\
    ( (This)->lpVtbl -> get_NumberStyle(This,prop) ) 

#define FootnoteOptions_put_NumberStyle(This,prop)	\
    ( (This)->lpVtbl -> put_NumberStyle(This,prop) ) 

#define FootnoteOptions_get_StartingNumber(This,prop)	\
    ( (This)->lpVtbl -> get_StartingNumber(This,prop) ) 

#define FootnoteOptions_put_StartingNumber(This,prop)	\
    ( (This)->lpVtbl -> put_StartingNumber(This,prop) ) 

#define FootnoteOptions_get_NumberingRule(This,prop)	\
    ( (This)->lpVtbl -> get_NumberingRule(This,prop) ) 

#define FootnoteOptions_put_NumberingRule(This,prop)	\
    ( (This)->lpVtbl -> put_NumberingRule(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __FootnoteOptions_INTERFACE_DEFINED__ */


#ifndef __EndnoteOptions_INTERFACE_DEFINED__
#define __EndnoteOptions_INTERFACE_DEFINED__

/* interface EndnoteOptions */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_EndnoteOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BF043168-F4DE-4E7C-B206-741A8B3EF71A")
    EndnoteOptions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Location( 
            /* [retval][out] */ WdEndnoteLocation *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Location( 
            /* [in] */ WdEndnoteLocation prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberStyle( 
            /* [retval][out] */ WdNoteNumberStyle *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberStyle( 
            /* [in] */ WdNoteNumberStyle prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartingNumber( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartingNumber( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumberingRule( 
            /* [retval][out] */ WdNumberingRule *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NumberingRule( 
            /* [in] */ WdNumberingRule prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EndnoteOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            EndnoteOptions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            EndnoteOptions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            EndnoteOptions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            EndnoteOptions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            EndnoteOptions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            EndnoteOptions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            EndnoteOptions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            EndnoteOptions * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            EndnoteOptions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            EndnoteOptions * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            EndnoteOptions * This,
            /* [retval][out] */ WdEndnoteLocation *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Location )( 
            EndnoteOptions * This,
            /* [in] */ WdEndnoteLocation prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberStyle )( 
            EndnoteOptions * This,
            /* [retval][out] */ WdNoteNumberStyle *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberStyle )( 
            EndnoteOptions * This,
            /* [in] */ WdNoteNumberStyle prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartingNumber )( 
            EndnoteOptions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartingNumber )( 
            EndnoteOptions * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumberingRule )( 
            EndnoteOptions * This,
            /* [retval][out] */ WdNumberingRule *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NumberingRule )( 
            EndnoteOptions * This,
            /* [in] */ WdNumberingRule prop);
        
        END_INTERFACE
    } EndnoteOptionsVtbl;

    interface EndnoteOptions
    {
        CONST_VTBL struct EndnoteOptionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define EndnoteOptions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define EndnoteOptions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define EndnoteOptions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define EndnoteOptions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define EndnoteOptions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define EndnoteOptions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define EndnoteOptions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define EndnoteOptions_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define EndnoteOptions_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define EndnoteOptions_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define EndnoteOptions_get_Location(This,prop)	\
    ( (This)->lpVtbl -> get_Location(This,prop) ) 

#define EndnoteOptions_put_Location(This,prop)	\
    ( (This)->lpVtbl -> put_Location(This,prop) ) 

#define EndnoteOptions_get_NumberStyle(This,prop)	\
    ( (This)->lpVtbl -> get_NumberStyle(This,prop) ) 

#define EndnoteOptions_put_NumberStyle(This,prop)	\
    ( (This)->lpVtbl -> put_NumberStyle(This,prop) ) 

#define EndnoteOptions_get_StartingNumber(This,prop)	\
    ( (This)->lpVtbl -> get_StartingNumber(This,prop) ) 

#define EndnoteOptions_put_StartingNumber(This,prop)	\
    ( (This)->lpVtbl -> put_StartingNumber(This,prop) ) 

#define EndnoteOptions_get_NumberingRule(This,prop)	\
    ( (This)->lpVtbl -> get_NumberingRule(This,prop) ) 

#define EndnoteOptions_put_NumberingRule(This,prop)	\
    ( (This)->lpVtbl -> put_NumberingRule(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __EndnoteOptions_INTERFACE_DEFINED__ */


#ifndef __Reviewers_INTERFACE_DEFINED__
#define __Reviewers_INTERFACE_DEFINED__

/* interface Reviewers */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Reviewers;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("12DCDC9A-5418-48A3-BBE6-EB57BAE275E8")
    Reviewers : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Reviewer **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ReviewersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Reviewers * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Reviewers * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Reviewers * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Reviewers * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Reviewers * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Reviewers * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Reviewers * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Reviewers * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Reviewers * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Reviewers * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Reviewers * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Reviewers * This,
            /* [retval][out] */ long *prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Reviewers * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Reviewer **prop);
        
        END_INTERFACE
    } ReviewersVtbl;

    interface Reviewers
    {
        CONST_VTBL struct ReviewersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Reviewers_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Reviewers_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Reviewers_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Reviewers_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Reviewers_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Reviewers_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Reviewers_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Reviewers_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Reviewers_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define Reviewers_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Reviewers_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Reviewers_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Reviewers_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Reviewers_INTERFACE_DEFINED__ */


#ifndef __Reviewer_INTERFACE_DEFINED__
#define __Reviewer_INTERFACE_DEFINED__

/* interface Reviewer */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Reviewer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("47CEF4AE-DC32-4220-8AA5-19CCC0E6633A")
    Reviewer : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ReviewerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Reviewer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Reviewer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Reviewer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Reviewer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Reviewer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Reviewer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Reviewer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Reviewer * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Reviewer * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Reviewer * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            Reviewer * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            Reviewer * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } ReviewerVtbl;

    interface Reviewer
    {
        CONST_VTBL struct ReviewerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Reviewer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Reviewer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Reviewer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Reviewer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Reviewer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Reviewer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Reviewer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Reviewer_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define Reviewer_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Reviewer_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Reviewer_get_Visible(This,prop)	\
    ( (This)->lpVtbl -> get_Visible(This,prop) ) 

#define Reviewer_put_Visible(This,prop)	\
    ( (This)->lpVtbl -> put_Visible(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Reviewer_INTERFACE_DEFINED__ */


#ifndef __TaskPane_INTERFACE_DEFINED__
#define __TaskPane_INTERFACE_DEFINED__

/* interface TaskPane */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TaskPane;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B9F1A4E2-0D0A-43B7-8495-139E7ACBD840")
    TaskPane : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TaskPaneVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TaskPane * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TaskPane * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TaskPane * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TaskPane * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TaskPane * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TaskPane * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TaskPane * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TaskPane * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TaskPane * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TaskPane * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            TaskPane * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            TaskPane * This,
            /* [in] */ VARIANT_BOOL prop);
        
        END_INTERFACE
    } TaskPaneVtbl;

    interface TaskPane
    {
        CONST_VTBL struct TaskPaneVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TaskPane_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TaskPane_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TaskPane_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TaskPane_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TaskPane_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TaskPane_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TaskPane_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TaskPane_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define TaskPane_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TaskPane_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TaskPane_get_Visible(This,prop)	\
    ( (This)->lpVtbl -> get_Visible(This,prop) ) 

#define TaskPane_put_Visible(This,prop)	\
    ( (This)->lpVtbl -> put_Visible(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TaskPane_INTERFACE_DEFINED__ */


#ifndef __TaskPanes_INTERFACE_DEFINED__
#define __TaskPanes_INTERFACE_DEFINED__

/* interface TaskPanes */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_TaskPanes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E6AAEC05-E543-4085-BA92-9BF7D2474F5C")
    TaskPanes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ WdTaskPanes Index,
            /* [retval][out] */ TaskPane **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TaskPanesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TaskPanes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TaskPanes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TaskPanes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TaskPanes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TaskPanes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TaskPanes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TaskPanes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            TaskPanes * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TaskPanes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TaskPanes * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            TaskPanes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TaskPanes * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TaskPanes * This,
            /* [in] */ WdTaskPanes Index,
            /* [retval][out] */ TaskPane **prop);
        
        END_INTERFACE
    } TaskPanesVtbl;

    interface TaskPanes
    {
        CONST_VTBL struct TaskPanesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TaskPanes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define TaskPanes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define TaskPanes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define TaskPanes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define TaskPanes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define TaskPanes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define TaskPanes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define TaskPanes_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define TaskPanes_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define TaskPanes_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define TaskPanes_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define TaskPanes_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define TaskPanes_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __TaskPanes_INTERFACE_DEFINED__ */


#ifndef __IApplicationEvents3_INTERFACE_DEFINED__
#define __IApplicationEvents3_INTERFACE_DEFINED__

/* interface IApplicationEvents3 */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_IApplicationEvents3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020A00-0001-0000-C000-000000000046")
    IApplicationEvents3 : public IDispatch
    {
    public:
        virtual /* [hidden][restricted][id] */ HRESULT STDMETHODCALLTYPE Startup( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Quit( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentChange( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentOpen( 
            /* [in] */ Document	*Doc) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentBeforeClose( 
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentBeforePrint( 
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentBeforeSave( 
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *SaveAsUI,
            /* [in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewDocument( 
            /* [in] */ Document	*Doc) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowActivate( 
            /* [in] */ Document	*Doc,
            /* [in] */ Window *Wn) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowDeactivate( 
            /* [in] */ Document	*Doc,
            /* [in] */ Window *Wn) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowSelectionChange( 
            /* [in] */ Selection *Sel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowBeforeRightClick( 
            /* [in] */ Selection *Sel,
            /* [in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowBeforeDoubleClick( 
            /* [in] */ Selection *Sel,
            /* [in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EPostagePropertyDialog( 
            /* [in] */ Document	*Doc) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EPostageInsert( 
            /* [in] */ Document	*Doc) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MailMergeAfterMerge( 
            /* [in] */ Document	*Doc,
            /* [in] */ Document	*DocResult) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MailMergeAfterRecordMerge( 
            /* [in] */ Document	*Doc) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MailMergeBeforeMerge( 
            /* [in] */ Document	*Doc,
            /* [in] */ long StartRecord,
            /* [in] */ long EndRecord,
            /* [in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MailMergeBeforeRecordMerge( 
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MailMergeDataSourceLoad( 
            /* [in] */ Document	*Doc) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MailMergeDataSourceValidate( 
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *Handled) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MailMergeWizardSendToCustom( 
            /* [in] */ Document	*Doc) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MailMergeWizardStateChange( 
            /* [in] */ Document	*Doc,
            /* [in] */ int *FromState,
            /* [in] */ int *ToState,
            /* [in] */ VARIANT_BOOL *Handled) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowSize( 
            /* [in] */ Document	*Doc,
            /* [in] */ Window *Wn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IApplicationEvents3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IApplicationEvents3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IApplicationEvents3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IApplicationEvents3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IApplicationEvents3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IApplicationEvents3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IApplicationEvents3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IApplicationEvents3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *Startup )( 
            IApplicationEvents3 * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Quit )( 
            IApplicationEvents3 * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentChange )( 
            IApplicationEvents3 * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentOpen )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentBeforeClose )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentBeforePrint )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentBeforeSave )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *SaveAsUI,
            /* [in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewDocument )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowActivate )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ Window *Wn);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowDeactivate )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ Window *Wn);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowSelectionChange )( 
            IApplicationEvents3 * This,
            /* [in] */ Selection *Sel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowBeforeRightClick )( 
            IApplicationEvents3 * This,
            /* [in] */ Selection *Sel,
            /* [in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowBeforeDoubleClick )( 
            IApplicationEvents3 * This,
            /* [in] */ Selection *Sel,
            /* [in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EPostagePropertyDialog )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EPostageInsert )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MailMergeAfterMerge )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ Document	*DocResult);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MailMergeAfterRecordMerge )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MailMergeBeforeMerge )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ long StartRecord,
            /* [in] */ long EndRecord,
            /* [in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MailMergeBeforeRecordMerge )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MailMergeDataSourceLoad )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MailMergeDataSourceValidate )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *Handled);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MailMergeWizardSendToCustom )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MailMergeWizardStateChange )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ int *FromState,
            /* [in] */ int *ToState,
            /* [in] */ VARIANT_BOOL *Handled);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowSize )( 
            IApplicationEvents3 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ Window *Wn);
        
        END_INTERFACE
    } IApplicationEvents3Vtbl;

    interface IApplicationEvents3
    {
        CONST_VTBL struct IApplicationEvents3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IApplicationEvents3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IApplicationEvents3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IApplicationEvents3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IApplicationEvents3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IApplicationEvents3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IApplicationEvents3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IApplicationEvents3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IApplicationEvents3_Startup(This)	\
    ( (This)->lpVtbl -> Startup(This) ) 

#define IApplicationEvents3_Quit(This)	\
    ( (This)->lpVtbl -> Quit(This) ) 

#define IApplicationEvents3_DocumentChange(This)	\
    ( (This)->lpVtbl -> DocumentChange(This) ) 

#define IApplicationEvents3_DocumentOpen(This,Doc)	\
    ( (This)->lpVtbl -> DocumentOpen(This,Doc) ) 

#define IApplicationEvents3_DocumentBeforeClose(This,Doc,Cancel)	\
    ( (This)->lpVtbl -> DocumentBeforeClose(This,Doc,Cancel) ) 

#define IApplicationEvents3_DocumentBeforePrint(This,Doc,Cancel)	\
    ( (This)->lpVtbl -> DocumentBeforePrint(This,Doc,Cancel) ) 

#define IApplicationEvents3_DocumentBeforeSave(This,Doc,SaveAsUI,Cancel)	\
    ( (This)->lpVtbl -> DocumentBeforeSave(This,Doc,SaveAsUI,Cancel) ) 

#define IApplicationEvents3_NewDocument(This,Doc)	\
    ( (This)->lpVtbl -> NewDocument(This,Doc) ) 

#define IApplicationEvents3_WindowActivate(This,Doc,Wn)	\
    ( (This)->lpVtbl -> WindowActivate(This,Doc,Wn) ) 

#define IApplicationEvents3_WindowDeactivate(This,Doc,Wn)	\
    ( (This)->lpVtbl -> WindowDeactivate(This,Doc,Wn) ) 

#define IApplicationEvents3_WindowSelectionChange(This,Sel)	\
    ( (This)->lpVtbl -> WindowSelectionChange(This,Sel) ) 

#define IApplicationEvents3_WindowBeforeRightClick(This,Sel,Cancel)	\
    ( (This)->lpVtbl -> WindowBeforeRightClick(This,Sel,Cancel) ) 

#define IApplicationEvents3_WindowBeforeDoubleClick(This,Sel,Cancel)	\
    ( (This)->lpVtbl -> WindowBeforeDoubleClick(This,Sel,Cancel) ) 

#define IApplicationEvents3_EPostagePropertyDialog(This,Doc)	\
    ( (This)->lpVtbl -> EPostagePropertyDialog(This,Doc) ) 

#define IApplicationEvents3_EPostageInsert(This,Doc)	\
    ( (This)->lpVtbl -> EPostageInsert(This,Doc) ) 

#define IApplicationEvents3_MailMergeAfterMerge(This,Doc,DocResult)	\
    ( (This)->lpVtbl -> MailMergeAfterMerge(This,Doc,DocResult) ) 

#define IApplicationEvents3_MailMergeAfterRecordMerge(This,Doc)	\
    ( (This)->lpVtbl -> MailMergeAfterRecordMerge(This,Doc) ) 

#define IApplicationEvents3_MailMergeBeforeMerge(This,Doc,StartRecord,EndRecord,Cancel)	\
    ( (This)->lpVtbl -> MailMergeBeforeMerge(This,Doc,StartRecord,EndRecord,Cancel) ) 

#define IApplicationEvents3_MailMergeBeforeRecordMerge(This,Doc,Cancel)	\
    ( (This)->lpVtbl -> MailMergeBeforeRecordMerge(This,Doc,Cancel) ) 

#define IApplicationEvents3_MailMergeDataSourceLoad(This,Doc)	\
    ( (This)->lpVtbl -> MailMergeDataSourceLoad(This,Doc) ) 

#define IApplicationEvents3_MailMergeDataSourceValidate(This,Doc,Handled)	\
    ( (This)->lpVtbl -> MailMergeDataSourceValidate(This,Doc,Handled) ) 

#define IApplicationEvents3_MailMergeWizardSendToCustom(This,Doc)	\
    ( (This)->lpVtbl -> MailMergeWizardSendToCustom(This,Doc) ) 

#define IApplicationEvents3_MailMergeWizardStateChange(This,Doc,FromState,ToState,Handled)	\
    ( (This)->lpVtbl -> MailMergeWizardStateChange(This,Doc,FromState,ToState,Handled) ) 

#define IApplicationEvents3_WindowSize(This,Doc,Wn)	\
    ( (This)->lpVtbl -> WindowSize(This,Doc,Wn) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IApplicationEvents3_INTERFACE_DEFINED__ */


#ifndef __ApplicationEvents3_DISPINTERFACE_DEFINED__
#define __ApplicationEvents3_DISPINTERFACE_DEFINED__

/* dispinterface ApplicationEvents3 */
/* [hidden][helpcontext][uuid] */ 


EXTERN_C const IID DIID_ApplicationEvents3;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("00020A00-0000-0000-C000-000000000046")
    ApplicationEvents3 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ApplicationEvents3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ApplicationEvents3 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ApplicationEvents3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ApplicationEvents3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ApplicationEvents3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ApplicationEvents3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ApplicationEvents3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ApplicationEvents3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } ApplicationEvents3Vtbl;

    interface ApplicationEvents3
    {
        CONST_VTBL struct ApplicationEvents3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ApplicationEvents3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ApplicationEvents3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ApplicationEvents3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ApplicationEvents3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ApplicationEvents3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ApplicationEvents3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ApplicationEvents3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ApplicationEvents3_DISPINTERFACE_DEFINED__ */


#ifndef __SmartTagAction_INTERFACE_DEFINED__
#define __SmartTagAction_INTERFACE_DEFINED__

/* interface SmartTagAction */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_SmartTagAction;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DFB6AA6C-1068-420F-969D-01280FCC1630")
    SmartTagAction : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Execute( void) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ WdSmartTagControlType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PresentInPane( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExpandHelp( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExpandHelp( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CheckboxState( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CheckboxState( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextboxText( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_TextboxText( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListSelection( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ListSelection( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RadioGroupSelection( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_RadioGroupSelection( 
            /* [in] */ long prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExpandDocumentFragment( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ExpandDocumentFragment( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveXControl( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SmartTagActionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SmartTagAction * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SmartTagAction * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SmartTagAction * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SmartTagAction * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SmartTagAction * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SmartTagAction * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SmartTagAction * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            SmartTagAction * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SmartTagAction * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            SmartTagAction * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SmartTagAction * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Execute )( 
            SmartTagAction * This);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            SmartTagAction * This,
            /* [retval][out] */ WdSmartTagControlType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PresentInPane )( 
            SmartTagAction * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExpandHelp )( 
            SmartTagAction * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExpandHelp )( 
            SmartTagAction * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CheckboxState )( 
            SmartTagAction * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CheckboxState )( 
            SmartTagAction * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextboxText )( 
            SmartTagAction * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_TextboxText )( 
            SmartTagAction * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListSelection )( 
            SmartTagAction * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ListSelection )( 
            SmartTagAction * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RadioGroupSelection )( 
            SmartTagAction * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_RadioGroupSelection )( 
            SmartTagAction * This,
            /* [in] */ long prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExpandDocumentFragment )( 
            SmartTagAction * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ExpandDocumentFragment )( 
            SmartTagAction * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveXControl )( 
            SmartTagAction * This,
            /* [retval][out] */ IDispatch **prop);
        
        END_INTERFACE
    } SmartTagActionVtbl;

    interface SmartTagAction
    {
        CONST_VTBL struct SmartTagActionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SmartTagAction_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SmartTagAction_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SmartTagAction_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SmartTagAction_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SmartTagAction_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SmartTagAction_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SmartTagAction_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SmartTagAction_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define SmartTagAction_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define SmartTagAction_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define SmartTagAction_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define SmartTagAction_Execute(This)	\
    ( (This)->lpVtbl -> Execute(This) ) 

#define SmartTagAction_get_Type(This,prop)	\
    ( (This)->lpVtbl -> get_Type(This,prop) ) 

#define SmartTagAction_get_PresentInPane(This,prop)	\
    ( (This)->lpVtbl -> get_PresentInPane(This,prop) ) 

#define SmartTagAction_get_ExpandHelp(This,prop)	\
    ( (This)->lpVtbl -> get_ExpandHelp(This,prop) ) 

#define SmartTagAction_put_ExpandHelp(This,prop)	\
    ( (This)->lpVtbl -> put_ExpandHelp(This,prop) ) 

#define SmartTagAction_get_CheckboxState(This,prop)	\
    ( (This)->lpVtbl -> get_CheckboxState(This,prop) ) 

#define SmartTagAction_put_CheckboxState(This,prop)	\
    ( (This)->lpVtbl -> put_CheckboxState(This,prop) ) 

#define SmartTagAction_get_TextboxText(This,prop)	\
    ( (This)->lpVtbl -> get_TextboxText(This,prop) ) 

#define SmartTagAction_put_TextboxText(This,prop)	\
    ( (This)->lpVtbl -> put_TextboxText(This,prop) ) 

#define SmartTagAction_get_ListSelection(This,prop)	\
    ( (This)->lpVtbl -> get_ListSelection(This,prop) ) 

#define SmartTagAction_put_ListSelection(This,prop)	\
    ( (This)->lpVtbl -> put_ListSelection(This,prop) ) 

#define SmartTagAction_get_RadioGroupSelection(This,prop)	\
    ( (This)->lpVtbl -> get_RadioGroupSelection(This,prop) ) 

#define SmartTagAction_put_RadioGroupSelection(This,prop)	\
    ( (This)->lpVtbl -> put_RadioGroupSelection(This,prop) ) 

#define SmartTagAction_get_ExpandDocumentFragment(This,prop)	\
    ( (This)->lpVtbl -> get_ExpandDocumentFragment(This,prop) ) 

#define SmartTagAction_put_ExpandDocumentFragment(This,prop)	\
    ( (This)->lpVtbl -> put_ExpandDocumentFragment(This,prop) ) 

#define SmartTagAction_get_ActiveXControl(This,prop)	\
    ( (This)->lpVtbl -> get_ActiveXControl(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SmartTagAction_INTERFACE_DEFINED__ */


#ifndef __SmartTagActions_INTERFACE_DEFINED__
#define __SmartTagActions_INTERFACE_DEFINED__

/* interface SmartTagActions */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_SmartTagActions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CDE12CD8-767B-4757-8A31-13029A086305")
    SmartTagActions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ SmartTagAction **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReloadActions( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SmartTagActionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SmartTagActions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SmartTagActions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SmartTagActions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SmartTagActions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SmartTagActions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SmartTagActions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SmartTagActions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            SmartTagActions * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SmartTagActions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SmartTagActions * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            SmartTagActions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SmartTagActions * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            SmartTagActions * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ SmartTagAction **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReloadActions )( 
            SmartTagActions * This);
        
        END_INTERFACE
    } SmartTagActionsVtbl;

    interface SmartTagActions
    {
        CONST_VTBL struct SmartTagActionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SmartTagActions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SmartTagActions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SmartTagActions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SmartTagActions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SmartTagActions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SmartTagActions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SmartTagActions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SmartTagActions_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define SmartTagActions_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define SmartTagActions_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define SmartTagActions_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define SmartTagActions_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define SmartTagActions_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define SmartTagActions_ReloadActions(This)	\
    ( (This)->lpVtbl -> ReloadActions(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SmartTagActions_INTERFACE_DEFINED__ */


#ifndef __SmartTagRecognizer_INTERFACE_DEFINED__
#define __SmartTagRecognizer_INTERFACE_DEFINED__

/* interface SmartTagRecognizer */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_SmartTagRecognizer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("15EBE471-0182-4CCE-98D0-B6614D1C32A1")
    SmartTagRecognizer : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Enabled( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Enabled( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProgID( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Caption( 
            /* [retval][out] */ BSTR *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SmartTagRecognizerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SmartTagRecognizer * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SmartTagRecognizer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SmartTagRecognizer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SmartTagRecognizer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SmartTagRecognizer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SmartTagRecognizer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SmartTagRecognizer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            SmartTagRecognizer * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SmartTagRecognizer * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            SmartTagRecognizer * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SmartTagRecognizer * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Enabled )( 
            SmartTagRecognizer * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Enabled )( 
            SmartTagRecognizer * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProgID )( 
            SmartTagRecognizer * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Caption )( 
            SmartTagRecognizer * This,
            /* [retval][out] */ BSTR *prop);
        
        END_INTERFACE
    } SmartTagRecognizerVtbl;

    interface SmartTagRecognizer
    {
        CONST_VTBL struct SmartTagRecognizerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SmartTagRecognizer_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SmartTagRecognizer_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SmartTagRecognizer_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SmartTagRecognizer_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SmartTagRecognizer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SmartTagRecognizer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SmartTagRecognizer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SmartTagRecognizer_get_FullName(This,prop)	\
    ( (This)->lpVtbl -> get_FullName(This,prop) ) 

#define SmartTagRecognizer_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define SmartTagRecognizer_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define SmartTagRecognizer_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define SmartTagRecognizer_get_Enabled(This,prop)	\
    ( (This)->lpVtbl -> get_Enabled(This,prop) ) 

#define SmartTagRecognizer_put_Enabled(This,prop)	\
    ( (This)->lpVtbl -> put_Enabled(This,prop) ) 

#define SmartTagRecognizer_get_ProgID(This,prop)	\
    ( (This)->lpVtbl -> get_ProgID(This,prop) ) 

#define SmartTagRecognizer_get_Caption(This,prop)	\
    ( (This)->lpVtbl -> get_Caption(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SmartTagRecognizer_INTERFACE_DEFINED__ */


#ifndef __SmartTagRecognizers_INTERFACE_DEFINED__
#define __SmartTagRecognizers_INTERFACE_DEFINED__

/* interface SmartTagRecognizers */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_SmartTagRecognizers;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F2B60A10-DED5-46FB-A914-3C6F4EBB6451")
    SmartTagRecognizers : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ SmartTagRecognizer **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReloadRecognizers( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SmartTagRecognizersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SmartTagRecognizers * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SmartTagRecognizers * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SmartTagRecognizers * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SmartTagRecognizers * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SmartTagRecognizers * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SmartTagRecognizers * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SmartTagRecognizers * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            SmartTagRecognizers * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SmartTagRecognizers * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SmartTagRecognizers * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            SmartTagRecognizers * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SmartTagRecognizers * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            SmartTagRecognizers * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ SmartTagRecognizer **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReloadRecognizers )( 
            SmartTagRecognizers * This);
        
        END_INTERFACE
    } SmartTagRecognizersVtbl;

    interface SmartTagRecognizers
    {
        CONST_VTBL struct SmartTagRecognizersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SmartTagRecognizers_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SmartTagRecognizers_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SmartTagRecognizers_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SmartTagRecognizers_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SmartTagRecognizers_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SmartTagRecognizers_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SmartTagRecognizers_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SmartTagRecognizers_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define SmartTagRecognizers_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define SmartTagRecognizers_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define SmartTagRecognizers_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define SmartTagRecognizers_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define SmartTagRecognizers_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define SmartTagRecognizers_ReloadRecognizers(This)	\
    ( (This)->lpVtbl -> ReloadRecognizers(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SmartTagRecognizers_INTERFACE_DEFINED__ */


#ifndef __SmartTagType_INTERFACE_DEFINED__
#define __SmartTagType_INTERFACE_DEFINED__

/* interface SmartTagType */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_SmartTagType;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5E9A888C-E5DC-4DCB-8308-3C91FB61E6F4")
    SmartTagType : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartTagActions( 
            /* [retval][out] */ SmartTagActions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartTagRecognizers( 
            /* [retval][out] */ SmartTagRecognizers **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FriendlyName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SmartTagTypeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SmartTagType * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SmartTagType * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SmartTagType * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SmartTagType * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SmartTagType * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SmartTagType * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SmartTagType * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            SmartTagType * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SmartTagType * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            SmartTagType * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SmartTagType * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartTagActions )( 
            SmartTagType * This,
            /* [retval][out] */ SmartTagActions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartTagRecognizers )( 
            SmartTagType * This,
            /* [retval][out] */ SmartTagRecognizers **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FriendlyName )( 
            SmartTagType * This,
            /* [retval][out] */ BSTR *prop);
        
        END_INTERFACE
    } SmartTagTypeVtbl;

    interface SmartTagType
    {
        CONST_VTBL struct SmartTagTypeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SmartTagType_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SmartTagType_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SmartTagType_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SmartTagType_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SmartTagType_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SmartTagType_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SmartTagType_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SmartTagType_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define SmartTagType_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define SmartTagType_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define SmartTagType_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define SmartTagType_get_SmartTagActions(This,prop)	\
    ( (This)->lpVtbl -> get_SmartTagActions(This,prop) ) 

#define SmartTagType_get_SmartTagRecognizers(This,prop)	\
    ( (This)->lpVtbl -> get_SmartTagRecognizers(This,prop) ) 

#define SmartTagType_get_FriendlyName(This,prop)	\
    ( (This)->lpVtbl -> get_FriendlyName(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SmartTagType_INTERFACE_DEFINED__ */


#ifndef __SmartTagTypes_INTERFACE_DEFINED__
#define __SmartTagTypes_INTERFACE_DEFINED__

/* interface SmartTagTypes */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_SmartTagTypes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DB8E3072-E106-4453-8E7C-53056F1D30DC")
    SmartTagTypes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ SmartTagType **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReloadAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SmartTagTypesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SmartTagTypes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SmartTagTypes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SmartTagTypes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SmartTagTypes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SmartTagTypes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SmartTagTypes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SmartTagTypes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            SmartTagTypes * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SmartTagTypes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            SmartTagTypes * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            SmartTagTypes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SmartTagTypes * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            SmartTagTypes * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ SmartTagType **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReloadAll )( 
            SmartTagTypes * This);
        
        END_INTERFACE
    } SmartTagTypesVtbl;

    interface SmartTagTypes
    {
        CONST_VTBL struct SmartTagTypesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SmartTagTypes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define SmartTagTypes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define SmartTagTypes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define SmartTagTypes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define SmartTagTypes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define SmartTagTypes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define SmartTagTypes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define SmartTagTypes_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define SmartTagTypes_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define SmartTagTypes_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define SmartTagTypes_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define SmartTagTypes_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define SmartTagTypes_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define SmartTagTypes_ReloadAll(This)	\
    ( (This)->lpVtbl -> ReloadAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __SmartTagTypes_INTERFACE_DEFINED__ */


#ifndef __Line_INTERFACE_DEFINED__
#define __Line_INTERFACE_DEFINED__

/* interface Line */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Line;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AE6CE2F5-B9D3-407D-85A8-0F10C63289A4")
    Line : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineType( 
            /* [retval][out] */ WdLineType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rectangles( 
            /* [retval][out] */ Rectangles **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LineVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Line * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Line * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Line * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Line * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Line * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Line * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Line * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Line * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Line * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Line * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineType )( 
            Line * This,
            /* [retval][out] */ WdLineType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            Line * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            Line * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Line * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Line * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Line * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rectangles )( 
            Line * This,
            /* [retval][out] */ Rectangles **prop);
        
        END_INTERFACE
    } LineVtbl;

    interface Line
    {
        CONST_VTBL struct LineVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Line_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Line_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Line_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Line_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Line_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Line_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Line_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Line_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define Line_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Line_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Line_get_LineType(This,prop)	\
    ( (This)->lpVtbl -> get_LineType(This,prop) ) 

#define Line_get_Left(This,prop)	\
    ( (This)->lpVtbl -> get_Left(This,prop) ) 

#define Line_get_Top(This,prop)	\
    ( (This)->lpVtbl -> get_Top(This,prop) ) 

#define Line_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define Line_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define Line_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Line_get_Rectangles(This,prop)	\
    ( (This)->lpVtbl -> get_Rectangles(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Line_INTERFACE_DEFINED__ */


#ifndef __Lines_INTERFACE_DEFINED__
#define __Lines_INTERFACE_DEFINED__

/* interface Lines */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Lines;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E2E8A400-0615-427D-ADCC-CAD39FFEBD42")
    Lines : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Line **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LinesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Lines * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Lines * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Lines * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Lines * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Lines * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Lines * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Lines * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Lines * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Lines * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Lines * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Lines * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Lines * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Lines * This,
            /* [in] */ long Index,
            /* [retval][out] */ Line **prop);
        
        END_INTERFACE
    } LinesVtbl;

    interface Lines
    {
        CONST_VTBL struct LinesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Lines_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Lines_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Lines_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Lines_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Lines_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Lines_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Lines_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Lines_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Lines_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Lines_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define Lines_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Lines_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Lines_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Lines_INTERFACE_DEFINED__ */


#ifndef __Rectangle_INTERFACE_DEFINED__
#define __Rectangle_INTERFACE_DEFINED__

/* interface Rectangle */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Rectangle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ADD4EDF3-2F33-4734-9CE6-D476097C5ADA")
    Rectangle : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RectangleType( 
            /* [retval][out] */ WdRectangleType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Lines( 
            /* [retval][out] */ Lines **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RectangleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            void * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            void * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            void * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            void * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            void * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            void * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            void * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            void * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            void * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            void * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RectangleType )( 
            void * This,
            /* [retval][out] */ WdRectangleType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            void * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            void * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            void * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            void * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            void * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lines )( 
            void * This,
            /* [retval][out] */ Lines **prop);
        
        END_INTERFACE
    } RectangleVtbl;

    interface Rectangle
    {
        CONST_VTBL struct RectangleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Rectangle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Rectangle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Rectangle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Rectangle_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Rectangle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Rectangle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Rectangle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Rectangle_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define Rectangle_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Rectangle_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Rectangle_get_RectangleType(This,prop)	\
    ( (This)->lpVtbl -> get_RectangleType(This,prop) ) 

#define Rectangle_get_Left(This,prop)	\
    ( (This)->lpVtbl -> get_Left(This,prop) ) 

#define Rectangle_get_Top(This,prop)	\
    ( (This)->lpVtbl -> get_Top(This,prop) ) 

#define Rectangle_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define Rectangle_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define Rectangle_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Rectangle_get_Lines(This,prop)	\
    ( (This)->lpVtbl -> get_Lines(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Rectangle_INTERFACE_DEFINED__ */


#ifndef __Rectangles_INTERFACE_DEFINED__
#define __Rectangles_INTERFACE_DEFINED__

/* interface Rectangles */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Rectangles;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7D0F7985-68D9-4D93-91CB-8109280E76CC")
    Rectangles : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Rectangle **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct RectanglesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Rectangles * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Rectangles * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Rectangles * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Rectangles * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Rectangles * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Rectangles * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Rectangles * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Rectangles * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Rectangles * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Rectangles * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Rectangles * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Rectangles * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Rectangles * This,
            /* [in] */ long Index,
            /* [retval][out] */ /*Rectangle*/void **prop);
        
        END_INTERFACE
    } RectanglesVtbl;

    interface Rectangles
    {
        CONST_VTBL struct RectanglesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Rectangles_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Rectangles_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Rectangles_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Rectangles_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Rectangles_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Rectangles_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Rectangles_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Rectangles_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Rectangles_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Rectangles_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define Rectangles_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Rectangles_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Rectangles_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Rectangles_INTERFACE_DEFINED__ */


#ifndef __Break_INTERFACE_DEFINED__
#define __Break_INTERFACE_DEFINED__

/* interface Break */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Break;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("79635BF1-BD1D-4B3F-A520-C1106F1AAAD8")
    Break : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PageIndex( 
            /* [retval][out] */ long *prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BreakVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Break * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Break * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Break * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Break * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Break * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Break * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Break * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Break * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Break * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Break * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Break * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PageIndex )( 
            Break * This,
            /* [retval][out] */ long *prop);
        
        END_INTERFACE
    } BreakVtbl;

    interface Break
    {
        CONST_VTBL struct BreakVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Break_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Break_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Break_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Break_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Break_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Break_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Break_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Break_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define Break_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Break_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Break_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Break_get_PageIndex(This,prop)	\
    ( (This)->lpVtbl -> get_PageIndex(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Break_INTERFACE_DEFINED__ */


#ifndef __Breaks_INTERFACE_DEFINED__
#define __Breaks_INTERFACE_DEFINED__

/* interface Breaks */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Breaks;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("16BE9309-D708-4322-BB1A-B056F58D17EA")
    Breaks : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Break **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BreaksVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Breaks * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Breaks * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Breaks * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Breaks * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Breaks * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Breaks * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Breaks * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Breaks * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Breaks * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Breaks * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Breaks * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Breaks * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Breaks * This,
            /* [in] */ long Index,
            /* [retval][out] */ Break **prop);
        
        END_INTERFACE
    } BreaksVtbl;

    interface Breaks
    {
        CONST_VTBL struct BreaksVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Breaks_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Breaks_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Breaks_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Breaks_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Breaks_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Breaks_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Breaks_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Breaks_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Breaks_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Breaks_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define Breaks_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Breaks_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Breaks_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Breaks_INTERFACE_DEFINED__ */


#ifndef __Page_INTERFACE_DEFINED__
#define __Page_INTERFACE_DEFINED__

/* interface Page */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Page;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("352840A9-AF7D-4CA4-87FC-21C68FDAB3E4")
    Page : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Rectangles( 
            /* [retval][out] */ Rectangles **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Breaks( 
            /* [retval][out] */ Breaks **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Page * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Page * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Page * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Page * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Page * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Page * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Page * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Page * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Page * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Page * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            Page * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            Page * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Page * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Page * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Rectangles )( 
            Page * This,
            /* [retval][out] */ Rectangles **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Breaks )( 
            Page * This,
            /* [retval][out] */ Breaks **prop);
        
        END_INTERFACE
    } PageVtbl;

    interface Page
    {
        CONST_VTBL struct PageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Page_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Page_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Page_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Page_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Page_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Page_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Page_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Page_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define Page_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Page_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Page_get_Left(This,prop)	\
    ( (This)->lpVtbl -> get_Left(This,prop) ) 

#define Page_get_Top(This,prop)	\
    ( (This)->lpVtbl -> get_Top(This,prop) ) 

#define Page_get_Width(This,prop)	\
    ( (This)->lpVtbl -> get_Width(This,prop) ) 

#define Page_get_Height(This,prop)	\
    ( (This)->lpVtbl -> get_Height(This,prop) ) 

#define Page_get_Rectangles(This,prop)	\
    ( (This)->lpVtbl -> get_Rectangles(This,prop) ) 

#define Page_get_Breaks(This,prop)	\
    ( (This)->lpVtbl -> get_Breaks(This,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Page_INTERFACE_DEFINED__ */


#ifndef __Pages_INTERFACE_DEFINED__
#define __Pages_INTERFACE_DEFINED__

/* interface Pages */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Pages;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("91807402-6C6F-47CD-B8FA-C42FEE8EE924")
    Pages : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ Page **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PagesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Pages * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Pages * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Pages * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Pages * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Pages * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Pages * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Pages * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            Pages * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Pages * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Pages * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Pages * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Pages * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Pages * This,
            /* [in] */ long Index,
            /* [retval][out] */ Page **prop);
        
        END_INTERFACE
    } PagesVtbl;

    interface Pages
    {
        CONST_VTBL struct PagesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Pages_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Pages_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Pages_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Pages_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Pages_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Pages_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Pages_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Pages_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define Pages_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Pages_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define Pages_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Pages_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Pages_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Pages_INTERFACE_DEFINED__ */


#ifndef __XMLNode_INTERFACE_DEFINED__
#define __XMLNode_INTERFACE_DEFINED__

/* interface XMLNode */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_XMLNode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("09760240-0B89-49F7-A79D-479F24723F56")
    XMLNode : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BaseName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NamespaceURI( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XML( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL DataOnly,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NextSibling( 
            /* [retval][out] */ XMLNode **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PreviousSibling( 
            /* [retval][out] */ XMLNode **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ParentNode( 
            /* [retval][out] */ XMLNode **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FirstChild( 
            /* [retval][out] */ XMLNode **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LastChild( 
            /* [retval][out] */ XMLNode **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OwnerDocument( 
            /* [retval][out] */ Document	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NodeType( 
            /* [retval][out] */ WdXMLNodeType *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChildNodes( 
            /* [retval][out] */ XMLNodes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ XMLNodes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NodeValue( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_NodeValue( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HasChildNodes( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectSingleNode( 
            /* [in] */ BSTR XPath,
            /* [defaultvalue][optional][in] */ BSTR PrefixMapping,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL FastSearchSkippingTextNodes,
            /* [retval][out] */ XMLNode **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectNodes( 
            /* [in] */ BSTR XPath,
            /* [defaultvalue][optional][in] */ BSTR PrefixMapping,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL FastSearchSkippingTextNodes,
            /* [retval][out] */ XMLNodes **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ChildNodeSuggestions( 
            /* [retval][out] */ XMLChildNodeSuggestions **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Level( 
            /* [retval][out] */ WdXMLNodeLevel *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ValidationStatus( 
            /* [retval][out] */ WdXMLValidationStatus *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SmartTag( 
            /* [retval][out] */ SmartTag **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ValidationErrorText( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL Advanced,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlaceholderText( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PlaceholderText( 
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveChild( 
            /* [in] */ XMLNode *ChildElement) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Validate( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetValidationError( 
            /* [in] */ WdXMLValidationStatus Status,
            /* [optional][in] */ VARIANT *ErrorText,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL ClearedAutomatically = -1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct XMLNodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            XMLNode * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            XMLNode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            XMLNode * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            XMLNode * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            XMLNode * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            XMLNode * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            XMLNode * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BaseName )( 
            XMLNode * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            XMLNode * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            XMLNode * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            XMLNode * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            XMLNode * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            XMLNode * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            XMLNode * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NamespaceURI )( 
            XMLNode * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XML )( 
            XMLNode * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL DataOnly,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NextSibling )( 
            XMLNode * This,
            /* [retval][out] */ XMLNode **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PreviousSibling )( 
            XMLNode * This,
            /* [retval][out] */ XMLNode **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ParentNode )( 
            XMLNode * This,
            /* [retval][out] */ XMLNode **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FirstChild )( 
            XMLNode * This,
            /* [retval][out] */ XMLNode **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastChild )( 
            XMLNode * This,
            /* [retval][out] */ XMLNode **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerDocument )( 
            XMLNode * This,
            /* [retval][out] */ Document	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeType )( 
            XMLNode * This,
            /* [retval][out] */ WdXMLNodeType *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChildNodes )( 
            XMLNode * This,
            /* [retval][out] */ XMLNodes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            XMLNode * This,
            /* [retval][out] */ XMLNodes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NodeValue )( 
            XMLNode * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_NodeValue )( 
            XMLNode * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HasChildNodes )( 
            XMLNode * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectSingleNode )( 
            XMLNode * This,
            /* [in] */ BSTR XPath,
            /* [defaultvalue][optional][in] */ BSTR PrefixMapping,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL FastSearchSkippingTextNodes,
            /* [retval][out] */ XMLNode **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectNodes )( 
            XMLNode * This,
            /* [in] */ BSTR XPath,
            /* [defaultvalue][optional][in] */ BSTR PrefixMapping,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL FastSearchSkippingTextNodes,
            /* [retval][out] */ XMLNodes **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ChildNodeSuggestions )( 
            XMLNode * This,
            /* [retval][out] */ XMLChildNodeSuggestions **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Level )( 
            XMLNode * This,
            /* [retval][out] */ WdXMLNodeLevel *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ValidationStatus )( 
            XMLNode * This,
            /* [retval][out] */ WdXMLValidationStatus *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SmartTag )( 
            XMLNode * This,
            /* [retval][out] */ SmartTag **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ValidationErrorText )( 
            XMLNode * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL Advanced,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlaceholderText )( 
            XMLNode * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PlaceholderText )( 
            XMLNode * This,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            XMLNode * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            XMLNode * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveChild )( 
            XMLNode * This,
            /* [in] */ XMLNode *ChildElement);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            XMLNode * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            XMLNode * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetValidationError )( 
            XMLNode * This,
            /* [in] */ WdXMLValidationStatus Status,
            /* [optional][in] */ VARIANT *ErrorText,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL ClearedAutomatically);
        
        END_INTERFACE
    } XMLNodeVtbl;

    interface XMLNode
    {
        CONST_VTBL struct XMLNodeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define XMLNode_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define XMLNode_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define XMLNode_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define XMLNode_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define XMLNode_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define XMLNode_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define XMLNode_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define XMLNode_get_BaseName(This,prop)	\
    ( (This)->lpVtbl -> get_BaseName(This,prop) ) 

#define XMLNode_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define XMLNode_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define XMLNode_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define XMLNode_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define XMLNode_get_Text(This,prop)	\
    ( (This)->lpVtbl -> get_Text(This,prop) ) 

#define XMLNode_put_Text(This,prop)	\
    ( (This)->lpVtbl -> put_Text(This,prop) ) 

#define XMLNode_get_NamespaceURI(This,prop)	\
    ( (This)->lpVtbl -> get_NamespaceURI(This,prop) ) 

#define XMLNode_get_XML(This,DataOnly,prop)	\
    ( (This)->lpVtbl -> get_XML(This,DataOnly,prop) ) 

#define XMLNode_get_NextSibling(This,prop)	\
    ( (This)->lpVtbl -> get_NextSibling(This,prop) ) 

#define XMLNode_get_PreviousSibling(This,prop)	\
    ( (This)->lpVtbl -> get_PreviousSibling(This,prop) ) 

#define XMLNode_get_ParentNode(This,prop)	\
    ( (This)->lpVtbl -> get_ParentNode(This,prop) ) 

#define XMLNode_get_FirstChild(This,prop)	\
    ( (This)->lpVtbl -> get_FirstChild(This,prop) ) 

#define XMLNode_get_LastChild(This,prop)	\
    ( (This)->lpVtbl -> get_LastChild(This,prop) ) 

#define XMLNode_get_OwnerDocument(This,prop)	\
    ( (This)->lpVtbl -> get_OwnerDocument(This,prop) ) 

#define XMLNode_get_NodeType(This,prop)	\
    ( (This)->lpVtbl -> get_NodeType(This,prop) ) 

#define XMLNode_get_ChildNodes(This,prop)	\
    ( (This)->lpVtbl -> get_ChildNodes(This,prop) ) 

#define XMLNode_get_Attributes(This,prop)	\
    ( (This)->lpVtbl -> get_Attributes(This,prop) ) 

#define XMLNode_get_NodeValue(This,prop)	\
    ( (This)->lpVtbl -> get_NodeValue(This,prop) ) 

#define XMLNode_put_NodeValue(This,prop)	\
    ( (This)->lpVtbl -> put_NodeValue(This,prop) ) 

#define XMLNode_get_HasChildNodes(This,prop)	\
    ( (This)->lpVtbl -> get_HasChildNodes(This,prop) ) 

#define XMLNode_SelectSingleNode(This,XPath,PrefixMapping,FastSearchSkippingTextNodes,prop)	\
    ( (This)->lpVtbl -> SelectSingleNode(This,XPath,PrefixMapping,FastSearchSkippingTextNodes,prop) ) 

#define XMLNode_SelectNodes(This,XPath,PrefixMapping,FastSearchSkippingTextNodes,prop)	\
    ( (This)->lpVtbl -> SelectNodes(This,XPath,PrefixMapping,FastSearchSkippingTextNodes,prop) ) 

#define XMLNode_get_ChildNodeSuggestions(This,prop)	\
    ( (This)->lpVtbl -> get_ChildNodeSuggestions(This,prop) ) 

#define XMLNode_get_Level(This,prop)	\
    ( (This)->lpVtbl -> get_Level(This,prop) ) 

#define XMLNode_get_ValidationStatus(This,prop)	\
    ( (This)->lpVtbl -> get_ValidationStatus(This,prop) ) 

#define XMLNode_get_SmartTag(This,prop)	\
    ( (This)->lpVtbl -> get_SmartTag(This,prop) ) 

#define XMLNode_get_ValidationErrorText(This,Advanced,prop)	\
    ( (This)->lpVtbl -> get_ValidationErrorText(This,Advanced,prop) ) 

#define XMLNode_get_PlaceholderText(This,prop)	\
    ( (This)->lpVtbl -> get_PlaceholderText(This,prop) ) 

#define XMLNode_put_PlaceholderText(This,prop)	\
    ( (This)->lpVtbl -> put_PlaceholderText(This,prop) ) 

#define XMLNode_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define XMLNode_Copy(This)	\
    ( (This)->lpVtbl -> Copy(This) ) 

#define XMLNode_RemoveChild(This,ChildElement)	\
    ( (This)->lpVtbl -> RemoveChild(This,ChildElement) ) 

#define XMLNode_Cut(This)	\
    ( (This)->lpVtbl -> Cut(This) ) 

#define XMLNode_Validate(This)	\
    ( (This)->lpVtbl -> Validate(This) ) 

#define XMLNode_SetValidationError(This,Status,ErrorText,ClearedAutomatically)	\
    ( (This)->lpVtbl -> SetValidationError(This,Status,ErrorText,ClearedAutomatically) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __XMLNode_INTERFACE_DEFINED__ */


#ifndef __XMLNodes_INTERFACE_DEFINED__
#define __XMLNodes_INTERFACE_DEFINED__

/* interface XMLNodes */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_XMLNodes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D36C1F42-7044-4B9E-9CA3-85919454DB04")
    XMLNodes : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ long Index,
            /* [retval][out] */ XMLNode **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [in] */ BSTR Namespace,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ XMLNode **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct XMLNodesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            XMLNodes * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            XMLNodes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            XMLNodes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            XMLNodes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            XMLNodes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            XMLNodes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            XMLNodes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            XMLNodes * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            XMLNodes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            XMLNodes * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            XMLNodes * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            XMLNodes * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            XMLNodes * This,
            /* [in] */ long Index,
            /* [retval][out] */ XMLNode **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            XMLNodes * This,
            /* [in] */ BSTR Name,
            /* [in] */ BSTR Namespace,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ XMLNode **prop);
        
        END_INTERFACE
    } XMLNodesVtbl;

    interface XMLNodes
    {
        CONST_VTBL struct XMLNodesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define XMLNodes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define XMLNodes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define XMLNodes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define XMLNodes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define XMLNodes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define XMLNodes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define XMLNodes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define XMLNodes_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define XMLNodes_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define XMLNodes_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define XMLNodes_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define XMLNodes_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define XMLNodes_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define XMLNodes_Add(This,Name,Namespace,Range,prop)	\
    ( (This)->lpVtbl -> Add(This,Name,Namespace,Range,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __XMLNodes_INTERFACE_DEFINED__ */


#ifndef __XMLSchemaReference_INTERFACE_DEFINED__
#define __XMLSchemaReference_INTERFACE_DEFINED__

/* interface XMLSchemaReference */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_XMLSchemaReference;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FE0971F0-5E60-4985-BCDA-95CB0B8E0308")
    XMLSchemaReference : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NamespaceURI( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Location( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Reload( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct XMLSchemaReferenceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            XMLSchemaReference * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            XMLSchemaReference * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            XMLSchemaReference * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            XMLSchemaReference * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            XMLSchemaReference * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            XMLSchemaReference * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            XMLSchemaReference * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            XMLSchemaReference * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            XMLSchemaReference * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            XMLSchemaReference * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NamespaceURI )( 
            XMLSchemaReference * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            XMLSchemaReference * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            XMLSchemaReference * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Reload )( 
            XMLSchemaReference * This);
        
        END_INTERFACE
    } XMLSchemaReferenceVtbl;

    interface XMLSchemaReference
    {
        CONST_VTBL struct XMLSchemaReferenceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define XMLSchemaReference_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define XMLSchemaReference_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define XMLSchemaReference_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define XMLSchemaReference_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define XMLSchemaReference_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define XMLSchemaReference_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define XMLSchemaReference_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define XMLSchemaReference_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define XMLSchemaReference_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define XMLSchemaReference_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define XMLSchemaReference_get_NamespaceURI(This,prop)	\
    ( (This)->lpVtbl -> get_NamespaceURI(This,prop) ) 

#define XMLSchemaReference_get_Location(This,prop)	\
    ( (This)->lpVtbl -> get_Location(This,prop) ) 

#define XMLSchemaReference_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define XMLSchemaReference_Reload(This)	\
    ( (This)->lpVtbl -> Reload(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __XMLSchemaReference_INTERFACE_DEFINED__ */


#ifndef __XMLSchemaReferences_INTERFACE_DEFINED__
#define __XMLSchemaReferences_INTERFACE_DEFINED__

/* interface XMLSchemaReferences */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_XMLSchemaReferences;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("356B06EC-4908-42A4-81FC-4B5A51F3483B")
    XMLSchemaReferences : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutomaticValidation( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutomaticValidation( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AllowSaveAsXMLWithoutValidation( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AllowSaveAsXMLWithoutValidation( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HideValidationErrors( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_HideValidationErrors( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IgnoreMixedContent( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IgnoreMixedContent( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShowPlaceholderText( 
            /* [retval][out] */ VARIANT_BOOL *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShowPlaceholderText( 
            /* [in] */ VARIANT_BOOL prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ XMLSchemaReference **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Validate( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [optional][in] */ VARIANT *NamespaceURI,
            /* [optional][in] */ VARIANT *Alias,
            /* [optional][in] */ VARIANT *FileName,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL InstallForAllUsers,
            /* [retval][out] */ XMLSchemaReference **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct XMLSchemaReferencesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            XMLSchemaReferences * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            XMLSchemaReferences * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            XMLSchemaReferences * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            XMLSchemaReferences * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            XMLSchemaReferences * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            XMLSchemaReferences * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            XMLSchemaReferences * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            XMLSchemaReferences * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            XMLSchemaReferences * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            XMLSchemaReferences * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            XMLSchemaReferences * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            XMLSchemaReferences * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutomaticValidation )( 
            XMLSchemaReferences * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutomaticValidation )( 
            XMLSchemaReferences * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AllowSaveAsXMLWithoutValidation )( 
            XMLSchemaReferences * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AllowSaveAsXMLWithoutValidation )( 
            XMLSchemaReferences * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HideValidationErrors )( 
            XMLSchemaReferences * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_HideValidationErrors )( 
            XMLSchemaReferences * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IgnoreMixedContent )( 
            XMLSchemaReferences * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IgnoreMixedContent )( 
            XMLSchemaReferences * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShowPlaceholderText )( 
            XMLSchemaReferences * This,
            /* [retval][out] */ VARIANT_BOOL *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShowPlaceholderText )( 
            XMLSchemaReferences * This,
            /* [in] */ VARIANT_BOOL prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            XMLSchemaReferences * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ XMLSchemaReference **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            XMLSchemaReferences * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            XMLSchemaReferences * This,
            /* [optional][in] */ VARIANT *NamespaceURI,
            /* [optional][in] */ VARIANT *Alias,
            /* [optional][in] */ VARIANT *FileName,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL InstallForAllUsers,
            /* [retval][out] */ XMLSchemaReference **prop);
        
        END_INTERFACE
    } XMLSchemaReferencesVtbl;

    interface XMLSchemaReferences
    {
        CONST_VTBL struct XMLSchemaReferencesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define XMLSchemaReferences_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define XMLSchemaReferences_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define XMLSchemaReferences_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define XMLSchemaReferences_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define XMLSchemaReferences_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define XMLSchemaReferences_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define XMLSchemaReferences_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define XMLSchemaReferences_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define XMLSchemaReferences_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define XMLSchemaReferences_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define XMLSchemaReferences_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define XMLSchemaReferences_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define XMLSchemaReferences_get_AutomaticValidation(This,prop)	\
    ( (This)->lpVtbl -> get_AutomaticValidation(This,prop) ) 

#define XMLSchemaReferences_put_AutomaticValidation(This,prop)	\
    ( (This)->lpVtbl -> put_AutomaticValidation(This,prop) ) 

#define XMLSchemaReferences_get_AllowSaveAsXMLWithoutValidation(This,prop)	\
    ( (This)->lpVtbl -> get_AllowSaveAsXMLWithoutValidation(This,prop) ) 

#define XMLSchemaReferences_put_AllowSaveAsXMLWithoutValidation(This,prop)	\
    ( (This)->lpVtbl -> put_AllowSaveAsXMLWithoutValidation(This,prop) ) 

#define XMLSchemaReferences_get_HideValidationErrors(This,prop)	\
    ( (This)->lpVtbl -> get_HideValidationErrors(This,prop) ) 

#define XMLSchemaReferences_put_HideValidationErrors(This,prop)	\
    ( (This)->lpVtbl -> put_HideValidationErrors(This,prop) ) 

#define XMLSchemaReferences_get_IgnoreMixedContent(This,prop)	\
    ( (This)->lpVtbl -> get_IgnoreMixedContent(This,prop) ) 

#define XMLSchemaReferences_put_IgnoreMixedContent(This,prop)	\
    ( (This)->lpVtbl -> put_IgnoreMixedContent(This,prop) ) 

#define XMLSchemaReferences_get_ShowPlaceholderText(This,prop)	\
    ( (This)->lpVtbl -> get_ShowPlaceholderText(This,prop) ) 

#define XMLSchemaReferences_put_ShowPlaceholderText(This,prop)	\
    ( (This)->lpVtbl -> put_ShowPlaceholderText(This,prop) ) 

#define XMLSchemaReferences_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define XMLSchemaReferences_Validate(This)	\
    ( (This)->lpVtbl -> Validate(This) ) 

#define XMLSchemaReferences_Add(This,NamespaceURI,Alias,FileName,InstallForAllUsers,prop)	\
    ( (This)->lpVtbl -> Add(This,NamespaceURI,Alias,FileName,InstallForAllUsers,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __XMLSchemaReferences_INTERFACE_DEFINED__ */


#ifndef __XMLChildNodeSuggestion_INTERFACE_DEFINED__
#define __XMLChildNodeSuggestion_INTERFACE_DEFINED__

/* interface XMLChildNodeSuggestion */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_XMLChildNodeSuggestion;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A87E00E9-3AC3-4B53-ABE3-7379653D0E82")
    XMLChildNodeSuggestion : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BaseName( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NamespaceURI( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XMLSchemaReference( 
            /* [retval][out] */ XMLSchemaReference **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ XMLNode **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct XMLChildNodeSuggestionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            XMLChildNodeSuggestion * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            XMLChildNodeSuggestion * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            XMLChildNodeSuggestion * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            XMLChildNodeSuggestion * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            XMLChildNodeSuggestion * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            XMLChildNodeSuggestion * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            XMLChildNodeSuggestion * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            XMLChildNodeSuggestion * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            XMLChildNodeSuggestion * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            XMLChildNodeSuggestion * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BaseName )( 
            XMLChildNodeSuggestion * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NamespaceURI )( 
            XMLChildNodeSuggestion * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XMLSchemaReference )( 
            XMLChildNodeSuggestion * This,
            /* [retval][out] */ XMLSchemaReference **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            XMLChildNodeSuggestion * This,
            /* [optional][in] */ VARIANT *Range,
            /* [retval][out] */ XMLNode **prop);
        
        END_INTERFACE
    } XMLChildNodeSuggestionVtbl;

    interface XMLChildNodeSuggestion
    {
        CONST_VTBL struct XMLChildNodeSuggestionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define XMLChildNodeSuggestion_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define XMLChildNodeSuggestion_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define XMLChildNodeSuggestion_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define XMLChildNodeSuggestion_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define XMLChildNodeSuggestion_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define XMLChildNodeSuggestion_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define XMLChildNodeSuggestion_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define XMLChildNodeSuggestion_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define XMLChildNodeSuggestion_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define XMLChildNodeSuggestion_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define XMLChildNodeSuggestion_get_BaseName(This,prop)	\
    ( (This)->lpVtbl -> get_BaseName(This,prop) ) 

#define XMLChildNodeSuggestion_get_NamespaceURI(This,prop)	\
    ( (This)->lpVtbl -> get_NamespaceURI(This,prop) ) 

#define XMLChildNodeSuggestion_get_XMLSchemaReference(This,prop)	\
    ( (This)->lpVtbl -> get_XMLSchemaReference(This,prop) ) 

#define XMLChildNodeSuggestion_Insert(This,Range,prop)	\
    ( (This)->lpVtbl -> Insert(This,Range,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __XMLChildNodeSuggestion_INTERFACE_DEFINED__ */


#ifndef __XMLChildNodeSuggestions_INTERFACE_DEFINED__
#define __XMLChildNodeSuggestions_INTERFACE_DEFINED__

/* interface XMLChildNodeSuggestions */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_XMLChildNodeSuggestions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DE63B5AC-CA4F-46FE-9184-A5719AB9ED5B")
    XMLChildNodeSuggestions : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ XMLChildNodeSuggestion **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct XMLChildNodeSuggestionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            XMLChildNodeSuggestions * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            XMLChildNodeSuggestions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            XMLChildNodeSuggestions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            XMLChildNodeSuggestions * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            XMLChildNodeSuggestions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            XMLChildNodeSuggestions * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            XMLChildNodeSuggestions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            XMLChildNodeSuggestions * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            XMLChildNodeSuggestions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            XMLChildNodeSuggestions * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            XMLChildNodeSuggestions * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            XMLChildNodeSuggestions * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            XMLChildNodeSuggestions * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ XMLChildNodeSuggestion **prop);
        
        END_INTERFACE
    } XMLChildNodeSuggestionsVtbl;

    interface XMLChildNodeSuggestions
    {
        CONST_VTBL struct XMLChildNodeSuggestionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define XMLChildNodeSuggestions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define XMLChildNodeSuggestions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define XMLChildNodeSuggestions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define XMLChildNodeSuggestions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define XMLChildNodeSuggestions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define XMLChildNodeSuggestions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define XMLChildNodeSuggestions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define XMLChildNodeSuggestions_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define XMLChildNodeSuggestions_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define XMLChildNodeSuggestions_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define XMLChildNodeSuggestions_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define XMLChildNodeSuggestions_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define XMLChildNodeSuggestions_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __XMLChildNodeSuggestions_INTERFACE_DEFINED__ */


#ifndef __XMLNamespace_INTERFACE_DEFINED__
#define __XMLNamespace_INTERFACE_DEFINED__

/* interface XMLNamespace */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_XMLNamespace;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B140A023-4850-4DA6-BC5F-CC459C4507BC")
    XMLNamespace : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_URI( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Location( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Location( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alias( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alias( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_XSLTransforms( 
            /* [retval][out] */ XSLTransforms **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultTransform( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [retval][out] */ XSLTransform **prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DefaultTransform( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [in] */ XSLTransform *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE AttachToDocument( 
            /* [in] */ VARIANT *Document) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct XMLNamespaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            XMLNamespace * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            XMLNamespace * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            XMLNamespace * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            XMLNamespace * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            XMLNamespace * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            XMLNamespace * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            XMLNamespace * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            XMLNamespace * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            XMLNamespace * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            XMLNamespace * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_URI )( 
            XMLNamespace * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            XMLNamespace * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Location )( 
            XMLNamespace * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alias )( 
            XMLNamespace * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alias )( 
            XMLNamespace * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_XSLTransforms )( 
            XMLNamespace * This,
            /* [retval][out] */ XSLTransforms **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultTransform )( 
            XMLNamespace * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [retval][out] */ XSLTransform **prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DefaultTransform )( 
            XMLNamespace * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [in] */ XSLTransform *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AttachToDocument )( 
            XMLNamespace * This,
            /* [in] */ VARIANT *Document);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            XMLNamespace * This);
        
        END_INTERFACE
    } XMLNamespaceVtbl;

    interface XMLNamespace
    {
        CONST_VTBL struct XMLNamespaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define XMLNamespace_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define XMLNamespace_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define XMLNamespace_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define XMLNamespace_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define XMLNamespace_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define XMLNamespace_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define XMLNamespace_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define XMLNamespace_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define XMLNamespace_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define XMLNamespace_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define XMLNamespace_get_URI(This,prop)	\
    ( (This)->lpVtbl -> get_URI(This,prop) ) 

#define XMLNamespace_get_Location(This,AllUsers,prop)	\
    ( (This)->lpVtbl -> get_Location(This,AllUsers,prop) ) 

#define XMLNamespace_put_Location(This,AllUsers,prop)	\
    ( (This)->lpVtbl -> put_Location(This,AllUsers,prop) ) 

#define XMLNamespace_get_Alias(This,AllUsers,prop)	\
    ( (This)->lpVtbl -> get_Alias(This,AllUsers,prop) ) 

#define XMLNamespace_put_Alias(This,AllUsers,prop)	\
    ( (This)->lpVtbl -> put_Alias(This,AllUsers,prop) ) 

#define XMLNamespace_get_XSLTransforms(This,prop)	\
    ( (This)->lpVtbl -> get_XSLTransforms(This,prop) ) 

#define XMLNamespace_get_DefaultTransform(This,AllUsers,prop)	\
    ( (This)->lpVtbl -> get_DefaultTransform(This,AllUsers,prop) ) 

#define XMLNamespace_put_DefaultTransform(This,AllUsers,prop)	\
    ( (This)->lpVtbl -> put_DefaultTransform(This,AllUsers,prop) ) 

#define XMLNamespace_AttachToDocument(This,Document)	\
    ( (This)->lpVtbl -> AttachToDocument(This,Document) ) 

#define XMLNamespace_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __XMLNamespace_INTERFACE_DEFINED__ */


#ifndef __XMLNamespaces_INTERFACE_DEFINED__
#define __XMLNamespaces_INTERFACE_DEFINED__

/* interface XMLNamespaces */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_XMLNamespaces;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("656BBED7-E82D-4B0A-8F97-EC742BA11FFA")
    XMLNamespaces : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ XMLNamespace **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Path,
            /* [optional][in] */ VARIANT *NamespaceURI,
            /* [optional][in] */ VARIANT *Alias,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL InstallForAllUsers,
            /* [retval][out] */ XMLNamespace **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE InstallManifest( 
            /* [in] */ BSTR Path,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL InstallForAllUsers = 0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct XMLNamespacesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            XMLNamespaces * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            XMLNamespaces * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            XMLNamespaces * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            XMLNamespaces * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            XMLNamespaces * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            XMLNamespaces * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            XMLNamespaces * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            XMLNamespaces * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            XMLNamespaces * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            XMLNamespaces * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            XMLNamespaces * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            XMLNamespaces * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            XMLNamespaces * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ XMLNamespace **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            XMLNamespaces * This,
            /* [in] */ BSTR Path,
            /* [optional][in] */ VARIANT *NamespaceURI,
            /* [optional][in] */ VARIANT *Alias,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL InstallForAllUsers,
            /* [retval][out] */ XMLNamespace **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InstallManifest )( 
            XMLNamespaces * This,
            /* [in] */ BSTR Path,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL InstallForAllUsers);
        
        END_INTERFACE
    } XMLNamespacesVtbl;

    interface XMLNamespaces
    {
        CONST_VTBL struct XMLNamespacesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define XMLNamespaces_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define XMLNamespaces_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define XMLNamespaces_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define XMLNamespaces_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define XMLNamespaces_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define XMLNamespaces_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define XMLNamespaces_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define XMLNamespaces_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define XMLNamespaces_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define XMLNamespaces_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define XMLNamespaces_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define XMLNamespaces_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define XMLNamespaces_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define XMLNamespaces_Add(This,Path,NamespaceURI,Alias,InstallForAllUsers,prop)	\
    ( (This)->lpVtbl -> Add(This,Path,NamespaceURI,Alias,InstallForAllUsers,prop) ) 

#define XMLNamespaces_InstallManifest(This,Path,InstallForAllUsers)	\
    ( (This)->lpVtbl -> InstallManifest(This,Path,InstallForAllUsers) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __XMLNamespaces_INTERFACE_DEFINED__ */


#ifndef __XSLTransform_INTERFACE_DEFINED__
#define __XSLTransform_INTERFACE_DEFINED__

/* interface XSLTransform */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_XSLTransform;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E3124493-7D6A-410F-9A48-CC822C033CEC")
    XSLTransform : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Alias( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Alias( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Location( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Location( 
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [in] */ BSTR prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct XSLTransformVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            XSLTransform * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            XSLTransform * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            XSLTransform * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            XSLTransform * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            XSLTransform * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            XSLTransform * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            XSLTransform * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            XSLTransform * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            XSLTransform * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            XSLTransform * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Alias )( 
            XSLTransform * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Alias )( 
            XSLTransform * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Location )( 
            XSLTransform * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Location )( 
            XSLTransform * This,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL AllUsers,
            /* [in] */ BSTR prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            XSLTransform * This);
        
        END_INTERFACE
    } XSLTransformVtbl;

    interface XSLTransform
    {
        CONST_VTBL struct XSLTransformVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define XSLTransform_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define XSLTransform_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define XSLTransform_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define XSLTransform_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define XSLTransform_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define XSLTransform_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define XSLTransform_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define XSLTransform_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define XSLTransform_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define XSLTransform_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define XSLTransform_get_Alias(This,AllUsers,prop)	\
    ( (This)->lpVtbl -> get_Alias(This,AllUsers,prop) ) 

#define XSLTransform_put_Alias(This,AllUsers,prop)	\
    ( (This)->lpVtbl -> put_Alias(This,AllUsers,prop) ) 

#define XSLTransform_get_Location(This,AllUsers,prop)	\
    ( (This)->lpVtbl -> get_Location(This,AllUsers,prop) ) 

#define XSLTransform_put_Location(This,AllUsers,prop)	\
    ( (This)->lpVtbl -> put_Location(This,AllUsers,prop) ) 

#define XSLTransform_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __XSLTransform_INTERFACE_DEFINED__ */


#ifndef __XSLTransforms_INTERFACE_DEFINED__
#define __XSLTransforms_INTERFACE_DEFINED__

/* interface XSLTransforms */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_XSLTransforms;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C774F5EA-A539-4284-A1BE-30AEC052D899")
    XSLTransforms : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ IUnknown **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [custom][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ XSLTransform **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Location,
            /* [optional][in] */ VARIANT *Alias,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL InstallForAllUsers,
            /* [retval][out] */ XSLTransform **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct XSLTransformsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            XSLTransforms * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            XSLTransforms * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            XSLTransforms * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            XSLTransforms * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            XSLTransforms * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            XSLTransforms * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            XSLTransforms * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            XSLTransforms * This,
            /* [retval][out] */ IUnknown **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            XSLTransforms * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            XSLTransforms * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            XSLTransforms * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            XSLTransforms * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [custom][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            XSLTransforms * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ XSLTransform **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            XSLTransforms * This,
            /* [in] */ BSTR Location,
            /* [optional][in] */ VARIANT *Alias,
            /* [defaultvalue][optional][in] */ VARIANT_BOOL InstallForAllUsers,
            /* [retval][out] */ XSLTransform **prop);
        
        END_INTERFACE
    } XSLTransformsVtbl;

    interface XSLTransforms
    {
        CONST_VTBL struct XSLTransformsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define XSLTransforms_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define XSLTransforms_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define XSLTransforms_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define XSLTransforms_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define XSLTransforms_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define XSLTransforms_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define XSLTransforms_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define XSLTransforms_get__NewEnum(This,prop)	\
    ( (This)->lpVtbl -> get__NewEnum(This,prop) ) 

#define XSLTransforms_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define XSLTransforms_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define XSLTransforms_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define XSLTransforms_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define XSLTransforms_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define XSLTransforms_Add(This,Location,Alias,InstallForAllUsers,prop)	\
    ( (This)->lpVtbl -> Add(This,Location,Alias,InstallForAllUsers,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __XSLTransforms_INTERFACE_DEFINED__ */


#ifndef __Editors_INTERFACE_DEFINED__
#define __Editors_INTERFACE_DEFINED__

/* interface Editors */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Editors;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AED7E08C-14F0-4F33-921D-4C5353137BF6")
    Editors : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Editor **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ VARIANT *EditorID,
            /* [retval][out] */ Editor **prop) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EditorsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Editors * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Editors * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Editors * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Editors * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Editors * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Editors * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Editors * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Editors * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Editors * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Editors * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Editors * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Editors * This,
            /* [in] */ VARIANT *Index,
            /* [retval][out] */ Editor **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Editors * This,
            /* [in] */ VARIANT *EditorID,
            /* [retval][out] */ Editor **prop);
        
        END_INTERFACE
    } EditorsVtbl;

    interface Editors
    {
        CONST_VTBL struct EditorsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Editors_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Editors_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Editors_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Editors_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Editors_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Editors_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Editors_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Editors_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define Editors_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Editors_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Editors_get_Count(This,prop)	\
    ( (This)->lpVtbl -> get_Count(This,prop) ) 

#define Editors_Item(This,Index,prop)	\
    ( (This)->lpVtbl -> Item(This,Index,prop) ) 

#define Editors_Add(This,EditorID,prop)	\
    ( (This)->lpVtbl -> Add(This,EditorID,prop) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Editors_INTERFACE_DEFINED__ */


#ifndef __Editor_INTERFACE_DEFINED__
#define __Editor_INTERFACE_DEFINED__

/* interface Editor */
/* [object][oleautomation][nonextensible][dual][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_Editor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DD947D72-F33C-4198-9BDF-F86181D05E41")
    Editor : public IDispatch
    {
    public:
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Range( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NextRange( 
            /* [retval][out] */ Range **prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ Application	**prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Creator( 
            /* [retval][out] */ long *prop) = 0;
        
        virtual /* [helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **prop) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteAll( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectAll( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EditorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Editor * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Editor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Editor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Editor * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Editor * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Editor * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Editor * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            Editor * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Editor * This,
            /* [retval][out] */ BSTR *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Range )( 
            Editor * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NextRange )( 
            Editor * This,
            /* [retval][out] */ Range **prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Editor * This,
            /* [retval][out] */ Application	**prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Creator )( 
            Editor * This,
            /* [retval][out] */ long *prop);
        
        /* [helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Editor * This,
            /* [retval][out] */ IDispatch **prop);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Editor * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteAll )( 
            Editor * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectAll )( 
            Editor * This);
        
        END_INTERFACE
    } EditorVtbl;

    interface Editor
    {
        CONST_VTBL struct EditorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Editor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define Editor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define Editor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define Editor_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define Editor_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define Editor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define Editor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define Editor_get_ID(This,prop)	\
    ( (This)->lpVtbl -> get_ID(This,prop) ) 

#define Editor_get_Name(This,prop)	\
    ( (This)->lpVtbl -> get_Name(This,prop) ) 

#define Editor_get_Range(This,prop)	\
    ( (This)->lpVtbl -> get_Range(This,prop) ) 

#define Editor_get_NextRange(This,prop)	\
    ( (This)->lpVtbl -> get_NextRange(This,prop) ) 

#define Editor_get_Application(This,prop)	\
    ( (This)->lpVtbl -> get_Application(This,prop) ) 

#define Editor_get_Creator(This,prop)	\
    ( (This)->lpVtbl -> get_Creator(This,prop) ) 

#define Editor_get_Parent(This,prop)	\
    ( (This)->lpVtbl -> get_Parent(This,prop) ) 

#define Editor_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define Editor_DeleteAll(This)	\
    ( (This)->lpVtbl -> DeleteAll(This) ) 

#define Editor_SelectAll(This)	\
    ( (This)->lpVtbl -> SelectAll(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __Editor_INTERFACE_DEFINED__ */


#ifndef __IApplicationEvents4_INTERFACE_DEFINED__
#define __IApplicationEvents4_INTERFACE_DEFINED__

/* interface IApplicationEvents4 */
/* [object][oleautomation][nonextensible][dual][hidden][helpcontext][version][uuid] */ 


EXTERN_C const IID IID_IApplicationEvents4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00020A01-0001-0000-C000-000000000046")
    IApplicationEvents4 : public IDispatch
    {
    public:
        virtual /* [hidden][restricted][id] */ HRESULT STDMETHODCALLTYPE Startup( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE Quit( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentChange( void) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentOpen( 
            /* [in] */ Document	*Doc) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentBeforeClose( 
            /* [in] */ Document	*Doc,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentBeforePrint( 
            /* [in] */ Document	*Doc,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentBeforeSave( 
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *SaveAsUI,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewDocument( 
            /* [in] */ Document	*Doc) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowActivate( 
            /* [in] */ Document	*Doc,
            /* [in] */ Window *Wn) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowDeactivate( 
            /* [in] */ Document	*Doc,
            /* [in] */ Window *Wn) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowSelectionChange( 
            /* [in] */ Selection *Sel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowBeforeRightClick( 
            /* [in] */ Selection *Sel,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowBeforeDoubleClick( 
            /* [in] */ Selection *Sel,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EPostagePropertyDialog( 
            /* [in] */ Document	*Doc) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EPostageInsert( 
            /* [in] */ Document	*Doc) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MailMergeAfterMerge( 
            /* [in] */ Document	*Doc,
            /* [in] */ Document	*DocResult) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MailMergeAfterRecordMerge( 
            /* [in] */ Document	*Doc) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MailMergeBeforeMerge( 
            /* [in] */ Document	*Doc,
            /* [in] */ long StartRecord,
            /* [in] */ long EndRecord,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MailMergeBeforeRecordMerge( 
            /* [in] */ Document	*Doc,
            /* [out][in] */ VARIANT_BOOL *Cancel) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MailMergeDataSourceLoad( 
            /* [in] */ Document	*Doc) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MailMergeDataSourceValidate( 
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *Handled) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MailMergeWizardSendToCustom( 
            /* [in] */ Document	*Doc) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE MailMergeWizardStateChange( 
            /* [in] */ Document	*Doc,
            /* [in] */ int *FromState,
            /* [in] */ int *ToState,
            /* [in] */ VARIANT_BOOL *Handled) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowSize( 
            /* [in] */ Document	*Doc,
            /* [in] */ Window *Wn) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE XMLSelectionChange( 
            /* [in] */ Selection *Sel,
            /* [in] */ XMLNode *OldXMLNode,
            /* [in] */ XMLNode *NewXMLNode,
            /* [in] */ long *Reason) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE XMLValidationError( 
            /* [in] */ XMLNode *XMLNode) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE DocumentSync( 
            /* [in] */ Document	*Doc,
            /* [in] */ MsoSyncEventType SyncEventType) = 0;
        
        virtual /* [helpcontext][id] */ HRESULT STDMETHODCALLTYPE EPostageInsertEx( 
            /* [in] */ Document	*Doc,
            /* [in] */ int cpDeliveryAddrStart,
            /* [in] */ int cpDeliveryAddrEnd,
            /* [in] */ int cpReturnAddrStart,
            /* [in] */ int cpReturnAddrEnd,
            /* [in] */ int xaWidth,
            /* [in] */ int yaHeight,
            /* [in] */ BSTR bstrPrinterName,
            /* [in] */ BSTR bstrPaperFeed,
            /* [in] */ VARIANT_BOOL fPrint,
            /* [out][in] */ VARIANT_BOOL *fCancel) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IApplicationEvents4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IApplicationEvents4 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IApplicationEvents4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IApplicationEvents4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IApplicationEvents4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IApplicationEvents4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IApplicationEvents4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IApplicationEvents4 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *Startup )( 
            IApplicationEvents4 * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Quit )( 
            IApplicationEvents4 * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentChange )( 
            IApplicationEvents4 * This);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentOpen )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentBeforeClose )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentBeforePrint )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentBeforeSave )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *SaveAsUI,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewDocument )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowActivate )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ Window *Wn);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowDeactivate )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ Window *Wn);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowSelectionChange )( 
            IApplicationEvents4 * This,
            /* [in] */ Selection *Sel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowBeforeRightClick )( 
            IApplicationEvents4 * This,
            /* [in] */ Selection *Sel,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowBeforeDoubleClick )( 
            IApplicationEvents4 * This,
            /* [in] */ Selection *Sel,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EPostagePropertyDialog )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EPostageInsert )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MailMergeAfterMerge )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ Document	*DocResult);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MailMergeAfterRecordMerge )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MailMergeBeforeMerge )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ long StartRecord,
            /* [in] */ long EndRecord,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MailMergeBeforeRecordMerge )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc,
            /* [out][in] */ VARIANT_BOOL *Cancel);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MailMergeDataSourceLoad )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MailMergeDataSourceValidate )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ VARIANT_BOOL *Handled);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MailMergeWizardSendToCustom )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MailMergeWizardStateChange )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ int *FromState,
            /* [in] */ int *ToState,
            /* [in] */ VARIANT_BOOL *Handled);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WindowSize )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ Window *Wn);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *XMLSelectionChange )( 
            IApplicationEvents4 * This,
            /* [in] */ Selection *Sel,
            /* [in] */ XMLNode *OldXMLNode,
            /* [in] */ XMLNode *NewXMLNode,
            /* [in] */ long *Reason);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *XMLValidationError )( 
            IApplicationEvents4 * This,
            /* [in] */ XMLNode *XMLNode);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DocumentSync )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ MsoSyncEventType SyncEventType);
        
        /* [helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EPostageInsertEx )( 
            IApplicationEvents4 * This,
            /* [in] */ Document	*Doc,
            /* [in] */ int cpDeliveryAddrStart,
            /* [in] */ int cpDeliveryAddrEnd,
            /* [in] */ int cpReturnAddrStart,
            /* [in] */ int cpReturnAddrEnd,
            /* [in] */ int xaWidth,
            /* [in] */ int yaHeight,
            /* [in] */ BSTR bstrPrinterName,
            /* [in] */ BSTR bstrPaperFeed,
            /* [in] */ VARIANT_BOOL fPrint,
            /* [out][in] */ VARIANT_BOOL *fCancel);
        
        END_INTERFACE
    } IApplicationEvents4Vtbl;

    interface IApplicationEvents4
    {
        CONST_VTBL struct IApplicationEvents4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IApplicationEvents4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IApplicationEvents4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IApplicationEvents4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IApplicationEvents4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IApplicationEvents4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IApplicationEvents4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IApplicationEvents4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IApplicationEvents4_Startup(This)	\
    ( (This)->lpVtbl -> Startup(This) ) 

#define IApplicationEvents4_Quit(This)	\
    ( (This)->lpVtbl -> Quit(This) ) 

#define IApplicationEvents4_DocumentChange(This)	\
    ( (This)->lpVtbl -> DocumentChange(This) ) 

#define IApplicationEvents4_DocumentOpen(This,Doc)	\
    ( (This)->lpVtbl -> DocumentOpen(This,Doc) ) 

#define IApplicationEvents4_DocumentBeforeClose(This,Doc,Cancel)	\
    ( (This)->lpVtbl -> DocumentBeforeClose(This,Doc,Cancel) ) 

#define IApplicationEvents4_DocumentBeforePrint(This,Doc,Cancel)	\
    ( (This)->lpVtbl -> DocumentBeforePrint(This,Doc,Cancel) ) 

#define IApplicationEvents4_DocumentBeforeSave(This,Doc,SaveAsUI,Cancel)	\
    ( (This)->lpVtbl -> DocumentBeforeSave(This,Doc,SaveAsUI,Cancel) ) 

#define IApplicationEvents4_NewDocument(This,Doc)	\
    ( (This)->lpVtbl -> NewDocument(This,Doc) ) 

#define IApplicationEvents4_WindowActivate(This,Doc,Wn)	\
    ( (This)->lpVtbl -> WindowActivate(This,Doc,Wn) ) 

#define IApplicationEvents4_WindowDeactivate(This,Doc,Wn)	\
    ( (This)->lpVtbl -> WindowDeactivate(This,Doc,Wn) ) 

#define IApplicationEvents4_WindowSelectionChange(This,Sel)	\
    ( (This)->lpVtbl -> WindowSelectionChange(This,Sel) ) 

#define IApplicationEvents4_WindowBeforeRightClick(This,Sel,Cancel)	\
    ( (This)->lpVtbl -> WindowBeforeRightClick(This,Sel,Cancel) ) 

#define IApplicationEvents4_WindowBeforeDoubleClick(This,Sel,Cancel)	\
    ( (This)->lpVtbl -> WindowBeforeDoubleClick(This,Sel,Cancel) ) 

#define IApplicationEvents4_EPostagePropertyDialog(This,Doc)	\
    ( (This)->lpVtbl -> EPostagePropertyDialog(This,Doc) ) 

#define IApplicationEvents4_EPostageInsert(This,Doc)	\
    ( (This)->lpVtbl -> EPostageInsert(This,Doc) ) 

#define IApplicationEvents4_MailMergeAfterMerge(This,Doc,DocResult)	\
    ( (This)->lpVtbl -> MailMergeAfterMerge(This,Doc,DocResult) ) 

#define IApplicationEvents4_MailMergeAfterRecordMerge(This,Doc)	\
    ( (This)->lpVtbl -> MailMergeAfterRecordMerge(This,Doc) ) 

#define IApplicationEvents4_MailMergeBeforeMerge(This,Doc,StartRecord,EndRecord,Cancel)	\
    ( (This)->lpVtbl -> MailMergeBeforeMerge(This,Doc,StartRecord,EndRecord,Cancel) ) 

#define IApplicationEvents4_MailMergeBeforeRecordMerge(This,Doc,Cancel)	\
    ( (This)->lpVtbl -> MailMergeBeforeRecordMerge(This,Doc,Cancel) ) 

#define IApplicationEvents4_MailMergeDataSourceLoad(This,Doc)	\
    ( (This)->lpVtbl -> MailMergeDataSourceLoad(This,Doc) ) 

#define IApplicationEvents4_MailMergeDataSourceValidate(This,Doc,Handled)	\
    ( (This)->lpVtbl -> MailMergeDataSourceValidate(This,Doc,Handled) ) 

#define IApplicationEvents4_MailMergeWizardSendToCustom(This,Doc)	\
    ( (This)->lpVtbl -> MailMergeWizardSendToCustom(This,Doc) ) 

#define IApplicationEvents4_MailMergeWizardStateChange(This,Doc,FromState,ToState,Handled)	\
    ( (This)->lpVtbl -> MailMergeWizardStateChange(This,Doc,FromState,ToState,Handled) ) 

#define IApplicationEvents4_WindowSize(This,Doc,Wn)	\
    ( (This)->lpVtbl -> WindowSize(This,Doc,Wn) ) 

#define IApplicationEvents4_XMLSelectionChange(This,Sel,OldXMLNode,NewXMLNode,Reason)	\
    ( (This)->lpVtbl -> XMLSelectionChange(This,Sel,OldXMLNode,NewXMLNode,Reason) ) 

#define IApplicationEvents4_XMLValidationError(This,XMLNode)	\
    ( (This)->lpVtbl -> XMLValidationError(This,XMLNode) ) 

#define IApplicationEvents4_DocumentSync(This,Doc,SyncEventType)	\
    ( (This)->lpVtbl -> DocumentSync(This,Doc,SyncEventType) ) 

#define IApplicationEvents4_EPostageInsertEx(This,Doc,cpDeliveryAddrStart,cpDeliveryAddrEnd,cpReturnAddrStart,cpReturnAddrEnd,xaWidth,yaHeight,bstrPrinterName,bstrPaperFeed,fPrint,fCancel)	\
    ( (This)->lpVtbl -> EPostageInsertEx(This,Doc,cpDeliveryAddrStart,cpDeliveryAddrEnd,cpReturnAddrStart,cpReturnAddrEnd,xaWidth,yaHeight,bstrPrinterName,bstrPaperFeed,fPrint,fCancel) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IApplicationEvents4_INTERFACE_DEFINED__ */


#ifndef __ApplicationEvents4_DISPINTERFACE_DEFINED__
#define __ApplicationEvents4_DISPINTERFACE_DEFINED__

/* dispinterface ApplicationEvents4 */
/* [hidden][helpcontext][uuid] */ 


EXTERN_C const IID DIID_ApplicationEvents4;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("00020A01-0000-0000-C000-000000000046")
    ApplicationEvents4 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct ApplicationEvents4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ApplicationEvents4 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ApplicationEvents4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ApplicationEvents4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ApplicationEvents4 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ApplicationEvents4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ApplicationEvents4 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ApplicationEvents4 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } ApplicationEvents4Vtbl;

    interface ApplicationEvents4
    {
        CONST_VTBL struct ApplicationEvents4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ApplicationEvents4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ApplicationEvents4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ApplicationEvents4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ApplicationEvents4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ApplicationEvents4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ApplicationEvents4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ApplicationEvents4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __ApplicationEvents4_DISPINTERFACE_DEFINED__ */


#ifndef __DocumentEvents2_DISPINTERFACE_DEFINED__
#define __DocumentEvents2_DISPINTERFACE_DEFINED__

/* dispinterface DocumentEvents2 */
/* [hidden][helpcontext][uuid] */ 


EXTERN_C const IID DIID_DocumentEvents2;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("00020A02-0000-0000-C000-000000000046")
    DocumentEvents2 : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DocumentEvents2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            DocumentEvents2 * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            DocumentEvents2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            DocumentEvents2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            DocumentEvents2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            DocumentEvents2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            DocumentEvents2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [range][in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DocumentEvents2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DocumentEvents2Vtbl;

    interface DocumentEvents2
    {
        CONST_VTBL struct DocumentEvents2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DocumentEvents2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DocumentEvents2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DocumentEvents2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DocumentEvents2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DocumentEvents2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DocumentEvents2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DocumentEvents2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DocumentEvents2_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_Global;

#ifdef __cplusplus

class DECLSPEC_UUID("000209F0-0000-0000-C000-000000000046")
Global;
#endif

EXTERN_C const CLSID CLSID_Application;

#ifdef __cplusplus

class DECLSPEC_UUID("000209FF-0000-0000-C000-000000000046")
Application;
#endif

EXTERN_C const CLSID CLSID_Document;

#ifdef __cplusplus

class DECLSPEC_UUID("00020906-0000-0000-C000-000000000046")
Document;
#endif

EXTERN_C const CLSID CLSID_Font;

#ifdef __cplusplus

class DECLSPEC_UUID("000209F5-0000-0000-C000-000000000046")
Font;
#endif

EXTERN_C const CLSID CLSID_ParagraphFormat;

#ifdef __cplusplus

class DECLSPEC_UUID("000209F4-0000-0000-C000-000000000046")
ParagraphFormat;
#endif

EXTERN_C const CLSID CLSID_OLEControl;

#ifdef __cplusplus

class DECLSPEC_UUID("000209F2-0000-0000-C000-000000000046")
OLEControl;
#endif

EXTERN_C const CLSID CLSID_LetterContent;

#ifdef __cplusplus

class DECLSPEC_UUID("000209F1-0000-0000-C000-000000000046")
LetterContent;
#endif
#endif /* __Word_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif


