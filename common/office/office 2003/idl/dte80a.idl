// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: dte80a.olb

[
  uuid(80CC9F66-E7D8-4DDD-85B6-D9E6CD0E93E2),
  version(8.0),
  helpstring("Microsoft Development Environment 8.0 (Version 7.0 Object Model)")
]
library EnvDTE
{
    // TLib :     // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    interface _DTE;
    interface Windows;
    interface Window;
    interface LinkedWindows;
    interface ProjectItem;
    interface ProjectItems;
    interface Project;
    interface Projects;
    interface Properties;
    interface Property;
    interface ConfigurationManager;
    interface Configuration;
    interface OutputGroups;
    interface OutputGroup;
    interface Configurations;
    interface Globals;
    interface CodeModel;
    interface CodeElements;
    interface CodeElement;
    interface TextPoint;
    interface TextDocument;
    interface Document;
    interface Documents;
    interface TextSelection;
    interface VirtualPoint;
    interface TextRanges;
    interface TextRange;
    interface EditPoint;
    interface TextPane;
    interface TextPanes;
    interface TextWindow;
    interface CodeType;
    interface CodeNamespace;
    interface CodeClass;
    interface CodeAttribute;
    interface CodeInterface;
    interface CodeFunction;
    interface CodeTypeRef;
    interface CodeParameter;
    interface CodeProperty;
    interface CodeVariable;
    interface CodeStruct;
    interface CodeEnum;
    interface CodeDelegate;
    interface FileCodeModel;
    interface ContextAttributes;
    interface ContextAttribute;
    interface AddIn;
    interface AddIns;
    interface Events;
    interface _CommandEvents;
    dispinterface _dispCommandEvents;
    interface _SelectionEvents;
    dispinterface _dispSelectionEvents;
    interface _SolutionEvents;
    dispinterface _dispSolutionEvents;
    interface _BuildEvents;
    dispinterface _dispBuildEvents;
    interface _WindowEvents;
    dispinterface _dispWindowEvents;
    interface _OutputWindowEvents;
    dispinterface _dispOutputWindowEvents;
    interface OutputWindowPane;
    interface OutputWindowPanes;
    interface OutputWindow;
    interface _FindEvents;
    dispinterface _dispFindEvents;
    interface _TaskListEvents;
    dispinterface _dispTaskListEvents;
    interface TaskItem;
    interface TaskItems;
    interface TaskList;
    interface _DTEEvents;
    dispinterface _dispDTEEvents;
    interface _DocumentEvents;
    dispinterface _dispDocumentEvents;
    interface _ProjectItemsEvents;
    dispinterface _dispProjectItemsEvents;
    interface _DebuggerEvents;
    dispinterface _dispDebuggerEvents;
    interface Process;
    interface Programs;
    interface Program;
    interface Threads;
    interface Thread;
    interface StackFrames;
    interface StackFrame;
    interface Expressions;
    interface Expression;
    interface Debugger;
    interface Breakpoints;
    interface Breakpoint;
    interface Languages;
    interface Language;
    interface Processes;
    interface _TextEditorEvents;
    dispinterface _dispTextEditorEvents;
    interface _Solution;
    interface SolutionBuild;
    interface SolutionConfiguration;
    interface SolutionConfigurations;
    interface SolutionContexts;
    interface SolutionContext;
    interface BuildDependencies;
    interface BuildDependency;
    interface Commands;
    interface Command;
    interface SelectedItems;
    interface SelectedItem;
    interface SelectionContainer;
    interface WindowConfigurations;
    interface WindowConfiguration;
    interface StatusBar;
    interface ObjectExtenders;
    interface IExtenderProvider;
    interface IExtenderSite;
    interface IExtenderProviderUnk;
    interface Find;
    interface ItemOperations;
    interface UndoContext;
    interface Macros;
    interface SourceControl;
    interface TextBuffer;
    interface ISupportVSProperties;
    interface ToolBox;
    interface ToolBoxTab;
    interface ToolBoxTabs;
    interface ToolBoxItems;
    interface ToolBoxItem;
    interface IExtensibleObjectSite;
    interface IVsProfferCommands;
    interface IFilterProperties;
    interface UIHierarchyItem;
    interface UIHierarchyItems;
    interface UIHierarchy;
    interface TextEditor;
    interface _DebuggerEventsRoot;
    interface IDTWizard;
    interface IVsExtensibility;
    interface IVsGlobalsCallback;
    interface IVsGlobals;
    interface IDTCommandTarget;
    interface CommandWindow;
    interface _ProjectsEvents;
    dispinterface _dispProjectsEvents;
    interface _MiscSlnFilesEventsRoot;
    interface _CommandBarControlEvents;
    dispinterface _dispCommandBarControlEvents;
    interface _DocumentEventsRoot;
    interface _TextEditorEventsRoot;
    interface _WindowEventsRoot;
    interface _OutputWindowEventsRoot;
    interface _TaskListEventsRoot;
    interface IDTToolsOptionsPage;
    interface _EnvironmentWebBrowser;
    interface _EnvironmentHelp;
    interface ColorableItems;
    interface FontsAndColorsItems;
    interface _FontsAndColors;
    interface _EnvironmentGeneral;
    interface _EnvironmentFontsAndColors;
    interface _EnvironmentProjectsAndSolution;
    interface _EnvironmentDocuments;
    interface _EnvironmentTaskList;
    interface _EnvironmentKeyboard;
    interface IExtensibleObject;
    interface IVsTextEditGeneral;
    interface IVsTextEditPerLanguage;
    interface IVsTextEditFonts;
    interface HTMLWindow;

	typedef [uuid(CD678662-7939-48A0-BF1D-FA1BED56C130), helpstring("Enumeration describing how a window is displayed."), helpcontext(0x0000ee08)]
    enum {
        vsWindowStateNormal = 0,
        vsWindowStateMinimize = 1,
        vsWindowStateMaximize = 2
    } vsWindowState;

    typedef [uuid(705CD8A9-D29B-11D2-AABD-00C04F688DDE), helpstring("Enumeration describing the type of a window."), helpcontext(0x0000ee07)]
    enum {
        vsWindowTypeCodeWindow = 0,
        vsWindowTypeDesigner = 1,
        vsWindowTypeBrowser = 2,
        vsWindowTypeWatch = 3,
        vsWindowTypeLocals = 4,
        vsWindowTypeImmediate = 5,
        vsWindowTypeSolutionExplorer = 6,
        vsWindowTypeProperties = 7,
        vsWindowTypeFind = 8,
        vsWindowTypeFindReplace = 9,
        vsWindowTypeToolbox = 10,
        vsWindowTypeLinkedWindowFrame = 11,
        vsWindowTypeMainWindow = 12,
        vsWindowTypePreview = 13,
        vsWindowTypeColorPalette = 14,
        vsWindowTypeToolWindow = 15,
        vsWindowTypeDocument = 16,
        vsWindowTypeOutput = 17,
        vsWindowTypeTaskList = 18,
        vsWindowTypeAutos = 19,
        vsWindowTypeCallStack = 20,
        vsWindowTypeThreads = 21,
        vsWindowTypeDocumentOutline = 22,
        vsWindowTypeRunningDocuments = 23
    } vsWindowType;

	typedef [uuid(612256BD-7BA2-45C4-B60F-7B2AE42F96C3), helpstring("Enumeration describing what type of object a configuration maps onto."), helpcontext(0x0000ee15)]
    enum {
        vsConfigurationTypeProject = 1,
        vsConfigurationTypeProjectItem = 2
    } vsConfigurationType;

	typedef enum {
        vsCMElementOther = 0,
        vsCMElementClass = 1,
        vsCMElementFunction = 2,
        vsCMElementVariable = 3,
        vsCMElementProperty = 4,
        vsCMElementNamespace = 5,
        vsCMElementParameter = 6,
        vsCMElementAttribute = 7,
        vsCMElementInterface = 8,
        vsCMElementDelegate = 9,
        vsCMElementEnum = 10,
        vsCMElementStruct = 11,
        vsCMElementUnion = 12,
        vsCMElementLocalDeclStmt = 13,
        vsCMElementFunctionInvokeStmt = 14,
        vsCMElementPropertySetStmt = 15,
        vsCMElementAssignmentStmt = 16,
        vsCMElementInheritsStmt = 17,
        vsCMElementImplementsStmt = 18,
        vsCMElementOptionStmt = 19,
        vsCMElementVBAttributeStmt = 20,
        vsCMElementVBAttributeGroup = 21,
        vsCMElementEventsDeclaration = 22,
        vsCMElementUDTDecl = 23,
        vsCMElementDeclareDecl = 24,
        vsCMElementDefineStmt = 25,
        vsCMElementTypeDef = 26,
        vsCMElementIncludeStmt = 27,
        vsCMElementUsingStmt = 28,
        vsCMElementMacro = 29,
        vsCMElementMap = 30,
        vsCMElementIDLImport = 31,
        vsCMElementIDLImportLib = 32,
        vsCMElementIDLCoClass = 33,
        vsCMElementIDLLibrary = 34,
        vsCMElementImportStmt = 35,
        vsCMElementMapEntry = 36,
        vsCMElementVCBase = 37,
        vsCMElementEvent = 38,
        vsCMElementModule = 39
    } vsCMElement;

    typedef enum {
        vsCMInfoLocationProject = 1,
        vsCMInfoLocationExternal = 2,
        vsCMInfoLocationNone = 4,
        vsCMInfoLocationVirtual = 8
    } vsCMInfoLocation;

	typedef [uuid(AAE3FAE8-8AFC-11D2-ADEE-00C04F7971C3), helpstring("Enumeration describing how to save an item or items."), helpcontext(0x0000ee02)]
    enum {
        vsSaveChangesYes = 1,
        vsSaveChangesNo = 2,
        vsSaveChangesPrompt = 3
    } vsSaveChanges;

    typedef [uuid(8901FF7A-E6E8-4154-A505-135EE434817E), helpstring("Enumeration describing the result from saving an item."), helpcontext(0x0000ee03)]
    enum {
        vsSaveCancelled = 2,
        vsSaveSucceeded = 1
    } vsSaveStatus;

	typedef [uuid(98A2F403-007B-41F8-9A18-87ADDEF1760F)]
    enum {
        vsCaseOptionsLowercase = 1,
        vsCaseOptionsUppercase = 2,
        vsCaseOptionsCapitalize = 3
    } vsCaseOptions;

    typedef [uuid(BBDFCFE4-4C68-4736-B991-F85FA955D585)]
    enum {
        vsWhitespaceOptionsHorizontal = 0,
        vsWhitespaceOptionsVertical = 1
    } vsWhitespaceOptions;

    typedef [uuid(F05EA427-01BA-46DC-8392-FB4AA7E5EB3A)]
    enum {
        vsStartOfLineOptionsFirstColumn = 0,
        vsStartOfLineOptionsFirstText = 1
    } vsStartOfLineOptions;

	typedef [uuid(B26AC3C2-3981-4A2E-9D6F-559B41CD1CD2)]
    enum {
        vsPaneShowCentered = 0,
        vsPaneShowTop = 1,
        vsPaneShowAsIs = 2
    } vsPaneShowHow;

    typedef [uuid(F3128012-B41F-46EC-8794-F716DB9697D0)]
    enum {
        vsSelectionModeStream = 0,
        vsSelectionModeBox = 1
    } vsSelectionMode;

    typedef enum {
        vsCMPartName = 1,
        vsCMPartAttributes = 2,
        vsCMPartHeader = 4,
        vsCMPartWhole = 8,
        vsCMPartBody = 16,
        vsCMPartNavigate = 32,
        vsCMPartAttributesWithDelimiter = 68,
        vsCMPartBodyWithDelimiter = 80,
        vsCMPartHeaderWithAttributes = 6,
        vsCMPartWholeWithAttributes = 10
    } vsCMPart;

	typedef enum {
        vsCMAccessPublic = 1,
        vsCMAccessPrivate = 2,
        vsCMAccessProject = 4,
        vsCMAccessProtected = 8,
        vsCMAccessDefault = 32,
        vsCMAccessAssemblyOrFamily = 64,
        vsCMAccessWithEvents = 128,
        vsCMAccessProjectOrProtected = 12
    } vsCMAccess;

	typedef enum {
        vsCMFunctionOther = 0,
        vsCMFunctionConstructor = 1,
        vsCMFunctionPropertyGet = 2,
        vsCMFunctionPropertyLet = 4,
        vsCMFunctionPropertySet = 8,
        vsCMFunctionPutRef = 16,
        vsCMFunctionPropertyAssign = 32,
        vsCMFunctionSub = 64,
        vsCMFunctionFunction = 128,
        vsCMFunctionTopLevel = 256,
        vsCMFunctionDestructor = 512,
        vsCMFunctionOperator = 1024,
        vsCMFunctionVirtual = 2048,
        vsCMFunctionPure = 4096,
        vsCMFunctionConstant = 8192,
        vsCMFunctionShared = 16384,
        vsCMFunctionInline = 32768,
        vsCMFunctionComMethod = 0x00010000
    } vsCMFunction;

	typedef enum {
        vsCMTypeRefOther = 0,
        vsCMTypeRefCodeType = 1,
        vsCMTypeRefArray = 2,
        vsCMTypeRefVoid = 3,
        vsCMTypeRefPointer = 4,
        vsCMTypeRefString = 5,
        vsCMTypeRefObject = 6,
        vsCMTypeRefByte = 7,
        vsCMTypeRefChar = 8,
        vsCMTypeRefShort = 9,
        vsCMTypeRefInt = 10,
        vsCMTypeRefLong = 11,
        vsCMTypeRefFloat = 12,
        vsCMTypeRefDouble = 13,
        vsCMTypeRefDecimal = 14,
        vsCMTypeRefBool = 15,
        vsCMTypeRefVariant = 16
    } vsCMTypeRef;

	typedef [uuid(410202E1-B83A-41DD-AAB0-8C0029FE9435), helpstring("Enumeration describing the type of a context attribute."), helpcontext(0x0000ee0b)]
    enum {
        vsContextAttributeFilter = 1,
        vsContextAttributeLookup = 2,
        vsContextAttributeLookupF1 = 3
    } vsContextAttributeType;

    typedef [uuid(59286EDC-D580-4E22-96C9-44D15B6148CC), helpstring("Enumeration describing a context attribute."), helpcontext(0x0000ee0a)]
    enum {
        vsContextAttributesGlobal = 1,
        vsContextAttributesWindow = 2,
        vsContextAttributesHighPriority = 3
    } vsContextAttributes;

	typedef [uuid(539F9C17-DB5F-421D-B02B-07BCF9FAA92F), helpstring("Enumeration describing the state of a linked window."), helpcontext(0x0000ee09)]
    enum {
        vsLinkedWindowTypeDocked = 0,
        vsLinkedWindowTypeVertical = 2,
        vsLinkedWindowTypeHorizontal = 3,
        vsLinkedWindowTypeTabbed = 1
    } vsLinkedWindowType;

	typedef [uuid(FA7FA701-EFAD-4895-A95A-D4ECB383BF7D), helpstring("Enumeration describing what kind of item is being built."), helpcontext(0x0000ee05)]
    enum {
        vsBuildScopeSolution = 1,
        vsBuildScopeBatch = 2,
        vsBuildScopeProject = 3
    } vsBuildScope;

    typedef [uuid(FA7FA702-EFAD-4895-A95A-D4ECB383BF7D), helpstring("Enumeration describing what type of building is being performed."), helpcontext(0x0000ee06)]
    enum {
        vsBuildActionBuild = 1,
        vsBuildActionRebuildAll = 2,
        vsBuildActionClean = 3,
        vsBuildActionDeploy = 4
    } vsBuildAction;

	typedef [uuid(36B56DE8-5A17-11D1-B2B6-00C04FB6C6FF), helpstring("Enumeration describing the importance of a task item."), helpcontext(0x0000ee0c)]
    enum {
        vsTaskPriorityLow = 1,
        vsTaskPriorityMedium = 2,
        vsTaskPriorityHigh = 3
    } vsTaskPriority;

    typedef [uuid(195DAB2E-4854-11D2-8820-00C04FB6C6FF), helpstring("Enumeration describing the built-in icon to display for a task item."), helpcontext(0x0000ee0d)]
    enum {
        vsTaskIconNone = 0,
        vsTaskIconCompile = 1,
        vsTaskIconSquiggle = 2,
        vsTaskIconComment = 3,
        vsTaskIconShortcut = 4,
        vsTaskIconUser = 5
    } vsTaskIcon;

	typedef [uuid(6FA137BE-32A8-4F54-8099-60BB955097A3), helpstring("Enumeration describing what the result of searching was."), helpcontext(0x0000ee17)]
    enum {
        vsFindResultNotFound = 0,
        vsFindResultFound = 1,
        vsFindResultReplaceAndNotFound = 2,
        vsFindResultReplaceAndFound = 3,
        vsFindResultReplaced = 4,
        vsFindResultPending = 5,
        vsFindResultError = 6
    } vsFindResult;

	typedef [uuid(9848C17E-6AA5-11D2-97C3-00C04FB6C6FF), helpstring("Enumeration describing the columns in the task list."), helpcontext(0x0000ee0e)]
    enum {
        vsTaskListColumnPriority = 1,
        vsTaskListColumnGlyph = 2,
        vsTaskListColumnCheck = 4,
        vsTaskListColumnDescription = 8,
        vsTaskListColumnFile = 16,
        vsTaskListColumnLine = 32
    } vsTaskListColumn;

	typedef [uuid(B638B3E3-C98B-4F59-9D05-105A620529F9), helpstring("Enumeration describing the mode that the IDE is in."), helpcontext(0x0000edfa)]
    enum {
        vsIDEModeDesign = 1,
        vsIDEModeDebug = 2
    } vsIDEMode;

	typedef [uuid(4106C580-C146-11D2-8AD1-00C04F79E479), helpstring("A reason is supplied with most debugging events."), helpcontext(0x0000ed22)]
    enum {
        dbgEventReasonNone = 1,
        dbgEventReasonGo = 2,
        dbgEventReasonAttachProgram = 3,
        dbgEventReasonDetachProgram = 4,
        dbgEventReasonLaunchProgram = 5,
        dbgEventReasonEndProgram = 6,
        dbgEventReasonStopDebugging = 7,
        dbgEventReasonStep = 8,
        dbgEventReasonBreakpoint = 9,
        dbgEventReasonExceptionThrown = 10,
        dbgEventReasonExceptionNotHandled = 11,
        dbgEventReasonUserBreak = 12,
        dbgEventReasonContextSwitch = 13
    } dbgEventReason;

    typedef [uuid(77940E85-BCE0-443D-8B77-F5BD841A211E), helpstring("Describes actions that the debugger performs that executes the debuggee in some fashion."), helpcontext(0x0000ed23)]
    enum {
        dbgExecutionActionDefault = 1,
        dbgExecutionActionGo = 2,
        dbgExecutionActionStopDebugging = 3,
        dbgExecutionActionStepInto = 4,
        dbgExecutionActionStepOut = 5,
        dbgExecutionActionStepOver = 6,
        dbgExecutionActionRunToCursor = 7
    } dbgExecutionAction;

    typedef [uuid(ED2FBDD2-1EB1-11D3-B888-00C04F79E479), helpstring("Used by an exception handler to indicate how the exception should be handled, once the handler is done with it."), helpcontext(0x0000ed1f)]
    enum {
        dbgExceptionActionDefault = 1,
        dbgExceptionActionIgnore = 2,
        dbgExceptionActionBreak = 3,
        dbgExceptionActionContinue = 4
    } dbgExceptionAction;

	typedef [uuid(75607DDE-2B43-11D3-B88B-00C04F79E479), helpstring("Breakpoint Type: group, pending, bound, etc."), helpcontext(0x0000ed1c)]
    enum {
        dbgBreakpointTypePending = 1,
        dbgBreakpointTypeBound = 2
    } dbgBreakpointType;

    typedef [uuid(229C054C-C146-11D2-8AD1-00C04F79E479), helpstring("Breakpoint Location Type: function, file, data, etc."), helpcontext(0x0000ed1d)]
    enum {
        dbgBreakpointLocationTypeNone = 1,
        dbgBreakpointLocationTypeFunction = 2,
        dbgBreakpointLocationTypeFile = 3,
        dbgBreakpointLocationTypeData = 4,
        dbgBreakpointLocationTypeAddress = 5
    } dbgBreakpointLocationType;

    typedef [uuid(2A594772-C146-11D2-8AD1-00C04F79E479), helpstring("For conditional breakpoints to indicate breaking when the condition has changed, or when it becomes true."), helpcontext(0x0000ed1e)]
    enum {
        dbgBreakpointConditionTypeWhenTrue = 1,
        dbgBreakpointConditionTypeWhenChanged = 2
    } dbgBreakpointConditionType;

    typedef [uuid(3A3329CE-C146-11D2-8AD1-00C04F79E479), helpstring("For breakpoints with hit counts, specifies how the number of hits should be interpreted."), helpcontext(0x0000ed20)]
    enum {
        dbgHitCountTypeNone = 1,
        dbgHitCountTypeEqual = 2,
        dbgHitCountTypeGreaterOrEqual = 3,
        dbgHitCountTypeMultiple = 4
    } dbgHitCountType;

	typedef [uuid(E940C60A-C68F-11D2-8AD6-00C04F79E479), helpstring("The current state of the debugger within the IDE."), helpcontext(0x0000ed21)]
    enum {
        dbgDesignMode = 1,
        dbgBreakMode = 2,
        dbgRunMode = 3
    } dbgDebugMode;

	
    typedef [uuid(E0E643C3-5410-487A-B64E-2664A5C4AB50), helpstring("Enumeration describing the current user interface state of the IDE."), helpcontext(0x0000ee01)]
    enum {
        vsDisplayMDI = 1,
        vsDisplayMDITabs = 2
    } vsDisplay;

	typedef [uuid(16386F0E-4AD2-41B8-8D6F-7FF230AE1D17), helpstring("Enumeration describing the current state of the build engine."), helpcontext(0x0000ee14)]
    enum {
        vsBuildStateNotStarted = 1,
        vsBuildStateInProgress = 2,
        vsBuildStateDone = 3
    } vsBuildState;

	typedef [uuid(79946991-1AE2-4D2D-9768-FD7801BE7DAA), helpstring("Enumeration describing which type of command bar item to create."), helpcontext(0x0000edf9)]
    enum {
        vsCommandBarTypePopup = 10,
        vsCommandBarTypeToolbar = 23,
        vsCommandBarTypeMenu = 24
    } vsCommandBarType;

	typedef [uuid(9FB64132-726A-4262-829E-051C6EC7B24F), helpstring("Enumeration describing what type of find operation to perform."), helpcontext(0x0000ee16)]
    enum {
        vsFindActionFind = 1,
        vsFindActionFindAll = 2,
        vsFindActionReplace = 3,
        vsFindActionReplaceAll = 4,
        vsFindActionBookmarkAll = 5
    } vsFindAction;

    typedef [uuid(530F2D0E-A5F9-4B7A-A379-0A3B99B5E66D), helpstring("Enumeration describing how the tokens in a search specification is to be interpreted."), helpcontext(0x0000ee18)]
    enum {
        vsFindPatternSyntaxLiteral = 0,
        vsFindPatternSyntaxRegExpr = 1,
        vsFindPatternSyntaxWildcards = 2
    } vsFindPatternSyntax;

    typedef [uuid(481899FB-B657-4E45-8C00-0E051052BB13), helpstring("Enumeration specifying where to search."), helpcontext(0x0000ee19)]
    enum {
        vsFindTargetCurrentDocument = 1,
        vsFindTargetCurrentDocumentSelection = 2,
        vsFindTargetCurrentDocumentFunction = 3,
        vsFindTargetOpenDocuments = 4,
        vsFindTargetCurrentProject = 5,
        vsFindTargetSolution = 6,
        vsFindTargetFiles = 7
    } vsFindTarget;

    typedef [uuid(EA9142BF-B2AF-48A7-B256-93CCD3350BD8), helpstring("Enumeration specifying where to place the results of a search."), helpcontext(0x0000ee1a)]
    enum {
        vsFindResultsNone = 0,
        vsFindResults1 = 1,
        vsFindResults2 = 2
    } vsFindResultsLocation;

    typedef [uuid(D920605A-11DD-4A12-A8DC-10578BB08606), helpstring("Enumeration describing the status of running a wizard."), helpcontext(0x0000edfb)]
    enum {
        wizardResultSuccess = 0xffffffff,
        wizardResultFailure = 0,
        wizardResultCancel = 1,
        wizardResultBackOut = 2
    } wizardResult;

	typedef [uuid(B4CC3E73-0038-47E5-BA52-D1183F8FDBF0), helpstring("Enumeration describing in which window should be displayed."), helpcontext(0x0000ee1c)]
    enum {
        vsNavigateOptionsDefault = 0,
        vsNavigateOptionsNewWindow = 1
    } vsNavigateOptions;

    typedef [uuid(CA3EE5D0-6305-422F-A425-99737956088F), helpstring("Enumeration describing the result of showing a dialog."), helpcontext(0x0000edfd)]
    enum {
        vsPromptResultYes = 1,
        vsPromptResultNo = 2,
        vsPromptResultCancelled = 3
    } vsPromptResult;

	typedef [uuid(44DF8FDC-7378-11D2-97CA-00C04FB6C6FF), helpstring("Enumeration describing the type of data stored on the tool box."), helpcontext(0x0000ee10)]
    enum {
        vsToolBoxItemFormatText = 1,
        vsToolBoxItemFormatHTML = 2,
        vsToolBoxItemFormatGUID = 4,
        vsToolBoxItemFormatDotNETComponent = 8
    } vsToolBoxItemFormat;

	typedef [uuid(221AB797-408B-4D69-9DD1-C6F329189414), helpstring("Enumeration describing if a property should be shown."), helpcontext(0x0000ee1d)]
    enum {
        vsFilterPropertiesNone = 0,
        vsFilterPropertiesAll = 1,
        vsFilterPropertiesSet = 2
    } vsFilterProperties;

	typedef [uuid(28362492-B1E3-4998-94C6-0A2CDB5484ED), helpstring("Enum specifying what kind of select operation to perform."), helpcontext(0x0000ee2b)]
    enum {
        vsUISelectionTypeSelect = 1,
        vsUISelectionTypeToggle = 2,
        vsUISelectionTypeExtend = 3,
        vsUISelectionTypeSetCaret = 4
    } vsUISelectionType;

	typedef [uuid(ED1A3F98-4477-11D3-89BF-00C04F688DDE)]
    enum {
        vsCMPrototypeFullname = 1,
        vsCMPrototypeNoName = 2,
        vsCMPrototypeClassName = 4,
        vsCMPrototypeParamTypes = 8,
        vsCMPrototypeParamNames = 16,
        vsCMPrototypeParamDefaultValues = 32,
        vsCMPrototypeUniqueSignature = 64,
        vsCMPrototypeType = 128,
        vsCMPrototypeInitExpression = 256
    } vsCMPrototype;

	typedef [uuid(178C767A-1963-4BC5-B3F2-E70F3EB441A8), helpstring("Enumeration describing how to navigate a web browser window."), helpcontext(0x0000edf7)]
    enum {
        vsNavigateBrowserDefault = 0,
        vsNavigateBrowserHelp = 1,
        vsNavigateBrowserNewWindow = 2
    } vsNavigateBrowser;

    typedef [uuid(947978F5-185B-4366-921E-A14C0ED46702), helpstring("Enumeration describing how to show a command within the user interface."), helpcontext(0x0000edf8)]
    enum {
        vsCommandDisabledFlagsEnabled = 0,
        vsCommandDisabledFlagsGrey = 16,
        vsCommandDisabledFlagsHidden = 32
    } vsCommandDisabledFlags;

    typedef [uuid(9E3C8489-AE44-4FCF-9697-CD3F312BA08C)]
    enum {
        vsInitializeModeStartup = 0,
        vsInitializeModeReset = 1
    } vsInitializeMode;

	typedef [uuid(D9E97957-B425-4CD6-BB74-9E6F232A342A), helpstring("Enumeration describing the text required from a command."), helpcontext(0x0000edfe)]
    enum {
        vsCommandStatusTextWantedNone = 0,
        vsCommandStatusTextWantedName = 1,
        vsCommandStatusTextWantedStatus = 2
    } vsCommandStatusTextWanted;

    typedef [uuid(E0ACE2E3-49C1-4AA3-AC03-A2877A93D77F), helpstring("Enumeration describing the state of a command."), helpcontext(0x0000edff)]
    enum {
        vsCommandStatusUnsupported = 0,
        vsCommandStatusSupported = 1,
        vsCommandStatusEnabled = 2,
        vsCommandStatusLatched = 4,
        vsCommandStatusNinched = 8,
        vsCommandStatusInvisible = 16
    } vsCommandStatus;

	typedef [uuid(3C537E1A-39B8-4FDA-9F22-93D8C030865D), helpstring("Enumeration describing how to execute a command."), helpcontext(0x0000ee00)]
    enum {
        vsCommandExecOptionDoDefault = 0,
        vsCommandExecOptionPromptUser = 1,
        vsCommandExecOptionDoPromptUser = 2,
        vsCommandExecOptionShowHelp = 3
    } vsCommandExecOption;

	typedef [uuid(3982FA28-7BCC-4F14-817C-93EEECE8BEEE), helpstring("Enumeration describing what kind of build would be performed on an item."), helpcontext(0x0000ee04)]
    enum {
        vsBuildKindSolution = 0,
        vsBuildKindProject = 1,
        vsBuildKindProjectItem = 2
    } vsBuildKind;

	typedef [uuid(11F0CB7F-4F63-4E09-B99C-92A6CC5F84CE)]
    enum {
        vsTextChangedMultiLine = 1,
        vsTextChangedSave = 2,
        vsTextChangedCaretMoved = 4,
        vsTextChangedReplaceAll = 8,
        vsTextChangedNewline = 16,
        vsTextChangedFindStarting = 32
    } vsTextChanged;

	typedef [uuid(F40A5D39-FD39-4F03-8358-4DF3C338B448), helpstring("Enumeration describing the available built-in animations to display in the status bar."), helpcontext(0x0000ee0f)]
    enum {
        vsStatusAnimationGeneral = 0,
        vsStatusAnimationPrint = 1,
        vsStatusAnimationSave = 2,
        vsStatusAnimationDeploy = 3,
        vsStatusAnimationSync = 4,
        vsStatusAnimationBuild = 5,
        vsStatusAnimationFind = 6
    } vsStatusAnimation;

	typedef [uuid(705CD8AC-D29B-11D2-AABD-00C04F688DDE), helpstring("Enumeration describing what should be displayed upon starting the IDE."), helpcontext(0x0000ee11)]
    enum {
        vsStartUpShowHomePage = 0,
        vsStartUpLoadLastSolution = 1,
        vsStartUpOpenProjectDialog = 2,
        vsStartUpNewProjectDialog = 3,
        vsStartUpEmptyEnvironment = 4
    } vsStartUp;

    typedef [uuid(705CD8A4-D29B-11D2-AABD-00C04F688DDE), helpstring("Enumeration describing what character set to use when displaying items in the IDE."), helpcontext(0x0000ee12)]
    enum {
        vsFontCharSetANSI = 0,
        vsFontCharSetDefault = 1,
        vsFontCharSetSymbol = 2,
        vsFontCharSetShiftJIS = 128,
        vsFontCharSetHangeul = 129,
        vsFontCharSetGB2312 = 134,
        vsFontCharSetChineseBig5 = 136,
        vsFontCharSetOEM = 255,
        vsFontCharSetJohab = 130,
        vsFontCharSetHebrew = 177,
        vsFontCharSetArabic = 178,
        vsFontCharSetGreek = 161,
        vsFontCharSetTurkish = 162,
        vsFontCharSetVietnamese = 163,
        vsFontCharSetThai = 222,
        vsFontCharSetEastEurope = 238,
        vsFontCharSetRussian = 204,
        vsFontCharSetMac = 77,
        vsFontCharSetBaltic = 186
    } vsFontCharSet;

    typedef [uuid(947FFC03-8314-4288-BDD7-DFD282DA40D5), helpstring("Enumeration describing where to show the sources of a web browser window."), helpcontext(0x0000ee13)]
    enum {
        vsBrowserViewSourceSource = 1,
        vsBrowserViewSourceDesign = 2,
        vsBrowserViewSourceExternal = 3
    } vsBrowserViewSource;

	typedef [uuid(A457303F-D058-4415-A2B4-A81B148C7689), helpstring("Enumeration specifying how a search is to be done."), helpcontext(0x0000ee1b)]
    enum {
        vsFindOptionsNone = 0,
        vsFindOptionsMatchWholeWord = 2,
        vsFindOptionsMatchCase = 4,
        vsFindOptionsRegularExpression = 8,
        vsFindOptionsBackwards = 128,
        vsFindOptionsFromStart = 256,
        vsFindOptionsMatchInHiddenText = 512,
        vsFindOptionsWildcards = 1024,
        vsFindOptionsSearchSubfolders = 4096,
        vsFindOptionsKeepModifiedDocumentsOpen = 8192
    } vsFindOptions;

    typedef [uuid(29182BD4-48A8-4E4B-81DD-1B742A3A5203)]
    enum {
        vsMovementOptionsMove = 0,
        vsMovementOptionsExtend = 1
    } vsMovementOptions;

    typedef [uuid(11B63A24-6200-48CD-9B8D-FC6A6FB9EFF0)]
    enum {
        vsGoToLineOptionsLast = 0xffffffff,
        vsGoToLineOptionsFirst = 0xfffffffe
    } vsGoToLineOptions;

    typedef [uuid(C512DDE3-A220-4373-8950-E6636F8CC546)]
    enum {
        vsSmartFormatOptionsNone = 0,
        vsSmartFormatOptionsBlock = 1,
        vsSmartFormatOptionsSmart = 2
    } vsSmartFormatOptions;

    typedef [uuid(79515B53-8294-4F96-AA96-DD16BF126703)]
    enum {
        vsInsertFlagsCollapseToEnd = 1,
        vsInsertFlagsCollapseToStart = 2,
        vsInsertFlagsContainNewText = 4,
        vsInsertFlagsInsertAtEnd = 8,
        vsInsertFlagsInsertAtStart = 16
    } vsInsertFlags;

    typedef [uuid(4EB2C04F-8A83-4363-81DB-DBB76CD76812)]
    enum {
        vsMoveToColumnLineFirst = 0,
        vsMoveToColumnLineLast = 1
    } vsMoveToColumnLine;

    typedef [uuid(3740DCF8-B8B2-49A9-A1AB-944C84876C3C)]
    enum {
        vsEPReplaceTextKeepMarkers = 1,
        vsEPReplaceTextNormalizeNewlines = 2,
        vsEPReplaceTextTabsSpaces = 4,
        vsEPReplaceTextAutoformat = 8
    } vsEPReplaceTextOptions;

	typedef [uuid(BCCEBE05-D29C-11D2-AABD-00C04F688DDE), public]
    _vsIndentStyle vsIndentStyle;

    typedef enum {
        vsIndentStyleNone = 0,
        vsIndentStyleDefault = 1,
        vsIndentStyleSmart = 2
    } _vsIndentStyle;

	typedef [uuid(C106C8DC-6D0C-11D1-B2C9-00C04FB6C6FF)]
    enum {
        vsext_fontcs_ANSI = 0,
        vsext_fontcs_DEFAULT = 1,
        vsext_fontcs_SYMBOL = 2,
        vsext_fontcs_SHIFTJIS = 128,
        vsext_fontcs_HANGEUL = 129,
        vsext_fontcs_GB2312 = 134,
        vsext_fontcs_CHINESEBIG5 = 136,
        vsext_fontcs_OEM = 255,
        vsext_fontcs_JOHAB = 130,
        vsext_fontcs_HEBREW = 177,
        vsext_fontcs_ARABIC = 178,
        vsext_fontcs_GREEK = 161,
        vsext_fontcs_TURKISH = 162,
        vsext_fontcs_VIETNAMESE = 163,
        vsext_fontcs_THAI = 222,
        vsext_fontcs_EASTEUROPE = 238,
        vsext_fontcs_RUSSIAN = 204,
        vsext_fontcs_MAC = 77,
        vsext_fontcs_BALTIC = 186
    } vsext_FontCharSet;

    typedef [uuid(CB0066FC-C052-4B24-84E7-045F33E4D6AF), public]
    VSEXECRESULT vs_exec_Result;

    typedef enum {
        RESULT_Success = 0xffffffff,
        RESULT_Failure = 0,
        RESULT_Cancel = 1
    } VSEXECRESULT;

    typedef [uuid(91AAB9C3-DA83-473A-8BC9-1A2730865995)]
    enum {
        vsext_dm_SDI = 0,
        vsext_dm_MDI = 1
    } vsext_DisplayMode;

    typedef [uuid(E4B9E990-FD59-11D0-BBC6-00A0C90F2744)]
    enum {
        vsext_wt_CodeWindow = 0,
        vsext_wt_Designer = 1,
        vsext_wt_Browser = 2,
        vsext_wt_Watch = 3,
        vsext_wt_Locals = 4,
        vsext_wt_Immediate = 5,
        vsext_wt_ProjectWindow = 6,
        vsext_wt_PropertyWindow = 7,
        vsext_wt_Find = 8,
        vsext_wt_FindReplace = 9,
        vsext_wt_Toolbox = 10,
        vsext_wt_LinkedWindowFrame = 11,
        vsext_wt_MainWindow = 12,
        vsext_wt_Preview = 13,
        vsext_wt_ColorPalette = 14,
        vsext_wt_ToolWindow = 15,
        vsext_wt_Document = 16,
        vsext_wt_OutPutWindow = 17,
        vsext_wt_TaskList = 18,
        vsext_wt_Autos = 19,
        vsext_wt_CallStack = 20,
        vsext_wt_Threads = 21,
        vsext_wt_DocumentOutline = 22,
        vsext_wt_RunningDocuments = 23
    } vsext_WindowType;

    typedef [uuid(E0C72E51-6B99-489B-ACA6-90CEDCE888E7)]
    enum {
        vsext_ws_Normal = 0,
        vsext_ws_Minimize = 1,
        vsext_ws_Maximize = 2
    } vsext_WindowState;

    typedef [uuid(97653ACF-D869-4EC0-B450-E9842457C729)]
    enum {
        vsext_lwt_Docked = 0,
        vsext_lwt_Tabbed = 1
    } vsext_LinkedWindowType;

    typedef [uuid(A5578594-18E0-11D1-BBDB-00A0C90F2744)]
    enum {
        vsext_su_EMPTY_ENVIRONMENT = 0,
        vsext_su_NEW_SOLUTION_DIALOG = 1,
        vsext_su_LOAD_LAST_SOLUTION = 2
    } vsext_StartUp;

    typedef [uuid(47046891-19F7-11D1-BCAF-000000000000)]
    enum {
        vsext_bld_SAVE_CHANGES = 0,
        vsext_bld_CONFIRM_SAVE = 1,
        vsext_bld_NO_SAVE = 2
    } vsext_Build;

    typedef [uuid(BDBE10AA-74D3-498A-A464-8074CD5E99CB)]
    enum {
        dsMatchWord = 2,
        dsMatchCase = 4,
        dsMatchNoRegExp = 0,
        dsMatchRegExp = 8,
        dsMatchRegExpB = 16,
        dsMatchRegExpE = 32,
        dsMatchRegExpCur = 64,
        dsMatchForward = 0,
        dsMatchBackward = 128,
        dsMatchFromStart = 256
    } DsTextSearchOptions;

    typedef [uuid(99744EC4-7A72-11D2-ADC9-00C04F7971C3)]
    enum {
        dsSaveChangesYes = 1,
        dsSaveChangesNo = 2,
        dsSaveChangesPrompt = 3
    } DsSaveChanges;

    typedef [uuid(6269C78D-5591-40D6-A095-5BAC8BA07478)]
    enum {
        dsLastLine = 0xffffffff
    } DsGoToLineOptions;

    typedef [uuid(95751137-AC07-4C76-A219-4BE5D381985D)]
    enum {
        dsFirstColumn = 0,
        dsFirstText = 1
    } DsStartOfLineOptions;

    typedef [uuid(4B58F807-6F08-4B41-ABAF-B5BCA4869D2C)]
    enum {
        dsMove = 0,
        dsExtend = 1
    } DsMovementOptions;

    typedef [uuid(31445615-BCAE-4BA0-A99C-246BC660CFE8)]
    enum {
        dsHorizontal = 0,
        dsVertical = 1
    } DsWhitespaceOptions;

    typedef [uuid(F7D38518-E803-4462-8FA2-E481642D42FB)]
    enum {
        dsLowercase = 1,
        dsUppercase = 2,
        dsCapitalize = 3
    } DsCaseOptions;

    typedef [uuid(8D78B9A9-A3BE-49D0-AA97-BF7FA46D8EA2)]
    enum {
        dsSaveCancelled = 2,
        dsSaveSucceeded = 1
    } dsSaveStatus;

    typedef [uuid(44160DF5-E305-4D85-B7FE-6B5A1B81B9B0), helpstring("Enumeration describing which view is enabled in a HTML editor."), helpcontext(0x0000ee1e)]
    enum {
        vsHTMLTabsSource = 0,
        vsHTMLTabsDesign = 1
    } vsHTMLTabs;



    [
      odl,
      uuid(04A72314-32E9-48E2-9B87-A63603454F3E),
      helpstring("Root object from which all other objects and collections in environment extensibility are accessed."),
      helpcontext(0x0000ea99),
      dual,
      oleautomation
    ]
    interface _DTE : IDispatch {
        [id(00000000), propget, helpstring("Returns the name of the object."), helpcontext(0x0000edbb)]
        HRESULT Name([out, retval] BSTR* lpbstrReturn);
        [id(0x0000000a), propget, hidden]
        HRESULT FileName([out, retval] BSTR* lpbstrReturn);
        [id(0x00000064), propget, helpstring("Returns the host application's version number as a String."), helpcontext(0x0000eb09)]
        HRESULT Version([out, retval] BSTR* lpbstrReturn);
        [id(0x0000006c), propget, helpstring("Returns reference to development environment's CommandBars object."), helpcontext(0x0000eab3)]
        HRESULT CommandBars([out, retval] IDispatch** ppcbs);
        [id(0x0000006e), propget, helpstring("Returns the Windows collection."), helpcontext(0x0000eb0e)]
        HRESULT Windows([out, retval] Windows** ppwnsVBWindows);
        [id(0x0000006f), propget, helpstring("Returns a reference to the Events object."), helpcontext(0x0000eac3)]
        HRESULT Events([out, retval] Events** ppevtEvents);
        [id(0x000000c8), propget, helpstring("Returns the Add-ins collection, containing all currently available add-ins."), helpcontext(0x0000eaa9)]
        HRESULT AddIns([out, retval] AddIns** lpppAddIns);
        [id(0x000000cc), propget, helpstring("Returns a Window object representing the main environment window."), helpcontext(0x0000eae3)]
        HRESULT MainWindow([out, retval] Window** ppWin);
        [id(0x000000cd), propget, helpstring("Returns the current active window."), helpcontext(0x0000eaa8)]
        HRESULT ActiveWindow([out, retval] Window** ppwinActive);
        [id(0x000000cf), helpstring("Closes the environment."), helpcontext(0x0000ea8a)]
        HRESULT Quit();
        [id(0x000000d0), propget, helpstring("Returns string indicating whether the project is displayed in SDI or MDI mode."), helpcontext(0x0000eabd)]
        HRESULT DisplayMode([out, retval] vsDisplay* lpDispMode);
        [id(0x000000d0), propput, helpstring("Returns string indicating whether the project is displayed in SDI or MDI mode."), helpcontext(0x0000eabd)]
        HRESULT DisplayMode([in] vsDisplay lpDispMode);
        [id(0x000000d1), propget, helpstring("Returns the Solution object."), helpcontext(0x0000eb01)]
        HRESULT Solution([out, retval] _Solution** ppSolution);
        [id(0x000000d2), propget, helpstring("Returns the Commands object."), helpcontext(0x0000eab7)]
        HRESULT Commands([out, retval] Commands** ppCommands);
        [id(0x000000d3), helpstring("Returns an interface or object that can be accessed at run time by name."), helpcontext(0x0000ea7f)]
        HRESULT GetObject(
                        [in] BSTR Name, 
                        [out, retval] IDispatch** ppObject);
        [id(0x000000d4), propget, helpstring("Returns collection object representing all available categories and subcategories of environment-level properties."), helpcontext(0x0000eaf8)]
        HRESULT Properties(
                        BSTR Category, 
                        BSTR Page, 
                        [out, retval] Properties** ppObject);
        [id(0x000000d5), propget, helpstring("Returns a collection containing the items currently selected in the environment."), helpcontext(0x0000eafb)]
        HRESULT SelectedItems([out, retval] SelectedItems** ppSelectedItems);
        [id(0x000000d6), propget, helpstring("Returns a string representing the command-line arguments."), helpcontext(0x0000eab6)]
        HRESULT CommandLineArguments([out, retval] BSTR* lpbstrReturn);
        [id(0x000000d7), hidden, helpstring("Opens a file as though the user invoked a open file command from the UI."), helpcontext(0x0000ea87)]
        HRESULT OpenFile(
                        [in] BSTR ViewKind, 
                        [in] BSTR FileName, 
                        [out, retval] Window** ppWin);
        [id(0x000000d8), propget, hidden, helpstring("Returns True if the file is open in the specified view."), helpcontext(0x0000ea80)]
        HRESULT IsOpenFile(
                        [in] BSTR ViewKind, 
                        [in] BSTR FileName, 
                        [out, retval] VARIANT_BOOL* lpfReturn);
        [id(0x000000d9), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x000000da), propget, helpstring("Returns the ID of the locale in which the environment is running."), helpcontext(0x0000eae2)]
        HRESULT LocaleID([out, retval] long* lpReturn);
        [id(0x000000db), propget, helpstring("Returns the WindowConfigurations collection, representing all window configurations available."), helpcontext(0x0000eb14)]
        HRESULT WindowConfigurations([out, retval] WindowConfigurations** WindowConfigurationsObject);
        [id(0x000000dc), propget, helpstring("Returns the Documents collection, representing all open documents."), helpcontext(0x0000eb15)]
        HRESULT Documents([out, retval] Documents** ppDocuments);
        [id(0x000000dd), propget, helpstring("Returns the current active Document."), helpcontext(0x0000eb16)]
        HRESULT ActiveDocument([out, retval] Document** ppDocument);
        [id(0x000000de), helpstring("Executes a environment command based on it's name."), helpcontext(0x0000eb17)]
        HRESULT ExecuteCommand(
                        [in] BSTR CommandName, 
                        [in, optional, defaultvalue("")] BSTR CommandArgs);
        [id(0x000000df), propget, helpstring("Returns the Globals object for storing persistent data."), helpcontext(0x0000eb18)]
        HRESULT Globals([out, retval] Globals** ppGlobals);
        [id(0x000000e1), propget, helpstring("Returns the StatusBar object, representing the status bar on the main window."), helpcontext(0x0000ebf2)]
        HRESULT StatusBar([out, retval] StatusBar** ppStatusBar);
        [id(0x000000e2), propget, helpstring("Returns the full pathname to the environment executable."), helpcontext(0x0000eac5)]
        HRESULT FullName([out, retval] BSTR* lpbstrReturn);
        [id(0x000000e3), propget, helpstring("Gets/Sets who has control of the program, an Automation Controller or the user."), helpcontext(0x0000ebf3)]
        HRESULT UserControl([out, retval] VARIANT_BOOL* UserControl);
        [id(0x000000e3), propput, helpstring("Gets/Sets who has control of the program, an Automation Controller or the user."), helpcontext(0x0000ebf3)]
        HRESULT UserControl([in] VARIANT_BOOL UserControl);
        [id(0x000000e4), propget, helpstring("Returns the ObjectExtenders object."), helpcontext(0x0000eb61)]
        HRESULT ObjectExtenders([out, retval] ObjectExtenders** ppObjectExtenders);
        [id(0x000000e5), propget, helpstring("Returns the Find object."), helpcontext(0x0000eb6f)]
        HRESULT Find([out, retval] Find** ppFind);
        [id(0x000000e6), propget, helpstring("Gets the mode of the program, design or debug."), helpcontext(0x0000ebf4)]
        HRESULT Mode([out, retval] vsIDEMode* pVal);
        [id(0x000000e8), helpstring("Runs a wizard with the user supplied parameters."), helpcontext(0x0000ebf6)]
        HRESULT LaunchWizard(
                        [in] BSTR VSZFile, 
                        [in] SAFEARRAY(VARIANT)* ContextParams, 
                        [out, retval] wizardResult* pResult);
        [id(0x000000e9), propget, helpstring("Returns the ItemOperations object."), helpcontext(0x0000eb8c)]
        HRESULT ItemOperations([out, retval] ItemOperations** ppItemOperations);
        [id(0x000000eb), propget, helpstring("Returns the UndoContext object."), helpcontext(0x0000ec2d)]
        HRESULT UndoContext([out, retval] UndoContext** ppUndoContext);
        [id(0x000000ec), propget, helpstring("Returns the Macros object."), helpcontext(0x0000ec2e)]
        HRESULT Macros([out, retval] Macros** ppMacros);
        [id(0x000000ed), propget, helpstring("Returns an array of currently selected projects."), helpcontext(0x0000ece8)]
        HRESULT ActiveSolutionProjects([out, retval] VARIANT* pProjects);
        [id(0x000000ee), propget, helpstring("Returns the root extensibility object for the Macros IDE."), helpcontext(0x0000eceb)]
        HRESULT MacrosIDE([out, retval] _DTE** pDTE);
        [id(0x000000ef), propget, helpstring("Returns the location for storing registry information for this application."), helpcontext(0x0000ecf2)]
        HRESULT RegistryRoot([out, retval] BSTR* pVal);
        [id(0x000000f0), propget, hidden]
        HRESULT Application([out, retval] _DTE** pVal);
        [id(0x000000f1), propget, helpstring("Get the global ContextAttributes collection."), helpcontext(0x0000edbc)]
        HRESULT ContextAttributes([out, retval] ContextAttributes** ppVal);
        [id(0x000000f2), propget, helpstring("Returns the SourceControl object for managing file source code control status."), helpcontext(0x0000ed91)]
        HRESULT SourceControl([out, retval] SourceControl** ppVal);
        [id(0x000000f3), propget, helpstring("Enables/Disables certain UI elements when calling automation functions."), helpcontext(0x0000ed92)]
        HRESULT SuppressUI([out, retval] VARIANT_BOOL* pVal);
        [id(0x000000f3), propput, helpstring("Enables/Disables certain UI elements when calling automation functions."), helpcontext(0x0000ed92)]
        HRESULT SuppressUI([in] VARIANT_BOOL pVal);
        [id(0x000000f4), propget, helpstring("Returns the Debugger objects."), helpcontext(0x0000edce)]
        HRESULT Debugger([out, retval] Debugger** ppDebugger);
        [id(0x000000f5), helpstring("Returns the location of a DLL containing localized resources, if available."), helpcontext(0x0000edcf)]
        HRESULT SatelliteDllPath(
                        BSTR Path, 
                        BSTR Name, 
                        [out, retval] BSTR* pFullPath);
        [id(0x000000f6), propget]
        HRESULT Edition([out, retval] BSTR* ProductEdition);
    };

    [
      odl,
      uuid(2294311A-B7BC-4789-B365-1C15FF2CD17C),
      helpstring("Represents window(s) in the development environment."),
      helpcontext(0x0000eaa6),
      dual,
      oleautomation
    ]
    interface Windows : IDispatch {
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] Window** lppcReturn);
        [id(0x000000c9), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* lplReturn);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
        [id(0x0000012c), helpstring("Creates a new tool window containing the indicated ActiveX document or control."), helpcontext(0x0000ea7b)]
        HRESULT CreateToolWindow(
                        [in] AddIn* AddInInst, 
                        [in] BSTR ProgID, 
                        [in] BSTR Caption, 
                        [in] BSTR GuidPosition, 
                        [in, out] IDispatch** DocObj, 
                        [out, retval] Window** lppcReturn);
        [id(0x0000012d), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x0000012e), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] _DTE** lppaReturn);
        [id(0x0000012f), helpstring("Creates a Window object for a linked window frame, and places two windows on it."), helpcontext(0x0000eb52)]
        HRESULT CreateLinkedWindowFrame(
                        [in] Window* Window1, 
                        [in] Window* Window2, 
                        [in] vsLinkedWindowType Link, 
                        [out, retval] Window** LinkedWindowFrame);
    };

    [
      odl,
      uuid(0BEAB46B-4C07-4F94-A8D7-1626020E4E53),
      helpstring("Represents window(s) in the development environment."),
      helpcontext(0x0000eaa6),
      dual,
      oleautomation
    ]
    interface Window : IDispatch {
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] Windows** lppaReturn);
        [id(0x0000006a), propget, helpstring("Sets/returns value determining whether the window is visible."), helpcontext(0x0000eb0c)]
        HRESULT Visible([out, retval] VARIANT_BOOL* pfVisible);
        [id(0x0000006a), propput, helpstring("Sets/returns value determining whether the window is visible."), helpcontext(0x0000eb0c)]
        HRESULT Visible([in] VARIANT_BOOL pfVisible);
        [id(0x00000065), propget, helpstring("Returns/sets distance between internal left/top edge of an object and left/top edge of its container."), helpcontext(0x0000eade)]
        HRESULT Left([out, retval] long* plLeft);
        [id(0x00000065), propput, helpstring("Returns/sets distance between internal left/top edge of an object and left/top edge of its container."), helpcontext(0x0000eade)]
        HRESULT Left([in] long plLeft);
        [id(0x00000067), propget, helpstring("Returns/sets distance between internal left/top edge of an object and left/top edge of its container."), helpcontext(0x0000eade)]
        HRESULT Top([out, retval] long* plTop);
        [id(0x00000067), propput, helpstring("Returns/sets distance between internal left/top edge of an object and left/top edge of its container."), helpcontext(0x0000eade)]
        HRESULT Top([in] long plTop);
        [id(0x00000069), propget, helpstring("Sets/returns a Single value indicating the dimensions of the window in pixels."), helpcontext(0x0000ead2)]
        HRESULT Width([out, retval] long* plWidth);
        [id(0x00000069), propput, helpstring("Sets/returns a Single value indicating the dimensions of the window in pixels."), helpcontext(0x0000ead2)]
        HRESULT Width([in] long plWidth);
        [id(0x0000006b), propget, helpstring("Sets/returns a Single value indicating the dimensions of the window in pixels."), helpcontext(0x0000ead2)]
        HRESULT Height([out, retval] long* plHeight);
        [id(0x0000006b), propput, helpstring("Sets/returns a Single value indicating the dimensions of the window in pixels."), helpcontext(0x0000ead2)]
        HRESULT Height([in] long plHeight);
        [id(0x0000006d), propget, helpstring("Sets/returns string determining the state of the window."), helpcontext(0x0000eb0f)]
        HRESULT WindowState([out, retval] vsWindowState* plWindowState);
        [id(0x0000006d), propput, helpstring("Sets/returns string determining the state of the window."), helpcontext(0x0000eb0f)]
        HRESULT WindowState([in] vsWindowState plWindowState);
        [id(0x0000006f), hidden, helpstring("Moves the focus to the specified window."), helpcontext(0x0000ea91)]
        HRESULT SetFocus();
        [id(0x00000070), propget, hidden, helpstring("Returns an enumerated string indicating the object type."), helpcontext(0x0000eb05)]
        HRESULT Type([out, retval] vsWindowType* pKind);
        [id(0x00000071), restricted, hidden]
        HRESULT SetKind([in] vsWindowType eKind);
        [id(0x00000074), propget, helpstring("Returns a LinkedWindows collection."), helpcontext(0x0000eae1)]
        HRESULT LinkedWindows([out, retval] LinkedWindows** ppwnsCollection);
        [id(0x00000075), propget, helpstring("Returns Window object representing window frame containing window."), helpcontext(0x0000eae0)]
        HRESULT LinkedWindowFrame([out, retval] Window** ppwinFrame);
        [id(0x00000076), restricted, hidden]
        HRESULT Detach();
        [id(0x00000077), restricted, hidden]
        HRESULT Attach([in] long lWindowHandle);
        [id(0x00000078), propget, hidden]
        HRESULT HWnd([out, retval] long* plWindowHandle);
        [id(0x00000079), propget, helpstring("Returns a GUID String indicating the kind or type of the object."), helpcontext(0x0000eadd)]
        HRESULT Kind([out, retval] BSTR* pbstrType);
        [id(0x0000007a), propget, helpstring("Returns the type of the Window.Object object, a GUID string representing the tool contained in the window."), helpcontext(0x0000eaeb)]
        HRESULT ObjectKind([out, retval] BSTR* pbstrTypeGUID);
        [id(0x0000007b), propget, helpstring("Returns the extensibility object for the tool represented by the window."), helpcontext(0x0000eaee)]
        HRESULT Object([out, retval] IDispatch** ppToolObject);
        [id(0x0000007c), propget, hidden, helpstring("Returns an OLE automation object that models the data in the document."), helpcontext(0x0000eabe)]
        HRESULT DocumentData(
                        [in, optional, defaultvalue("")] BSTR bstrWhichData, 
                        [out, retval] IDispatch** ppDataObject);
        [id(0x0000007d), propget, helpstring("Returns the ProjectItem object associated with the window."), helpcontext(0x0000eaf5)]
        HRESULT ProjectItem([out, retval] ProjectItem** ppProjItem);
        [id(0x0000007e), propget, helpstring("Returns the Project object associated with the object the Project property was invoked on."), helpcontext(0x0000eaf7)]
        HRESULT Project([out, retval] Project** ppProj);
        [id(0x0000007f), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x00000080), propget, helpstring("Returns the document this window displays."), helpcontext(0x0000eb2b)]
        HRESULT Document([out, retval] Document** ppDocument);
        [id(0x00000081), propget, helpstring("Returns an object representing the selection on this object."), helpcontext(0x0000eb25)]
        HRESULT Selection([out, retval] IDispatch** ppDocument);
        [id(0x00000082), propget, helpstring("Gets/Sets if the window can be tab-linked."), helpcontext(0x0000eb2c)]
        HRESULT Linkable([out, retval] VARIANT_BOOL* pLinkable);
        [id(0x00000082), propput, helpstring("Gets/Sets if the window can be tab-linked."), helpcontext(0x0000eb2c)]
        HRESULT Linkable([in] VARIANT_BOOL pLinkable);
        [id(0x00000083), helpstring("Moves the focus to the current item."), helpcontext(0x0000eb1f)]
        HRESULT Activate();
        [id(0x00000084), helpstring("Closes and destroys the window."), helpcontext(0x0000ea7a)]
        HRESULT Close([in, optional, defaultvalue(2)] vsSaveChanges SaveChanges);
        [id(00000000), propget, helpstring("Returns the string displayed in the window's title bar."), helpcontext(0x0000eaae)]
        HRESULT Caption([out, retval] BSTR* pbstrTitle);
        [id(00000000), propput, helpstring("Returns the string displayed in the window's title bar."), helpcontext(0x0000eaae)]
        HRESULT Caption([in] BSTR pbstrTitle);
        [id(0x00000085), helpstring("Allows setting objects to be active in the Properties Window when this window is active."), helpcontext(0x0000ec3c)]
        HRESULT SetSelectionContainer(SAFEARRAY(VARIANT)* Objects);
        [id(0x00000087), propget, helpstring("Gets/Sets if the window is a tool window, unable to be docked."), helpcontext(0x0000ed00)]
        HRESULT IsFloating([out, retval] VARIANT_BOOL* Floating);
        [id(0x00000087), propput, helpstring("Gets/Sets if the window is a tool window, unable to be docked."), helpcontext(0x0000ed00)]
        HRESULT IsFloating([in] VARIANT_BOOL Floating);
        [id(0x00000088), propget, helpstring("Gets/Sets if the window is a hide-able tool window."), helpcontext(0x0000ed01)]
        HRESULT AutoHides([out, retval] VARIANT_BOOL* Hides);
        [id(0x00000088), propput, helpstring("Gets/Sets if the window is a hide-able tool window."), helpcontext(0x0000ed01)]
        HRESULT AutoHides([in] VARIANT_BOOL Hides);
        [id(0x0000008a), helpstring("Sets the picture to display on a tool window."), helpcontext(0x0000ed03)]
        HRESULT SetTabPicture(VARIANT Picture);
        [id(0x0000008b), propget, helpstring("Get the ContextAttributes collection for the window."), helpcontext(0x0000edbd)]
        HRESULT ContextAttributes([out, retval] ContextAttributes** ppVal);
    };

    

    [
      odl,
      uuid(F00EF34A-A654-4C1B-897A-585D5BCBB35A),
      helpstring("Returns the collection of all linked windows contained in a linked window frame."),
      helpcontext(0x0000ea9c),
      dual,
      oleautomation
    ]
    interface LinkedWindows : IDispatch {
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Window** ppptReturn);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] Window** lppcReturn);
        [id(0x000000c9), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* lplReturn);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
        [id(0x000000ca), helpstring("Removes a Window object from the LinkedWindows collection."), helpcontext(0x0000ea8d)]
        HRESULT Remove([in] Window* Window);
        [id(0x000000cb), helpstring("Adds a window to the collection of currently linked windows."), helpcontext(0x0000ea77)]
        HRESULT Add([in] Window* Window);
        [id(0x0000012d), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
    };

    [
      uuid(3C9CFE1E-389F-4118-9FAD-365385190329),
      helpstring("Root object from which all other objects and collections in environment extensibility are accessed."),
      helpcontext(0x0000ea99),
      appobject
    ]
    coclass DTE {
        [default] interface _DTE;
    };

    [
      odl,
      uuid(0B48100A-473E-433C-AB8F-66B9739AB620),
      helpstring("Generic object representing items contained in project/current instance of development environment."),
      helpcontext(0x0000ea9d),
      dual,
      oleautomation
    ]
    interface ProjectItem : IDispatch {
        [id(0x0000000a), propget, hidden, helpstring("Returns value indicating whether object was changed since the last time it was saved."), helpcontext(0x0000eadb)]
        HRESULT IsDirty([out, retval] VARIANT_BOOL* lpfReturn);
        [id(0x0000000a), propput, hidden, helpstring("Returns value indicating whether object was changed since the last time it was saved."), helpcontext(0x0000eadb)]
        HRESULT IsDirty([in] VARIANT_BOOL lpfReturn);
        [id(0x0000000b), propget, helpstring("Returns the full pathnames of the files associated with a project item."), helpcontext(0x0000eac9)]
        HRESULT FileNames(
                        [in] short index, 
                        [out, retval] BSTR* lpbstrReturn);
        [id(0x0000000c), helpstring("Saves the project."), helpcontext(0x0000ea8f)]
        HRESULT SaveAs(
                        [in] BSTR NewFileName, 
                        [out, retval] VARIANT_BOOL* lpfReturn);
        [id(0x0000000d), propget, helpstring("Returns the number of files associated with the project item."), helpcontext(0x0000eac4)]
        HRESULT FileCount([out, retval] short* lpsReturn);
        [id(00000000), propget, helpstring("Sets/returns the name of the project."), helpcontext(0x0000eae9)]
        HRESULT Name([out, retval] BSTR* pbstrReturn);
        [id(00000000), propput, helpstring("Sets/returns the name of the project."), helpcontext(0x0000eae9)]
        HRESULT Name([in] BSTR pbstrReturn);
        [id(0x00000036), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] ProjectItems** lppcReturn);
        [id(0x00000038), propget, helpstring("Returns the Properties collection."), helpcontext(0x0000eaf9)]
        HRESULT Properties([out, retval] Properties** ppObject);
        [id(0x000000c8), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x000000c9), propget, helpstring("Returns a GUID String indicating the kind or type of the object."), helpcontext(0x0000eadd)]
        HRESULT Kind([out, retval] BSTR* lpbstrFileName);
        [id(0x000000cb), propget, helpstring("Returns a ProjectItems collection for the object."), helpcontext(0x0000eaf6)]
        HRESULT ProjectItems([out, retval] ProjectItems** lppcReturn);
        [id(0x000000cc), propget, helpstring("Returns value indicating whether the ProjectItem is open for a particular view."), helpcontext(0x0000eadc)]
        HRESULT IsOpen(
                        [in, optional, defaultvalue("{FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF}")] BSTR ViewKind, 
                        [out, retval] VARIANT_BOOL* lpfReturn);
        [id(0x000000cd), helpstring("Opens the ProjectItem object in the specified view."), helpcontext(0x0000ea88)]
        HRESULT Open(
                        [in, optional, defaultvalue("{00000000-0000-0000-0000-000000000000}")] BSTR ViewKind, 
                        [out, retval] Window** lppfReturn);
        [id(0x000000ce), helpstring("Removes an object from a collection."), helpcontext(0x0000ea8c)]
        HRESULT Remove();
        [id(0x0000006b), helpstring("Expands views of the project structure to show the ProjectItem."), helpcontext(0x0000ea7d)]
        HRESULT ExpandView();
        [id(0x0000006c), propget, helpstring("Returns an interface or object that can be accessed at run time by name."), helpcontext(0x0000ea7f)]
        HRESULT Object([out, retval] IDispatch** ProjectItemModel);
        [id(0x0000006d), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        [in] BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x0000006e), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x0000006f), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x00000071), propget, helpstring("Returns value indicating whether object was changed since the last time it was saved."), helpcontext(0x0000eadb)]
        HRESULT Saved([out, retval] VARIANT_BOOL* lpfReturn);
        [id(0x00000071), propput, helpstring("Returns value indicating whether object was changed since the last time it was saved."), helpcontext(0x0000eadb)]
        HRESULT Saved([in] VARIANT_BOOL lpfReturn);
        [id(0x00000074), propget, helpstring("Returns the ConfigurationManager object for this item."), helpcontext(0x0000ece9)]
        HRESULT ConfigurationManager([out, retval] ConfigurationManager** ppConfigurationManager);
        [id(0x00000075), propget, helpstring("Returns the CodeModel object for this item."), helpcontext(0x0000ecea)]
        HRESULT FileCodeModel([out, retval] FileCodeModel** ppFileCodeModel);
        [id(0x00000076), helpstring("Causes the item to be saved to storage."), helpcontext(0x0000ecfb)]
        HRESULT Save([optional, defaultvalue("")] BSTR FileName);
        [id(0x00000077), propget, helpstring("Returns the Document object for this item."), helpcontext(0x0000ecfc)]
        HRESULT Document([out, retval] Document** ppDocument);
        [id(0x00000078), propget, helpstring("If the project item is the root of a sub-project, then returns the Project object for the sub-project."), helpcontext(0x0000ecfd)]
        HRESULT SubProject([out, retval] Project** ppProject);
        [id(0x00000079), propget, helpstring("Returns the project that hosts this ProjectItem object."), helpcontext(0x0000ed1b)]
        HRESULT ContainingProject([out, retval] Project** ppProject);
        [id(0x0000007a), helpstring("Removes the item from the project and it's storage."), helpcontext(0x0000ecfe)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(8E2F1269-185E-43C7-8899-950AD2769CCF),
      helpstring("Generic object representing items contained in project/current instance of development environment."),
      helpcontext(0x0000ea9d),
      dual,
      oleautomation
    ]
    interface ProjectItems : IDispatch {
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] ProjectItem** lppcReturn);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** lppptReturn);
        [id(0x0000000a), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* lplReturn);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
        [id(0x000000c8), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x000000c9), propget, helpstring("Returns a GUID String indicating the kind or type of the object."), helpcontext(0x0000eadd)]
        HRESULT Kind([out, retval] BSTR* lpbstrFileName);
        [id(0x000000ca), helpstring("Adds a ProjectItem object from a file installed in project directory structure."), helpcontext(0x0000ea70)]
        HRESULT AddFromFile(
                        [in] BSTR FileName, 
                        [out, retval] ProjectItem** lppcReturn);
        [id(0x000000cb), helpstring("Copies indicated file to ProjectItems directory; adds file as member of ProjectItems collection."), helpcontext(0x0000ea74)]
        HRESULT AddFromTemplate(
                        [in] BSTR FileName, 
                        [in] BSTR Name, 
                        [out, retval] ProjectItem** lppcReturn);
        [id(0x000000cc), helpstring("Adds ProjectItem objects/sets ProjectItems properties/returns ProjectItem object representing FileName argument."), helpcontext(0x0000ea6e)]
        HRESULT AddFromDirectory(
                        [in] BSTR Directory, 
                        [out, retval] ProjectItem** lppcReturn);
        [id(0x000000cd), propget, helpstring("Returns the project that hosts this ProjectItems object."), helpcontext(0x0000ecf8)]
        HRESULT ContainingProject([out, retval] Project** ppProject);
        [id(0x000000ce), helpstring("Creates a new ProjectItems object, and a folder within the project user interface."), helpcontext(0x0000ecf9)]
        HRESULT AddFolder(
                        BSTR Name, 
                        [optional, defaultvalue("{6BB5F8EF-4483-11D3-8BCF-00C04F8EC28C}")] BSTR Kind, 
                        [out, retval] ProjectItem** pProjectItem);
        [id(0x000000cf), helpstring("Copies a source file, and adds it to the project."), helpcontext(0x0000ecfa)]
        HRESULT AddFromFileCopy(
                        BSTR FilePath, 
                        [out, retval] ProjectItem** pProjectItem);
    };

    [
      odl,
      uuid(866311E6-C887-4143-9833-645F5B93F6F1),
      helpstring("Generic object used to represent projects."),
      helpcontext(0x0000ea9e),
      dual,
      oleautomation
    ]
    interface Project : IDispatch {
        [id(00000000), propget, helpstring("Sets/returns the name of the project."), helpcontext(0x0000eae9)]
        HRESULT Name([out, retval] BSTR* lpbstrName);
        [id(00000000), propput, helpstring("Sets/returns the name of the project."), helpcontext(0x0000eae9)]
        HRESULT Name([in] BSTR lpbstrName);
        [id(0x0000006d), propget, hidden, helpstring("Returns full pathname indicating the location of the project file."), helpcontext(0x0000eac7)]
        HRESULT FileName([out, retval] BSTR* lpbstrReturn);
        [id(0x0000006e), propget, hidden, helpstring("Returns value indicating whether object was changed since the last time it was saved."), helpcontext(0x0000eadb)]
        HRESULT IsDirty([out, retval] VARIANT_BOOL* lpfReturn);
        [id(0x0000006e), propput, hidden, helpstring("Returns value indicating whether object was changed since the last time it was saved."), helpcontext(0x0000eadb)]
        HRESULT IsDirty([in] VARIANT_BOOL lpfReturn);
        [id(0x0000007b), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] Projects** lppaReturn);
        [id(0x0000007f), helpstring("Saves the project."), helpcontext(0x0000ea8f)]
        HRESULT SaveAs([in] BSTR NewFileName);
        [id(0x000000c8), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x000000c9), propget, helpstring("Returns a GUID String indicating the kind or type of the object."), helpcontext(0x0000eadd)]
        HRESULT Kind([out, retval] BSTR* lpbstrFileName);
        [id(0x000000ca), propget, helpstring("Returns a ProjectItems collection for the object."), helpcontext(0x0000eaf6)]
        HRESULT ProjectItems([out, retval] ProjectItems** lppcReturn);
        [id(0x000000cb), propget, helpstring("Returns the Properties collection."), helpcontext(0x0000eaf9)]
        HRESULT Properties([out, retval] Properties** ppObject);
        [id(0x000000cc), propget, helpstring("Returns name of project as relative pathname from directory containing solution file leading to project file."), helpcontext(0x0000eb07)]
        HRESULT UniqueName([out, retval] BSTR* lpbstrFileName);
        [id(0x000000cd), propget, helpstring("Returns an interface or object that can be accessed at run time by name."), helpcontext(0x0000ea7f)]
        HRESULT Object([out, retval] IDispatch** ProjectModel);
        [id(0x000000ce), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        [in] BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x000000cf), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x000000d0), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x000000d1), propget, helpstring("Returns full pathname indicating the location of the project file."), helpcontext(0x0000eac7)]
        HRESULT FullName([out, retval] BSTR* lpbstrReturn);
        [id(0x000000d2), propget, helpstring("Returns value indicating whether object was changed since the last time it was saved."), helpcontext(0x0000eadb)]
        HRESULT Saved([out, retval] VARIANT_BOOL* lpfReturn);
        [id(0x000000d2), propput, helpstring("Returns value indicating whether object was changed since the last time it was saved."), helpcontext(0x0000eadb)]
        HRESULT Saved([in] VARIANT_BOOL lpfReturn);
        [id(0x000000d5), propget, helpstring("Returns the ConfigurationManager object for this item."), helpcontext(0x0000ece9)]
        HRESULT ConfigurationManager([out, retval] ConfigurationManager** ppConfigurationManager);
        [id(0x000000d6), propget, helpstring("Returns the Globals object for storing persistent data."), helpcontext(0x0000eb18)]
        HRESULT Globals([out, retval] Globals** ppGlobals);
        [id(0x000000d7), helpstring("Causes the project to persist it's self to storage."), helpcontext(0x0000ecf4)]
        HRESULT Save([optional, defaultvalue("")] BSTR FileName);
        [id(0x000000d8), propget, helpstring("Returns the ProjectItem object for the nested project in the host project."), helpcontext(0x0000ecf5)]
        HRESULT ParentProjectItem([out, retval] ProjectItem** ppParentProjectItem);
        [id(0x000000d9), propget, helpstring("Returns the CodeModel, if available, for this project."), helpcontext(0x0000ecf6)]
        HRESULT CodeModel([out, retval] CodeModel** ppCodeModel);
        [id(0x000000da), helpstring("Removes the project from storage."), helpcontext(0x0000ecf7)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(E3EC0ADD-31B3-461F-8303-8A5E6931257A),
      helpstring("Generic object used to represent projects."),
      helpcontext(0x0000ea9e),
      dual,
      oleautomation
    ]
    interface Projects : IDispatch {
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] Project** lppcReturn);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] _DTE** lppaReturn);
        [id(0x0000000a), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* lplReturn);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
        [id(0x000000c8), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x000000c9), propget, helpstring("Returns the Properties collection."), helpcontext(0x0000eaf9)]
        HRESULT Properties([out, retval] Properties** ppObject);
        [id(0x000000ca), propget, helpstring("Returns a GUID String indicating the kind or type of the object."), helpcontext(0x0000eadd)]
        HRESULT Kind([out, retval] BSTR* lpbstrReturn);
    };

    [
      odl,
      uuid(4CC8CCF5-A926-4646-B17F-B4940CAED472),
      helpstring("Generic object representing property of another object/containing all currently available Property objects."),
      helpcontext(0x0000ea9f),
      dual,
      oleautomation
    ]
    interface Properties : IDispatch {
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] Property** lplppReturn);
        [id(0x00000001), propget, restricted, hidden]
        HRESULT Application([out, retval] IDispatch** lppidReturn);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** lppidReturn);
        [id(0x00000028), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* lplReturn);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
        [id(0x00000064), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
    };

    [
      odl,
      uuid(7B988E06-2581-485E-9322-04881E0600D0),
      helpstring("Generic object representing property of another object/containing all currently available Property objects."),
      helpcontext(0x0000ea9f),
      dual,
      oleautomation
    ]
    interface Property : IDispatch {
        [id(00000000), propget, helpstring("Sets/ returns the value of property returned by the Property object."), helpcontext(0x0000eb08)]
        HRESULT Value([out, retval] VARIANT* lppvReturn);
        [id(00000000), propput, helpstring("Sets/ returns the value of property returned by the Property object."), helpcontext(0x0000eb08)]
        HRESULT Value([in] VARIANT lppvReturn);
        [id(00000000), propputref, helpstring("Sets/ returns the value of property returned by the Property object."), helpcontext(0x0000eb08)]
        HRESULT Value([in] VARIANT lppvReturn);
        [id(0x00000003), propget, helpstring("Returns one element of a list."), helpcontext(0x0000ead6)]
        HRESULT IndexedValue(
                        [in] VARIANT Index1, 
                        [in, optional] VARIANT Index2, 
                        [in, optional] VARIANT Index3, 
                        [in, optional] VARIANT Index4, 
                        [out, retval] VARIANT* Val);
        [id(0x00000003), propput, helpstring("Returns one element of a list."), helpcontext(0x0000ead6)]
        HRESULT IndexedValue(
                        [in] VARIANT Index1, 
                        [in, optional] VARIANT Index2, 
                        [in, optional] VARIANT Index3, 
                        [in, optional] VARIANT Index4, 
                        [in] VARIANT Val);
        [id(0x00000004), propget, helpstring("Returns a value representing the number of items in the list value."), helpcontext(0x0000eaea)]
        HRESULT NumIndices([out, retval] short* lpiRetVal);
        [id(0x00000001), propget, restricted, hidden]
        HRESULT Application([out, retval] IDispatch** lppidReturn);
        [id(0x00000002), propget, restricted, hidden]
        HRESULT Parent([out, retval] Properties** lpppReturn);
        [id(0x00000028), propget, helpstring("Returns the name of the object."), helpcontext(0x0000edbb)]
        HRESULT Name([out, retval] BSTR* lpbstrReturn);
        [id(0x0000002a), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] Properties** lpppReturn);
        [id(0x0000002d), propget, helpstring("Sets/returns value of Property object when type of value is Object."), helpcontext(0x0000eaed)]
        HRESULT Object([out, retval] IDispatch** lppunk);
        [id(0x0000002d), propputref, helpstring("Sets/returns value of Property object when type of value is Object."), helpcontext(0x0000eaed)]
        HRESULT Object([in] IUnknown* lppunk);
        [id(0x00000064), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
    };

    [
      odl,
      uuid(9043FDA1-345B-4364-900F-BC8598EB8E4F),
      helpstring("Object containing Configuration and Platform objects."),
      helpcontext(0x0000ed8d),
      dual,
      oleautomation
    ]
    interface ConfigurationManager : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enumerator);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [optional, defaultvalue("")] BSTR Platform, 
                        [out, retval] Configuration** ppOut);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* pCount);
        [id(0x00000004), helpstring("Returns a collection of items representing a build configuration and it's platforms."), helpcontext(0x0000eca9)]
        HRESULT ConfigurationRow(
                        BSTR Name, 
                        [out, retval] Configurations** ppOut);
        [id(0x00000005), helpstring("Creates an item representing a build configuration and it's platforms."), helpcontext(0x0000ecaa)]
        HRESULT AddConfigurationRow(
                        BSTR NewName, 
                        BSTR ExistingName, 
                        [in] VARIANT_BOOL Propagate, 
                        [out, retval] Configurations** ppOut);
        [id(0x00000006), helpstring("Deletes an item representing a build configuration and it's platforms."), helpcontext(0x0000ecab)]
        HRESULT DeleteConfigurationRow(BSTR Name);
        [id(0x00000007), propget, helpstring("Returns an array of names of configurations."), helpcontext(0x0000eca8)]
        HRESULT ConfigurationRowNames([out, retval] VARIANT* pNames);
        [id(0x00000008), helpstring("Returns a collection of ConfigurationAssignment object for the specified platform."), helpcontext(0x0000ec3d)]
        HRESULT Platform(
                        BSTR Name, 
                        [out, retval] Configurations** ppOut);
        [id(0x00000009), helpstring("Creates a new platform based off an existing platform."), helpcontext(0x0000ec3e)]
        HRESULT AddPlatform(
                        BSTR NewName, 
                        BSTR ExistingName, 
                        [in] VARIANT_BOOL Propagate, 
                        [out, retval] Configurations** ppOut);
        [id(0x0000000a), helpstring("Removes a unneeded platform."), helpcontext(0x0000ec3f)]
        HRESULT DeletePlatform(BSTR Name);
        [id(0x0000000b), propget, helpstring("Returns a list of all available platforms."), helpcontext(0x0000ec40)]
        HRESULT PlatformNames([out, retval] VARIANT* pNames);
        [id(0x0000000c), propget, helpstring("Returns a list of all platforms currently available for this particular project."), helpcontext(0x0000ec41)]
        HRESULT SupportedPlatforms([out, retval] VARIANT* pPlatforms);
        [id(0x0000000d), propget, helpstring("Returns the currently active configuration."), helpcontext(0x0000ed0f)]
        HRESULT ActiveConfiguration([out, retval] Configuration** ppOut);
    };

    [
      odl,
      uuid(90813589-FE21-4AA4-A2E5-053FD274E980),
      helpstring("Defines a configuration, or build settings, within a platform."),
      helpcontext(0x0000ed8b),
      dual,
      oleautomation
    ]
    interface Configuration : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Collection([out, retval] ConfigurationManager** ppConfigurationManager);
        [id(0x00000003), propget, helpstring("Returns the name of this configuration."), helpcontext(0x0000ec46)]
        HRESULT ConfigurationName([out, retval] BSTR* pName);
        [id(0x00000004), propget, helpstring("Returns the name of the platform supported by this assignment."), helpcontext(0x0000ec47)]
        HRESULT PlatformName([out, retval] BSTR* pName);
        [id(0x00000005), propget, helpstring("Returns an enumeration indicating the object type."), helpcontext(0x0000ec45)]
        HRESULT Type([out, retval] vsConfigurationType* pType);
        [id(0x00000006), propget, helpstring("Returns the owning object for this Configuration."), helpcontext(0x0000ed10)]
        HRESULT Owner([out, retval] IDispatch** ppOwner);
        [id(0x00000007), propget, helpstring("Returns the Properties collection."), helpcontext(0x0000eaf9)]
        HRESULT Properties([out, retval] Properties** ppProperties);
        [id(0x00000008), propget, helpstring("Returns if the configuration can be built."), helpcontext(0x0000ec48)]
        HRESULT IsBuildable([out, retval] VARIANT_BOOL* pBuildable);
        [id(0x00000009), propget, helpstring("Returns if a Configuration can be set into run mode."), helpcontext(0x0000edd1)]
        HRESULT IsRunable([out, retval] VARIANT_BOOL* pRunable);
        [id(0x0000000a), propget, helpstring("Returns if the configuration can be debugged."), helpcontext(0x0000ec4a)]
        HRESULT IsDeployable([out, retval] VARIANT_BOOL* pDeployable);
        [id(0x0000000b), propget, helpstring("Returns an interface or object that can be accessed at run time by name."), helpcontext(0x0000ea7f)]
        HRESULT Object([out, retval] IDispatch** ppDisp);
        [id(0x0000000c), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        [in] BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x0000000d), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x0000000e), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x0000000f), propget, helpstring("Returns an object for discovering the files built by this configuration."), helpcontext(0x0000ed1a)]
        HRESULT OutputGroups([out, retval] OutputGroups** ppOutputGroups);
    };

    

    [
      odl,
      uuid(F9FA748E-E302-44CF-891B-E263189D585E),
      helpstring("Collection of OutputGroup objects."),
      helpcontext(0x0000ed8e),
      dual,
      oleautomation
    ]
    interface OutputGroups : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Configuration** ppConfiguration);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enumerator);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] OutputGroup** ppOut);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* pCount);
    };

    [
      odl,
      uuid(A3A80783-875F-435B-9639-E5CE888DF737),
      helpstring("Object detailing which files are build by the project."),
      helpcontext(0x0000ed8f),
      dual,
      oleautomation
    ]
    interface OutputGroup : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Collection([out, retval] OutputGroups** ppOutputGroups);
        [id(0x00000003), propget, helpstring("Returns the list of files built in this output group."), helpcontext(0x0000ed15)]
        HRESULT FileNames([out, retval] VARIANT* pNames);
        [id(0x00000004), propget, helpstring("Returns the count of files built in this output group."), helpcontext(0x0000ed16)]
        HRESULT FileCount([out, retval] long* pCountNames);
        [id(00000000), propget, helpstring("Returns the name used in the user interface for this output group."), helpcontext(0x0000ed17)]
        HRESULT DisplayName([out, retval] BSTR* pName);
        [id(0x00000005), propget, helpstring("Returns the unique name used for this output group."), helpcontext(0x0000ed18)]
        HRESULT CanonicalName([out, retval] BSTR* pName);
        [id(0x00000006), propget, helpstring("Returns the list of files built in this output group."), helpcontext(0x0000ed15)]
        HRESULT FileURLs([out, retval] VARIANT* pURLs);
        [id(0x00000007), propget, helpstring("Text describing the use of this output group."), helpcontext(0x0000ed94)]
        HRESULT Description([out, retval] BSTR* pDesc);
    };

    [
      odl,
      uuid(B6B4C8D6-4D27-43B9-B45C-52BD16B6BA38),
      helpstring("A collection of Configuration objects."),
      helpcontext(0x0000ed8c),
      dual,
      oleautomation
    ]
    interface Configurations : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enumerator);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] Configuration** ppOut);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* pCount);
        [id(0x00000004), propget, helpstring("Returns the name of the object."), helpcontext(0x0000edbb)]
        HRESULT Name([out, retval] BSTR* pName);
        [id(0x00000005), propget, helpstring("Returns an enumeration indicating the object type."), helpcontext(0x0000ec45)]
        HRESULT Type([out, retval] vsConfigurationType* pType);
    };

    [
      odl,
      uuid(E68A3E0E-B435-4DDE-86B7-F5ADEFC19DF2),
      helpstring("An object used for storing temporary or persistent data."),
      helpcontext(0x0000eb2d),
      dual,
      oleautomation
    ]
    interface Globals : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** pDTE);
        [id(0x00000002), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT Parent([out, retval] IDispatch** pDTE);
        [id(00000000), propget, helpstring("Get/Set the value of a named variable."), helpcontext(0x0000eb2e)]
        HRESULT VariableValue(
                        BSTR VariableName, 
                        [out, retval] VARIANT* pVal);
        [id(00000000), propput, helpstring("Get/Set the value of a named variable."), helpcontext(0x0000eb2e)]
        HRESULT VariableValue(
                        BSTR VariableName, 
                        [in] VARIANT pVal);
        [id(0x00000004), propput, helpstring("Get/Set if a variable is persisted to storage at shutdown, and re-read on startup."), helpcontext(0x0000eb2f)]
        HRESULT VariablePersists(
                        BSTR VariableName, 
                        [in] VARIANT_BOOL pVal);
        [id(0x00000004), propget, helpstring("Get/Set if a variable is persisted to storage at shutdown, and re-read on startup."), helpcontext(0x0000eb2f)]
        HRESULT VariablePersists(
                        BSTR VariableName, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000005), propget, helpstring("Get if a variable with the given name is available for reading."), helpcontext(0x0000eb30)]
        HRESULT VariableExists(
                        BSTR Name, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000006), propget, helpstring("Returns a list of variables."), helpcontext(0x0000ebff)]
        HRESULT VariableNames([out, retval] VARIANT* Names);
    };

    [
      odl,
      uuid(0CFBC2B4-0D4E-11D3-8997-00C04F688DDE),
      helpstring("An object allowing access to programmatic constructs in a source file."),
      helpcontext(0x0000ec7c),
      dual,
      oleautomation
    ]
    interface CodeModel : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Project** pProj);
        [id(0x00000003), propget, helpstring("Programming language used to author the code."), helpcontext(0x0000ec53)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x00000004), propget, helpstring("Returns a collection of code elements."), helpcontext(0x0000ec54)]
        HRESULT CodeElements([out, retval] CodeElements** ppCodeElements);
        [id(0x00000005), helpstring("Returns a code element based on a fully qualified name."), helpcontext(0x0000ecae)]
        HRESULT CodeTypeFromFullName(
                        BSTR Name, 
                        [out, retval] CodeType** ppCodeType);
        [id(0x00000006), helpstring("Creates a new namespace code construct and inserts the code in the correct location."), helpcontext(0x0000ed95)]
        HRESULT AddNamespace(
                        BSTR Name, 
                        VARIANT Location, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeNamespace** ppCodeNamespace);
        [id(0x00000007), helpstring("Creates a new class code construct and inserts the code in the correct location."), helpcontext(0x0000ed96)]
        HRESULT AddClass(
                        BSTR Name, 
                        VARIANT Location, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional] VARIANT ImplementedInterfaces, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeClass** ppCodeClass);
        [id(0x00000008), helpstring("Creates a new interface code construct and inserts the code in the correct location."), helpcontext(0x0000ed9a)]
        HRESULT AddInterface(
                        BSTR Name, 
                        VARIANT Location, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeInterface** ppCodeInterface);
        [id(0x00000009), helpstring("Creates a new function code construct and inserts the code in the correct location."), helpcontext(0x0000ed97)]
        HRESULT AddFunction(
                        BSTR Name, 
                        VARIANT Location, 
                        vsCMFunction Kind, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeFunction** ppCodeFunction);
        [id(0x0000000a), helpstring("Creates a new variable code construct and inserts the code in the correct location."), helpcontext(0x0000ed98)]
        HRESULT AddVariable(
                        BSTR Name, 
                        VARIANT Location, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeVariable** ppCodeVariable);
        [id(0x0000000b), helpstring("Creates a new structure code construct and inserts the code in the correct location."), helpcontext(0x0000ed9c)]
        HRESULT AddStruct(
                        BSTR Name, 
                        VARIANT Location, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional] VARIANT ImplementedInterfaces, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeStruct** ppCodeStruct);
        [id(0x0000000c), helpstring("Creates a new enumeration code construct and inserts the code in the correct location."), helpcontext(0x0000ed9d)]
        HRESULT AddEnum(
                        BSTR Name, 
                        VARIANT Location, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeEnum** ppCodeEnum);
        [id(0x0000000d), helpstring("Creates a new delegate code construct and inserts the code in the correct location."), helpcontext(0x0000ed9e)]
        HRESULT AddDelegate(
                        BSTR Name, 
                        VARIANT Location, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeDelegate** ppCodeDelegate);
        [id(0x0000000e), helpstring("Creates a new attribute code construct and inserts the code in the correct location."), helpcontext(0x0000ed99)]
        HRESULT AddAttribute(
                        BSTR Name, 
                        VARIANT Location, 
                        BSTR Value, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeAttribute** ppCodeAttribute);
        [id(0x0000000f), helpstring("Removes a code element from the source file."), helpcontext(0x0000ec59)]
        HRESULT Remove(VARIANT Element);
        [id(0x00000010), helpstring("Returns a Boolean value determining if the name is a valid programmatic identifier for the current language."), helpcontext(0x0000edb5)]
        HRESULT IsValidID(
                        BSTR Name, 
                        [out, retval] VARIANT_BOOL* pValid);
        [id(0x00000011), propget, helpstring("Returns a Boolean value determining if the current language is case sensitive."), helpcontext(0x0000edb6)]
        HRESULT IsCaseSensitive([out, retval] VARIANT_BOOL* pSensitive);
        [id(0x00000012), helpstring("Returns a CodeTypeRef object based on the type indicator passed in."), helpcontext(0x0000edb7)]
        HRESULT CreateCodeTypeRef(
                        VARIANT Type, 
                        [out, retval] CodeTypeRef** ppCodeTypeRef);
    };

    [
      odl,
      uuid(0CFBC2B5-0D4E-11D3-8997-00C04F688DDE),
      helpstring("A collection of objects defining code constructs in a source file."),
      helpcontext(0x0000ec7d),
      dual,
      oleautomation
    ]
    interface CodeElements : IDispatch {
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT Parent([out, retval] IDispatch** ParentObject);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        VARIANT index, 
                        [out, retval] CodeElement** ppCodeElement);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* CountOfCodeElements);
        [id(0x00000004), restricted, hidden]
        HRESULT Reserved1(VARIANT Element);
        [id(0x00000005), helpstring("Creates a programmatic identifier that does not collide with other identifiers in the scope, and follows the current language naming rules."), helpcontext(0x0000edb8)]
        HRESULT CreateUniqueID(
                        [in] BSTR Prefix, 
                        [in, out, optional, defaultvalue("0")] BSTR* NewName, 
                        [out, retval] VARIANT_BOOL* pRootUnique);
    };

    [
      odl,
      uuid(0CFBC2B6-0D4E-11D3-8997-00C04F688DDE),
      helpstring("An object defining a code construct in a source file."),
      helpcontext(0x0000ec7e),
      dual,
      oleautomation
    ]
    interface CodeElement : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] CodeElements** ppCollection);
        [id(00000000), propget, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(00000000), propput, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name(BSTR pVal);
        [id(0x00000003), propget, helpstring("Returns the fully qualified name of the object."), helpcontext(0x0000eda3)]
        HRESULT FullName([out, retval] BSTR* pVal);
        [id(0x00000004), propget, helpstring("Returns the ProjectItem object."), helpcontext(0x0000eb1e)]
        HRESULT ProjectItem([out, retval] ProjectItem** pProjItem);
        [id(0x00000005), propget, helpstring("Returns an enumeration indicating the object kind."), helpcontext(0x0000ec5b)]
        HRESULT Kind([out, retval] vsCMElement* pCodeEltKind);
        [id(0x00000006), propget, helpstring("Returns if a CodeType object can be obtained from this object."), helpcontext(0x0000eda4)]
        HRESULT IsCodeType([out, retval] VARIANT_BOOL* pIsCodeType);
        [id(0x00000007), propget, helpstring("Describes the capabilities of the code model."), helpcontext(0x0000ecbf)]
        HRESULT InfoLocation([out, retval] vsCMInfoLocation* pInfoLocation);
        [id(0x00000008), propget, helpstring("Returns a collection of objects contained within this code construct."), helpcontext(0x0000ec71)]
        HRESULT Children([out, retval] CodeElements** ppCodeElements);
        [id(0x00000009), propget, helpstring("Programming language used to author the code."), helpcontext(0x0000ec53)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x0000000a), propget, helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT StartPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000b), propget, helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT EndPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000c), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x0000000d), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x0000000e), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x0000000f), helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT GetStartPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x00000010), helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT GetEndPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
    };

    

    [
      odl,
      uuid(7F59E94E-4939-40D2-9F7F-B7651C25905D),
      helpstring("Object representing a fixed (but tracking) point within a text document."),
      helpcontext(0x0000ee25),
      dual,
      oleautomation
    ]
    interface TextPoint : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] TextDocument** lppaReturn);
        [id(0x0000000b), propget, helpstring("Returns the 1-based index of the current line."), helpcontext(0x0000eb93)]
        HRESULT Line([out, retval] long* lppaReturn);
        [id(0x0000000c), propget, helpstring("Returns the 1-based index of the current column."), helpcontext(0x0000eb94)]
        HRESULT LineCharOffset([out, retval] long* lppaReturn);
        [id(0x0000000d), propget, helpstring("Returns the 1-based character index of the current position from the beginning of the document."), helpcontext(0x0000eb95)]
        HRESULT AbsoluteCharOffset([out, retval] long* lppaReturn);
        [id(0x0000000e), propget, helpstring("Returns the display column of the current position."), helpcontext(0x0000eb96)]
        HRESULT DisplayColumn([out, retval] long* lppaReturn);
        [id(0x00000015), propget, helpstring("Returns whether the current position is at the end of the document."), helpcontext(0x0000eb97)]
        HRESULT AtEndOfDocument([out, retval] VARIANT_BOOL* lppaReturn);
        [id(0x00000016), propget, helpstring("Returns whether the current position is at the beginning of the document."), helpcontext(0x0000eb98)]
        HRESULT AtStartOfDocument([out, retval] VARIANT_BOOL* lppaReturn);
        [id(0x00000017), propget, helpstring("Returns whether the current position is at the end of the line."), helpcontext(0x0000eb99)]
        HRESULT AtEndOfLine([out, retval] VARIANT_BOOL* lppaReturn);
        [id(0x00000018), propget, helpstring("Returns whether the current position is at the beginning of the line."), helpcontext(0x0000eb9a)]
        HRESULT AtStartOfLine([out, retval] VARIANT_BOOL* lppaReturn);
        [id(0x00000019), propget, helpstring("Returns the number of characters in the current line."), helpcontext(0x0000eb9b)]
        HRESULT LineLength([out, retval] long* lppaReturn);
        [id(0x0000001f), helpstring("Returns whether the called object is equal to the given object."), helpcontext(0x0000eb9c)]
        HRESULT EqualTo(
                        [in] TextPoint* Point, 
                        [out, retval] VARIANT_BOOL* lppaReturn);
        [id(0x00000020), helpstring("Returns whether the called object is less than the given object."), helpcontext(0x0000eb9d)]
        HRESULT LessThan(
                        [in] TextPoint* Point, 
                        [out, retval] VARIANT_BOOL* lppaReturn);
        [id(0x00000021), helpstring("Returns whether the called object is greater than the given object."), helpcontext(0x0000eb9e)]
        HRESULT GreaterThan(
                        [in] TextPoint* Point, 
                        [out, retval] VARIANT_BOOL* lppaReturn);
        [id(0x00000032), helpstring("Tries to make the TextPoint's location visible to the user."), helpcontext(0x0000ecc1)]
        HRESULT TryToShow(
                        [in, optional, defaultvalue(0)] vsPaneShowHow How, 
                        [in, optional] VARIANT PointOrCount, 
                        [out, retval] VARIANT_BOOL* pbResult);
        [id(0x00000033), propget, helpstring("Returns the code element at the TextPoint's location."), helpcontext(0x0000ecc2)]
        HRESULT CodeElement(
                        [in] vsCMElement Scope, 
                        [out, retval] CodeElement** ppResult);
        [id(0x00000022), helpstring("Creates an EditPoint object at the current location and returns it."), helpcontext(0x0000eb9f)]
        HRESULT CreateEditPoint([out, retval] EditPoint** lppaReturn);
    };

    [
      odl,
      uuid(CB218890-1382-472B-9118-782700C88115),
      helpstring("Object representing an open text-based document such as a file of code."),
      helpcontext(0x0000ee21),
      dual,
      oleautomation
    ]
    interface TextDocument : IDispatch {
        [id(0x00000096), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000097), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Document** ppParent);
        [id(0x00000001), propget, helpstring("Returns an object representing the selection on this object."), helpcontext(0x0000eb25)]
        HRESULT Selection([out, retval] TextSelection** ppSel);
        [id(0x0000007a), helpstring("Clears all bookmarks in the document."), helpcontext(0x0000eb8e)]
        HRESULT ClearBookmarks();
        [id(0x0000007c), helpstring("Creates unnamed bookmarks where the specified pattern is found."), helpcontext(0x0000eb8f)]
        HRESULT MarkText(
                        [in] BSTR Pattern, 
                        [in, optional, defaultvalue(0)] long vsFindOptionsValue, 
                        [out, retval] VARIANT_BOOL* pbRetVal);
        [id(0x00000080), helpstring("Replaces a pattern of text with new text in a document."), helpcontext(0x0000eb90)]
        HRESULT ReplacePattern(
                        [in] BSTR Pattern, 
                        [in] BSTR Replace, 
                        [in, optional, defaultvalue(0)] long vsFindOptionsValue, 
                        [in, out, optional, defaultvalue(0)] TextRanges** Tags, 
                        [out, retval] VARIANT_BOOL* pbRetVal);
        [id(0x00000083), helpstring("Creates an EditPoint object at the specified location and returns it. The default location is the beginning of the document."), helpcontext(0x0000ebc0)]
        HRESULT CreateEditPoint(
                        [in, optional, defaultvalue(0)] TextPoint* TextPoint, 
                        [out, retval] EditPoint** lppaReturn);
        [id(0x00000084), propget, helpstring("Returns a TextPoint object representing the beginning of the object's text."), helpcontext(0x0000eb91)]
        HRESULT StartPoint([out, retval] TextPoint** pStartPoint);
        [id(0x00000085), propget, helpstring("Returns a TextPoint object representing the end of the object's text."), helpcontext(0x0000eb92)]
        HRESULT EndPoint([out, retval] TextPoint** pEndPoint);
        [id(0x00000089), propget, hidden, helpstring("Returns the name of the document's language."), helpcontext(0x0000eb8d)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x00000089), propput, hidden, helpstring("Returns the name of the document's language."), helpcontext(0x0000eb8d)]
        HRESULT Language([in] BSTR pLanguage);
        [id(0x00000091), propget, hidden, helpstring("Returns an enumerated string indicating the object type."), helpcontext(0x0000eb05)]
        HRESULT Type([out, retval] BSTR* pType);
        [id(0x00000087), propget, hidden, helpstring("Sets/returns a Long value indicating the width of an indent level in spaces."), helpcontext(0x0000ead4)]
        HRESULT IndentSize([out, retval] long* pSize);
        [id(0x0000008c), propget, hidden, helpstring("Sets/returns value determining tab size in the editor."), helpcontext(0x0000eb03)]
        HRESULT TabSize([out, retval] long* pSize);
        [id(0x00000090), hidden, helpstring("Replaces a pattern of text with new text in a document."), helpcontext(0x0000eb90)]
        HRESULT ReplaceText(
                        [in] BSTR FindText, 
                        [in] BSTR ReplaceText, 
                        [in, optional, defaultvalue(0)] long vsFindOptionsValue, 
                        [out, retval] VARIANT_BOOL* pbRetVal);
        [id(0x00000086), hidden, helpstring("Sends the object to the printer."), helpcontext(0x0000eb26)]
        HRESULT PrintOut();
    };

    [
      odl,
      uuid(63EB5C39-CA8F-498E-9A66-6DD4A27AC95B),
      helpstring("A Document open for editing."),
      helpcontext(0x0000eb51),
      dual,
      oleautomation
    ]
    interface Document : IDispatch {
        [id(0x00000064), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x0000008d), propget, helpstring("Returns a GUID String indicating the kind or type of the object."), helpcontext(0x0000eadd)]
        HRESULT Kind([out, retval] BSTR* pKind);
        [id(0x00000065), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Collection([out, retval] Documents** DocumentsObject);
        [id(0x00000066), propget, helpstring("Returns the current active window."), helpcontext(0x0000eaa8)]
        HRESULT ActiveWindow([out, retval] Window** pWindow);
        [id(0x00000067), propget, helpstring("Returns the full file path to the item."), helpcontext(0x0000eb1a)]
        HRESULT FullName([out, retval] BSTR* pRetval);
        [id(00000000), propget, helpstring("Returns the name of the object."), helpcontext(0x0000edbb)]
        HRESULT Name([out, retval] BSTR* pRetval);
        [id(0x00000069), propget, helpstring("Returns the Path (without filename) to the file in storage."), helpcontext(0x0000eb5f)]
        HRESULT Path([out, retval] BSTR* pRetval);
        [id(0x0000006a), propget, helpstring("Returns a value specifying if the item in storage is read only or not."), helpcontext(0x0000eb1c)]
        HRESULT ReadOnly([out, retval] VARIANT_BOOL* pRetval);
        [id(0x0000006b), propget, helpstring("Returns value indicating whether object was changed since the last time it was saved."), helpcontext(0x0000eadb)]
        HRESULT Saved([out, retval] VARIANT_BOOL* pRetval);
        [id(0x0000006b), propput, helpstring("Returns value indicating whether object was changed since the last time it was saved."), helpcontext(0x0000eadb)]
        HRESULT Saved([in] VARIANT_BOOL pRetval);
        [id(0x0000006d), propget, helpstring("Returns the Windows that display the document."), helpcontext(0x0000eb1d)]
        HRESULT Windows([out, retval] Windows** pWindows);
        [id(0x0000006e), propget, helpstring("Returns the ProjectItem object."), helpcontext(0x0000eb1e)]
        HRESULT ProjectItem([out, retval] ProjectItem** pRetval);
        [id(0x00000079), helpstring("Moves the focus to the current item."), helpcontext(0x0000eb1f)]
        HRESULT Activate();
        [id(0x0000007b), helpstring("Closes the document, and optionally saves."), helpcontext(0x0000eb20)]
        HRESULT Close([in, optional, defaultvalue(3)] vsSaveChanges Save);
        [id(0x0000007d), helpstring("Creates a new window to view the document."), helpcontext(0x0000eb21)]
        HRESULT NewWindow([out, retval] Window** pWindow);
        [id(0x0000007f), helpstring("Redo the action last performed by the user on this object."), helpcontext(0x0000eb24)]
        HRESULT Redo([out, retval] VARIANT_BOOL* pbRetVal);
        [id(0x00000080), helpstring("Undo the action last performed by the user on this object."), helpcontext(0x0000eb23)]
        HRESULT Undo([out, retval] VARIANT_BOOL* pbRetVal);
        [id(0x00000081), helpstring("Saves the object to storage."), helpcontext(0x0000eb22)]
        HRESULT Save(
                        [in, optional, defaultvalue("")] BSTR FileName, 
                        [out, retval] vsSaveStatus* pStatus);
        [id(0x00000083), propget, helpstring("Returns an object representing the selection on this object."), helpcontext(0x0000eb25)]
        HRESULT Selection([out, retval] IDispatch** SelectionObject);
        [id(0x00000084), helpstring("Returns an interface or object that can be accessed at run time by name."), helpcontext(0x0000ea7f)]
        HRESULT Object(
                        [in, optional, defaultvalue("")] BSTR ModelKind, 
                        [out, retval] IDispatch** DataModelObject);
        [id(0x00000085), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        [in] BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x00000086), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x00000087), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x0000007e), hidden, helpstring("Sends the object to the printer."), helpcontext(0x0000eb26)]
        HRESULT PrintOut();
        [id(0x0000008e), propget, hidden, helpstring("Sets/returns a Long value indicating the width of an indent level in spaces."), helpcontext(0x0000ead4)]
        HRESULT IndentSize([out, retval] long* pSize);
        [id(0x00000090), propget, hidden, helpstring("Returns the name of the document's language."), helpcontext(0x0000eb8d)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x00000090), propput, hidden, helpstring("Returns the name of the document's language."), helpcontext(0x0000eb8d)]
        HRESULT Language([in] BSTR pLanguage);
        [id(0x0000006a), propput, hidden, helpstring("Returns a value specifying if the item in storage is read only or not."), helpcontext(0x0000eb1c)]
        HRESULT ReadOnly([in] VARIANT_BOOL pRetval);
        [id(0x00000093), propget, hidden, helpstring("Sets/returns value determining tab size in the editor."), helpcontext(0x0000eb03)]
        HRESULT TabSize([out, retval] long* pSize);
        [id(0x0000007a), hidden, helpstring("Clears all bookmarks in the document."), helpcontext(0x0000eb8e)]
        HRESULT ClearBookmarks();
        [id(0x0000007c), hidden, helpstring("Creates unnamed bookmarks where the specified pattern is found."), helpcontext(0x0000eb8f)]
        HRESULT MarkText(
                        [in] BSTR Pattern, 
                        [in, optional, defaultvalue(0)] long Flags, 
                        [out, retval] VARIANT_BOOL* pbRetVal);
        [id(0x00000015), hidden, helpstring("Replaces a pattern of text with new text in a document."), helpcontext(0x0000eb90)]
        HRESULT ReplaceText(
                        [in] BSTR FindText, 
                        [in] BSTR ReplaceText, 
                        [in, optional, defaultvalue(0)] long Flags, 
                        [out, retval] VARIANT_BOOL* pbRetVal);
        [id(0x00000095), propget, hidden, helpstring("Returns an enumerated string indicating the object type."), helpcontext(0x0000eb05)]
        HRESULT Type([out, retval] BSTR* pType);
    };

    [
      odl,
      uuid(9E2CF3EA-140F-413E-BD4B-7D46740CD2F4),
      helpstring("Collection of Documents open for editing."),
      helpcontext(0x0000eb4d),
      dual,
      oleautomation
    ]
    interface Documents : IDispatch {
        [id(0x00000064), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000065), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] _DTE** DTEObject);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enumerator);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] Document** DocumentObject);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* CountOfDocuments);
        [id(0x00000004), hidden, helpstring("Creates a new document and adds it to the Documents collection."), helpcontext(0x0000eb19)]
        HRESULT Add(
                        [in] BSTR Kind, 
                        [out, retval] Document** ppDocument);
        [id(0x00000005), helpstring("Closes all open documents."), helpcontext(0x0000edd6)]
        HRESULT CloseAll([in, optional, defaultvalue(3)] vsSaveChanges Save);
        [id(0x00000006), helpstring("Saves all open documents."), helpcontext(0x0000edd7)]
        HRESULT SaveAll();
        [id(0x00000007), hidden]
        HRESULT Open(
                        BSTR PathName, 
                        [optional, defaultvalue("Auto")] BSTR Kind, 
                        [optional, defaultvalue(0)] VARIANT_BOOL ReadOnly, 
                        [out, retval] Document** ppDocument);
    };

    

    [
      odl,
      uuid(1FA0E135-399A-4D2C-A4FE-D21E2480F921),
      helpstring("Object representing the selection or caret in a text view."),
      helpcontext(0x0000ee28),
      dual,
      oleautomation
    ]
    interface TextSelection : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] TextDocument** ppParent);
        [id(0x00000003), propget, helpstring("Returns the origin point of the selection."), helpcontext(0x0000ebc1)]
        HRESULT AnchorPoint([out, retval] VirtualPoint** ppPoint);
        [id(0x00000004), propget, helpstring("Returns the current endpoint of the selection."), helpcontext(0x0000ebc2)]
        HRESULT ActivePoint([out, retval] VirtualPoint** ppPoint);
        [id(0x00000005), propget, hidden, helpstring("Returns the 1-based column index of the anchor point."), helpcontext(0x0000ebc3)]
        HRESULT AnchorColumn([out, retval] long* pColumn);
        [id(0x00000006), propget, hidden, helpstring("Returns the 1-based line index of the bottom point."), helpcontext(0x0000ebc4)]
        HRESULT BottomLine([out, retval] long* pLine);
        [id(0x00000007), propget, helpstring("Returns the bottom end of the selection."), helpcontext(0x0000ebc5)]
        HRESULT BottomPoint([out, retval] VirtualPoint** ppPoint);
        [id(0x00000008), propget, hidden, helpstring("Returns the 1-based column index of the active point."), helpcontext(0x0000ebc6)]
        HRESULT CurrentColumn([out, retval] long* pColumn);
        [id(0x00000009), propget, hidden, helpstring("Returns the 1-based line index of the active point."), helpcontext(0x0000ebc7)]
        HRESULT CurrentLine([out, retval] long* pLine);
        [id(0x0000000a), propget, helpstring("Indicates whether the anchor point is equal to the active point."), helpcontext(0x0000ebc8)]
        HRESULT IsEmpty([out, retval] VARIANT_BOOL* pfEmpty);
        [id(0x0000000b), propget, helpstring("Indicates whether the active point is equal to the bottom point."), helpcontext(0x0000ebc9)]
        HRESULT IsActiveEndGreater([out, retval] VARIANT_BOOL* pfGreater);
        [id(00000000), propget, helpstring("Returns the selected text."), helpcontext(0x0000ebca)]
        HRESULT Text([out, retval] BSTR* pText);
        [id(00000000), propput, helpstring("Returns the selected text."), helpcontext(0x0000ebca)]
        HRESULT Text([in] BSTR pText);
        [id(0x0000000d), propget, hidden, helpstring("Returns the 1-based line index of the top point."), helpcontext(0x0000ebcb)]
        HRESULT TopLine([out, retval] long* pLine);
        [id(0x0000000e), propget, helpstring("Returns the top end of the selection."), helpcontext(0x0000ebcc)]
        HRESULT TopPoint([out, retval] VirtualPoint** ppPoint);
        [id(0x0000000f), helpstring("Changes the case of the selected text."), helpcontext(0x0000ebcd)]
        HRESULT ChangeCase([in] vsCaseOptions How);
        [id(0x00000010), helpstring("Moves the object the specified number of characters to the left. The default is 1 character."), helpcontext(0x0000eba0)]
        HRESULT CharLeft(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Extend, 
                        [in, optional, defaultvalue(1)] long Count);
        [id(0x00000011), helpstring("Moves the object the specified number of characters to the right. The default is 1 character."), helpcontext(0x0000eba1)]
        HRESULT CharRight(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Extend, 
                        [in, optional, defaultvalue(1)] long Count);
        [id(0x00000012), helpstring("Clears any unnamed bookmarks on the current line."), helpcontext(0x0000ebab)]
        HRESULT ClearBookmark();
        [id(0x00000013), helpstring("Collapses the selection to the active point."), helpcontext(0x0000ebce)]
        HRESULT Collapse();
        [id(0x00000048), helpstring("Creates an outlining section based on the current selection."), helpcontext(0x0000ecc5)]
        HRESULT OutlineSection();
        [id(0x00000014), helpstring("Copies the selection to the clipboard."), helpcontext(0x0000ebcf)]
        HRESULT Copy();
        [id(0x00000015), helpstring("Copies the selection to the clipboard and deletes it."), helpcontext(0x0000ebd0)]
        HRESULT Cut();
        [id(0x00000016), helpstring("Inserts the clipboard contents at the current location."), helpcontext(0x0000ebb4)]
        HRESULT Paste();
        [id(0x00000017), helpstring("Deletes the selection."), helpcontext(0x0000ebd1)]
        HRESULT Delete([in, optional, defaultvalue(1)] long Count);
        [id(0x00000018), helpstring("Deletes a specified number of characters to the left of the active point. The default is 1 character."), helpcontext(0x0000ebd2)]
        HRESULT DeleteLeft([in, optional, defaultvalue(1)] long Count);
        [id(0x00000019), helpstring("Deletes white space horizontally or vertically around the current location."), helpcontext(0x0000ebbe)]
        HRESULT DeleteWhitespace([in, optional, defaultvalue(0)] vsWhitespaceOptions Direction);
        [id(0x0000001a), helpstring("Moves the object to the end of the current line."), helpcontext(0x0000eba2)]
        HRESULT EndOfLine([in, optional, defaultvalue(0)] VARIANT_BOOL Extend);
        [id(0x0000001b), helpstring("Moves the object to the beginning of the current line."), helpcontext(0x0000eba3)]
        HRESULT StartOfLine(
                        [in, optional, defaultvalue(0)] vsStartOfLineOptions Where, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Extend);
        [id(0x0000001c), helpstring("Moves the object to the end of the document."), helpcontext(0x0000eba4)]
        HRESULT EndOfDocument([in, optional, defaultvalue(0)] VARIANT_BOOL Extend);
        [id(0x0000001d), helpstring("Moves the object to the beginning of the document."), helpcontext(0x0000eba5)]
        HRESULT StartOfDocument([in, optional, defaultvalue(0)] VARIANT_BOOL Extend);
        [id(0x0000001e), helpstring("Searches for the given pattern from the active point to the end of the document."), helpcontext(0x0000ebd3)]
        HRESULT FindPattern(
                        [in] BSTR Pattern, 
                        [in, optional, defaultvalue(0)] long vsFindOptionsValue, 
                        [in, out, optional, defaultvalue(0)] TextRanges** Tags, 
                        [out, retval] VARIANT_BOOL* pfFound);
        [id(0x0000001f), helpstring("Searches for the given pattern in the selection and replaces it with new text."), helpcontext(0x0000ebd4)]
        HRESULT ReplacePattern(
                        [in] BSTR Pattern, 
                        [in] BSTR Replace, 
                        [in, optional, defaultvalue(0)] long vsFindOptionsValue, 
                        [in, out, optional, defaultvalue(0)] TextRanges** Tags, 
                        [out, retval] VARIANT_BOOL* pfFound);
        [id(0x00000046), helpstring("Searches for the given pattern from the active point to the end of the document."), helpcontext(0x0000ebd3)]
        HRESULT FindText(
                        [in] BSTR Pattern, 
                        [in, optional, defaultvalue(0)] long vsFindOptionsValue, 
                        [out, retval] VARIANT_BOOL* pfFound);
        [id(0x00000047), hidden, helpstring("Searches for the given pattern in the selection and replaces it with new text."), helpcontext(0x0000ebd4)]
        HRESULT ReplaceText(
                        [in] BSTR Pattern, 
                        [in] BSTR Replace, 
                        [in, optional, defaultvalue(0)] long vsFindOptionsValue, 
                        [out, retval] VARIANT_BOOL* pfFound);
        [id(0x00000020), helpstring("Moves to the beginning of the indicated line and selects the line if requested."), helpcontext(0x0000ebd5)]
        HRESULT GotoLine(
                        [in] long Line, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Select);
        [id(0x00000021), helpstring("Indents the lines of the selection by the number of indentation levels given. The default is 1 indentation level."), helpcontext(0x0000ebd6)]
        HRESULT Indent([in, optional, defaultvalue(1)] long Count);
        [id(0x00000022), helpstring("Removes indents from the selected lines by the number of indentation levels given. The default is 1 indentation level."), helpcontext(0x0000ebd7)]
        HRESULT Unindent([in, optional, defaultvalue(1)] long Count);
        [id(0x00000023), helpstring("Inserts the given string at the current location."), helpcontext(0x0000ebaf)]
        HRESULT Insert(
                        [in] BSTR Text, 
                        [in, optional, defaultvalue(1)] long vsInsertFlagsCollapseToEndValue);
        [id(0x0000003d), helpstring("Inserts the contents of the specified file at the current location."), helpcontext(0x0000ebb0)]
        HRESULT InsertFromFile([in] BSTR File);
        [id(0x00000024), helpstring("Moves the object down by the specified number of lines. The default is 1 line."), helpcontext(0x0000eba9)]
        HRESULT LineDown(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Extend, 
                        [in, optional, defaultvalue(1)] long Count);
        [id(0x00000025), helpstring("Moves the object up by the specified number of lines. The default is 1 line."), helpcontext(0x0000eba8)]
        HRESULT LineUp(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Extend, 
                        [in, optional, defaultvalue(1)] long Count);
        [id(0x00000026), helpstring("Moves the active point to the given position."), helpcontext(0x0000ebd8)]
        HRESULT MoveToPoint(
                        [in] TextPoint* Point, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Extend);
        [id(0x00000027), helpstring("Moves the active point to the given position."), helpcontext(0x0000ebd8)]
        HRESULT MoveToLineAndOffset(
                        [in] long Line, 
                        [in] long Offset, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Extend);
        [id(0x00000028), helpstring("Moves the active point to the given 1-based absolute character offset."), helpcontext(0x0000ebd9)]
        HRESULT MoveToAbsoluteOffset(
                        [in] long Offset, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Extend);
        [id(0x00000029), helpstring("Inserts a line break at the active point."), helpcontext(0x0000ebda)]
        HRESULT NewLine([in, optional, defaultvalue(1)] long Count);
        [id(0x0000002a), helpstring("Sets an unnamed bookmark on the current line."), helpcontext(0x0000ebaa)]
        HRESULT SetBookmark();
        [id(0x0000002b), helpstring("Moves to the location of the next bookmark in the document."), helpcontext(0x0000ebac)]
        HRESULT NextBookmark([out, retval] VARIANT_BOOL* pbFound);
        [id(0x0000002c), helpstring("Moves to the location of the previous bookmark in the document."), helpcontext(0x0000ebad)]
        HRESULT PreviousBookmark([out, retval] VARIANT_BOOL* pbFound);
        [id(0x0000002d), helpstring("Fills the current line with white space to the given column."), helpcontext(0x0000ebae)]
        HRESULT PadToColumn([in] long Column);
        [id(0x0000002e), helpstring("Formats the indicated span of text based on the current language."), helpcontext(0x0000ebbb)]
        HRESULT SmartFormat();
        [id(0x0000002f), helpstring("Selects the document."), helpcontext(0x0000ebdb)]
        HRESULT SelectAll();
        [id(0x00000030), helpstring("Selects the line containing the active point."), helpcontext(0x0000ebdc)]
        HRESULT SelectLine();
        [id(0x00000031), helpstring("Exchanges the positions of the active point and the anchor point."), helpcontext(0x0000ebdd)]
        HRESULT SwapAnchor();
        [id(0x00000032), helpstring("Converts spaces to tabs in the selection according to the user's tab settings."), helpcontext(0x0000ebde)]
        HRESULT Tabify();
        [id(0x00000033), helpstring("Converts tabs to spaces in the selection according to the user's tab settings."), helpcontext(0x0000ebdf)]
        HRESULT Untabify();
        [id(0x00000034), helpstring("Moves the object the specified number of words to the left. The default is 1 word."), helpcontext(0x0000eba6)]
        HRESULT WordLeft(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Extend, 
                        [in, optional, defaultvalue(1)] long Count);
        [id(0x00000035), helpstring("Moves the object the specified number of words to the right. The default is 1 word."), helpcontext(0x0000eba7)]
        HRESULT WordRight(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Extend, 
                        [in, optional, defaultvalue(1)] long Count);
        [id(0x00000036), propget, helpstring("Returns the text pane that contains the selection."), helpcontext(0x0000ebe0)]
        HRESULT TextPane([out, retval] TextPane** ppPane);
        [id(0x00000037), propget, helpstring("Sets/returns value determining whether dragging the mouse selects in stream mode or block mode."), helpcontext(0x0000eb02)]
        HRESULT Mode([out, retval] vsSelectionMode* pMode);
        [id(0x00000037), propput, helpstring("Sets/returns value determining whether dragging the mouse selects in stream mode or block mode."), helpcontext(0x0000eb02)]
        HRESULT Mode([in] vsSelectionMode pMode);
        [id(0x00000038), propget, helpstring("Returns a TextRanges collection with one TextRange object for each line or partial line in the selection."), helpcontext(0x0000ebe1)]
        HRESULT TextRanges([out, retval] TextRanges** ppRanges);
        [id(0x00000050), hidden, helpstring("Deletes a specified number of characters to the left of the active point. The default is 1 character."), helpcontext(0x0000ebd2)]
        HRESULT Backspace([in, optional, defaultvalue(1)] long Count);
        [id(0x00000051), hidden, helpstring("Collapses the selection to the active point."), helpcontext(0x0000ebce)]
        HRESULT Cancel();
        [id(0x00000039), helpstring("Inserts text, overwriting the existing text."), helpcontext(0x0000ebe2)]
        HRESULT DestructiveInsert([in] BSTR Text);
        [id(0x00000052), hidden, helpstring("Moves the active point to the indicated display column."), helpcontext(0x0000ebe3)]
        HRESULT MoveTo(
                        [in] long Line, 
                        [in] long Column, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Extend);
        [id(0x0000003a), helpstring("Moves the active point to the indicated display column."), helpcontext(0x0000ebe3)]
        HRESULT MoveToDisplayColumn(
                        [in] long Line, 
                        [in] long Column, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Extend);
        [id(0x0000003b), helpstring("Moves the active point a specified number of pages up in the document, scrolling the view."), helpcontext(0x0000ebe4)]
        HRESULT PageUp(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Extend, 
                        [in, optional, defaultvalue(1)] long Count);
        [id(0x0000003c), helpstring("Moves the active point a specified number of pages down in the document, scrolling the view."), helpcontext(0x0000ebe5)]
        HRESULT PageDown(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Extend, 
                        [in, optional, defaultvalue(1)] long Count);
    };

    [
      odl,
      uuid(42320454-626C-4DD0-9ECB-357C4F1966D8),
      helpstring("A TextPoint that may represent a location in virtual space (beyond the end of a line)."),
      helpcontext(0x0000ee2a),
      dual,
      oleautomation
    ]
    interface VirtualPoint : TextPoint {
        [id(0x00000065), propget, helpstring("Returns the column index of a virtual point in virtual space."), helpcontext(0x0000ebe6)]
        HRESULT VirtualCharOffset([out, retval] long* pOffset);
        [id(0x00000066), propget, helpstring("Returns the display column of the current position."), helpcontext(0x0000eb96)]
        HRESULT VirtualDisplayColumn([out, retval] long* lppaReturn);
    };

    
    [
      odl,
      uuid(B6422E9C-9EFD-4F87-BDDC-C7FD8F2FD303),
      helpstring("A collection of TextRange objects."),
      helpcontext(0x0000ee27),
      dual,
      oleautomation
    ]
    interface TextRanges : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] TextDocument** ppParent);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* pCount);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] TextRange** ppRange);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
    };

    [
      odl,
      uuid(72767524-E3B3-43D0-BB46-BBE1D556A9FF),
      helpstring("Object representing a contiguous range of text between two points."),
      helpcontext(0x0000ee26),
      dual,
      oleautomation
    ]
    interface TextRange : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] TextRanges** ppParent);
        [id(0x00000003), propget, helpstring("Returns a TextPoint object representing the beginning of the object's text."), helpcontext(0x0000eb91)]
        HRESULT StartPoint([out, retval] EditPoint** ppPoint);
        [id(0x00000004), propget, helpstring("Returns a TextPoint object representing the end of the object's text."), helpcontext(0x0000eb92)]
        HRESULT EndPoint([out, retval] EditPoint** ppPoint);
    };

    [
      odl,
      uuid(C1FFE800-028B-4475-A907-14F51F19BB7D),
      helpstring("Object representing a movable point in a text document."),
      helpcontext(0x0000ee20),
      dual,
      oleautomation
    ]
    interface EditPoint : TextPoint {
        [id(0x00000065), helpstring("Moves the object the specified number of characters to the left. The default is 1 character."), helpcontext(0x0000eba0)]
        HRESULT CharLeft([in, optional, defaultvalue(1)] long Count);
        [id(0x00000066), helpstring("Moves the object the specified number of characters to the right. The default is 1 character."), helpcontext(0x0000eba1)]
        HRESULT CharRight([in, optional, defaultvalue(1)] long Count);
        [id(0x00000067), helpstring("Moves the object to the end of the current line."), helpcontext(0x0000eba2)]
        HRESULT EndOfLine();
        [id(0x00000068), helpstring("Moves the object to the beginning of the current line."), helpcontext(0x0000eba3)]
        HRESULT StartOfLine();
        [id(0x00000069), helpstring("Moves the object to the end of the document."), helpcontext(0x0000eba4)]
        HRESULT EndOfDocument();
        [id(0x0000006a), helpstring("Moves the object to the beginning of the document."), helpcontext(0x0000eba5)]
        HRESULT StartOfDocument();
        [id(0x0000006b), helpstring("Moves the object the specified number of words to the left. The default is 1 word."), helpcontext(0x0000eba6)]
        HRESULT WordLeft([in, optional, defaultvalue(1)] long Count);
        [id(0x0000006c), helpstring("Moves the object the specified number of words to the right. The default is 1 word."), helpcontext(0x0000eba7)]
        HRESULT WordRight([in, optional, defaultvalue(1)] long Count);
        [id(0x0000006d), helpstring("Moves the object up by the specified number of lines. The default is 1 line."), helpcontext(0x0000eba8)]
        HRESULT LineUp([in, optional, defaultvalue(1)] long Count);
        [id(0x0000006e), helpstring("Moves the object down by the specified number of lines. The default is 1 line."), helpcontext(0x0000eba9)]
        HRESULT LineDown([in, optional, defaultvalue(1)] long Count);
        [id(0x000000aa), helpstring("Moves the active point to the given position."), helpcontext(0x0000ebd8)]
        HRESULT MoveToPoint([in] TextPoint* Point);
        [id(0x000000ab), helpstring("Moves the active point to the given position."), helpcontext(0x0000ebd8)]
        HRESULT MoveToLineAndOffset(
                        [in] long Line, 
                        [in] long Offset);
        [id(0x000000ac), helpstring("Moves the active point to the given 1-based absolute character offset."), helpcontext(0x0000ebd9)]
        HRESULT MoveToAbsoluteOffset([in] long Offset);
        [id(0x00000079), helpstring("Sets an unnamed bookmark on the current line."), helpcontext(0x0000ebaa)]
        HRESULT SetBookmark();
        [id(0x0000007a), helpstring("Clears any unnamed bookmarks on the current line."), helpcontext(0x0000ebab)]
        HRESULT ClearBookmark();
        [id(0x0000007b), helpstring("Moves to the location of the next bookmark in the document."), helpcontext(0x0000ebac)]
        HRESULT NextBookmark([out, retval] VARIANT_BOOL* pbFound);
        [id(0x0000007c), helpstring("Moves to the location of the previous bookmark in the document."), helpcontext(0x0000ebad)]
        HRESULT PreviousBookmark([out, retval] VARIANT_BOOL* pbFound);
        [id(0x00000083), helpstring("Fills the current line with white space to the given column."), helpcontext(0x0000ebae)]
        HRESULT PadToColumn([in] long Column);
        [id(0x00000084), helpstring("Inserts the given string at the current location."), helpcontext(0x0000ebaf)]
        HRESULT Insert([in] BSTR Text);
        [id(0x00000085), helpstring("Inserts the contents of the specified file at the current location."), helpcontext(0x0000ebb0)]
        HRESULT InsertFromFile([in] BSTR File);
        [id(0x00000086), helpstring("Returns the text between the current location and the specified location."), helpcontext(0x0000ebb1)]
        HRESULT GetText(
                        [in] VARIANT PointOrCount, 
                        [out, retval] BSTR* pbstrText);
        [id(0x000000ad), helpstring("Returns the text between the indicated lines (and including the beginning line)."), helpcontext(0x0000ecc3)]
        HRESULT GetLines(
                        [in] long Start, 
                        [in] long ExclusiveEnd, 
                        [out, retval] BSTR* pbstrText);
        [id(0x00000088), helpstring("Copies the indicated span of text to the clipboard."), helpcontext(0x0000ebb2)]
        HRESULT Copy(
                        [in] VARIANT PointOrCount, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Append);
        [id(0x00000089), helpstring("Copies the indicated span of text to the clipboard and deletes it."), helpcontext(0x0000ebb3)]
        HRESULT Cut(
                        [in] VARIANT PointOrCount, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Append);
        [id(0x00000087), helpstring("Deletes the indicated span of text."), helpcontext(0x0000ebb5)]
        HRESULT Delete([in] VARIANT PointOrCount);
        [id(0x0000008a), helpstring("Inserts the clipboard contents at the current location."), helpcontext(0x0000ebb4)]
        HRESULT Paste();
        [id(0x0000008b), helpstring("Returns whether the indicated span contains any read-only text."), helpcontext(0x0000ebb6)]
        HRESULT ReadOnly(
                        [in] VARIANT PointOrCount, 
                        [out, retval] VARIANT_BOOL* lfResult);
        [id(0x00000097), helpstring("Finds a pattern of text in the given span."), helpcontext(0x0000ebb7)]
        HRESULT FindPattern(
                        [in] BSTR Pattern, 
                        [in, optional, defaultvalue(0)] long vsFindOptionsValue, 
                        [in, out, optional, defaultvalue(0)] EditPoint** EndPoint, 
                        [in, out, optional, defaultvalue(0)] TextRanges** Tags, 
                        [out, retval] VARIANT_BOOL* pbFound);
        [id(0x00000098), helpstring("Finds a pattern of text in the given span and replaces it with the specified text."), helpcontext(0x0000ebb8)]
        HRESULT ReplacePattern(
                        [in] TextPoint* Point, 
                        [in] BSTR Pattern, 
                        [in] BSTR Replace, 
                        [in, optional, defaultvalue(0)] long vsFindOptionsValue, 
                        [in, out, optional, defaultvalue(0)] TextRanges** Tags, 
                        [out, retval] VARIANT_BOOL* pbFound);
        [id(0x000000a1), helpstring("Indents the indicated span of lines by the number of indentation levels given. The defaults are the current line and 1 indentation level."), helpcontext(0x0000ebb9)]
        HRESULT Indent(
                        [in, optional, defaultvalue(0)] TextPoint* Point, 
                        [in, optional, defaultvalue(1)] long Count);
        [id(0x000000a2), helpstring("Removes indents from the indicated span of lines by the number of indentation levels given. The defaults are the current line and 1 indentation level."), helpcontext(0x0000ebba)]
        HRESULT Unindent(
                        [in, optional, defaultvalue(0)] TextPoint* Point, 
                        [in, optional, defaultvalue(1)] long Count);
        [id(0x000000a3), helpstring("Formats the indicated span of text based on the current language."), helpcontext(0x0000ebbb)]
        HRESULT SmartFormat([in] TextPoint* Point);
        [id(0x000000a7), helpstring("Creates an outlining section between the current point and the specified point."), helpcontext(0x0000ecc4)]
        HRESULT OutlineSection([in] VARIANT PointOrCount);
        [id(0x000000a4), helpstring("Replaces the indicated span of text with the given text."), helpcontext(0x0000ebbc)]
        HRESULT ReplaceText(
                        [in] VARIANT PointOrCount, 
                        [in] BSTR Text, 
                        [in] long Flags);
        [id(0x000000a5), helpstring("Changes the case of the text in the indicated span."), helpcontext(0x0000ebbd)]
        HRESULT ChangeCase(
                        [in] VARIANT PointOrCount, 
                        [in] vsCaseOptions How);
        [id(0x000000a6), helpstring("Deletes white space horizontally or vertically around the current location."), helpcontext(0x0000ebbe)]
        HRESULT DeleteWhitespace([in, optional, defaultvalue(0)] vsWhitespaceOptions Direction);
    };

    [
      odl,
      uuid(0A3BF283-05F8-4669-9BCB-A84B6423349A),
      helpstring("Object representing a view on a text document."),
      helpcontext(0x0000ee23),
      dual,
      oleautomation
    ]
    interface TextPane : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] TextPanes** ppPanes);
        [id(0x00000003), propget, helpstring("Returns the window containing this object."), helpcontext(0x0000ebe9)]
        HRESULT Window([out, retval] Window** ppWin);
        [id(0x00000004), propget, helpstring("Returns the height of the window in character units."), helpcontext(0x0000ebea)]
        HRESULT Height([out, retval] long* pHeight);
        [id(0x00000005), propget, helpstring("Returns the width of the window in character units."), helpcontext(0x0000ebeb)]
        HRESULT Width([out, retval] long* pWidth);
        [id(0x00000008), propget, helpstring("Returns an object representing the selection on this object."), helpcontext(0x0000eb25)]
        HRESULT Selection([out, retval] TextSelection** ppSel);
        [id(0x00000009), propget, helpstring("Returns a TextPoint object representing the beginning of the object's text."), helpcontext(0x0000eb91)]
        HRESULT StartPoint([out, retval] TextPoint** ppPoint);
        [id(0x0000000c), helpstring("Moves the focus to the current item."), helpcontext(0x0000eb1f)]
        HRESULT Activate();
        [id(0x0000000a), helpstring("Returns whether the indicated span of text is fully visible in the pane."), helpcontext(0x0000ebec)]
        HRESULT IsVisible(
                        [in] TextPoint* Point, 
                        [in, optional] VARIANT PointOrCount, 
                        [out, retval] VARIANT_BOOL* pbResult);
        [id(0x0000000b), helpstring("Scrolls the pane vertically to make the indicated span of text visible."), helpcontext(0x0000ebed)]
        HRESULT TryToShow(
                        [in] TextPoint* Point, 
                        [in, optional, defaultvalue(2)] vsPaneShowHow How, 
                        [in, optional] VARIANT PointOrCount, 
                        [out, retval] VARIANT_BOOL* pbResult);
    };

    [
      odl,
      uuid(D9013D31-3652-46B2-A25A-29A881B9F86B),
      helpstring("A collection of text panes representing different views on the same document."),
      helpcontext(0x0000ee24),
      dual,
      oleautomation
    ]
    interface TextPanes : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] TextWindow** ppParent);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* pCount);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] TextPane** ppPane);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
    };

    [
      odl,
      uuid(2FC54DC9-922B-44EB-8CC0-BA182584DC4B),
      helpstring("Object representing a window on a text document, which may contain multiple text panes."),
      helpcontext(0x0000ee29),
      dual,
      oleautomation
    ]
    interface TextWindow : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Window** ppParent);
        [id(0x00000003), propget, helpstring("Returns an object representing the selection on this object."), helpcontext(0x0000eb25)]
        HRESULT Selection([out, retval] TextSelection** ppSel);
        [id(0x00000004), propget, helpstring("Returns the most recently active pane in the text window."), helpcontext(0x0000ebe7)]
        HRESULT ActivePane([out, retval] TextPane** ppPane);
        [id(0x00000005), propget, helpstring("Returns the collection of panes in the text window."), helpcontext(0x0000ebe8)]
        HRESULT Panes([out, retval] TextPanes** ppPanes);
    };

    

    [
      odl,
      uuid(0CFBC2B7-0D4E-11D3-8997-00C04F688DDE),
      helpstring("An object defining a class construct in a source file."),
      helpcontext(0x0000ec7f),
      dual,
      oleautomation
    ]
    interface CodeType : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] CodeElements** ppCollection);
        [id(00000000), propget, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(00000000), propput, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name(BSTR pVal);
        [id(0x00000003), propget, helpstring("Returns the fully qualified name of the object."), helpcontext(0x0000eda3)]
        HRESULT FullName([out, retval] BSTR* pVal);
        [id(0x00000004), propget, helpstring("Returns the ProjectItem object."), helpcontext(0x0000eb1e)]
        HRESULT ProjectItem([out, retval] ProjectItem** pProjItem);
        [id(0x00000005), propget, helpstring("Returns an enumeration indicating the object kind."), helpcontext(0x0000ec5b)]
        HRESULT Kind([out, retval] vsCMElement* pCodeEltKind);
        [id(0x00000006), propget, helpstring("Returns if a CodeType object can be obtained from this object."), helpcontext(0x0000eda4)]
        HRESULT IsCodeType([out, retval] VARIANT_BOOL* pIsCodeType);
        [id(0x00000007), propget, helpstring("Describes the capabilities of the code model."), helpcontext(0x0000ecbf)]
        HRESULT InfoLocation([out, retval] vsCMInfoLocation* pInfoLocation);
        [id(0x00000008), propget, helpstring("Returns a collection of objects contained within this code construct."), helpcontext(0x0000ec71)]
        HRESULT Children([out, retval] CodeElements** ppCodeElements);
        [id(0x00000009), propget, helpstring("Programming language used to author the code."), helpcontext(0x0000ec53)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x0000000a), propget, helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT StartPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000b), propget, helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT EndPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000c), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x0000000d), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x0000000e), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x0000000f), helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT GetStartPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x00000010), helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT GetEndPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x0000001f), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** ParentObject);
        [id(0x00000020), propget, helpstring("Returns an object defining the parent namespace."), helpcontext(0x0000ec72)]
        HRESULT Namespace([out, retval] CodeNamespace** ppCodeNamespace);
        [id(0x00000021), propget, helpstring("Returns a collection of classes this item derives from."), helpcontext(0x0000ec65)]
        HRESULT Bases([out, retval] CodeElements** ppCodeElements);
        [id(0x00000022), propget, helpstring("Returns a collection of items contained by this element."), helpcontext(0x0000ec68)]
        HRESULT Members([out, retval] CodeElements** ppCodeElements);
        [id(0x00000023), propput, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access(vsCMAccess pAccess);
        [id(0x00000023), propget, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access([out, retval] vsCMAccess* pAccess);
        [id(0x00000024), propget, helpstring("Returns a collection of items containing attributes."), helpcontext(0x0000ec6b)]
        HRESULT Attributes([out, retval] CodeElements** ppCodeElements);
        [id(0x00000025), propget, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment([out, retval] BSTR* pDocComment);
        [id(0x00000025), propput, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment(BSTR pDocComment);
        [id(0x00000026), propget, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment([out, retval] BSTR* pComment);
        [id(0x00000026), propput, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment(BSTR pComment);
        [id(0x00000027), helpstring("Adds an item to the list of inherited objects."), helpcontext(0x0000ed9f)]
        HRESULT AddBase(
                        VARIANT Base, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeElement** ppOut);
        [id(0x00000028), helpstring("Creates a new attribute code construct and inserts the code in the correct location."), helpcontext(0x0000ed99)]
        HRESULT AddAttribute(
                        BSTR Name, 
                        BSTR Value, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeAttribute** ppCodeAttribute);
        [id(0x00000029), helpstring("Removes an object from the list of bases."), helpcontext(0x0000eda9)]
        HRESULT RemoveBase(VARIANT Element);
        [id(0x0000002a), helpstring("Removes a member code construct."), helpcontext(0x0000eda5)]
        HRESULT RemoveMember(VARIANT Element);
        [id(0x0000002b), propget, helpstring("Returns a Boolean telling if an object has another object as a base."), helpcontext(0x0000eda6)]
        HRESULT IsDerivedFrom(
                        BSTR FullName, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002c), propget, helpstring("Returns a collection of objects derived from this object."), helpcontext(0x0000eda7)]
        HRESULT DerivedTypes([out, retval] CodeElements** ppCodeElements);
    };

    [
      odl,
      uuid(0CFBC2B8-0D4E-11D3-8997-00C04F688DDE),
      helpstring("An object defining a namespace construct in a source file."),
      helpcontext(0x0000ec80),
      dual,
      oleautomation
    ]
    interface CodeNamespace : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] CodeElements** ppCollection);
        [id(00000000), propget, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(00000000), propput, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name(BSTR pVal);
        [id(0x00000003), propget, helpstring("Returns the fully qualified name of the object."), helpcontext(0x0000eda3)]
        HRESULT FullName([out, retval] BSTR* pVal);
        [id(0x00000004), propget, helpstring("Returns the ProjectItem object."), helpcontext(0x0000eb1e)]
        HRESULT ProjectItem([out, retval] ProjectItem** pProjItem);
        [id(0x00000005), propget, helpstring("Returns an enumeration indicating the object kind."), helpcontext(0x0000ec5b)]
        HRESULT Kind([out, retval] vsCMElement* pCodeEltKind);
        [id(0x00000006), propget, helpstring("Returns if a CodeType object can be obtained from this object."), helpcontext(0x0000eda4)]
        HRESULT IsCodeType([out, retval] VARIANT_BOOL* pIsCodeType);
        [id(0x00000007), propget, helpstring("Describes the capabilities of the code model."), helpcontext(0x0000ecbf)]
        HRESULT InfoLocation([out, retval] vsCMInfoLocation* pInfoLocation);
        [id(0x00000008), propget, helpstring("Returns a collection of objects contained within this code construct."), helpcontext(0x0000ec71)]
        HRESULT Children([out, retval] CodeElements** ppCodeElements);
        [id(0x00000009), propget, helpstring("Programming language used to author the code."), helpcontext(0x0000ec53)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x0000000a), propget, helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT StartPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000b), propget, helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT EndPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000c), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x0000000d), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x0000000e), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x0000000f), helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT GetStartPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x00000010), helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT GetEndPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x0000001f), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** ParentObject);
        [id(0x00000020), propget, helpstring("Returns a collection of items contained by this element."), helpcontext(0x0000ec68)]
        HRESULT Members([out, retval] CodeElements** ppMembers);
        [id(0x00000023), propget, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment([out, retval] BSTR* pDocComment);
        [id(0x00000023), propput, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment(BSTR pDocComment);
        [id(0x00000024), propget, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment([out, retval] BSTR* pComment);
        [id(0x00000024), propput, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment(BSTR pComment);
        [id(0x00000025), helpstring("Creates a new namespace code construct and inserts the code in the correct location."), helpcontext(0x0000ed95)]
        HRESULT AddNamespace(
                        BSTR Name, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeNamespace** ppCodeNamespace);
        [id(0x00000026), helpstring("Creates a new class code construct and inserts the code in the correct location."), helpcontext(0x0000ed96)]
        HRESULT AddClass(
                        BSTR Name, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional] VARIANT ImplementedInterfaces, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeClass** ppCodeClass);
        [id(0x00000027), helpstring("Creates a new interface code construct and inserts the code in the correct location."), helpcontext(0x0000ed9a)]
        HRESULT AddInterface(
                        BSTR Name, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeInterface** ppCodeInterface);
        [id(0x00000028), helpstring("Creates a new structure code construct and inserts the code in the correct location."), helpcontext(0x0000ed9c)]
        HRESULT AddStruct(
                        BSTR Name, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional] VARIANT ImplementedInterfaces, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeStruct** ppCodeStruct);
        [id(0x00000029), helpstring("Creates a new enumeration code construct and inserts the code in the correct location."), helpcontext(0x0000ed9d)]
        HRESULT AddEnum(
                        BSTR Name, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeEnum** ppCodeEnum);
        [id(0x0000002a), helpstring("Creates a new delegate code construct and inserts the code in the correct location."), helpcontext(0x0000ed9e)]
        HRESULT AddDelegate(
                        BSTR Name, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeDelegate** ppCodeDelegate);
        [id(0x0000002b), helpstring("Removes a code element from the source file."), helpcontext(0x0000ec59)]
        HRESULT Remove(VARIANT Element);
    };

    

    [
      odl,
      uuid(B1F42514-91CD-4D3A-8B25-A317D8032B24),
      helpstring("Object representing a class in source code."),
      helpcontext(0x0000edb9),
      dual,
      oleautomation
    ]
    interface CodeClass : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] CodeElements** ppCollection);
        [id(00000000), propget, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(00000000), propput, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name(BSTR pVal);
        [id(0x00000003), propget, helpstring("Returns the fully qualified name of the object."), helpcontext(0x0000eda3)]
        HRESULT FullName([out, retval] BSTR* pVal);
        [id(0x00000004), propget, helpstring("Returns the ProjectItem object."), helpcontext(0x0000eb1e)]
        HRESULT ProjectItem([out, retval] ProjectItem** pProjItem);
        [id(0x00000005), propget, helpstring("Returns an enumeration indicating the object kind."), helpcontext(0x0000ec5b)]
        HRESULT Kind([out, retval] vsCMElement* pCodeEltKind);
        [id(0x00000006), propget, helpstring("Returns if a CodeType object can be obtained from this object."), helpcontext(0x0000eda4)]
        HRESULT IsCodeType([out, retval] VARIANT_BOOL* pIsCodeType);
        [id(0x00000007), propget, helpstring("Describes the capabilities of the code model."), helpcontext(0x0000ecbf)]
        HRESULT InfoLocation([out, retval] vsCMInfoLocation* pInfoLocation);
        [id(0x00000008), propget, helpstring("Returns a collection of objects contained within this code construct."), helpcontext(0x0000ec71)]
        HRESULT Children([out, retval] CodeElements** ppCodeElements);
        [id(0x00000009), propget, helpstring("Programming language used to author the code."), helpcontext(0x0000ec53)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x0000000a), propget, helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT StartPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000b), propget, helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT EndPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000c), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x0000000d), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x0000000e), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x0000000f), helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT GetStartPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x00000010), helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT GetEndPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x0000001f), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** ParentObject);
        [id(0x00000020), propget, helpstring("Returns an object defining the parent namespace."), helpcontext(0x0000ec72)]
        HRESULT Namespace([out, retval] CodeNamespace** ppCodeNamespace);
        [id(0x00000021), propget, helpstring("Returns a collection of classes this item derives from."), helpcontext(0x0000ec65)]
        HRESULT Bases([out, retval] CodeElements** ppCodeElements);
        [id(0x00000022), propget, helpstring("Returns a collection of items contained by this element."), helpcontext(0x0000ec68)]
        HRESULT Members([out, retval] CodeElements** ppCodeElements);
        [id(0x00000023), propput, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access(vsCMAccess pAccess);
        [id(0x00000023), propget, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access([out, retval] vsCMAccess* pAccess);
        [id(0x00000024), propget, helpstring("Returns a collection of items containing attributes."), helpcontext(0x0000ec6b)]
        HRESULT Attributes([out, retval] CodeElements** ppCodeElements);
        [id(0x00000025), propget, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment([out, retval] BSTR* pDocComment);
        [id(0x00000025), propput, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment(BSTR pDocComment);
        [id(0x00000026), propget, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment([out, retval] BSTR* pComment);
        [id(0x00000026), propput, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment(BSTR pComment);
        [id(0x00000027), helpstring("Adds an item to the list of inherited objects."), helpcontext(0x0000ed9f)]
        HRESULT AddBase(
                        VARIANT Base, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeElement** ppOut);
        [id(0x00000028), helpstring("Creates a new attribute code construct and inserts the code in the correct location."), helpcontext(0x0000ed99)]
        HRESULT AddAttribute(
                        BSTR Name, 
                        BSTR Value, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeAttribute** ppCodeAttribute);
        [id(0x00000029), helpstring("Removes an object from the list of bases."), helpcontext(0x0000eda9)]
        HRESULT RemoveBase(VARIANT Element);
        [id(0x0000002a), helpstring("Removes a member code construct."), helpcontext(0x0000eda5)]
        HRESULT RemoveMember(VARIANT Element);
        [id(0x0000002b), propget, helpstring("Returns a Boolean telling if an object has another object as a base."), helpcontext(0x0000eda6)]
        HRESULT IsDerivedFrom(
                        BSTR FullName, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002c), propget, helpstring("Returns a collection of objects derived from this object."), helpcontext(0x0000eda7)]
        HRESULT DerivedTypes([out, retval] CodeElements** ppCodeElements);
        [id(0x0000003d), propget, helpstring("Returns a collection of interfaces implemented by this object."), helpcontext(0x0000eda8)]
        HRESULT ImplementedInterfaces([out, retval] CodeElements** ppCodeElements);
        [id(0x0000003e), propget, helpstring("Sets/Returns if the item is declared abstract or not."), helpcontext(0x0000ecad)]
        HRESULT IsAbstract([out, retval] VARIANT_BOOL* pIsAbstract);
        [id(0x0000003e), propput, helpstring("Sets/Returns if the item is declared abstract or not."), helpcontext(0x0000ecad)]
        HRESULT IsAbstract(VARIANT_BOOL pIsAbstract);
        [id(0x0000003f), helpstring("Adds an interface to the list of inherited objects."), helpcontext(0x0000eda0)]
        HRESULT AddImplementedInterface(
                        VARIANT Base, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeInterface** ppCodeInterface);
        [id(0x00000040), helpstring("Creates a new function code construct and inserts the code in the correct location."), helpcontext(0x0000ed97)]
        HRESULT AddFunction(
                        BSTR Name, 
                        vsCMFunction Kind, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [optional] VARIANT Location, 
                        [out, retval] CodeFunction** ppCodeFunction);
        [id(0x00000041), helpstring("Creates a new variable code construct and inserts the code in the correct location."), helpcontext(0x0000ed98)]
        HRESULT AddVariable(
                        BSTR Name, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [optional] VARIANT Location, 
                        [out, retval] CodeVariable** ppCodeVariable);
        [id(0x00000042), helpstring("Creates a new property code construct and inserts the code in the correct location."), helpcontext(0x0000ed9b)]
        HRESULT AddProperty(
                        BSTR GetterName, 
                        BSTR PutterName, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [optional] VARIANT Location, 
                        [out, retval] CodeProperty** ppCodeProperty);
        [id(0x00000043), helpstring("Creates a new class code construct and inserts the code in the correct location."), helpcontext(0x0000ed96)]
        HRESULT AddClass(
                        BSTR Name, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional] VARIANT ImplementedInterfaces, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeClass** ppCodeClass);
        [id(0x00000044), helpstring("Creates a new structure code construct and inserts the code in the correct location."), helpcontext(0x0000ed9c)]
        HRESULT AddStruct(
                        BSTR Name, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional] VARIANT ImplementedInterfaces, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeStruct** ppCodeStruct);
        [id(0x00000045), helpstring("Creates a new enumeration code construct and inserts the code in the correct location."), helpcontext(0x0000ed9d)]
        HRESULT AddEnum(
                        BSTR Name, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeEnum** ppCodeEnum);
        [id(0x00000046), helpstring("Creates a new delegate code construct and inserts the code in the correct location."), helpcontext(0x0000ed9e)]
        HRESULT AddDelegate(
                        BSTR Name, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeDelegate** ppCodeDelegate);
        [id(0x00000047), helpstring("Removes an interface from the list of implemented interfaces."), helpcontext(0x0000edb2)]
        HRESULT RemoveInterface(VARIANT Element);
    };

    [
      odl,
      uuid(0CFBC2BE-0D4E-11D3-8997-00C04F688DDE),
      helpstring("An object defining an item's attribute."),
      helpcontext(0x0000ec86),
      dual,
      oleautomation
    ]
    interface CodeAttribute : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] CodeElements** ppCollection);
        [id(00000000), propget, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(00000000), propput, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name(BSTR pVal);
        [id(0x00000003), propget, helpstring("Returns the fully qualified name of the object."), helpcontext(0x0000eda3)]
        HRESULT FullName([out, retval] BSTR* pVal);
        [id(0x00000004), propget, helpstring("Returns the ProjectItem object."), helpcontext(0x0000eb1e)]
        HRESULT ProjectItem([out, retval] ProjectItem** pProjItem);
        [id(0x00000005), propget, helpstring("Returns an enumeration indicating the object kind."), helpcontext(0x0000ec5b)]
        HRESULT Kind([out, retval] vsCMElement* pCodeEltKind);
        [id(0x00000006), propget, helpstring("Returns if a CodeType object can be obtained from this object."), helpcontext(0x0000eda4)]
        HRESULT IsCodeType([out, retval] VARIANT_BOOL* pIsCodeType);
        [id(0x00000007), propget, helpstring("Describes the capabilities of the code model."), helpcontext(0x0000ecbf)]
        HRESULT InfoLocation([out, retval] vsCMInfoLocation* pInfoLocation);
        [id(0x00000008), propget, helpstring("Returns a collection of objects contained within this code construct."), helpcontext(0x0000ec71)]
        HRESULT Children([out, retval] CodeElements** ppCodeElements);
        [id(0x00000009), propget, helpstring("Programming language used to author the code."), helpcontext(0x0000ec53)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x0000000a), propget, helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT StartPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000b), propget, helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT EndPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000c), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x0000000d), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x0000000e), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x0000000f), helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT GetStartPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x00000010), helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT GetEndPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x0000001f), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0x00000020), propget, helpstring("Sets/Returns the data for this object."), helpcontext(0x0000ec5c)]
        HRESULT Value([out, retval] BSTR* pValue);
        [id(0x00000020), propput, helpstring("Sets/Returns the data for this object."), helpcontext(0x0000ec5c)]
        HRESULT Value(BSTR pValue);
        [id(0x00000021), helpstring("Removes an object from a collection."), helpcontext(0x0000ea8c)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(B1F42510-91CD-4D3A-8B25-A317D8032B24),
      helpstring("Object representing an interface in source code."),
      helpcontext(0x0000edba),
      dual,
      oleautomation
    ]
    interface CodeInterface : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] CodeElements** ppCollection);
        [id(00000000), propget, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(00000000), propput, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name(BSTR pVal);
        [id(0x00000003), propget, helpstring("Returns the fully qualified name of the object."), helpcontext(0x0000eda3)]
        HRESULT FullName([out, retval] BSTR* pVal);
        [id(0x00000004), propget, helpstring("Returns the ProjectItem object."), helpcontext(0x0000eb1e)]
        HRESULT ProjectItem([out, retval] ProjectItem** pProjItem);
        [id(0x00000005), propget, helpstring("Returns an enumeration indicating the object kind."), helpcontext(0x0000ec5b)]
        HRESULT Kind([out, retval] vsCMElement* pCodeEltKind);
        [id(0x00000006), propget, helpstring("Returns if a CodeType object can be obtained from this object."), helpcontext(0x0000eda4)]
        HRESULT IsCodeType([out, retval] VARIANT_BOOL* pIsCodeType);
        [id(0x00000007), propget, helpstring("Describes the capabilities of the code model."), helpcontext(0x0000ecbf)]
        HRESULT InfoLocation([out, retval] vsCMInfoLocation* pInfoLocation);
        [id(0x00000008), propget, helpstring("Returns a collection of objects contained within this code construct."), helpcontext(0x0000ec71)]
        HRESULT Children([out, retval] CodeElements** ppCodeElements);
        [id(0x00000009), propget, helpstring("Programming language used to author the code."), helpcontext(0x0000ec53)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x0000000a), propget, helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT StartPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000b), propget, helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT EndPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000c), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x0000000d), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x0000000e), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x0000000f), helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT GetStartPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x00000010), helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT GetEndPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x0000001f), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** ParentObject);
        [id(0x00000020), propget, helpstring("Returns an object defining the parent namespace."), helpcontext(0x0000ec72)]
        HRESULT Namespace([out, retval] CodeNamespace** ppCodeNamespace);
        [id(0x00000021), propget, helpstring("Returns a collection of classes this item derives from."), helpcontext(0x0000ec65)]
        HRESULT Bases([out, retval] CodeElements** ppCodeElements);
        [id(0x00000022), propget, helpstring("Returns a collection of items contained by this element."), helpcontext(0x0000ec68)]
        HRESULT Members([out, retval] CodeElements** ppCodeElements);
        [id(0x00000023), propput, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access(vsCMAccess pAccess);
        [id(0x00000023), propget, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access([out, retval] vsCMAccess* pAccess);
        [id(0x00000024), propget, helpstring("Returns a collection of items containing attributes."), helpcontext(0x0000ec6b)]
        HRESULT Attributes([out, retval] CodeElements** ppCodeElements);
        [id(0x00000025), propget, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment([out, retval] BSTR* pDocComment);
        [id(0x00000025), propput, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment(BSTR pDocComment);
        [id(0x00000026), propget, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment([out, retval] BSTR* pComment);
        [id(0x00000026), propput, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment(BSTR pComment);
        [id(0x00000027), helpstring("Adds an item to the list of inherited objects."), helpcontext(0x0000ed9f)]
        HRESULT AddBase(
                        VARIANT Base, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeElement** ppOut);
        [id(0x00000028), helpstring("Creates a new attribute code construct and inserts the code in the correct location."), helpcontext(0x0000ed99)]
        HRESULT AddAttribute(
                        BSTR Name, 
                        BSTR Value, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeAttribute** ppCodeAttribute);
        [id(0x00000029), helpstring("Removes an object from the list of bases."), helpcontext(0x0000eda9)]
        HRESULT RemoveBase(VARIANT Element);
        [id(0x0000002a), helpstring("Removes a member code construct."), helpcontext(0x0000eda5)]
        HRESULT RemoveMember(VARIANT Element);
        [id(0x0000002b), propget, helpstring("Returns a Boolean telling if an object has another object as a base."), helpcontext(0x0000eda6)]
        HRESULT IsDerivedFrom(
                        BSTR FullName, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002c), propget, helpstring("Returns a collection of objects derived from this object."), helpcontext(0x0000eda7)]
        HRESULT DerivedTypes([out, retval] CodeElements** ppCodeElements);
        [id(0x0000003d), helpstring("Creates a new function code construct and inserts the code in the correct location."), helpcontext(0x0000ed97)]
        HRESULT AddFunction(
                        BSTR Name, 
                        vsCMFunction Kind, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeFunction** ppCodeFunction);
        [id(0x0000003e), helpstring("Creates a new property code construct and inserts the code in the correct location."), helpcontext(0x0000ed9b)]
        HRESULT AddProperty(
                        BSTR GetterName, 
                        BSTR PutterName, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [optional] VARIANT Location, 
                        [out, retval] CodeProperty** ppCodeProperty);
    };

    

    [
      odl,
      uuid(0CFBC2B9-0D4E-11D3-8997-00C04F688DDE),
      helpstring("An object defining a function construct in a source file."),
      helpcontext(0x0000ec81),
      dual,
      oleautomation
    ]
    interface CodeFunction : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] CodeElements** ppCollection);
        [id(00000000), propget, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(00000000), propput, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name(BSTR pVal);
        [id(0x00000003), propget, helpstring("Returns the fully qualified name of the object."), helpcontext(0x0000eda3)]
        HRESULT FullName([out, retval] BSTR* pVal);
        [id(0x00000004), propget, helpstring("Returns the ProjectItem object."), helpcontext(0x0000eb1e)]
        HRESULT ProjectItem([out, retval] ProjectItem** pProjItem);
        [id(0x00000005), propget, helpstring("Returns an enumeration indicating the object kind."), helpcontext(0x0000ec5b)]
        HRESULT Kind([out, retval] vsCMElement* pCodeEltKind);
        [id(0x00000006), propget, helpstring("Returns if a CodeType object can be obtained from this object."), helpcontext(0x0000eda4)]
        HRESULT IsCodeType([out, retval] VARIANT_BOOL* pIsCodeType);
        [id(0x00000007), propget, helpstring("Describes the capabilities of the code model."), helpcontext(0x0000ecbf)]
        HRESULT InfoLocation([out, retval] vsCMInfoLocation* pInfoLocation);
        [id(0x00000008), propget, helpstring("Returns a collection of objects contained within this code construct."), helpcontext(0x0000ec71)]
        HRESULT Children([out, retval] CodeElements** ppCodeElements);
        [id(0x00000009), propget, helpstring("Programming language used to author the code."), helpcontext(0x0000ec53)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x0000000a), propget, helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT StartPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000b), propget, helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT EndPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000c), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x0000000d), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x0000000e), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x0000000f), helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT GetStartPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x00000010), helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT GetEndPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x0000001f), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** ParentObject);
        [id(0x00000020), propget, helpstring("Returns an enumeration describing how a function is used."), helpcontext(0x0000ec5f)]
        HRESULT FunctionKind([out, retval] vsCMFunction* ppFunctionKind);
        [id(0x00000022), propget, helpstring("Returns a string holding the stub definition of this object."), helpcontext(0x0000ec60)]
        HRESULT Prototype(
                        [in, optional, defaultvalue(0)] long Flags, 
                        [out, retval] BSTR* pFullName);
        [id(0x00000023), propget, helpstring("Sets/Returns an object representing the programmatic type."), helpcontext(0x0000ec5d)]
        HRESULT Type([out, retval] CodeTypeRef** ppCodeTypeRef);
        [id(0x00000023), propput, helpstring("Sets/Returns an object representing the programmatic type."), helpcontext(0x0000ec5d)]
        HRESULT Type(CodeTypeRef* ppCodeTypeRef);
        [id(0x00000024), propget, helpstring("Returns a collection of parameters for this item."), helpcontext(0x0000ec73)]
        HRESULT Parameters([out, retval] CodeElements** ppMembers);
        [id(0x00000026), propput, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access(vsCMAccess Access);
        [id(0x00000026), propget, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access([out, retval] vsCMAccess* Access);
        [id(0x00000027), propget, helpstring("Returns if a code element object has multiple signatures."), helpcontext(0x0000ede8)]
        HRESULT IsOverloaded([out, retval] VARIANT_BOOL* pvbOverloaded);
        [id(0x00000028), propget, helpstring("Sets/Returns if the item is statically defined or not."), helpcontext(0x0000ecac)]
        HRESULT IsShared([out, retval] VARIANT_BOOL* Shared);
        [id(0x00000028), propput, helpstring("Sets/Returns if the item is statically defined or not."), helpcontext(0x0000ecac)]
        HRESULT IsShared(VARIANT_BOOL Shared);
        [id(0x00000029), propget, helpstring("Sets/Returns if the item is declared abstract or not."), helpcontext(0x0000ecad)]
        HRESULT MustImplement([out, retval] VARIANT_BOOL* MustImplement);
        [id(0x00000029), propput, helpstring("Sets/Returns if the item is declared abstract or not."), helpcontext(0x0000ecad)]
        HRESULT MustImplement(VARIANT_BOOL MustImplement);
        [id(0x0000002a), propget, helpstring("Returns a collection of overloaded methods for this item."), helpcontext(0x0000ec74)]
        HRESULT Overloads([out, retval] CodeElements** ppMembers);
        [id(0x0000002b), propget, helpstring("Returns a collection of items containing attributes."), helpcontext(0x0000ec6b)]
        HRESULT Attributes([out, retval] CodeElements** ppMembers);
        [id(0x0000002c), propget, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment([out, retval] BSTR* pDocComment);
        [id(0x0000002c), propput, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment(BSTR pDocComment);
        [id(0x0000002d), propget, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment([out, retval] BSTR* pComment);
        [id(0x0000002d), propput, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment(BSTR pComment);
        [id(0x0000002f), helpstring("Creates a new parameter code construct and inserts the code in the correct location."), helpcontext(0x0000eda2)]
        HRESULT AddParameter(
                        BSTR Name, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeParameter** ppCodeParameter);
        [id(0x00000030), helpstring("Creates a new attribute code construct and inserts the code in the correct location."), helpcontext(0x0000ed99)]
        HRESULT AddAttribute(
                        BSTR Name, 
                        BSTR Value, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeAttribute** ppCodeAttribute);
        [id(0x00000031), helpstring("Removes a parameter from the argument list."), helpcontext(0x0000edaf)]
        HRESULT RemoveParameter(VARIANT Element);
        [id(0x00000032), propget, helpstring("Sets/Returns if the function can be overridden."), helpcontext(0x0000edb0)]
        HRESULT CanOverride([out, retval] VARIANT_BOOL* pCanOverride);
        [id(0x00000032), propput, helpstring("Sets/Returns if the function can be overridden."), helpcontext(0x0000edb0)]
        HRESULT CanOverride(VARIANT_BOOL pCanOverride);
    };

    [
      odl,
      uuid(0CFBC2BC-0D4E-11D3-8997-00C04F688DDE),
      helpstring("An object defining the type of a construct in a source file."),
      helpcontext(0x0000ec84),
      dual,
      oleautomation
    ]
    interface CodeTypeRef : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** ParentObject);
        [id(0x00000003), propget, helpstring("Returns the base type of the item."), helpcontext(0x0000edb4)]
        HRESULT TypeKind([out, retval] vsCMTypeRef* pType);
        [id(0x00000004), propget, helpstring("Sets/Returns information describing what kind of object this item is."), helpcontext(0x0000edaa)]
        HRESULT CodeType([out, retval] CodeType** ppCodeType);
        [id(0x00000004), propput, helpstring("Sets/Returns information describing what kind of object this item is."), helpcontext(0x0000edaa)]
        HRESULT CodeType(CodeType* ppCodeType);
        [id(0x00000005), propget, helpstring("Sets/Returns an object representing the programmatic type."), helpcontext(0x0000ec5d)]
        HRESULT ElementType([out, retval] CodeTypeRef** ppCodeTypeRef);
        [id(0x00000005), propput, helpstring("Sets/Returns an object representing the programmatic type."), helpcontext(0x0000ec5d)]
        HRESULT ElementType(CodeTypeRef* ppCodeTypeRef);
        [id(0x00000006), propget, helpstring("Returns a string to use for displaying the object."), helpcontext(0x0000edab)]
        HRESULT AsString([out, retval] BSTR* pAsString);
        [id(0x00000007), propget, helpstring("Returns the fully qualified name of the object."), helpcontext(0x0000edac)]
        HRESULT AsFullName([out, retval] BSTR* pAsFullName);
        [id(0x00000008), propget, helpstring("If this item is an array, sets/returns the number of dimensions in this array."), helpcontext(0x0000edad)]
        HRESULT Rank([out, retval] long* pRank);
        [id(0x00000008), propput, helpstring("If this item is an array, sets/returns the number of dimensions in this array."), helpcontext(0x0000edad)]
        HRESULT Rank(long pRank);
        [id(0x00000009), helpstring("Creates an array of specified type, and inserts it into the code in the correct location."), helpcontext(0x0000edae)]
        HRESULT CreateArrayType(
                        [optional, defaultvalue(1)] long Rank, 
                        [out, retval] CodeTypeRef** ppTypeRef);
    };

    

    [
      odl,
      uuid(0CFBC2BD-0D4E-11D3-8997-00C04F688DDE),
      helpstring("An object defining a parameter to a function, property, etc. in a source file."),
      helpcontext(0x0000ec85),
      dual,
      oleautomation
    ]
    interface CodeParameter : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] CodeElements** ppCollection);
        [id(00000000), propget, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(00000000), propput, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name(BSTR pVal);
        [id(0x00000003), propget, helpstring("Returns the fully qualified name of the object."), helpcontext(0x0000eda3)]
        HRESULT FullName([out, retval] BSTR* pVal);
        [id(0x00000004), propget, helpstring("Returns the ProjectItem object."), helpcontext(0x0000eb1e)]
        HRESULT ProjectItem([out, retval] ProjectItem** pProjItem);
        [id(0x00000005), propget, helpstring("Returns an enumeration indicating the object kind."), helpcontext(0x0000ec5b)]
        HRESULT Kind([out, retval] vsCMElement* pCodeEltKind);
        [id(0x00000006), propget, helpstring("Returns if a CodeType object can be obtained from this object."), helpcontext(0x0000eda4)]
        HRESULT IsCodeType([out, retval] VARIANT_BOOL* pIsCodeType);
        [id(0x00000007), propget, helpstring("Describes the capabilities of the code model."), helpcontext(0x0000ecbf)]
        HRESULT InfoLocation([out, retval] vsCMInfoLocation* pInfoLocation);
        [id(0x00000008), propget, helpstring("Returns a collection of objects contained within this code construct."), helpcontext(0x0000ec71)]
        HRESULT Children([out, retval] CodeElements** ppCodeElements);
        [id(0x00000009), propget, helpstring("Programming language used to author the code."), helpcontext(0x0000ec53)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x0000000a), propget, helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT StartPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000b), propget, helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT EndPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000c), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x0000000d), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x0000000e), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x0000000f), helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT GetStartPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x00000010), helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT GetEndPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x0000001f), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] CodeElement** ppCodeElement);
        [id(0x00000020), propput, helpstring("Sets/Returns an object representing the programmatic type."), helpcontext(0x0000ec5d)]
        HRESULT Type(CodeTypeRef* pCodeTypeRef);
        [id(0x00000020), propget, helpstring("Sets/Returns an object representing the programmatic type."), helpcontext(0x0000ec5d)]
        HRESULT Type([out, retval] CodeTypeRef** pCodeTypeRef);
        [id(0x00000021), propget, helpstring("Returns a collection of items containing attributes."), helpcontext(0x0000ec6b)]
        HRESULT Attributes([out, retval] CodeElements** ppMembers);
        [id(0x00000022), propget, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment([out, retval] BSTR* pDocComment);
        [id(0x00000022), propput, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment(BSTR pDocComment);
        [id(0x00000023), helpstring("Creates a new attribute code construct and inserts the code in the correct location."), helpcontext(0x0000ed99)]
        HRESULT AddAttribute(
                        BSTR Name, 
                        BSTR Value, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeAttribute** ppCodeAttribute);
    };

    [
      odl,
      uuid(0CFBC2BB-0D4E-11D3-8997-00C04F688DDE),
      helpstring("An object defining a property construct in a source file."),
      helpcontext(0x0000ec83),
      dual,
      oleautomation
    ]
    interface CodeProperty : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] CodeElements** ppCollection);
        [id(00000000), propget, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(00000000), propput, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name(BSTR pVal);
        [id(0x00000003), propget, helpstring("Returns the fully qualified name of the object."), helpcontext(0x0000eda3)]
        HRESULT FullName([out, retval] BSTR* pVal);
        [id(0x00000004), propget, helpstring("Returns the ProjectItem object."), helpcontext(0x0000eb1e)]
        HRESULT ProjectItem([out, retval] ProjectItem** pProjItem);
        [id(0x00000005), propget, helpstring("Returns an enumeration indicating the object kind."), helpcontext(0x0000ec5b)]
        HRESULT Kind([out, retval] vsCMElement* pCodeEltKind);
        [id(0x00000006), propget, helpstring("Returns if a CodeType object can be obtained from this object."), helpcontext(0x0000eda4)]
        HRESULT IsCodeType([out, retval] VARIANT_BOOL* pIsCodeType);
        [id(0x00000007), propget, helpstring("Describes the capabilities of the code model."), helpcontext(0x0000ecbf)]
        HRESULT InfoLocation([out, retval] vsCMInfoLocation* pInfoLocation);
        [id(0x00000008), propget, helpstring("Returns a collection of objects contained within this code construct."), helpcontext(0x0000ec71)]
        HRESULT Children([out, retval] CodeElements** ppCodeElements);
        [id(0x00000009), propget, helpstring("Programming language used to author the code."), helpcontext(0x0000ec53)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x0000000a), propget, helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT StartPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000b), propget, helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT EndPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000c), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x0000000d), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x0000000e), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x0000000f), helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT GetStartPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x00000010), helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT GetEndPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x0000001f), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] CodeClass** ParentObject);
        [id(0x00000021), propget, helpstring("Returns a string holding the stub definition of this object."), helpcontext(0x0000ec60)]
        HRESULT Prototype(
                        [in, optional, defaultvalue(0)] long Flags, 
                        [out, retval] BSTR* pFullName);
        [id(0x00000022), propput, helpstring("Sets/Returns an object representing the programmatic type."), helpcontext(0x0000ec5d)]
        HRESULT Type(CodeTypeRef* pCodeTypeRef);
        [id(0x00000022), propget, helpstring("Sets/Returns an object representing the programmatic type."), helpcontext(0x0000ec5d)]
        HRESULT Type([out, retval] CodeTypeRef** pCodeTypeRef);
        [id(0x00000023), propget, helpstring("Sets/Returns an object defining the code to return a property."), helpcontext(0x0000ec6d)]
        HRESULT Getter([out, retval] CodeFunction** ppCodeFunction);
        [id(0x00000023), propput, helpstring("Sets/Returns an object defining the code to return a property."), helpcontext(0x0000ec6d)]
        HRESULT Getter(CodeFunction* ppCodeFunction);
        [id(0x00000024), propget, helpstring("Sets/Returns an object defining the code to set a property."), helpcontext(0x0000ec6c)]
        HRESULT Setter([out, retval] CodeFunction** ppCodeFunction);
        [id(0x00000024), propput, helpstring("Sets/Returns an object defining the code to set a property."), helpcontext(0x0000ec6c)]
        HRESULT Setter(CodeFunction* ppCodeFunction);
        [id(0x00000025), propput, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access(vsCMAccess Access);
        [id(0x00000025), propget, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access([out, retval] vsCMAccess* Access);
        [id(0x00000026), propget, helpstring("Returns a collection of items containing attributes."), helpcontext(0x0000ec6b)]
        HRESULT Attributes([out, retval] CodeElements** ppMembers);
        [id(0x00000027), propget, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment([out, retval] BSTR* pDocComment);
        [id(0x00000027), propput, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment(BSTR pDocComment);
        [id(0x00000028), propget, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment([out, retval] BSTR* pComment);
        [id(0x00000028), propput, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment(BSTR pComment);
        [id(0x0000002a), helpstring("Creates a new attribute code construct and inserts the code in the correct location."), helpcontext(0x0000ed99)]
        HRESULT AddAttribute(
                        BSTR Name, 
                        BSTR Value, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeAttribute** ppCodeAttribute);
    };

    [
      odl,
      uuid(0CFBC2BA-0D4E-11D3-8997-00C04F688DDE),
      helpstring("An object defining a variable construct in a source file."),
      helpcontext(0x0000ec82),
      dual,
      oleautomation
    ]
    interface CodeVariable : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] CodeElements** ppCollection);
        [id(00000000), propget, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(00000000), propput, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name(BSTR pVal);
        [id(0x00000003), propget, helpstring("Returns the fully qualified name of the object."), helpcontext(0x0000eda3)]
        HRESULT FullName([out, retval] BSTR* pVal);
        [id(0x00000004), propget, helpstring("Returns the ProjectItem object."), helpcontext(0x0000eb1e)]
        HRESULT ProjectItem([out, retval] ProjectItem** pProjItem);
        [id(0x00000005), propget, helpstring("Returns an enumeration indicating the object kind."), helpcontext(0x0000ec5b)]
        HRESULT Kind([out, retval] vsCMElement* pCodeEltKind);
        [id(0x00000006), propget, helpstring("Returns if a CodeType object can be obtained from this object."), helpcontext(0x0000eda4)]
        HRESULT IsCodeType([out, retval] VARIANT_BOOL* pIsCodeType);
        [id(0x00000007), propget, helpstring("Describes the capabilities of the code model."), helpcontext(0x0000ecbf)]
        HRESULT InfoLocation([out, retval] vsCMInfoLocation* pInfoLocation);
        [id(0x00000008), propget, helpstring("Returns a collection of objects contained within this code construct."), helpcontext(0x0000ec71)]
        HRESULT Children([out, retval] CodeElements** ppCodeElements);
        [id(0x00000009), propget, helpstring("Programming language used to author the code."), helpcontext(0x0000ec53)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x0000000a), propget, helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT StartPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000b), propget, helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT EndPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000c), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x0000000d), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x0000000e), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x0000000f), helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT GetStartPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x00000010), helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT GetEndPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x0000001f), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** ParentObject);
        [id(0x00000021), propget, helpstring("Sets/Returns an object defining the initialization code for an element."), helpcontext(0x0000ec6f)]
        HRESULT InitExpression([out, retval] VARIANT* pExpr);
        [id(0x00000021), propput, helpstring("Sets/Returns an object defining the initialization code for an element."), helpcontext(0x0000ec6f)]
        HRESULT InitExpression(VARIANT pExpr);
        [id(0x00000022), propget, helpstring("Returns a string holding the stub definition of this object."), helpcontext(0x0000ec60)]
        HRESULT Prototype(
                        [in, optional, defaultvalue(0)] long Flags, 
                        [out, retval] BSTR* pVal);
        [id(0x00000023), propput, helpstring("Sets/Returns an object representing the programmatic type."), helpcontext(0x0000ec5d)]
        HRESULT Type(CodeTypeRef* pCodeTypeRef);
        [id(0x00000023), propget, helpstring("Sets/Returns an object representing the programmatic type."), helpcontext(0x0000ec5d)]
        HRESULT Type([out, retval] CodeTypeRef** pCodeTypeRef);
        [id(0x00000024), propput, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access(vsCMAccess Access);
        [id(0x00000024), propget, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access([out, retval] vsCMAccess* Access);
        [id(0x00000025), propget, helpstring("Describes if this item is a constant or not."), helpcontext(0x0000ecc0)]
        HRESULT IsConstant([out, retval] VARIANT_BOOL* pIsConstant);
        [id(0x00000025), propput, helpstring("Describes if this item is a constant or not."), helpcontext(0x0000ecc0)]
        HRESULT IsConstant(VARIANT_BOOL pIsConstant);
        [id(0x00000026), propget, helpstring("Returns a collection of items containing attributes."), helpcontext(0x0000ec6b)]
        HRESULT Attributes([out, retval] CodeElements** ppMembers);
        [id(0x00000027), propget, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment([out, retval] BSTR* pDocComment);
        [id(0x00000027), propput, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment(BSTR pDocComment);
        [id(0x00000028), propget, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment([out, retval] BSTR* pComment);
        [id(0x00000028), propput, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment(BSTR pComment);
        [id(0x00000029), helpstring("Creates a new attribute code construct and inserts the code in the correct location."), helpcontext(0x0000ed99)]
        HRESULT AddAttribute(
                        BSTR Name, 
                        BSTR Value, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeAttribute** ppCodeAttribute);
        [id(0x0000002a), propget, helpstring("Sets/Returns if the item is common to all instances of this object type, or to this object specifically."), helpcontext(0x0000edb1)]
        HRESULT IsShared([out, retval] VARIANT_BOOL* pShared);
        [id(0x0000002a), propput, helpstring("Sets/Returns if the item is common to all instances of this object type, or to this object specifically."), helpcontext(0x0000edb1)]
        HRESULT IsShared(VARIANT_BOOL pShared);
    };

    [
      odl,
      uuid(B1F42511-91CD-4D3A-8B25-A317D8032B24),
      helpstring("Object representing a structure in source code."),
      helpcontext(0x0000edba),
      dual,
      oleautomation
    ]
    interface CodeStruct : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] CodeElements** ppCollection);
        [id(00000000), propget, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(00000000), propput, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name(BSTR pVal);
        [id(0x00000003), propget, helpstring("Returns the fully qualified name of the object."), helpcontext(0x0000eda3)]
        HRESULT FullName([out, retval] BSTR* pVal);
        [id(0x00000004), propget, helpstring("Returns the ProjectItem object."), helpcontext(0x0000eb1e)]
        HRESULT ProjectItem([out, retval] ProjectItem** pProjItem);
        [id(0x00000005), propget, helpstring("Returns an enumeration indicating the object kind."), helpcontext(0x0000ec5b)]
        HRESULT Kind([out, retval] vsCMElement* pCodeEltKind);
        [id(0x00000006), propget, helpstring("Returns if a CodeType object can be obtained from this object."), helpcontext(0x0000eda4)]
        HRESULT IsCodeType([out, retval] VARIANT_BOOL* pIsCodeType);
        [id(0x00000007), propget, helpstring("Describes the capabilities of the code model."), helpcontext(0x0000ecbf)]
        HRESULT InfoLocation([out, retval] vsCMInfoLocation* pInfoLocation);
        [id(0x00000008), propget, helpstring("Returns a collection of objects contained within this code construct."), helpcontext(0x0000ec71)]
        HRESULT Children([out, retval] CodeElements** ppCodeElements);
        [id(0x00000009), propget, helpstring("Programming language used to author the code."), helpcontext(0x0000ec53)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x0000000a), propget, helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT StartPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000b), propget, helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT EndPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000c), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x0000000d), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x0000000e), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x0000000f), helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT GetStartPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x00000010), helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT GetEndPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x0000001f), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** ParentObject);
        [id(0x00000020), propget, helpstring("Returns an object defining the parent namespace."), helpcontext(0x0000ec72)]
        HRESULT Namespace([out, retval] CodeNamespace** ppCodeNamespace);
        [id(0x00000021), propget, helpstring("Returns a collection of classes this item derives from."), helpcontext(0x0000ec65)]
        HRESULT Bases([out, retval] CodeElements** ppCodeElements);
        [id(0x00000022), propget, helpstring("Returns a collection of items contained by this element."), helpcontext(0x0000ec68)]
        HRESULT Members([out, retval] CodeElements** ppCodeElements);
        [id(0x00000023), propput, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access(vsCMAccess pAccess);
        [id(0x00000023), propget, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access([out, retval] vsCMAccess* pAccess);
        [id(0x00000024), propget, helpstring("Returns a collection of items containing attributes."), helpcontext(0x0000ec6b)]
        HRESULT Attributes([out, retval] CodeElements** ppCodeElements);
        [id(0x00000025), propget, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment([out, retval] BSTR* pDocComment);
        [id(0x00000025), propput, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment(BSTR pDocComment);
        [id(0x00000026), propget, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment([out, retval] BSTR* pComment);
        [id(0x00000026), propput, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment(BSTR pComment);
        [id(0x00000027), helpstring("Adds an item to the list of inherited objects."), helpcontext(0x0000ed9f)]
        HRESULT AddBase(
                        VARIANT Base, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeElement** ppOut);
        [id(0x00000028), helpstring("Creates a new attribute code construct and inserts the code in the correct location."), helpcontext(0x0000ed99)]
        HRESULT AddAttribute(
                        BSTR Name, 
                        BSTR Value, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeAttribute** ppCodeAttribute);
        [id(0x00000029), helpstring("Removes an object from the list of bases."), helpcontext(0x0000eda9)]
        HRESULT RemoveBase(VARIANT Element);
        [id(0x0000002a), helpstring("Removes a member code construct."), helpcontext(0x0000eda5)]
        HRESULT RemoveMember(VARIANT Element);
        [id(0x0000002b), propget, helpstring("Returns a Boolean telling if an object has another object as a base."), helpcontext(0x0000eda6)]
        HRESULT IsDerivedFrom(
                        BSTR FullName, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002c), propget, helpstring("Returns a collection of objects derived from this object."), helpcontext(0x0000eda7)]
        HRESULT DerivedTypes([out, retval] CodeElements** ppCodeElements);
        [id(0x0000003d), propget, helpstring("Returns a collection of interfaces implemented by this object."), helpcontext(0x0000eda8)]
        HRESULT ImplementedInterfaces([out, retval] CodeElements** ppCodeElements);
        [id(0x0000003e), propget, helpstring("Returns Boolean indicating if this item is derived from a particular item."), helpcontext(0x0000ec67)]
        HRESULT IsAbstract([out, retval] VARIANT_BOOL* pIsAbstract);
        [id(0x0000003e), propput, helpstring("Returns Boolean indicating if this item is derived from a particular item."), helpcontext(0x0000ec67)]
        HRESULT IsAbstract(VARIANT_BOOL pIsAbstract);
        [id(0x0000003f), helpstring("Adds an interface to the list of inherited objects."), helpcontext(0x0000eda0)]
        HRESULT AddImplementedInterface(
                        VARIANT Base, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeInterface** ppCodeInterface);
        [id(0x00000040), helpstring("Creates a new function code construct and inserts the code in the correct location."), helpcontext(0x0000ed97)]
        HRESULT AddFunction(
                        BSTR Name, 
                        vsCMFunction Kind, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [optional] VARIANT Location, 
                        [out, retval] CodeFunction** ppCodeFunction);
        [id(0x00000041), helpstring("Creates a new variable code construct and inserts the code in the correct location."), helpcontext(0x0000ed98)]
        HRESULT AddVariable(
                        BSTR Name, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [optional] VARIANT Location, 
                        [out, retval] CodeVariable** ppCodeVariable);
        [id(0x00000042), helpstring("Creates a new property code construct and inserts the code in the correct location."), helpcontext(0x0000ed9b)]
        HRESULT AddProperty(
                        BSTR GetterName, 
                        BSTR PutterName, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [optional] VARIANT Location, 
                        [out, retval] CodeProperty** ppCodeProperty);
        [id(0x00000043), helpstring("Creates a new class code construct and inserts the code in the correct location."), helpcontext(0x0000ed96)]
        HRESULT AddClass(
                        BSTR Name, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional] VARIANT ImplementedInterfaces, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeClass** ppCodeClass);
        [id(0x00000044), helpstring("Creates a new structure code construct and inserts the code in the correct location."), helpcontext(0x0000ed9c)]
        HRESULT AddStruct(
                        BSTR Name, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional] VARIANT ImplementedInterfaces, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeStruct** ppCodeStruct);
        [id(0x00000045), helpstring("Creates a new enumeration code construct and inserts the code in the correct location."), helpcontext(0x0000ed9d)]
        HRESULT AddEnum(
                        BSTR Name, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeEnum** ppCodeEnum);
        [id(0x00000046), helpstring("Creates a new delegate code construct and inserts the code in the correct location."), helpcontext(0x0000ed9e)]
        HRESULT AddDelegate(
                        BSTR Name, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeDelegate** ppCodeDelegate);
        [id(0x00000047), helpstring("Removes an interface from the list of implemented interfaces."), helpcontext(0x0000edb2)]
        HRESULT RemoveInterface(VARIANT Element);
    };

    [
      odl,
      uuid(B1F42512-91CD-4D3A-8B25-A317D8032B24),
      helpstring("Object representing an enumeration in source code."),
      helpcontext(0x0000edba),
      dual,
      oleautomation
    ]
    interface CodeEnum : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] CodeElements** ppCollection);
        [id(00000000), propget, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(00000000), propput, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name(BSTR pVal);
        [id(0x00000003), propget, helpstring("Returns the fully qualified name of the object."), helpcontext(0x0000eda3)]
        HRESULT FullName([out, retval] BSTR* pVal);
        [id(0x00000004), propget, helpstring("Returns the ProjectItem object."), helpcontext(0x0000eb1e)]
        HRESULT ProjectItem([out, retval] ProjectItem** pProjItem);
        [id(0x00000005), propget, helpstring("Returns an enumeration indicating the object kind."), helpcontext(0x0000ec5b)]
        HRESULT Kind([out, retval] vsCMElement* pCodeEltKind);
        [id(0x00000006), propget, helpstring("Returns if a CodeType object can be obtained from this object."), helpcontext(0x0000eda4)]
        HRESULT IsCodeType([out, retval] VARIANT_BOOL* pIsCodeType);
        [id(0x00000007), propget, helpstring("Describes the capabilities of the code model."), helpcontext(0x0000ecbf)]
        HRESULT InfoLocation([out, retval] vsCMInfoLocation* pInfoLocation);
        [id(0x00000008), propget, helpstring("Returns a collection of objects contained within this code construct."), helpcontext(0x0000ec71)]
        HRESULT Children([out, retval] CodeElements** ppCodeElements);
        [id(0x00000009), propget, helpstring("Programming language used to author the code."), helpcontext(0x0000ec53)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x0000000a), propget, helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT StartPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000b), propget, helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT EndPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000c), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x0000000d), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x0000000e), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x0000000f), helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT GetStartPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x00000010), helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT GetEndPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x0000001f), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** ParentObject);
        [id(0x00000020), propget, helpstring("Returns an object defining the parent namespace."), helpcontext(0x0000ec72)]
        HRESULT Namespace([out, retval] CodeNamespace** ppCodeNamespace);
        [id(0x00000021), propget, helpstring("Returns a collection of classes this item derives from."), helpcontext(0x0000ec65)]
        HRESULT Bases([out, retval] CodeElements** ppCodeElements);
        [id(0x00000022), propget, helpstring("Returns a collection of items contained by this element."), helpcontext(0x0000ec68)]
        HRESULT Members([out, retval] CodeElements** ppCodeElements);
        [id(0x00000023), propput, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access(vsCMAccess pAccess);
        [id(0x00000023), propget, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access([out, retval] vsCMAccess* pAccess);
        [id(0x00000024), propget, helpstring("Returns a collection of items containing attributes."), helpcontext(0x0000ec6b)]
        HRESULT Attributes([out, retval] CodeElements** ppCodeElements);
        [id(0x00000025), propget, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment([out, retval] BSTR* pDocComment);
        [id(0x00000025), propput, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment(BSTR pDocComment);
        [id(0x00000026), propget, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment([out, retval] BSTR* pComment);
        [id(0x00000026), propput, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment(BSTR pComment);
        [id(0x00000027), helpstring("Adds an item to the list of inherited objects."), helpcontext(0x0000ed9f)]
        HRESULT AddBase(
                        VARIANT Base, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeElement** ppOut);
        [id(0x00000028), helpstring("Creates a new attribute code construct and inserts the code in the correct location."), helpcontext(0x0000ed99)]
        HRESULT AddAttribute(
                        BSTR Name, 
                        BSTR Value, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeAttribute** ppCodeAttribute);
        [id(0x00000029), helpstring("Removes an object from the list of bases."), helpcontext(0x0000eda9)]
        HRESULT RemoveBase(VARIANT Element);
        [id(0x0000002a), helpstring("Removes a member code construct."), helpcontext(0x0000eda5)]
        HRESULT RemoveMember(VARIANT Element);
        [id(0x0000002b), propget, helpstring("Returns a Boolean telling if an object has another object as a base."), helpcontext(0x0000eda6)]
        HRESULT IsDerivedFrom(
                        BSTR FullName, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002c), propget, helpstring("Returns a collection of objects derived from this object."), helpcontext(0x0000eda7)]
        HRESULT DerivedTypes([out, retval] CodeElements** ppCodeElements);
        [id(0x0000003d), helpstring("Creates a new member code construct and inserts the code in the correct location."), helpcontext(0x0000eda1)]
        HRESULT AddMember(
                        BSTR Name, 
                        [optional] VARIANT Value, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeVariable** ppCodeElements);
    };

    [
      odl,
      uuid(B1F42513-91CD-4D3A-8B25-A317D8032B24),
      helpstring("Object representing a delegate in source code."),
      helpcontext(0x0000edba),
      dual,
      oleautomation
    ]
    interface CodeDelegate : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] CodeElements** ppCollection);
        [id(00000000), propget, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(00000000), propput, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name(BSTR pVal);
        [id(0x00000003), propget, helpstring("Returns the fully qualified name of the object."), helpcontext(0x0000eda3)]
        HRESULT FullName([out, retval] BSTR* pVal);
        [id(0x00000004), propget, helpstring("Returns the ProjectItem object."), helpcontext(0x0000eb1e)]
        HRESULT ProjectItem([out, retval] ProjectItem** pProjItem);
        [id(0x00000005), propget, helpstring("Returns an enumeration indicating the object kind."), helpcontext(0x0000ec5b)]
        HRESULT Kind([out, retval] vsCMElement* pCodeEltKind);
        [id(0x00000006), propget, helpstring("Returns if a CodeType object can be obtained from this object."), helpcontext(0x0000eda4)]
        HRESULT IsCodeType([out, retval] VARIANT_BOOL* pIsCodeType);
        [id(0x00000007), propget, helpstring("Describes the capabilities of the code model."), helpcontext(0x0000ecbf)]
        HRESULT InfoLocation([out, retval] vsCMInfoLocation* pInfoLocation);
        [id(0x00000008), propget, helpstring("Returns a collection of objects contained within this code construct."), helpcontext(0x0000ec71)]
        HRESULT Children([out, retval] CodeElements** ppCodeElements);
        [id(0x00000009), propget, helpstring("Programming language used to author the code."), helpcontext(0x0000ec53)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x0000000a), propget, helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT StartPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000b), propget, helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT EndPoint([out, retval] TextPoint** ppTextPoint);
        [id(0x0000000c), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x0000000d), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x0000000e), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x0000000f), helpstring("Returns a TextPoint object defining the beginning of the code item."), helpcontext(0x0000ec62)]
        HRESULT GetStartPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x00000010), helpstring("Returns a TextPoint object defining the end of the code item."), helpcontext(0x0000ec63)]
        HRESULT GetEndPoint(
                        [in, optional, defaultvalue(10)] vsCMPart Part, 
                        [out, retval] TextPoint** ppTextPoint);
        [id(0x0000001f), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** ParentObject);
        [id(0x00000020), propget, helpstring("Returns an object defining the parent namespace."), helpcontext(0x0000ec72)]
        HRESULT Namespace([out, retval] CodeNamespace** ppCodeNamespace);
        [id(0x00000021), propget, helpstring("Returns a collection of classes this item derives from."), helpcontext(0x0000ec65)]
        HRESULT Bases([out, retval] CodeElements** ppCodeElements);
        [id(0x00000022), propget, helpstring("Returns a collection of items contained by this element."), helpcontext(0x0000ec68)]
        HRESULT Members([out, retval] CodeElements** ppCodeElements);
        [id(0x00000023), propput, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access(vsCMAccess pAccess);
        [id(0x00000023), propget, helpstring("Defines the access attributes of this item."), helpcontext(0x0000ecbe)]
        HRESULT Access([out, retval] vsCMAccess* pAccess);
        [id(0x00000024), propget, helpstring("Returns a collection of items containing attributes."), helpcontext(0x0000ec6b)]
        HRESULT Attributes([out, retval] CodeElements** ppCodeElements);
        [id(0x00000025), propget, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment([out, retval] BSTR* pDocComment);
        [id(0x00000025), propput, helpstring("Returns the document comment on the current code model element."), helpcontext(0x0000edd2)]
        HRESULT DocComment(BSTR pDocComment);
        [id(0x00000026), propget, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment([out, retval] BSTR* pComment);
        [id(0x00000026), propput, helpstring("Sets/Returns an object defining the comment for this object."), helpcontext(0x0000ec6e)]
        HRESULT Comment(BSTR pComment);
        [id(0x00000027), helpstring("Adds an item to the list of inherited objects."), helpcontext(0x0000ed9f)]
        HRESULT AddBase(
                        VARIANT Base, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeElement** ppOut);
        [id(0x00000028), helpstring("Creates a new attribute code construct and inserts the code in the correct location."), helpcontext(0x0000ed99)]
        HRESULT AddAttribute(
                        BSTR Name, 
                        BSTR Value, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeAttribute** ppCodeAttribute);
        [id(0x00000029), helpstring("Removes an object from the list of bases."), helpcontext(0x0000eda9)]
        HRESULT RemoveBase(VARIANT Element);
        [id(0x0000002a), helpstring("Removes a member code construct."), helpcontext(0x0000eda5)]
        HRESULT RemoveMember(VARIANT Element);
        [id(0x0000002b), propget, helpstring("Returns a Boolean telling if an object has another object as a base."), helpcontext(0x0000eda6)]
        HRESULT IsDerivedFrom(
                        BSTR FullName, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x0000002c), propget, helpstring("Returns a collection of objects derived from this object."), helpcontext(0x0000eda7)]
        HRESULT DerivedTypes([out, retval] CodeElements** ppCodeElements);
        [id(0x0000003d), propget, helpstring("Returns the class this object inherits from."), helpcontext(0x0000edb3)]
        HRESULT BaseClass([out, retval] CodeClass** ppCodeClass);
        [id(0x0000003e), propget, helpstring("Returns a string holding the stub definition of this object."), helpcontext(0x0000ec60)]
        HRESULT Prototype(
                        [optional, defaultvalue(0)] long Flags, 
                        [out, retval] BSTR* pPrototype);
        [id(0x0000003f), propget, helpstring("Sets/Returns an object representing the programmatic type."), helpcontext(0x0000ec5d)]
        HRESULT Type([out, retval] CodeTypeRef** pCodeTypeRef);
        [id(0x0000003f), propput, helpstring("Sets/Returns an object representing the programmatic type."), helpcontext(0x0000ec5d)]
        HRESULT Type(CodeTypeRef* pCodeTypeRef);
        [id(0x00000040), propget, helpstring("Returns a collection of parameters for this item."), helpcontext(0x0000ec73)]
        HRESULT Parameters([out, retval] CodeElements** ppParameters);
        [id(0x00000041), helpstring("Creates a new parameter code construct and inserts the code in the correct location."), helpcontext(0x0000eda2)]
        HRESULT AddParameter(
                        BSTR Name, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeParameter** ppCodeParameter);
        [id(0x00000042), helpstring("Removes a parameter from the argument list."), helpcontext(0x0000edaf)]
        HRESULT RemoveParameter(VARIANT Element);
    };

    [
      odl,
      uuid(ED1A3F99-4477-11D3-89BF-00C04F688DDE),
      helpstring("An object allowing access to programmatic constructs in a source file."),
      helpcontext(0x0000ec7c),
      dual,
      oleautomation
    ]
    interface FileCodeModel : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] ProjectItem** pProjItem);
        [id(0x00000003), propget, helpstring("Programming language used to author the code."), helpcontext(0x0000ec53)]
        HRESULT Language([out, retval] BSTR* pLanguage);
        [id(0x00000004), propget, helpstring("Returns a collection of code elements."), helpcontext(0x0000ec54)]
        HRESULT CodeElements([out, retval] CodeElements** ppCodeElements);
        [id(0x00000005), helpstring("Returns a code element at a specific location in a source file."), helpcontext(0x0000ec55)]
        HRESULT CodeElementFromPoint(
                        TextPoint* Point, 
                        vsCMElement Scope, 
                        [out, retval] CodeElement** ppCodeElement);
        [id(0x00000007), helpstring("Creates a new namespace code construct and inserts the code in the correct location."), helpcontext(0x0000ed95)]
        HRESULT AddNamespace(
                        BSTR Name, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeNamespace** ppCodeNamespace);
        [id(0x00000008), helpstring("Creates a new class code construct and inserts the code in the correct location."), helpcontext(0x0000ed96)]
        HRESULT AddClass(
                        BSTR Name, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional] VARIANT ImplementedInterfaces, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeClass** ppCodeClass);
        [id(0x00000009), helpstring("Creates a new interface code construct and inserts the code in the correct location."), helpcontext(0x0000ed9a)]
        HRESULT AddInterface(
                        BSTR Name, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeInterface** ppCodeInterface);
        [id(0x0000000a), helpstring("Creates a new function code construct and inserts the code in the correct location."), helpcontext(0x0000ed97)]
        HRESULT AddFunction(
                        BSTR Name, 
                        vsCMFunction Kind, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeFunction** ppCodeFunction);
        [id(0x0000000b), helpstring("Creates a new variable code construct and inserts the code in the correct location."), helpcontext(0x0000ed98)]
        HRESULT AddVariable(
                        BSTR Name, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeVariable** ppCodeVariable);
        [id(0x0000000c), helpstring("Creates a new attribute code construct and inserts the code in the correct location."), helpcontext(0x0000ed99)]
        HRESULT AddAttribute(
                        BSTR Name, 
                        BSTR Value, 
                        [optional] VARIANT Position, 
                        [out, retval] CodeAttribute** ppCodeAttribute);
        [id(0x0000000d), helpstring("Creates a new structure code construct and inserts the code in the correct location."), helpcontext(0x0000ed9c)]
        HRESULT AddStruct(
                        BSTR Name, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional] VARIANT ImplementedInterfaces, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeStruct** ppCodeStruct);
        [id(0x0000000e), helpstring("Creates a new enumeration code construct and inserts the code in the correct location."), helpcontext(0x0000ed9d)]
        HRESULT AddEnum(
                        BSTR Name, 
                        [optional] VARIANT Position, 
                        [optional] VARIANT Bases, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeEnum** ppCodeEnum);
        [id(0x0000000f), helpstring("Creates a new delegate code construct and inserts the code in the correct location."), helpcontext(0x0000ed9e)]
        HRESULT AddDelegate(
                        BSTR Name, 
                        VARIANT Type, 
                        [optional] VARIANT Position, 
                        [optional, defaultvalue(32)] vsCMAccess Access, 
                        [out, retval] CodeDelegate** ppCodeDelegate);
        [id(0x00000010), helpstring("Removes a code element from the source file."), helpcontext(0x0000ec59)]
        HRESULT Remove(VARIANT Element);
    };

    [
      odl,
      uuid(33C5EBB8-244E-449D-9CEE-FAD70A774E59),
      dual,
      oleautomation
    ]
    interface ContextAttributes : IDispatch {
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
        [id(00000000), helpstring("Get a ContextAttribute by index from the attribute collection."), helpcontext(0x0000edc3)]
        HRESULT Item(
                        VARIANT index, 
                        [out, retval] ContextAttribute** ppVal);
        [id(0x00000001), propget, helpstring("Get the DTE object."), helpcontext(0x0000edbf)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x00000002), propget, helpstring("Get the parent object for this attribute collection (DTE or Window)."), helpcontext(0x0000edc4)]
        HRESULT Parent([out, retval] IDispatch** lppaReturn);
        [id(0x00000003), propget, helpstring("Get the number of attribute names in this collection."), helpcontext(0x0000edc5)]
        HRESULT Count([out, retval] long* Count);
        [id(0x00000004), helpstring("Add an attribute name/value pair to this collection."), helpcontext(0x0000edc6)]
        HRESULT Add(
                        BSTR AttributeName, 
                        BSTR AttributeValue, 
                        vsContextAttributeType Type, 
                        [out, retval] ContextAttribute** ppVal);
        [id(0x00000005), propget, helpstring("Get the type of this collection (Global, Window, High Priority)."), helpcontext(0x0000edc7)]
        HRESULT Type([out, retval] vsContextAttributes* Type);
        [id(0x00000006), propget, helpstring("Get the High Priority attribute collection.  There is only one instance of this attribute collection.  It is only available from Global attribute collection."), helpcontext(0x0000edc8)]
        HRESULT HighPriorityAttributes([out, retval] ContextAttributes** ppVal);
        [id(0x00000007), helpstring("Refresh the contents of this attribute collection."), helpcontext(0x0000edc9)]
        HRESULT Refresh();
    };

    [
      odl,
      uuid(1A6E2CB3-B897-42EB-96BE-FF0FDB65DB2F),
      dual,
      oleautomation
    ]
    interface ContextAttribute : IDispatch {
        [id(00000000), propget, helpstring("Get the name of this attribute."), helpcontext(0x0000edbe)]
        HRESULT Name([out, retval] BSTR* pName);
        [id(0x00000001), propget, helpstring("Get the DTE object."), helpcontext(0x0000edbf)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x00000002), propget, helpstring("Get the parent attribute collection for this attribute."), helpcontext(0x0000edc0)]
        HRESULT Collection([out, retval] ContextAttributes** ppCollection);
        [id(0x00000003), propget, helpstring("Get the collection of values for this attribute."), helpcontext(0x0000edc1)]
        HRESULT Values([out, retval] VARIANT* pVal);
        [id(0x00000004), helpstring("Remove this attribute from its parent collection."), helpcontext(0x0000edc2)]
        HRESULT Remove();
    };

    

    [
      odl,
      uuid(53A87FA1-CE93-48BF-958B-C6DA793C5028),
      helpstring("Provides information about an add-in to other Add-in objects."),
      helpcontext(0x0000ea93),
      dual,
      oleautomation
    ]
    interface AddIn : IDispatch {
        [id(00000000), propget, helpstring("Returns a string containing the object's description."), helpcontext(0x0000eabc)]
        HRESULT Description([out, retval] BSTR* lpbstr);
        [id(00000000), propput, helpstring("Returns a string containing the object's description."), helpcontext(0x0000eabc)]
        HRESULT Description([in] BSTR lpbstr);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] AddIns** lppaddins);
        [id(0x00000003), propget, helpstring("Returns the ProgID as obtained from the Add-in's registry entry."), helpcontext(0x0000eaf3)]
        HRESULT ProgID([out, retval] BSTR* lpbstr);
        [id(0x00000004), propget, helpstring("Returns the Add-in's CLSID as obtained from the Add-in's registry entry."), helpcontext(0x0000ead1)]
        HRESULT Guid([out, retval] BSTR* lpbstr);
        [id(0x00000006), propget, helpstring("Returns value indicating whether an Add-ins is loaded and connected."), helpcontext(0x0000eab9)]
        HRESULT Connected([out, retval] VARIANT_BOOL* lpfConnect);
        [id(0x00000006), propput, helpstring("Returns value indicating whether an Add-ins is loaded and connected."), helpcontext(0x0000eab9)]
        HRESULT Connected([in] VARIANT_BOOL lpfConnect);
        [id(0x00000007), propget, helpstring("Returns an additional OLE automation object for support of other add-ins."), helpcontext(0x0000eaec)]
        HRESULT Object([out, retval] IDispatch** lppdisp);
        [id(0x00000007), propput, helpstring("Returns an additional OLE automation object for support of other add-ins."), helpcontext(0x0000eaec)]
        HRESULT Object([in] IDispatch* lppdisp);
        [id(0x0000012d), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x0000012e), propget, helpstring("Returns the name of the object."), helpcontext(0x0000edbb)]
        HRESULT Name([out, retval] BSTR* lpbstr);
        [id(0x0000012f), helpstring("Removes the Add-in from the collection of Add-ins, and makes it unavailable."), helpcontext(0x0000ec0a)]
        HRESULT Remove();
        [id(0x00000130), propget, helpstring("Returns the location of a DLL containing localized resources, if available."), helpcontext(0x0000edcf)]
        HRESULT SatelliteDllPath([out, retval] BSTR* pbstrPath);
    };

    [
      odl,
      uuid(50590801-D13E-4404-80C2-5CA30A4D0EE8),
      helpstring("Provides information about an add-in to other Add-in objects."),
      helpcontext(0x0000ea93),
      dual,
      oleautomation
    ]
    interface AddIns : IDispatch {
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] AddIn** lppaddin);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** lppaReturn);
        [id(0x00000028), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* lplReturn);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
        [id(0x00000029), helpstring("Updates the collection as if the Add-in Manager Dialog was opened."), helpcontext(0x0000ea92)]
        HRESULT Update();
        [id(0x00000064), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x00000066), helpstring("Adds an Add-in to the collection."), helpcontext(0x0000ec08)]
        HRESULT Add(
                        BSTR ProgID, 
                        BSTR Description, 
                        BSTR Name, 
                        VARIANT_BOOL Connected, 
                        [out, retval] AddIn** __MIDL__AddIns0000);
    };

    

    [
      odl,
      uuid(134170F8-93B1-42DD-9F89-A2AC7010BA07),
      helpstring("Allows access to all events in the extensibility model."),
      helpcontext(0x0000ea9a),
      dual,
      oleautomation
    ]
    interface Events : IDispatch {
        [id(0x000000cd), propget, helpstring("Returns an object providing events fired when the supplied CommandBarControl object is clicked."), helpcontext(0x0000eab2)]
        HRESULT CommandBarEvents(
                        [in] IDispatch* CommandBarControl, 
                        [out, retval] IDispatch** prceNew);
        [id(0x0000012c), propget, helpstring("Returns the CommandEvents object for the specified command."), helpcontext(0x0000eab4)]
        HRESULT CommandEvents(
                        [in, optional, defaultvalue("{00000000-0000-0000-0000-000000000000}")] BSTR Guid, 
                        [in, optional, defaultvalue(0)] long ID, 
                        [out, retval] _CommandEvents** ppceNew);
        [id(0x0000012d), propget, helpstring("Returns the Events object for the solution."), helpcontext(0x0000eafd)]
        HRESULT SelectionEvents([out, retval] _SelectionEvents** ppceNew);
        [id(0x0000012e), propget, helpstring("Returns the Events object for the selection."), helpcontext(0x0000eb00)]
        HRESULT SolutionEvents([out, retval] _SolutionEvents** ppceNew);
        [id(0x0000012f), propget, helpstring("Returns the object that sources solution build events."), helpcontext(0x0000eaad)]
        HRESULT BuildEvents([out, retval] _BuildEvents** ppceNew);
        [id(0x00000130), propget, helpstring("Returns the object that sources Window events."), helpcontext(0x0000eb4e)]
        HRESULT WindowEvents(
                        [in, optional, defaultvalue(0)] Window* WindowFilter, 
                        [out, retval] _WindowEvents** ppceNew);
        [id(0x00000131), propget, helpstring("Returns the object that sources output Window events."), helpcontext(0x0000eb4f)]
        HRESULT OutputWindowEvents(
                        [in, optional, defaultvalue("")] BSTR Pane, 
                        [out, retval] _OutputWindowEvents** ppceNew);
        [id(0x00000132), propget, helpstring("Returns the object that sources Find events."), helpcontext(0x0000eb70)]
        HRESULT FindEvents([out, retval] _FindEvents** ppFindEvents);
        [id(0x00000133), propget, helpstring("Returns the object that sources events on the Task List."), helpcontext(0x0000ec13)]
        HRESULT TaskListEvents(
                        [in, optional, defaultvalue("")] BSTR Filter, 
                        [out, retval] _TaskListEvents** ppceNew);
        [id(0x00000134), propget, helpstring("Returns the object that sources events on the environment."), helpcontext(0x0000ec12)]
        HRESULT DTEEvents([out, retval] _DTEEvents** ppceNew);
        [id(0x00000135), propget, helpstring("Returns the object that sources events on Documents."), helpcontext(0x0000ec14)]
        HRESULT DocumentEvents(
                        [in, optional, defaultvalue(0)] Document* Document, 
                        [out, retval] _DocumentEvents** ppceNew);
        [id(0x00000136), propget, helpstring("Returns the object that sources events on Solution Items."), helpcontext(0x0000edf3)]
        HRESULT SolutionItemsEvents([out, retval] _ProjectItemsEvents** ppeNew);
        [id(0x00000137), propget, helpstring("Returns the object that sources events on Miscellaneous Items."), helpcontext(0x0000edf4)]
        HRESULT MiscFilesEvents([out, retval] _ProjectItemsEvents** ppeNew);
        [id(0x00000138), propget, helpstring("Returns the object that sources events from the debugger."), helpcontext(0x0000edf5)]
        HRESULT DebuggerEvents([out, retval] _DebuggerEvents** ppeNew);
        [id(0x00000139), propget, helpstring("Returns the object that sources events from the text editor."), helpcontext(0x0000edf6)]
        HRESULT TextEditorEvents(
                        [in, optional, defaultvalue(0)] TextDocument* TextDocumentFilter, 
                        [out, retval] _TextEditorEvents** ppeNew);
        [id(0x0000013a), helpstring("Returns an interface or object that can be accessed at run time by name."), helpcontext(0x0000ea7f)]
        HRESULT GetObject(
                        [in] BSTR Name, 
                        [out, retval] IDispatch** ppObject);
    };

    [
      uuid(1DED92B5-9A46-4B29-93EF-B5E07016659E),
      helpstring("Provides command events for add-ins."),
      helpcontext(0x0000ea96)
    ]
    coclass CommandEvents {
        [default] interface _CommandEvents;
        [default, source] dispinterface _dispCommandEvents;
    };

    [
      odl,
      uuid(A79FC678-0D0A-496A-B9DC-0D5B9E1CA9FC),
      helpstring("Provides command events for add-ins."),
      helpcontext(0x0000ea96),
      oleautomation
    ]
    interface _CommandEvents : IDispatch {
    };

    [
      uuid(FF2D5C12-FEEA-11D0-BBC8-00A0C90F2744),
      helpstring("Provides command events for add-ins."),
      helpcontext(0x0000ea96)
    ]
    dispinterface _dispCommandEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Occurs before a command executes."), helpcontext(0x0000ea61)]
            void BeforeExecute(
                            [in] BSTR Guid, 
                            [in] long ID, 
                            [in] VARIANT CustomIn, 
                            [in] VARIANT CustomOut, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x00000002), helpstring("Occurs after a command executes."), helpcontext(0x0000eb2a)]
            void AfterExecute(
                            [in] BSTR Guid, 
                            [in] long ID, 
                            [in] VARIANT CustomIn, 
                            [in] VARIANT CustomOut);
    };

    [
      uuid(AF37511E-9E9D-4234-A5A1-7584D290E061),
      helpstring("Provides events for changes to a selection."),
      helpcontext(0x0000eaa2)
    ]
    coclass SelectionEvents {
        [default] interface _SelectionEvents;
        [default, source] dispinterface _dispSelectionEvents;
    };

    [
      odl,
      uuid(EB6783DB-1819-496D-84A4-3CFF883010F6),
      helpstring("Provides events for changes to a selection."),
      helpcontext(0x0000eaa2),
      oleautomation
    ]
    interface _SelectionEvents : IDispatch {
    };

    [
      uuid(DEEB28B3-23E6-11D1-AE5C-00A0C90F26F4)
    ]
    dispinterface _dispSelectionEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Occurs just after the selection model changes."), helpcontext(0x0000ea68)]
            void OnChange();
    };

    [
      uuid(88AC98C7-B38C-404B-BD86-D2A4F2E89DCA),
      helpstring("Provides events for changes to a solution."),
      helpcontext(0x0000eaa3)
    ]
    coclass SolutionEvents {
        [default] interface _SolutionEvents;
        [default, source] dispinterface _dispSolutionEvents;
    };

    [
      odl,
      uuid(BF8BBF37-5415-46A9-940D-594CAD9DEC26),
      helpstring("Provides events for changes to a solution."),
      helpcontext(0x0000eaa3),
      oleautomation
    ]
    interface _SolutionEvents : IDispatch {
    };

    [
      uuid(FBCFF1C2-261C-11D1-AE5E-00A0C90F26F4)
    ]
    dispinterface _dispSolutionEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Occurs just after opening a Solution/Project."), helpcontext(0x0000ea69)]
            void Opened();
            [id(0x00000002), helpstring("Occurs just before closing a Solution/Project."), helpcontext(0x0000ea60)]
            void BeforeClosing();
            [id(0x00000003), helpcontext(0x0000eb10)]
            void AfterClosing();
            [id(0x00000004), helpcontext(0x0000eb11)]
            void QueryCloseSolution([in, out] VARIANT_BOOL* fCancel);
            [id(0x00000005), helpstring("Occurs just after renaming a solution."), helpcontext(0x0000ea6d)]
            void Renamed([in] BSTR OldName);
            [id(0x00000006), helpstring("Occurs just after adding a Project to the solution."), helpcontext(0x0000ea6a)]
            void ProjectAdded([in] Project* Project);
            [id(0x00000007), helpstring("Occurs just after removing a Project from the solution."), helpcontext(0x0000ea6b)]
            void ProjectRemoved([in] Project* Project);
            [id(0x00000008), helpstring("Occurs just after renaming a Project."), helpcontext(0x0000ea6c)]
            void ProjectRenamed(
                            [in] Project* Project, 
                            [in] BSTR OldName);
    };

    [
      uuid(D83D60E3-229F-4660-8DD0-28B629EEDCDA),
      helpstring("Provides events for solution builds."),
      helpcontext(0x0000ea94)
    ]
    coclass BuildEvents {
        [default] interface _BuildEvents;
        [default, source] dispinterface _dispBuildEvents;
    };

    [
      odl,
      uuid(794A2BA5-FFA6-4FC5-BF13-957B2C22EDD7),
      helpstring("Provides events for solution builds."),
      helpcontext(0x0000ea94),
      oleautomation
    ]
    interface _BuildEvents : IDispatch {
    };

    [
      uuid(1926364E-6B90-46CB-A44D-8A80FB11ACD9)
    ]
    dispinterface _dispBuildEvents {
        properties:
        methods:
            [id(0x00000003)]
            void OnBuildBegin(
                            vsBuildScope Scope, 
                            vsBuildAction Action);
            [id(0x00000004)]
            void OnBuildDone(
                            vsBuildScope Scope, 
                            vsBuildAction Action);
            [id(0x00000005)]
            void OnBuildProjConfigBegin(
                            BSTR Project, 
                            BSTR ProjectConfig, 
                            BSTR Platform, 
                            BSTR SolutionConfig);
            [id(0x00000006)]
            void OnBuildProjConfigDone(
                            BSTR Project, 
                            BSTR ProjectConfig, 
                            BSTR Platform, 
                            BSTR SolutionConfig, 
                            VARIANT_BOOL Success);
    };

    

    [
      uuid(2E260FD4-C130-4E6D-8EBC-4A3BFD188181),
      helpstring("The WindowEvents object triggers events about Windows."),
      helpcontext(0x0000ec17)
    ]
    coclass WindowEvents {
        [default] interface _WindowEvents;
        [default, source] dispinterface _dispWindowEvents;
    };

    [
      odl,
      uuid(0D3A23A8-67BB-11D2-97C1-00C04FB6C6FF),
      helpstring("The WindowEvents object triggers events about Windows."),
      helpcontext(0x0000ec17),
      oleautomation
    ]
    interface _WindowEvents : IDispatch {
    };

    [
      uuid(0D3A23A9-67BB-11D2-97C1-00C04FB6C6FF),
      helpstring("The WindowEvents object triggers events about Windows."),
      helpcontext(0x0000ec17)
    ]
    dispinterface _dispWindowEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Occurs just before a window is closed."), helpcontext(0x0000ec1d)]
            void WindowClosing([in] Window* Window);
            [id(0x00000002), helpstring("Occurs when a window has been moved."), helpcontext(0x0000ec1c)]
            void WindowMoved(
                            [in] Window* Window, 
                            [in] long Top, 
                            [in] long Left, 
                            [in] long Width, 
                            [in] long Height);
            [id(0x00000003), helpstring("Occurs when a window receives focus."), helpcontext(0x0000ec1e)]
            void WindowActivated(
                            [in] Window* GotFocus, 
                            [in] Window* LostFocus);
            [id(0x00000004), helpstring("Occurs when a new window is made."), helpcontext(0x0000ec1f)]
            void WindowCreated([in] Window* Window);
    };

    [
      uuid(3760037F-B012-44F8-9C23-3609D7A16DEF),
      helpstring("The OutputWindowEvents object triggers events about the Output Window."),
      helpcontext(0x0000ec16)
    ]
    coclass OutputWindowEvents {
        [default] interface _OutputWindowEvents;
        [default, source] dispinterface _dispOutputWindowEvents;
    };

    [
      odl,
      uuid(0A3546A8-6840-11D2-97C1-00C04FB6C6FF),
      helpstring("The OutputWindowEvents object triggers events about the Output Window."),
      helpcontext(0x0000ec16),
      oleautomation
    ]
    interface _OutputWindowEvents : IDispatch {
    };

    [
      uuid(0D3A23AF-67BB-11D2-97C1-00C04FB6C6FF),
      helpstring("The OutputWindowEvents object triggers events about the Output Window."),
      helpcontext(0x0000ec16)
    ]
    dispinterface _dispOutputWindowEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Occurs when a new OutputWindowPane object is created."), helpcontext(0x0000ec20)]
            void PaneAdded([in] OutputWindowPane* pPane);
            [id(0x00000002), helpstring("Occurs when a output window pane is modified."), helpcontext(0x0000ec21)]
            void PaneUpdated([in] OutputWindowPane* pPane);
            [id(0x00000003), helpstring("Occurs when all the text in a output window pane is removed."), helpcontext(0x0000ec22)]
            void PaneClearing([in] OutputWindowPane* pPane);
    };

    [
      odl,
      uuid(FFC9DFC4-61CA-4B0C-83C2-0703A24F5C16),
      helpstring("An object used for displaying text output to the user."),
      helpcontext(0x0000eb37),
      dual,
      oleautomation
    ]
    interface OutputWindowPane : IDispatch {
        [id(00000000), propget, helpstring("Returns the name of the object."), helpcontext(0x0000edbb)]
        HRESULT Name([out, retval] BSTR* pName);
        [id(0x00000002), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** pDTE);
        [id(0x00000003), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] OutputWindowPanes** pOutputWindowPanes);
        [id(0x00000004), propget, helpstring("Returns a string uniquely identifying this pane."), helpcontext(0x0000eb31)]
        HRESULT Guid([out, retval] BSTR* pGUID);
        [id(0x00000005), helpstring("Displays a string on the pane."), helpcontext(0x0000eb32)]
        HRESULT OutputString([in] BSTR Text);
        [id(0x00000006), helpstring("Force display all task items not yet added to the task list."), helpcontext(0x0000eb33)]
        HRESULT ForceItemsToTaskList();
        [id(0x00000007), helpstring("Moves the focus to the current item."), helpcontext(0x0000eb1f)]
        HRESULT Activate();
        [id(0x00000008), helpstring("Clears all text from the output window pane."), helpcontext(0x0000eb34)]
        HRESULT Clear();
        [id(0x00000009), helpstring("Displays a string on the pane, and add a corresponding item to the task list."), helpcontext(0x0000eb35)]
        HRESULT OutputTaskItemString(
                        [in] BSTR Text, 
                        [in] vsTaskPriority Priority, 
                        [in] BSTR SubCategory, 
                        [in] vsTaskIcon Icon, 
                        [in] BSTR FileName, 
                        [in] long Line, 
                        [in] BSTR Description, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL Force);
        [id(0x0000000a), propget, helpstring("Returns the TextDocument object in the pane."), helpcontext(0x0000eb36)]
        HRESULT TextDocument([out, retval] TextDocument** pDocument);
    };

    [
      odl,
      uuid(B02CF62A-9470-4308-A521-9675FBA395AB),
      helpstring("An object containing OutputWindowPanes."),
      helpcontext(0x0000eb38),
      dual,
      oleautomation
    ]
    interface OutputWindowPanes : IDispatch {
        [id(0x00000002), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** pDTE);
        [id(0x00000003), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Parent([out, retval] OutputWindow** pOutputWindow);
        [id(0x00000004), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* pCount);
        [id(0x00000005), helpstring("Creates a new pane and adds it to the collection."), helpcontext(0x0000eb39)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] OutputWindowPane** pOutputWindowPane);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        VARIANT index, 
                        [out, retval] OutputWindowPane** pOutputWindowPane);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
    };

    [
      odl,
      uuid(EAB0A63D-C3A8-496E-9ACF-A82CEF6A43B3),
      helpstring("An object representing the output window."),
      helpcontext(0x0000eb3a),
      dual,
      oleautomation
    ]
    interface OutputWindow : IDispatch {
        [id(0x00000002), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** pDTE);
        [id(0x00000003), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Parent([out, retval] Window** pParent);
        [id(0x00000004), propget, helpstring("Returns the OutputWindowPanes collection for the object."), helpcontext(0x0000eb3b)]
        HRESULT OutputWindowPanes([out, retval] OutputWindowPanes** pOutputWindowPanes);
        [id(0x00000005), propget, helpstring("Returns the currently active item in the collection."), helpcontext(0x0000eb3c)]
        HRESULT ActivePane([out, retval] OutputWindowPane** pOutputWindowPane);
    };

    

    [
      uuid(811322BC-042D-4828-BFF2-640EF8B7209F),
      helpstring("Provides events for Find operations."),
      helpcontext(0x0000eb82)
    ]
    coclass FindEvents {
        [default] interface _FindEvents;
        [default, source] dispinterface _dispFindEvents;
    };

    [
      odl,
      uuid(C5331ACD-C5D5-11D2-8598-006097C68E81),
      helpstring("Provides events for Find operations."),
      helpcontext(0x0000eb82),
      oleautomation
    ]
    interface _FindEvents : IDispatch {
    };

    [
      uuid(C5331ACE-C5D5-11D2-8598-006097C68E81)
    ]
    dispinterface _dispFindEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Event that is fired when a Find operation finishes."), helpcontext(0x0000eb83)]
            void FindDone(
                            [in] vsFindResult Result, 
                            [in] VARIANT_BOOL Cancelled);
    };

    

    [
      uuid(29617ACD-7859-4328-BE09-298F91F48196),
      helpstring("The TaskListEvents object triggers events about the Task List."),
      helpcontext(0x0000ec15)
    ]
    coclass TaskListEvents {
        [default] interface _TaskListEvents;
        [default, source] dispinterface _dispTaskListEvents;
    };

    [
      odl,
      uuid(1125C422-49BD-11D2-8823-00C04FB6C6FF),
      helpstring("The TaskListEvents object triggers events about the Task List."),
      helpcontext(0x0000ec15),
      oleautomation
    ]
    interface _TaskListEvents : IDispatch {
    };

    [
      uuid(1125C423-49BD-11D2-8823-00C04FB6C6FF),
      helpstring("The TaskListEvents object triggers events about the Task List."),
      helpcontext(0x0000ec15)
    ]
    dispinterface _dispTaskListEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Occurs when a new task is added to the Task List."), helpcontext(0x0000ec23)]
            void TaskAdded([in] TaskItem* TaskItem);
            [id(0x00000002), helpstring("Occurs when a task is removed from the Task List."), helpcontext(0x0000ec24)]
            void TaskRemoved([in] TaskItem* TaskItem);
            [id(0x00000003), helpstring("Occurs when a task is changed."), helpcontext(0x0000ec25)]
            void TaskModified(
                            [in] TaskItem* TaskItem, 
                            [in] vsTaskListColumn ColumnModified);
            [id(0x00000004), helpstring("Occurs when the user wishes to go to the source of the task item."), helpcontext(0x0000ec26)]
            void TaskNavigated(
                            [in] TaskItem* TaskItem, 
                            [in, out] VARIANT_BOOL* NavigateHandled);
    };

    [
      odl,
      uuid(58E4D419-6B8C-4C63-92DE-70161CD95890),
      helpstring("An individual item within the task list."),
      helpcontext(0x0000eb58),
      dual,
      oleautomation
    ]
    interface TaskItem : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** pDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Collection([out, retval] TaskItems** pTaskItems);
        [id(0x00000003), propget, helpstring("Returns which group of tasks this item belongs to."), helpcontext(0x0000eb48)]
        HRESULT Category([out, retval] BSTR* pCategory);
        [id(0x00000004), propget, helpstring("Returns which subgroup of tasks this item belongs to."), helpcontext(0x0000eb49)]
        HRESULT SubCategory([out, retval] BSTR* pSubCategory);
        [id(0x00000005), propget, helpstring("Gets/Sets the priority of the task item."), helpcontext(0x0000eb47)]
        HRESULT Priority([out, retval] vsTaskPriority* pPriority);
        [id(0x00000005), propput, helpstring("Gets/Sets the priority of the task item."), helpcontext(0x0000eb47)]
        HRESULT Priority([in] vsTaskPriority pPriority);
        [id(0x00000006), propget, helpstring("Gets/Sets the description of the task item."), helpcontext(0x0000eb46)]
        HRESULT Description([out, retval] BSTR* pDescription);
        [id(0x00000006), propput, helpstring("Gets/Sets the description of the task item."), helpcontext(0x0000eb46)]
        HRESULT Description([in] BSTR pDescription);
        [id(0x00000007), propget, helpstring("Gets/Sets the line the task item refers to."), helpcontext(0x0000eb44)]
        HRESULT FileName([out, retval] BSTR* pFileName);
        [id(0x00000007), propput, helpstring("Gets/Sets the line the task item refers to."), helpcontext(0x0000eb44)]
        HRESULT FileName([in] BSTR pFileName);
        [id(0x00000008), propget, helpstring("Determines if a item within a task can be modified."), helpcontext(0x0000ebf8)]
        HRESULT IsSettable(
                        [in] vsTaskListColumn Column, 
                        [out, retval] VARIANT_BOOL* pSettable);
        [id(0x00000009), propget, helpstring("Gets/Sets the line the task item refers to."), helpcontext(0x0000eb44)]
        HRESULT Line([out, retval] long* pLine);
        [id(0x00000009), propput, helpstring("Gets/Sets the line the task item refers to."), helpcontext(0x0000eb44)]
        HRESULT Line([in] long pLine);
        [id(0x0000000a), propget, helpstring("Returns if the task item is currently displayed."), helpcontext(0x0000eb43)]
        HRESULT Displayed([out, retval] VARIANT_BOOL* pDisplayed);
        [id(0x0000000b), propget, helpstring("Gets/Sets the checked state of the task item."), helpcontext(0x0000eb42)]
        HRESULT Checked([out, retval] VARIANT_BOOL* pChecked);
        [id(0x0000000b), propput, helpstring("Gets/Sets the checked state of the task item."), helpcontext(0x0000eb42)]
        HRESULT Checked([in] VARIANT_BOOL pChecked);
        [id(0x0000000c), helpstring("Displays the document the task item refers to."), helpcontext(0x0000eb41)]
        HRESULT Navigate();
        [id(0x0000000d), helpstring("Removes an object from a collection."), helpcontext(0x0000ea8c)]
        HRESULT Delete();
        [id(0x0000000e), helpstring("Causes this item to become active in the user interface."), helpcontext(0x0000ecc6)]
        HRESULT Select();
    };

    [
      odl,
      uuid(4B51103D-513C-4773-B56A-354D0928FD04),
      helpstring("Collection of all items in the Task List."),
      helpcontext(0x0000eb4b),
      dual,
      oleautomation
    ]
    interface TaskItems : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** pDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] TaskList** pTaskList);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] TaskItem** pTaskItem);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* pCount);
        [id(0x00000004), helpstring("Creates a task item and adds it to the task list."), helpcontext(0x0000eb4a)]
        HRESULT Add(
                        [in] BSTR Category, 
                        [in] BSTR SubCategory, 
                        [in] BSTR Description, 
                        [in, optional, defaultvalue(2)] vsTaskPriority Priority, 
                        [in, optional] VARIANT Icon, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Checkable, 
                        [in, optional, defaultvalue("")] BSTR File, 
                        [in, optional, defaultvalue(-1)] long Line, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CanUserDelete, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL FlushItem, 
                        [out, retval] TaskItem** pTaskItem);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
        [id(0x00000006), helpstring("Force display all task items not yet added to the task list."), helpcontext(0x0000eb33)]
        HRESULT ForceItemsToTaskList();
    };

    [
      odl,
      uuid(4E4F0569-E16A-4DA1-92DE-10882A4DDD8C),
      helpstring("The object representing the Task List."),
      helpcontext(0x0000eb13),
      dual,
      oleautomation
    ]
    interface TaskList : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppReturn);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Window** lppReturn);
        [id(0x00000003), propget, helpcontext(0x0000eb12)]
        HRESULT DefaultCommentToken([out, retval] BSTR* pbstrToken);
        [id(0x00000005), propget, helpstring("Returns the TaskListItems Collection."), helpcontext(0x0000eb4c)]
        HRESULT TaskItems([out, retval] TaskItems** pTaskItems);
        [id(0x00000006), propget, helpstring("Returns the currently active item in the collection."), helpcontext(0x0000eb3c)]
        HRESULT SelectedItems([out, retval] VARIANT* Selections);
    };

    

    [
      uuid(C6304BAB-6765-4C63-9017-4940AEB6F207),
      helpstring("The DTEEvents object triggers events about the state of the environment."),
      helpcontext(0x0000ec11)
    ]
    coclass DTEEvents {
        [default] interface _DTEEvents;
        [default, source] dispinterface _dispDTEEvents;
    };

    [
      odl,
      uuid(FA1BB6D7-CA83-11D2-AAB2-00C04F688DDE),
      helpstring("The DTEEvents object triggers events about the state of the environment."),
      helpcontext(0x0000ec11),
      oleautomation
    ]
    interface _DTEEvents : IDispatch {
    };

    [
      uuid(B50C9708-C909-4B87-A03D-AF6CC4BFB422),
      helpstring("The DTEEvents object triggers events about the state of the environment."),
      helpcontext(0x0000ec11)
    ]
    dispinterface _dispDTEEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Occurs when the environment has completed initializing."), helpcontext(0x0000ec27)]
            void OnStartupComplete();
            [id(0x00000002), helpstring("Occurs when the environment is beginning to close."), helpcontext(0x0000ec28)]
            void OnBeginShutdown();
            [id(0x00000003), helpstring("Occurs when the state of the environment has changed."), helpcontext(0x0000ec29)]
            void ModeChanged([in] vsIDEMode LastMode);
            [id(0x00000004), helpstring("Occurs when the macro engine has reset it's state, clearing all variable data."), helpcontext(0x0000ecc7)]
            void OnMacrosRuntimeReset();
    };

    

    [
      uuid(DC5437F7-F114-11D2-AACF-00C04F688DDE)
    ]
    coclass DocumentEvents {
        [default] interface _DocumentEvents;
        [default, source] dispinterface _dispDocumentEvents;
    };

    [
      odl,
      uuid(DC5437F5-F114-11D2-AACF-00C04F688DDE),
      oleautomation
    ]
    interface _DocumentEvents : IDispatch {
    };

    [
      uuid(DC5437F6-F114-11D2-AACF-00C04F688DDE)
    ]
    dispinterface _dispDocumentEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Occurs after a document is saved."), helpcontext(0x0000ec18)]
            void DocumentSaved([in] Document* Document);
            [id(0x00000002), helpstring("Occurs just before a document is closed."), helpcontext(0x0000ec19)]
            void DocumentClosing([in] Document* Document);
            [id(0x00000003), helpstring("Occurs just before a document is opened."), helpcontext(0x0000ec1a)]
            void DocumentOpening(
                            [in] BSTR DocumentPath, 
                            [in] VARIANT_BOOL ReadOnly);
            [id(0x00000004), helpstring("Occurs just after a document is opened."), helpcontext(0x0000ec1b)]
            void DocumentOpened([in] Document* Document);
    };

    [
      uuid(DE6C1098-93CA-4F49-BEF0-262A13CA1176),
      helpstring("The _ProjectItemsEvents object triggers events of actions taken against projects and their items."),
      helpcontext(0x0000edeb)
    ]
    coclass ProjectItemsEvents {
        [default] interface _ProjectItemsEvents;
        [default, source] dispinterface _dispProjectItemsEvents;
    };

    [
      odl,
      uuid(22800963-2811-410D-BF87-A7808EAC977D),
      helpstring("The _ProjectItemsEvents object triggers events of actions taken against projects and their items."),
      helpcontext(0x0000edeb),
      dual,
      oleautomation
    ]
    interface _ProjectItemsEvents : IDispatch {
    };

    [
      uuid(6962753F-EFD5-41C5-B083-D70687166AEB),
      helpstring("The _ProjectItemsEvents object triggers events of actions taken against projects and their items."),
      helpcontext(0x0000edeb)
    ]
    dispinterface _dispProjectItemsEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Triggered when an item is added to a project."), helpcontext(0x0000edec)]
            void ItemAdded([in] ProjectItem* ProjectItem);
            [id(0x00000002), helpstring("Triggered when an item is removed from a project."), helpcontext(0x0000eded)]
            void ItemRemoved([in] ProjectItem* ProjectItem);
            [id(0x00000003), helpstring("Triggered when an item within a project is renamed."), helpcontext(0x0000edee)]
            void ItemRenamed(
                            [in] ProjectItem* ProjectItem, 
                            [in] BSTR OldName);
    };

    [
      uuid(0C763210-0FBB-11D3-B880-00C04F79E479),
      helpstring("Events supported by the Debugger."),
      helpcontext(0x0000ed89)
    ]
    coclass DebuggerEvents {
        [default] interface _DebuggerEvents;
        [default, source] dispinterface _dispDebuggerEvents;
    };

    [
      odl,
      uuid(D4EAE958-0FBA-11D3-B880-00C04F79E479),
      helpstring("Events supported by the Debugger."),
      helpcontext(0x0000ed89),
      oleautomation
    ]
    interface _DebuggerEvents : IDispatch {
    };

    [
      uuid(46209330-0FBA-11D3-B880-00C04F79E479),
      version(1.0)
    ]
    dispinterface _dispDebuggerEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Reflecting the overall state of the debugger, this event is fired when entering run-mode.  Note that this event may not fire when stepping.  It is typically best used when updating UI."), helpcontext(0x0000ed83)]
            void OnEnterRunMode([in] dbgEventReason Reason);
            [id(0x00000002), helpstring("Reflecting the overall state of the debugger, this event is fired when leaving run-mode or debug-mode.  This event is fired whenever design-mode is established after debugging."), helpcontext(0x0000ed84)]
            void OnEnterDesignMode([in] dbgEventReason Reason);
            [id(0x00000003), helpstring("Reflecting the overall state of the debugger, this event is fired when entering break-mode.  This event is fired regardless of how break mode is established."), helpcontext(0x0000ed85)]
            void OnEnterBreakMode(
                            [in] dbgEventReason Reason, 
                            [in, out] dbgExecutionAction* ExecutionAction);
            [id(0x00000004), helpstring("Thrown before OnEnterBreakMode.  Setting the action allows the handler to affect the IDE's UI upon exiting the handler.  The parameter is initially set to the value set by any prior handlers."), helpcontext(0x0000ed86)]
            void OnExceptionThrown(
                            [in] BSTR ExceptionType, 
                            [in] BSTR Name, 
                            [in] long Code, 
                            [in] BSTR Description, 
                            [in, out] dbgExceptionAction* ExceptionAction);
            [id(0x00000005), helpstring("Thrown before OnEnterBreakMode.  Setting the action allows the handler to affect the IDE's UI upon exiting the handler.  The parameter is initially set to the value set by any prior handlers."), helpcontext(0x0000ed87)]
            void OnExceptionNotHandled(
                            [in] BSTR ExceptionType, 
                            [in] BSTR Name, 
                            [in] long Code, 
                            [in] BSTR Description, 
                            [in, out] dbgExceptionAction* ExceptionAction);
            [id(0x00000006), helpstring("Fired whenever the current process, program, thread or stack has been changed through the UI or automation model."), helpcontext(0x0000ed88)]
            void OnContextChanged(
                            [in] Process* NewProcess, 
                            [in] Program* NewProgram, 
                            [in] Thread* NewThread, 
                            [in] StackFrame* NewStackFrame);
    };

    

    [
      odl,
      uuid(5C5A0070-F396-4E37-A82A-1B767E272DF9),
      version(1.0),
      helpstring("Used to examine and manipulate Processes."),
      helpcontext(0x0000ed5a),
      dual,
      oleautomation
    ]
    interface Process : IDispatch {
        [id(0x00000001), helpstring("Causes the debugger to attach this process."), helpcontext(0x0000ed5b)]
        HRESULT Attach();
        [id(0x00000002), helpstring("Causes the debugger to attach this process."), helpcontext(0x0000ed5c)]
        HRESULT Detach([in, optional, defaultvalue(-1)] VARIANT_BOOL WaitForBreakOrEnd);
        [id(0x00000003), helpstring("Causes a debugger break in this process."), helpcontext(0x0000ed5d)]
        HRESULT Break([in, optional, defaultvalue(-1)] VARIANT_BOOL WaitForBreakMode);
        [id(0x00000004), helpstring("Terminates this process."), helpcontext(0x0000ed5e)]
        HRESULT Terminate([in, optional, defaultvalue(-1)] VARIANT_BOOL WaitForBreakOrEnd);
        [id(00000000), propget, helpstring("Returns the name of the process."), helpcontext(0x0000ed5f)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000064), propget, helpstring("Returns the Win32 process ID for this process."), helpcontext(0x0000ed60)]
        HRESULT ProcessID([out, retval] long* ID);
        [id(0x00000065), propget, helpstring("Returns the collection of programs being managed by this process."), helpcontext(0x0000ed61)]
        HRESULT Programs([out, retval] Programs** Programs);
        [id(0x000000c8), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTE);
        [id(0x000000c9), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Debugger** Debugger);
        [id(0x000000ca), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] Processes** Processes);
    };

    [
      odl,
      uuid(DC6A118A-BBAB-11D2-8AD1-00C04F79E479),
      version(1.0),
      helpstring("A collection of Program objects."),
      helpcontext(0x0000ed7f),
      dual,
      oleautomation
    ]
    interface Programs : IDispatch {
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] Program** Program);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enumerator);
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Debugger** Debugger);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* Count);
    };

    [
      odl,
      uuid(6A38D87C-BBA0-11D2-8AD1-00C04F79E479),
      version(1.0),
      helpstring("Used to examine and manipulate Programs."),
      helpcontext(0x0000ed62),
      dual,
      oleautomation
    ]
    interface Program : IDispatch {
        [id(00000000), propget, helpstring("Returns the name of the program."), helpcontext(0x0000ed67)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000064), propget, helpstring("Returns the process by which this program is managed."), helpcontext(0x0000ed68)]
        HRESULT Process([out, retval] Process** Process);
        [id(0x00000065), propget, helpstring("Returns the collection of threads being managed by this program."), helpcontext(0x0000ed69)]
        HRESULT Threads([out, retval] Threads** Threads);
        [id(0x00000066), propget, helpstring("Indicates whether a program is being debugged at the instant this call is made.  Note that the program may change debug states even before this function call has a chance to return."), helpcontext(0x0000ed6a)]
        HRESULT IsBeingDebugged([out, retval] VARIANT_BOOL* IsBeingDebugged);
        [id(0x000000c8), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTE);
        [id(0x000000c9), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Debugger** Debugger);
        [id(0x000000ca), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] Programs** Programs);
    };

    [
      odl,
      uuid(6AA23FB4-BBA1-11D2-8AD1-00C04F79E479),
      version(1.0),
      helpstring("A collection of Thread objects."),
      helpcontext(0x0000ed80),
      dual,
      oleautomation
    ]
    interface Threads : IDispatch {
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] Thread** Thread);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enumerator);
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Debugger** Debugger);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* Count);
    };

    [
      odl,
      uuid(9407F466-BBA1-11D2-8AD1-00C04F79E479),
      version(1.0),
      helpstring("Used to examine and manipulate Threads."),
      helpcontext(0x0000ed6b),
      dual,
      oleautomation
    ]
    interface Thread : IDispatch {
        [id(0x00000001), helpstring("Stops the thread from executing."), helpcontext(0x0000ee36)]
        HRESULT Freeze();
        [id(0x00000002), helpstring("Allows the thread to execute."), helpcontext(0x0000ee37)]
        HRESULT Thaw();
        [id(00000000), propget, helpstring("Sets/Returns the name of the thread."), helpcontext(0x0000ed6c)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000064), propget, helpstring("Returns the number of times this thread has been suspended by the debuggee."), helpcontext(0x0000ed6d)]
        HRESULT SuspendCount([out, retval] long* Count);
        [id(0x00000065), propget, helpstring("Returns the thread ID."), helpcontext(0x0000ed6e)]
        HRESULT ID([out, retval] long* ID);
        [id(0x00000066), propget, helpstring("Returns the collection of stack frames through which this thread is executing."), helpcontext(0x0000ed6f)]
        HRESULT StackFrames([out, retval] StackFrames** StackFrames);
        [id(0x00000067), propget, helpstring("Returns the program that manages this thread."), helpcontext(0x0000ed70)]
        HRESULT Program([out, retval] Program** Program);
        [id(0x00000068), propget, helpstring("Is the actual thread to which this object references still alive?  Note that the actual state may change before this function returns."), helpcontext(0x0000ed71)]
        HRESULT IsAlive([out, retval] VARIANT_BOOL* IsAlive);
        [id(0x00000069), propget, helpstring("Returns the priority of this thread."), helpcontext(0x0000ee39)]
        HRESULT Priority([out, retval] BSTR* Priority);
        [id(0x0000006a), propget, helpstring("Returns the address at which the thread was executing prior to being stopped for debugging."), helpcontext(0x0000ee3a)]
        HRESULT Location([out, retval] BSTR* Location);
        [id(0x0000006b), propget, helpstring("Returns true if the thread was frozen by the debugger."), helpcontext(0x0000ee38)]
        HRESULT IsFrozen([out, retval] VARIANT_BOOL* IsFrozen);
        [id(0x000000c8), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTE);
        [id(0x000000c9), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Debugger** Debugger);
        [id(0x000000ca), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] Threads** Threads);
    };

    [
      odl,
      uuid(4ED85664-BBA2-11D2-8AD1-00C04F79E479),
      version(1.0),
      helpstring("A collection of StackFrame objects."),
      helpcontext(0x0000ed81),
      dual,
      oleautomation
    ]
    interface StackFrames : IDispatch {
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] StackFrame** StackFrame);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enumerator);
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Debugger** Debugger);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* Count);
    };

    [
      odl,
      uuid(1342D0D8-BBA3-11D2-8AD1-00C04F79E479),
      version(1.0),
      helpstring("Used to examine and manipulate stack-frames.  Essentially a stack frame is a function-call."),
      helpcontext(0x0000ed72),
      dual,
      oleautomation
    ]
    interface StackFrame : IDispatch {
        [id(0x00000064), propget, helpstring("Returns the programming language associated with this stack frame."), helpcontext(0x0000ed73)]
        HRESULT Language([out, retval] BSTR* Language);
        [id(00000000), propget, helpstring("Returns the function name of this stack frame."), helpcontext(0x0000ed74)]
        HRESULT FunctionName([out, retval] BSTR* FunctionName);
        [id(0x00000066), propget, helpstring("Returns the return type of this stack frame."), helpcontext(0x0000ed75)]
        HRESULT ReturnType([out, retval] BSTR* ReturnType);
        [id(0x00000067), propget, helpstring("Returns a collection of expressions representing the locals currently known by this frame."), helpcontext(0x0000ed76)]
        HRESULT Locals([out, retval] Expressions** Expressions);
        [id(0x00000068), propget, helpstring("Returns a collection of expressions representing the arguments passed to this frame."), helpcontext(0x0000ed77)]
        HRESULT Arguments([out, retval] Expressions** Expressions);
        [id(0x00000069), propget, helpstring("Returns the module name for this stack frame."), helpcontext(0x0000ed78)]
        HRESULT Module([out, retval] BSTR* Module);
        [id(0x000000c8), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTE);
        [id(0x000000c9), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Thread** Thread);
        [id(0x000000ca), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] StackFrames** StackFrames);
    };

    [
      odl,
      uuid(2685337A-BB9E-11D2-8AD1-00C04F79E479),
      version(1.0),
      helpstring("A collection of Expression objects."),
      helpcontext(0x0000ed7d),
      dual,
      oleautomation
    ]
    interface Expressions : IDispatch {
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] Expression** Expression);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enumerator);
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Debugger** Debugger);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* Count);
    };

    [
      odl,
      uuid(27ADC812-BB07-11D2-8AD1-00C04F79E479),
      version(1.0),
      helpstring("Used to examine and manipulate the item returned by an expression evaluation."),
      helpcontext(0x0000ed54),
      dual,
      oleautomation
    ]
    interface Expression : IDispatch {
        [id(00000000), propget, helpstring("The name of the expression."), helpcontext(0x0000ed55)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000064), propget, helpstring("The type of the expression."), helpcontext(0x0000ed56)]
        HRESULT Type([out, retval] BSTR* Type);
        [id(0x00000065), propget, helpstring("If the expression represents a class or structure, retrieve a list of member variables, as expression objects."), helpcontext(0x0000ed57)]
        HRESULT DataMembers([out, retval] Expressions** Expressions);
        [id(0x00000066), propget, helpstring("Sets/Returns the current value of the expression as a string."), helpcontext(0x0000ed58)]
        HRESULT Value([out, retval] BSTR* Value);
        [id(0x00000066), propput, helpstring("Sets/Returns the current value of the expression as a string."), helpcontext(0x0000ed58)]
        HRESULT Value([in] BSTR Value);
        [id(0x00000067), propget, helpstring("Is the value valid?"), helpcontext(0x0000ed59)]
        HRESULT IsValidValue([out, retval] VARIANT_BOOL* ValidValue);
        [id(0x000000c8), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTE);
        [id(0x000000c9), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Debugger** Debugger);
        [id(0x000000ca), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] Expressions** Expressions);
    };

    [
      odl,
      uuid(338FB9A0-BAE5-11D2-8AD1-00C04F79E479),
      version(1.0),
      helpstring("Used to manipulate the general state of the debugger."),
      helpcontext(0x0000ed24),
      dual,
      oleautomation
    ]
    interface Debugger : IDispatch {
        [id(0x00000001), helpstring("Evaluates an expression based on the current stack frame.  If the expression is parsable, but could not be evaluated, an object is returned but will not contain a valid value."), helpcontext(0x0000ed25)]
        HRESULT GetExpression(
                        [in] BSTR ExpressionText, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL UseAutoExpandRules, 
                        [in, optional, defaultvalue(-1)] long Timeout, 
                        [out, retval] Expression** Expression);
        [id(0x00000002), helpstring("Detaches from all attached programs."), helpcontext(0x0000ed26)]
        HRESULT DetachAll();
        [id(0x00000003), helpstring("Steps over the next statement unless it is a function call.  If so, will step to the beginning of the called function."), helpcontext(0x0000ed27)]
        HRESULT StepInto([in, optional, defaultvalue(-1)] VARIANT_BOOL WaitForBreakOrEnd);
        [id(0x00000004), helpstring("Steps over the next statement regardless of whether or not it is function call."), helpcontext(0x0000ed28)]
        HRESULT StepOver([in, optional, defaultvalue(-1)] VARIANT_BOOL WaitForBreakOrEnd);
        [id(0x00000005), helpstring("Steps out of the current function."), helpcontext(0x0000ed29)]
        HRESULT StepOut([in, optional, defaultvalue(-1)] VARIANT_BOOL WaitForBreakOrEnd);
        [id(0x00000006), helpstring("Starts executing the program from the current statement, or launches the active project."), helpcontext(0x0000ed2a)]
        HRESULT Go([in, optional, defaultvalue(-1)] VARIANT_BOOL WaitForBreakOrEnd);
        [id(0x00000007), helpstring("Breaks the execution of all programs currently being debugged."), helpcontext(0x0000ed2b)]
        HRESULT Break([in, optional, defaultvalue(-1)] VARIANT_BOOL WaitForBreakMode);
        [id(0x00000008), helpstring("Stops debugging, terminating or detaching from all programs being debugged."), helpcontext(0x0000ed2c)]
        HRESULT Stop([in, optional, defaultvalue(-1)] VARIANT_BOOL WaitForDesignMode);
        [id(0x00000009), helpstring("Sets the next instruction to be executed according to the current source file cursor position."), helpcontext(0x0000ed2d)]
        HRESULT SetNextStatement();
        [id(0x0000000a), helpstring("Executes the program to the current position of the source file cursor."), helpcontext(0x0000ed2e)]
        HRESULT RunToCursor([in, optional, defaultvalue(-1)] VARIANT_BOOL WaitForBreakOrEnd);
        [id(0x0000000b), helpstring("Executes a statement.  If the TreatAsExpression flag is true, then the string is interpreted as an expression.  Output is sent to the Command Window."), helpcontext(0x0000ed2f)]
        HRESULT ExecuteStatement(
                        [in] BSTR Statement, 
                        [in, optional, defaultvalue(-1)] long Timeout, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL TreatAsExpression);
        [id(0x00000064), propget, helpstring("Returns a collection of breakpoints."), helpcontext(0x0000ed30)]
        HRESULT Breakpoints([out, retval] Breakpoints** Breakpoints);
        [id(0x00000065), propget, helpstring("Returns a list of languages that the debugger supports."), helpcontext(0x0000ed31)]
        HRESULT Languages([out, retval] Languages** Languages);
        [id(0x00000066), propget, helpstring("Returns the current mode of the debugger within the context of the IDE."), helpcontext(0x0000ed32)]
        HRESULT CurrentMode([out, retval] dbgDebugMode* Mode);
        [id(0x00000067), propget, helpstring("Sets/Returns the active process.  Though the debugger supports debugging more than one process at a time, only one process can be active."), helpcontext(0x0000ed33)]
        HRESULT CurrentProcess([out, retval] Process** Process);
        [id(0x00000067), propput, helpstring("Sets/Returns the active process.  Though the debugger supports debugging more than one process at a time, only one process can be active."), helpcontext(0x0000ed33)]
        HRESULT CurrentProcess([in] Process* Process);
        [id(0x00000068), propget, helpstring("Sets/Returns the active program.  Though the debugger supports debugging more than one program at a time, only one program can be active."), helpcontext(0x0000ed34)]
        HRESULT CurrentProgram([out, retval] Program** Program);
        [id(0x00000068), propput, helpstring("Sets/Returns the active program.  Though the debugger supports debugging more than one program at a time, only one program can be active."), helpcontext(0x0000ed34)]
        HRESULT CurrentProgram([in] Program* Program);
        [id(0x00000069), propget, helpstring("Sets/Returns the current thread being debugged."), helpcontext(0x0000ed35)]
        HRESULT CurrentThread([out, retval] Thread** Thread);
        [id(0x00000069), propput, helpstring("Sets/Returns the current thread being debugged."), helpcontext(0x0000ed35)]
        HRESULT CurrentThread([in] Thread* Thread);
        [id(0x0000006a), propget, helpstring("Sets/Returns the current stack frame."), helpcontext(0x0000ed36)]
        HRESULT CurrentStackFrame([out, retval] StackFrame** StackFrame);
        [id(0x0000006a), propput, helpstring("Sets/Returns the current stack frame."), helpcontext(0x0000ed36)]
        HRESULT CurrentStackFrame([in] StackFrame* StackFrame);
        [id(0x0000006b), propget, helpstring("Sets/Returns the output radix used when evaluating expressions."), helpcontext(0x0000ed37)]
        HRESULT HexDisplayMode([out, retval] VARIANT_BOOL* HexModeOn);
        [id(0x0000006b), propput, helpstring("Sets/Returns the output radix used when evaluating expressions."), helpcontext(0x0000ed37)]
        HRESULT HexDisplayMode([in] VARIANT_BOOL HexModeOn);
        [id(0x0000006c), propget, helpstring("Sets/Returns the input radix used when evaluating expressions."), helpcontext(0x0000ed38)]
        HRESULT HexInputMode([out, retval] VARIANT_BOOL* HexModeOn);
        [id(0x0000006c), propput, helpstring("Sets/Returns the input radix used when evaluating expressions."), helpcontext(0x0000ed38)]
        HRESULT HexInputMode([in] VARIANT_BOOL HexModeOn);
        [id(0x0000006d), propget, helpstring("Returns the last reason that a program was broken.  If the program is running it returns DBG_REASON_NONE."), helpcontext(0x0000ed39)]
        HRESULT LastBreakReason([out, retval] dbgEventReason* Reason);
        [id(0x0000006e), propget, helpstring("The last breakpoint hit.  If multiple breakpoints were hit simultaneously, it is undefined which breakpoint in particular will be returned.  See also: AllBreakpointsLastHit."), helpcontext(0x0000ed3a)]
        HRESULT BreakpointLastHit([out, retval] Breakpoint** Breakpoint);
        [id(0x0000006f), propget, helpstring("A collection of the breakpoints that were last simultaneously hit.  See also: BreakpointLastHit."), helpcontext(0x0000ed8a)]
        HRESULT AllBreakpointsLastHit([out, retval] Breakpoints** Breakpoints);
        [id(0x00000070), propget, helpstring("The collection of processes currently being debugged."), helpcontext(0x0000ed3b)]
        HRESULT DebuggedProcesses([out, retval] Processes** Processes);
        [id(0x00000071), propget, helpstring("The collection of processes currently running on this machine."), helpcontext(0x0000ed3c)]
        HRESULT LocalProcesses([out, retval] Processes** Processes);
        [id(0x000000c8), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTE);
        [id(0x000000c9), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] _DTE** DTE);
        [id(0x0000012c), helpstring("Terminates all attached programs."), helpcontext(0x0000ee3c)]
        HRESULT TerminateAll();
    };

    [
      odl,
      uuid(25968106-BAFB-11D2-8AD1-00C04F79E479),
      version(1.0),
      helpstring("A collection of Breakpoint objects."),
      helpcontext(0x0000ed7b),
      dual,
      oleautomation
    ]
    interface Breakpoints : IDispatch {
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] Breakpoint** Breakpoint);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enumerator);
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Debugger** Debugger);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* Count);
        [id(0x00000004), helpstring("Creates and enables a new breakpoint.  If no parameters are given, the new breakpoint dialog is displayed."), helpcontext(0x0000ed7c)]
        HRESULT Add(
                        [in, optional, defaultvalue("")] BSTR Function, 
                        [in, optional, defaultvalue("")] BSTR File, 
                        [in, optional, defaultvalue(1)] long Line, 
                        [in, optional, defaultvalue(1)] long Column, 
                        [in, optional, defaultvalue("")] BSTR Condition, 
                        [in, optional, defaultvalue(1)] dbgBreakpointConditionType ConditionType, 
                        [in, optional, defaultvalue("")] BSTR Language, 
                        [in, optional, defaultvalue("")] BSTR Data, 
                        [in, optional, defaultvalue(1)] long DataCount, 
                        [in, optional, defaultvalue("")] BSTR Address, 
                        [in, optional, defaultvalue(0)] long HitCount, 
                        [in, optional, defaultvalue(1)] dbgHitCountType HitCountType, 
                        [out, retval] Breakpoints** Breakpoints);
    };

    [
      odl,
      uuid(11C5114C-BB00-11D2-8AD1-00C04F79E479),
      version(1.0),
      helpstring("Used to manipulate a breakpoint."),
      helpcontext(0x0000ed3d),
      dual,
      oleautomation
    ]
    interface Breakpoint : IDispatch {
        [id(0x00000001), helpstring("Deletes this breakpoint."), helpcontext(0x0000ed3e)]
        HRESULT Delete();
        [id(0x00000064), propget, helpstring("The type of breakpoint this object represents."), helpcontext(0x0000ed3f)]
        HRESULT Type([out, retval] dbgBreakpointType* Type);
        [id(00000000), propget, helpstring("Sets/Returns the user-defined name of this breakpoint."), helpcontext(0x0000ed40)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(00000000), propput, helpstring("Sets/Returns the user-defined name of this breakpoint."), helpcontext(0x0000ed40)]
        HRESULT Name([in] BSTR Name);
        [id(0x00000065), propget, helpstring("The location type this breakpoint represents."), helpcontext(0x0000ed41)]
        HRESULT LocationType([out, retval] dbgBreakpointLocationType* LocationType);
        [id(0x00000066), propget, helpstring("The language-specific name at which this breakpoint is set."), helpcontext(0x0000ed42)]
        HRESULT FunctionName([out, retval] BSTR* FunctionName);
        [id(0x00000067), propget, helpstring("The line offset from the name for a function breakpoint."), helpcontext(0x0000ed43)]
        HRESULT FunctionLineOffset([out, retval] long* Offset);
        [id(0x00000068), propget, helpstring("The column offset from the name for a function breakpoint."), helpcontext(0x0000ed44)]
        HRESULT FunctionColumnOffset([out, retval] long* Offset);
        [id(0x00000069), propget, helpstring("The file in which this breakpoint is or will be set for file-based breakpoints."), helpcontext(0x0000ed45)]
        HRESULT File([out, retval] BSTR* File);
        [id(0x0000006a), propget, helpstring("The line within a file for a file breakpoint."), helpcontext(0x0000ed46)]
        HRESULT FileLine([out, retval] long* Line);
        [id(0x0000006b), propget, helpstring("The column within a file for a file breakpoint."), helpcontext(0x0000ed47)]
        HRESULT FileColumn([out, retval] long* Column);
        [id(0x0000006c), propget, helpstring("The condition type; i.e. break when true, or break when changed."), helpcontext(0x0000ed48)]
        HRESULT ConditionType([out, retval] dbgBreakpointConditionType* ConditionType);
        [id(0x0000006d), propget, helpstring("The condition for any type of breakpoint."), helpcontext(0x0000ed49)]
        HRESULT Condition([out, retval] BSTR* Condition);
        [id(0x0000006e), propget, helpstring("The language for name or conditional breakpoints."), helpcontext(0x0000ed4a)]
        HRESULT Language([out, retval] BSTR* Language);
        [id(0x0000006f), propget, helpstring("The hitcount type.  Describes how to interpret a hit count."), helpcontext(0x0000ed4b)]
        HRESULT HitCountType([out, retval] dbgHitCountType* HitCountType);
        [id(0x00000070), propget, helpstring("The hitcount target for any type of breakpoint.  Interpreted based on the hitcount type."), helpcontext(0x0000ed4c)]
        HRESULT HitCountTarget([out, retval] long* HitCountTarget);
        [id(0x00000071), propget, helpstring("Sets/Returns the enabled state of this breakpoint."), helpcontext(0x0000ed4d)]
        HRESULT Enabled([out, retval] VARIANT_BOOL* Enabled);
        [id(0x00000071), propput, helpstring("Sets/Returns the enabled state of this breakpoint."), helpcontext(0x0000ed4d)]
        HRESULT Enabled([in] VARIANT_BOOL Enabled);
        [id(0x00000072), propget, helpstring("Set/Returns a user-defined string identifying this breakpoint."), helpcontext(0x0000edca)]
        HRESULT Tag([out, retval] BSTR* Tag);
        [id(0x00000072), propput, helpstring("Set/Returns a user-defined string identifying this breakpoint."), helpcontext(0x0000edca)]
        HRESULT Tag([in] BSTR Tag);
        [id(0x00000073), propget, helpstring("The number of times this breakpoint has been hit during this debugging session."), helpcontext(0x0000ed4e)]
        HRESULT CurrentHits([out, retval] long* CurHitCount);
        [id(0x00000074), propget, helpstring("The program to which this breakpoint is bound."), helpcontext(0x0000ed4f)]
        HRESULT Program([out, retval] Program** Program);
        [id(0x000000c8), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTE);
        [id(0x000000c9), propget, helpstring("Returns this breakpoint's parent breakpoint.  If this breakpoint does not have a parent, then nothing is returned."), helpcontext(0x0000ed51)]
        HRESULT Parent([out, retval] Breakpoint** Breakpoint);
        [id(0x000000ca), propget, helpstring("Returns the collection in which this bound breakpoint resides, essentially providing the set of children owned by a pending breakpoint.  If this object is a pending breakpoint, then nothing is returned."), helpcontext(0x0000ed52)]
        HRESULT Collection([out, retval] Breakpoints** Breakpoints);
        [id(0x000000cb), propget, helpstring("Returns a collection of breakpoints that represent this breakpoint's children.  If the breakpoint has no children then nothing is returned."), helpcontext(0x0000ed53)]
        HRESULT Children([out, retval] Breakpoints** Breakpoints);
        [id(0x0000012c), helpstring("Resets the hit count for this breakpoint back to 0"), helpcontext(0x0000ee3b)]
        HRESULT ResetHitCount();
    };

    

    [
      odl,
      uuid(A4F4246C-C131-11D2-8AD1-00C04F79E479),
      version(1.0),
      helpstring("A collection of Language objects."),
      helpcontext(0x0000ed82),
      dual,
      oleautomation
    ]
    interface Languages : IDispatch {
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] Language** Language);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enumerator);
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Debugger** Debugger);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* Count);
    };

    [
      odl,
      uuid(B3CCFA68-C145-11D2-8AD1-00C04F79E479),
      version(1.0),
      helpstring("Used to examine and manipulate Language objects."),
      helpcontext(0x0000ed79),
      dual,
      oleautomation
    ]
    interface Language : IDispatch {
        [id(00000000), propget, helpstring("Returns the human-readable name of this language."), helpcontext(0x0000ed7a)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x000000c8), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTE);
        [id(0x000000c9), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Debugger** Debugger);
        [id(0x000000ca), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] Languages** Languages);
    };

    

    [
      odl,
      uuid(9F379969-5EAC-4A54-B2BC-6946CFFB56EF),
      version(1.0),
      helpstring("A collection of Process objects."),
      helpcontext(0x0000ed7e),
      dual,
      oleautomation
    ]
    interface Processes : IDispatch {
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] Process** Process);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enumerator);
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Debugger** Debugger);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* Count);
    };

    [
      uuid(ADF22C37-0069-4ADF-B12D-D8D47C38FE79),
      helpstring("Events fired when the text of a document is changed."),
      helpcontext(0x0000ee22)
    ]
    coclass TextEditorEvents {
        [default] interface _TextEditorEvents;
        [default, source] dispinterface _dispTextEditorEvents;
    };

    [
      odl,
      uuid(23B7A868-6C89-436A-94FA-25D755456A77),
      oleautomation
    ]
    interface _TextEditorEvents : IDispatch {
    };

    [
      uuid(2699DD44-C507-4DA3-AA34-314A6C21DFE2)
    ]
    dispinterface _dispTextEditorEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Occurs when changes in a buffer are committed."), helpcontext(0x0000ecec)]
            void LineChanged(
                            [in] TextPoint* StartPoint, 
                            TextPoint* EndPoint, 
                            long Hint);
    };

    

    [
      uuid(B35CAA8C-77DE-4AB3-8E5A-F038E3FC6056),
      helpstring("Collection of all projects in the environment; contains many properties of the solution."),
      helpcontext(0x0000eaa4)
    ]
    coclass Solution {
        [default] interface _Solution;
    };

    [
      odl,
      uuid(26F6CC4B-7A48-4E4D-8AF5-9E960232E05F),
      helpstring("Collection of all projects in the environment; contains many properties of the solution."),
      helpcontext(0x0000eaa4),
      dual,
      oleautomation
    ]
    interface _Solution : IDispatch {
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] Project** lppcReturn);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
        [id(0x0000000a), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x0000000b), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] _DTE** lppaReturn);
        [id(0x0000000c), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* lplReturn);
        [id(0x0000000d), propget, hidden, helpstring("Returns full pathname of solution file."), helpcontext(0x0000eac8)]
        HRESULT FileName([out, retval] BSTR* lpbstrReturn);
        [id(0x0000000e), helpstring("Saves the current solution file."), helpcontext(0x0000ea90)]
        HRESULT SaveAs([in] BSTR FileName);
        [id(0x0000000f), helpstring("Copies project file to specified location; adds it to solution as project file."), helpcontext(0x0000ea75)]
        HRESULT AddFromTemplate(
                        [in] BSTR FileName, 
                        [in] BSTR Destination, 
                        [in] BSTR ProjectName, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Exclusive, 
                        [out, retval] Project** IppptReturn);
        [id(0x00000010), helpstring("Adds project to solution based on project file already installed in correct location."), helpcontext(0x0000ea71)]
        HRESULT AddFromFile(
                        [in] BSTR FileName, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Exclusive, 
                        [out, retval] Project** IppptReturn);
        [id(0x00000011), helpstring("Opens the Solution represented by the filename."), helpcontext(0x0000ea89)]
        HRESULT Open([in] BSTR FileName);
        [id(0x00000012), helpstring("Causes the development environment to close the current solution file."), helpcontext(0x0000ea79)]
        HRESULT Close([in, optional, defaultvalue(0)] VARIANT_BOOL SaveFirst);
        [id(0x00000013), propget, helpstring("Returns the Properties collection."), helpcontext(0x0000eaf9)]
        HRESULT Properties([out, retval] Properties** ppObject);
        [id(0x00000016), propget, hidden]
        HRESULT IsDirty([out, retval] VARIANT_BOOL* lpfReturn);
        [id(0x00000016), propput, hidden]
        HRESULT IsDirty([in] VARIANT_BOOL lpfReturn);
        [id(0x00000019), helpstring("Removes a Project object from the Solution object."), helpcontext(0x0000ea8e)]
        HRESULT Remove([in] Project* proj);
        [id(0x0000001a), propget, helpstring("Returns full pathname of directory containing templates in Visual Studio install directory."), helpcontext(0x0000eb04)]
        HRESULT TemplatePath(
                        [in] BSTR ProjectType, 
                        [out, retval] BSTR* lpbstrPath);
        [id(0x0000001c), propget, helpstring("Returns full pathname of solution file."), helpcontext(0x0000eac8)]
        HRESULT FullName([out, retval] BSTR* lpbstrReturn);
        [id(0x0000001d), propget, helpstring("Returns value indicating whether object was changed since the last time it was saved."), helpcontext(0x0000eadb)]
        HRESULT Saved([out, retval] VARIANT_BOOL* lpfReturn);
        [id(0x0000001d), propput, helpstring("Returns value indicating whether object was changed since the last time it was saved."), helpcontext(0x0000eadb)]
        HRESULT Saved([in] VARIANT_BOOL lpfReturn);
        [id(0x0000001f), propget, helpstring("Returns the Globals object for storing persistent data."), helpcontext(0x0000eb18)]
        HRESULT Globals([out, retval] Globals** ppGlobals);
        [id(0x00000020), propget, helpstring("Returns the Solution Add-ins collection, containing all currently available add-ins associated with the open solution."), helpcontext(0x0000ec01)]
        HRESULT AddIns([out, retval] AddIns** ppAddIns);
        [id(0x00000021), propget, helpstring("Get an Extender for this object under the specified category."), helpcontext(0x0000eb84)]
        HRESULT Extender(
                        [in] BSTR ExtenderName, 
                        [out, retval] IDispatch** Extender);
        [id(0x00000022), propget, helpstring("Get a list of available Extenders on this object."), helpcontext(0x0000eb85)]
        HRESULT ExtenderNames([out, retval] VARIANT* ExtenderNames);
        [id(0x00000023), propget, helpstring("Get the Extension Category ID of this object."), helpcontext(0x0000eb86)]
        HRESULT ExtenderCATID([out, retval] BSTR* pRetval);
        [id(0x00000024), propget, helpstring("Returns a Boolean indicating if there are any projects currently in the solution."), helpcontext(0x0000ec02)]
        HRESULT IsOpen([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000026), propget, helpstring("Returns the SolutionBuild object."), helpcontext(0x0000ece6)]
        HRESULT SolutionBuild([out, retval] SolutionBuild** ppSolutionBuild);
        [id(0x00000028), helpstring("Creates an empty solution in the specified directory with the specified name."), helpcontext(0x0000ecf3)]
        HRESULT Create(
                        BSTR Destination, 
                        BSTR Name);
        [id(0x00000029), propget, helpstring("Returns a collection of projects currently in the solution."), helpcontext(0x0000ed90)]
        HRESULT Projects([out, retval] Projects** ppProjects);
        [id(0x0000002a), helpstring("Locates an item in a project."), helpcontext(0x0000eddc)]
        HRESULT FindProjectItem(
                        BSTR FileName, 
                        [out, retval] ProjectItem** ppProjectItem);
        [id(0x0000002b), helpstring("Returns the location of project items for a specific project."), helpcontext(0x0000eddb)]
        HRESULT ProjectItemsTemplatePath(
                        BSTR ProjectKind, 
                        [out, retval] BSTR* pFullPath);
    };

    [
      odl,
      uuid(A3C1C40C-9218-4D4C-9DAA-075F64F6922C),
      helpstring("Object used to build, clean, deploy, etc. the currently active SolutionConfiguration."),
      helpcontext(0x0000ece7),
      dual,
      oleautomation
    ]
    interface SolutionBuild : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Solution** ppSolution);
        [id(0x00000003), propget, helpstring("Returns the currently active SolutionConfiguration object."), helpcontext(0x0000ecc9)]
        HRESULT ActiveConfiguration([out, retval] SolutionConfiguration** ppSolutionConfiguration);
        [id(0x00000004), propget, helpstring("Returns the object used for setting inter-project dependencies."), helpcontext(0x0000ecca)]
        HRESULT BuildDependencies([out, retval] BuildDependencies** ppBuildDependencies);
        [id(0x00000005), propget, helpstring("Returns the current state (building, no builds started, build completed) of the build engine."), helpcontext(0x0000eccb)]
        HRESULT BuildState([out, retval] vsBuildState* pvsBuildState);
        [id(0x00000006), propget, helpstring("Returns the results of the last build."), helpcontext(0x0000eccc)]
        HRESULT LastBuildInfo([out, retval] long* pBuiltSuccessfully);
        [id(0x00000007), propput, helpstring("Sets/Returns the list of startup projects."), helpcontext(0x0000eccd)]
        HRESULT StartupProjects([in] VARIANT pProject);
        [id(0x00000007), propget, helpstring("Sets/Returns the list of startup projects."), helpcontext(0x0000eccd)]
        HRESULT StartupProjects([out, retval] VARIANT* pProject);
        [id(0x00000008), helpstring("Build the currently active SolutionConfiguration."), helpcontext(0x0000ecce)]
        HRESULT Build([in, optional, defaultvalue(0)] VARIANT_BOOL WaitForBuildToFinish);
        [id(0x00000009), helpstring("Starts debugging the currently active SolutionConfiguration."), helpcontext(0x0000eccf)]
        HRESULT Debug();
        [id(0x0000000a), helpstring("Deploys the currently active SolutionConfiguration."), helpcontext(0x0000ecd0)]
        HRESULT Deploy([in, optional, defaultvalue(0)] VARIANT_BOOL WaitForDeployToFinish);
        [id(0x0000000b), helpstring("Removes all files built from the currently active SolutionConfiguration."), helpcontext(0x0000ecd1)]
        HRESULT Clean([in, optional, defaultvalue(0)] VARIANT_BOOL WaitForCleanToFinish);
        [id(0x0000000c), helpstring("Sets all StartupProjects in the running state."), helpcontext(0x0000ecd2)]
        HRESULT Run();
        [id(0x0000000d), propget, helpstring("Returns the collection of SolutionConfigurations for the open solution."), helpcontext(0x0000ecd3)]
        HRESULT SolutionConfigurations([out, retval] SolutionConfigurations** ppSolutionConfigurations);
        [id(0x0000000e), helpstring("Builds a particular project within a specified Solution Configuration."), helpcontext(0x0000edd0)]
        HRESULT BuildProject(
                        BSTR SolutionConfiguration, 
                        BSTR ProjectUniqueName, 
                        [optional, defaultvalue(0)] VARIANT_BOOL WaitForBuildToFinish);
    };

    [
      odl,
      uuid(60AAAD75-CB8D-4C62-9959-24D6A6A50DE7),
      helpstring("Object defining a set of which projects and it's configuration should be built."),
      helpcontext(0x0000ece3),
      dual,
      oleautomation
    ]
    interface SolutionConfiguration : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] SolutionConfigurations** ppSolutionConfigurations);
        [id(00000000), propget, helpstring("Returns the name of the object."), helpcontext(0x0000edbb)]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000003), propget, helpstring("Returns a collection of SolutionContext objects."), helpcontext(0x0000ecd6)]
        HRESULT SolutionContexts([out, retval] SolutionContexts** ppOut);
        [id(0x00000004), helpstring("Removes the SolutionConfiguration object from use."), helpcontext(0x0000ecd7)]
        HRESULT Delete();
        [id(0x00000005), helpstring("Sets the SolutionConfiguration object as the currently active SolutionConfiguration."), helpcontext(0x0000ecd8)]
        HRESULT Activate();
    };

    [
      odl,
      uuid(23E78ED7-C9E1-462D-8BC6-366003486ED9),
      helpstring("Collection of defined SolutionConfiguration objects."),
      helpcontext(0x0000ece2),
      dual,
      oleautomation
    ]
    interface SolutionConfigurations : IDispatch {
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enumerator);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] SolutionConfiguration** ppOut);
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] SolutionBuild** ppBuild);
        [id(0x00000003), helpstring("Copies an existing SolutionConfiguration object, and returns the new SolutionConfiguration."), helpcontext(0x0000ecc8)]
        HRESULT Add(
                        [in] BSTR NewName, 
                        [in] BSTR ExistingName, 
                        [in] VARIANT_BOOL Propagate, 
                        [out, retval] SolutionConfiguration** ppSolutionConfiguration);
        [id(0x00000004), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* pCount);
    };

    [
      odl,
      uuid(0685B546-FB84-4917-AB98-98D40F892D61),
      helpstring("Collection of SolutionContext objects within a SolutionConfiguration object."),
      helpcontext(0x0000ece5),
      dual,
      oleautomation
    ]
    interface SolutionContexts : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] SolutionConfiguration** ppSolutionConfiguration);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enumerator);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] SolutionContext** ppOut);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* pCount);
    };

    [
      odl,
      uuid(FC6A1A82-9C8A-47BB-A046-6E965DF5A99B),
      helpstring("Object defining a project's configuration within a SolutionConfiguration object."),
      helpcontext(0x0000ece4),
      dual,
      oleautomation
    ]
    interface SolutionContext : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Collection([out, retval] SolutionContexts** ppSolutionContexts);
        [id(0x00000003), propget, helpstring("Returns the name of the Project this context will build."), helpcontext(0x0000ecd9)]
        HRESULT ProjectName([out, retval] BSTR* pName);
        [id(0x00000004), propget, helpstring("Sets/Returns the Project's configuration that will be built."), helpcontext(0x0000ecda)]
        HRESULT ConfigurationName([out, retval] BSTR* pConfigurationName);
        [id(0x00000004), propput, helpstring("Sets/Returns the Project's configuration that will be built."), helpcontext(0x0000ecda)]
        HRESULT ConfigurationName([in] BSTR pConfigurationName);
        [id(0x00000005), propget, helpstring("Returns the Project's platform that will be built."), helpcontext(0x0000ecdb)]
        HRESULT PlatformName([out, retval] BSTR* pPlatformName);
        [id(0x00000006), propget, helpstring("Sets/Returns if when the owning SolutionConfiguration is built, if this SolutionContext will also build."), helpcontext(0x0000ecdc)]
        HRESULT ShouldBuild([out, retval] VARIANT_BOOL* pPlatformName);
        [id(0x00000006), propput, helpstring("Sets/Returns if when the owning SolutionConfiguration is built, if this SolutionContext will also build."), helpcontext(0x0000ecdc)]
        HRESULT ShouldBuild([in] VARIANT_BOOL pPlatformName);
        [id(0x00000007), propget, helpstring("Sets/Returns if when the owning SolutionConfiguration is deployed, if this SolutionContext will also deploy."), helpcontext(0x0000ecdd)]
        HRESULT ShouldDeploy([out, retval] VARIANT_BOOL* pPlatformName);
        [id(0x00000007), propput, helpstring("Sets/Returns if when the owning SolutionConfiguration is deployed, if this SolutionContext will also deploy."), helpcontext(0x0000ecdd)]
        HRESULT ShouldDeploy([in] VARIANT_BOOL pPlatformName);
    };

    [
      odl,
      uuid(EAD260EB-1E5B-450A-B628-4CFADA11B4A1),
      helpstring("Collection of projects that must be built before the owning project can be built."),
      helpcontext(0x0000ece1),
      dual,
      oleautomation
    ]
    interface BuildDependencies : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] SolutionBuild** ppSolutionBuild);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enumerator);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] BuildDependency** ppOut);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* pCount);
    };

    [
      odl,
      uuid(9C5CEAAC-062F-4434-A2ED-78AB4D6134FE),
      helpstring("Object defining which projects must be built before the owning project can be built."),
      helpcontext(0x0000ece0),
      dual,
      oleautomation
    ]
    interface BuildDependency : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] BuildDependencies** ppBuildDependencies);
        [id(0x00000003), propget, helpstring("Returns the project that has a list of dependencies."), helpcontext(0x0000ec4e)]
        HRESULT Project([out, retval] Project** ppProject);
        [id(0x00000004), propget, helpstring("Returns the project that has a list of dependencies."), helpcontext(0x0000ec4e)]
        HRESULT RequiredProjects([out, retval] VARIANT* pProjects);
        [id(0x00000005), helpstring("Adds a project to the list of projects that must be built first."), helpcontext(0x0000ec50)]
        HRESULT AddProject(BSTR ProjectUniqueName);
        [id(0x00000006), helpstring("Removes a project from the list of projects that must be built first."), helpcontext(0x0000ec51)]
        HRESULT RemoveProject(BSTR ProjectUniqueName);
        [id(0x00000007), helpstring("Removes all projects from the list of projects that must be built first."), helpcontext(0x0000ecdf)]
        HRESULT RemoveAllProjects();
    };

    

    [
      odl,
      uuid(E6B96CAC-B8C7-40AE-B705-5C81878C4A9E),
      helpstring("Represents commands in the environment."),
      helpcontext(0x0000ea97),
      dual,
      oleautomation
    ]
    interface Commands : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] _DTE** lppaReturn);
        [id(0x00000003), hidden, helpstring("Adds the command, as represented by the GUID and ID, to the Commands object."), helpcontext(0x0000ea76)]
        HRESULT Add(
                        [in] BSTR Guid, 
                        [in] long ID, 
                        [in] VARIANT* Control);
        [id(0x00000004), helpstring("Invokes a command."), helpcontext(0x0000ea8b)]
        HRESULT Raise(
                        [in] BSTR Guid, 
                        [in] long ID, 
                        [in, out] VARIANT* CustomIn, 
                        [in, out] VARIANT* CustomOut);
        [id(0x00000005), helpstring("Returns command's GUID and ID in group associated with the CommandBarControl."), helpcontext(0x0000eab5)]
        HRESULT CommandInfo(
                        [in] IDispatch* CommandBarControl, 
                        [out] BSTR* Guid, 
                        [out] long* ID);
        [id(0x0000000a), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* lplReturn);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [in, optional, defaultvalue(-1)] long ID, 
                        [out, retval] Command** lppcReturn);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
        [id(0x0000000b), helpstring("Creates a command that persists and is available the next time started."), helpcontext(0x0000ec03)]
        HRESULT AddNamedCommand(
                        [in] AddIn* AddInInstance, 
                        [in] BSTR Name, 
                        [in] BSTR ButtonText, 
                        [in] BSTR Tooltip, 
                        [in] VARIANT_BOOL MSOButton, 
                        [in, optional, defaultvalue(0)] long Bitmap, 
                        [in, optional] SAFEARRAY(VARIANT)* ContextUIGUIDs, 
                        [in, optional, defaultvalue(16)] long vsCommandDisabledFlagsValue, 
                        [out, retval] Command** pVal);
        [id(0x0000000c), helpstring("Creates a command bar that persists and is available the next time started."), helpcontext(0x0000ec04)]
        HRESULT AddCommandBar(
                        [in] BSTR Name, 
                        [in] vsCommandBarType Type, 
                        [in, optional, defaultvalue(0)] IDispatch* CommandBarParent, 
                        [in, optional, defaultvalue(1)] long Position, 
                        [out, retval] IDispatch** pVal);
        [id(0x0000000d), helpstring("Removes a command bar that was created with Commands.AddCommandBar."), helpcontext(0x0000ec05)]
        HRESULT RemoveCommandBar([in] IDispatch* CommandBar);
    };

    [
      odl,
      uuid(5FE10FB0-91A1-4E55-BAAA-ECCAE5CCEB94),
      helpstring("Represents a command in the environment."),
      helpcontext(0x0000eb50),
      dual,
      oleautomation
    ]
    interface Command : IDispatch {
        [id(00000000), propget, helpstring("Returns the name of the object."), helpcontext(0x0000edbb)]
        HRESULT Name([out, retval] BSTR* lpbstr);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] Commands** lppcReturn);
        [id(0x00000003), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x00000004), propget, helpstring("The command group GUID used to represent the command."), helpcontext(0x0000eb27)]
        HRESULT Guid([out, retval] BSTR* lpbstr);
        [id(0x00000005), propget, helpstring("The ID within a command group GUID used to represent the command."), helpcontext(0x0000eb28)]
        HRESULT ID([out, retval] long* lReturn);
        [id(0x00000006), propget, helpstring("Returns a value specifying if the command is enabled in the current context."), helpcontext(0x0000eb29)]
        HRESULT IsAvailable([out, retval] VARIANT_BOOL* pAvail);
        [id(0x00000007), helpstring("Creates a persistent command bar control for this command."), helpcontext(0x0000ec07)]
        HRESULT AddControl(
                        [in] IDispatch* Owner, 
                        [in, optional, defaultvalue(1)] long Position, 
                        [out, retval] IDispatch** pCommandBarControl);
        [id(0x00000008), helpstring("Removes a named command that was created with Commands.AddNamedCommand."), helpcontext(0x0000ec06)]
        HRESULT Delete();
        [id(0x00000009), propget, helpstring("Gets/Sets the list of key strokes to invoke the command."), helpcontext(0x0000ecff)]
        HRESULT Bindings([out, retval] VARIANT* pVar);
        [id(0x00000009), propput, helpstring("Gets/Sets the list of key strokes to invoke the command."), helpcontext(0x0000ecff)]
        HRESULT Bindings(VARIANT pVar);
        [id(0x00000001), propget]
        HRESULT LocalizedName([out, retval] BSTR* lpbstr);
    };

    

    [
      odl,
      uuid(6CAA67CF-43AE-4184-AAAB-0200DDF6B240),
      helpstring("Represents selected project(s) or project item(s)."),
      helpcontext(0x0000eaa0),
      dual,
      oleautomation
    ]
    interface SelectedItems : IDispatch {
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] SelectedItem** lplppReturn);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
        [id(0x00000001), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* lplReturn);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] _DTE** lppaReturn);
        [id(0x00000003), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x00000004), propget, helpstring("Returns value indicating whether the selection includes multiple items."), helpcontext(0x0000eae7)]
        HRESULT MultiSelect([out, retval] VARIANT_BOOL* pfMultiSelect);
        [id(0x00000005), propget, helpstring("Returns collection of objects representing selection context at finer granularity than Project/ProjectItem."), helpcontext(0x0000eafc)]
        HRESULT SelectionContainer([out, retval] SelectionContainer** lppdispSelContainer);
    };

    [
      odl,
      uuid(049D2CDF-3731-4CB6-A233-BE97BCE922D3),
      helpstring("Represents selected project(s) or project item(s)."),
      helpcontext(0x0000eaa0),
      dual,
      oleautomation
    ]
    interface SelectedItem : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] SelectedItems** lppReturn);
        [id(0x00000002), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppReturn);
        [id(0x00000003), propget, helpstring("Returns the Project object associated with the object the Project property was invoked on."), helpcontext(0x0000eaf7)]
        HRESULT Project([out, retval] Project** lppReturn);
        [id(0x00000004), propget, helpstring("Returns the ProjectItem object."), helpcontext(0x0000eaf4)]
        HRESULT ProjectItem([out, retval] ProjectItem** lppReturn);
        [id(00000000), propget, helpstring("Returns the name of the object."), helpcontext(0x0000edbb)]
        HRESULT Name([out, retval] BSTR* lpbstrReturn);
        [id(0x00000008), propget, restricted, hidden, helpstring("Returns an integer indicating the number of strings included in the Info property."), helpcontext(0x0000ead7)]
        HRESULT InfoCount([out, retval] short* lpnCount);
        [id(0x00000009), propget, restricted, hidden, helpstring("Returns a string providing information on the selected item."), helpcontext(0x0000ead8)]
        HRESULT Info(
                        [in] short index, 
                        [out, retval] VARIANT* lpbstrReturn);
    };

    [
      odl,
      uuid(02273422-8DD4-4A9F-8A8B-D70443D510F4),
      helpstring("Represents the selection context with objects that model the selection below the project item level."),
      helpcontext(0x0000eaa1),
      dual,
      oleautomation
    ]
    interface SelectionContainer : IDispatch {
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] IDispatch** lplppReturn);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
        [id(0x00000001), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* lplReturn);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] SelectedItems** lppReturn);
        [id(0x00000003), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppReturn);
    };

    [
      odl,
      uuid(E577442A-98E1-46C5-BD2E-D25807EC81CE),
      helpstring("Collection of window layouts available."),
      helpcontext(0x0000eb60),
      dual,
      oleautomation
    ]
    interface WindowConfigurations : IDispatch {
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] WindowConfiguration** pWindowConfiguration);
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** pDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] _DTE** pParent);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* pCount);
        [id(0x00000004), helpstring("Adds a window to the collection of currently linked windows."), helpcontext(0x0000ea77)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] WindowConfiguration** pWindowConfiguration);
        [id(0x00000005), propget, helpstring("Returns the name of the currently active window configuration."), helpcontext(0x0000ed93)]
        HRESULT ActiveConfigurationName([out, retval] BSTR* pbstrName);
    };

    [
      odl,
      uuid(41D02413-8A67-4C28-A980-AD7539ED415D),
      helpstring("Object representing a window layout."),
      helpcontext(0x0000eb5c),
      dual,
      oleautomation
    ]
    interface WindowConfiguration : IDispatch {
        [id(00000000), propget, helpstring("Returns the name of the object."), helpcontext(0x0000edbb)]
        HRESULT Name([out, retval] BSTR* pName);
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** pDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Collection([out, retval] WindowConfigurations** pWindowConfigurations);
        [id(0x00000003), helpstring("Make the window layout the current layout."), helpcontext(0x0000eb5d)]
        HRESULT Apply([in, optional, defaultvalue(-1)] VARIANT_BOOL FromCustomViews);
        [id(0x00000004), helpstring("Removes an object from a collection."), helpcontext(0x0000ea8c)]
        HRESULT Delete();
        [id(0x00000005), helpstring("Set the window layout contained in the object match the currently used layout."), helpcontext(0x0000eb5e)]
        HRESULT Update();
    };

    [
      odl,
      uuid(C34301A1-3EF1-41D8-932A-FEA4A8A8CE0C),
      helpstring("Object for manipulating the Status Bar."),
      helpcontext(0x0000ecd5),
      dual,
      oleautomation
    ]
    interface StatusBar : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** pDTE);
        [id(0x00000002), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT Parent([out, retval] _DTE** pDTE);
        [id(0x00000004), helpstring("Resets the text in the status bar to the default text."), helpcontext(0x0000ebfa)]
        HRESULT Clear();
        [id(0x00000005), helpstring("Display an animated picture in the status bar."), helpcontext(0x0000ebfb)]
        HRESULT Animate(
                        VARIANT_BOOL On, 
                        VARIANT AnimationType);
        [id(0x00000006), helpstring("Creates, modifies, and clears the meter control inside the status bar."), helpcontext(0x0000ebfc)]
        HRESULT Progress(
                        VARIANT_BOOL InProgress, 
                        [in, optional, defaultvalue("")] BSTR Label, 
                        [in, optional, defaultvalue(0)] long AmountCompleted, 
                        [in, optional, defaultvalue(0)] long Total);
        [id(0x00000007), helpstring("Sets x, y, width, and height coordinates in the status bar."), helpcontext(0x0000ebfd)]
        HRESULT SetXYWidthHeight(
                        long X, 
                        long Y, 
                        long Width, 
                        long Height);
        [id(0x00000008), helpstring("Sets the text column and character position in the status bar."), helpcontext(0x0000ebfe)]
        HRESULT SetLineColumnCharacter(
                        long Line, 
                        long Column, 
                        long Character);
        [id(00000000), propput, helpstring("The text displayed in the status bar."), helpcontext(0x0000ec43)]
        HRESULT Text([in] BSTR pTextc);
        [id(00000000), propget, helpstring("The text displayed in the status bar."), helpcontext(0x0000ec43)]
        HRESULT Text([out, retval] BSTR* pTextc);
        [id(0x00000009), helpstring("Turn on or off the highlight within the status bar."), helpcontext(0x0000ec44)]
        HRESULT Highlight(VARIANT_BOOL Highlight);
        [id(0x0000000a), helpstring("Allows or disallows text updates in the status bar."), helpcontext(0x0000ed04)]
        HRESULT ShowTextUpdates(
                        VARIANT_BOOL TextUpdates, 
                        [out, retval] VARIANT_BOOL* WillShowUpdates);
    };

    [
      odl,
      uuid(8D0AA9CC-8465-42F3-AD6E-DFDE28CCC75D),
      helpstring("Object that provides access to Automation Extenders."),
      helpcontext(0x0000eb62),
      dual,
      oleautomation
    ]
    interface ObjectExtenders : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] _DTE** lppaReturn);
        [id(0x00000003), helpstring("Registers an Extender Provider for a specific Extender category."), helpcontext(0x0000eb63)]
        HRESULT RegisterExtenderProvider(
                        [in] BSTR ExtenderCATID, 
                        [in] BSTR ExtenderName, 
                        [in] IExtenderProvider* ExtenderProvider, 
                        [in, optional, defaultvalue("")] BSTR LocalizedName, 
                        [out, retval] long* Cookie);
        [id(0x00000004), helpstring("Unregister a previously registered Extender Provider."), helpcontext(0x0000eb64)]
        HRESULT UnregisterExtenderProvider([in] long Cookie);
        [id(0x00000005), helpstring("Get an Extender for the given object under the specified category."), helpcontext(0x0000eb65)]
        HRESULT GetExtender(
                        [in] BSTR ExtenderCATID, 
                        [in] BSTR ExtenderName, 
                        [in] IUnknown* ExtendeeObject, 
                        [out, retval] IDispatch** Extender);
        [id(0x00000006), helpstring("List all Extenders for the given object under the specified category."), helpcontext(0x0000eb66)]
        HRESULT GetExtenderNames(
                        [in] BSTR ExtenderCATID, 
                        [in] IUnknown* ExtendeeObject, 
                        [out, retval] VARIANT* ExtenderNames);
        [id(0x00000007), helpstring("List all Contextual Extender CATIDs for the current selection."), helpcontext(0x0000eb67)]
        HRESULT GetContextualExtenderCATIDs([out, retval] VARIANT* ExtenderCATIDs);
        [id(0x00000008), hidden]
        HRESULT GetLocalizedExtenderName(
                        [in] BSTR ExtenderCATID, 
                        [in] BSTR ExtenderName, 
                        [out, retval] BSTR* pLocalizedName);
        [id(0x00000009)]
        HRESULT RegisterExtenderProviderUnk(
                        [in] BSTR ExtenderCATID, 
                        [in] BSTR ExtenderName, 
                        [in] IExtenderProviderUnk* ExtenderProvider, 
                        [in, optional, defaultvalue("")] BSTR LocalizedName, 
                        [out, retval] long* Cookie);
    };

    [
      odl,
      uuid(4DB06329-23F4-443B-9ABD-9CF611E8AE07),
      helpstring("Object that represents an Extender Provider."),
      helpcontext(0x0000eb68),
      dual,
      oleautomation
    ]
    interface IExtenderProvider : IDispatch {
        [id(0x00000001), helpstring("Get an Extender for the given object under the specified category."), helpcontext(0x0000eb69)]
        HRESULT GetExtender(
                        [in] BSTR ExtenderCATID, 
                        [in] BSTR ExtenderName, 
                        [in] IDispatch* ExtendeeObject, 
                        [in] IExtenderSite* ExtenderSite, 
                        [in] long Cookie, 
                        [out, retval] IDispatch** Extender);
        [id(0x00000002), helpstring("Returns True if the Provider can provide an Extender for the given object under the specified category."), helpcontext(0x0000eb6a)]
        HRESULT CanExtend(
                        [in] BSTR ExtenderCATID, 
                        [in] BSTR ExtenderName, 
                        [in] IDispatch* ExtendeeObject, 
                        [out, retval] VARIANT_BOOL* fRetval);
    };

    [
      odl,
      uuid(E57C510B-968B-4A3C-A467-EE4013157DC9),
      helpstring("Site Object for an Automation Extender."),
      helpcontext(0x0000eb6d),
      dual,
      oleautomation
    ]
    interface IExtenderSite : IDispatch {
        [id(0x00000001), helpstring("Method an Automation Extender is expected to call back upon when being destroyed to notify its site."), helpcontext(0x0000eb6e)]
        HRESULT NotifyDelete([in] long Cookie);
        [id(0x00000002), helpstring("Returns an interface or object that can be accessed at run time by name."), helpcontext(0x0000ea7f)]
        HRESULT GetObject(
                        [in, optional, defaultvalue("")] BSTR Name, 
                        [out, retval] IDispatch** ppObject);
    };

    [
      odl,
      uuid(F69B64A3-9017-4E48-9784-E152B51AA722),
      helpstring("Object that represents an Extender Provider."),
      helpcontext(0x0000eb68),
      dual,
      oleautomation
    ]
    interface IExtenderProviderUnk : IDispatch {
        [id(0x00000001), helpstring("Get an Extender for the given object under the specified category."), helpcontext(0x0000eb69)]
        HRESULT GetExtender(
                        [in] BSTR ExtenderCATID, 
                        [in] BSTR ExtenderName, 
                        [in] IUnknown* ExtendeeObject, 
                        [in] IExtenderSite* ExtenderSite, 
                        [in] long Cookie, 
                        [out, retval] IDispatch** Extender);
        [id(0x00000002), helpstring("Returns True if the Provider can provide an Extender for the given object under the specified category."), helpcontext(0x0000eb6a)]
        HRESULT CanExtend(
                        [in] BSTR ExtenderCATID, 
                        [in] BSTR ExtenderName, 
                        [in] IUnknown* ExtendeeObject, 
                        [out, retval] VARIANT_BOOL* fRetval);
    };

    [
      odl,
      uuid(40D4B9B6-739B-4965-8D65-692AEC692266),
      helpstring("Object representing Find Symbol."),
      helpcontext(0x0000eb71),
      dual,
      oleautomation
    ]
    interface Find : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] _DTE** lppaReturn);
        [id(0x00000003), propget, helpstring("Gets/Sets the Find action to be performed."), helpcontext(0x0000eb72)]
        HRESULT Action([out, retval] vsFindAction* pAction);
        [id(0x00000003), propput, helpstring("Gets/Sets the Find action to be performed."), helpcontext(0x0000eb72)]
        HRESULT Action([in] vsFindAction pAction);
        [id(0x00000004), propget, helpstring("Gets/Sets the text/pattern to be searched."), helpcontext(0x0000eb73)]
        HRESULT FindWhat([out, retval] BSTR* pFindWhat);
        [id(0x00000004), propput, helpstring("Gets/Sets the text/pattern to be searched."), helpcontext(0x0000eb73)]
        HRESULT FindWhat([in] BSTR pFindWhat);
        [id(0x00000005), propget, helpstring("Gets/Sets whether or not the search is case sensitive."), helpcontext(0x0000eb74)]
        HRESULT MatchCase([out, retval] VARIANT_BOOL* pMatchCase);
        [id(0x00000005), propput, helpstring("Gets/Sets whether or not the search is case sensitive."), helpcontext(0x0000eb74)]
        HRESULT MatchCase([in] VARIANT_BOOL pMatchCase);
        [id(0x00000006), propget, helpstring("Gets/Sets whether or not the search matches whole words."), helpcontext(0x0000eb75)]
        HRESULT MatchWholeWord([out, retval] VARIANT_BOOL* pMatchWholeWord);
        [id(0x00000006), propput, helpstring("Gets/Sets whether or not the search matches whole words."), helpcontext(0x0000eb75)]
        HRESULT MatchWholeWord([in] VARIANT_BOOL pMatchWholeWord);
        [id(0x00000007), propget, helpstring("Gets/Sets whether or not hidden text is included in the search."), helpcontext(0x0000eb76)]
        HRESULT MatchInHiddenText([out, retval] VARIANT_BOOL* pMatchInHiddenText);
        [id(0x00000007), propput, helpstring("Gets/Sets whether or not hidden text is included in the search."), helpcontext(0x0000eb76)]
        HRESULT MatchInHiddenText([in] VARIANT_BOOL pMatchInHiddenText);
        [id(0x00000008), propget, helpstring("Gets/Sets whether the search is performed backwards from the current position."), helpcontext(0x0000eb77)]
        HRESULT Backwards([out, retval] VARIANT_BOOL* pBackwards);
        [id(0x00000008), propput, helpstring("Gets/Sets whether the search is performed backwards from the current position."), helpcontext(0x0000eb77)]
        HRESULT Backwards([in] VARIANT_BOOL pBackwards);
        [id(0x00000009), propget, helpstring("Gets/Sets whether or not sub-folders are searched for a Find in Files operation."), helpcontext(0x0000eb78)]
        HRESULT SearchSubfolders([out, retval] VARIANT_BOOL* pSearchSubfolders);
        [id(0x00000009), propput, helpstring("Gets/Sets whether or not sub-folders are searched for a Find in Files operation."), helpcontext(0x0000eb78)]
        HRESULT SearchSubfolders([in] VARIANT_BOOL pSearchSubfolders);
        [id(0x0000000a), propget, helpstring("Gets/Sets whether or not modified documents remain open after a Replace operation."), helpcontext(0x0000eb79)]
        HRESULT KeepModifiedDocumentsOpen([out, retval] VARIANT_BOOL* pKeepModifiedDocumentsOpen);
        [id(0x0000000a), propput, helpstring("Gets/Sets whether or not modified documents remain open after a Replace operation."), helpcontext(0x0000eb79)]
        HRESULT KeepModifiedDocumentsOpen([in] VARIANT_BOOL pKeepModifiedDocumentsOpen);
        [id(0x0000000b), propget, helpstring("Gets/Sets the syntax used to specify the search pattern."), helpcontext(0x0000eb7a)]
        HRESULT PatternSyntax([out, retval] vsFindPatternSyntax* pPatternSyntax);
        [id(0x0000000b), propput, helpstring("Gets/Sets the syntax used to specify the search pattern."), helpcontext(0x0000eb7a)]
        HRESULT PatternSyntax([in] vsFindPatternSyntax pPatternSyntax);
        [id(0x0000000c), propget, helpstring("Gets/Sets the replacement text for a Replace operation."), helpcontext(0x0000eb7b)]
        HRESULT ReplaceWith([out, retval] BSTR* pReplaceWith);
        [id(0x0000000c), propput, helpstring("Gets/Sets the replacement text for a Replace operation."), helpcontext(0x0000eb7b)]
        HRESULT ReplaceWith([in] BSTR pReplaceWith);
        [id(0x0000000d), propget, helpstring("Gets/Sets the target of the search operation."), helpcontext(0x0000eb7c)]
        HRESULT Target([out, retval] vsFindTarget* pTarget);
        [id(0x0000000d), propput, helpstring("Gets/Sets the target of the search operation."), helpcontext(0x0000eb7c)]
        HRESULT Target([in] vsFindTarget pTarget);
        [id(0x0000000e), propget, helpstring("Gets/Sets the search path for a Find in Files operation."), helpcontext(0x0000eb7d)]
        HRESULT SearchPath([out, retval] BSTR* pSearchPath);
        [id(0x0000000e), propput, helpstring("Gets/Sets the search path for a Find in Files operation."), helpcontext(0x0000eb7d)]
        HRESULT SearchPath([in] BSTR pSearchPath);
        [id(0x0000000f), propget, helpstring("Gets/Sets the file masks for the files to be searched."), helpcontext(0x0000eb7e)]
        HRESULT FilesOfType([out, retval] BSTR* pFilesOfType);
        [id(0x0000000f), propput, helpstring("Gets/Sets the file masks for the files to be searched."), helpcontext(0x0000eb7e)]
        HRESULT FilesOfType([in] BSTR pFilesOfType);
        [id(0x00000010), propget, helpstring("Gets/Sets the location of where the search results are shown for a bulk search operation."), helpcontext(0x0000eb7f)]
        HRESULT ResultsLocation([out, retval] vsFindResultsLocation* pResultsLocation);
        [id(0x00000010), propput, helpstring("Gets/Sets the location of where the search results are shown for a bulk search operation."), helpcontext(0x0000eb7f)]
        HRESULT ResultsLocation([in] vsFindResultsLocation pResultsLocation);
        [id(0x00000011), helpstring("Performs a search based on the options set on the Find object."), helpcontext(0x0000eb80)]
        HRESULT Execute([out, retval] vsFindResult* pResult);
        [id(00000000), helpstring("Performs a search based on options passed in to this method without changing any options on the Find object."), helpcontext(0x0000eb81)]
        HRESULT FindReplace(
                        [in] vsFindAction Action, 
                        [in] BSTR FindWhat, 
                        [in, optional, defaultvalue(0)] long vsFindOptionsValue, 
                        [in, optional, defaultvalue("")] BSTR ReplaceWith, 
                        [in, optional, defaultvalue(1)] vsFindTarget Target, 
                        [in, optional, defaultvalue("")] BSTR SearchPath, 
                        [in, optional, defaultvalue("")] BSTR FilesOfType, 
                        [in, optional, defaultvalue(1)] vsFindResultsLocation ResultsLocation, 
                        [out, retval] vsFindResult* pResult);
    };

    

    [
      odl,
      uuid(D5DBE57B-C074-4E95-B015-ABEEAA391693),
      helpstring("Object for performing common file actions."),
      helpcontext(0x0000eb87),
      dual,
      oleautomation
    ]
    interface ItemOperations : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] _DTE** lppaReturn);
        [id(0x00000003), helpstring("Opens a file as though the user invoked a open file command from the UI."), helpcontext(0x0000ea87)]
        HRESULT OpenFile(
                        [in] BSTR FileName, 
                        [in, optional, defaultvalue("{00000000-0000-0000-0000-000000000000}")] BSTR ViewKind, 
                        [out, retval] Window** Window);
        [id(0x00000004), helpstring("Creates a file as though the user invoked a new file command from the UI."), helpcontext(0x0000eb88)]
        HRESULT NewFile(
                        [in, optional, defaultvalue("General	ext File")] BSTR Item, 
                        [in, optional, defaultvalue("")] BSTR Name, 
                        [in, optional, defaultvalue("{00000000-0000-0000-0000-000000000000}")] BSTR ViewKind, 
                        [out, retval] Window** Window);
        [id(0x00000005), helpstring("Returns True if the file is open in the specified view."), helpcontext(0x0000ea80)]
        HRESULT IsFileOpen(
                        [in] BSTR FileName, 
                        [in, optional, defaultvalue("{FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF}")] BSTR ViewKind, 
                        [out, retval] VARIANT_BOOL* pfRetval);
        [id(0x00000006), helpstring("Adds an existing item to the current project."), helpcontext(0x0000eb89)]
        HRESULT AddExistingItem(
                        [in] BSTR FileName, 
                        [out, retval] ProjectItem** ProjectItem);
        [id(0x00000007), helpstring("Adds a new item to the current project."), helpcontext(0x0000eb8a)]
        HRESULT AddNewItem(
                        [in, optional, defaultvalue("General	ext File")] BSTR Item, 
                        [in, optional, defaultvalue("")] BSTR Name, 
                        [out, retval] ProjectItem** ProjectItem);
        [id(0x00000008), helpstring("Navigates to the given URL."), helpcontext(0x0000eb8b)]
        HRESULT Navigate(
                        [in, optional, defaultvalue("")] BSTR URL, 
                        [in, optional, defaultvalue(0)] vsNavigateOptions Options, 
                        [out, retval] Window** Window);
        [id(0x00000009), propget, helpstring("Displays all unsaved files, and allows the user to optionally save specific files."), helpcontext(0x0000ecd4)]
        HRESULT PromptToSave([out, retval] vsPromptResult* Saved);
    };

    

    [
      odl,
      uuid(D8DEC44D-CAF2-4B39-A539-B91AE921BA92),
      helpstring("Allows actions within the source editor to be undone as one atomic unit."),
      helpcontext(0x0000ec34),
      dual,
      oleautomation
    ]
    interface UndoContext : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] _DTE** DTEObject);
        [id(0x00000003), helpstring("Starts a new undo operation."), helpcontext(0x0000ec35)]
        HRESULT Open(
                        [in] BSTR Name, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Strict);
        [id(0x00000004), helpstring("Ends an undo operation."), helpcontext(0x0000ec36)]
        HRESULT Close();
        [id(0x00000005), helpstring("Aborts an undo context, discarding all undo state."), helpcontext(0x0000ec37)]
        HRESULT SetAborted();
        [id(0x00000006), propget, helpstring("Reflects if the Undo Context is strict."), helpcontext(0x0000ec42)]
        HRESULT IsStrict([out, retval] VARIANT_BOOL* pIsStrict);
        [id(0x00000007), propget, helpstring("Determines if an undo context has been aborted."), helpcontext(0x0000ec38)]
        HRESULT IsAborted([out, retval] VARIANT_BOOL* pIsAborted);
        [id(0x00000008), propget, helpstring("Determines if an undo context is currently in use."), helpcontext(0x0000ec39)]
        HRESULT IsOpen([out, retval] VARIANT_BOOL* pIsOpen);
    };

    [
      odl,
      uuid(F9F99155-6D4D-49B1-AD63-C78C3E8A5916),
      helpstring("Object allowing access to the macro recorder."),
      helpcontext(0x0000ec2f),
      dual,
      oleautomation
    ]
    interface Macros : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** pDTE);
        [id(0x00000002), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT Parent([out, retval] _DTE** pDTE);
        [id(0x00000003), propget, helpstring("Returns true if the macro recorder is recording actions (Not to be used from within a macro)."), helpcontext(0x0000ec30)]
        HRESULT IsRecording([out, retval] VARIANT_BOOL* vbIsRecording);
        [id(0x00000004), helpstring("Writes the line of code to the macro being recorded (Not to be used from within a macro)."), helpcontext(0x0000ec31)]
        HRESULT EmitMacroCode(BSTR Code);
        [id(0x00000005), helpstring("Pause the macro recorder so no code is written to the recording macro (Not to be used from within a macro)."), helpcontext(0x0000ec32)]
        HRESULT Pause();
        [id(0x00000006), helpstring("Resumes the macro recorder from the paused state so code is written to the recording macro (Not to be used from within a macro)."), helpcontext(0x0000ec33)]
        HRESULT Resume();
    };

    [
      odl,
      uuid(F1DDC2C2-DF76-4EBB-9DE8-48AD2557062C),
      helpstring("A Document open for editing."),
      helpcontext(0x0000eb51),
      dual,
      oleautomation
    ]
    interface SourceControl : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTEObject);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] _DTE** ppDTEObject);
        [id(0x00000003), helpstring("Returns if an items is under source code control."), helpcontext(0x0000edd8)]
        HRESULT IsItemUnderSCC(
                        [in] BSTR ItemName, 
                        [out, retval] VARIANT_BOOL* pfControlled);
        [id(0x00000004), helpstring("Returns if an item is checked out of source code control for editing."), helpcontext(0x0000edd9)]
        HRESULT IsItemCheckedOut(
                        [in] BSTR ItemName, 
                        [out, retval] VARIANT_BOOL* pfCheckedOut);
        [id(0x00000005), helpstring("Checks out an item from source code control for editing."), helpcontext(0x0000edda)]
        HRESULT CheckOutItem(
                        [in] BSTR ItemName, 
                        [out, retval] VARIANT_BOOL* pfCheckedOut);
        [id(0x00000006), helpstring("Checks out an item from source code control for editing."), helpcontext(0x0000edda)]
        HRESULT CheckOutItems(
                        [in] SAFEARRAY(VARIANT)* ItemNames, 
                        [out, retval] VARIANT_BOOL* pfCheckedOut);
        [id(0x00000007)]
        HRESULT ExcludeItem(
                        [in] BSTR ProjectFile, 
                        [in] BSTR ItemName);
        [id(0x00000008)]
        HRESULT ExcludeItems(
                        [in] BSTR ProjectFile, 
                        [in] SAFEARRAY(VARIANT)* ItemNames);
    };

    [
      odl,
      uuid(F47DC7E7-84B6-474F-BB91-631640AA0560),
      helpstring("Provides access to the code associated with a project item."),
      helpcontext(0x0000eaa5),
      hidden,
      dual,
      oleautomation
    ]
    interface TextBuffer : IDispatch {
        [id(0x60020000), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Window** retval);
        [id(0x60020001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** lppaReturn);
        [id(0x00000001), helpstring("Adds a string to the TextBuffer object."), helpcontext(0x0000ea73)]
        HRESULT AddFromString(
                        [in] BSTR String, 
                        [in, optional, defaultvalue(1)] long StartLine);
        [id(0x00000002), helpstring("Adds the contents of a file to a TextBuffer object."), helpcontext(0x0000ea72)]
        HRESULT AddFromFile(
                        [in] BSTR FileName, 
                        [in, optional, defaultvalue(1)] long StartLine);
        [id(0x00000003), propget, helpstring("Returns the specified block of lines."), helpcontext(0x0000eadf)]
        HRESULT Lines(
                        [in] long StartLine, 
                        [in] long Count, 
                        [out, retval] BSTR* String);
        [id(0x00000004), propget, helpstring("Returns number of new line sequences in buffer."), helpcontext(0x0000eaba)]
        HRESULT CountOfLines([out, retval] long* CountOfLines);
        [id(0x00000006), helpstring("Deletes a single line of code or a specified range of lines in a TextBuffer object."), helpcontext(0x0000ea7c)]
        HRESULT DeleteLines(
                        [in] long StartLine, 
                        [in, optional, defaultvalue(1)] long Count);
        [id(0x0000000e), helpstring("Searches a TextBuffer for a specified string."), helpcontext(0x0000ea7e)]
        HRESULT Find(
                        [in] BSTR Target, 
                        [in, out] long* StartLine, 
                        [in, out] long* StartColumn, 
                        [in, out] long* EndLine, 
                        [in, out] long* EndColumn, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL WholeWord, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL MatchCase, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL PatternSearch, 
                        [out, retval] VARIANT_BOOL* pfFound);
    };

    [
      odl,
      uuid(6659ED14-2AB6-47F3-A890-00C8ABA43B84),
      hidden,
      oleautomation
    ]
    interface ISupportVSProperties : IUnknown {
        HRESULT _stdcall NotifyPropertiesDelete();
    };

    [
      odl,
      uuid(56FCD5AF-7F17-4C5C-AA8D-AE2BB2DDBF38),
      helpstring("Object representing the tool box window."),
      helpcontext(0x0000eb56),
      dual,
      oleautomation
    ]
    interface ToolBox : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** pDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Window** pParent);
        [id(0x00000003), propget, helpstring("Returns the currently active item in the collection."), helpcontext(0x0000eb3c)]
        HRESULT ActiveTab([out, retval] ToolBoxTab** pToolBoxTab);
        [id(0x00000004), propget, helpstring("Returns the collection of Tabs on the tool box."), helpcontext(0x0000eb40)]
        HRESULT ToolBoxTabs([out, retval] ToolBoxTabs** pToolBoxTabs);
    };

    [
      odl,
      uuid(CE2DEF9E-3387-4BF2-967B-A1F7F70DF325),
      helpstring("An individual tab on the tool box."),
      helpcontext(0x0000eb59),
      dual,
      oleautomation
    ]
    interface ToolBoxTab : IDispatch {
        [id(00000000), propget, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([out, retval] BSTR* pName);
        [id(00000000), propput, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([in] BSTR pName);
        [id(0x00000001), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] ToolBoxTabs** pToolBoxTabs);
        [id(0x00000002), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** pDTE);
        [id(0x00000004), helpstring("Moves the focus to the specified window."), helpcontext(0x0000ea91)]
        HRESULT Activate();
        [id(0x00000005), helpstring("Removes an object from a collection."), helpcontext(0x0000ea8c)]
        HRESULT Delete();
        [id(0x00000006), propget, helpstring("Returns the collection of items on this tab."), helpcontext(0x0000eb5b)]
        HRESULT ToolBoxItems([out, retval] ToolBoxItems** pToolBoxItems);
        [id(0x00000008), propget, helpstring("Gets/Sets the view to list mode."), helpcontext(0x0000eb3d)]
        HRESULT ListView([out, retval] VARIANT_BOOL* pListView);
        [id(0x00000008), propput, helpstring("Gets/Sets the view to list mode."), helpcontext(0x0000eb3d)]
        HRESULT ListView([in] VARIANT_BOOL pListView);
    };

    [
      odl,
      uuid(CF177B52-4F2F-42A0-8DA3-CE78679A0D2D),
      helpstring("Collection of all pages on the tool box."),
      helpcontext(0x0000eb57),
      dual,
      oleautomation
    ]
    interface ToolBoxTabs : IDispatch {
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        VARIANT index, 
                        [out, retval] ToolBoxTab** pItem);
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** pDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] ToolBox** pParent);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* pCount);
        [id(0x00000004), helpstring("Adds a tab to the tool box."), helpcontext(0x0000eb3f)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] ToolBoxTab** pToolBoxTabs);
    };

    [
      odl,
      uuid(395C7DFB-F158-431C-8F43-DDA83B4EF54E),
      helpstring("Collection of all items on a tool box page."),
      helpcontext(0x0000eb55),
      dual,
      oleautomation
    ]
    interface ToolBoxItems : IDispatch {
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        VARIANT index, 
                        [out, retval] ToolBoxItem** pItem);
        [id(0x00000001), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Parent([out, retval] ToolBoxTab** pParent);
        [id(0x00000002), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** pDTE);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* pCount);
        [id(0x00000004), helpstring("Adds an item to the tool box."), helpcontext(0x0000eb3e)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in] VARIANT Data, 
                        [in, optional, defaultvalue(1)] vsToolBoxItemFormat Format, 
                        [out, retval] ToolBoxItem** pToolBoxItem);
        [id(0x00000005), propget, helpstring("Returns the currently active item in the collection."), helpcontext(0x0000eb3c)]
        HRESULT SelectedItem([out, retval] ToolBoxItem** pToolBoxItem);
    };

    [
      odl,
      uuid(46538D1B-4D81-4002-8BB4-DBDB65BABB23),
      helpstring("An individual item on a tool box tab."),
      helpcontext(0x0000eb5a),
      dual,
      oleautomation
    ]
    interface ToolBoxItem : IDispatch {
        [id(00000000), propget, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(00000000), propput, helpstring("Sets/returns the name of the object."), helpcontext(0x0000eae8)]
        HRESULT Name([in] BSTR Name);
        [id(0x00000001), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] ToolBoxItems** pToolBoxItems);
        [id(0x00000002), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** pDTE);
        [id(0x00000003), helpstring("Removes an object from a collection."), helpcontext(0x0000ea8c)]
        HRESULT Delete();
        [id(0x00000004), helpstring("Causes this item to become active in the user interface."), helpcontext(0x0000ecc6)]
        HRESULT Select();
    };

    

    [
      odl,
      uuid(EB5BE8A7-E593-4DE6-A923-C2AFECB96336),
      version(1.0),
      hidden,
      restricted
    ]
    interface IExtensibleObjectSite : IUnknown {
        HRESULT _stdcall NotifyDelete([in] IUnknown* punkObj);
    };

    [
      odl,
      uuid(8CC0CDE1-C16A-4749-99AF-6F7523C34A57),
      version(1.0),
      hidden,
      restricted
    ]
    interface IVsProfferCommands : IUnknown {
        HRESULT _stdcall AddNamedCommand(
                        [in] GUID* pguidPackage, 
                        [in] GUID* pguidCmdGroup, 
                        [in] LPWSTR pszCmdNameCanonical, 
                        [out] unsigned long* pdwCmdId, 
                        [in] LPWSTR pszCmdNameLocalized, 
                        [in] LPWSTR pszBtnText, 
                        [in] LPWSTR pszCmdTooltip, 
                        [in] LPWSTR pszSatelliteDLL, 
                        [in] unsigned long dwBitmapResourceId, 
                        [in] unsigned long dwBitmapImageIndex, 
                        [in] unsigned long dwCmdFlagsDefault, 
                        [in] unsigned long cUIContexts, 
                        [in] GUID* rgguidUIContexts);
        HRESULT _stdcall RemoveNamedCommand([in] LPWSTR pszCmdNameCanonical);
        HRESULT _stdcall RenameNamedCommand(
                        [in] LPWSTR pszCmdNameCanonical, 
                        [in] LPWSTR pszCmdNameCanonicalNew, 
                        [in] LPWSTR pszCmdNameLocalizedNew);
        HRESULT _stdcall AddCommandBarControl(
                        [in] LPWSTR pszCmdNameCanonical, 
                        [in] IDispatch* pCmdBarParent, 
                        [in] unsigned long dwIndex, 
                        [in] unsigned long dwCmdType, 
                        [out] IDispatch** ppCmdBarCtrl);
        HRESULT _stdcall RemoveCommandBarControl([in] IDispatch* pCmdBarCtrl);
        HRESULT _stdcall AddCommandBar(
                        [in] LPWSTR pszCmdBarName, 
                        [in] vsCommandBarType dwType, 
                        [in] IDispatch* pCmdBarParent, 
                        [in] unsigned long dwIndex, 
                        [out] IDispatch** ppCmdBar);
        HRESULT _stdcall RemoveCommandBar([in] IDispatch* pCmdBar);
        HRESULT _stdcall FindCommandBar(
                        [in] void* pToolbarSet, 
                        [in] GUID* pguidCmdGroup, 
                        [in] unsigned long dwMenuId, 
                        [out, retval] IDispatch** ppdispCmdBar);
    };

    [
      odl,
      uuid(AADE1F59-6ACE-43D1-8FCA-42AF3A5C4F3C),
      helpstring("Interface an Automation Extender should support if it wants to filters one or more Extendee properties."),
      helpcontext(0x0000eb6b),
      dual,
      oleautomation
    ]
    interface IFilterProperties : IDispatch {
        [id(0x00000001), helpstring("Returns whether the specified property is filtered (hidden)."), helpcontext(0x0000eb6c)]
        HRESULT IsPropertyHidden(
                        [in] BSTR PropertyName, 
                        [out, retval] vsFilterProperties* pRetval);
    };

    

    [
      odl,
      uuid(FBD0D024-09CD-4D9F-9E2B-CACD628426A5),
      helpstring("Object representing a node in a UI Hierarchy window (e.g. Solution Explorer)."),
      helpcontext(0x0000ee2c),
      dual,
      oleautomation
    ]
    interface UIHierarchyItem : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the collection containing the object supporting this property."), helpcontext(0x0000eab1)]
        HRESULT Collection([out, retval] UIHierarchyItems** ppUIHierarchyItems);
        [id(00000000), propget, helpstring("Returns the name of the object."), helpcontext(0x0000edbb)]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x00000003), propget, helpstring("Returns the collection representing children of the item."), helpcontext(0x0000ee2d)]
        HRESULT UIHierarchyItems([out, retval] UIHierarchyItems** ppUIHierarchyItems);
        [id(0x00000004), propget, helpstring("Returns the object behind the item."), helpcontext(0x0000ee2e)]
        HRESULT Object([out, retval] IDispatch** ppDispatch);
        [id(0x00000005), helpstring("Causes this item to become active in the user interface."), helpcontext(0x0000ecc6)]
        HRESULT Select([in] vsUISelectionType How);
        [id(0x00000006), propget, helpstring("Returns True if the item is selected, False otherwise."), helpcontext(0x0000ee2f)]
        HRESULT IsSelected([out, retval] VARIANT_BOOL* pfSelected);
    };

    [
      odl,
      uuid(DB8406B0-A916-449C-A277-BB04028F4394),
      helpstring("Object representing collection of UIHierarchyItem objects."),
      helpcontext(0x0000ee30),
      dual,
      oleautomation
    ]
    interface UIHierarchyItems : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] IDispatch** ppDispatch);
        [id(0x00000003), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* pCount);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] UIHierarchyItem** ppUIHierarchyItem);
        [id(0x00000005), propget, helpstring("Sets/Returns the expand state of the collection of UIHierarchyItem objects."), helpcontext(0x0000ee31)]
        HRESULT Expanded([out, retval] VARIANT_BOOL* pfExpanded);
        [id(0x00000005), propput, helpstring("Sets/Returns the expand state of the collection of UIHierarchyItem objects."), helpcontext(0x0000ee31)]
        HRESULT Expanded([in] VARIANT_BOOL pfExpanded);
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppUnknown);
    };

    

    [
      odl,
      uuid(72A2A2EF-C209-408C-A377-76871774ADB7),
      dual,
      oleautomation
    ]
    interface UIHierarchy : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Window** ppWin);
        [id(0x00000003), propget, helpstring("Returns the collection representing children of the item."), helpcontext(0x0000ee2d)]
        HRESULT UIHierarchyItems([out, retval] UIHierarchyItems** ppUIHierarchyItems);
        [id(0x00000004), propget, helpstring("Returns the collection comprised of the selected items."), helpcontext(0x0000ee32)]
        HRESULT SelectedItems([out, retval] VARIANT* pvarSel);
        [id(0x00000005), helpstring("Returns the item specified."), helpcontext(0x0000ee33)]
        HRESULT GetItem(
                        [in] BSTR Names, 
                        [out, retval] UIHierarchyItem** ppUIHierarchyItem);
        [id(0x00000006), helpstring("Moves the selection up as specified."), helpcontext(0x0000ee34)]
        HRESULT SelectUp(
                        [in] vsUISelectionType How, 
                        [in] long Count);
        [id(0x00000007), helpstring("Moves the selection down as specified."), helpcontext(0x0000ee35)]
        HRESULT SelectDown(
                        [in] vsUISelectionType How, 
                        [in] long Count);
        [id(00000000)]
        HRESULT DoDefaultAction();
    };

    [
      odl,
      uuid(9FF3DDCA-1795-4191-A5B1-02D1AE35D074),
      hidden,
      dual,
      oleautomation
    ]
    interface TextEditor : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT Application([out, retval] _DTE** ppApp);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] _DTE** ppParent);
        [id(0x00000003), propget, helpstring("Returns dsDevStudio for backward compatibility."), helpcontext(0x0000ebef)]
        HRESULT Emulation([out, retval] long* pEditorType);
        [id(0x00000003), propput, helpstring("Returns dsDevStudio for backward compatibility."), helpcontext(0x0000ebef)]
        HRESULT Emulation([in] long pEditorType);
        [id(0x00000004), propget, helpstring("Returns the overtype mode of the text editor."), helpcontext(0x0000ebf0)]
        HRESULT Overtype([out, retval] VARIANT_BOOL* pbOT);
        [id(0x00000004), propput, helpstring("Returns the overtype mode of the text editor."), helpcontext(0x0000ebf0)]
        HRESULT Overtype([in] VARIANT_BOOL pbOT);
        [id(0x00000005), propget, helpstring("Returns the white space mode of the text editor."), helpcontext(0x0000ebf1)]
        HRESULT VisibleWhitespace([out, retval] VARIANT_BOOL* pbVW);
        [id(0x00000005), propput, helpstring("Returns the white space mode of the text editor."), helpcontext(0x0000ebf1)]
        HRESULT VisibleWhitespace([in] VARIANT_BOOL pbVW);
    };

    // NOTE: This module has no entry points. There is no way to
    //       extract the dllname of a module with no entry points!
    // 
    [
      dllname("<no entry points>"),
      uuid(D83C7FAD-BC3A-46BB-9BFC-C0091329626D)
    ]
    module CodeModelLanguageConstants {
        const LPSTR vsCMLanguageVC = "{B5E9BD32-6D3E-4B5D-925E-8A43B79820B4}";
        const LPSTR vsCMLanguageVB = "{B5E9BD33-6D3E-4B5D-925E-8A43B79820B4}";
        const LPSTR vsCMLanguageCSharp = "{B5E9BD34-6D3E-4B5D-925E-8A43B79820B4}";
        const LPSTR vsCMLanguageIDL = "{B5E9BD35-6D3E-4B5D-925E-8A43B79820B4}";
        const LPSTR vsCMLanguageMC = "{B5E9BD36-6D3E-4B5D-925E-8A43B79820B4}";
    };

    

    [
      odl,
      uuid(D4BB39FB-0F0E-11D3-B880-00C04F79E479),
      version(1.0),
      hidden,
      dual,
      oleautomation
    ]
    interface _DebuggerEventsRoot : IDispatch {
        [id(0x00000001), propget, hidden]
        HRESULT DebuggerEvents([out, retval] IDispatch** disp);
    };

    

    [
      odl,
      uuid(E914BBE1-03A4-11D1-BBCD-00A0C90F2744),
      helpstring("This interface is implemented by wizard writers to construct a wizard."),
      helpcontext(0x0000ec09),
      dual,
      oleautomation
    ]
    interface IDTWizard : IDispatch {
        [id(0x00000001), helpstring("Called when a wizard is executed. Implemented by a wizard writer."), helpcontext(0x0000eddd)]
        HRESULT Execute(
                        [in] IDispatch* Application, 
                        [in] long hwndOwner, 
                        [in] SAFEARRAY(VARIANT)* ContextParams, 
                        [in] SAFEARRAY(VARIANT)* CustomParams, 
                        [in, out] wizardResult* retval);
    };

    [
      odl,
      uuid(3C536122-57B1-46DE-AB34-ACC524140093),
      hidden,
      restricted
    ]
    interface IVsExtensibility : IUnknown {
        HRESULT _stdcall get_Properties(
                        [in] ISupportVSProperties* pParent, 
                        [in] IDispatch* pdispPropObj, 
                        [out] Properties** ppProperties);
        HRESULT _stdcall RunWizardFile(
                        [in] BSTR bstrWizFilename, 
                        [in] long hwndOwner, 
                        [in] SAFEARRAY(VARIANT)* vContextParams, 
                        [out, retval] wizardResult* pResult);
        HRESULT _stdcall Get_TextBuffer(
                        [in] IUnknown* pVsTextStream, 
                        [in] IExtensibleObjectSite* pParent, 
                        [out, retval] TextBuffer** ppTextBuffer);
        HRESULT _stdcall EnterAutomationFunction();
        HRESULT _stdcall ExitAutomationFunction();
        HRESULT _stdcall IsInAutomationFunction([out, retval] long* pfInAutoFunc);
        HRESULT _stdcall GetUserControl([out] VARIANT_BOOL* fUserControl);
        HRESULT _stdcall SetUserControl([in] VARIANT_BOOL fUserControl);
        HRESULT _stdcall SetUserControlUnlatched([in] VARIANT_BOOL fUserControl);
        HRESULT _stdcall LockServer([in] VARIANT_BOOL __MIDL__IVsExtensibility0000);
        HRESULT _stdcall GetLockCount([out, retval] long* pCount);
        HRESULT _stdcall TestForShutdown([out, retval] VARIANT_BOOL* fShutdown);
        HRESULT _stdcall GetGlobalsObject(
                        [in] VARIANT ExtractFrom, 
                        [out, retval] Globals** ppGlobals);
        HRESULT _stdcall GetConfigMgr(
                        [in] IUnknown* pIVsProject, 
                        ULONG_PTR itemid, 
                        [out, retval] ConfigurationManager** ppCfgMgr);
        HRESULT _stdcall FireMacroReset();
        HRESULT _stdcall GetDocumentFromDocCookie(
                        LONG_PTR lDocCookie, 
                        [out, retval] Document** ppDoc);
        HRESULT _stdcall IsMethodDisabled(
                        GUID* pGUID, 
                        long dispid);
        HRESULT _stdcall SetSuppressUI(VARIANT_BOOL In);
        HRESULT _stdcall GetSuppressUI(VARIANT_BOOL* pOut);
    };

    typedef [public    ,
      custom(F914481D-9C62-4B43-9340-E9B2E6252E5F, 1)    
]
    unsigned long ULONG_PTR;

    typedef [public    ,
      custom(F914481D-9C62-4B43-9340-E9B2E6252E5F, 1)    
]
    long LONG_PTR;

    [
      odl,
      uuid(E2CC506A-588B-4F65-A1F0-2244C060ABCB),
      hidden,
      restricted
    ]
    interface IVsGlobalsCallback : IUnknown {
        HRESULT _stdcall WriteVariablesToData(
                        [in] LPWSTR pVariableName, 
                        [in] VARIANT* varData);
        HRESULT _stdcall ReadData([in] Globals* pGlobals);
        HRESULT _stdcall ClearVariables();
        HRESULT _stdcall VariableChanged();
        HRESULT _stdcall CanModifySource();
        HRESULT _stdcall GetParent(IDispatch** ppOut);
    };

    [
      odl,
      uuid(192AC688-E7C6-4F9D-8180-4B37EFBF6F3A),
      hidden,
      restricted
    ]
    interface IVsGlobals : IUnknown {
        HRESULT _stdcall Load();
        HRESULT _stdcall Save();
        HRESULT _stdcall Empty();
    };

    

    [
      odl,
      uuid(7EF39A3E-590D-4879-88D4-C9BE5BCFD92E),
      helpstring("Called to determine the status or execute a command added through Commands.AddNamedCommand. Implemented by the Add-in writer."),
      helpcontext(0x0000ede3),
      dual,
      oleautomation
    ]
    interface IDTCommandTarget : IDispatch {
        [id(0x00000001), helpstring("Called to determine the status of a command added through Commands.AddNamedCommand. Implemented by the Add-in writer."), helpcontext(0x0000ede4)]
        HRESULT QueryStatus(
                        [in] BSTR CmdName, 
                        [in] vsCommandStatusTextWanted NeededText, 
                        [in, out] vsCommandStatus* StatusOption, 
                        [in, out] VARIANT* CommandText);
        [id(0x00000002), helpstring("Called to execute a command added through Commands.AddNamedCommand. Implemented by the Add-in writer."), helpcontext(0x0000ede5)]
        HRESULT Exec(
                        [in] BSTR CmdName, 
                        [in] vsCommandExecOption ExecuteOption, 
                        [in] VARIANT* VariantIn, 
                        [in, out] VARIANT* VariantOut, 
                        [in, out] VARIANT_BOOL* Handled);
    };

    [
      odl,
      uuid(509B9955-7303-48C9-90D4-E165B974E6BA),
      helpstring("Object representing the Command Window."),
      helpcontext(0x0000eced),
      dual,
      oleautomation
    ]
    interface CommandWindow : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** DTEObject);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Window** pParent);
        [id(0x00000003), helpstring("Places a command into the Command Window, and optionally executes."), helpcontext(0x0000ecee)]
        HRESULT SendInput(
                        BSTR Command, 
                        VARIANT_BOOL Execute);
        [id(0x00000004), helpstring("Places informational text into the Command Window."), helpcontext(0x0000ecef)]
        HRESULT OutputString(BSTR Text);
        [id(0x00000005), helpstring("Clears all text from the command window."), helpcontext(0x0000ecf0)]
        HRESULT Clear();
        [id(0x00000006), propget, helpstring("Returns the TextDocument object for the Command Window."), helpcontext(0x0000ecf1)]
        HRESULT TextDocument([out, retval] TextDocument** ppTextDocument);
    };

    [
      odl,
      uuid(85451F83-B5CA-437F-A619-0CB705707420),
      helpstring("The _ProjectsEvents object triggers events of actions taken against projects."),
      helpcontext(0x0000edf2),
      dual,
      oleautomation
    ]
    interface _ProjectsEvents : IDispatch {
    };

    [
      uuid(7F508D55-627F-4D7F-BE0B-9E3D829FF0ED),
      helpstring("The _ProjectsEvents object triggers events of actions taken against projects."),
      helpcontext(0x0000edf2)
    ]
    dispinterface _dispProjectsEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Triggered when a project is added to the solution."), helpcontext(0x0000edef)]
            void ItemAdded([in] Project* Project);
            [id(0x00000002), helpstring("Triggered when a project is removed from a solution."), helpcontext(0x0000edf0)]
            void ItemRemoved([in] Project* Project);
            [id(0x00000003), helpstring("Triggered when a project within a solution is renamed."), helpcontext(0x0000edf1)]
            void ItemRenamed(
                            [in] Project* Project, 
                            [in] BSTR OldName);
    };

    [
      uuid(536A4BE3-A376-408E-954C-471C779E216F),
      helpstring("The _ProjectsEvents object triggers events of actions taken against projects."),
      helpcontext(0x0000edf2)
    ]
    coclass ProjectsEvents {
        [default] interface _ProjectsEvents;
        [default, source] dispinterface _dispProjectsEvents;
    };

    [
      odl,
      uuid(7658B944-F37B-11D2-AACF-00C04F688DDE),
      hidden,
      dual,
      oleautomation
    ]
    interface _MiscSlnFilesEventsRoot : IDispatch {
        [id(0x00000001), propget]
        HRESULT SolutionItemsEvents([out, retval] IDispatch** ppeNew);
        [id(0x00000002), propget]
        HRESULT MiscFilesEvents([out, retval] IDispatch** ppeNew);
    };

    [
      odl,
      uuid(9E66FE98-A1C6-421D-8C0C-6DA4E652E770),
      helpstring("The CommandBarEvents object triggers an event when a control on the command bar is clicked."),
      helpcontext(0x0000ea95),
      oleautomation
    ]
    interface _CommandBarControlEvents : IDispatch {
    };

    [
      uuid(987FB893-F96D-11D0-BBBB-00A0C90F2744),
      helpstring("The CommandBarEvents object triggers an event when a control on the command bar is clicked."),
      helpcontext(0x0000ea95)
    ]
    dispinterface _dispCommandBarControlEvents {
        properties:
        methods:
            [id(0x00000001), helpstring("Occurs when OnAction property for corresponding CommandBarControl object is set or returned."), helpcontext(0x0000ea64)]
            void Click(
                            [in] IDispatch* CommandBarControl, 
                            [in] VARIANT_BOOL* Handled, 
                            [in] VARIANT_BOOL* CancelDefault);
    };

    [
      uuid(BFD4B2B2-9EEC-4DB8-ABA0-AC316F4C7328),
      helpstring("The CommandBarEvents object triggers an event when a control on the command bar is clicked."),
      helpcontext(0x0000ea95)
    ]
    coclass CommandBarEvents {
        [default] interface _CommandBarControlEvents;
        [default, source] dispinterface _dispCommandBarControlEvents;
    };

    

    [
      odl,
      uuid(DC5437F4-F114-11D2-AACF-00C04F688DDE),
      hidden,
      dual,
      oleautomation
    ]
    interface _DocumentEventsRoot : IDispatch {
        [id(0x00000001), propget, hidden]
        HRESULT DocumentEvents(
                        [in] Document* WindowFilter, 
                        [out, retval] IDispatch** ppDisp);
    };

    

    [
      odl,
      uuid(B3C38885-B288-44A8-B290-34FE63BF3C76),
      hidden,
      dual,
      oleautomation
    ]
    interface _TextEditorEventsRoot : IDispatch {
        [id(0x00000001), propget, hidden]
        HRESULT TextEditorEvents(
                        [in] TextDocument* TextDocumentFilter, 
                        [out, retval] IDispatch** ppDisp);
    };

    [
      odl,
      uuid(17D12026-BA99-403E-A359-71FD1E5A72CD),
      hidden,
      dual,
      oleautomation
    ]
    interface _WindowEventsRoot : IDispatch {
        [id(0x00000001), propget, hidden]
        HRESULT WindowEvents(
                        [in] Window* WindowFilter, 
                        [out, retval] IDispatch** ppDisp);
    };

    [
      odl,
      uuid(AA6F4085-33B6-4629-B9EA-692101007CC2),
      hidden,
      dual,
      oleautomation
    ]
    interface _OutputWindowEventsRoot : IDispatch {
        [id(0x00000001), propget, hidden]
        HRESULT OutputWindowEvents(
                        [in] BSTR PaneFilter, 
                        [out, retval] IDispatch** ppDisp);
    };

    [
      odl,
      uuid(6BC8C372-C6F0-4BE6-B255-827AC190BF71),
      hidden,
      dual,
      oleautomation
    ]
    interface _TaskListEventsRoot : IDispatch {
        [id(0x00000001), propget]
        HRESULT TaskListEvents([out, retval] IDispatch** ppDisp);
    };

    

    [
      odl,
      uuid(BDCAF240-2692-4713-902A-B110B1D0F100),
      helpstring("This interface is implemented by tools options page writers to construct a tools options page."),
      helpcontext(0x0000ec0b),
      dual,
      oleautomation
    ]
    interface IDTToolsOptionsPage : IDispatch {
        [id(0x00000001), helpstring("Called just after the tools options page is created for the first time."), helpcontext(0x0000ec0c)]
        HRESULT OnAfterCreated([in] DTE* DTEObject);
        [id(0x00000002), helpstring("Called to return an object that holds the properties for the page."), helpcontext(0x0000ec0d)]
        HRESULT GetProperties([in, out] IDispatch** PropertiesObject);
        [id(0x00000003), helpstring("Called if the user presses the OK button on the Tools Options dialog."), helpcontext(0x0000ec0e)]
        HRESULT OnOK();
        [id(0x00000004), helpstring("Called if the user presses the Cancel button on the Tools Options dialog."), helpcontext(0x0000ec0f)]
        HRESULT OnCancel();
        [id(0x00000005), helpstring("Called if the user presses the Help button on the Tools Options dialog."), helpcontext(0x0000ec10)]
        HRESULT OnHelp();
    };

    

    [
      odl,
      uuid(A3286B03-5AC6-44F0-8CC3-EBED7F1124E5),
      hidden,
      dual,
      oleautomation
    ]
    interface _EnvironmentWebBrowser : IDispatch {
        [id(0x00000001), propput, helpstring("Use the default home page when the browser is opened, or use a custom home page."), helpcontext(0x0000ed05)]
        HRESULT UseDefaultHomePage(VARIANT_BOOL pUseDefault);
        [id(0x00000001), propget, helpstring("Use the default home page when the browser is opened, or use a custom home page."), helpcontext(0x0000ed05)]
        HRESULT UseDefaultHomePage([out, retval] VARIANT_BOOL* pUseDefault);
        [id(0x00000002), propput, helpstring("The URL of the default home page."), helpcontext(0x0000ed06)]
        HRESULT HomePage(BSTR URL);
        [id(0x00000002), propget, helpstring("The URL of the default home page."), helpcontext(0x0000ed06)]
        HRESULT HomePage([out, retval] BSTR* URL);
        [id(0x00000003), propput, helpstring("Use the default search page when using the browser search command, or use a custom search page."), helpcontext(0x0000ed07)]
        HRESULT UseDefaultSearchPage(VARIANT_BOOL pUseDefault);
        [id(0x00000003), propget, helpstring("Use the default search page when using the browser search command, or use a custom search page."), helpcontext(0x0000ed07)]
        HRESULT UseDefaultSearchPage([out, retval] VARIANT_BOOL* pUseDefault);
        [id(0x00000004), propput, helpstring("The URL of the default search page."), helpcontext(0x0000ed08)]
        HRESULT SearchPage(BSTR URL);
        [id(0x00000004), propget, helpstring("The URL of the default search page."), helpcontext(0x0000ed08)]
        HRESULT SearchPage([out, retval] BSTR* URL);
        [id(0x00000005), propput, helpstring("Where the source of a web page is viewed when the view source command is used."), helpcontext(0x0000ed09)]
        HRESULT ViewSourceIn(vsBrowserViewSource Location);
        [id(0x00000005), propget, helpstring("Where the source of a web page is viewed when the view source command is used."), helpcontext(0x0000ed09)]
        HRESULT ViewSourceIn([out, retval] vsBrowserViewSource* Location);
        [id(0x00000006), propput, helpstring("The program to use to view the browser source."), helpcontext(0x0000ed0a)]
        HRESULT ViewSourceExternalProgram(BSTR Path);
        [id(0x00000006), propget, helpstring("The program to use to view the browser source."), helpcontext(0x0000ed0a)]
        HRESULT ViewSourceExternalProgram([out, retval] BSTR* Path);
    };

    [
      odl,
      uuid(AEBDED64-A206-11D3-B8B5-00C04F79F802),
      hidden,
      dual,
      oleautomation
    ]
    interface _EnvironmentHelp : IDispatch {
        [id(00000000), propget, helpstring("Gets/Sets preffered help language."), helpcontext(0x0000edcb)]
        HRESULT PreferredLanguage([out, retval] long* LCID);
        [id(00000000), propput, helpstring("Gets/Sets preffered help language."), helpcontext(0x0000edcb)]
        HRESULT PreferredLanguage([in] long LCID);
        [id(0x00000001), propget, helpstring("Gets/Sets preferred collection file or namespace."), helpcontext(0x0000edcc)]
        HRESULT PreferredCollection([out, retval] BSTR* Namespace);
        [id(0x00000001), propput, helpstring("Gets/Sets preferred collection file or namespace."), helpcontext(0x0000edcc)]
        HRESULT PreferredCollection([in] BSTR Namespace);
        [id(0x00000002), propget, helpstring("Use external help viewer."), helpcontext(0x0000edcd)]
        HRESULT External([out, retval] VARIANT_BOOL* ExternalHelp);
        [id(0x00000002), propput, helpstring("Use external help viewer."), helpcontext(0x0000edcd)]
        HRESULT External([in] VARIANT_BOOL ExternalHelp);
    };

    [
      odl,
      uuid(E5D17051-D6E5-4DA7-8B3A-CA888617A5E7),
      dual,
      oleautomation
    ]
    interface ColorableItems : IDispatch {
        [id(00000000), propget]
        HRESULT Name([out, retval] BSTR* pName);
        [id(0x00000001), propget, helpstring("Gets/Sets the foreground color of the item."), helpcontext(0x0000edd3)]
        HRESULT Foreground([out, retval] OLE_COLOR* pColor);
        [id(0x00000001), propput, helpstring("Gets/Sets the foreground color of the item."), helpcontext(0x0000edd3)]
        HRESULT Foreground(OLE_COLOR pColor);
        [id(0x00000002), propget, helpstring("Gets/Sets the background color of the item."), helpcontext(0x0000edd4)]
        HRESULT Background([out, retval] OLE_COLOR* pColor);
        [id(0x00000002), propput, helpstring("Gets/Sets the background color of the item."), helpcontext(0x0000edd4)]
        HRESULT Background(OLE_COLOR pColor);
        [id(0x00000003), propget, helpstring("Gets/Sets if the item should be shown bold."), helpcontext(0x0000edd5)]
        HRESULT Bold([out, retval] VARIANT_BOOL* Bold);
        [id(0x00000003), propput, helpstring("Gets/Sets if the item should be shown bold."), helpcontext(0x0000edd5)]
        HRESULT Bold(VARIANT_BOOL Bold);
    };

    [
      odl,
      uuid(F25AE7E6-1460-4BA4-8E5E-BBBE746DE353),
      helpstring("Collection of objects detailing the color, appearance, and other attributes of an item."),
      helpcontext(0x0000ede6),
      dual,
      oleautomation
    ]
    interface FontsAndColorsItems : IDispatch {
        [id(0xfffffffc), restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lppiuReturn);
        [id(00000000), helpstring("Returns an indexed member of a collection."), helpcontext(0x0000ea81)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] ColorableItems** pFontsAndColorsItem);
        [id(0x00000001), propget, helpstring("Returns value indicating the count of objects in the collection."), helpcontext(0x0000eabb)]
        HRESULT Count([out, retval] long* pCount);
    };

    [
      odl,
      uuid(256068F6-1ADD-4F7B-BA76-571314C413AD),
      hidden,
      dual,
      oleautomation
    ]
    interface _FontsAndColors : IDispatch {
        [id(0x00000001), propget, helpstring("Returns a String expression indicating the face used to display text in the editor."), helpcontext(0x0000eacc)]
        HRESULT FontFamily([out, retval] BSTR* pFamily);
        [id(0x00000001), propput, helpstring("Returns a String expression indicating the face used to display text in the editor."), helpcontext(0x0000eacc)]
        HRESULT FontFamily(BSTR pFamily);
        [id(0x00000002), propget, helpstring("Returns enumerated type indicating the character set used to display text in editor."), helpcontext(0x0000eaca)]
        HRESULT FontCharacterSet([out, retval] vsFontCharSet* pFontCharSet);
        [id(0x00000002), propput, helpstring("Returns enumerated type indicating the character set used to display text in editor."), helpcontext(0x0000eaca)]
        HRESULT FontCharacterSet(vsFontCharSet pFontCharSet);
        [id(0x00000003), propget, helpstring("Returns/sets the size of the font used to display text in the editor."), helpcontext(0x0000eace)]
        HRESULT FontSize([out, retval] short* pSize);
        [id(0x00000003), propput, helpstring("Returns/sets the size of the font used to display text in the editor."), helpcontext(0x0000eace)]
        HRESULT FontSize(short pSize);
        [id(0x00000004), propget, helpstring("Returns the FontsAndColorsItems collection."), helpcontext(0x0000ede7)]
        HRESULT FontsAndColorsItems([out, retval] FontsAndColorsItems** ppColorableItems);
    };

    [
      odl,
      uuid(48E61D9C-8C8D-42D3-914B-46D70C8B7A40),
      hidden,
      dual,
      oleautomation
    ]
    interface _EnvironmentGeneral : IDispatch {
        [id(0x00000001), propput, helpstring("Sets/ returns a value indicating Visual Studio's startup behavior."), helpcontext(0x0000eaf1)]
        HRESULT OnStartUp([in] vsStartUp pstartup);
        [id(0x00000001), propget, helpstring("Sets/ returns a value indicating Visual Studio's startup behavior."), helpcontext(0x0000eaf1)]
        HRESULT OnStartUp([out, retval] vsStartUp* pstartup);
        [id(0x00000002), propput, helpstring("Sets/returns value determining whether the status bar is visible."), helpcontext(0x0000eaff)]
        HRESULT ShowStatusBar([in] VARIANT_BOOL pfshow);
        [id(0x00000002), propget, helpstring("Sets/returns value determining whether the status bar is visible."), helpcontext(0x0000eaff)]
        HRESULT ShowStatusBar([out, retval] VARIANT_BOOL* pfshow);
        [id(0x00000003), propput, helpstring("Sets/returns value determining maximum number of document windows listed on Windows menu."), helpcontext(0x0000eb0d)]
        HRESULT WindowMenuContainsNItems([in] long plCount);
        [id(0x00000003), propget, helpstring("Sets/returns value determining maximum number of document windows listed on Windows menu."), helpcontext(0x0000eb0d)]
        HRESULT WindowMenuContainsNItems([out, retval] long* plCount);
        [id(0x00000004), propput, helpstring("Sets/returns value indicating the number of files stored in the most recently used submenu."), helpcontext(0x0000eae6)]
        HRESULT MRUListContainsNItems([in] long plCount);
        [id(0x00000004), propget, helpstring("Sets/returns value indicating the number of files stored in the most recently used submenu."), helpcontext(0x0000eae6)]
        HRESULT MRUListContainsNItems([out, retval] long* plCount);
        [id(0x00000005), propget, helpstring("The speed at which certain animations are shown."), helpcontext(0x0000ed11)]
        HRESULT AnimationSpeed([out, retval] short* pSpeed);
        [id(0x00000005), propput, helpstring("The speed at which certain animations are shown."), helpcontext(0x0000ed11)]
        HRESULT AnimationSpeed(short pSpeed);
        [id(0x00000006), propget, helpstring("If animations should be shown in the user interface."), helpcontext(0x0000ed12)]
        HRESULT Animations([out, retval] VARIANT_BOOL* pAnimations);
        [id(0x00000006), propput, helpstring("If animations should be shown in the user interface."), helpcontext(0x0000ed12)]
        HRESULT Animations(VARIANT_BOOL pAnimations);
        [id(0x00000007), propget, helpstring("Display the drop-down completion window in the Command Window."), helpcontext(0x0000ed13)]
        HRESULT ShowCommandWindowCompletion([out, retval] VARIANT_BOOL* pComplete);
        [id(0x00000007), propput, helpstring("Display the drop-down completion window in the Command Window."), helpcontext(0x0000ed13)]
        HRESULT ShowCommandWindowCompletion(VARIANT_BOOL pComplete);
        [id(0x0000000b), propput]
        HRESULT CloseButtonActiveTabOnly(VARIANT_BOOL CloseActiveOnly);
        [id(0x0000000b), propget]
        HRESULT CloseButtonActiveTabOnly([out, retval] VARIANT_BOOL* CloseActiveOnly);
        [id(0x0000000c), propput]
        HRESULT AutohidePinActiveTabOnly(VARIANT_BOOL AutohidePinActiveOnly);
        [id(0x0000000c), propget]
        HRESULT AutohidePinActiveTabOnly([out, retval] VARIANT_BOOL* AutohidePinActiveOnly);
    };

    [
      odl,
      uuid(F809CAB6-2C9F-41F2-A5AF-E26FB80E62AD),
      hidden,
      dual,
      oleautomation
    ]
    interface _EnvironmentFontsAndColors : IDispatch {
    };

    [
      odl,
      uuid(478F06D4-5D57-473F-9B74-5F8E88EFA5E7),
      hidden,
      dual,
      oleautomation
    ]
    interface _EnvironmentProjectsAndSolution : IDispatch {
        [id(0x00000001), propput, helpstring("Sets/returns value determining whether environment should save everything before running or previewing."), helpcontext(0x0000eaf0)]
        HRESULT OnRunOrPreview([in] vsSaveChanges pbld);
        [id(0x00000001), propget, helpstring("Sets/returns value determining whether environment should save everything before running or previewing."), helpcontext(0x0000eaf0)]
        HRESULT OnRunOrPreview([out, retval] vsSaveChanges* pbld);
        [id(0x00000002), propput]
        HRESULT ProjectsLocation([in] BSTR pLocation);
        [id(0x00000002), propget]
        HRESULT ProjectsLocation([out, retval] BSTR* pLocation);
        [id(0x00000003), propput]
        HRESULT ShowOutputWindowBeforeBuild([in] VARIANT_BOOL pfshow);
        [id(0x00000003), propget]
        HRESULT ShowOutputWindowBeforeBuild([out, retval] VARIANT_BOOL* pfshow);
        [id(0x00000004), propput]
        HRESULT ShowTaskListAfterBuild([in] VARIANT_BOOL pfshow);
        [id(0x00000004), propget]
        HRESULT ShowTaskListAfterBuild([out, retval] VARIANT_BOOL* pfshow);
    };

    [
      odl,
      uuid(76ED1C48-ED86-4E9E-ACF8-A40E765DAF25),
      hidden,
      dual,
      oleautomation
    ]
    interface _EnvironmentDocuments : IDispatch {
        [id(0x00000001), propput, helpstring("If a document window is saved, allows re-using that window when a new document is opened."), helpcontext(0x0000ed14)]
        HRESULT ReuseSavedActiveDocWindow(VARIANT_BOOL pReuse);
        [id(0x00000001), propget, helpstring("If a document window is saved, allows re-using that window when a new document is opened."), helpcontext(0x0000ed14)]
        HRESULT ReuseSavedActiveDocWindow([out, retval] VARIANT_BOOL* pReuse);
        [id(0x00000002), propput, helpstring("Sets/ returns value controlling whether IDE automatically reloads open files if it detects that they have changed on disk outside the IDE."), helpcontext(0x0000eaac)]
        HRESULT DetectFileChangesOutsideIDE([in] VARIANT_BOOL pfAutoRead);
        [id(0x00000002), propget, helpstring("Sets/ returns value controlling whether IDE automatically reloads open files if it detects that they have changed on disk outside the IDE."), helpcontext(0x0000eaac)]
        HRESULT DetectFileChangesOutsideIDE([out, retval] VARIANT_BOOL* pfAutoRead);
        [id(0x00000003), propput]
        HRESULT AutoloadExternalChanges([in] VARIANT_BOOL pfAutoload);
        [id(0x00000003), propget]
        HRESULT AutoloadExternalChanges([out, retval] VARIANT_BOOL* pfAutoload);
        [id(0x00000004), propput]
        HRESULT InitializeOpenFileFromCurrentDocument([in] VARIANT_BOOL pfInit);
        [id(0x00000004), propget]
        HRESULT InitializeOpenFileFromCurrentDocument([out, retval] VARIANT_BOOL* pfInit);
        [id(0x00000005), propput, helpstring("Sets/returns value indicating number of files stored in Miscellaneous Files Project."), helpcontext(0x0000eae5)]
        HRESULT MiscFilesProjectSavesLastNItems([in] long plCount);
        [id(0x00000005), propget, helpstring("Sets/returns value indicating number of files stored in Miscellaneous Files Project."), helpcontext(0x0000eae5)]
        HRESULT MiscFilesProjectSavesLastNItems([out, retval] long* plCount);
        [id(0x00000006), propget, helpstring("Gets/Sets if a message box should be stopped from displaying while doing a search/replace."), helpcontext(0x0000ede9)]
        HRESULT FindReplaceShowMessageBoxes([out, retval] VARIANT_BOOL* pShow);
        [id(0x00000006), propput, helpstring("Gets/Sets if a message box should be stopped from displaying while doing a search/replace."), helpcontext(0x0000ede9)]
        HRESULT FindReplaceShowMessageBoxes(VARIANT_BOOL pShow);
        [id(0x00000007), propget, helpstring("Gets/Sets if a search/replace operation should be seeded from text selected in the editor."), helpcontext(0x0000edea)]
        HRESULT FindReplaceInitializeFromEditor([out, retval] VARIANT_BOOL* pShow);
        [id(0x00000007), propput, helpstring("Gets/Sets if a search/replace operation should be seeded from text selected in the editor."), helpcontext(0x0000edea)]
        HRESULT FindReplaceInitializeFromEditor(VARIANT_BOOL pShow);
    };

    [
      odl,
      uuid(4BC18A5B-DBB6-4AF5-A443-2E3F19365304),
      hidden,
      dual,
      oleautomation
    ]
    interface _EnvironmentTaskList : IDispatch {
        [id(0x00000001), propget, helpstring("Prompts the user if it is OK to delete a task item."), helpcontext(0x0000ed0c)]
        HRESULT ConfirmTaskDeletion([out, retval] VARIANT_BOOL* pConfirm);
        [id(0x00000001), propput, helpstring("Prompts the user if it is OK to delete a task item."), helpcontext(0x0000ed0c)]
        HRESULT ConfirmTaskDeletion(VARIANT_BOOL pConfirm);
        [id(0x00000002), propget, helpstring("Displays UI to the user when a user task created that cannot be shown with the current filter."), helpcontext(0x0000ed0d)]
        HRESULT WarnOnAddingHiddenItem([out, retval] VARIANT_BOOL* pWarn);
        [id(0x00000002), propput, helpstring("Displays UI to the user when a user task created that cannot be shown with the current filter."), helpcontext(0x0000ed0d)]
        HRESULT WarnOnAddingHiddenItem(VARIANT_BOOL pWarn);
        [id(0x00000003), propget, helpstring("Gets/Sets the list of items that are comment tokens."), helpcontext(0x0000ed0e)]
        HRESULT CommentTokens([out, retval] VARIANT* pTokens);
        [id(0x00000003), propput, helpstring("Gets/Sets the list of items that are comment tokens."), helpcontext(0x0000ed0e)]
        HRESULT CommentTokens(VARIANT pTokens);
    };

    [
      odl,
      uuid(9C722678-490D-408F-98AE-B6B9A68AA45D),
      hidden,
      dual,
      oleautomation
    ]
    interface _EnvironmentKeyboard : IDispatch {
        [id(0x00000001), propput, helpstring("Sets/returns the current keyboard mapping via an ASCII file showing the keyboard mapping."), helpcontext(0x0000eac6)]
        HRESULT Scheme([in] BSTR pbstr);
        [id(0x00000001), propget, helpstring("Sets/returns the current keyboard mapping via an ASCII file showing the keyboard mapping."), helpcontext(0x0000eac6)]
        HRESULT Scheme([out, retval] BSTR* pbstr);
    };

    [
      odl,
      uuid(86C31347-5B52-4715-B454-A6E5FCAB975D),
      version(1.0),
      hidden,
      restricted
    ]
    interface IExtensibleObject : IUnknown {
        HRESULT _stdcall GetAutomationObject(
                        [in] BSTR Name, 
                        [in] IExtensibleObjectSite* pParent, 
                        [out] IDispatch** ppDisp);
    };

    // NOTE: This module has no entry points. There is no way to
    //       extract the dllname of a module with no entry points!
    // 
    [
      dllname("<no entry points>"),
      uuid(7BC6A78F-28DA-4639-856C-88EA7A3F4CC0)
    ]
    module vsTaskCategories {
        const LPSTR vsTaskCategoryBuildCompile = "BuildCompile";
        const LPSTR vsTaskCategoryComment = "Comment";
        const LPSTR vsTaskCategoryShortcut = "Shortcut";
        const LPSTR vsTaskCategoryUser = "User";
        const LPSTR vsTaskCategoryMisc = "Misc";
        const LPSTR vsTaskCategoryHTML = "HTML";
    };

    // NOTE: This module has no entry points. There is no way to
    //       extract the dllname of a module with no entry points!
    // 
    [
      dllname("<no entry points>"),
      uuid(B1AB3125-0744-4B46-AA7A-8902E36D2E15)
    ]
    module Constants {
        const LPSTR vsDocumentKindText = "{8E7B96A8-E33D-11D0-A6D5-00C04FB67F6A}";
        const LPSTR vsDocumentKindHTML = "{C76D83F8-A489-11D0-8195-00A0C91BBEE3}";
        const LPSTR vsDocumentKindResource = "{00000000-0000-0000-0000-000000000000}";
        const LPSTR vsDocumentKindBinary = "{25834150-CD7E-11D0-92DF-00A0C9138C45}";
        const LPSTR vsViewKindPrimary = "{00000000-0000-0000-0000-000000000000}";
        const LPSTR vsViewKindAny = "{FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF}";
        const LPSTR vsViewKindDebugging = "{7651A700-06E5-11D1-8EBD-00A0C90F26EA}";
        const LPSTR vsViewKindCode = "{7651A701-06E5-11D1-8EBD-00A0C90F26EA}";
        const LPSTR vsViewKindDesigner = "{7651A702-06E5-11D1-8EBD-00A0C90F26EA}";
        const LPSTR vsViewKindTextView = "{7651A703-06E5-11D1-8EBD-00A0C90F26EA}";
        const LPSTR vsWindowKindTaskList = "{4A9B7E51-AA16-11D0-A8C5-00A0C921A4D2}";
        const LPSTR vsWindowKindToolbox = "{B1E99781-AB81-11D0-B683-00AA00A3EE26}";
        const LPSTR vsWindowKindCallStack = "{0504FF91-9D61-11D0-A794-00A0C9110051}";
        const LPSTR vsWindowKindThread = "{E62CE6A0-B439-11D0-A79D-00A0C9110051}";
        const LPSTR vsWindowKindLocals = "{4A18F9D0-B838-11D0-93EB-00A0C90F2734}";
        const LPSTR vsWindowKindAutoLocals = "{F2E84780-2AF1-11D1-A7FA-00A0C9110051}";
        const LPSTR vsWindowKindWatch = "{90243340-BD7A-11D0-93EF-00A0C90F2734}";
        const LPSTR vsWindowKindProperties = "{EEFA5220-E298-11D0-8F78-00A0C9110057}";
        const LPSTR vsWindowKindSolutionExplorer = "{3AE79031-E1BC-11D0-8F78-00A0C9110057}";
        const LPSTR vsWindowKindOutput = "{34E76E81-EE4A-11D0-AE2E-00A0C90FFFC3}";
        const LPSTR vsWindowKindObjectBrowser = "{269A02DC-6AF8-11D3-BDC4-00C04F688E50}";
        const LPSTR vsWindowKindMacroExplorer = "{07CD18B4-3BA1-11D2-890A-0060083196C6}";
        const LPSTR vsWindowKindDynamicHelp = "{66DBA47C-61DF-11D2-AA79-00C04F990343}";
        const LPSTR vsWindowKindClassView = "{C9C0AE26-AA77-11D2-B3F0-0000F87570EE}";
        const LPSTR vsWindowKindResourceView = "{2D7728C2-DE0A-45b5-99AA-89B609DFDE73}";
        const LPSTR vsWindowKindDocumentOutline = "{25F7E850-FFA1-11D0-B63F-00A0C922E851}";
        const LPSTR vsWindowKindServerExplorer = "{74946827-37A0-11D2-A273-00C04F8EF4FF}";
        const LPSTR vsWindowKindCommandWindow = "{28836128-FC2C-11D2-A433-00C04F72D18A}";
        const LPSTR vsWindowKindFindSymbol = "{53024D34-0EF5-11D3-87E0-00C04F7971A5}";
        const LPSTR vsWindowKindFindSymbolResults = "{68487888-204A-11D3-87EB-00C04F7971A5}";
        const LPSTR vsWindowKindFindReplace = "{CF2DDC32-8CAD-11D2-9302-005345000000}";
        const LPSTR vsWindowKindFindResults1 = "{0F887920-C2B6-11D2-9375-0080C747D9A0}";
        const LPSTR vsWindowKindFindResults2 = "{0F887921-C2B6-11D2-9375-0080C747D9A0}";
        const LPSTR vsWindowKindMainWindow = "{9DDABE98-1D02-11D3-89A1-00C04F688DDE}";
        const LPSTR vsWindowKindLinkedWindowFrame = "{9DDABE99-1D02-11D3-89A1-00C04F688DDE}";
        const LPSTR vsWindowKindWebBrowser = "{E8B06F52-6D01-11D2-AA7D-00C04F990343}";
        const LPSTR vsWizardAddSubProject = "{0F90E1D2-4999-11D1-B6D1-00A0C90F2744}";
        const LPSTR vsWizardAddItem = "{0F90E1D1-4999-11D1-B6D1-00A0C90F2744}";
        const LPSTR vsWizardNewProject = "{0F90E1D0-4999-11D1-B6D1-00A0C90F2744}";
        const LPSTR vsProjectKindMisc = "{66A2671D-8FB5-11D2-AA7E-00C04F688DDE}";
        const LPSTR vsProjectItemsKindMisc = "{66A2671E-8FB5-11D2-AA7E-00C04F688DDE}";
        const LPSTR vsProjectItemKindMisc = "{66A2671F-8FB5-11D2-AA7E-00C04F688DDE}";
        const LPSTR vsProjectKindUnmodeled = "{67294A52-A4F0-11D2-AA88-00C04F688DDE}";
        const LPSTR vsProjectKindSolutionItems = "{66A26720-8FB5-11D2-AA7E-00C04F688DDE}";
        const LPSTR vsProjectItemsKindSolutionItems = "{66A26721-8FB5-11D2-AA7E-00C04F688DDE}";
        const LPSTR vsProjectItemKindSolutionItems = "{66A26722-8FB5-11D2-AA7E-00C04F688DDE}";
        const LPSTR vsProjectsKindSolution = "{96410B9F-3542-4A14-877F-BC7227B51D3B}";
        const LPSTR vsAddInCmdGroup = "{1E58696E-C90F-11D2-AAB2-00C04F688DDE}";
        const LPSTR vsContextSolutionBuilding = "{ADFC4E60-0397-11D1-9F4E-00A0C911004F}";
        const LPSTR vsContextDebugging = "{ADFC4E61-0397-11D1-9F4E-00A0C911004F}";
        const LPSTR vsContextFullScreenMode = "{ADFC4E62-0397-11D1-9F4E-00A0C911004F}";
        const LPSTR vsContextDesignMode = "{ADFC4E63-0397-11D1-9F4E-00A0C911004F}";
        const LPSTR vsContextNoSolution = "{ADFC4E64-0397-11D1-9F4E-00A0C911004F}";
        const LPSTR vsContextEmptySolution = "{ADFC4E65-0397-11D1-9F4E-00A0C911004F}";
        const LPSTR vsContextSolutionHasSingleProject = "{ADFC4E66-0397-11D1-9F4E-00A0C911004F}";
        const LPSTR vsContextSolutionHasMultipleProjects = "{93694FA0-0397-11D1-9F4E-00A0C911004F}";
        const LPSTR vsContextMacroRecording = "{04BBF6A5-4697-11D2-890E-0060083196C6}";
        const LPSTR vsContextMacroRecordingToolbar = "{85A70471-270A-11D2-88F9-0060083196C6}";
        const LPSTR vsMiscFilesProjectUniqueName = "<MiscFiles>";
        const LPSTR vsSolutionItemsProjectUniqueName = "<SolnItems>";
        const LPSTR vsProjectItemKindPhysicalFile = "{6BB5F8EE-4483-11D3-8BCF-00C04F8EC28C}";
        const LPSTR vsProjectItemKindPhysicalFolder = "{6BB5F8EF-4483-11D3-8BCF-00C04F8EC28C}";
        const LPSTR vsProjectItemKindVirtualFolder = "{6BB5F8F0-4483-11D3-8BCF-00C04F8EC28C}";
        const LPSTR vsProjectItemKindSubProject = "{EA6618E8-6E24-4528-94BE-6889FE16485C}";
        const LPSTR vsext_vk_Primary = "{00000000-0000-0000-0000-000000000000}";
        const LPSTR vsext_vk_Debugging = "{7651A700-06E5-11D1-8EBD-00A0C90F26EA}";
        const LPSTR vsext_vk_Code = "{7651A701-06E5-11D1-8EBD-00A0C90F26EA}";
        const LPSTR vsext_vk_Designer = "{7651A702-06E5-11D1-8EBD-00A0C90F26EA}";
        const LPSTR vsext_vk_TextView = "{7651A703-06E5-11D1-8EBD-00A0C90F26EA}";
        const LPSTR vsext_wk_TaskList = "{4A9B7E51-AA16-11D0-A8C5-00A0C921A4D2}";
        const LPSTR vsext_wk_Toolbox = "{B1E99781-AB81-11D0-B683-00AA00A3EE26}";
        const LPSTR vsext_wk_CallStackWindow = "{0504FF91-9D61-11D0-A794-00A0C9110051}";
        const LPSTR vsext_wk_ThreadWindow = "{E62CE6A0-B439-11D0-A79D-00A0C9110051}";
        const LPSTR vsext_wk_LocalsWindow = "{4A18F9D0-B838-11D0-93EB-00A0C90F2734}";
        const LPSTR vsext_wk_AutoLocalsWindow = "{F2E84780-2AF1-11D1-A7FA-00A0C9110051}";
        const LPSTR vsext_wk_WatchWindow = "{90243340-BD7A-11D0-93EF-00A0C90F2734}";
        const LPSTR vsext_wk_ImmedWindow = "{98731960-965C-11D0-A78F-00A0C9110051}";
        const LPSTR vsext_wk_PropertyBrowser = "{EEFA5220-E298-11D0-8F78-00A0C9110057}";
        const LPSTR vsext_wk_SProjectWindow = "{3AE79031-E1BC-11D0-8F78-00A0C9110057}";
        const LPSTR vsext_wk_OutputWindow = "{34E76E81-EE4A-11D0-AE2E-00A0C90FFFC3}";
        const LPSTR vsext_wk_ObjectBrowser = "{269A02DC-6AF8-11D3-BDC4-00C04F688E50}";
        const LPSTR vsext_wk_ContextWindow = "{66DBA47C-61DF-11D2-AA79-00C04F990343}";
        const LPSTR vsext_wk_ClassView = "{C9C0AE26-AA77-11D2-B3F0-0000F87570EE}";
        const LPSTR vsext_GUID_AddItemWizard = "{0F90E1D1-4999-11D1-B6D1-00A0C90F2744}";
        const LPSTR vsext_GUID_NewProjectWizard = "{0F90E1D0-4999-11D1-B6D1-00A0C90F2744}";
        const LPSTR dsCPP = "C/C++";
        const LPSTR dsHTML_IE3 = "HTML - IE 3.0";
        const LPSTR dsHTML_RFC1866 = "HTML 2.0 (RFC 1866)";
        const LPSTR dsFortran_Fixed = "Fortran Fixed";
        const LPSTR dsFortran_Free = "Fortran Free";
        const LPSTR dsJava = "Java";
        const LPSTR dsVBSMacro = "VBS Macro";
        const LPSTR dsIDL = "ODL/IDL";
        [helpstring("Solution Automation object CATID")] const LPSTR vsCATIDSolution = "{52AEFF70-BBD8-11d2-8598-006097C68E81}";
        [helpstring("Solution Browse Object CATID ")] const LPSTR vsCATIDSolutionBrowseObject = "{A2392464-7C22-11d3-BDCA-00C04F688E50}";
        [helpstring("Misc Files Project Automation Object CATID")] const LPSTR vsCATIDMiscFilesProject = "{610d4612-d0d5-11d2-8599-006097c68e81}";
        [helpstring("Misc Files Project Item Automation Object CATID")] const LPSTR vsCATIDMiscFilesProjectItem = "{610d4613-d0d5-11d2-8599-006097c68e81}";
        [helpstring("Generic Project Automation Object CATID")] const LPSTR vsCATIDGenericProject = "{610d4616-d0d5-11d2-8599-006097c68e81}";
        [helpstring("(Generic) Document Automation Object CATID")] const LPSTR vsCATIDDocument = "{610d4611-d0d5-11d2-8599-006097c68e81}";
    };

    

    [
      odl,
      uuid(2E1BFD1C-5B26-4ACA-B97B-ED9D261BA3E7),
      hidden,
      dual,
      oleautomation
    ]
    interface IVsTextEditGeneral : IDispatch {
        [id(0x00000001), propput]
        HRESULT SelectionMargin([in] VARIANT_BOOL pfSelectionMargin);
        [id(0x00000001), propget]
        HRESULT SelectionMargin([out, retval] VARIANT_BOOL* pfSelectionMargin);
        [id(0x00000002), propput]
        HRESULT GoToAnchorAfterEscape([in] VARIANT_BOOL pfGoToAnchorAfterEscape);
        [id(0x00000002), propget]
        HRESULT GoToAnchorAfterEscape([out, retval] VARIANT_BOOL* pfGoToAnchorAfterEscape);
        [id(0x00000003), propput]
        HRESULT DragNDropTextEditing([in] VARIANT_BOOL pfDragNDropTextEditing);
        [id(0x00000003), propget]
        HRESULT DragNDropTextEditing([out, retval] VARIANT_BOOL* pfDragNDropTextEditing);
        [id(0x00000004), propput]
        HRESULT UndoCaretActions([in] VARIANT_BOOL pfUndoCaretActions);
        [id(0x00000004), propget]
        HRESULT UndoCaretActions([out, retval] VARIANT_BOOL* pfUndoCaretActions);
        [id(0x00000005), propput]
        HRESULT MarginIndicatorBar([in] VARIANT_BOOL pfMarginIndicatorBar);
        [id(0x00000005), propget]
        HRESULT MarginIndicatorBar([out, retval] VARIANT_BOOL* pfMarginIndicatorBar);
        [id(0x00000006), propput]
        HRESULT HorizontalScrollBar([in] VARIANT_BOOL pfHorizontalScrollBar);
        [id(0x00000006), propget]
        HRESULT HorizontalScrollBar([out, retval] VARIANT_BOOL* pfHorizontalScrollBar);
        [id(0x00000007), propput]
        HRESULT VerticalScrollBar([in] VARIANT_BOOL pfVerticalScrollBar);
        [id(0x00000007), propget]
        HRESULT VerticalScrollBar([out, retval] VARIANT_BOOL* pfVerticalScrollBar);
        [id(0x00000008), propput]
        HRESULT AutoDelimiterHighlighting([in] VARIANT_BOOL pfHighlighting);
        [id(0x00000008), propget]
        HRESULT AutoDelimiterHighlighting([out, retval] VARIANT_BOOL* pfHighlighting);
    };

    [
      odl,
      uuid(5943BD7E-D722-42DB-A251-FE2ADD8711EA),
      hidden,
      dual,
      oleautomation
    ]
    interface IVsTextEditPerLanguage : IDispatch {
        [id(0x00000001), propput]
        HRESULT TabSize([in] short piTabSize);
        [id(0x00000001), propget]
        HRESULT TabSize([out, retval] short* piTabSize);
        [id(0x00000002), propput]
        HRESULT IndentSize([in] short piIndentSize);
        [id(0x00000002), propget]
        HRESULT IndentSize([out, retval] short* piIndentSize);
        [id(0x00000003), propput]
        HRESULT InsertTabs([in] VARIANT_BOOL pfInsertTabs);
        [id(0x00000003), propget]
        HRESULT InsertTabs([out, retval] VARIANT_BOOL* pfInsertTabs);
        [id(0x00000004), propput]
        HRESULT IndentStyle([in] _vsIndentStyle pfIndentStyle);
        [id(0x00000004), propget]
        HRESULT IndentStyle([out, retval] _vsIndentStyle* pfIndentStyle);
        [id(0x00000005), propput]
        HRESULT AutoListMembers([in] VARIANT_BOOL pfAutoListMembers);
        [id(0x00000005), propget]
        HRESULT AutoListMembers([out, retval] VARIANT_BOOL* pfAutoListMembers);
        [id(0x00000006), propput]
        HRESULT AutoListParams([in] VARIANT_BOOL pfAutoListParams);
        [id(0x00000006), propget]
        HRESULT AutoListParams([out, retval] VARIANT_BOOL* pfAutoListParams);
        [id(0x00000007), propput]
        HRESULT VirtualSpace([in] VARIANT_BOOL pfVirtualSpace);
        [id(0x00000007), propget]
        HRESULT VirtualSpace([out, retval] VARIANT_BOOL* pfVirtualSpace);
        [id(0x00000008), propput]
        HRESULT EnableLeftClickForURLs([in] VARIANT_BOOL pfHotURLs);
        [id(0x00000008), propget]
        HRESULT EnableLeftClickForURLs([out, retval] VARIANT_BOOL* pfHotURLs);
        [id(0x00000009), propput]
        HRESULT WordWrap([in] VARIANT_BOOL pfWrap);
        [id(0x00000009), propget]
        HRESULT WordWrap([out, retval] VARIANT_BOOL* pfWrap);
        [id(0x0000000a), propput]
        HRESULT ShowLineNumbers([in] VARIANT_BOOL pfshow);
        [id(0x0000000a), propget]
        HRESULT ShowLineNumbers([out, retval] VARIANT_BOOL* pfshow);
        [id(0x0000000b), propput]
        HRESULT ShowNavigationBar([in] VARIANT_BOOL pfshow);
        [id(0x0000000b), propget]
        HRESULT ShowNavigationBar([out, retval] VARIANT_BOOL* pfshow);
        [id(0x0000000d), propput]
        HRESULT HideAdvancedMembers([in] VARIANT_BOOL pfHide);
        [id(0x0000000d), propget]
        HRESULT HideAdvancedMembers([out, retval] VARIANT_BOOL* pfHide);
    };

   

    [
      odl,
      uuid(F39AB913-E6C9-4546-A265-1E43F8DE924C),
      hidden,
      dual,
      oleautomation,
      restricted
    ]
    interface IVsTextEditFonts : IDispatch {
        [id(0x00000001), propput]
        HRESULT FontFamily([in] BSTR pbstrFontFamily);
        [id(0x00000001), propget]
        HRESULT FontFamily([out, retval] BSTR* pbstrFontFamily);
        [id(0x00000002), propput]
        HRESULT FontCharacterSet([in] vsFontCharSet pbstrCharacterSet);
        [id(0x00000002), propget]
        HRESULT FontCharacterSet([out, retval] vsFontCharSet* pbstrCharacterSet);
        [id(0x00000003), propput]
        HRESULT FontSize([in] short piFontSize);
        [id(0x00000003), propget]
        HRESULT FontSize([out, retval] short* piFontSize);
    };

    

    [
      odl,
      uuid(F6576203-FBCE-477E-A66B-EDA237BB68A7),
      dual,
      oleautomation
    ]
    interface HTMLWindow : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the top-level extensibility object."), helpcontext(0x0000eac1)]
        HRESULT DTE([out, retval] _DTE** ppDTE);
        [id(0x00000002), propget, helpstring("Returns the parent object."), helpcontext(0x0000eaf2)]
        HRESULT Parent([out, retval] Window** ppParent);
        [id(0x00000004), propget, helpstring("The currently selected tab of the HTML editor: Design or HTML."), helpcontext(0x0000ec2a)]
        HRESULT CurrentTab([out, retval] vsHTMLTabs* pTab);
        [id(0x00000004), propput, helpstring("The currently selected tab of the HTML editor: Design or HTML."), helpcontext(0x0000ec2a)]
        HRESULT CurrentTab([in] vsHTMLTabs pTab);
        [id(0x00000005), propget, helpstring("Returns the automation object for the current tab (e.g., a TextSelection for the HTML tab)."), helpcontext(0x0000ec2b)]
        HRESULT CurrentTabObject([out, retval] IDispatch** ppObj);
    };
};
