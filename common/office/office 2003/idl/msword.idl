// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: MSWORD.OLB

[
  uuid(00020905-0000-0000-C000-000000000046),
  version(8.3),
  helpstring("Microsoft Word 11.0 Object Library"),
  helpfile("VBAWD10.CHM"),
  helpcontext(00000000)
]
library Word
{
    // TLib :     // TLib : Microsoft Visual Basic for Applications Extensibility 5.3 : {0002E157-0000-0000-C000-000000000046}
    importlib("VBE6EXT.OLB");
    // TLib : Microsoft Office 11.0 Object Library : {2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}
    importlib("MSO.DLL");
//#include "MSO.idl"
    // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

#define Application _Application
#define Document _Document
#define LetterContent _LetterContent
#define ParagraphFormat _ParagraphFormat

#define VBE IUnknown
#define VBProject IUnknown

#define single int

    // Forward declare all types defined in this typelib
    interface _Application;
    interface _Global;
    interface FontNames;
    interface Languages;
    interface Language;
    interface Documents;
    interface _Document;
    interface Template;
    interface Templates;
    interface RoutingSlip;
    interface Bookmark;
    interface Bookmarks;
    interface Variable;
    interface Variables;
    interface RecentFile;
    interface RecentFiles;
    interface Window;
    interface Windows;
    interface Pane;
    interface Panes;
    interface Range;
    interface ListFormat;
    interface Find;
    interface Replacement;
    interface Characters;
    interface Words;
    interface Sentences;
    interface Sections;
    interface Section;
    interface Paragraphs;
    interface Paragraph;
    interface DropCap;
    interface TabStops;
    interface TabStop;
    interface _ParagraphFormat;
    interface _Font;
    interface Table;
    interface Row;
    interface Column;
    interface Cell;
    interface Tables;
    interface Rows;
    interface Columns;
    interface Cells;
    interface AutoCorrect;
    interface AutoCorrectEntries;
    interface AutoCorrectEntry;
    interface FirstLetterExceptions;
    interface FirstLetterException;
    interface TwoInitialCapsExceptions;
    interface TwoInitialCapsException;
    interface Footnotes;
    interface Endnotes;
    interface Comments;
    interface Footnote;
    interface Endnote;
    interface Comment;
    interface Borders;
    interface Border;
    interface Shading;
    interface TextRetrievalMode;
    interface AutoTextEntries;
    interface AutoTextEntry;
    interface System;
    interface OLEFormat;
    interface LinkFormat;
    interface _OLEControl;
    interface Fields;
    interface Field;
    interface Browser;
    interface Styles;
    interface Style;
    interface Frames;
    interface Frame;
    interface FormFields;
    interface FormField;
    interface TextInput;
    interface CheckBox;
    interface DropDown;
    interface ListEntries;
    interface ListEntry;
    interface TablesOfFigures;
    interface TableOfFigures;
    interface MailMerge;
    interface MailMergeFields;
    interface MailMergeField;
    interface MailMergeDataSource;
    interface MailMergeFieldNames;
    interface MailMergeFieldName;
    interface MailMergeDataFields;
    interface MailMergeDataField;
    interface Envelope;
    interface MailingLabel;
    interface CustomLabels;
    interface CustomLabel;
    interface TablesOfContents;
    interface TableOfContents;
    interface TablesOfAuthorities;
    interface TableOfAuthorities;
    interface Dialogs;
    interface Dialog;
    interface PageSetup;
    interface LineNumbering;
    interface TextColumns;
    interface TextColumn;
    interface Selection;
    interface TablesOfAuthoritiesCategories;
    interface TableOfAuthoritiesCategory;
    interface CaptionLabels;
    interface CaptionLabel;
    interface AutoCaptions;
    interface AutoCaption;
    interface Indexes;
    interface Index;
    interface AddIn;
    interface AddIns;
    interface Revisions;
    interface Revision;
    interface Task;
    interface Tasks;
    interface HeadersFooters;
    interface HeaderFooter;
    interface PageNumbers;
    interface PageNumber;
    interface Subdocuments;
    interface Subdocument;
    interface HeadingStyles;
    interface HeadingStyle;
    interface StoryRanges;
    interface ListLevel;
    interface ListLevels;
    interface ListTemplate;
    interface ListTemplates;
    interface ListParagraphs;
    interface List;
    interface Lists;
    interface ListGallery;
    interface ListGalleries;
    interface KeyBindings;
    interface KeysBoundTo;
    interface KeyBinding;
    interface FileConverter;
    interface FileConverters;
    interface SynonymInfo;
    interface Hyperlinks;
    interface Hyperlink;
    interface Shapes;
    interface ShapeRange;
    interface GroupShapes;
    interface Shape;
    interface TextFrame;
    interface _LetterContent;
    interface View;
    interface Zoom;
    interface Zooms;
    interface InlineShape;
    interface InlineShapes;
    interface SpellingSuggestions;
    interface SpellingSuggestion;
    interface Dictionaries;
    interface HangulHanjaConversionDictionaries;
    interface Dictionary;
    interface ReadabilityStatistics;
    interface ReadabilityStatistic;
    interface Versions;
    interface Version;
    interface Options;
    interface MailMessage;
    interface ProofreadingErrors;
    interface Mailer;
    interface WrapFormat;
    interface HangulAndAlphabetExceptions;
    interface HangulAndAlphabetException;
    interface Adjustments;
    interface CalloutFormat;
    interface ColorFormat;
    interface ConnectorFormat;
    interface FillFormat;
    interface FreeformBuilder;
    interface LineFormat;
    interface PictureFormat;
    interface ShadowFormat;
    interface ShapeNode;
    interface ShapeNodes;
    interface TextEffectFormat;
    interface ThreeDFormat;
    dispinterface ApplicationEvents;
    dispinterface DocumentEvents;
    dispinterface OCXEvents;
    interface IApplicationEvents;
    interface IApplicationEvents2;
    dispinterface ApplicationEvents2;
    interface EmailAuthor;
    interface EmailOptions;
    interface EmailSignature;
    interface Email;
    interface HorizontalLineFormat;
    interface Frameset;
    interface DefaultWebOptions;
    interface WebOptions;
    interface OtherCorrectionsExceptions;
    interface OtherCorrectionsException;
    interface EmailSignatureEntries;
    interface EmailSignatureEntry;
    interface HTMLDivision;
    interface HTMLDivisions;
    interface DiagramNode;
    interface DiagramNodeChildren;
    interface DiagramNodes;
    interface Diagram;
    interface CustomProperty;
    interface CustomProperties;
    interface SmartTag;
    interface SmartTags;
    interface StyleSheet;
    interface StyleSheets;
    interface MappedDataField;
    interface MappedDataFields;
    interface CanvasShapes;
    interface TableStyle;
    interface ConditionalStyle;
    interface FootnoteOptions;
    interface EndnoteOptions;
    interface Reviewers;
    interface Reviewer;
    interface TaskPane;
    interface TaskPanes;
    interface IApplicationEvents3;
    dispinterface ApplicationEvents3;
    interface SmartTagAction;
    interface SmartTagActions;
    interface SmartTagRecognizer;
    interface SmartTagRecognizers;
    interface SmartTagType;
    interface SmartTagTypes;
    interface Line;
    interface Lines;
    interface Rectangle;
    interface Rectangles;
    interface Break;
    interface Breaks;
    interface Page;
    interface Pages;
    interface XMLNode;
    interface XMLNodes;
    interface XMLSchemaReference;
    interface XMLSchemaReferences;
    interface XMLChildNodeSuggestion;
    interface XMLChildNodeSuggestions;
    interface XMLNamespace;
    interface XMLNamespaces;
    interface XSLTransform;
    interface XSLTransforms;
    interface Editors;
    interface Editor;
    interface IApplicationEvents4;
    dispinterface ApplicationEvents4;
    dispinterface DocumentEvents2;

    typedef enum {
        wdNoMailSystem = 0,
        wdMAPI = 1,
        wdPowerTalk = 2,
        wdMAPIandPowerTalk = 3
    } WdMailSystem;

    typedef enum {
        wdNormalTemplate = 0,
        wdGlobalTemplate = 1,
        wdAttachedTemplate = 2
    } WdTemplateType;

    typedef enum {
        wdContinueDisabled = 0,
        wdResetList = 1,
        wdContinueList = 2
    } WdContinue;

    typedef enum {
        wdIMEModeNoControl = 0,
        wdIMEModeOn = 1,
        wdIMEModeOff = 2,
        wdIMEModeHiragana = 4,
        wdIMEModeKatakana = 5,
        wdIMEModeKatakanaHalf = 6,
        wdIMEModeAlphaFull = 7,
        wdIMEModeAlpha = 8,
        wdIMEModeHangulFull = 9,
        wdIMEModeHangul = 10
    } WdIMEMode;

    typedef enum {
        wdBaselineAlignTop = 0,
        wdBaselineAlignCenter = 1,
        wdBaselineAlignBaseline = 2,
        wdBaselineAlignFarEast50 = 3,
        wdBaselineAlignAuto = 4
    } WdBaselineAlignment;

    typedef enum {
        wdIndexFilterNone = 0,
        wdIndexFilterAiueo = 1,
        wdIndexFilterAkasatana = 2,
        wdIndexFilterChosung = 3,
        wdIndexFilterLow = 4,
        wdIndexFilterMedium = 5,
        wdIndexFilterFull = 6
    } WdIndexFilter;

    typedef enum {
        wdIndexSortByStroke = 0,
        wdIndexSortBySyllable = 1
    } WdIndexSortBy;

    typedef enum {
        wdJustificationModeExpand = 0,
        wdJustificationModeCompress = 1,
        wdJustificationModeCompressKana = 2
    } WdJustificationMode;

    typedef enum {
        wdFarEastLineBreakLevelNormal = 0,
        wdFarEastLineBreakLevelStrict = 1,
        wdFarEastLineBreakLevelCustom = 2
    } WdFarEastLineBreakLevel;

    typedef enum {
        wdHangulToHanja = 0,
        wdHanjaToHangul = 1
    } WdMultipleWordConversionsMode;

    typedef enum {
        wdAuto = 0,
        wdBlack = 1,
        wdBlue = 2,
        wdTurquoise = 3,
        wdBrightGreen = 4,
        wdPink = 5,
        wdRed = 6,
        wdYellow = 7,
        wdWhite = 8,
        wdDarkBlue = 9,
        wdTeal = 10,
        wdGreen = 11,
        wdViolet = 12,
        wdDarkRed = 13,
        wdDarkYellow = 14,
        wdGray50 = 15,
        wdGray25 = 16,
        wdByAuthor = 0xffffffff,
        wdNoHighlight = 0
    } WdColorIndex;

    typedef enum {
        wdTextureNone = 0,
        wdTexture2Pt5Percent = 25,
        wdTexture5Percent = 50,
        wdTexture7Pt5Percent = 75,
        wdTexture10Percent = 100,
        wdTexture12Pt5Percent = 125,
        wdTexture15Percent = 150,
        wdTexture17Pt5Percent = 175,
        wdTexture20Percent = 200,
        wdTexture22Pt5Percent = 225,
        wdTexture25Percent = 250,
        wdTexture27Pt5Percent = 275,
        wdTexture30Percent = 300,
        wdTexture32Pt5Percent = 325,
        wdTexture35Percent = 350,
        wdTexture37Pt5Percent = 375,
        wdTexture40Percent = 400,
        wdTexture42Pt5Percent = 425,
        wdTexture45Percent = 450,
        wdTexture47Pt5Percent = 475,
        wdTexture50Percent = 500,
        wdTexture52Pt5Percent = 525,
        wdTexture55Percent = 550,
        wdTexture57Pt5Percent = 575,
        wdTexture60Percent = 600,
        wdTexture62Pt5Percent = 625,
        wdTexture65Percent = 650,
        wdTexture67Pt5Percent = 675,
        wdTexture70Percent = 700,
        wdTexture72Pt5Percent = 725,
        wdTexture75Percent = 750,
        wdTexture77Pt5Percent = 775,
        wdTexture80Percent = 800,
        wdTexture82Pt5Percent = 825,
        wdTexture85Percent = 850,
        wdTexture87Pt5Percent = 875,
        wdTexture90Percent = 900,
        wdTexture92Pt5Percent = 925,
        wdTexture95Percent = 950,
        wdTexture97Pt5Percent = 975,
        wdTextureSolid = 1000,
        wdTextureDarkHorizontal = 0xffffffff,
        wdTextureDarkVertical = 0xfffffffe,
        wdTextureDarkDiagonalDown = 0xfffffffd,
        wdTextureDarkDiagonalUp = 0xfffffffc,
        wdTextureDarkCross = 0xfffffffb,
        wdTextureDarkDiagonalCross = 0xfffffffa,
        wdTextureHorizontal = 0xfffffff9,
        wdTextureVertical = 0xfffffff8,
        wdTextureDiagonalDown = 0xfffffff7,
        wdTextureDiagonalUp = 0xfffffff6,
        wdTextureCross = 0xfffffff5,
        wdTextureDiagonalCross = 0xfffffff4
    } WdTextureIndex;

    typedef enum {
        wdUnderlineNone = 0,
        wdUnderlineSingle = 1,
        wdUnderlineWords = 2,
        wdUnderlineDouble = 3,
        wdUnderlineDotted = 4,
        wdUnderlineThick = 6,
        wdUnderlineDash = 7,
        wdUnderlineDotDash = 9,
        wdUnderlineDotDotDash = 10,
        wdUnderlineWavy = 11,
        wdUnderlineWavyHeavy = 27,
        wdUnderlineDottedHeavy = 20,
        wdUnderlineDashHeavy = 23,
        wdUnderlineDotDashHeavy = 25,
        wdUnderlineDotDotDashHeavy = 26,
        wdUnderlineDashLong = 39,
        wdUnderlineDashLongHeavy = 55,
        wdUnderlineWavyDouble = 43
    } WdUnderline;

    typedef enum {
        wdEmphasisMarkNone = 0,
        wdEmphasisMarkOverSolidCircle = 1,
        wdEmphasisMarkOverComma = 2,
        wdEmphasisMarkOverWhiteCircle = 3,
        wdEmphasisMarkUnderSolidCircle = 4
    } WdEmphasisMark;

    typedef enum {
        wdListSeparator = 17,
        wdDecimalSeparator = 18,
        wdThousandsSeparator = 19,
        wdCurrencyCode = 20,
        wd24HourClock = 21,
        wdInternationalAM = 22,
        wdInternationalPM = 23,
        wdTimeSeparator = 24,
        wdDateSeparator = 25,
        wdProductLanguageID = 26
    } WdInternationalIndex;

    typedef enum {
        wdAutoExec = 0,
        wdAutoNew = 1,
        wdAutoOpen = 2,
        wdAutoClose = 3,
        wdAutoExit = 4,
        wdAutoSync = 5
    } WdAutoMacros;

    typedef enum {
        wdCaptionPositionAbove = 0,
        wdCaptionPositionBelow = 1
    } WdCaptionPosition;

    typedef enum {
        wdUS = 1,
        wdCanada = 2,
        wdLatinAmerica = 3,
        wdNetherlands = 31,
        wdFrance = 33,
        wdSpain = 34,
        wdItaly = 39,
        wdUK = 44,
        wdDenmark = 45,
        wdSweden = 46,
        wdNorway = 47,
        wdGermany = 49,
        wdPeru = 51,
        wdMexico = 52,
        wdArgentina = 54,
        wdBrazil = 55,
        wdChile = 56,
        wdVenezuela = 58,
        wdJapan = 81,
        wdTaiwan = 886,
        wdChina = 86,
        wdKorea = 82,
        wdFinland = 358,
        wdIceland = 354
    } WdCountry;

    typedef enum {
        wdHeadingSeparatorNone = 0,
        wdHeadingSeparatorBlankLine = 1,
        wdHeadingSeparatorLetter = 2,
        wdHeadingSeparatorLetterLow = 3,
        wdHeadingSeparatorLetterFull = 4
    } WdHeadingSeparator;

    typedef enum {
        wdSeparatorHyphen = 0,
        wdSeparatorPeriod = 1,
        wdSeparatorColon = 2,
        wdSeparatorEmDash = 3,
        wdSeparatorEnDash = 4
    } WdSeparatorType;

    typedef enum {
        wdAlignPageNumberLeft = 0,
        wdAlignPageNumberCenter = 1,
        wdAlignPageNumberRight = 2,
        wdAlignPageNumberInside = 3,
        wdAlignPageNumberOutside = 4
    } WdPageNumberAlignment;

    typedef enum {
        wdBorderTop = 0xffffffff,
        wdBorderLeft = 0xfffffffe,
        wdBorderBottom = 0xfffffffd,
        wdBorderRight = 0xfffffffc,
        wdBorderHorizontal = 0xfffffffb,
        wdBorderVertical = 0xfffffffa,
        wdBorderDiagonalDown = 0xfffffff9,
        wdBorderDiagonalUp = 0xfffffff8
    } WdBorderType;

    /*typedef enum {
        emptyenum = 0
    } WdBorderTypeHID;*/

    typedef enum {
        wdFrameTop = 0xfff0bdc1,
        wdFrameLeft = 0xfff0bdc2,
        wdFrameBottom = 0xfff0bdc3,
        wdFrameRight = 0xfff0bdc4,
        wdFrameCenter = 0xfff0bdc5,
        wdFrameInside = 0xfff0bdc6,
        wdFrameOutside = 0xfff0bdc7
    } WdFramePosition;

    typedef enum {
        wdAnimationNone = 0,
        wdAnimationLasVegasLights = 1,
        wdAnimationBlinkingBackground = 2,
        wdAnimationSparkleText = 3,
        wdAnimationMarchingBlackAnts = 4,
        wdAnimationMarchingRedAnts = 5,
        wdAnimationShimmer = 6
    } WdAnimation;

    typedef enum {
        wdNextCase = 0xffffffff,
        wdLowerCase = 0,
        wdUpperCase = 1,
        wdTitleWord = 2,
        wdTitleSentence = 4,
        wdToggleCase = 5,
        wdHalfWidth = 6,
        wdFullWidth = 7,
        wdKatakana = 8,
        wdHiragana = 9
    } WdCharacterCase;

    /*typedef enum {
        emptyenum = 0
    } WdCharacterCaseHID;*/

    typedef enum {
        wdSummaryModeHighlight = 0,
        wdSummaryModeHideAllButSummary = 1,
        wdSummaryModeInsert = 2,
        wdSummaryModeCreateNew = 3
    } WdSummaryMode;

    typedef enum {
        wd10Sentences = 0xfffffffe,
        wd20Sentences = 0xfffffffd,
        wd100Words = 0xfffffffc,
        wd500Words = 0xfffffffb,
        wd10Percent = 0xfffffffa,
        wd25Percent = 0xfffffff9,
        wd50Percent = 0xfffffff8,
        wd75Percent = 0xfffffff7
    } WdSummaryLength;

    typedef enum {
        wdStyleTypeParagraph = 1,
        wdStyleTypeCharacter = 2,
        wdStyleTypeTable = 3,
        wdStyleTypeList = 4
    } WdStyleType;

    typedef enum {
        wdCharacter = 1,
        wdWord = 2,
        wdSentence = 3,
        wdParagraph = 4,
        wdLine = 5,
        wdStory = 6,
        wdScreen = 7,
        wdSection = 8,
        wdColumn = 9,
        wdRow = 10,
        wdWindow = 11,
        wdCell = 12,
        wdCharacterFormatting = 13,
        wdParagraphFormatting = 14,
        wdTable = 15,
        wdItem = 16
    } WdUnits;

    typedef enum {
        wdGoToBookmark = 0xffffffff,
        wdGoToSection = 0,
        wdGoToPage = 1,
        wdGoToTable = 2,
        wdGoToLine = 3,
        wdGoToFootnote = 4,
        wdGoToEndnote = 5,
        wdGoToComment = 6,
        wdGoToField = 7,
        wdGoToGraphic = 8,
        wdGoToObject = 9,
        wdGoToEquation = 10,
        wdGoToHeading = 11,
        wdGoToPercent = 12,
        wdGoToSpellingError = 13,
        wdGoToGrammaticalError = 14,
        wdGoToProofreadingError = 15
    } WdGoToItem;

    typedef enum {
        wdGoToFirst = 1,
        wdGoToLast = 0xffffffff,
        wdGoToNext = 2,
        wdGoToRelative = 2,
        wdGoToPrevious = 3,
        wdGoToAbsolute = 1
    } WdGoToDirection;

    typedef enum {
        wdCollapseStart = 1,
        wdCollapseEnd = 0
    } WdCollapseDirection;

    typedef enum {
        wdRowHeightAuto = 0,
        wdRowHeightAtLeast = 1,
        wdRowHeightExactly = 2
    } WdRowHeightRule;

    typedef enum {
        wdFrameAuto = 0,
        wdFrameAtLeast = 1,
        wdFrameExact = 2
    } WdFrameSizeRule;

    typedef enum {
        wdInsertCellsShiftRight = 0,
        wdInsertCellsShiftDown = 1,
        wdInsertCellsEntireRow = 2,
        wdInsertCellsEntireColumn = 3
    } WdInsertCells;

    typedef enum {
        wdDeleteCellsShiftLeft = 0,
        wdDeleteCellsShiftUp = 1,
        wdDeleteCellsEntireRow = 2,
        wdDeleteCellsEntireColumn = 3
    } WdDeleteCells;

    typedef enum {
        wdListApplyToWholeList = 0,
        wdListApplyToThisPointForward = 1,
        wdListApplyToSelection = 2
    } WdListApplyTo;

    typedef enum {
        wdAlertsNone = 0,
        wdAlertsMessageBox = 0xfffffffe,
        wdAlertsAll = 0xffffffff
    } WdAlertLevel;

    typedef enum {
        wdCursorWait = 0,
        wdCursorIBeam = 1,
        wdCursorNormal = 2,
        wdCursorNorthwestArrow = 3
    } WdCursorType;

    typedef enum {
        wdCancelDisabled = 0,
        wdCancelInterrupt = 1
    } WdEnableCancelKey;

    typedef enum {
        wdAdjustNone = 0,
        wdAdjustProportional = 1,
        wdAdjustFirstColumn = 2,
        wdAdjustSameWidth = 3
    } WdRulerStyle;

    typedef enum {
        wdAlignParagraphLeft = 0,
        wdAlignParagraphCenter = 1,
        wdAlignParagraphRight = 2,
        wdAlignParagraphJustify = 3,
        wdAlignParagraphDistribute = 4,
        wdAlignParagraphJustifyMed = 5,
        wdAlignParagraphJustifyHi = 7,
        wdAlignParagraphJustifyLow = 8,
        wdAlignParagraphThaiJustify = 9
    } WdParagraphAlignment;

   /* typedef enum {
        emptyenum = 0
    } WdParagraphAlignmentHID;*/

    typedef enum {
        wdListLevelAlignLeft = 0,
        wdListLevelAlignCenter = 1,
        wdListLevelAlignRight = 2
    } WdListLevelAlignment;

    typedef enum {
        wdAlignRowLeft = 0,
        wdAlignRowCenter = 1,
        wdAlignRowRight = 2
    } WdRowAlignment;

    typedef enum {
        wdAlignTabLeft = 0,
        wdAlignTabCenter = 1,
        wdAlignTabRight = 2,
        wdAlignTabDecimal = 3,
        wdAlignTabBar = 4,
        wdAlignTabList = 6
    } WdTabAlignment;

    typedef enum {
        wdAlignVerticalTop = 0,
        wdAlignVerticalCenter = 1,
        wdAlignVerticalJustify = 2,
        wdAlignVerticalBottom = 3
    } WdVerticalAlignment;

    typedef enum {
        wdCellAlignVerticalTop = 0,
        wdCellAlignVerticalCenter = 1,
        wdCellAlignVerticalBottom = 3
    } WdCellVerticalAlignment;

    typedef enum {
        wdTrailingTab = 0,
        wdTrailingSpace = 1,
        wdTrailingNone = 2
    } WdTrailingCharacter;

    typedef enum {
        wdBulletGallery = 1,
        wdNumberGallery = 2,
        wdOutlineNumberGallery = 3
    } WdListGalleryType;

    typedef enum {
        wdListNumberStyleArabic = 0,
        wdListNumberStyleUppercaseRoman = 1,
        wdListNumberStyleLowercaseRoman = 2,
        wdListNumberStyleUppercaseLetter = 3,
        wdListNumberStyleLowercaseLetter = 4,
        wdListNumberStyleOrdinal = 5,
        wdListNumberStyleCardinalText = 6,
        wdListNumberStyleOrdinalText = 7,
        wdListNumberStyleKanji = 10,
        wdListNumberStyleKanjiDigit = 11,
        wdListNumberStyleAiueoHalfWidth = 12,
        wdListNumberStyleIrohaHalfWidth = 13,
        wdListNumberStyleArabicFullWidth = 14,
        wdListNumberStyleKanjiTraditional = 16,
        wdListNumberStyleKanjiTraditional2 = 17,
        wdListNumberStyleNumberInCircle = 18,
        wdListNumberStyleAiueo = 20,
        wdListNumberStyleIroha = 21,
        wdListNumberStyleArabicLZ = 22,
        wdListNumberStyleBullet = 23,
        wdListNumberStyleGanada = 24,
        wdListNumberStyleChosung = 25,
        wdListNumberStyleGBNum1 = 26,
        wdListNumberStyleGBNum2 = 27,
        wdListNumberStyleGBNum3 = 28,
        wdListNumberStyleGBNum4 = 29,
        wdListNumberStyleZodiac1 = 30,
        wdListNumberStyleZodiac2 = 31,
        wdListNumberStyleZodiac3 = 32,
        wdListNumberStyleTradChinNum1 = 33,
        wdListNumberStyleTradChinNum2 = 34,
        wdListNumberStyleTradChinNum3 = 35,
        wdListNumberStyleTradChinNum4 = 36,
        wdListNumberStyleSimpChinNum1 = 37,
        wdListNumberStyleSimpChinNum2 = 38,
        wdListNumberStyleSimpChinNum3 = 39,
        wdListNumberStyleSimpChinNum4 = 40,
        wdListNumberStyleHanjaRead = 41,
        wdListNumberStyleHanjaReadDigit = 42,
        wdListNumberStyleHangul = 43,
        wdListNumberStyleHanja = 44,
        wdListNumberStyleHebrew1 = 45,
        wdListNumberStyleArabic1 = 46,
        wdListNumberStyleHebrew2 = 47,
        wdListNumberStyleArabic2 = 48,
        wdListNumberStyleHindiLetter1 = 49,
        wdListNumberStyleHindiLetter2 = 50,
        wdListNumberStyleHindiArabic = 51,
        wdListNumberStyleHindiCardinalText = 52,
        wdListNumberStyleThaiLetter = 53,
        wdListNumberStyleThaiArabic = 54,
        wdListNumberStyleThaiCardinalText = 55,
        wdListNumberStyleVietCardinalText = 56,
        wdListNumberStyleLowercaseRussian = 58,
        wdListNumberStyleUppercaseRussian = 59,
        wdListNumberStylePictureBullet = 249,
        wdListNumberStyleLegal = 253,
        wdListNumberStyleLegalLZ = 254,
        wdListNumberStyleNone = 255
    } WdListNumberStyle;

    /*typedef enum {
        emptyenum = 0
    } WdListNumberStyleHID;*/

    typedef enum {
        wdNoteNumberStyleArabic = 0,
        wdNoteNumberStyleUppercaseRoman = 1,
        wdNoteNumberStyleLowercaseRoman = 2,
        wdNoteNumberStyleUppercaseLetter = 3,
        wdNoteNumberStyleLowercaseLetter = 4,
        wdNoteNumberStyleSymbol = 9,
        wdNoteNumberStyleArabicFullWidth = 14,
        wdNoteNumberStyleKanji = 10,
        wdNoteNumberStyleKanjiDigit = 11,
        wdNoteNumberStyleKanjiTraditional = 16,
        wdNoteNumberStyleNumberInCircle = 18,
        wdNoteNumberStyleHanjaRead = 41,
        wdNoteNumberStyleHanjaReadDigit = 42,
        wdNoteNumberStyleTradChinNum1 = 33,
        wdNoteNumberStyleTradChinNum2 = 34,
        wdNoteNumberStyleSimpChinNum1 = 37,
        wdNoteNumberStyleSimpChinNum2 = 38,
        wdNoteNumberStyleHebrewLetter1 = 45,
        wdNoteNumberStyleArabicLetter1 = 46,
        wdNoteNumberStyleHebrewLetter2 = 47,
        wdNoteNumberStyleArabicLetter2 = 48,
        wdNoteNumberStyleHindiLetter1 = 49,
        wdNoteNumberStyleHindiLetter2 = 50,
        wdNoteNumberStyleHindiArabic = 51,
        wdNoteNumberStyleHindiCardinalText = 52,
        wdNoteNumberStyleThaiLetter = 53,
        wdNoteNumberStyleThaiArabic = 54,
        wdNoteNumberStyleThaiCardinalText = 55,
        wdNoteNumberStyleVietCardinalText = 56
    } WdNoteNumberStyle;

    /*typedef enum {
        emptyenum = 0
    } WdNoteNumberStyleHID;*/

    typedef enum {
        wdCaptionNumberStyleArabic = 0,
        wdCaptionNumberStyleUppercaseRoman = 1,
        wdCaptionNumberStyleLowercaseRoman = 2,
        wdCaptionNumberStyleUppercaseLetter = 3,
        wdCaptionNumberStyleLowercaseLetter = 4,
        wdCaptionNumberStyleArabicFullWidth = 14,
        wdCaptionNumberStyleKanji = 10,
        wdCaptionNumberStyleKanjiDigit = 11,
        wdCaptionNumberStyleKanjiTraditional = 16,
        wdCaptionNumberStyleNumberInCircle = 18,
        wdCaptionNumberStyleGanada = 24,
        wdCaptionNumberStyleChosung = 25,
        wdCaptionNumberStyleZodiac1 = 30,
        wdCaptionNumberStyleZodiac2 = 31,
        wdCaptionNumberStyleHanjaRead = 41,
        wdCaptionNumberStyleHanjaReadDigit = 42,
        wdCaptionNumberStyleTradChinNum2 = 34,
        wdCaptionNumberStyleTradChinNum3 = 35,
        wdCaptionNumberStyleSimpChinNum2 = 38,
        wdCaptionNumberStyleSimpChinNum3 = 39,
        wdCaptionNumberStyleHebrewLetter1 = 45,
        wdCaptionNumberStyleArabicLetter1 = 46,
        wdCaptionNumberStyleHebrewLetter2 = 47,
        wdCaptionNumberStyleArabicLetter2 = 48,
        wdCaptionNumberStyleHindiLetter1 = 49,
        wdCaptionNumberStyleHindiLetter2 = 50,
        wdCaptionNumberStyleHindiArabic = 51,
        wdCaptionNumberStyleHindiCardinalText = 52,
        wdCaptionNumberStyleThaiLetter = 53,
        wdCaptionNumberStyleThaiArabic = 54,
        wdCaptionNumberStyleThaiCardinalText = 55,
        wdCaptionNumberStyleVietCardinalText = 56
    } WdCaptionNumberStyle;

    /*typedef enum {
        emptyenum = 0
    } WdCaptionNumberStyleHID;*/

    typedef enum {
        wdPageNumberStyleArabic = 0,
        wdPageNumberStyleUppercaseRoman = 1,
        wdPageNumberStyleLowercaseRoman = 2,
        wdPageNumberStyleUppercaseLetter = 3,
        wdPageNumberStyleLowercaseLetter = 4,
        wdPageNumberStyleArabicFullWidth = 14,
        wdPageNumberStyleKanji = 10,
        wdPageNumberStyleKanjiDigit = 11,
        wdPageNumberStyleKanjiTraditional = 16,
        wdPageNumberStyleNumberInCircle = 18,
        wdPageNumberStyleHanjaRead = 41,
        wdPageNumberStyleHanjaReadDigit = 42,
        wdPageNumberStyleTradChinNum1 = 33,
        wdPageNumberStyleTradChinNum2 = 34,
        wdPageNumberStyleSimpChinNum1 = 37,
        wdPageNumberStyleSimpChinNum2 = 38,
        wdPageNumberStyleHebrewLetter1 = 45,
        wdPageNumberStyleArabicLetter1 = 46,
        wdPageNumberStyleHebrewLetter2 = 47,
        wdPageNumberStyleArabicLetter2 = 48,
        wdPageNumberStyleHindiLetter1 = 49,
        wdPageNumberStyleHindiLetter2 = 50,
        wdPageNumberStyleHindiArabic = 51,
        wdPageNumberStyleHindiCardinalText = 52,
        wdPageNumberStyleThaiLetter = 53,
        wdPageNumberStyleThaiArabic = 54,
        wdPageNumberStyleThaiCardinalText = 55,
        wdPageNumberStyleVietCardinalText = 56,
        wdPageNumberStyleNumberInDash = 57
    } WdPageNumberStyle;

    /*typedef enum {
        emptyenum = 0
    } WdPageNumberStyleHID;*/

    typedef enum {
        wdStatisticWords = 0,
        wdStatisticLines = 1,
        wdStatisticPages = 2,
        wdStatisticCharacters = 3,
        wdStatisticParagraphs = 4,
        wdStatisticCharactersWithSpaces = 5,
        wdStatisticFarEastCharacters = 6
    } WdStatistic;

    /*typedef enum {
        emptyenum = 0
    } WdStatisticHID;*/

    typedef enum {
        wdPropertyTitle = 1,
        wdPropertySubject = 2,
        wdPropertyAuthor = 3,
        wdPropertyKeywords = 4,
        wdPropertyComments = 5,
        wdPropertyTemplate = 6,
        wdPropertyLastAuthor = 7,
        wdPropertyRevision = 8,
        wdPropertyAppName = 9,
        wdPropertyTimeLastPrinted = 10,
        wdPropertyTimeCreated = 11,
        wdPropertyTimeLastSaved = 12,
        wdPropertyVBATotalEdit = 13,
        wdPropertyPages = 14,
        wdPropertyWords = 15,
        wdPropertyCharacters = 16,
        wdPropertySecurity = 17,
        wdPropertyCategory = 18,
        wdPropertyFormat = 19,
        wdPropertyManager = 20,
        wdPropertyCompany = 21,
        wdPropertyBytes = 22,
        wdPropertyLines = 23,
        wdPropertyParas = 24,
        wdPropertySlides = 25,
        wdPropertyNotes = 26,
        wdPropertyHiddenSlides = 27,
        wdPropertyMMClips = 28,
        wdPropertyHyperlinkBase = 29,
        wdPropertyCharsWSpaces = 30
    } WdBuiltInProperty;

    typedef enum {
        wdLineSpaceSingle = 0,
        wdLineSpace1pt5 = 1,
        wdLineSpaceDouble = 2,
        wdLineSpaceAtLeast = 3,
        wdLineSpaceExactly = 4,
        wdLineSpaceMultiple = 5
    } WdLineSpacing;

    typedef enum {
        wdNumberParagraph = 1,
        wdNumberListNum = 2,
        wdNumberAllNumbers = 3
    } WdNumberType;

    typedef enum {
        wdListNoNumbering = 0,
        wdListListNumOnly = 1,
        wdListBullet = 2,
        wdListSimpleNumbering = 3,
        wdListOutlineNumbering = 4,
        wdListMixedNumbering = 5,
        wdListPictureBullet = 6
    } WdListType;

    typedef enum {
        wdMainTextStory = 1,
        wdFootnotesStory = 2,
        wdEndnotesStory = 3,
        wdCommentsStory = 4,
        wdTextFrameStory = 5,
        wdEvenPagesHeaderStory = 6,
        wdPrimaryHeaderStory = 7,
        wdEvenPagesFooterStory = 8,
        wdPrimaryFooterStory = 9,
        wdFirstPageHeaderStory = 10,
        wdFirstPageFooterStory = 11,
        wdFootnoteSeparatorStory = 12,
        wdFootnoteContinuationSeparatorStory = 13,
        wdFootnoteContinuationNoticeStory = 14,
        wdEndnoteSeparatorStory = 15,
        wdEndnoteContinuationSeparatorStory = 16,
        wdEndnoteContinuationNoticeStory = 17
    } WdStoryType;

    typedef enum {
        wdFormatDocument = 0,
        wdFormatTemplate = 1,
        wdFormatText = 2,
        wdFormatTextLineBreaks = 3,
        wdFormatDOSText = 4,
        wdFormatDOSTextLineBreaks = 5,
        wdFormatRTF = 6,
        wdFormatUnicodeText = 7,
        wdFormatEncodedText = 7,
        wdFormatHTML = 8,
        wdFormatWebArchive = 9,
        wdFormatFilteredHTML = 10,
        wdFormatXML = 11
    } WdSaveFormat;

    typedef enum {
        wdOpenFormatAuto = 0,
        wdOpenFormatDocument = 1,
        wdOpenFormatTemplate = 2,
        wdOpenFormatRTF = 3,
        wdOpenFormatText = 4,
        wdOpenFormatUnicodeText = 5,
        wdOpenFormatEncodedText = 5,
        wdOpenFormatAllWord = 6,
        wdOpenFormatWebPages = 7,
        wdOpenFormatXML = 8
    } WdOpenFormat;

    typedef enum {
        wdHeaderFooterPrimary = 1,
        wdHeaderFooterFirstPage = 2,
        wdHeaderFooterEvenPages = 3
    } WdHeaderFooterIndex;

    typedef enum {
        wdTOCTemplate = 0,
        wdTOCClassic = 1,
        wdTOCDistinctive = 2,
        wdTOCFancy = 3,
        wdTOCModern = 4,
        wdTOCFormal = 5,
        wdTOCSimple = 6
    } WdTocFormat;

    typedef enum {
        wdTOFTemplate = 0,
        wdTOFClassic = 1,
        wdTOFDistinctive = 2,
        wdTOFCentered = 3,
        wdTOFFormal = 4,
        wdTOFSimple = 5
    } WdTofFormat;

    typedef enum {
        wdTOATemplate = 0,
        wdTOAClassic = 1,
        wdTOADistinctive = 2,
        wdTOAFormal = 3,
        wdTOASimple = 4
    } WdToaFormat;

    typedef enum {
        wdLineStyleNone = 0,
        wdLineStyleSingle = 1,
        wdLineStyleDot = 2,
        wdLineStyleDashSmallGap = 3,
        wdLineStyleDashLargeGap = 4,
        wdLineStyleDashDot = 5,
        wdLineStyleDashDotDot = 6,
        wdLineStyleDouble = 7,
        wdLineStyleTriple = 8,
        wdLineStyleThinThickSmallGap = 9,
        wdLineStyleThickThinSmallGap = 10,
        wdLineStyleThinThickThinSmallGap = 11,
        wdLineStyleThinThickMedGap = 12,
        wdLineStyleThickThinMedGap = 13,
        wdLineStyleThinThickThinMedGap = 14,
        wdLineStyleThinThickLargeGap = 15,
        wdLineStyleThickThinLargeGap = 16,
        wdLineStyleThinThickThinLargeGap = 17,
        wdLineStyleSingleWavy = 18,
        wdLineStyleDoubleWavy = 19,
        wdLineStyleDashDotStroked = 20,
        wdLineStyleEmboss3D = 21,
        wdLineStyleEngrave3D = 22,
        wdLineStyleOutset = 23,
        wdLineStyleInset = 24
    } WdLineStyle;

    typedef enum {
        wdLineWidth025pt = 2,
        wdLineWidth050pt = 4,
        wdLineWidth075pt = 6,
        wdLineWidth100pt = 8,
        wdLineWidth150pt = 12,
        wdLineWidth225pt = 18,
        wdLineWidth300pt = 24,
        wdLineWidth450pt = 36,
        wdLineWidth600pt = 48
    } WdLineWidth;

    typedef enum {
        wdSectionBreakNextPage = 2,
        wdSectionBreakContinuous = 3,
        wdSectionBreakEvenPage = 4,
        wdSectionBreakOddPage = 5,
        wdLineBreak = 6,
        wdPageBreak = 7,
        wdColumnBreak = 8,
        wdLineBreakClearLeft = 9,
        wdLineBreakClearRight = 10,
        wdTextWrappingBreak = 11
    } WdBreakType;

    typedef enum {
        wdTabLeaderSpaces = 0,
        wdTabLeaderDots = 1,
        wdTabLeaderDashes = 2,
        wdTabLeaderLines = 3,
        wdTabLeaderHeavy = 4,
        wdTabLeaderMiddleDot = 5
    } WdTabLeader;

    /*typedef enum {
        emptyenum = 0
    } WdTabLeaderHID;*/

    typedef enum {
        wdInches = 0,
        wdCentimeters = 1,
        wdMillimeters = 2,
        wdPoints = 3,
        wdPicas = 4
    } WdMeasurementUnits;

    /*typedef enum {
        emptyenum = 0
    } WdMeasurementUnitsHID;*/

    typedef enum {
        wdDropNone = 0,
        wdDropNormal = 1,
        wdDropMargin = 2
    } WdDropPosition;

    typedef enum {
        wdRestartContinuous = 0,
        wdRestartSection = 1,
        wdRestartPage = 2
    } WdNumberingRule;

    typedef enum {
        wdBottomOfPage = 0,
        wdBeneathText = 1
    } WdFootnoteLocation;

    typedef enum {
        wdEndOfSection = 0,
        wdEndOfDocument = 1
    } WdEndnoteLocation;

    typedef enum {
        wdSortSeparateByTabs = 0,
        wdSortSeparateByCommas = 1,
        wdSortSeparateByDefaultTableSeparator = 2
    } WdSortSeparator;

    typedef enum {
        wdSeparateByParagraphs = 0,
        wdSeparateByTabs = 1,
        wdSeparateByCommas = 2,
        wdSeparateByDefaultListSeparator = 3
    } WdTableFieldSeparator;

    typedef enum {
        wdSortFieldAlphanumeric = 0,
        wdSortFieldNumeric = 1,
        wdSortFieldDate = 2,
        wdSortFieldSyllable = 3,
        wdSortFieldJapanJIS = 4,
        wdSortFieldStroke = 5,
        wdSortFieldKoreaKS = 6
    } WdSortFieldType;

    /*typedef enum {
        emptyenum = 0
    } WdSortFieldTypeHID;*/

    typedef enum {
        wdSortOrderAscending = 0,
        wdSortOrderDescending = 1
    } WdSortOrder;

    typedef enum {
        wdTableFormatNone = 0,
        wdTableFormatSimple1 = 1,
        wdTableFormatSimple2 = 2,
        wdTableFormatSimple3 = 3,
        wdTableFormatClassic1 = 4,
        wdTableFormatClassic2 = 5,
        wdTableFormatClassic3 = 6,
        wdTableFormatClassic4 = 7,
        wdTableFormatColorful1 = 8,
        wdTableFormatColorful2 = 9,
        wdTableFormatColorful3 = 10,
        wdTableFormatColumns1 = 11,
        wdTableFormatColumns2 = 12,
        wdTableFormatColumns3 = 13,
        wdTableFormatColumns4 = 14,
        wdTableFormatColumns5 = 15,
        wdTableFormatGrid1 = 16,
        wdTableFormatGrid2 = 17,
        wdTableFormatGrid3 = 18,
        wdTableFormatGrid4 = 19,
        wdTableFormatGrid5 = 20,
        wdTableFormatGrid6 = 21,
        wdTableFormatGrid7 = 22,
        wdTableFormatGrid8 = 23,
        wdTableFormatList1 = 24,
        wdTableFormatList2 = 25,
        wdTableFormatList3 = 26,
        wdTableFormatList4 = 27,
        wdTableFormatList5 = 28,
        wdTableFormatList6 = 29,
        wdTableFormatList7 = 30,
        wdTableFormatList8 = 31,
        wdTableFormat3DEffects1 = 32,
        wdTableFormat3DEffects2 = 33,
        wdTableFormat3DEffects3 = 34,
        wdTableFormatContemporary = 35,
        wdTableFormatElegant = 36,
        wdTableFormatProfessional = 37,
        wdTableFormatSubtle1 = 38,
        wdTableFormatSubtle2 = 39,
        wdTableFormatWeb1 = 40,
        wdTableFormatWeb2 = 41,
        wdTableFormatWeb3 = 42
    } WdTableFormat;

    typedef enum {
        wdTableFormatApplyBorders = 1,
        wdTableFormatApplyShading = 2,
        wdTableFormatApplyFont = 4,
        wdTableFormatApplyColor = 8,
        wdTableFormatApplyAutoFit = 16,
        wdTableFormatApplyHeadingRows = 32,
        wdTableFormatApplyLastRow = 64,
        wdTableFormatApplyFirstColumn = 128,
        wdTableFormatApplyLastColumn = 256
    } WdTableFormatApply;

    typedef enum {
        wdLanguageNone = 0,
        wdNoProofing = 1024,
        wdAfrikaans = 1078,
        wdAlbanian = 1052,
        wdAmharic = 1118,
        wdArabicAlgeria = 5121,
        wdArabicBahrain = 15361,
        wdArabicEgypt = 3073,
        wdArabicIraq = 2049,
        wdArabicJordan = 11265,
        wdArabicKuwait = 13313,
        wdArabicLebanon = 12289,
        wdArabicLibya = 4097,
        wdArabicMorocco = 6145,
        wdArabicOman = 8193,
        wdArabicQatar = 16385,
        wdArabic = 1025,
        wdArabicSyria = 10241,
        wdArabicTunisia = 7169,
        wdArabicUAE = 14337,
        wdArabicYemen = 9217,
        wdArmenian = 1067,
        wdAssamese = 1101,
        wdAzeriCyrillic = 2092,
        wdAzeriLatin = 1068,
        wdBasque = 1069,
        wdByelorussian = 1059,
        wdBengali = 1093,
        wdBulgarian = 1026,
        wdBurmese = 1109,
        wdCatalan = 1027,
        wdCherokee = 1116,
        wdChineseHongKongSAR = 3076,
        wdChineseMacaoSAR = 5124,
        wdSimplifiedChinese = 2052,
        wdChineseSingapore = 4100,
        wdTraditionalChinese = 1028,
        wdCroatian = 1050,
        wdCzech = 1029,
        wdDanish = 1030,
        wdDivehi = 1125,
        wdBelgianDutch = 2067,
        wdDutch = 1043,
        wdDzongkhaBhutan = 2129,
        wdEdo = 1126,
        wdEnglishAUS = 3081,
        wdEnglishBelize = 10249,
        wdEnglishCanadian = 4105,
        wdEnglishCaribbean = 9225,
        wdEnglishIreland = 6153,
        wdEnglishJamaica = 8201,
        wdEnglishNewZealand = 5129,
        wdEnglishPhilippines = 13321,
        wdEnglishSouthAfrica = 7177,
        wdEnglishTrinidadTobago = 11273,
        wdEnglishUK = 2057,
        wdEnglishUS = 1033,
        wdEnglishZimbabwe = 12297,
        wdEnglishIndonesia = 14345,
        wdEstonian = 1061,
        wdFaeroese = 1080,
        wdFarsi = 1065,
        wdFilipino = 1124,
        wdFinnish = 1035,
        wdFulfulde = 1127,
        wdBelgianFrench = 2060,
        wdFrenchCameroon = 11276,
        wdFrenchCanadian = 3084,
        wdFrenchCotedIvoire = 12300,
        wdFrench = 1036,
        wdFrenchLuxembourg = 5132,
        wdFrenchMali = 13324,
        wdFrenchMonaco = 6156,
        wdFrenchReunion = 8204,
        wdFrenchSenegal = 10252,
        wdFrenchMorocco = 14348,
        wdFrenchHaiti = 15372,
        wdSwissFrench = 4108,
        wdFrenchWestIndies = 7180,
        wdFrenchZaire = 9228,
        wdFrisianNetherlands = 1122,
        wdGaelicIreland = 2108,
        wdGaelicScotland = 1084,
        wdGalician = 1110,
        wdGeorgian = 1079,
        wdGermanAustria = 3079,
        wdGerman = 1031,
        wdGermanLiechtenstein = 5127,
        wdGermanLuxembourg = 4103,
        wdSwissGerman = 2055,
        wdGreek = 1032,
        wdGuarani = 1140,
        wdGujarati = 1095,
        wdHausa = 1128,
        wdHawaiian = 1141,
        wdHebrew = 1037,
        wdHindi = 1081,
        wdHungarian = 1038,
        wdIbibio = 1129,
        wdIcelandic = 1039,
        wdIgbo = 1136,
        wdIndonesian = 1057,
        wdInuktitut = 1117,
        wdItalian = 1040,
        wdSwissItalian = 2064,
        wdJapanese = 1041,
        wdKannada = 1099,
        wdKanuri = 1137,
        wdKashmiri = 1120,
        wdKazakh = 1087,
        wdKhmer = 1107,
        wdKirghiz = 1088,
        wdKonkani = 1111,
        wdKorean = 1042,
        wdKyrgyz = 1088,
        wdLao = 1108,
        wdLatin = 1142,
        wdLatvian = 1062,
        wdLithuanian = 1063,
        wdMacedonian = 1071,
        wdMalaysian = 1086,
        wdMalayBruneiDarussalam = 2110,
        wdMalayalam = 1100,
        wdMaltese = 1082,
        wdManipuri = 1112,
        wdMarathi = 1102,
        wdMongolian = 1104,
        wdNepali = 1121,
        wdNorwegianBokmol = 1044,
        wdNorwegianNynorsk = 2068,
        wdOriya = 1096,
        wdOromo = 1138,
        wdPashto = 1123,
        wdPolish = 1045,
        wdBrazilianPortuguese = 1046,
        wdPortuguese = 2070,
        wdPunjabi = 1094,
        wdRhaetoRomanic = 1047,
        wdRomanianMoldova = 2072,
        wdRomanian = 1048,
        wdRussianMoldova = 2073,
        wdRussian = 1049,
        wdSamiLappish = 1083,
        wdSanskrit = 1103,
        wdSerbianCyrillic = 3098,
        wdSerbianLatin = 2074,
        wdSinhalese = 1115,
        wdSindhi = 1113,
        wdSindhiPakistan = 2137,
        wdSlovak = 1051,
        wdSlovenian = 1060,
        wdSomali = 1143,
        wdSorbian = 1070,
        wdSpanishArgentina = 11274,
        wdSpanishBolivia = 16394,
        wdSpanishChile = 13322,
        wdSpanishColombia = 9226,
        wdSpanishCostaRica = 5130,
        wdSpanishDominicanRepublic = 7178,
        wdSpanishEcuador = 12298,
        wdSpanishElSalvador = 17418,
        wdSpanishGuatemala = 4106,
        wdSpanishHonduras = 18442,
        wdMexicanSpanish = 2058,
        wdSpanishNicaragua = 19466,
        wdSpanishPanama = 6154,
        wdSpanishParaguay = 15370,
        wdSpanishPeru = 10250,
        wdSpanishPuertoRico = 20490,
        wdSpanishModernSort = 3082,
        wdSpanish = 1034,
        wdSpanishUruguay = 14346,
        wdSpanishVenezuela = 8202,
        wdSesotho = 1072,
        wdSutu = 1072,
        wdSwahili = 1089,
        wdSwedishFinland = 2077,
        wdSwedish = 1053,
        wdSyriac = 1114,
        wdTajik = 1064,
        wdTamazight = 1119,
        wdTamazightLatin = 2143,
        wdTamil = 1097,
        wdTatar = 1092,
        wdTelugu = 1098,
        wdThai = 1054,
        wdTibetan = 1105,
        wdTigrignaEthiopic = 1139,
        wdTigrignaEritrea = 2163,
        wdTsonga = 1073,
        wdTswana = 1074,
        wdTurkish = 1055,
        wdTurkmen = 1090,
        wdUkrainian = 1058,
        wdUrdu = 1056,
        wdUzbekCyrillic = 2115,
        wdUzbekLatin = 1091,
        wdVenda = 1075,
        wdVietnamese = 1066,
        wdWelsh = 1106,
        wdXhosa = 1076,
        wdYi = 1144,
        wdYiddish = 1085,
        wdYoruba = 1130,
        wdZulu = 1077
    } WdLanguageID;

    typedef enum {
        wdFieldEmpty = 0xffffffff,
        wdFieldRef = 3,
        wdFieldIndexEntry = 4,
        wdFieldFootnoteRef = 5,
        wdFieldSet = 6,
        wdFieldIf = 7,
        wdFieldIndex = 8,
        wdFieldTOCEntry = 9,
        wdFieldStyleRef = 10,
        wdFieldRefDoc = 11,
        wdFieldSequence = 12,
        wdFieldTOC = 13,
        wdFieldInfo = 14,
        wdFieldTitle = 15,
        wdFieldSubject = 16,
        wdFieldAuthor = 17,
        wdFieldKeyWord = 18,
        wdFieldComments = 19,
        wdFieldLastSavedBy = 20,
        wdFieldCreateDate = 21,
        wdFieldSaveDate = 22,
        wdFieldPrintDate = 23,
        wdFieldRevisionNum = 24,
        wdFieldEditTime = 25,
        wdFieldNumPages = 26,
        wdFieldNumWords = 27,
        wdFieldNumChars = 28,
        wdFieldFileName = 29,
        wdFieldTemplate = 30,
        wdFieldDate = 31,
        wdFieldTime = 32,
        wdFieldPage = 33,
        wdFieldExpression = 34,
        wdFieldQuote = 35,
        wdFieldInclude = 36,
        wdFieldPageRef = 37,
        wdFieldAsk = 38,
        wdFieldFillIn = 39,
        wdFieldData = 40,
        wdFieldNext = 41,
        wdFieldNextIf = 42,
        wdFieldSkipIf = 43,
        wdFieldMergeRec = 44,
        wdFieldDDE = 45,
        wdFieldDDEAuto = 46,
        wdFieldGlossary = 47,
        wdFieldPrint = 48,
        wdFieldFormula = 49,
        wdFieldGoToButton = 50,
        wdFieldMacroButton = 51,
        wdFieldAutoNumOutline = 52,
        wdFieldAutoNumLegal = 53,
        wdFieldAutoNum = 54,
        wdFieldImport = 55,
        wdFieldLink = 56,
        wdFieldSymbol = 57,
        wdFieldEmbed = 58,
        wdFieldMergeField = 59,
        wdFieldUserName = 60,
        wdFieldUserInitials = 61,
        wdFieldUserAddress = 62,
        wdFieldBarCode = 63,
        wdFieldDocVariable = 64,
        wdFieldSection = 65,
        wdFieldSectionPages = 66,
        wdFieldIncludePicture = 67,
        wdFieldIncludeText = 68,
        wdFieldFileSize = 69,
        wdFieldFormTextInput = 70,
        wdFieldFormCheckBox = 71,
        wdFieldNoteRef = 72,
        wdFieldTOA = 73,
        wdFieldTOAEntry = 74,
        wdFieldMergeSeq = 75,
        wdFieldPrivate = 77,
        wdFieldDatabase = 78,
        wdFieldAutoText = 79,
        wdFieldCompare = 80,
        wdFieldAddin = 81,
        wdFieldSubscriber = 82,
        wdFieldFormDropDown = 83,
        wdFieldAdvance = 84,
        wdFieldDocProperty = 85,
        wdFieldOCX = 87,
        wdFieldHyperlink = 88,
        wdFieldAutoTextList = 89,
        wdFieldListNum = 90,
        wdFieldHTMLActiveX = 91,
        wdFieldBidiOutline = 92,
        wdFieldAddressBlock = 93,
        wdFieldGreetingLine = 94,
        wdFieldShape = 95
    } WdFieldType;

    typedef enum {
        wdStyleNormal = 0xffffffff,
        wdStyleEnvelopeAddress = 0xffffffdb,
        wdStyleEnvelopeReturn = 0xffffffda,
        wdStyleBodyText = 0xffffffbd,
        wdStyleHeading1 = 0xfffffffe,
        wdStyleHeading2 = 0xfffffffd,
        wdStyleHeading3 = 0xfffffffc,
        wdStyleHeading4 = 0xfffffffb,
        wdStyleHeading5 = 0xfffffffa,
        wdStyleHeading6 = 0xfffffff9,
        wdStyleHeading7 = 0xfffffff8,
        wdStyleHeading8 = 0xfffffff7,
        wdStyleHeading9 = 0xfffffff6,
        wdStyleIndex1 = 0xfffffff5,
        wdStyleIndex2 = 0xfffffff4,
        wdStyleIndex3 = 0xfffffff3,
        wdStyleIndex4 = 0xfffffff2,
        wdStyleIndex5 = 0xfffffff1,
        wdStyleIndex6 = 0xfffffff0,
        wdStyleIndex7 = 0xffffffef,
        wdStyleIndex8 = 0xffffffee,
        wdStyleIndex9 = 0xffffffed,
        wdStyleTOC1 = 0xffffffec,
        wdStyleTOC2 = 0xffffffeb,
        wdStyleTOC3 = 0xffffffea,
        wdStyleTOC4 = 0xffffffe9,
        wdStyleTOC5 = 0xffffffe8,
        wdStyleTOC6 = 0xffffffe7,
        wdStyleTOC7 = 0xffffffe6,
        wdStyleTOC8 = 0xffffffe5,
        wdStyleTOC9 = 0xffffffe4,
        wdStyleNormalIndent = 0xffffffe3,
        wdStyleFootnoteText = 0xffffffe2,
        wdStyleCommentText = 0xffffffe1,
        wdStyleHeader = 0xffffffe0,
        wdStyleFooter = 0xffffffdf,
        wdStyleIndexHeading = 0xffffffde,
        wdStyleCaption = 0xffffffdd,
        wdStyleTableOfFigures = 0xffffffdc,
        wdStyleFootnoteReference = 0xffffffd9,
        wdStyleCommentReference = 0xffffffd8,
        wdStyleLineNumber = 0xffffffd7,
        wdStylePageNumber = 0xffffffd6,
        wdStyleEndnoteReference = 0xffffffd5,
        wdStyleEndnoteText = 0xffffffd4,
        wdStyleTableOfAuthorities = 0xffffffd3,
        wdStyleMacroText = 0xffffffd2,
        wdStyleTOAHeading = 0xffffffd1,
        wdStyleList = 0xffffffd0,
        wdStyleListBullet = 0xffffffcf,
        wdStyleListNumber = 0xffffffce,
        wdStyleList2 = 0xffffffcd,
        wdStyleList3 = 0xffffffcc,
        wdStyleList4 = 0xffffffcb,
        wdStyleList5 = 0xffffffca,
        wdStyleListBullet2 = 0xffffffc9,
        wdStyleListBullet3 = 0xffffffc8,
        wdStyleListBullet4 = 0xffffffc7,
        wdStyleListBullet5 = 0xffffffc6,
        wdStyleListNumber2 = 0xffffffc5,
        wdStyleListNumber3 = 0xffffffc4,
        wdStyleListNumber4 = 0xffffffc3,
        wdStyleListNumber5 = 0xffffffc2,
        wdStyleTitle = 0xffffffc1,
        wdStyleClosing = 0xffffffc0,
        wdStyleSignature = 0xffffffbf,
        wdStyleDefaultParagraphFont = 0xffffffbe,
        wdStyleBodyTextIndent = 0xffffffbc,
        wdStyleListContinue = 0xffffffbb,
        wdStyleListContinue2 = 0xffffffba,
        wdStyleListContinue3 = 0xffffffb9,
        wdStyleListContinue4 = 0xffffffb8,
        wdStyleListContinue5 = 0xffffffb7,
        wdStyleMessageHeader = 0xffffffb6,
        wdStyleSubtitle = 0xffffffb5,
        wdStyleSalutation = 0xffffffb4,
        wdStyleDate = 0xffffffb3,
        wdStyleBodyTextFirstIndent = 0xffffffb2,
        wdStyleBodyTextFirstIndent2 = 0xffffffb1,
        wdStyleNoteHeading = 0xffffffb0,
        wdStyleBodyText2 = 0xffffffaf,
        wdStyleBodyText3 = 0xffffffae,
        wdStyleBodyTextIndent2 = 0xffffffad,
        wdStyleBodyTextIndent3 = 0xffffffac,
        wdStyleBlockQuotation = 0xffffffab,
        wdStyleHyperlink = 0xffffffaa,
        wdStyleHyperlinkFollowed = 0xffffffa9,
        wdStyleStrong = 0xffffffa8,
        wdStyleEmphasis = 0xffffffa7,
        wdStyleNavPane = 0xffffffa6,
        wdStylePlainText = 0xffffffa5,
        wdStyleHtmlNormal = 0xffffffa1,
        wdStyleHtmlAcronym = 0xffffffa0,
        wdStyleHtmlAddress = 0xffffff9f,
        wdStyleHtmlCite = 0xffffff9e,
        wdStyleHtmlCode = 0xffffff9d,
        wdStyleHtmlDfn = 0xffffff9c,
        wdStyleHtmlKbd = 0xffffff9b,
        wdStyleHtmlPre = 0xffffff9a,
        wdStyleHtmlSamp = 0xffffff99,
        wdStyleHtmlTt = 0xffffff98,
        wdStyleHtmlVar = 0xffffff97,
        wdStyleNormalTable = 0xffffff96
    } WdBuiltinStyle;

    typedef enum {
        wdDialogToolsOptionsTabView = 204,
        wdDialogToolsOptionsTabGeneral = 203,
        wdDialogToolsOptionsTabEdit = 224,
        wdDialogToolsOptionsTabPrint = 208,
        wdDialogToolsOptionsTabSave = 209,
        wdDialogToolsOptionsTabProofread = 211,
        wdDialogToolsOptionsTabTrackChanges = 386,
        wdDialogToolsOptionsTabUserInfo = 213,
        wdDialogToolsOptionsTabCompatibility = 525,
        wdDialogToolsOptionsTabTypography = 739,
        wdDialogToolsOptionsTabFileLocations = 225,
        wdDialogToolsOptionsTabFuzzy = 790,
        wdDialogToolsOptionsTabHangulHanjaConversion = 786,
        wdDialogToolsOptionsTabBidi = 1029,
        wdDialogToolsOptionsTabSecurity = 1361,
        wdDialogFilePageSetupTabMargins = 0x000249f0,
        wdDialogFilePageSetupTabPaper = 0x000249f1,
        wdDialogFilePageSetupTabLayout = 0x000249f3,
        wdDialogFilePageSetupTabCharsLines = 0x000249f4,
        wdDialogInsertSymbolTabSymbols = 0x00030d40,
        wdDialogInsertSymbolTabSpecialCharacters = 0x00030d41,
        wdDialogNoteOptionsTabAllFootnotes = 0x000493e0,
        wdDialogNoteOptionsTabAllEndnotes = 0x000493e1,
        wdDialogInsertIndexAndTablesTabIndex = 0x00061a80,
        wdDialogInsertIndexAndTablesTabTableOfContents = 0x00061a81,
        wdDialogInsertIndexAndTablesTabTableOfFigures = 0x00061a82,
        wdDialogInsertIndexAndTablesTabTableOfAuthorities = 0x00061a83,
        wdDialogOrganizerTabStyles = 0x0007a120,
        wdDialogOrganizerTabAutoText = 0x0007a121,
        wdDialogOrganizerTabCommandBars = 0x0007a122,
        wdDialogOrganizerTabMacros = 0x0007a123,
        wdDialogFormatFontTabFont = 0x000927c0,
        wdDialogFormatFontTabCharacterSpacing = 0x000927c1,
        wdDialogFormatFontTabAnimation = 0x000927c2,
        wdDialogFormatBordersAndShadingTabBorders = 0x000aae60,
        wdDialogFormatBordersAndShadingTabPageBorder = 0x000aae61,
        wdDialogFormatBordersAndShadingTabShading = 0x000aae62,
        wdDialogToolsEnvelopesAndLabelsTabEnvelopes = 0x000c3500,
        wdDialogToolsEnvelopesAndLabelsTabLabels = 0x000c3501,
        wdDialogFormatParagraphTabIndentsAndSpacing = 0x000f4240,
        wdDialogFormatParagraphTabTextFlow = 0x000f4241,
        wdDialogFormatParagraphTabTeisai = 0x000f4242,
        wdDialogFormatDrawingObjectTabColorsAndLines = 0x00124f80,
        wdDialogFormatDrawingObjectTabSize = 0x00124f81,
        wdDialogFormatDrawingObjectTabPosition = 0x00124f82,
        wdDialogFormatDrawingObjectTabWrapping = 0x00124f83,
        wdDialogFormatDrawingObjectTabPicture = 0x00124f84,
        wdDialogFormatDrawingObjectTabTextbox = 0x00124f85,
        wdDialogFormatDrawingObjectTabWeb = 0x00124f86,
        wdDialogFormatDrawingObjectTabHR = 0x00124f87,
        wdDialogToolsAutoCorrectExceptionsTabFirstLetter = 0x00155cc0,
        wdDialogToolsAutoCorrectExceptionsTabInitialCaps = 0x00155cc1,
        wdDialogToolsAutoCorrectExceptionsTabHangulAndAlphabet = 0x00155cc2,
        wdDialogToolsAutoCorrectExceptionsTabIac = 0x00155cc3,
        wdDialogFormatBulletsAndNumberingTabBulleted = 0x0016e360,
        wdDialogFormatBulletsAndNumberingTabNumbered = 0x0016e361,
        wdDialogFormatBulletsAndNumberingTabOutlineNumbered = 0x0016e362,
        wdDialogLetterWizardTabLetterFormat = 0x00186a00,
        wdDialogLetterWizardTabRecipientInfo = 0x00186a01,
        wdDialogLetterWizardTabOtherElements = 0x00186a02,
        wdDialogLetterWizardTabSenderInfo = 0x00186a03,
        wdDialogToolsAutoManagerTabAutoCorrect = 0x0019f0a0,
        wdDialogToolsAutoManagerTabAutoFormatAsYouType = 0x0019f0a1,
        wdDialogToolsAutoManagerTabAutoText = 0x0019f0a2,
        wdDialogToolsAutoManagerTabAutoFormat = 0x0019f0a3,
        wdDialogToolsAutoManagerTabSmartTags = 0x0019f0a4,
        wdDialogTablePropertiesTabTable = 0x001b7740,
        wdDialogTablePropertiesTabRow = 0x001b7741,
        wdDialogTablePropertiesTabColumn = 0x001b7742,
        wdDialogTablePropertiesTabCell = 0x001b7743,
        wdDialogEmailOptionsTabSignature = 0x001cfde0,
        wdDialogEmailOptionsTabStationary = 0x001cfde1,
        wdDialogEmailOptionsTabQuoting = 0x001cfde2,
        wdDialogWebOptionsBrowsers = 0x001e8480,
        wdDialogWebOptionsGeneral = 0x001e8480,
        wdDialogWebOptionsFiles = 0x001e8481,
        wdDialogWebOptionsPictures = 0x001e8482,
        wdDialogWebOptionsEncoding = 0x001e8483,
        wdDialogWebOptionsFonts = 0x001e8484,
        wdDialogToolsOptionsTabAcetate = 1266,
        wdDialogTemplates = 0x00200b20,
        wdDialogTemplatesXMLSchema = 0x00200b21,
        wdDialogTemplatesXMLExpansionPacks = 0x00200b22,
        wdDialogTemplatesLinkedCSS = 0x00200b23
    } WdWordDialogTab;

    typedef enum {
        wdDialogFilePageSetupTabPaperSize = 0x000249f1,
        wdDialogFilePageSetupTabPaperSource = 0x000249f2
    } WdWordDialogTabHID;

    typedef enum {
        wdDialogHelpAbout = 9,
        wdDialogHelpWordPerfectHelp = 10,
        wdDialogDocumentStatistics = 78,
        wdDialogFileNew = 79,
        wdDialogFileOpen = 80,
        wdDialogMailMergeOpenDataSource = 81,
        wdDialogMailMergeOpenHeaderSource = 82,
        wdDialogFileSaveAs = 84,
        wdDialogFileSummaryInfo = 86,
        wdDialogToolsTemplates = 87,
        wdDialogFilePrint = 88,
        wdDialogFilePrintSetup = 97,
        wdDialogFileFind = 99,
        wdDialogFormatAddrFonts = 103,
        wdDialogEditPasteSpecial = 111,
        wdDialogEditFind = 112,
        wdDialogEditReplace = 117,
        wdDialogEditStyle = 120,
        wdDialogEditLinks = 124,
        wdDialogEditObject = 125,
        wdDialogTableToText = 128,
        wdDialogTextToTable = 127,
        wdDialogTableInsertTable = 129,
        wdDialogTableInsertCells = 130,
        wdDialogTableInsertRow = 131,
        wdDialogTableDeleteCells = 133,
        wdDialogTableSplitCells = 137,
        wdDialogTableRowHeight = 142,
        wdDialogTableColumnWidth = 143,
        wdDialogToolsCustomize = 152,
        wdDialogInsertBreak = 159,
        wdDialogInsertSymbol = 162,
        wdDialogInsertPicture = 163,
        wdDialogInsertFile = 164,
        wdDialogInsertDateTime = 165,
        wdDialogInsertField = 166,
        wdDialogInsertMergeField = 167,
        wdDialogInsertBookmark = 168,
        wdDialogMarkIndexEntry = 169,
        wdDialogInsertIndex = 170,
        wdDialogInsertTableOfContents = 171,
        wdDialogInsertObject = 172,
        wdDialogToolsCreateEnvelope = 173,
        wdDialogFormatFont = 174,
        wdDialogFormatParagraph = 175,
        wdDialogFormatSectionLayout = 176,
        wdDialogFormatColumns = 177,
        wdDialogFileDocumentLayout = 178,
        wdDialogFilePageSetup = 178,
        wdDialogFormatTabs = 179,
        wdDialogFormatStyle = 180,
        wdDialogFormatDefineStyleFont = 181,
        wdDialogFormatDefineStylePara = 182,
        wdDialogFormatDefineStyleTabs = 183,
        wdDialogFormatDefineStyleFrame = 184,
        wdDialogFormatDefineStyleBorders = 185,
        wdDialogFormatDefineStyleLang = 186,
        wdDialogFormatPicture = 187,
        wdDialogToolsLanguage = 188,
        wdDialogFormatBordersAndShading = 189,
        wdDialogFormatFrame = 190,
        wdDialogToolsThesaurus = 194,
        wdDialogToolsHyphenation = 195,
        wdDialogToolsBulletsNumbers = 196,
        wdDialogToolsHighlightChanges = 197,
        wdDialogToolsRevisions = 197,
        wdDialogToolsCompareDocuments = 198,
        wdDialogTableSort = 199,
        wdDialogToolsOptionsGeneral = 203,
        wdDialogToolsOptionsView = 204,
        wdDialogToolsAdvancedSettings = 206,
        wdDialogToolsOptionsPrint = 208,
        wdDialogToolsOptionsSave = 209,
        wdDialogToolsOptionsSpellingAndGrammar = 211,
        wdDialogToolsOptionsUserInfo = 213,
        wdDialogToolsMacroRecord = 214,
        wdDialogToolsMacro = 215,
        wdDialogWindowActivate = 220,
        wdDialogFormatRetAddrFonts = 221,
        wdDialogOrganizer = 222,
        wdDialogToolsOptionsEdit = 224,
        wdDialogToolsOptionsFileLocations = 225,
        wdDialogToolsWordCount = 228,
        wdDialogControlRun = 235,
        wdDialogInsertPageNumbers = 294,
        wdDialogFormatPageNumber = 298,
        wdDialogCopyFile = 300,
        wdDialogFormatChangeCase = 322,
        wdDialogUpdateTOC = 331,
        wdDialogInsertDatabase = 341,
        wdDialogTableFormula = 348,
        wdDialogFormFieldOptions = 353,
        wdDialogInsertCaption = 357,
        wdDialogInsertCaptionNumbering = 358,
        wdDialogInsertAutoCaption = 359,
        wdDialogFormFieldHelp = 361,
        wdDialogInsertCrossReference = 367,
        wdDialogInsertFootnote = 370,
        wdDialogNoteOptions = 373,
        wdDialogToolsAutoCorrect = 378,
        wdDialogToolsOptionsTrackChanges = 386,
        wdDialogConvertObject = 392,
        wdDialogInsertAddCaption = 402,
        wdDialogConnect = 420,
        wdDialogToolsCustomizeKeyboard = 432,
        wdDialogToolsCustomizeMenus = 433,
        wdDialogToolsMergeDocuments = 435,
        wdDialogMarkTableOfContentsEntry = 442,
        wdDialogFileMacPageSetupGX = 444,
        wdDialogFilePrintOneCopy = 445,
        wdDialogEditFrame = 458,
        wdDialogMarkCitation = 463,
        wdDialogTableOfContentsOptions = 470,
        wdDialogInsertTableOfAuthorities = 471,
        wdDialogInsertTableOfFigures = 472,
        wdDialogInsertIndexAndTables = 473,
        wdDialogInsertFormField = 483,
        wdDialogFormatDropCap = 488,
        wdDialogToolsCreateLabels = 489,
        wdDialogToolsProtectDocument = 503,
        wdDialogFormatStyleGallery = 505,
        wdDialogToolsAcceptRejectChanges = 506,
        wdDialogHelpWordPerfectHelpOptions = 511,
        wdDialogToolsUnprotectDocument = 521,
        wdDialogToolsOptionsCompatibility = 525,
        wdDialogTableOfCaptionsOptions = 551,
        wdDialogTableAutoFormat = 563,
        wdDialogMailMergeFindRecord = 569,
        wdDialogReviewAfmtRevisions = 570,
        wdDialogViewZoom = 577,
        wdDialogToolsProtectSection = 578,
        wdDialogFontSubstitution = 581,
        wdDialogInsertSubdocument = 583,
        wdDialogNewToolbar = 586,
        wdDialogToolsEnvelopesAndLabels = 607,
        wdDialogFormatCallout = 610,
        wdDialogTableFormatCell = 612,
        wdDialogToolsCustomizeMenuBar = 615,
        wdDialogFileRoutingSlip = 624,
        wdDialogEditTOACategory = 625,
        wdDialogToolsManageFields = 631,
        wdDialogDrawSnapToGrid = 633,
        wdDialogDrawAlign = 634,
        wdDialogMailMergeCreateDataSource = 642,
        wdDialogMailMergeCreateHeaderSource = 643,
        wdDialogMailMerge = 676,
        wdDialogMailMergeCheck = 677,
        wdDialogMailMergeHelper = 680,
        wdDialogMailMergeQueryOptions = 681,
        wdDialogFileMacPageSetup = 685,
        wdDialogListCommands = 723,
        wdDialogEditCreatePublisher = 732,
        wdDialogEditSubscribeTo = 733,
        wdDialogEditPublishOptions = 735,
        wdDialogEditSubscribeOptions = 736,
        wdDialogFileMacCustomPageSetupGX = 737,
        wdDialogToolsOptionsTypography = 739,
        wdDialogToolsAutoCorrectExceptions = 762,
        wdDialogToolsOptionsAutoFormatAsYouType = 778,
        wdDialogMailMergeUseAddressBook = 779,
        wdDialogToolsHangulHanjaConversion = 784,
        wdDialogToolsOptionsFuzzy = 790,
        wdDialogEditGoToOld = 811,
        wdDialogInsertNumber = 812,
        wdDialogLetterWizard = 821,
        wdDialogFormatBulletsAndNumbering = 824,
        wdDialogToolsSpellingAndGrammar = 828,
        wdDialogToolsCreateDirectory = 833,
        wdDialogTableWrapping = 854,
        wdDialogFormatTheme = 855,
        wdDialogTableProperties = 861,
        wdDialogEmailOptions = 863,
        wdDialogCreateAutoText = 872,
        wdDialogToolsAutoSummarize = 874,
        wdDialogToolsGrammarSettings = 885,
        wdDialogEditGoTo = 896,
        wdDialogWebOptions = 898,
        wdDialogInsertHyperlink = 925,
        wdDialogToolsAutoManager = 915,
        wdDialogFileVersions = 945,
        wdDialogToolsOptionsAutoFormat = 959,
        wdDialogFormatDrawingObject = 960,
        wdDialogToolsOptions = 974,
        wdDialogFitText = 983,
        wdDialogEditAutoText = 985,
        wdDialogPhoneticGuide = 986,
        wdDialogToolsDictionary = 989,
        wdDialogFileSaveVersion = 1007,
        wdDialogToolsOptionsBidi = 1029,
        wdDialogFrameSetProperties = 1074,
        wdDialogTableTableOptions = 1080,
        wdDialogTableCellOptions = 1081,
        wdDialogIMESetDefault = 1094,
        wdDialogTCSCTranslator = 1156,
        wdDialogHorizontalInVertical = 1160,
        wdDialogTwoLinesInOne = 1161,
        wdDialogFormatEncloseCharacters = 1162,
        wdDialogConsistencyChecker = 1121,
        wdDialogToolsOptionsSmartTag = 1395,
        wdDialogFormatStylesCustom = 1248,
        wdDialogCSSLinks = 1261,
        wdDialogInsertWebComponent = 1324,
        wdDialogToolsOptionsEditCopyPaste = 1356,
        wdDialogToolsOptionsSecurity = 1361,
        wdDialogSearch = 1363,
        wdDialogShowRepairs = 1381,
        wdDialogMailMergeInsertAsk = 4047,
        wdDialogMailMergeInsertFillIn = 4048,
        wdDialogMailMergeInsertIf = 4049,
        wdDialogMailMergeInsertNextIf = 4053,
        wdDialogMailMergeInsertSet = 4054,
        wdDialogMailMergeInsertSkipIf = 4055,
        wdDialogMailMergeFieldMapping = 1304,
        wdDialogMailMergeInsertAddressBlock = 1305,
        wdDialogMailMergeInsertGreetingLine = 1306,
        wdDialogMailMergeInsertFields = 1307,
        wdDialogMailMergeRecipients = 1308,
        wdDialogMailMergeFindRecipient = 1326,
        wdDialogMailMergeSetDocumentType = 1339,
        wdDialogXMLElementAttributes = 1460,
        wdDialogSchemaLibrary = 1417,
        wdDialogPermission = 1469,
        wdDialogMyPermission = 1437,
        wdDialogXMLOptions = 1425,
        wdDialogFormattingRestrictions = 1427
    } WdWordDialog;

    /*typedef enum {
        emptyenum = 0
    } WdWordDialogHID;*/

    typedef enum {
        wdFieldKindNone = 0,
        wdFieldKindHot = 1,
        wdFieldKindWarm = 2,
        wdFieldKindCold = 3
    } WdFieldKind;

    typedef enum {
        wdRegularText = 0,
        wdNumberText = 1,
        wdDateText = 2,
        wdCurrentDateText = 3,
        wdCurrentTimeText = 4,
        wdCalculationText = 5
    } WdTextFormFieldType;

    typedef enum {
        wdNeverConvert = 0,
        wdAlwaysConvert = 1,
        wdAskToNotConvert = 2,
        wdAskToConvert = 3
    } WdChevronConvertRule;

    typedef enum {
        wdNotAMergeDocument = 0xffffffff,
        wdFormLetters = 0,
        wdMailingLabels = 1,
        wdEnvelopes = 2,
        wdCatalog = 3,
        wdEMail = 4,
        wdFax = 5,
        wdDirectory = 3
    } WdMailMergeMainDocType;

    typedef enum {
        wdNormalDocument = 0,
        wdMainDocumentOnly = 1,
        wdMainAndDataSource = 2,
        wdMainAndHeader = 3,
        wdMainAndSourceAndHeader = 4,
        wdDataSource = 5
    } WdMailMergeState;

    typedef enum {
        wdSendToNewDocument = 0,
        wdSendToPrinter = 1,
        wdSendToEmail = 2,
        wdSendToFax = 3
    } WdMailMergeDestination;

    typedef enum {
        wdNoActiveRecord = 0xffffffff,
        wdNextRecord = 0xfffffffe,
        wdPreviousRecord = 0xfffffffd,
        wdFirstRecord = 0xfffffffc,
        wdLastRecord = 0xfffffffb,
        wdFirstDataSourceRecord = 0xfffffffa,
        wdLastDataSourceRecord = 0xfffffff9,
        wdNextDataSourceRecord = 0xfffffff8,
        wdPreviousDataSourceRecord = 0xfffffff7
    } WdMailMergeActiveRecord;

    typedef enum {
        wdDefaultFirstRecord = 1,
        wdDefaultLastRecord = 0xfffffff0
    } WdMailMergeDefaultRecord;

    typedef enum {
        wdNoMergeInfo = 0xffffffff,
        wdMergeInfoFromWord = 0,
        wdMergeInfoFromAccessDDE = 1,
        wdMergeInfoFromExcelDDE = 2,
        wdMergeInfoFromMSQueryDDE = 3,
        wdMergeInfoFromODBC = 4,
        wdMergeInfoFromODSO = 5
    } WdMailMergeDataSource;

    typedef enum {
        wdMergeIfEqual = 0,
        wdMergeIfNotEqual = 1,
        wdMergeIfLessThan = 2,
        wdMergeIfGreaterThan = 3,
        wdMergeIfLessThanOrEqual = 4,
        wdMergeIfGreaterThanOrEqual = 5,
        wdMergeIfIsBlank = 6,
        wdMergeIfIsNotBlank = 7
    } WdMailMergeComparison;

    typedef enum {
        wdSortByName = 0,
        wdSortByLocation = 1
    } WdBookmarkSortBy;

    typedef enum {
        wdWindowStateNormal = 0,
        wdWindowStateMaximize = 1,
        wdWindowStateMinimize = 2
    } WdWindowState;

    typedef enum {
        wdLinkNone = 0,
        wdLinkDataInDoc = 1,
        wdLinkDataOnDisk = 2
    } WdPictureLinkType;

    typedef enum {
        wdLinkTypeOLE = 0,
        wdLinkTypePicture = 1,
        wdLinkTypeText = 2,
        wdLinkTypeReference = 3,
        wdLinkTypeInclude = 4,
        wdLinkTypeImport = 5,
        wdLinkTypeDDE = 6,
        wdLinkTypeDDEAuto = 7
    } WdLinkType;

    typedef enum {
        wdWindowDocument = 0,
        wdWindowTemplate = 1
    } WdWindowType;

    typedef enum {
        wdNormalView = 1,
        wdOutlineView = 2,
        wdPrintView = 3,
        wdPrintPreview = 4,
        wdMasterView = 5,
        wdWebView = 6,
        wdReadingView = 7
    } WdViewType;

    typedef enum {
        wdSeekMainDocument = 0,
        wdSeekPrimaryHeader = 1,
        wdSeekFirstPageHeader = 2,
        wdSeekEvenPagesHeader = 3,
        wdSeekPrimaryFooter = 4,
        wdSeekFirstPageFooter = 5,
        wdSeekEvenPagesFooter = 6,
        wdSeekFootnotes = 7,
        wdSeekEndnotes = 8,
        wdSeekCurrentPageHeader = 9,
        wdSeekCurrentPageFooter = 10
    } WdSeekView;

    typedef enum {
        wdPaneNone = 0,
        wdPanePrimaryHeader = 1,
        wdPaneFirstPageHeader = 2,
        wdPaneEvenPagesHeader = 3,
        wdPanePrimaryFooter = 4,
        wdPaneFirstPageFooter = 5,
        wdPaneEvenPagesFooter = 6,
        wdPaneFootnotes = 7,
        wdPaneEndnotes = 8,
        wdPaneFootnoteContinuationNotice = 9,
        wdPaneFootnoteContinuationSeparator = 10,
        wdPaneFootnoteSeparator = 11,
        wdPaneEndnoteContinuationNotice = 12,
        wdPaneEndnoteContinuationSeparator = 13,
        wdPaneEndnoteSeparator = 14,
        wdPaneComments = 15,
        wdPaneCurrentPageHeader = 16,
        wdPaneCurrentPageFooter = 17,
        wdPaneRevisions = 18
    } WdSpecialPane;

    typedef enum {
        wdPageFitNone = 0,
        wdPageFitFullPage = 1,
        wdPageFitBestFit = 2,
        wdPageFitTextFit = 3
    } WdPageFit;

    typedef enum {
        wdBrowsePage = 1,
        wdBrowseSection = 2,
        wdBrowseComment = 3,
        wdBrowseFootnote = 4,
        wdBrowseEndnote = 5,
        wdBrowseField = 6,
        wdBrowseTable = 7,
        wdBrowseGraphic = 8,
        wdBrowseHeading = 9,
        wdBrowseEdit = 10,
        wdBrowseFind = 11,
        wdBrowseGoTo = 12
    } WdBrowseTarget;

    typedef enum {
        wdPrinterDefaultBin = 0,
        wdPrinterUpperBin = 1,
        wdPrinterOnlyBin = 1,
        wdPrinterLowerBin = 2,
        wdPrinterMiddleBin = 3,
        wdPrinterManualFeed = 4,
        wdPrinterEnvelopeFeed = 5,
        wdPrinterManualEnvelopeFeed = 6,
        wdPrinterAutomaticSheetFeed = 7,
        wdPrinterTractorFeed = 8,
        wdPrinterSmallFormatBin = 9,
        wdPrinterLargeFormatBin = 10,
        wdPrinterLargeCapacityBin = 11,
        wdPrinterPaperCassette = 14,
        wdPrinterFormSource = 15
    } WdPaperTray;

    typedef enum {
        wdOrientPortrait = 0,
        wdOrientLandscape = 1
    } WdOrientation;

    typedef enum {
        wdNoSelection = 0,
        wdSelectionIP = 1,
        wdSelectionNormal = 2,
        wdSelectionFrame = 3,
        wdSelectionColumn = 4,
        wdSelectionRow = 5,
        wdSelectionBlock = 6,
        wdSelectionInlineShape = 7,
        wdSelectionShape = 8
    } WdSelectionType;

    typedef enum {
        wdCaptionFigure = 0xffffffff,
        wdCaptionTable = 0xfffffffe,
        wdCaptionEquation = 0xfffffffd
    } WdCaptionLabelID;

    typedef enum {
        wdRefTypeNumberedItem = 0,
        wdRefTypeHeading = 1,
        wdRefTypeBookmark = 2,
        wdRefTypeFootnote = 3,
        wdRefTypeEndnote = 4
    } WdReferenceType;

    typedef enum {
        wdContentText = 0xffffffff,
        wdNumberRelativeContext = 0xfffffffe,
        wdNumberNoContext = 0xfffffffd,
        wdNumberFullContext = 0xfffffffc,
        wdEntireCaption = 2,
        wdOnlyLabelAndNumber = 3,
        wdOnlyCaptionText = 4,
        wdFootnoteNumber = 5,
        wdEndnoteNumber = 6,
        wdPageNumber = 7,
        wdPosition = 15,
        wdFootnoteNumberFormatted = 16,
        wdEndnoteNumberFormatted = 17
    } WdReferenceKind;

    typedef enum {
        wdIndexTemplate = 0,
        wdIndexClassic = 1,
        wdIndexFancy = 2,
        wdIndexModern = 3,
        wdIndexBulleted = 4,
        wdIndexFormal = 5,
        wdIndexSimple = 6
    } WdIndexFormat;

    typedef enum {
        wdIndexIndent = 0,
        wdIndexRunin = 1
    } WdIndexType;

    typedef enum {
        wdWrapNever = 0,
        wdWrapAlways = 1,
        wdWrapAsk = 2
    } WdRevisionsWrap;

    typedef enum {
        wdNoRevision = 0,
        wdRevisionInsert = 1,
        wdRevisionDelete = 2,
        wdRevisionProperty = 3,
        wdRevisionParagraphNumber = 4,
        wdRevisionDisplayField = 5,
        wdRevisionReconcile = 6,
        wdRevisionConflict = 7,
        wdRevisionStyle = 8,
        wdRevisionReplace = 9,
        wdRevisionParagraphProperty = 10,
        wdRevisionTableProperty = 11,
        wdRevisionSectionProperty = 12,
        wdRevisionStyleDefinition = 13
    } WdRevisionType;

    typedef enum {
        wdOneAfterAnother = 0,
        wdAllAtOnce = 1
    } WdRoutingSlipDelivery;

    typedef enum {
        wdNotYetRouted = 0,
        wdRouteInProgress = 1,
        wdRouteComplete = 2
    } WdRoutingSlipStatus;

    typedef enum {
        wdSectionContinuous = 0,
        wdSectionNewColumn = 1,
        wdSectionNewPage = 2,
        wdSectionEvenPage = 3,
        wdSectionOddPage = 4
    } WdSectionStart;

    typedef enum {
        wdDoNotSaveChanges = 0,
        wdSaveChanges = 0xffffffff,
        wdPromptToSaveChanges = 0xfffffffe
    } WdSaveOptions;

    typedef enum {
        wdDocumentNotSpecified = 0,
        wdDocumentLetter = 1,
        wdDocumentEmail = 2
    } WdDocumentKind;

    typedef enum {
        wdTypeDocument = 0,
        wdTypeTemplate = 1,
        wdTypeFrameset = 2
    } WdDocumentType;

    typedef enum {
        wdWordDocument = 0,
        wdOriginalDocumentFormat = 1,
        wdPromptUser = 2
    } WdOriginalFormat;

    typedef enum {
        wdRelocateUp = 0,
        wdRelocateDown = 1
    } WdRelocate;

    typedef enum {
        wdInsertedTextMarkNone = 0,
        wdInsertedTextMarkBold = 1,
        wdInsertedTextMarkItalic = 2,
        wdInsertedTextMarkUnderline = 3,
        wdInsertedTextMarkDoubleUnderline = 4,
        wdInsertedTextMarkColorOnly = 5,
        wdInsertedTextMarkStrikeThrough = 6
    } WdInsertedTextMark;

    typedef enum {
        wdRevisedLinesMarkNone = 0,
        wdRevisedLinesMarkLeftBorder = 1,
        wdRevisedLinesMarkRightBorder = 2,
        wdRevisedLinesMarkOutsideBorder = 3
    } WdRevisedLinesMark;

    typedef enum {
        wdDeletedTextMarkHidden = 0,
        wdDeletedTextMarkStrikeThrough = 1,
        wdDeletedTextMarkCaret = 2,
        wdDeletedTextMarkPound = 3,
        wdDeletedTextMarkNone = 4,
        wdDeletedTextMarkBold = 5,
        wdDeletedTextMarkItalic = 6,
        wdDeletedTextMarkUnderline = 7,
        wdDeletedTextMarkDoubleUnderline = 8,
        wdDeletedTextMarkColorOnly = 9
    } WdDeletedTextMark;

    typedef enum {
        wdRevisedPropertiesMarkNone = 0,
        wdRevisedPropertiesMarkBold = 1,
        wdRevisedPropertiesMarkItalic = 2,
        wdRevisedPropertiesMarkUnderline = 3,
        wdRevisedPropertiesMarkDoubleUnderline = 4,
        wdRevisedPropertiesMarkColorOnly = 5,
        wdRevisedPropertiesMarkStrikeThrough = 6
    } WdRevisedPropertiesMark;

    typedef enum {
        wdFieldShadingNever = 0,
        wdFieldShadingAlways = 1,
        wdFieldShadingWhenSelected = 2
    } WdFieldShading;

    typedef enum {
        wdDocumentsPath = 0,
        wdPicturesPath = 1,
        wdUserTemplatesPath = 2,
        wdWorkgroupTemplatesPath = 3,
        wdUserOptionsPath = 4,
        wdAutoRecoverPath = 5,
        wdToolsPath = 6,
        wdTutorialPath = 7,
        wdStartupPath = 8,
        wdProgramPath = 9,
        wdGraphicsFiltersPath = 10,
        wdTextConvertersPath = 11,
        wdProofingToolsPath = 12,
        wdTempFilePath = 13,
        wdCurrentFolderPath = 14,
        wdStyleGalleryPath = 15,
        wdBorderArtPath = 19
    } WdDefaultFilePath;

    typedef enum {
        wdNoTabHangIndent = 1,
        wdNoSpaceRaiseLower = 2,
        wdPrintColBlack = 3,
        wdWrapTrailSpaces = 4,
        wdNoColumnBalance = 5,
        wdConvMailMergeEsc = 6,
        wdSuppressSpBfAfterPgBrk = 7,
        wdSuppressTopSpacing = 8,
        wdOrigWordTableRules = 9,
        wdTransparentMetafiles = 10,
        wdShowBreaksInFrames = 11,
        wdSwapBordersFacingPages = 12,
        wdLeaveBackslashAlone = 13,
        wdExpandShiftReturn = 14,
        wdDontULTrailSpace = 15,
        wdDontBalanceSingleByteDoubleByteWidth = 16,
        wdSuppressTopSpacingMac5 = 17,
        wdSpacingInWholePoints = 18,
        wdPrintBodyTextBeforeHeader = 19,
        wdNoLeading = 20,
        wdNoSpaceForUL = 21,
        wdMWSmallCaps = 22,
        wdNoExtraLineSpacing = 23,
        wdTruncateFontHeight = 24,
        wdSubFontBySize = 25,
        wdUsePrinterMetrics = 26,
        wdWW6BorderRules = 27,
        wdExactOnTop = 28,
        wdSuppressBottomSpacing = 29,
        wdWPSpaceWidth = 30,
        wdWPJustification = 31,
        wdLineWrapLikeWord6 = 32,
        wdShapeLayoutLikeWW8 = 33,
        wdFootnoteLayoutLikeWW8 = 34,
        wdDontUseHTMLParagraphAutoSpacing = 35,
        wdDontAdjustLineHeightInTable = 36,
        wdForgetLastTabAlignment = 37,
        wdAutospaceLikeWW7 = 38,
        wdAlignTablesRowByRow = 39,
        wdLayoutRawTableWidth = 40,
        wdLayoutTableRowsApart = 41,
        wdUseWord97LineBreakingRules = 42,
        wdDontBreakWrappedTables = 43,
        wdDontSnapTextToGridInTableWithObjects = 44,
        wdSelectFieldWithFirstOrLastCharacter = 45,
        wdApplyBreakingRules = 46,
        wdDontWrapTextWithPunctuation = 47,
        wdDontUseAsianBreakRulesInGrid = 48,
        wdUseWord2002TableStyleRules = 49,
        wdGrowAutofit = 50
    } WdCompatibility;

    typedef enum {
        wdPaper10x14 = 0,
        wdPaper11x17 = 1,
        wdPaperLetter = 2,
        wdPaperLetterSmall = 3,
        wdPaperLegal = 4,
        wdPaperExecutive = 5,
        wdPaperA3 = 6,
        wdPaperA4 = 7,
        wdPaperA4Small = 8,
        wdPaperA5 = 9,
        wdPaperB4 = 10,
        wdPaperB5 = 11,
        wdPaperCSheet = 12,
        wdPaperDSheet = 13,
        wdPaperESheet = 14,
        wdPaperFanfoldLegalGerman = 15,
        wdPaperFanfoldStdGerman = 16,
        wdPaperFanfoldUS = 17,
        wdPaperFolio = 18,
        wdPaperLedger = 19,
        wdPaperNote = 20,
        wdPaperQuarto = 21,
        wdPaperStatement = 22,
        wdPaperTabloid = 23,
        wdPaperEnvelope9 = 24,
        wdPaperEnvelope10 = 25,
        wdPaperEnvelope11 = 26,
        wdPaperEnvelope12 = 27,
        wdPaperEnvelope14 = 28,
        wdPaperEnvelopeB4 = 29,
        wdPaperEnvelopeB5 = 30,
        wdPaperEnvelopeB6 = 31,
        wdPaperEnvelopeC3 = 32,
        wdPaperEnvelopeC4 = 33,
        wdPaperEnvelopeC5 = 34,
        wdPaperEnvelopeC6 = 35,
        wdPaperEnvelopeC65 = 36,
        wdPaperEnvelopeDL = 37,
        wdPaperEnvelopeItaly = 38,
        wdPaperEnvelopeMonarch = 39,
        wdPaperEnvelopePersonal = 40,
        wdPaperCustom = 41
    } WdPaperSize;

    typedef enum {
        wdCustomLabelLetter = 0,
        wdCustomLabelLetterLS = 1,
        wdCustomLabelA4 = 2,
        wdCustomLabelA4LS = 3,
        wdCustomLabelA5 = 4,
        wdCustomLabelA5LS = 5,
        wdCustomLabelB5 = 6,
        wdCustomLabelMini = 7,
        wdCustomLabelFanfold = 8,
        wdCustomLabelVertHalfSheet = 9,
        wdCustomLabelVertHalfSheetLS = 10,
        wdCustomLabelHigaki = 11,
        wdCustomLabelHigakiLS = 12,
        wdCustomLabelB4JIS = 13
    } WdCustomLabelPageSize;

    typedef enum {
        wdNoProtection = 0xffffffff,
        wdAllowOnlyRevisions = 0,
        wdAllowOnlyComments = 1,
        wdAllowOnlyFormFields = 2,
        wdAllowOnlyReading = 3
    } WdProtectionType;

    typedef enum {
        wdAdjective = 0,
        wdNoun = 1,
        wdAdverb = 2,
        wdVerb = 3,
        wdPronoun = 4,
        wdConjunction = 5,
        wdPreposition = 6,
        wdInterjection = 7,
        wdIdiom = 8,
        wdOther = 9
    } WdPartOfSpeech;

    typedef enum {
        wdSubscriberBestFormat = 0,
        wdSubscriberRTF = 1,
        wdSubscriberText = 2,
        wdSubscriberPict = 4
    } WdSubscriberFormats;

    typedef enum {
        wdPublisher = 0,
        wdSubscriber = 1
    } WdEditionType;

    typedef enum {
        wdCancelPublisher = 0,
        wdSendPublisher = 1,
        wdSelectPublisher = 2,
        wdAutomaticUpdate = 3,
        wdManualUpdate = 4,
        wdChangeAttributes = 5,
        wdUpdateSubscriber = 6,
        wdOpenSource = 7
    } WdEditionOption;

    typedef enum {
        wdRelativeHorizontalPositionMargin = 0,
        wdRelativeHorizontalPositionPage = 1,
        wdRelativeHorizontalPositionColumn = 2,
        wdRelativeHorizontalPositionCharacter = 3
    } WdRelativeHorizontalPosition;

    typedef enum {
        wdRelativeVerticalPositionMargin = 0,
        wdRelativeVerticalPositionPage = 1,
        wdRelativeVerticalPositionParagraph = 2,
        wdRelativeVerticalPositionLine = 3
    } WdRelativeVerticalPosition;

    typedef enum {
        wdHelp = 0,
        wdHelpAbout = 1,
        wdHelpActiveWindow = 2,
        wdHelpContents = 3,
        wdHelpExamplesAndDemos = 4,
        wdHelpIndex = 5,
        wdHelpKeyboard = 6,
        wdHelpPSSHelp = 7,
        wdHelpQuickPreview = 8,
        wdHelpSearch = 9,
        wdHelpUsingHelp = 10,
        wdHelpIchitaro = 11,
        wdHelpPE2 = 12,
        wdHelpHWP = 13
    } WdHelpType;

    /*typedef enum {
        emptyenum = 0
    } WdHelpTypeHID;*/

    typedef enum {
        wdKeyCategoryNil = 0xffffffff,
        wdKeyCategoryDisable = 0,
        wdKeyCategoryCommand = 1,
        wdKeyCategoryMacro = 2,
        wdKeyCategoryFont = 3,
        wdKeyCategoryAutoText = 4,
        wdKeyCategoryStyle = 5,
        wdKeyCategorySymbol = 6,
        wdKeyCategoryPrefix = 7
    } WdKeyCategory;

    typedef enum {
        wdNoKey = 255,
        wdKeyShift = 256,
        wdKeyControl = 512,
        wdKeyCommand = 512,
        wdKeyAlt = 1024,
        wdKeyOption = 1024,
        wdKeyA = 65,
        wdKeyB = 66,
        wdKeyC = 67,
        wdKeyD = 68,
        wdKeyE = 69,
        wdKeyF = 70,
        wdKeyG = 71,
        wdKeyH = 72,
        wdKeyI = 73,
        wdKeyJ = 74,
        wdKeyK = 75,
        wdKeyL = 76,
        wdKeyM = 77,
        wdKeyN = 78,
        wdKeyO = 79,
        wdKeyP = 80,
        wdKeyQ = 81,
        wdKeyR = 82,
        wdKeyS = 83,
        wdKeyT = 84,
        wdKeyU = 85,
        wdKeyV = 86,
        wdKeyW = 87,
        wdKeyX = 88,
        wdKeyY = 89,
        wdKeyZ = 90,
        wdKey0 = 48,
        wdKey1 = 49,
        wdKey2 = 50,
        wdKey3 = 51,
        wdKey4 = 52,
        wdKey5 = 53,
        wdKey6 = 54,
        wdKey7 = 55,
        wdKey8 = 56,
        wdKey9 = 57,
        wdKeyBackspace = 8,
        wdKeyTab = 9,
        wdKeyNumeric5Special = 12,
        wdKeyReturn = 13,
        wdKeyPause = 19,
        wdKeyEsc = 27,
        wdKeySpacebar = 32,
        wdKeyPageUp = 33,
        wdKeyPageDown = 34,
        wdKeyEnd = 35,
        wdKeyHome = 36,
        wdKeyInsert = 45,
        wdKeyDelete = 46,
        wdKeyNumeric0 = 96,
        wdKeyNumeric1 = 97,
        wdKeyNumeric2 = 98,
        wdKeyNumeric3 = 99,
        wdKeyNumeric4 = 100,
        wdKeyNumeric5 = 101,
        wdKeyNumeric6 = 102,
        wdKeyNumeric7 = 103,
        wdKeyNumeric8 = 104,
        wdKeyNumeric9 = 105,
        wdKeyNumericMultiply = 106,
        wdKeyNumericAdd = 107,
        wdKeyNumericSubtract = 109,
        wdKeyNumericDecimal = 110,
        wdKeyNumericDivide = 111,
        wdKeyF1 = 112,
        wdKeyF2 = 113,
        wdKeyF3 = 114,
        wdKeyF4 = 115,
        wdKeyF5 = 116,
        wdKeyF6 = 117,
        wdKeyF7 = 118,
        wdKeyF8 = 119,
        wdKeyF9 = 120,
        wdKeyF10 = 121,
        wdKeyF11 = 122,
        wdKeyF12 = 123,
        wdKeyF13 = 124,
        wdKeyF14 = 125,
        wdKeyF15 = 126,
        wdKeyF16 = 127,
        wdKeyScrollLock = 145,
        wdKeySemiColon = 186,
        wdKeyEquals = 187,
        wdKeyComma = 188,
        wdKeyHyphen = 189,
        wdKeyPeriod = 190,
        wdKeySlash = 191,
        wdKeyBackSingleQuote = 192,
        wdKeyOpenSquareBrace = 219,
        wdKeyBackSlash = 220,
        wdKeyCloseSquareBrace = 221,
        wdKeySingleQuote = 222
    } WdKey;

    typedef enum {
        wdOLELink = 0,
        wdOLEEmbed = 1,
        wdOLEControl = 2
    } WdOLEType;

    typedef enum {
        wdOLEVerbPrimary = 0,
        wdOLEVerbShow = 0xffffffff,
        wdOLEVerbOpen = 0xfffffffe,
        wdOLEVerbHide = 0xfffffffd,
        wdOLEVerbUIActivate = 0xfffffffc,
        wdOLEVerbInPlaceActivate = 0xfffffffb,
        wdOLEVerbDiscardUndoState = 0xfffffffa
    } WdOLEVerb;

    typedef enum {
        wdInLine = 0,
        wdFloatOverText = 1
    } WdOLEPlacement;

    typedef enum {
        wdLeftPortrait = 0,
        wdCenterPortrait = 1,
        wdRightPortrait = 2,
        wdLeftLandscape = 3,
        wdCenterLandscape = 4,
        wdRightLandscape = 5,
        wdLeftClockwise = 6,
        wdCenterClockwise = 7,
        wdRightClockwise = 8
    } WdEnvelopeOrientation;

    typedef enum {
        wdFullBlock = 0,
        wdModifiedBlock = 1,
        wdSemiBlock = 2
    } WdLetterStyle;

    typedef enum {
        wdLetterTop = 0,
        wdLetterBottom = 1,
        wdLetterLeft = 2,
        wdLetterRight = 3
    } WdLetterheadLocation;

    typedef enum {
        wdSalutationInformal = 0,
        wdSalutationFormal = 1,
        wdSalutationBusiness = 2,
        wdSalutationOther = 3
    } WdSalutationType;

    typedef enum {
        wdGenderFemale = 0,
        wdGenderMale = 1,
        wdGenderNeutral = 2,
        wdGenderUnknown = 3
    } WdSalutationGender;

    typedef enum {
        wdMove = 0,
        wdExtend = 1
    } WdMovementType;

    typedef enum {
        wdUndefined = 0x0098967f,
        wdToggle = 0x0098967e,
        wdForward = 0x3fffffff,
        wdBackward = 0xc0000001,
        wdAutoPosition = 0,
        wdFirst = 1,
        wdCreatorCode = 0x4d535744
    } WdConstants;

    typedef enum {
        wdPasteOLEObject = 0,
        wdPasteRTF = 1,
        wdPasteText = 2,
        wdPasteMetafilePicture = 3,
        wdPasteBitmap = 4,
        wdPasteDeviceIndependentBitmap = 5,
        wdPasteHyperlink = 7,
        wdPasteShape = 8,
        wdPasteEnhancedMetafile = 9,
        wdPasteHTML = 10
    } WdPasteDataType;

    typedef enum {
        wdPrintDocumentContent = 0,
        wdPrintProperties = 1,
        wdPrintComments = 2,
        wdPrintMarkup = 2,
        wdPrintStyles = 3,
        wdPrintAutoTextEntries = 4,
        wdPrintKeyAssignments = 5,
        wdPrintEnvelope = 6,
        wdPrintDocumentWithMarkup = 7
    } WdPrintOutItem;

    typedef enum {
        wdPrintAllPages = 0,
        wdPrintOddPagesOnly = 1,
        wdPrintEvenPagesOnly = 2
    } WdPrintOutPages;

    typedef enum {
        wdPrintAllDocument = 0,
        wdPrintSelection = 1,
        wdPrintCurrentPage = 2,
        wdPrintFromTo = 3,
        wdPrintRangeOfPages = 4
    } WdPrintOutRange;

    typedef enum {
        wdSpelling = 0,
        wdGrammar = 1,
        wdThesaurus = 2,
        wdHyphenation = 3,
        wdSpellingComplete = 4,
        wdSpellingCustom = 5,
        wdSpellingLegal = 6,
        wdSpellingMedical = 7,
        wdHangulHanjaConversion = 8,
        wdHangulHanjaConversionCustom = 9
    } WdDictionaryType;

    /*typedef enum {
        emptyenum = 0
    } WdDictionaryTypeHID;*/

    typedef enum {
        wdSpellword = 0,
        wdWildcard = 1,
        wdAnagram = 2
    } WdSpellingWordType;

    typedef enum {
        wdSpellingCorrect = 0,
        wdSpellingNotInDictionary = 1,
        wdSpellingCapitalization = 2
    } WdSpellingErrorType;

    typedef enum {
        wdSpellingError = 0,
        wdGrammaticalError = 1
    } WdProofreadingErrorType;

    typedef enum {
        wdInlineShapeEmbeddedOLEObject = 1,
        wdInlineShapeLinkedOLEObject = 2,
        wdInlineShapePicture = 3,
        wdInlineShapeLinkedPicture = 4,
        wdInlineShapeOLEControlObject = 5,
        wdInlineShapeHorizontalLine = 6,
        wdInlineShapePictureHorizontalLine = 7,
        wdInlineShapeLinkedPictureHorizontalLine = 8,
        wdInlineShapePictureBullet = 9,
        wdInlineShapeScriptAnchor = 10,
        wdInlineShapeOWSAnchor = 11
    } WdInlineShapeType;

    typedef enum {
        wdTiled = 0,
        wdIcons = 1
    } WdArrangeStyle;

    typedef enum {
        wdSelStartActive = 1,
        wdSelAtEOL = 2,
        wdSelOvertype = 4,
        wdSelActive = 8,
        wdSelReplace = 16
    } WdSelectionFlags;

    typedef enum {
        wdAutoVersionOff = 0,
        wdAutoVersionOnClose = 1
    } WdAutoVersions;

    typedef enum {
        wdOrganizerObjectStyles = 0,
        wdOrganizerObjectAutoText = 1,
        wdOrganizerObjectCommandBars = 2,
        wdOrganizerObjectProjectItems = 3
    } WdOrganizerObject;

    typedef enum {
        wdMatchParagraphMark = 0x0001000f,
        wdMatchTabCharacter = 9,
        wdMatchCommentMark = 5,
        wdMatchAnyCharacter = 0x0001003f,
        wdMatchAnyDigit = 0x0001001f,
        wdMatchAnyLetter = 0x0001002f,
        wdMatchCaretCharacter = 11,
        wdMatchColumnBreak = 14,
        wdMatchEmDash = 8212,
        wdMatchEnDash = 8211,
        wdMatchEndnoteMark = 0x00010013,
        wdMatchField = 19,
        wdMatchFootnoteMark = 0x00010012,
        wdMatchGraphic = 1,
        wdMatchManualLineBreak = 0x0001000f,
        wdMatchManualPageBreak = 0x0001001c,
        wdMatchNonbreakingHyphen = 30,
        wdMatchNonbreakingSpace = 160,
        wdMatchOptionalHyphen = 31,
        wdMatchSectionBreak = 0x0001002c,
        wdMatchWhiteSpace = 0x00010077
    } WdFindMatch;

    typedef enum {
        wdFindStop = 0,
        wdFindContinue = 1,
        wdFindAsk = 2
    } WdFindWrap;

    typedef enum {
        wdActiveEndAdjustedPageNumber = 1,
        wdActiveEndSectionNumber = 2,
        wdActiveEndPageNumber = 3,
        wdNumberOfPagesInDocument = 4,
        wdHorizontalPositionRelativeToPage = 5,
        wdVerticalPositionRelativeToPage = 6,
        wdHorizontalPositionRelativeToTextBoundary = 7,
        wdVerticalPositionRelativeToTextBoundary = 8,
        wdFirstCharacterColumnNumber = 9,
        wdFirstCharacterLineNumber = 10,
        wdFrameIsSelected = 11,
        wdWithInTable = 12,
        wdStartOfRangeRowNumber = 13,
        wdEndOfRangeRowNumber = 14,
        wdMaximumNumberOfRows = 15,
        wdStartOfRangeColumnNumber = 16,
        wdEndOfRangeColumnNumber = 17,
        wdMaximumNumberOfColumns = 18,
        wdZoomPercentage = 19,
        wdSelectionMode = 20,
        wdCapsLock = 21,
        wdNumLock = 22,
        wdOverType = 23,
        wdRevisionMarking = 24,
        wdInFootnoteEndnotePane = 25,
        wdInCommentPane = 26,
        wdInHeaderFooter = 28,
        wdAtEndOfRowMarker = 31,
        wdReferenceOfType = 32,
        wdHeaderFooterType = 33,
        wdInMasterDocument = 34,
        wdInFootnote = 35,
        wdInEndnote = 36,
        wdInWordMail = 37,
        wdInClipboard = 38
    } WdInformation;

    typedef enum {
        wdWrapSquare = 0,
        wdWrapTight = 1,
        wdWrapThrough = 2,
        wdWrapNone = 3,
        wdWrapTopBottom = 4,
        wdWrapInline = 7
    } WdWrapType;

    typedef enum {
        wdWrapBoth = 0,
        wdWrapLeft = 1,
        wdWrapRight = 2,
        wdWrapLargest = 3
    } WdWrapSideType;

    typedef enum {
        wdOutlineLevel1 = 1,
        wdOutlineLevel2 = 2,
        wdOutlineLevel3 = 3,
        wdOutlineLevel4 = 4,
        wdOutlineLevel5 = 5,
        wdOutlineLevel6 = 6,
        wdOutlineLevel7 = 7,
        wdOutlineLevel8 = 8,
        wdOutlineLevel9 = 9,
        wdOutlineLevelBodyText = 10
    } WdOutlineLevel;

    typedef enum {
        wdTextOrientationHorizontal = 0,
        wdTextOrientationUpward = 2,
        wdTextOrientationDownward = 3,
        wdTextOrientationVerticalFarEast = 1,
        wdTextOrientationHorizontalRotatedFarEast = 4
    } WdTextOrientation;

    /*typedef enum {
        emptyenum = 0
    } WdTextOrientationHID;*/

    typedef enum {
        wdArtApples = 1,
        wdArtMapleMuffins = 2,
        wdArtCakeSlice = 3,
        wdArtCandyCorn = 4,
        wdArtIceCreamCones = 5,
        wdArtChampagneBottle = 6,
        wdArtPartyGlass = 7,
        wdArtChristmasTree = 8,
        wdArtTrees = 9,
        wdArtPalmsColor = 10,
        wdArtBalloons3Colors = 11,
        wdArtBalloonsHotAir = 12,
        wdArtPartyFavor = 13,
        wdArtConfettiStreamers = 14,
        wdArtHearts = 15,
        wdArtHeartBalloon = 16,
        wdArtStars3D = 17,
        wdArtStarsShadowed = 18,
        wdArtStars = 19,
        wdArtSun = 20,
        wdArtEarth2 = 21,
        wdArtEarth1 = 22,
        wdArtPeopleHats = 23,
        wdArtSombrero = 24,
        wdArtPencils = 25,
        wdArtPackages = 26,
        wdArtClocks = 27,
        wdArtFirecrackers = 28,
        wdArtRings = 29,
        wdArtMapPins = 30,
        wdArtConfetti = 31,
        wdArtCreaturesButterfly = 32,
        wdArtCreaturesLadyBug = 33,
        wdArtCreaturesFish = 34,
        wdArtBirdsFlight = 35,
        wdArtScaredCat = 36,
        wdArtBats = 37,
        wdArtFlowersRoses = 38,
        wdArtFlowersRedRose = 39,
        wdArtPoinsettias = 40,
        wdArtHolly = 41,
        wdArtFlowersTiny = 42,
        wdArtFlowersPansy = 43,
        wdArtFlowersModern2 = 44,
        wdArtFlowersModern1 = 45,
        wdArtWhiteFlowers = 46,
        wdArtVine = 47,
        wdArtFlowersDaisies = 48,
        wdArtFlowersBlockPrint = 49,
        wdArtDecoArchColor = 50,
        wdArtFans = 51,
        wdArtFilm = 52,
        wdArtLightning1 = 53,
        wdArtCompass = 54,
        wdArtDoubleD = 55,
        wdArtClassicalWave = 56,
        wdArtShadowedSquares = 57,
        wdArtTwistedLines1 = 58,
        wdArtWaveline = 59,
        wdArtQuadrants = 60,
        wdArtCheckedBarColor = 61,
        wdArtSwirligig = 62,
        wdArtPushPinNote1 = 63,
        wdArtPushPinNote2 = 64,
        wdArtPumpkin1 = 65,
        wdArtEggsBlack = 66,
        wdArtCup = 67,
        wdArtHeartGray = 68,
        wdArtGingerbreadMan = 69,
        wdArtBabyPacifier = 70,
        wdArtBabyRattle = 71,
        wdArtCabins = 72,
        wdArtHouseFunky = 73,
        wdArtStarsBlack = 74,
        wdArtSnowflakes = 75,
        wdArtSnowflakeFancy = 76,
        wdArtSkyrocket = 77,
        wdArtSeattle = 78,
        wdArtMusicNotes = 79,
        wdArtPalmsBlack = 80,
        wdArtMapleLeaf = 81,
        wdArtPaperClips = 82,
        wdArtShorebirdTracks = 83,
        wdArtPeople = 84,
        wdArtPeopleWaving = 85,
        wdArtEclipsingSquares2 = 86,
        wdArtHypnotic = 87,
        wdArtDiamondsGray = 88,
        wdArtDecoArch = 89,
        wdArtDecoBlocks = 90,
        wdArtCirclesLines = 91,
        wdArtPapyrus = 92,
        wdArtWoodwork = 93,
        wdArtWeavingBraid = 94,
        wdArtWeavingRibbon = 95,
        wdArtWeavingAngles = 96,
        wdArtArchedScallops = 97,
        wdArtSafari = 98,
        wdArtCelticKnotwork = 99,
        wdArtCrazyMaze = 100,
        wdArtEclipsingSquares1 = 101,
        wdArtBirds = 102,
        wdArtFlowersTeacup = 103,
        wdArtNorthwest = 104,
        wdArtSouthwest = 105,
        wdArtTribal6 = 106,
        wdArtTribal4 = 107,
        wdArtTribal3 = 108,
        wdArtTribal2 = 109,
        wdArtTribal5 = 110,
        wdArtXIllusions = 111,
        wdArtZanyTriangles = 112,
        wdArtPyramids = 113,
        wdArtPyramidsAbove = 114,
        wdArtConfettiGrays = 115,
        wdArtConfettiOutline = 116,
        wdArtConfettiWhite = 117,
        wdArtMosaic = 118,
        wdArtLightning2 = 119,
        wdArtHeebieJeebies = 120,
        wdArtLightBulb = 121,
        wdArtGradient = 122,
        wdArtTriangleParty = 123,
        wdArtTwistedLines2 = 124,
        wdArtMoons = 125,
        wdArtOvals = 126,
        wdArtDoubleDiamonds = 127,
        wdArtChainLink = 128,
        wdArtTriangles = 129,
        wdArtTribal1 = 130,
        wdArtMarqueeToothed = 131,
        wdArtSharksTeeth = 132,
        wdArtSawtooth = 133,
        wdArtSawtoothGray = 134,
        wdArtPostageStamp = 135,
        wdArtWeavingStrips = 136,
        wdArtZigZag = 137,
        wdArtCrossStitch = 138,
        wdArtGems = 139,
        wdArtCirclesRectangles = 140,
        wdArtCornerTriangles = 141,
        wdArtCreaturesInsects = 142,
        wdArtZigZagStitch = 143,
        wdArtCheckered = 144,
        wdArtCheckedBarBlack = 145,
        wdArtMarquee = 146,
        wdArtBasicWhiteDots = 147,
        wdArtBasicWideMidline = 148,
        wdArtBasicWideOutline = 149,
        wdArtBasicWideInline = 150,
        wdArtBasicThinLines = 151,
        wdArtBasicWhiteDashes = 152,
        wdArtBasicWhiteSquares = 153,
        wdArtBasicBlackSquares = 154,
        wdArtBasicBlackDashes = 155,
        wdArtBasicBlackDots = 156,
        wdArtStarsTop = 157,
        wdArtCertificateBanner = 158,
        wdArtHandmade1 = 159,
        wdArtHandmade2 = 160,
        wdArtTornPaper = 161,
        wdArtTornPaperBlack = 162,
        wdArtCouponCutoutDashes = 163,
        wdArtCouponCutoutDots = 164
    } WdPageBorderArt;

    typedef enum {
        wdBorderDistanceFromText = 0,
        wdBorderDistanceFromPageEdge = 1
    } WdBorderDistanceFrom;

    typedef enum {
        wdReplaceNone = 0,
        wdReplaceOne = 1,
        wdReplaceAll = 2
    } WdReplace;

    typedef enum {
        wdFontBiasDontCare = 255,
        wdFontBiasDefault = 0,
        wdFontBiasFareast = 1
    } WdFontBias;

	typedef enum {
        wdBrowserLevelV4 = 0,
        wdBrowserLevelMicrosoftInternetExplorer5 = 1,
        wdBrowserLevelMicrosoftInternetExplorer6 = 2
    } WdBrowserLevel;

    typedef enum {
        wdEnclosureCircle = 0,
        wdEnclosureSquare = 1,
        wdEnclosureTriangle = 2,
        wdEnclosureDiamond = 3
    } WdEnclosureType;

    typedef enum {
        wdEncloseStyleNone = 0,
        wdEncloseStyleSmall = 1,
        wdEncloseStyleLarge = 2
    } WdEncloseStyle;

    typedef enum {
        wdHighAnsiIsFarEast = 0,
        wdHighAnsiIsHighAnsi = 1,
        wdAutoDetectHighAnsiFarEast = 2
    } WdHighAnsiText;

    typedef enum {
        wdLayoutModeDefault = 0,
        wdLayoutModeGrid = 1,
        wdLayoutModeLineGrid = 2,
        wdLayoutModeGenko = 3
    } WdLayoutMode;

    typedef enum {
        wdEmailMessage = 0,
        wdDocument = 1,
        wdWebPage = 2
    } WdDocumentMedium;

    typedef enum {
        wdPriorityNormal = 1,
        wdPriorityLow = 2,
        wdPriorityHigh = 3
    } WdMailerPriority;

    typedef enum {
        wdDocumentViewRtl = 0,
        wdDocumentViewLtr = 1
    } WdDocumentViewDirection;

    typedef enum {
        wdNumeralArabic = 0,
        wdNumeralHindi = 1,
        wdNumeralContext = 2,
        wdNumeralSystem = 3
    } WdArabicNumeral;

    typedef enum {
        wdMonthNamesArabic = 0,
        wdMonthNamesEnglish = 1,
        wdMonthNamesFrench = 2
    } WdMonthNames;

    typedef enum {
        wdCursorMovementLogical = 0,
        wdCursorMovementVisual = 1
    } WdCursorMovement;

    typedef enum {
        wdVisualSelectionBlock = 0,
        wdVisualSelectionContinuous = 1
    } WdVisualSelection;

    typedef enum {
        wdTableDirectionRtl = 0,
        wdTableDirectionLtr = 1
    } WdTableDirection;

    typedef enum {
        wdFlowLtr = 0,
        wdFlowRtl = 1
    } WdFlowDirection;

    typedef enum {
        wdDiacriticColorBidi = 0,
        wdDiacriticColorLatin = 1
    } WdDiacriticColor;

    typedef enum {
        wdGutterPosLeft = 0,
        wdGutterPosTop = 1,
        wdGutterPosRight = 2
    } WdGutterStyle;

    typedef enum {
        wdGutterStyleLatin = 0xfffffff6,
        wdGutterStyleBidi = 2
    } WdGutterStyleOld;

    typedef enum {
        wdSectionDirectionRtl = 0,
        wdSectionDirectionLtr = 1
    } WdSectionDirection;

    typedef enum {
        wdDateLanguageBidi = 10,
        wdDateLanguageLatin = 1033
    } WdDateLanguage;

    typedef enum {
        wdCalendarTypeBidi = 99,
        wdCalendarTypeGregorian = 100
    } WdCalendarTypeBi;

    typedef enum {
        wdCalendarWestern = 0,
        wdCalendarArabic = 1,
        wdCalendarHebrew = 2,
        wdCalendarChina = 3,
        wdCalendarJapan = 4,
        wdCalendarThai = 5,
        wdCalendarKorean = 6,
        wdCalendarSakaEra = 7
    } WdCalendarType;

    typedef enum {
        wdReadingOrderRtl = 0,
        wdReadingOrderLtr = 1
    } WdReadingOrder;

    typedef enum {
        wdFullScript = 0,
        wdPartialScript = 1,
        wdMixedScript = 2,
        wdMixedAuthorizedScript = 3
    } WdHebSpellStart;

    typedef enum {
        wdNone = 0,
        wdInitialAlef = 1,
        wdFinalYaa = 2,
        wdBoth = 3
    } WdAraSpeller;

    typedef enum {
        wdColorAutomatic = 0xff000000,
        wdColorBlack = 0,
        wdColorBlue = 0x00ff0000,
        wdColorTurquoise = 0x00ffff00,
        wdColorBrightGreen = 65280,
        wdColorPink = 0x00ff00ff,
        wdColorRed = 255,
        wdColorYellow = 65535,
        wdColorWhite = 0x00ffffff,
        wdColorDarkBlue = 0x00800000,
        wdColorTeal = 0x00808000,
        wdColorGreen = 32768,
        wdColorViolet = 0x00800080,
        wdColorDarkRed = 128,
        wdColorDarkYellow = 32896,
        wdColorBrown = 13209,
        wdColorOliveGreen = 13107,
        wdColorDarkGreen = 13056,
        wdColorDarkTeal = 0x00663300,
        wdColorIndigo = 0x00993333,
        wdColorOrange = 26367,
        wdColorBlueGray = 0x00996666,
        wdColorLightOrange = 39423,
        wdColorLime = 52377,
        wdColorSeaGreen = 0x00669933,
        wdColorAqua = 0x00cccc33,
        wdColorLightBlue = 0x00ff6633,
        wdColorGold = 52479,
        wdColorSkyBlue = 0x00ffcc00,
        wdColorPlum = 0x00663399,
        wdColorRose = 0x00cc99ff,
        wdColorTan = 0x0099ccff,
        wdColorLightYellow = 0x0099ffff,
        wdColorLightGreen = 0x00ccffcc,
        wdColorLightTurquoise = 0x00ffffcc,
        wdColorPaleBlue = 0x00ffcc99,
        wdColorLavender = 0x00ff99cc,
        wdColorGray05 = 0x00f3f3f3,
        wdColorGray10 = 0x00e6e6e6,
        wdColorGray125 = 0x00e0e0e0,
        wdColorGray15 = 0x00d9d9d9,
        wdColorGray20 = 0x00cccccc,
        wdColorGray25 = 0x00c0c0c0,
        wdColorGray30 = 0x00b3b3b3,
        wdColorGray35 = 0x00a6a6a6,
        wdColorGray375 = 0x00a0a0a0,
        wdColorGray40 = 0x00999999,
        wdColorGray45 = 0x008c8c8c,
        wdColorGray50 = 0x00808080,
        wdColorGray55 = 0x00737373,
        wdColorGray60 = 0x00666666,
        wdColorGray625 = 0x00606060,
        wdColorGray65 = 0x00595959,
        wdColorGray70 = 0x004c4c4c,
        wdColorGray75 = 0x00404040,
        wdColorGray80 = 0x00333333,
        wdColorGray85 = 0x00262626,
        wdColorGray875 = 0x00202020,
        wdColorGray90 = 0x00191919,
        wdColorGray95 = 0x000c0c0c
    } WdColor;

    typedef enum {
        wdShapeTop = 0xfff0bdc1,
        wdShapeLeft = 0xfff0bdc2,
        wdShapeBottom = 0xfff0bdc3,
        wdShapeRight = 0xfff0bdc4,
        wdShapeCenter = 0xfff0bdc5,
        wdShapeInside = 0xfff0bdc6,
        wdShapeOutside = 0xfff0bdc7
    } WdShapePosition;

    typedef enum {
        wdTableTop = 0xfff0bdc1,
        wdTableLeft = 0xfff0bdc2,
        wdTableBottom = 0xfff0bdc3,
        wdTableRight = 0xfff0bdc4,
        wdTableCenter = 0xfff0bdc5,
        wdTableInside = 0xfff0bdc6,
        wdTableOutside = 0xfff0bdc7
    } WdTablePosition;

    typedef enum {
        wdWord8ListBehavior = 0,
        wdWord9ListBehavior = 1,
        wdWord10ListBehavior = 2
    } WdDefaultListBehavior;

    typedef enum {
        wdWord8TableBehavior = 0,
        wdWord9TableBehavior = 1
    } WdDefaultTableBehavior;

    typedef enum {
        wdAutoFitFixed = 0,
        wdAutoFitContent = 1,
        wdAutoFitWindow = 2
    } WdAutoFitBehavior;

    typedef enum {
        wdPreferredWidthAuto = 1,
        wdPreferredWidthPercent = 2,
        wdPreferredWidthPoints = 3
    } WdPreferredWidthType;

    typedef enum {
        wdLineBreakJapanese = 1041,
        wdLineBreakKorean = 1042,
        wdLineBreakSimplifiedChinese = 2052,
        wdLineBreakTraditionalChinese = 1028
    } WdFarEastLineBreakLanguageID;

    typedef enum {
        wdPageView = 3,
        wdOnlineView = 6
    } WdViewTypeOld;

    typedef enum {
        wdFramesetTypeFrameset = 0,
        wdFramesetTypeFrame = 1
    } WdFramesetType;

    typedef enum {
        wdFramesetSizeTypePercent = 0,
        wdFramesetSizeTypeFixed = 1,
        wdFramesetSizeTypeRelative = 2
    } WdFramesetSizeType;

    typedef enum {
        wdFramesetNewFrameAbove = 0,
        wdFramesetNewFrameBelow = 1,
        wdFramesetNewFrameRight = 2,
        wdFramesetNewFrameLeft = 3
    } WdFramesetNewFrameLocation;

    typedef enum {
        wdScrollbarTypeAuto = 0,
        wdScrollbarTypeYes = 1,
        wdScrollbarTypeNo = 2
    } WdScrollbarType;

    typedef enum {
        wdTwoLinesInOneNone = 0,
        wdTwoLinesInOneNoBrackets = 1,
        wdTwoLinesInOneParentheses = 2,
        wdTwoLinesInOneSquareBrackets = 3,
        wdTwoLinesInOneAngleBrackets = 4,
        wdTwoLinesInOneCurlyBrackets = 5
    } WdTwoLinesInOneType;

    typedef enum {
        wdHorizontalInVerticalNone = 0,
        wdHorizontalInVerticalFitInLine = 1,
        wdHorizontalInVerticalResizeLine = 2
    } WdHorizontalInVerticalType;

    typedef enum {
        wdHorizontalLineAlignLeft = 0,
        wdHorizontalLineAlignCenter = 1,
        wdHorizontalLineAlignRight = 2
    } WdHorizontalLineAlignment;

    typedef enum {
        wdHorizontalLinePercentWidth = 0xffffffff,
        wdHorizontalLineFixedWidth = 0xfffffffe
    } WdHorizontalLineWidthType;

    typedef enum {
        wdPhoneticGuideAlignmentCenter = 0,
        wdPhoneticGuideAlignmentZeroOneZero = 1,
        wdPhoneticGuideAlignmentOneTwoOne = 2,
        wdPhoneticGuideAlignmentLeft = 3,
        wdPhoneticGuideAlignmentRight = 4,
        wdPhoneticGuideAlignmentRightVertical = 5
    } WdPhoneticGuideAlignmentType;

    typedef enum {
        wdNewBlankDocument = 0,
        wdNewWebPage = 1,
        wdNewEmailMessage = 2,
        wdNewFrameset = 3,
        wdNewXMLDocument = 4
    } WdNewDocumentType;

    typedef enum {
        wdKanaKatakana = 8,
        wdKanaHiragana = 9
    } WdKana;

    typedef enum {
        wdWidthHalfWidth = 6,
        wdWidthFullWidth = 7
    } WdCharacterWidth;

    typedef enum {
        wdListNumberStyleBidi1 = 49,
        wdListNumberStyleBidi2 = 50,
        wdCaptionNumberStyleBidiLetter1 = 49,
        wdCaptionNumberStyleBidiLetter2 = 50,
        wdNoteNumberStyleBidiLetter1 = 49,
        wdNoteNumberStyleBidiLetter2 = 50,
        wdPageNumberStyleBidiLetter1 = 49,
        wdPageNumberStyleBidiLetter2 = 50
    } WdNumberStyleWordBasicBiDi;

    typedef enum {
        wdTCSCConverterDirectionSCTC = 0,
        wdTCSCConverterDirectionTCSC = 1,
        wdTCSCConverterDirectionAuto = 2
    } WdTCSCConverterDirection;

	typedef enum {
        wd70 = 0,
        wd70FE = 1,
        wd80 = 2
    } WdDisableFeaturesIntroducedAfter;

    typedef enum {
        wdWrapMergeInline = 0,
        wdWrapMergeSquare = 1,
        wdWrapMergeTight = 2,
        wdWrapMergeBehind = 3,
        wdWrapMergeFront = 4,
        wdWrapMergeThrough = 5,
        wdWrapMergeTopBottom = 6
    } WdWrapTypeMerged;

    typedef enum {
        wdPasteDefault = 0,
        wdSingleCellText = 5,
        wdSingleCellTable = 6,
        wdListContinueNumbering = 7,
        wdListRestartNumbering = 8,
        wdTableInsertAsRows = 11,
        wdTableAppendTable = 10,
        wdTableOriginalFormatting = 12,
        wdChartPicture = 13,
        wdChart = 14,
        wdChartLinked = 15,
        wdFormatOriginalFormatting = 16,
        wdFormatSurroundingFormattingWithEmphasis = 20,
        wdFormatPlainText = 22,
        wdTableOverwriteCells = 23,
        wdListCombineWithExistingList = 24,
        wdListDontMerge = 25
    } WdRecoveryType;

    typedef enum {
        wdCRLF = 0,
        wdCROnly = 1,
        wdLFOnly = 2,
        wdLFCR = 3,
        wdLSPS = 4
    } WdLineEndingType;

    typedef enum {
        wdStyleSheetLinkTypeLinked = 0,
        wdStyleSheetLinkTypeImported = 1
    } WdStyleSheetLinkType;

    typedef enum {
        wdStyleSheetPrecedenceHigher = 0xffffffff,
        wdStyleSheetPrecedenceLower = 0xfffffffe,
        wdStyleSheetPrecedenceHighest = 1,
        wdStyleSheetPrecedenceLowest = 0
    } WdStyleSheetPrecedence;

    typedef enum {
        wdEmailHTMLFidelityLow = 1,
        wdEmailHTMLFidelityMedium = 2,
        wdEmailHTMLFidelityHigh = 3
    } WdEmailHTMLFidelity;

    typedef enum {
        wdMailFormatPlainText = 0,
        wdMailFormatHTML = 1
    } WdMailMergeMailFormat;

    typedef enum {
        wdUniqueIdentifier = 1,
        wdCourtesyTitle = 2,
        wdFirstName = 3,
        wdMiddleName = 4,
        wdLastName = 5,
        wdSuffix = 6,
        wdNickname = 7,
        wdJobTitle = 8,
        wdCompany = 9,
        wdAddress1 = 10,
        wdAddress2 = 11,
        wdCity = 12,
        wdState = 13,
        wdPostalCode = 14,
        wdCountryRegion = 15,
        wdBusinessPhone = 16,
        wdBusinessFax = 17,
        wdHomePhone = 18,
        wdHomeFax = 19,
        wdEmailAddress = 20,
        wdWebPageURL = 21,
        wdSpouseCourtesyTitle = 22,
        wdSpouseFirstName = 23,
        wdSpouseMiddleName = 24,
        wdSpouseLastName = 25,
        wdSpouseNickname = 26,
        wdRubyFirstName = 27,
        wdRubyLastName = 28,
        wdAddress3 = 29,
        wdDepartment = 30
    } WdMappedDataFields;

    typedef enum {
        wdFirstRow = 0,
        wdLastRow = 1,
        wdOddRowBanding = 2,
        wdEvenRowBanding = 3,
        wdFirstColumn = 4,
        wdLastColumn = 5,
        wdOddColumnBanding = 6,
        wdEvenColumnBanding = 7,
        wdNECell = 8,
        wdNWCell = 9,
        wdSECell = 10,
        wdSWCell = 11
    } WdConditionCode;

    typedef enum {
        wdCompareTargetSelected = 0,
        wdCompareTargetCurrent = 1,
        wdCompareTargetNew = 2
    } WdCompareTarget;

    typedef enum {
        wdMergeTargetSelected = 0,
        wdMergeTargetCurrent = 1,
        wdMergeTargetNew = 2
    } WdMergeTarget;

    typedef enum {
        wdFormattingFromCurrent = 0,
        wdFormattingFromSelected = 1,
        wdFormattingFromPrompt = 2
    } WdUseFormattingFrom;

    typedef enum {
        wdRevisionsViewFinal = 0,
        wdRevisionsViewOriginal = 1
    } WdRevisionsView;

    typedef enum {
        wdBalloonRevisions = 0,
        wdInLineRevisions = 1,
        wdMixedRevisions = 2
    } WdRevisionsMode;

    typedef enum {
        wdBalloonWidthPercent = 0,
        wdBalloonWidthPoints = 1
    } WdRevisionsBalloonWidthType;

    typedef enum {
        wdBalloonPrintOrientationAuto = 0,
        wdBalloonPrintOrientationPreserve = 1,
        wdBalloonPrintOrientationForceLandscape = 2
    } WdRevisionsBalloonPrintOrientation;

    typedef enum {
        wdLeftMargin = 0,
        wdRightMargin = 1
    } WdRevisionsBalloonMargin;

    typedef enum {
        wdTaskPaneFormatting = 0,
        wdTaskPaneRevealFormatting = 1,
        wdTaskPaneMailMerge = 2,
        wdTaskPaneTranslate = 3,
        wdTaskPaneSearch = 4,
        wdTaskPaneXMLStructure = 5,
        wdTaskPaneDocumentProtection = 6,
        wdTaskPaneDocumentActions = 7,
        wdTaskPaneSharedWorkspace = 8,
        wdTaskPaneHelp = 9,
        wdTaskPaneResearch = 10,
        wdTaskPaneFaxService = 11,
        wdTaskPaneXMLDocument = 12,
        wdTaskPaneDocumentUpdates = 13
    } WdTaskPanes;

    typedef enum {
        wdShowFilterStylesAvailable = 0,
        wdShowFilterStylesInUse = 1,
        wdShowFilterStylesAll = 2,
        wdShowFilterFormattingInUse = 3,
        wdShowFilterFormattingAvailable = 4
    } WdShowFilter;

    typedef enum {
        wdMergeSubTypeOther = 0,
        wdMergeSubTypeAccess = 1,
        wdMergeSubTypeOAL = 2,
        wdMergeSubTypeOLEDBWord = 3,
        wdMergeSubTypeWorks = 4,
        wdMergeSubTypeOLEDBText = 5,
        wdMergeSubTypeOutlook = 6,
        wdMergeSubTypeWord = 7,
        wdMergeSubTypeWord2000 = 8
    } WdMergeSubType;

    typedef enum {
        wdLeftToRight = 0,
        wdRightToLeft = 1
    } WdDocumentDirection;

    typedef enum {
        wdChineseHongKong = 3076,
        wdChineseMacao = 5124,
        wdEnglishTrinidad = 11273
    } WdLanguageID2000;

	/*typedef enum {
        msoFeatureInstallNone = 0,
        msoFeatureInstallOnDemand = 1,
        msoFeatureInstallOnDemandWithUI = 2
    } MsoFeatureInstall;*/

	typedef enum {
        msoAutomationSecurityLow = 1,
        msoAutomationSecurityByUI = 2,
        msoAutomationSecurityForceDisable = 3
    } MsoAutomationSecurity;

	/*typedef enum {
        msoFileDialogOpen = 1,
        msoFileDialogSaveAs = 2,
        msoFileDialogFilePicker = 3,
        msoFileDialogFolderPicker = 4
    } MsoFileDialogType;

	typedef enum {
        msoEncodingThai = 874,
        msoEncodingJapaneseShiftJIS = 932,
        msoEncodingSimplifiedChineseGBK = 936,
        msoEncodingKorean = 949,
        msoEncodingTraditionalChineseBig5 = 950,
        msoEncodingUnicodeLittleEndian = 1200,
        msoEncodingUnicodeBigEndian = 1201,
        msoEncodingCentralEuropean = 1250,
        msoEncodingCyrillic = 1251,
        msoEncodingWestern = 1252,
        msoEncodingGreek = 1253,
        msoEncodingTurkish = 1254,
        msoEncodingHebrew = 1255,
        msoEncodingArabic = 1256,
        msoEncodingBaltic = 1257,
        msoEncodingVietnamese = 1258,
        msoEncodingAutoDetect = 50001,
        msoEncodingJapaneseAutoDetect = 50932,
        msoEncodingSimplifiedChineseAutoDetect = 50936,
        msoEncodingKoreanAutoDetect = 50949,
        msoEncodingTraditionalChineseAutoDetect = 50950,
        msoEncodingCyrillicAutoDetect = 51251,
        msoEncodingGreekAutoDetect = 51253,
        msoEncodingArabicAutoDetect = 51256,
        msoEncodingISO88591Latin1 = 28591,
        msoEncodingISO88592CentralEurope = 28592,
        msoEncodingISO88593Latin3 = 28593,
        msoEncodingISO88594Baltic = 28594,
        msoEncodingISO88595Cyrillic = 28595,
        msoEncodingISO88596Arabic = 28596,
        msoEncodingISO88597Greek = 28597,
        msoEncodingISO88598Hebrew = 28598,
        msoEncodingISO88599Turkish = 28599,
        msoEncodingISO885915Latin9 = 28605,
        msoEncodingISO88598HebrewLogical = 38598,
        msoEncodingISO2022JPNoHalfwidthKatakana = 50220,
        msoEncodingISO2022JPJISX02021984 = 50221,
        msoEncodingISO2022JPJISX02011989 = 50222,
        msoEncodingISO2022KR = 50225,
        msoEncodingISO2022CNTraditionalChinese = 50227,
        msoEncodingISO2022CNSimplifiedChinese = 50229,
        msoEncodingMacRoman = 10000,
        msoEncodingMacJapanese = 10001,
        msoEncodingMacTraditionalChineseBig5 = 10002,
        msoEncodingMacKorean = 10003,
        msoEncodingMacArabic = 10004,
        msoEncodingMacHebrew = 10005,
        msoEncodingMacGreek1 = 10006,
        msoEncodingMacCyrillic = 10007,
        msoEncodingMacSimplifiedChineseGB2312 = 10008,
        msoEncodingMacRomania = 10010,
        msoEncodingMacUkraine = 10017,
        msoEncodingMacLatin2 = 10029,
        msoEncodingMacIcelandic = 10079,
        msoEncodingMacTurkish = 10081,
        msoEncodingMacCroatia = 10082,
        msoEncodingEBCDICUSCanada = 37,
        msoEncodingEBCDICInternational = 500,
        msoEncodingEBCDICMultilingualROECELatin2 = 870,
        msoEncodingEBCDICGreekModern = 875,
        msoEncodingEBCDICTurkishLatin5 = 1026,
        msoEncodingEBCDICGermany = 20273,
        msoEncodingEBCDICDenmarkNorway = 20277,
        msoEncodingEBCDICFinlandSweden = 20278,
        msoEncodingEBCDICItaly = 20280,
        msoEncodingEBCDICLatinAmericaSpain = 20284,
        msoEncodingEBCDICUnitedKingdom = 20285,
        msoEncodingEBCDICJapaneseKatakanaExtended = 20290,
        msoEncodingEBCDICFrance = 20297,
        msoEncodingEBCDICArabic = 20420,
        msoEncodingEBCDICGreek = 20423,
        msoEncodingEBCDICHebrew = 20424,
        msoEncodingEBCDICKoreanExtended = 20833,
        msoEncodingEBCDICThai = 20838,
        msoEncodingEBCDICIcelandic = 20871,
        msoEncodingEBCDICTurkish = 20905,
        msoEncodingEBCDICRussian = 20880,
        msoEncodingEBCDICSerbianBulgarian = 21025,
        msoEncodingEBCDICJapaneseKatakanaExtendedAndJapanese = 50930,
        msoEncodingEBCDICUSCanadaAndJapanese = 50931,
        msoEncodingEBCDICKoreanExtendedAndKorean = 50933,
        msoEncodingEBCDICSimplifiedChineseExtendedAndSimplifiedChinese = 50935,
        msoEncodingEBCDICUSCanadaAndTraditionalChinese = 50937,
        msoEncodingEBCDICJapaneseLatinExtendedAndJapanese = 50939,
        msoEncodingOEMUnitedStates = 437,
        msoEncodingOEMGreek437G = 737,
        msoEncodingOEMBaltic = 775,
        msoEncodingOEMMultilingualLatinI = 850,
        msoEncodingOEMMultilingualLatinII = 852,
        msoEncodingOEMCyrillic = 855,
        msoEncodingOEMTurkish = 857,
        msoEncodingOEMPortuguese = 860,
        msoEncodingOEMIcelandic = 861,
        msoEncodingOEMHebrew = 862,
        msoEncodingOEMCanadianFrench = 863,
        msoEncodingOEMArabic = 864,
        msoEncodingOEMNordic = 865,
        msoEncodingOEMCyrillicII = 866,
        msoEncodingOEMModernGreek = 869,
        msoEncodingEUCJapanese = 51932,
        msoEncodingEUCChineseSimplifiedChinese = 51936,
        msoEncodingEUCKorean = 51949,
        msoEncodingEUCTaiwaneseTraditionalChinese = 51950,
        msoEncodingISCIIDevanagari = 57002,
        msoEncodingISCIIBengali = 57003,
        msoEncodingISCIITamil = 57004,
        msoEncodingISCIITelugu = 57005,
        msoEncodingISCIIAssamese = 57006,
        msoEncodingISCIIOriya = 57007,
        msoEncodingISCIIKannada = 57008,
        msoEncodingISCIIMalayalam = 57009,
        msoEncodingISCIIGujarati = 57010,
        msoEncodingISCIIPunjabi = 57011,
        msoEncodingArabicASMO = 708,
        msoEncodingArabicTransparentASMO = 720,
        msoEncodingKoreanJohab = 1361,
        msoEncodingTaiwanCNS = 20000,
        msoEncodingTaiwanTCA = 20001,
        msoEncodingTaiwanEten = 20002,
        msoEncodingTaiwanIBM5550 = 20003,
        msoEncodingTaiwanTeleText = 20004,
        msoEncodingTaiwanWang = 20005,
        msoEncodingIA5IRV = 20105,
        msoEncodingIA5German = 20106,
        msoEncodingIA5Swedish = 20107,
        msoEncodingIA5Norwegian = 20108,
        msoEncodingUSASCII = 20127,
        msoEncodingT61 = 20261,
        msoEncodingISO6937NonSpacingAccent = 20269,
        msoEncodingKOI8R = 20866,
        msoEncodingExtAlphaLowercase = 21027,
        msoEncodingKOI8U = 21866,
        msoEncodingEuropa3 = 29001,
        msoEncodingHZGBSimplifiedChinese = 52936,
        msoEncodingSimplifiedChineseGB18030 = 54936,
        msoEncodingUTF7 = 65000,
        msoEncodingUTF8 = 65001
    } MsoEncoding;

	typedef enum {
        msoHyperlinkRange = 0,
        msoHyperlinkShape = 1,
        msoHyperlinkInlineShape = 2
    } MsoHyperlinkType;

	typedef enum {
        msoCalloutMixed = 0xfffffffe,
        msoCalloutOne = 1,
        msoCalloutTwo = 2,
        msoCalloutThree = 3,
        msoCalloutFour = 4
    } MsoCalloutType;*/

typedef enum {
        msoLineDashStyleMixed = 0xfffffffe,
        msoLineSolid = 1,
        msoLineSquareDot = 2,
        msoLineRoundDot = 3,
        msoLineDash = 4,
        msoLineDashDot = 5,
        msoLineDashDotDot = 6,
        msoLineLongDash = 7,
        msoLineLongDashDot = 8
    } MsoLineDashStyle;

    typedef enum {
        msoLineStyleMixed = 0xfffffffe,
        msoLineSingle = 1,
        msoLineThinThin = 2,
        msoLineThinThick = 3,
        msoLineThickThin = 4,
        msoLineThickBetweenThin = 5
    } MsoLineStyle;

    typedef enum {
        msoArrowheadStyleMixed = 0xfffffffe,
        msoArrowheadNone = 1,
        msoArrowheadTriangle = 2,
        msoArrowheadOpen = 3,
        msoArrowheadStealth = 4,
        msoArrowheadDiamond = 5,
        msoArrowheadOval = 6
    } MsoArrowheadStyle;

    typedef enum {
        msoArrowheadWidthMixed = 0xfffffffe,
        msoArrowheadNarrow = 1,
        msoArrowheadWidthMedium = 2,
        msoArrowheadWide = 3
    } MsoArrowheadWidth;

    typedef enum {
        msoArrowheadLengthMixed = 0xfffffffe,
        msoArrowheadShort = 1,
        msoArrowheadLengthMedium = 2,
        msoArrowheadLong = 3
    } MsoArrowheadLength;

    typedef enum {
        msoFillMixed = 0xfffffffe,
        msoFillSolid = 1,
        msoFillPatterned = 2,
        msoFillGradient = 3,
        msoFillTextured = 4,
        msoFillBackground = 5,
        msoFillPicture = 6
    } MsoFillType;

    typedef enum {
        msoGradientMixed = 0xfffffffe,
        msoGradientHorizontal = 1,
        msoGradientVertical = 2,
        msoGradientDiagonalUp = 3,
        msoGradientDiagonalDown = 4,
        msoGradientFromCorner = 5,
        msoGradientFromTitle = 6,
        msoGradientFromCenter = 7
    } MsoGradientStyle;

    typedef enum {
        msoGradientColorMixed = 0xfffffffe,
        msoGradientOneColor = 1,
        msoGradientTwoColors = 2,
        msoGradientPresetColors = 3
    } MsoGradientColorType;

    typedef enum {
        msoTextureTypeMixed = 0xfffffffe,
        msoTexturePreset = 1,
        msoTextureUserDefined = 2
    } MsoTextureType;

    typedef enum {
        msoPresetTextureMixed = 0xfffffffe,
        msoTexturePapyrus = 1,
        msoTextureCanvas = 2,
        msoTextureDenim = 3,
        msoTextureWovenMat = 4,
        msoTextureWaterDroplets = 5,
        msoTexturePaperBag = 6,
        msoTextureFishFossil = 7,
        msoTextureSand = 8,
        msoTextureGreenMarble = 9,
        msoTextureWhiteMarble = 10,
        msoTextureBrownMarble = 11,
        msoTextureGranite = 12,
        msoTextureNewsprint = 13,
        msoTextureRecycledPaper = 14,
        msoTextureParchment = 15,
        msoTextureStationery = 16,
        msoTextureBlueTissuePaper = 17,
        msoTexturePinkTissuePaper = 18,
        msoTexturePurpleMesh = 19,
        msoTextureBouquet = 20,
        msoTextureCork = 21,
        msoTextureWalnut = 22,
        msoTextureOak = 23,
        msoTextureMediumWood = 24
    } MsoPresetTexture;

    typedef enum {
        msoPatternMixed = 0xfffffffe,
        msoPattern5Percent = 1,
        msoPattern10Percent = 2,
        msoPattern20Percent = 3,
        msoPattern25Percent = 4,
        msoPattern30Percent = 5,
        msoPattern40Percent = 6,
        msoPattern50Percent = 7,
        msoPattern60Percent = 8,
        msoPattern70Percent = 9,
        msoPattern75Percent = 10,
        msoPattern80Percent = 11,
        msoPattern90Percent = 12,
        msoPatternDarkHorizontal = 13,
        msoPatternDarkVertical = 14,
        msoPatternDarkDownwardDiagonal = 15,
        msoPatternDarkUpwardDiagonal = 16,
        msoPatternSmallCheckerBoard = 17,
        msoPatternTrellis = 18,
        msoPatternLightHorizontal = 19,
        msoPatternLightVertical = 20,
        msoPatternLightDownwardDiagonal = 21,
        msoPatternLightUpwardDiagonal = 22,
        msoPatternSmallGrid = 23,
        msoPatternDottedDiamond = 24,
        msoPatternWideDownwardDiagonal = 25,
        msoPatternWideUpwardDiagonal = 26,
        msoPatternDashedUpwardDiagonal = 27,
        msoPatternDashedDownwardDiagonal = 28,
        msoPatternNarrowVertical = 29,
        msoPatternNarrowHorizontal = 30,
        msoPatternDashedVertical = 31,
        msoPatternDashedHorizontal = 32,
        msoPatternLargeConfetti = 33,
        msoPatternLargeGrid = 34,
        msoPatternHorizontalBrick = 35,
        msoPatternLargeCheckerBoard = 36,
        msoPatternSmallConfetti = 37,
        msoPatternZigZag = 38,
        msoPatternSolidDiamond = 39,
        msoPatternDiagonalBrick = 40,
        msoPatternOutlinedDiamond = 41,
        msoPatternPlaid = 42,
        msoPatternSphere = 43,
        msoPatternWeave = 44,
        msoPatternDottedGrid = 45,
        msoPatternDivot = 46,
        msoPatternShingle = 47,
        msoPatternWave = 48
    } MsoPatternType;

    typedef enum {
        msoPresetGradientMixed = 0xfffffffe,
        msoGradientEarlySunset = 1,
        msoGradientLateSunset = 2,
        msoGradientNightfall = 3,
        msoGradientDaybreak = 4,
        msoGradientHorizon = 5,
        msoGradientDesert = 6,
        msoGradientOcean = 7,
        msoGradientCalmWater = 8,
        msoGradientFire = 9,
        msoGradientFog = 10,
        msoGradientMoss = 11,
        msoGradientPeacock = 12,
        msoGradientWheat = 13,
        msoGradientParchment = 14,
        msoGradientMahogany = 15,
        msoGradientRainbow = 16,
        msoGradientRainbowII = 17,
        msoGradientGold = 18,
        msoGradientGoldII = 19,
        msoGradientBrass = 20,
        msoGradientChrome = 21,
        msoGradientChromeII = 22,
        msoGradientSilver = 23,
        msoGradientSapphire = 24
    } MsoPresetGradientType;

    typedef enum {
        msoShadowMixed = 0xfffffffe,
        msoShadow1 = 1,
        msoShadow2 = 2,
        msoShadow3 = 3,
        msoShadow4 = 4,
        msoShadow5 = 5,
        msoShadow6 = 6,
        msoShadow7 = 7,
        msoShadow8 = 8,
        msoShadow9 = 9,
        msoShadow10 = 10,
        msoShadow11 = 11,
        msoShadow12 = 12,
        msoShadow13 = 13,
        msoShadow14 = 14,
        msoShadow15 = 15,
        msoShadow16 = 16,
        msoShadow17 = 17,
        msoShadow18 = 18,
        msoShadow19 = 19,
        msoShadow20 = 20
    } MsoShadowType;

    typedef enum {
        msoTextEffectMixed = 0xfffffffe,
        msoTextEffect1 = 0,
        msoTextEffect2 = 1,
        msoTextEffect3 = 2,
        msoTextEffect4 = 3,
        msoTextEffect5 = 4,
        msoTextEffect6 = 5,
        msoTextEffect7 = 6,
        msoTextEffect8 = 7,
        msoTextEffect9 = 8,
        msoTextEffect10 = 9,
        msoTextEffect11 = 10,
        msoTextEffect12 = 11,
        msoTextEffect13 = 12,
        msoTextEffect14 = 13,
        msoTextEffect15 = 14,
        msoTextEffect16 = 15,
        msoTextEffect17 = 16,
        msoTextEffect18 = 17,
        msoTextEffect19 = 18,
        msoTextEffect20 = 19,
        msoTextEffect21 = 20,
        msoTextEffect22 = 21,
        msoTextEffect23 = 22,
        msoTextEffect24 = 23,
        msoTextEffect25 = 24,
        msoTextEffect26 = 25,
        msoTextEffect27 = 26,
        msoTextEffect28 = 27,
        msoTextEffect29 = 28,
        msoTextEffect30 = 29
    } MsoPresetTextEffect;

    typedef enum {
        msoTextEffectShapeMixed = 0xfffffffe,
        msoTextEffectShapePlainText = 1,
        msoTextEffectShapeStop = 2,
        msoTextEffectShapeTriangleUp = 3,
        msoTextEffectShapeTriangleDown = 4,
        msoTextEffectShapeChevronUp = 5,
        msoTextEffectShapeChevronDown = 6,
        msoTextEffectShapeRingInside = 7,
        msoTextEffectShapeRingOutside = 8,
        msoTextEffectShapeArchUpCurve = 9,
        msoTextEffectShapeArchDownCurve = 10,
        msoTextEffectShapeCircleCurve = 11,
        msoTextEffectShapeButtonCurve = 12,
        msoTextEffectShapeArchUpPour = 13,
        msoTextEffectShapeArchDownPour = 14,
        msoTextEffectShapeCirclePour = 15,
        msoTextEffectShapeButtonPour = 16,
        msoTextEffectShapeCurveUp = 17,
        msoTextEffectShapeCurveDown = 18,
        msoTextEffectShapeCanUp = 19,
        msoTextEffectShapeCanDown = 20,
        msoTextEffectShapeWave1 = 21,
        msoTextEffectShapeWave2 = 22,
        msoTextEffectShapeDoubleWave1 = 23,
        msoTextEffectShapeDoubleWave2 = 24,
        msoTextEffectShapeInflate = 25,
        msoTextEffectShapeDeflate = 26,
        msoTextEffectShapeInflateBottom = 27,
        msoTextEffectShapeDeflateBottom = 28,
        msoTextEffectShapeInflateTop = 29,
        msoTextEffectShapeDeflateTop = 30,
        msoTextEffectShapeDeflateInflate = 31,
        msoTextEffectShapeDeflateInflateDeflate = 32,
        msoTextEffectShapeFadeRight = 33,
        msoTextEffectShapeFadeLeft = 34,
        msoTextEffectShapeFadeUp = 35,
        msoTextEffectShapeFadeDown = 36,
        msoTextEffectShapeSlantUp = 37,
        msoTextEffectShapeSlantDown = 38,
        msoTextEffectShapeCascadeUp = 39,
        msoTextEffectShapeCascadeDown = 40
    } MsoPresetTextEffectShape;

    typedef enum {
        msoTextEffectAlignmentMixed = 0xfffffffe,
        msoTextEffectAlignmentLeft = 1,
        msoTextEffectAlignmentCentered = 2,
        msoTextEffectAlignmentRight = 3,
        msoTextEffectAlignmentLetterJustify = 4,
        msoTextEffectAlignmentWordJustify = 5,
        msoTextEffectAlignmentStretchJustify = 6
    } MsoTextEffectAlignment;

    typedef enum {
        msoPresetLightingDirectionMixed = 0xfffffffe,
        msoLightingTopLeft = 1,
        msoLightingTop = 2,
        msoLightingTopRight = 3,
        msoLightingLeft = 4,
        msoLightingNone = 5,
        msoLightingRight = 6,
        msoLightingBottomLeft = 7,
        msoLightingBottom = 8,
        msoLightingBottomRight = 9
    } MsoPresetLightingDirection;

    typedef enum {
        msoPresetLightingSoftnessMixed = 0xfffffffe,
        msoLightingDim = 1,
        msoLightingNormal = 2,
        msoLightingBright = 3
    } MsoPresetLightingSoftness;

    typedef enum {
        msoPresetMaterialMixed = 0xfffffffe,
        msoMaterialMatte = 1,
        msoMaterialPlastic = 2,
        msoMaterialMetal = 3,
        msoMaterialWireFrame = 4
    } MsoPresetMaterial;

    typedef enum {
        msoPresetExtrusionDirectionMixed = 0xfffffffe,
        msoExtrusionBottomRight = 1,
        msoExtrusionBottom = 2,
        msoExtrusionBottomLeft = 3,
        msoExtrusionRight = 4,
        msoExtrusionNone = 5,
        msoExtrusionLeft = 6,
        msoExtrusionTopRight = 7,
        msoExtrusionTop = 8,
        msoExtrusionTopLeft = 9
    } MsoPresetExtrusionDirection;

    typedef enum {
        msoPresetThreeDFormatMixed = 0xfffffffe,
        msoThreeD1 = 1,
        msoThreeD2 = 2,
        msoThreeD3 = 3,
        msoThreeD4 = 4,
        msoThreeD5 = 5,
        msoThreeD6 = 6,
        msoThreeD7 = 7,
        msoThreeD8 = 8,
        msoThreeD9 = 9,
        msoThreeD10 = 10,
        msoThreeD11 = 11,
        msoThreeD12 = 12,
        msoThreeD13 = 13,
        msoThreeD14 = 14,
        msoThreeD15 = 15,
        msoThreeD16 = 16,
        msoThreeD17 = 17,
        msoThreeD18 = 18,
        msoThreeD19 = 19,
        msoThreeD20 = 20
    } MsoPresetThreeDFormat;

    typedef enum {
        msoExtrusionColorTypeMixed = 0xfffffffe,
        msoExtrusionColorAutomatic = 1,
        msoExtrusionColorCustom = 2
    } MsoExtrusionColorType;

    typedef enum {
        msoAlignLefts = 0,
        msoAlignCenters = 1,
        msoAlignRights = 2,
        msoAlignTops = 3,
        msoAlignMiddles = 4,
        msoAlignBottoms = 5
    } MsoAlignCmd;

    typedef enum {
        msoDistributeHorizontally = 0,
        msoDistributeVertically = 1
    } MsoDistributeCmd;

    typedef enum {
        msoConnectorTypeMixed = 0xfffffffe,
        msoConnectorStraight = 1,
        msoConnectorElbow = 2,
        msoConnectorCurve = 3
    } MsoConnectorType;

    typedef enum {
        msoHorizontalAnchorMixed = 0xfffffffe,
        msoAnchorNone = 1,
        msoAnchorCenter = 2
    } MsoHorizontalAnchor;

    typedef enum {
        msoVerticalAnchorMixed = 0xfffffffe,
        msoAnchorTop = 1,
        msoAnchorTopBaseline = 2,
        msoAnchorMiddle = 3,
        msoAnchorBottom = 4,
        msoAnchorBottomBaseLine = 5
    } MsoVerticalAnchor;

    typedef enum {
        msoOrientationMixed = 0xfffffffe,
        msoOrientationHorizontal = 1,
        msoOrientationVertical = 2
    } MsoOrientation;

    typedef enum {
        msoBringToFront = 0,
        msoSendToBack = 1,
        msoBringForward = 2,
        msoSendBackward = 3,
        msoBringInFrontOfText = 4,
        msoSendBehindText = 5
    } MsoZOrderCmd;

    typedef enum {
        msoSegmentLine = 0,
        msoSegmentCurve = 1
    } MsoSegmentType;

    typedef enum {
        msoEditingAuto = 0,
        msoEditingCorner = 1,
        msoEditingSmooth = 2,
        msoEditingSymmetric = 3
    } MsoEditingType;

    typedef enum {
        msoShapeMixed = 0xfffffffe,
        msoShapeRectangle = 1,
        msoShapeParallelogram = 2,
        msoShapeTrapezoid = 3,
        msoShapeDiamond = 4,
        msoShapeRoundedRectangle = 5,
        msoShapeOctagon = 6,
        msoShapeIsoscelesTriangle = 7,
        msoShapeRightTriangle = 8,
        msoShapeOval = 9,
        msoShapeHexagon = 10,
        msoShapeCross = 11,
        msoShapeRegularPentagon = 12,
        msoShapeCan = 13,
        msoShapeCube = 14,
        msoShapeBevel = 15,
        msoShapeFoldedCorner = 16,
        msoShapeSmileyFace = 17,
        msoShapeDonut = 18,
        msoShapeNoSymbol = 19,
        msoShapeBlockArc = 20,
        msoShapeHeart = 21,
        msoShapeLightningBolt = 22,
        msoShapeSun = 23,
        msoShapeMoon = 24,
        msoShapeArc = 25,
        msoShapeDoubleBracket = 26,
        msoShapeDoubleBrace = 27,
        msoShapePlaque = 28,
        msoShapeLeftBracket = 29,
        msoShapeRightBracket = 30,
        msoShapeLeftBrace = 31,
        msoShapeRightBrace = 32,
        msoShapeRightArrow = 33,
        msoShapeLeftArrow = 34,
        msoShapeUpArrow = 35,
        msoShapeDownArrow = 36,
        msoShapeLeftRightArrow = 37,
        msoShapeUpDownArrow = 38,
        msoShapeQuadArrow = 39,
        msoShapeLeftRightUpArrow = 40,
        msoShapeBentArrow = 41,
        msoShapeUTurnArrow = 42,
        msoShapeLeftUpArrow = 43,
        msoShapeBentUpArrow = 44,
        msoShapeCurvedRightArrow = 45,
        msoShapeCurvedLeftArrow = 46,
        msoShapeCurvedUpArrow = 47,
        msoShapeCurvedDownArrow = 48,
        msoShapeStripedRightArrow = 49,
        msoShapeNotchedRightArrow = 50,
        msoShapePentagon = 51,
        msoShapeChevron = 52,
        msoShapeRightArrowCallout = 53,
        msoShapeLeftArrowCallout = 54,
        msoShapeUpArrowCallout = 55,
        msoShapeDownArrowCallout = 56,
        msoShapeLeftRightArrowCallout = 57,
        msoShapeUpDownArrowCallout = 58,
        msoShapeQuadArrowCallout = 59,
        msoShapeCircularArrow = 60,
        msoShapeFlowchartProcess = 61,
        msoShapeFlowchartAlternateProcess = 62,
        msoShapeFlowchartDecision = 63,
        msoShapeFlowchartData = 64,
        msoShapeFlowchartPredefinedProcess = 65,
        msoShapeFlowchartInternalStorage = 66,
        msoShapeFlowchartDocument = 67,
        msoShapeFlowchartMultidocument = 68,
        msoShapeFlowchartTerminator = 69,
        msoShapeFlowchartPreparation = 70,
        msoShapeFlowchartManualInput = 71,
        msoShapeFlowchartManualOperation = 72,
        msoShapeFlowchartConnector = 73,
        msoShapeFlowchartOffpageConnector = 74,
        msoShapeFlowchartCard = 75,
        msoShapeFlowchartPunchedTape = 76,
        msoShapeFlowchartSummingJunction = 77,
        msoShapeFlowchartOr = 78,
        msoShapeFlowchartCollate = 79,
        msoShapeFlowchartSort = 80,
        msoShapeFlowchartExtract = 81,
        msoShapeFlowchartMerge = 82,
        msoShapeFlowchartStoredData = 83,
        msoShapeFlowchartDelay = 84,
        msoShapeFlowchartSequentialAccessStorage = 85,
        msoShapeFlowchartMagneticDisk = 86,
        msoShapeFlowchartDirectAccessStorage = 87,
        msoShapeFlowchartDisplay = 88,
        msoShapeExplosion1 = 89,
        msoShapeExplosion2 = 90,
        msoShape4pointStar = 91,
        msoShape5pointStar = 92,
        msoShape8pointStar = 93,
        msoShape16pointStar = 94,
        msoShape24pointStar = 95,
        msoShape32pointStar = 96,
        msoShapeUpRibbon = 97,
        msoShapeDownRibbon = 98,
        msoShapeCurvedUpRibbon = 99,
        msoShapeCurvedDownRibbon = 100,
        msoShapeVerticalScroll = 101,
        msoShapeHorizontalScroll = 102,
        msoShapeWave = 103,
        msoShapeDoubleWave = 104,
        msoShapeRectangularCallout = 105,
        msoShapeRoundedRectangularCallout = 106,
        msoShapeOvalCallout = 107,
        msoShapeCloudCallout = 108,
        msoShapeLineCallout1 = 109,
        msoShapeLineCallout2 = 110,
        msoShapeLineCallout3 = 111,
        msoShapeLineCallout4 = 112,
        msoShapeLineCallout1AccentBar = 113,
        msoShapeLineCallout2AccentBar = 114,
        msoShapeLineCallout3AccentBar = 115,
        msoShapeLineCallout4AccentBar = 116,
        msoShapeLineCallout1NoBorder = 117,
        msoShapeLineCallout2NoBorder = 118,
        msoShapeLineCallout3NoBorder = 119,
        msoShapeLineCallout4NoBorder = 120,
        msoShapeLineCallout1BorderandAccentBar = 121,
        msoShapeLineCallout2BorderandAccentBar = 122,
        msoShapeLineCallout3BorderandAccentBar = 123,
        msoShapeLineCallout4BorderandAccentBar = 124,
        msoShapeActionButtonCustom = 125,
        msoShapeActionButtonHome = 126,
        msoShapeActionButtonHelp = 127,
        msoShapeActionButtonInformation = 128,
        msoShapeActionButtonBackorPrevious = 129,
        msoShapeActionButtonForwardorNext = 130,
        msoShapeActionButtonBeginning = 131,
        msoShapeActionButtonEnd = 132,
        msoShapeActionButtonReturn = 133,
        msoShapeActionButtonDocument = 134,
        msoShapeActionButtonSound = 135,
        msoShapeActionButtonMovie = 136,
        msoShapeBalloon = 137,
        msoShapeNotPrimitive = 138
    } MsoAutoShapeType;

    typedef enum {
        msoShapeTypeMixed = 0xfffffffe,
        msoAutoShape = 1,
        msoCallout = 2,
        msoChart = 3,
        msoComment = 4,
        msoFreeform = 5,
        msoGroup = 6,
        msoEmbeddedOLEObject = 7,
        msoFormControl = 8,
        msoLine = 9,
        msoLinkedOLEObject = 10,
        msoLinkedPicture = 11,
        msoOLEControlObject = 12,
        msoPicture = 13,
        msoPlaceholder = 14,
        msoTextEffect = 15,
        msoMedia = 16,
        msoTextBox = 17,
        msoScriptAnchor = 18,
        msoTable = 19,
        msoCanvas = 20,
        msoDiagram = 21,
        msoInk = 22,
        msoInkComment = 23
    } MsoShapeType;

    typedef enum {
        msoFlipHorizontal = 0,
        msoFlipVertical = 1
    } MsoFlipCmd;

    typedef enum {
        msoTrue = 0xffffffff,
        msoFalse = 0,
        msoCTrue = 1,
        msoTriStateToggle = 0xfffffffd,
        msoTriStateMixed = 0xfffffffe
    } MsoTriState;

    typedef enum {
        msoColorTypeMixed = 0xfffffffe,
        msoColorTypeRGB = 1,
        msoColorTypeScheme = 2,
        msoColorTypeCMYK = 3,
        msoColorTypeCMS = 4,
        msoColorTypeInk = 5
    } MsoColorType;

    typedef enum {
        msoPictureMixed = 0xfffffffe,
        msoPictureAutomatic = 1,
        msoPictureGrayscale = 2,
        msoPictureBlackAndWhite = 3,
        msoPictureWatermark = 4
    } MsoPictureColorType;

    typedef enum {
        msoCalloutAngleMixed = 0xfffffffe,
        msoCalloutAngleAutomatic = 1,
        msoCalloutAngle30 = 2,
        msoCalloutAngle45 = 3,
        msoCalloutAngle60 = 4,
        msoCalloutAngle90 = 5
    } MsoCalloutAngleType;

    typedef enum {
        msoCalloutDropMixed = 0xfffffffe,
        msoCalloutDropCustom = 1,
        msoCalloutDropTop = 2,
        msoCalloutDropCenter = 3,
        msoCalloutDropBottom = 4
    } MsoCalloutDropType;

    typedef enum {
        msoCalloutMixed = 0xfffffffe,
        msoCalloutOne = 1,
        msoCalloutTwo = 2,
        msoCalloutThree = 3,
        msoCalloutFour = 4
    } MsoCalloutType;

    typedef enum {
        msoBlackWhiteMixed = 0xfffffffe,
        msoBlackWhiteAutomatic = 1,
        msoBlackWhiteGrayScale = 2,
        msoBlackWhiteLightGrayScale = 3,
        msoBlackWhiteInverseGrayScale = 4,
        msoBlackWhiteGrayOutline = 5,
        msoBlackWhiteBlackTextAndLine = 6,
        msoBlackWhiteHighContrast = 7,
        msoBlackWhiteBlack = 8,
        msoBlackWhiteWhite = 9,
        msoBlackWhiteDontShow = 10
    } MsoBlackWhiteMode;

    typedef enum {
        msoIntegerMixed = 32768,
        msoSingleMixed = 0x80000000
    } MsoMixedType;

    typedef enum {
        msoTextOrientationMixed = 0xfffffffe,
        msoTextOrientationHorizontal = 1,
        msoTextOrientationUpward = 2,
        msoTextOrientationDownward = 3,
        msoTextOrientationVerticalFarEast = 4,
        msoTextOrientationVertical = 5,
        msoTextOrientationHorizontalRotatedFarEast = 6
    } MsoTextOrientation;

    typedef enum {
        msoScaleFromTopLeft = 0,
        msoScaleFromMiddle = 1,
        msoScaleFromBottomRight = 2
    } MsoScaleFrom;

    typedef [public]
    long MsoRGBType;

    typedef enum {
        msoBarLeft = 0,
        msoBarTop = 1,
        msoBarRight = 2,
        msoBarBottom = 3,
        msoBarFloating = 4,
        msoBarPopup = 5,
        msoBarMenuBar = 6
    } MsoBarPosition;

    typedef enum {
        msoBarNoProtection = 0,
        msoBarNoCustomize = 1,
        msoBarNoResize = 2,
        msoBarNoMove = 4,
        msoBarNoChangeVisible = 8,
        msoBarNoChangeDock = 16,
        msoBarNoVerticalDock = 32,
        msoBarNoHorizontalDock = 64
    } MsoBarProtection;

    typedef enum {
        msoBarTypeNormal = 0,
        msoBarTypeMenuBar = 1,
        msoBarTypePopup = 2
    } MsoBarType;

    typedef enum {
        msoControlCustom = 0,
        msoControlButton = 1,
        msoControlEdit = 2,
        msoControlDropdown = 3,
        msoControlComboBox = 4,
        msoControlButtonDropdown = 5,
        msoControlSplitDropdown = 6,
        msoControlOCXDropdown = 7,
        msoControlGenericDropdown = 8,
        msoControlGraphicDropdown = 9,
        msoControlPopup = 10,
        msoControlGraphicPopup = 11,
        msoControlButtonPopup = 12,
        msoControlSplitButtonPopup = 13,
        msoControlSplitButtonMRUPopup = 14,
        msoControlLabel = 15,
        msoControlExpandingGrid = 16,
        msoControlSplitExpandingGrid = 17,
        msoControlGrid = 18,
        msoControlGauge = 19,
        msoControlGraphicCombo = 20,
        msoControlPane = 21,
        msoControlActiveX = 22,
        msoControlSpinner = 23,
        msoControlLabelEx = 24,
        msoControlWorkPane = 25,
        msoControlAutoCompleteCombo = 26
    } MsoControlType;

    typedef enum {
        msoButtonUp = 0,
        msoButtonDown = 0xffffffff,
        msoButtonMixed = 2
    } MsoButtonState;

    typedef enum {
        msoControlOLEUsageNeither = 0,
        msoControlOLEUsageServer = 1,
        msoControlOLEUsageClient = 2,
        msoControlOLEUsageBoth = 3
    } MsoControlOLEUsage;

    typedef enum {
        msoButtonWrapText = 4,
        msoButtonTextBelow = 8
    } MsoButtonStyleHidden;

    typedef enum {
        msoButtonAutomatic = 0,
        msoButtonIcon = 1,
        msoButtonCaption = 2,
        msoButtonIconAndCaption = 3,
        msoButtonIconAndWrapCaption = 7,
        msoButtonIconAndCaptionBelow = 11,
        msoButtonWrapCaption = 14,
        msoButtonIconAndWrapCaptionBelow = 15
    } MsoButtonStyle;

    typedef enum {
        msoComboNormal = 0,
        msoComboLabel = 1
    } MsoComboStyle;

    typedef enum {
        msoOLEMenuGroupNone = 0xffffffff,
        msoOLEMenuGroupFile = 0,
        msoOLEMenuGroupEdit = 1,
        msoOLEMenuGroupContainer = 2,
        msoOLEMenuGroupObject = 3,
        msoOLEMenuGroupWindow = 4,
        msoOLEMenuGroupHelp = 5
    } MsoOLEMenuGroup;

    typedef enum {
        msoMenuAnimationNone = 0,
        msoMenuAnimationRandom = 1,
        msoMenuAnimationUnfold = 2,
        msoMenuAnimationSlide = 3
    } MsoMenuAnimation;

    typedef enum {
        msoBarRowFirst = 0,
        msoBarRowLast = 0xffffffff
    } MsoBarRow;

    typedef enum {
        msoCommandBarButtonHyperlinkNone = 0,
        msoCommandBarButtonHyperlinkOpen = 1,
        msoCommandBarButtonHyperlinkInsertPicture = 2
    } MsoCommandBarButtonHyperlinkType;

    typedef enum {
        msoHyperlinkRange = 0,
        msoHyperlinkShape = 1,
        msoHyperlinkInlineShape = 2
    } MsoHyperlinkType;

    typedef enum {
        msoMethodGet = 0,
        msoMethodPost = 1
    } MsoExtraInfoMethod;

    typedef enum {
        msoAnimationIdle = 1,
        msoAnimationGreeting = 2,
        msoAnimationGoodbye = 3,
        msoAnimationBeginSpeaking = 4,
        msoAnimationRestPose = 5,
        msoAnimationCharacterSuccessMajor = 6,
        msoAnimationGetAttentionMajor = 11,
        msoAnimationGetAttentionMinor = 12,
        msoAnimationSearching = 13,
        msoAnimationPrinting = 18,
        msoAnimationGestureRight = 19,
        msoAnimationWritingNotingSomething = 22,
        msoAnimationWorkingAtSomething = 23,
        msoAnimationThinking = 24,
        msoAnimationSendingMail = 25,
        msoAnimationListensToComputer = 26,
        msoAnimationDisappear = 31,
        msoAnimationAppear = 32,
        msoAnimationGetArtsy = 100,
        msoAnimationGetTechy = 101,
        msoAnimationGetWizardy = 102,
        msoAnimationCheckingSomething = 103,
        msoAnimationLookDown = 104,
        msoAnimationLookDownLeft = 105,
        msoAnimationLookDownRight = 106,
        msoAnimationLookLeft = 107,
        msoAnimationLookRight = 108,
        msoAnimationLookUp = 109,
        msoAnimationLookUpLeft = 110,
        msoAnimationLookUpRight = 111,
        msoAnimationSaving = 112,
        msoAnimationGestureDown = 113,
        msoAnimationGestureLeft = 114,
        msoAnimationGestureUp = 115,
        msoAnimationEmptyTrash = 116
    } MsoAnimationType;

    typedef enum {
        msoButtonSetNone = 0,
        msoButtonSetOK = 1,
        msoButtonSetCancel = 2,
        msoButtonSetOkCancel = 3,
        msoButtonSetYesNo = 4,
        msoButtonSetYesNoCancel = 5,
        msoButtonSetBackClose = 6,
        msoButtonSetNextClose = 7,
        msoButtonSetBackNextClose = 8,
        msoButtonSetRetryCancel = 9,
        msoButtonSetAbortRetryIgnore = 10,
        msoButtonSetSearchClose = 11,
        msoButtonSetBackNextSnooze = 12,
        msoButtonSetTipsOptionsClose = 13,
        msoButtonSetYesAllNoCancel = 14
    } MsoButtonSetType;

    typedef enum {
        msoIconNone = 0,
        msoIconAlert = 2,
        msoIconTip = 3,
        msoIconAlertInfo = 4,
        msoIconAlertWarning = 5,
        msoIconAlertQuery = 6,
        msoIconAlertCritical = 7
    } MsoIconType;

    typedef enum {
        msoBalloonTypeButtons = 0,
        msoBalloonTypeBullets = 1,
        msoBalloonTypeNumbers = 2
    } MsoBalloonType;

    typedef enum {
        msoModeModal = 0,
        msoModeAutoDown = 1,
        msoModeModeless = 2
    } MsoModeType;

    typedef enum {
        msoBalloonErrorNone = 0,
        msoBalloonErrorOther = 1,
        msoBalloonErrorTooBig = 2,
        msoBalloonErrorOutOfMemory = 3,
        msoBalloonErrorBadPictureRef = 4,
        msoBalloonErrorBadReference = 5,
        msoBalloonErrorButtonlessModal = 6,
        msoBalloonErrorButtonModeless = 7,
        msoBalloonErrorBadCharacter = 8,
        msoBalloonErrorCOMFailure = 9,
        msoBalloonErrorCharNotTopmostForModal = 10,
        msoBalloonErrorTooManyControls = 11
    } MsoBalloonErrorType;

    typedef enum {
        msoWizardActInactive = 0,
        msoWizardActActive = 1,
        msoWizardActSuspend = 2,
        msoWizardActResume = 3
    } MsoWizardActType;

    typedef enum {
        msoWizardMsgLocalStateOn = 1,
        msoWizardMsgLocalStateOff = 2,
        msoWizardMsgShowHelp = 3,
        msoWizardMsgSuspending = 4,
        msoWizardMsgResuming = 5
    } MsoWizardMsgType;

    typedef enum {
        msoBalloonButtonYesToAll = 0xfffffff1,
        msoBalloonButtonOptions = 0xfffffff2,
        msoBalloonButtonTips = 0xfffffff3,
        msoBalloonButtonClose = 0xfffffff4,
        msoBalloonButtonSnooze = 0xfffffff5,
        msoBalloonButtonSearch = 0xfffffff6,
        msoBalloonButtonIgnore = 0xfffffff7,
        msoBalloonButtonAbort = 0xfffffff8,
        msoBalloonButtonRetry = 0xfffffff9,
        msoBalloonButtonNext = 0xfffffffa,
        msoBalloonButtonBack = 0xfffffffb,
        msoBalloonButtonNo = 0xfffffffc,
        msoBalloonButtonYes = 0xfffffffd,
        msoBalloonButtonCancel = 0xfffffffe,
        msoBalloonButtonOK = 0xffffffff,
        msoBalloonButtonNull = 0
    } MsoBalloonButtonType;

    typedef enum {
        offPropertyTypeNumber = 1,
        offPropertyTypeBoolean = 2,
        offPropertyTypeDate = 3,
        offPropertyTypeString = 4,
        offPropertyTypeFloat = 5
    } DocProperties;

    typedef enum {
        msoPropertyTypeNumber = 1,
        msoPropertyTypeBoolean = 2,
        msoPropertyTypeDate = 3,
        msoPropertyTypeString = 4,
        msoPropertyTypeFloat = 5
    } MsoDocProperties;

    typedef enum {
        msoLanguageIDInstall = 1,
        msoLanguageIDUI = 2,
        msoLanguageIDHelp = 3,
        msoLanguageIDExeMode = 4,
        msoLanguageIDUIPrevious = 5
    } MsoAppLanguageID;

    typedef enum {
        MsoFarEastLineBreakLanguageJapanese = 1041,
        MsoFarEastLineBreakLanguageKorean = 1042,
        MsoFarEastLineBreakLanguageSimplifiedChinese = 2052,
        MsoFarEastLineBreakLanguageTraditionalChinese = 1028
    } MsoFarEastLineBreakLanguageID;

    typedef enum {
        msoFeatureInstallNone = 0,
        msoFeatureInstallOnDemand = 1,
        msoFeatureInstallOnDemandWithUI = 2
    } MsoFeatureInstall;

	typedef enum {
		msoDiagramMixed = 0xfffffffe,
		msoDiagramOrgChart = 1,
		msoDiagramCycle = 2,
		msoDiagramRadial = 3,
		msoDiagramPyramid = 4,
		msoDiagramVenn = 5,
		msoDiagramTarget = 6
	} MsoDiagramType;

	typedef enum {
    msoAlertButtonOK = 0,
    msoAlertButtonOKCancel = 1,
    msoAlertButtonAbortRetryIgnore = 2,
    msoAlertButtonYesNoCancel = 3,
    msoAlertButtonYesNo = 4,
    msoAlertButtonRetryCancel = 5,
    msoAlertButtonYesAllNoCancel = 6
} MsoAlertButtonType;

	typedef enum {
    msoAlertIconNoIcon = 0,
    msoAlertIconCritical = 1,
    msoAlertIconQuery = 2,
    msoAlertIconWarning = 3,
    msoAlertIconInfo = 4
} MsoAlertIconType;

	typedef enum {
    msoAlertDefaultFirst = 0,
    msoAlertDefaultSecond = 1,
    msoAlertDefaultThird = 2,
    msoAlertDefaultFourth = 3,
    msoAlertDefaultFifth = 4
} MsoAlertDefaultType;

	typedef enum {
    msoAlertCancelDefault = 0xffffffff,
    msoAlertCancelFirst = 0,
    msoAlertCancelSecond = 1,
    msoAlertCancelThird = 2,
    msoAlertCancelFourth = 3,
    msoAlertCancelFifth = 4
} MsoAlertCancelType;

	typedef enum {
        msoLastModifiedYesterday = 1,
        msoLastModifiedToday = 2,
        msoLastModifiedLastWeek = 3,
        msoLastModifiedThisWeek = 4,
        msoLastModifiedLastMonth = 5,
        msoLastModifiedThisMonth = 6,
        msoLastModifiedAnyTime = 7
    } MsoLastModified;

    typedef enum {
        msoSortByFileName = 1,
        msoSortBySize = 2,
        msoSortByFileType = 3,
        msoSortByLastModified = 4,
        msoSortByNone = 5
    } MsoSortBy;

    typedef enum {
        msoSortOrderAscending = 1,
        msoSortOrderDescending = 2
    } MsoSortOrder;

    typedef enum {
        msoConnectorAnd = 1,
        msoConnectorOr = 2
    } MsoConnector;

    typedef enum {
        msoConditionFileTypeAllFiles = 1,
        msoConditionFileTypeOfficeFiles = 2,
        msoConditionFileTypeWordDocuments = 3,
        msoConditionFileTypeExcelWorkbooks = 4,
        msoConditionFileTypePowerPointPresentations = 5,
        msoConditionFileTypeBinders = 6,
        msoConditionFileTypeDatabases = 7,
        msoConditionFileTypeTemplates = 8,
        msoConditionIncludes = 9,
        msoConditionIncludesPhrase = 10,
        msoConditionBeginsWith = 11,
        msoConditionEndsWith = 12,
        msoConditionIncludesNearEachOther = 13,
        msoConditionIsExactly = 14,
        msoConditionIsNot = 15,
        msoConditionYesterday = 16,
        msoConditionToday = 17,
        msoConditionTomorrow = 18,
        msoConditionLastWeek = 19,
        msoConditionThisWeek = 20,
        msoConditionNextWeek = 21,
        msoConditionLastMonth = 22,
        msoConditionThisMonth = 23,
        msoConditionNextMonth = 24,
        msoConditionAnytime = 25,
        msoConditionAnytimeBetween = 26,
        msoConditionOn = 27,
        msoConditionOnOrAfter = 28,
        msoConditionOnOrBefore = 29,
        msoConditionInTheNext = 30,
        msoConditionInTheLast = 31,
        msoConditionEquals = 32,
        msoConditionDoesNotEqual = 33,
        msoConditionAnyNumberBetween = 34,
        msoConditionAtMost = 35,
        msoConditionAtLeast = 36,
        msoConditionMoreThan = 37,
        msoConditionLessThan = 38,
        msoConditionIsYes = 39,
        msoConditionIsNo = 40,
        msoConditionIncludesFormsOf = 41,
        msoConditionFreeText = 42,
        msoConditionFileTypeOutlookItems = 43,
        msoConditionFileTypeMailItem = 44,
        msoConditionFileTypeCalendarItem = 45,
        msoConditionFileTypeContactItem = 46,
        msoConditionFileTypeNoteItem = 47,
        msoConditionFileTypeJournalItem = 48,
        msoConditionFileTypeTaskItem = 49,
        msoConditionFileTypePhotoDrawFiles = 50,
        msoConditionFileTypeDataConnectionFiles = 51,
        msoConditionFileTypePublisherFiles = 52,
        msoConditionFileTypeProjectFiles = 53,
        msoConditionFileTypeDocumentImagingFiles = 54,
        msoConditionFileTypeVisioFiles = 55,
        msoConditionFileTypeDesignerFiles = 56,
        msoConditionFileTypeWebPages = 57,
        msoConditionEqualsLow = 58,
        msoConditionEqualsNormal = 59,
        msoConditionEqualsHigh = 60,
        msoConditionNotEqualToLow = 61,
        msoConditionNotEqualToNormal = 62,
        msoConditionNotEqualToHigh = 63,
        msoConditionEqualsNotStarted = 64,
        msoConditionEqualsInProgress = 65,
        msoConditionEqualsCompleted = 66,
        msoConditionEqualsWaitingForSomeoneElse = 67,
        msoConditionEqualsDeferred = 68,
        msoConditionNotEqualToNotStarted = 69,
        msoConditionNotEqualToInProgress = 70,
        msoConditionNotEqualToCompleted = 71,
        msoConditionNotEqualToWaitingForSomeoneElse = 72,
        msoConditionNotEqualToDeferred = 73
    } MsoCondition;

    typedef enum {
        msoFileTypeAllFiles = 1,
        msoFileTypeOfficeFiles = 2,
        msoFileTypeWordDocuments = 3,
        msoFileTypeExcelWorkbooks = 4,
        msoFileTypePowerPointPresentations = 5,
        msoFileTypeBinders = 6,
        msoFileTypeDatabases = 7,
        msoFileTypeTemplates = 8,
        msoFileTypeOutlookItems = 9,
        msoFileTypeMailItem = 10,
        msoFileTypeCalendarItem = 11,
        msoFileTypeContactItem = 12,
        msoFileTypeNoteItem = 13,
        msoFileTypeJournalItem = 14,
        msoFileTypeTaskItem = 15,
        msoFileTypePhotoDrawFiles = 16,
        msoFileTypeDataConnectionFiles = 17,
        msoFileTypePublisherFiles = 18,
        msoFileTypeProjectFiles = 19,
        msoFileTypeDocumentImagingFiles = 20,
        msoFileTypeVisioFiles = 21,
        msoFileTypeDesignerFiles = 22,
        msoFileTypeWebPages = 23
    } MsoFileType;

	typedef enum {
        msoLanguageIDMixed = 0xfffffffe,
        msoLanguageIDNone = 0,
        msoLanguageIDNoProofing = 1024,
        msoLanguageIDAfrikaans = 1078,
        msoLanguageIDAlbanian = 1052,
        msoLanguageIDAmharic = 1118,
        msoLanguageIDArabicAlgeria = 5121,
        msoLanguageIDArabicBahrain = 15361,
        msoLanguageIDArabicEgypt = 3073,
        msoLanguageIDArabicIraq = 2049,
        msoLanguageIDArabicJordan = 11265,
        msoLanguageIDArabicKuwait = 13313,
        msoLanguageIDArabicLebanon = 12289,
        msoLanguageIDArabicLibya = 4097,
        msoLanguageIDArabicMorocco = 6145,
        msoLanguageIDArabicOman = 8193,
        msoLanguageIDArabicQatar = 16385,
        msoLanguageIDArabic = 1025,
        msoLanguageIDArabicSyria = 10241,
        msoLanguageIDArabicTunisia = 7169,
        msoLanguageIDArabicUAE = 14337,
        msoLanguageIDArabicYemen = 9217,
        msoLanguageIDArmenian = 1067,
        msoLanguageIDAssamese = 1101,
        msoLanguageIDAzeriCyrillic = 2092,
        msoLanguageIDAzeriLatin = 1068,
        msoLanguageIDBasque = 1069,
        msoLanguageIDByelorussian = 1059,
        msoLanguageIDBengali = 1093,
        msoLanguageIDBosnian = 4122,
        msoLanguageIDBosnianBosniaHerzegovinaCyrillic = 8218,
        msoLanguageIDBosnianBosniaHerzegovinaLatin = 5146,
        msoLanguageIDBulgarian = 1026,
        msoLanguageIDBurmese = 1109,
        msoLanguageIDCatalan = 1027,
        msoLanguageIDChineseHongKongSAR = 3076,
        msoLanguageIDChineseMacaoSAR = 5124,
        msoLanguageIDSimplifiedChinese = 2052,
        msoLanguageIDChineseSingapore = 4100,
        msoLanguageIDTraditionalChinese = 1028,
        msoLanguageIDCherokee = 1116,
        msoLanguageIDCroatian = 1050,
        msoLanguageIDCzech = 1029,
        msoLanguageIDDanish = 1030,
        msoLanguageIDDivehi = 1125,
        msoLanguageIDBelgianDutch = 2067,
        msoLanguageIDDutch = 1043,
        msoLanguageIDDzongkhaBhutan = 2129,
        msoLanguageIDEdo = 1126,
        msoLanguageIDEnglishAUS = 3081,
        msoLanguageIDEnglishBelize = 10249,
        msoLanguageIDEnglishCanadian = 4105,
        msoLanguageIDEnglishCaribbean = 9225,
        msoLanguageIDEnglishIndonesia = 14345,
        msoLanguageIDEnglishIreland = 6153,
        msoLanguageIDEnglishJamaica = 8201,
        msoLanguageIDEnglishNewZealand = 5129,
        msoLanguageIDEnglishPhilippines = 13321,
        msoLanguageIDEnglishSouthAfrica = 7177,
        msoLanguageIDEnglishTrinidadTobago = 11273,
        msoLanguageIDEnglishUK = 2057,
        msoLanguageIDEnglishUS = 1033,
        msoLanguageIDEnglishZimbabwe = 12297,
        msoLanguageIDEstonian = 1061,
        msoLanguageIDFaeroese = 1080,
        msoLanguageIDFarsi = 1065,
        msoLanguageIDFilipino = 1124,
        msoLanguageIDFinnish = 1035,
        msoLanguageIDBelgianFrench = 2060,
        msoLanguageIDFrenchCameroon = 11276,
        msoLanguageIDFrenchCanadian = 3084,
        msoLanguageIDFrenchCotedIvoire = 12300,
        msoLanguageIDFrench = 1036,
        msoLanguageIDFrenchHaiti = 15372,
        msoLanguageIDFrenchLuxembourg = 5132,
        msoLanguageIDFrenchMali = 13324,
        msoLanguageIDFrenchMonaco = 6156,
        msoLanguageIDFrenchMorocco = 14348,
        msoLanguageIDFrenchReunion = 8204,
        msoLanguageIDFrenchSenegal = 10252,
        msoLanguageIDSwissFrench = 4108,
        msoLanguageIDFrenchWestIndies = 7180,
        msoLanguageIDFrenchZaire = 9228,
        msoLanguageIDFrisianNetherlands = 1122,
        msoLanguageIDFulfulde = 1127,
        msoLanguageIDGaelicIreland = 2108,
        msoLanguageIDGaelicScotland = 1084,
        msoLanguageIDGalician = 1110,
        msoLanguageIDGeorgian = 1079,
        msoLanguageIDGermanAustria = 3079,
        msoLanguageIDGerman = 1031,
        msoLanguageIDGermanLiechtenstein = 5127,
        msoLanguageIDGermanLuxembourg = 4103,
        msoLanguageIDSwissGerman = 2055,
        msoLanguageIDGreek = 1032,
        msoLanguageIDGuarani = 1140,
        msoLanguageIDGujarati = 1095,
        msoLanguageIDHausa = 1128,
        msoLanguageIDHawaiian = 1141,
        msoLanguageIDHebrew = 1037,
        msoLanguageIDHindi = 1081,
        msoLanguageIDHungarian = 1038,
        msoLanguageIDIbibio = 1129,
        msoLanguageIDIcelandic = 1039,
        msoLanguageIDIgbo = 1136,
        msoLanguageIDIndonesian = 1057,
        msoLanguageIDInuktitut = 1117,
        msoLanguageIDItalian = 1040,
        msoLanguageIDSwissItalian = 2064,
        msoLanguageIDJapanese = 1041,
        msoLanguageIDKannada = 1099,
        msoLanguageIDKanuri = 1137,
        msoLanguageIDKashmiri = 1120,
        msoLanguageIDKashmiriDevanagari = 2144,
        msoLanguageIDKazakh = 1087,
        msoLanguageIDKhmer = 1107,
        msoLanguageIDKirghiz = 1088,
        msoLanguageIDKonkani = 1111,
        msoLanguageIDKorean = 1042,
        msoLanguageIDKyrgyz = 1088,
        msoLanguageIDLatin = 1142,
        msoLanguageIDLao = 1108,
        msoLanguageIDLatvian = 1062,
        msoLanguageIDLithuanian = 1063,
        msoLanguageIDMacedonian = 1071,
        msoLanguageIDMalaysian = 1086,
        msoLanguageIDMalayBruneiDarussalam = 2110,
        msoLanguageIDMalayalam = 1100,
        msoLanguageIDMaltese = 1082,
        msoLanguageIDManipuri = 1112,
        msoLanguageIDMaori = 1153,
        msoLanguageIDMarathi = 1102,
        msoLanguageIDMongolian = 1104,
        msoLanguageIDNepali = 1121,
        msoLanguageIDNorwegianBokmol = 1044,
        msoLanguageIDNorwegianNynorsk = 2068,
        msoLanguageIDOriya = 1096,
        msoLanguageIDOromo = 1138,
        msoLanguageIDPashto = 1123,
        msoLanguageIDPolish = 1045,
        msoLanguageIDBrazilianPortuguese = 1046,
        msoLanguageIDPortuguese = 2070,
        msoLanguageIDPunjabi = 1094,
        msoLanguageIDQuechuaBolivia = 1131,
        msoLanguageIDQuechuaEcuador = 2155,
        msoLanguageIDQuechuaPeru = 3179,
        msoLanguageIDRhaetoRomanic = 1047,
        msoLanguageIDRomanianMoldova = 2072,
        msoLanguageIDRomanian = 1048,
        msoLanguageIDRussianMoldova = 2073,
        msoLanguageIDRussian = 1049,
        msoLanguageIDSamiLappish = 1083,
        msoLanguageIDSanskrit = 1103,
        msoLanguageIDSepedi = 1132,
        msoLanguageIDSerbianBosniaHerzegovinaCyrillic = 7194,
        msoLanguageIDSerbianBosniaHerzegovinaLatin = 6170,
        msoLanguageIDSerbianCyrillic = 3098,
        msoLanguageIDSerbianLatin = 2074,
        msoLanguageIDSesotho = 1072,
        msoLanguageIDSindhi = 1113,
        msoLanguageIDSindhiPakistan = 2137,
        msoLanguageIDSinhalese = 1115,
        msoLanguageIDSlovak = 1051,
        msoLanguageIDSlovenian = 1060,
        msoLanguageIDSomali = 1143,
        msoLanguageIDSorbian = 1070,
        msoLanguageIDSpanishArgentina = 11274,
        msoLanguageIDSpanishBolivia = 16394,
        msoLanguageIDSpanishChile = 13322,
        msoLanguageIDSpanishColombia = 9226,
        msoLanguageIDSpanishCostaRica = 5130,
        msoLanguageIDSpanishDominicanRepublic = 7178,
        msoLanguageIDSpanishEcuador = 12298,
        msoLanguageIDSpanishElSalvador = 17418,
        msoLanguageIDSpanishGuatemala = 4106,
        msoLanguageIDSpanishHonduras = 18442,
        msoLanguageIDMexicanSpanish = 2058,
        msoLanguageIDSpanishNicaragua = 19466,
        msoLanguageIDSpanishPanama = 6154,
        msoLanguageIDSpanishParaguay = 15370,
        msoLanguageIDSpanishPeru = 10250,
        msoLanguageIDSpanishPuertoRico = 20490,
        msoLanguageIDSpanishModernSort = 3082,
        msoLanguageIDSpanish = 1034,
        msoLanguageIDSpanishUruguay = 14346,
        msoLanguageIDSpanishVenezuela = 8202,
        msoLanguageIDSutu = 1072,
        msoLanguageIDSwahili = 1089,
        msoLanguageIDSwedishFinland = 2077,
        msoLanguageIDSwedish = 1053,
        msoLanguageIDSyriac = 1114,
        msoLanguageIDTajik = 1064,
        msoLanguageIDTamil = 1097,
        msoLanguageIDTamazight = 1119,
        msoLanguageIDTamazightLatin = 2143,
        msoLanguageIDTatar = 1092,
        msoLanguageIDTelugu = 1098,
        msoLanguageIDThai = 1054,
        msoLanguageIDTibetan = 1105,
        msoLanguageIDTigrignaEthiopic = 1139,
        msoLanguageIDTigrignaEritrea = 2163,
        msoLanguageIDTsonga = 1073,
        msoLanguageIDTswana = 1074,
        msoLanguageIDTurkish = 1055,
        msoLanguageIDTurkmen = 1090,
        msoLanguageIDUkrainian = 1058,
        msoLanguageIDUrdu = 1056,
        msoLanguageIDUzbekCyrillic = 2115,
        msoLanguageIDUzbekLatin = 1091,
        msoLanguageIDVenda = 1075,
        msoLanguageIDVietnamese = 1066,
        msoLanguageIDWelsh = 1106,
        msoLanguageIDXhosa = 1076,
        msoLanguageIDYi = 1144,
        msoLanguageIDYiddish = 1085,
        msoLanguageIDYoruba = 1130,
        msoLanguageIDZulu = 1077
    } MsoLanguageID;

	typedef enum {
        msoScreenSize544x376 = 0,
        msoScreenSize640x480 = 1,
        msoScreenSize720x512 = 2,
        msoScreenSize800x600 = 3,
        msoScreenSize1024x768 = 4,
        msoScreenSize1152x882 = 5,
        msoScreenSize1152x900 = 6,
        msoScreenSize1280x1024 = 7,
        msoScreenSize1600x1200 = 8,
        msoScreenSize1800x1440 = 9,
        msoScreenSize1920x1200 = 10
    } MsoScreenSize;

    typedef enum {
        msoCharacterSetArabic = 1,
        msoCharacterSetCyrillic = 2,
        msoCharacterSetEnglishWesternEuropeanOtherLatinScript = 3,
        msoCharacterSetGreek = 4,
        msoCharacterSetHebrew = 5,
        msoCharacterSetJapanese = 6,
        msoCharacterSetKorean = 7,
        msoCharacterSetMultilingualUnicode = 8,
        msoCharacterSetSimplifiedChinese = 9,
        msoCharacterSetThai = 10,
        msoCharacterSetTraditionalChinese = 11,
        msoCharacterSetVietnamese = 12
    } MsoCharacterSet;

    typedef enum {
        msoEncodingThai = 874,
        msoEncodingJapaneseShiftJIS = 932,
        msoEncodingSimplifiedChineseGBK = 936,
        msoEncodingKorean = 949,
        msoEncodingTraditionalChineseBig5 = 950,
        msoEncodingUnicodeLittleEndian = 1200,
        msoEncodingUnicodeBigEndian = 1201,
        msoEncodingCentralEuropean = 1250,
        msoEncodingCyrillic = 1251,
        msoEncodingWestern = 1252,
        msoEncodingGreek = 1253,
        msoEncodingTurkish = 1254,
        msoEncodingHebrew = 1255,
        msoEncodingArabic = 1256,
        msoEncodingBaltic = 1257,
        msoEncodingVietnamese = 1258,
        msoEncodingAutoDetect = 50001,
        msoEncodingJapaneseAutoDetect = 50932,
        msoEncodingSimplifiedChineseAutoDetect = 50936,
        msoEncodingKoreanAutoDetect = 50949,
        msoEncodingTraditionalChineseAutoDetect = 50950,
        msoEncodingCyrillicAutoDetect = 51251,
        msoEncodingGreekAutoDetect = 51253,
        msoEncodingArabicAutoDetect = 51256,
        msoEncodingISO88591Latin1 = 28591,
        msoEncodingISO88592CentralEurope = 28592,
        msoEncodingISO88593Latin3 = 28593,
        msoEncodingISO88594Baltic = 28594,
        msoEncodingISO88595Cyrillic = 28595,
        msoEncodingISO88596Arabic = 28596,
        msoEncodingISO88597Greek = 28597,
        msoEncodingISO88598Hebrew = 28598,
        msoEncodingISO88599Turkish = 28599,
        msoEncodingISO885915Latin9 = 28605,
        msoEncodingISO88598HebrewLogical = 38598,
        msoEncodingISO2022JPNoHalfwidthKatakana = 50220,
        msoEncodingISO2022JPJISX02021984 = 50221,
        msoEncodingISO2022JPJISX02011989 = 50222,
        msoEncodingISO2022KR = 50225,
        msoEncodingISO2022CNTraditionalChinese = 50227,
        msoEncodingISO2022CNSimplifiedChinese = 50229,
        msoEncodingMacRoman = 10000,
        msoEncodingMacJapanese = 10001,
        msoEncodingMacTraditionalChineseBig5 = 10002,
        msoEncodingMacKorean = 10003,
        msoEncodingMacArabic = 10004,
        msoEncodingMacHebrew = 10005,
        msoEncodingMacGreek1 = 10006,
        msoEncodingMacCyrillic = 10007,
        msoEncodingMacSimplifiedChineseGB2312 = 10008,
        msoEncodingMacRomania = 10010,
        msoEncodingMacUkraine = 10017,
        msoEncodingMacLatin2 = 10029,
        msoEncodingMacIcelandic = 10079,
        msoEncodingMacTurkish = 10081,
        msoEncodingMacCroatia = 10082,
        msoEncodingEBCDICUSCanada = 37,
        msoEncodingEBCDICInternational = 500,
        msoEncodingEBCDICMultilingualROECELatin2 = 870,
        msoEncodingEBCDICGreekModern = 875,
        msoEncodingEBCDICTurkishLatin5 = 1026,
        msoEncodingEBCDICGermany = 20273,
        msoEncodingEBCDICDenmarkNorway = 20277,
        msoEncodingEBCDICFinlandSweden = 20278,
        msoEncodingEBCDICItaly = 20280,
        msoEncodingEBCDICLatinAmericaSpain = 20284,
        msoEncodingEBCDICUnitedKingdom = 20285,
        msoEncodingEBCDICJapaneseKatakanaExtended = 20290,
        msoEncodingEBCDICFrance = 20297,
        msoEncodingEBCDICArabic = 20420,
        msoEncodingEBCDICGreek = 20423,
        msoEncodingEBCDICHebrew = 20424,
        msoEncodingEBCDICKoreanExtended = 20833,
        msoEncodingEBCDICThai = 20838,
        msoEncodingEBCDICIcelandic = 20871,
        msoEncodingEBCDICTurkish = 20905,
        msoEncodingEBCDICRussian = 20880,
        msoEncodingEBCDICSerbianBulgarian = 21025,
        msoEncodingEBCDICJapaneseKatakanaExtendedAndJapanese = 50930,
        msoEncodingEBCDICUSCanadaAndJapanese = 50931,
        msoEncodingEBCDICKoreanExtendedAndKorean = 50933,
        msoEncodingEBCDICSimplifiedChineseExtendedAndSimplifiedChinese = 50935,
        msoEncodingEBCDICUSCanadaAndTraditionalChinese = 50937,
        msoEncodingEBCDICJapaneseLatinExtendedAndJapanese = 50939,
        msoEncodingOEMUnitedStates = 437,
        msoEncodingOEMGreek437G = 737,
        msoEncodingOEMBaltic = 775,
        msoEncodingOEMMultilingualLatinI = 850,
        msoEncodingOEMMultilingualLatinII = 852,
        msoEncodingOEMCyrillic = 855,
        msoEncodingOEMTurkish = 857,
        msoEncodingOEMPortuguese = 860,
        msoEncodingOEMIcelandic = 861,
        msoEncodingOEMHebrew = 862,
        msoEncodingOEMCanadianFrench = 863,
        msoEncodingOEMArabic = 864,
        msoEncodingOEMNordic = 865,
        msoEncodingOEMCyrillicII = 866,
        msoEncodingOEMModernGreek = 869,
        msoEncodingEUCJapanese = 51932,
        msoEncodingEUCChineseSimplifiedChinese = 51936,
        msoEncodingEUCKorean = 51949,
        msoEncodingEUCTaiwaneseTraditionalChinese = 51950,
        msoEncodingISCIIDevanagari = 57002,
        msoEncodingISCIIBengali = 57003,
        msoEncodingISCIITamil = 57004,
        msoEncodingISCIITelugu = 57005,
        msoEncodingISCIIAssamese = 57006,
        msoEncodingISCIIOriya = 57007,
        msoEncodingISCIIKannada = 57008,
        msoEncodingISCIIMalayalam = 57009,
        msoEncodingISCIIGujarati = 57010,
        msoEncodingISCIIPunjabi = 57011,
        msoEncodingArabicASMO = 708,
        msoEncodingArabicTransparentASMO = 720,
        msoEncodingKoreanJohab = 1361,
        msoEncodingTaiwanCNS = 20000,
        msoEncodingTaiwanTCA = 20001,
        msoEncodingTaiwanEten = 20002,
        msoEncodingTaiwanIBM5550 = 20003,
        msoEncodingTaiwanTeleText = 20004,
        msoEncodingTaiwanWang = 20005,
        msoEncodingIA5IRV = 20105,
        msoEncodingIA5German = 20106,
        msoEncodingIA5Swedish = 20107,
        msoEncodingIA5Norwegian = 20108,
        msoEncodingUSASCII = 20127,
        msoEncodingT61 = 20261,
        msoEncodingISO6937NonSpacingAccent = 20269,
        msoEncodingKOI8R = 20866,
        msoEncodingExtAlphaLowercase = 21027,
        msoEncodingKOI8U = 21866,
        msoEncodingEuropa3 = 29001,
        msoEncodingHZGBSimplifiedChinese = 52936,
        msoEncodingSimplifiedChineseGB18030 = 54936,
        msoEncodingUTF7 = 65000,
        msoEncodingUTF8 = 65001
    } MsoEncoding;

	typedef enum {
        msoFileDialogOpen = 1,
        msoFileDialogSaveAs = 2,
        msoFileDialogFilePicker = 3,
        msoFileDialogFolderPicker = 4
    } MsoFileDialogType;

    typedef enum {
        msoFileDialogViewList = 1,
        msoFileDialogViewDetails = 2,
        msoFileDialogViewProperties = 3,
        msoFileDialogViewPreview = 4,
        msoFileDialogViewThumbnail = 5,
        msoFileDialogViewLargeIcons = 6,
        msoFileDialogViewSmallIcons = 7,
        msoFileDialogViewWebView = 8,
        msoFileDialogViewTiles = 9
    } MsoFileDialogView;

	typedef enum {
        mfPlainText = 1,
        mfHTML = 2,
        mfRTF = 3
    } MailFormat;

	typedef enum {
        msoSearchInMyComputer = 0,
        msoSearchInOutlook = 1,
        msoSearchInMyNetworkPlaces = 2,
        msoSearchInCustom = 3
    } MsoSearchIn;

    typedef enum {
        msoTargetBrowserV3 = 0,
        msoTargetBrowserV4 = 1,
        msoTargetBrowserIE4 = 2,
        msoTargetBrowserIE5 = 3,
        msoTargetBrowserIE6 = 4
    } MsoTargetBrowser;

	typedef enum {
        msoOrgChartOrientationMixed = 0xfffffffe,
        msoOrgChartOrientationVertical = 1
    } MsoOrgChartOrientation;

    typedef enum {
        msoOrgChartLayoutMixed = 0xfffffffe,
        msoOrgChartLayoutStandard = 1,
        msoOrgChartLayoutBothHanging = 2,
        msoOrgChartLayoutLeftHanging = 3,
        msoOrgChartLayoutRightHanging = 4
    } MsoOrgChartLayoutType;

    typedef enum {
        msoBeforeNode = 1,
        msoAfterNode = 2,
        msoBeforeFirstSibling = 3,
        msoAfterLastSibling = 4
    } MsoRelativeNodePosition;

    

    typedef enum {
        msoDiagramNode = 1,
        msoDiagramAssistant = 2
    } MsoDiagramNodeType;

	typedef enum {
        msoSyncVersionLastViewed = 0,
        msoSyncVersionServer = 1
    } MsoSyncVersionType;

    typedef enum {
        msoSyncConflictClientWins = 0,
        msoSyncConflictServerWins = 1,
        msoSyncConflictMerge = 2
    } MsoSyncConflictResolutionType;

    typedef enum {
        msoSyncCompareAndMerge = 0,
        msoSyncCompareSideBySide = 1
    } MsoSyncCompareType;

    typedef enum {
        msoSyncAvailableNone = 0,
        msoSyncAvailableOffline = 1,
        msoSyncAvailableAnywhere = 2
    } MsoSyncAvailableType;

    typedef enum {
        msoSyncEventDownloadInitiated = 0,
        msoSyncEventDownloadSucceeded = 1,
        msoSyncEventDownloadFailed = 2,
        msoSyncEventUploadInitiated = 3,
        msoSyncEventUploadSucceeded = 4,
        msoSyncEventUploadFailed = 5,
        msoSyncEventDownloadNoChange = 6,
        msoSyncEventOffline = 7
    } MsoSyncEventType;

    typedef enum {
        msoSyncErrorNone = 0,
        msoSyncErrorUnauthorizedUser = 1,
        msoSyncErrorCouldNotConnect = 2,
        msoSyncErrorOutOfSpace = 3,
        msoSyncErrorFileNotFound = 4,
        msoSyncErrorFileTooLarge = 5,
        msoSyncErrorFileInUse = 6,
        msoSyncErrorVirusUpload = 7,
        msoSyncErrorVirusDownload = 8,
        msoSyncErrorUnknownUpload = 9,
        msoSyncErrorUnknownDownload = 10,
        msoSyncErrorCouldNotOpen = 11,
        msoSyncErrorCouldNotUpdate = 12,
        msoSyncErrorCouldNotCompare = 13,
        msoSyncErrorCouldNotResolve = 14,
        msoSyncErrorNoNetwork = 15,
        msoSyncErrorUnknown = 16
    } MsoSyncErrorType;

    typedef enum {
        msoSyncStatusNoSharedWorkspace = 0,
        msoSyncStatusLatest = 1,
        msoSyncStatusNewerAvailable = 2,
        msoSyncStatusLocalChanges = 3,
        msoSyncStatusConflict = 4,
        msoSyncStatusSuspended = 5,
        msoSyncStatusError = 6
    } MsoSyncStatusType;

	typedef enum {
        msoPermissionView = 1,
        msoPermissionRead = 1,
        msoPermissionEdit = 2,
        msoPermissionSave = 4,
        msoPermissionExtract = 8,
        msoPermissionChange = 15,
        msoPermissionPrint = 16,
        msoPermissionObjModel = 32,
        msoPermissionFullControl = 64
    } MsoPermission;

	typedef enum {
        wdTextRectangle = 0,
        wdShapeRectangle = 1,
        wdMarkupRectangle = 2,
        wdMarkupRectangleButton = 3,
        wdPageBorderRectangle = 4,
        wdLineBetweenColumnRectangle = 5,
        wdSelection = 6,
        wdSystem = 7
    } WdRectangleType;

    typedef enum {
        wdTextLine = 0,
        wdTableRow = 1
    } WdLineType;

    typedef enum {
        wdXMLNodeElement = 1,
        wdXMLNodeAttribute = 2
    } WdXMLNodeType;

    typedef enum {
        wdXMLSelectionChangeReasonMove = 0,
        wdXMLSelectionChangeReasonInsert = 1,
        wdXMLSelectionChangeReasonDelete = 2
    } WdXMLSelectionChangeReason;

    typedef enum {
        wdXMLNodeLevelInline = 0,
        wdXMLNodeLevelParagraph = 1,
        wdXMLNodeLevelRow = 2,
        wdXMLNodeLevelCell = 3
    } WdXMLNodeLevel;

    typedef enum {
        wdControlSmartTag = 1,
        wdControlLink = 2,
        wdControlHelp = 3,
        wdControlHelpURL = 4,
        wdControlSeparator = 5,
        wdControlButton = 6,
        wdControlLabel = 7,
        wdControlImage = 8,
        wdControlCheckbox = 9,
        wdControlTextbox = 10,
        wdControlListbox = 11,
        wdControlCombo = 12,
        wdControlActiveX = 13,
        wdControlDocumentFragment = 14,
        wdControlDocumentFragmentURL = 15,
        wdControlRadioGroup = 16
    } WdSmartTagControlType;

    typedef enum {
        wdEditorEveryone = 0xffffffff,
        wdEditorOwners = 0xfffffffc,
        wdEditorEditors = 0xfffffffb,
        wdEditorCurrent = 0xfffffffa
    } WdEditorType;

    typedef enum {
        wdXMLValidationStatusOK = 0,
        wdXMLValidationStatusCustom = 0xc00ce000
    } WdXMLValidationStatus;

    [
      odl,
      uuid(00020970-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000970),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _Application : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09700000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000006), propget, helpcontext(0x09700006)]
        HRESULT Documents([out, retval] Documents** prop);
        [id(0x00000002), propget, helpcontext(0x09700002)]
        HRESULT Windows([out, retval] Windows** prop);
        [id(0x00000003), propget, helpcontext(0x09700003)]
        HRESULT ActiveDocument([out, retval] _Document** prop);
        [id(0x00000004), propget, helpcontext(0x09700004)]
        HRESULT ActiveWindow([out, retval] Window** prop);
        [id(0x00000005), propget, helpcontext(0x09700005)]
        HRESULT Selection([out, retval] Selection** prop);
        [id(0x00000001), propget, helpcontext(0x09700001)]
        HRESULT WordBasic([out, retval] IDispatch** prop);
        [id(0x00000007), propget, helpcontext(0x09700007)]
        HRESULT RecentFiles([out, retval] RecentFiles** prop);
        [id(0x00000008), propget, helpcontext(0x09700008)]
        HRESULT NormalTemplate([out, retval] Template** prop);
        [id(0x00000009), propget, helpcontext(0x09700009)]
        HRESULT System([out, retval] System** prop);
        [id(0x0000000a), propget, helpcontext(0x0970000a)]
        HRESULT AutoCorrect([out, retval] AutoCorrect** prop);
        [id(0x0000000b), propget, helpcontext(0x0970000b)]
        HRESULT FontNames([out, retval] FontNames** prop);
        [id(0x0000000c), propget, helpcontext(0x0970000c)]
        HRESULT LandscapeFontNames([out, retval] FontNames** prop);
        [id(0x0000000d), propget, helpcontext(0x0970000d)]
        HRESULT PortraitFontNames([out, retval] FontNames** prop);
        [id(0x0000000e), propget, helpcontext(0x0970000e)]
        HRESULT Languages([out, retval] Languages** prop);
        [id(0x0000000f), propget, helpcontext(0x0970000f)]
        HRESULT Assistant([out, retval] Assistant** prop);
        [id(0x00000010), propget, helpcontext(0x09700010)]
        HRESULT Browser([out, retval] Browser** prop);
        [id(0x00000011), propget, helpcontext(0x09700011)]
        HRESULT FileConverters([out, retval] FileConverters** prop);
        [id(0x00000012), propget, helpcontext(0x09700012)]
        HRESULT MailingLabel([out, retval] MailingLabel** prop);
        [id(0x00000013), propget, helpcontext(0x09700013)]
        HRESULT Dialogs([out, retval] Dialogs** prop);
        [id(0x00000014), propget, helpcontext(0x09700014)]
        HRESULT CaptionLabels([out, retval] CaptionLabels** prop);
        [id(0x00000015), propget, helpcontext(0x09700015)]
        HRESULT AutoCaptions([out, retval] AutoCaptions** prop);
        [id(0x00000016), propget, helpcontext(0x09700016)]
        HRESULT AddIns([out, retval] AddIns** prop);
        [id(0x00000017), propget, helpcontext(0x09700017)]
        HRESULT Visible([out, retval] VARIANT_BOOL* prop);
        [id(0x00000017), propput, helpcontext(0x09700017)]
        HRESULT Visible([in] VARIANT_BOOL prop);
        [id(0x00000018), propget, helpcontext(0x09700018)]
        HRESULT Version([out, retval] BSTR* prop);
        [id(0x0000001a), propget, helpcontext(0x0970001a)]
        HRESULT ScreenUpdating([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001a), propput, helpcontext(0x0970001a)]
        HRESULT ScreenUpdating([in] VARIANT_BOOL prop);
        [id(0x0000001b), propget, helpcontext(0x0970001b)]
        HRESULT PrintPreview([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001b), propput, helpcontext(0x0970001b)]
        HRESULT PrintPreview([in] VARIANT_BOOL prop);
        [id(0x0000001c), propget, helpcontext(0x0970001c)]
        HRESULT Tasks([out, retval] Tasks** prop);
        [id(0x0000001d), propget, helpcontext(0x0970001d)]
        HRESULT DisplayStatusBar([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001d), propput, helpcontext(0x0970001d)]
        HRESULT DisplayStatusBar([in] VARIANT_BOOL prop);
        [id(0x0000001e), propget, helpcontext(0x0970001e)]
        HRESULT SpecialMode([out, retval] VARIANT_BOOL* prop);
        [id(0x00000021), propget, helpcontext(0x09700021)]
        HRESULT UsableWidth([out, retval] long* prop);
        [id(0x00000022), propget, helpcontext(0x09700022)]
        HRESULT UsableHeight([out, retval] long* prop);
        [id(0x00000024), propget, helpcontext(0x09700024)]
        HRESULT MathCoprocessorAvailable([out, retval] VARIANT_BOOL* prop);
        [id(0x00000025), propget, helpcontext(0x09700025)]
        HRESULT MouseAvailable([out, retval] VARIANT_BOOL* prop);
        [id(0x0000002e), propget, helpcontext(0x0970002e)]
        HRESULT International(
                        [in] WdInternationalIndex Index, 
                        [out, retval] VARIANT* prop);
        [id(0x0000002f), propget, helpcontext(0x0970002f)]
        HRESULT Build([out, retval] BSTR* prop);
        [id(0x00000030), propget, helpcontext(0x09700030)]
        HRESULT CapsLock([out, retval] VARIANT_BOOL* prop);
        [id(0x00000031), propget, helpcontext(0x09700031)]
        HRESULT NumLock([out, retval] VARIANT_BOOL* prop);
        [id(0x00000034), propget, helpcontext(0x09700034)]
        HRESULT UserName([out, retval] BSTR* prop);
        [id(0x00000034), propput, helpcontext(0x09700034)]
        HRESULT UserName([in] BSTR prop);
        [id(0x00000035), propget, helpcontext(0x09700035)]
        HRESULT UserInitials([out, retval] BSTR* prop);
        [id(0x00000035), propput, helpcontext(0x09700035)]
        HRESULT UserInitials([in] BSTR prop);
        [id(0x00000036), propget, helpcontext(0x09700036)]
        HRESULT UserAddress([out, retval] BSTR* prop);
        [id(0x00000036), propput, helpcontext(0x09700036)]
        HRESULT UserAddress([in] BSTR prop);
        [id(0x00000037), propget, helpcontext(0x09700037)]
        HRESULT MacroContainer([out, retval] IDispatch** prop);
        [id(0x00000038), propget, helpcontext(0x09700038)]
        HRESULT DisplayRecentFiles([out, retval] VARIANT_BOOL* prop);
        [id(0x00000038), propput, helpcontext(0x09700038)]
        HRESULT DisplayRecentFiles([in] VARIANT_BOOL prop);
        [id(0x00000039), propget, helpcontext(0x09700039)]
        HRESULT CommandBars([out, retval] CommandBars** prop);
        [id(0x0000003b), propget, helpcontext(0x0970003b)]
        HRESULT SynonymInfo(
                        [in] BSTR Word, 
                        [in, optional] VARIANT* LanguageID, 
                        [out, retval] SynonymInfo** prop);
        [id(0x0000003d), propget, helpcontext(0x0970003d)]
        HRESULT VBE([out, retval] /*VBE*/IUnknown** prop);
        [id(0x00000040), propget, helpcontext(0x09700040)]
        HRESULT DefaultSaveFormat([out, retval] BSTR* prop);
        [id(0x00000040), propput, helpcontext(0x09700040)]
        HRESULT DefaultSaveFormat([in] BSTR prop);
        [id(0x00000041), propget, helpcontext(0x09700041)]
        HRESULT ListGalleries([out, retval] ListGalleries** prop);
        [id(0x00000042), propget, helpcontext(0x09700042)]
        HRESULT ActivePrinter([out, retval] BSTR* prop);
        [id(0x00000042), propput, helpcontext(0x09700042)]
        HRESULT ActivePrinter([in] BSTR prop);
        [id(0x00000043), propget, helpcontext(0x09700043)]
        HRESULT Templates([out, retval] Templates** prop);
        [id(0x00000044), propget, helpcontext(0x09700044)]
        HRESULT CustomizationContext([out, retval] IDispatch** prop);
        [id(0x00000044), propput, helpcontext(0x09700044)]
        HRESULT CustomizationContext([in] IDispatch* prop);
        [id(0x00000045), propget, helpcontext(0x09700045)]
        HRESULT KeyBindings([out, retval] KeyBindings** prop);
        [id(0x00000046), propget, helpcontext(0x09700046)]
        HRESULT KeysBoundTo(
                        [in] WdKeyCategory KeyCategory, 
                        [in] BSTR Command, 
                        [in, optional] VARIANT* CommandParameter, 
                        [out, retval] KeysBoundTo** prop);
        [id(0x00000047), propget, helpcontext(0x09700047)]
        HRESULT FindKey(
                        [in] long KeyCode, 
                        [in, optional] VARIANT* KeyCode2, 
                        [out, retval] KeyBinding** prop);
        [id(0x00000050), propget, helpcontext(0x09700050)]
        HRESULT Caption([out, retval] BSTR* prop);
        [id(0x00000050), propput, helpcontext(0x09700050)]
        HRESULT Caption([in] BSTR prop);
        [id(0x00000051), propget, helpcontext(0x09700051)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000052), propget, helpcontext(0x09700052)]
        HRESULT DisplayScrollBars([out, retval] VARIANT_BOOL* prop);
        [id(0x00000052), propput, helpcontext(0x09700052)]
        HRESULT DisplayScrollBars([in] VARIANT_BOOL prop);
        [id(0x00000053), propget, helpcontext(0x09700053)]
        HRESULT StartupPath([out, retval] BSTR* prop);
        [id(0x00000053), propput, helpcontext(0x09700053)]
        HRESULT StartupPath([in] BSTR prop);
        [id(0x00000055), propget, helpcontext(0x09700055)]
        HRESULT BackgroundSavingStatus([out, retval] long* prop);
        [id(0x00000056), propget, helpcontext(0x09700056)]
        HRESULT BackgroundPrintingStatus([out, retval] long* prop);
        [id(0x00000057), propget, helpcontext(0x09700057)]
        HRESULT Left([out, retval] long* prop);
        [id(0x00000057), propput, helpcontext(0x09700057)]
        HRESULT Left([in] long prop);
        [id(0x00000058), propget, helpcontext(0x09700058)]
        HRESULT Top([out, retval] long* prop);
        [id(0x00000058), propput, helpcontext(0x09700058)]
        HRESULT Top([in] long prop);
        [id(0x00000059), propget, helpcontext(0x09700059)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000059), propput, helpcontext(0x09700059)]
        HRESULT Width([in] long prop);
        [id(0x0000005a), propget, helpcontext(0x0970005a)]
        HRESULT Height([out, retval] long* prop);
        [id(0x0000005a), propput, helpcontext(0x0970005a)]
        HRESULT Height([in] long prop);
        [id(0x0000005b), propget, helpcontext(0x0970005b)]
        HRESULT WindowState([out, retval] WdWindowState* prop);
        [id(0x0000005b), propput, helpcontext(0x0970005b)]
        HRESULT WindowState([in] WdWindowState prop);
        [id(0x0000005c), propget, helpcontext(0x0970005c)]
        HRESULT DisplayAutoCompleteTips([out, retval] VARIANT_BOOL* prop);
        [id(0x0000005c), propput, helpcontext(0x0970005c)]
        HRESULT DisplayAutoCompleteTips([in] VARIANT_BOOL prop);
        [id(0x0000005d), propget, helpcontext(0x0970005d)]
        HRESULT Options([out, retval] Options** prop);
        [id(0x0000005e), propget, helpcontext(0x0970005e)]
        HRESULT DisplayAlerts([out, retval] WdAlertLevel* prop);
        [id(0x0000005e), propput, helpcontext(0x0970005e)]
        HRESULT DisplayAlerts([in] WdAlertLevel prop);
        [id(0x0000005f), propget, helpcontext(0x0970005f)]
        HRESULT CustomDictionaries([out, retval] Dictionaries** prop);
        [id(0x00000060), propget, helpcontext(0x09700060)]
        HRESULT PathSeparator([out, retval] BSTR* prop);
        [id(0x00000061), propput, helpcontext(0x09700061)]
        HRESULT StatusBar([in] BSTR rhs);
        [id(0x00000062), propget, helpcontext(0x09700062)]
        HRESULT MAPIAvailable([out, retval] VARIANT_BOOL* prop);
        [id(0x00000063), propget, helpcontext(0x09700063)]
        HRESULT DisplayScreenTips([out, retval] VARIANT_BOOL* prop);
        [id(0x00000063), propput, helpcontext(0x09700063)]
        HRESULT DisplayScreenTips([in] VARIANT_BOOL prop);
        [id(0x00000064), propget, helpcontext(0x09700064)]
        HRESULT EnableCancelKey([out, retval] WdEnableCancelKey* prop);
        [id(0x00000064), propput, helpcontext(0x09700064)]
        HRESULT EnableCancelKey([in] WdEnableCancelKey prop);
        [id(0x00000065), propget, helpcontext(0x09700065)]
        HRESULT UserControl([out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), propget, helpcontext(0x09700067)]
        HRESULT FileSearch([out, retval] FileSearch** prop);
        [id(0x00000068), propget, helpcontext(0x09700068)]
        HRESULT MailSystem([out, retval] WdMailSystem* prop);
        [id(0x00000069), propget, helpcontext(0x09700069)]
        HRESULT DefaultTableSeparator([out, retval] BSTR* prop);
        [id(0x00000069), propput, helpcontext(0x09700069)]
        HRESULT DefaultTableSeparator([in] BSTR prop);
        [id(0x0000006a), propget, helpcontext(0x0970006a)]
        HRESULT ShowVisualBasicEditor([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006a), propput, helpcontext(0x0970006a)]
        HRESULT ShowVisualBasicEditor([in] VARIANT_BOOL prop);
        [id(0x0000006c), propget, helpcontext(0x0970006c)]
        HRESULT BrowseExtraFileTypes([out, retval] BSTR* prop);
        [id(0x0000006c), propput, helpcontext(0x0970006c)]
        HRESULT BrowseExtraFileTypes([in] BSTR prop);
        [id(0x0000006d), propget, helpcontext(0x0970006d)]
        HRESULT IsObjectValid(
                        [in] IDispatch* Object, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000006e), propget, helpcontext(0x0970006e)]
        HRESULT HangulHanjaDictionaries([out, retval] HangulHanjaConversionDictionaries** prop);
        [id(0x0000015c), propget, helpcontext(0x0970015c)]
        HRESULT MailMessage([out, retval] MailMessage** prop);
        [id(0x00000182), propget, helpcontext(0x09700182)]
        HRESULT FocusInMailHeader([out, retval] VARIANT_BOOL* prop);
        [id(0x00000451), helpcontext(0x09700451)]
        HRESULT Quit(
                        [in, optional] VARIANT* SaveChanges, 
                        [in, optional] VARIANT* OriginalFormat, 
                        [in, optional] VARIANT* RouteDocument);
        [id(0x0000012d), helpcontext(0x0970012d)]
        HRESULT ScreenRefresh();
        [id(0x0000012e), hidden, helpcontext(0x0970012e)]
        HRESULT PrintOutOld(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* FileName, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint);
        [id(0x0000012f), helpcontext(0x0970012f)]
        HRESULT LookupNameProperties([in] BSTR Name);
        [id(0x00000130), helpcontext(0x09700130)]
        HRESULT SubstituteFont(
                        [in] BSTR UnavailableFont, 
                        [in] BSTR SubstituteFont);
        [id(0x00000131), helpcontext(0x09700131)]
        HRESULT Repeat(
                        [in, optional] VARIANT* Times, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000136), helpcontext(0x09700136)]
        HRESULT DDEExecute(
                        [in] long Channel, 
                        [in] BSTR Command);
        [id(0x00000137), helpcontext(0x09700137)]
        HRESULT DDEInitiate(
                        [in] BSTR App, 
                        [in] BSTR Topic, 
                        [out, retval] long* prop);
        [id(0x00000138), helpcontext(0x09700138)]
        HRESULT DDEPoke(
                        [in] long Channel, 
                        [in] BSTR Item, 
                        [in] BSTR Data);
        [id(0x00000139), helpcontext(0x09700139)]
        HRESULT DDERequest(
                        [in] long Channel, 
                        [in] BSTR Item, 
                        [out, retval] BSTR* prop);
        [id(0x0000013a), helpcontext(0x0970013a)]
        HRESULT DDETerminate([in] long Channel);
        [id(0x0000013b), helpcontext(0x0970013b)]
        HRESULT DDETerminateAll();
        [id(0x0000013c), helpcontext(0x0970013c)]
        HRESULT BuildKeyCode(
                        [in] WdKey Arg1, 
                        [in, optional] VARIANT* Arg2, 
                        [in, optional] VARIANT* Arg3, 
                        [in, optional] VARIANT* Arg4, 
                        [out, retval] long* prop);
        [id(0x0000013d), helpcontext(0x0970013d)]
        HRESULT KeyString(
                        [in] long KeyCode, 
                        [in, optional] VARIANT* KeyCode2, 
                        [out, retval] BSTR* prop);
        [id(0x0000013e), helpcontext(0x0970013e)]
        HRESULT OrganizerCopy(
                        [in] BSTR Source, 
                        [in] BSTR Destination, 
                        [in] BSTR Name, 
                        [in] WdOrganizerObject Object);
        [id(0x0000013f), helpcontext(0x0970013f)]
        HRESULT OrganizerDelete(
                        [in] BSTR Source, 
                        [in] BSTR Name, 
                        [in] WdOrganizerObject Object);
        [id(0x00000140), helpcontext(0x09700140)]
        HRESULT OrganizerRename(
                        [in] BSTR Source, 
                        [in] BSTR Name, 
                        [in] BSTR NewName, 
                        [in] WdOrganizerObject Object);
        [id(0x00000141), helpcontext(0x09700141)]
        HRESULT AddAddress(
                        [in] SAFEARRAY(BSTR)* TagID, 
                        [in] SAFEARRAY(BSTR)* Value);
        [id(0x00000142), helpcontext(0x09700142)]
        HRESULT GetAddress(
                        [in, optional] VARIANT* Name, 
                        [in, optional] VARIANT* AddressProperties, 
                        [in, optional] VARIANT* UseAutoText, 
                        [in, optional] VARIANT* DisplaySelectDialog, 
                        [in, optional] VARIANT* SelectDialog, 
                        [in, optional] VARIANT* CheckNamesDialog, 
                        [in, optional] VARIANT* RecentAddressesChoice, 
                        [in, optional] VARIANT* UpdateRecentAddresses, 
                        [out, retval] BSTR* prop);
        [id(0x00000143), helpcontext(0x09700143)]
        HRESULT CheckGrammar(
                        [in] BSTR String, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000144), helpcontext(0x09700144)]
        HRESULT CheckSpelling(
                        [in] BSTR Word, 
                        [in, optional] VARIANT* CustomDictionary, 
                        [in, optional] VARIANT* IgnoreUppercase, 
                        [in, optional] VARIANT* MainDictionary, 
                        [in, optional] VARIANT* CustomDictionary2, 
                        [in, optional] VARIANT* CustomDictionary3, 
                        [in, optional] VARIANT* CustomDictionary4, 
                        [in, optional] VARIANT* CustomDictionary5, 
                        [in, optional] VARIANT* CustomDictionary6, 
                        [in, optional] VARIANT* CustomDictionary7, 
                        [in, optional] VARIANT* CustomDictionary8, 
                        [in, optional] VARIANT* CustomDictionary9, 
                        [in, optional] VARIANT* CustomDictionary10, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000146), helpcontext(0x09700146)]
        HRESULT ResetIgnoreAll();
        [id(0x00000147), helpcontext(0x09700147)]
        HRESULT GetSpellingSuggestions(
                        [in] BSTR Word, 
                        [in, optional] VARIANT* CustomDictionary, 
                        [in, optional] VARIANT* IgnoreUppercase, 
                        [in, optional] VARIANT* MainDictionary, 
                        [in, optional] VARIANT* SuggestionMode, 
                        [in, optional] VARIANT* CustomDictionary2, 
                        [in, optional] VARIANT* CustomDictionary3, 
                        [in, optional] VARIANT* CustomDictionary4, 
                        [in, optional] VARIANT* CustomDictionary5, 
                        [in, optional] VARIANT* CustomDictionary6, 
                        [in, optional] VARIANT* CustomDictionary7, 
                        [in, optional] VARIANT* CustomDictionary8, 
                        [in, optional] VARIANT* CustomDictionary9, 
                        [in, optional] VARIANT* CustomDictionary10, 
                        [out, retval] SpellingSuggestions** prop);
        [id(0x00000148), helpcontext(0x09700148)]
        HRESULT GoBack();
        [id(0x00000149), helpcontext(0x09700149)]
        HRESULT Help([in] VARIANT* HelpType);
        [id(0x0000014a), helpcontext(0x0970014a)]
        HRESULT AutomaticChange();
        [id(0x0000014b), helpcontext(0x0970014b)]
        HRESULT ShowMe();
        [id(0x0000014c), helpcontext(0x0970014c)]
        HRESULT HelpTool();
        [id(0x00000159), helpcontext(0x09700159)]
        HRESULT NewWindow([out, retval] Window** prop);
        [id(0x0000015a), helpcontext(0x0970015a)]
        HRESULT ListCommands([in] VARIANT_BOOL ListAllCommands);
        [id(0x0000015d), helpcontext(0x0970015d)]
        HRESULT ShowClipboard();
        [id(0x0000015e), helpcontext(0x0970015e)]
        HRESULT OnTime(
                        [in] VARIANT* When, 
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Tolerance);
        [id(0x0000015f), helpcontext(0x0970015f)]
        HRESULT NextLetter();
        [id(0x00000161), helpcontext(0x09700161)]
        HRESULT MountVolume(
                        [in] BSTR Zone, 
                        [in] BSTR Server, 
                        [in] BSTR Volume, 
                        [in, optional] VARIANT* User, 
                        [in, optional] VARIANT* UserPassword, 
                        [in, optional] VARIANT* VolumePassword, 
                        [out, retval] short* prop);
        [id(0x00000162), helpcontext(0x09700162)]
        HRESULT CleanString(
                        [in] BSTR String, 
                        [out, retval] BSTR* prop);
        [id(0x00000164), helpcontext(0x09700164)]
        HRESULT SendFax();
        [id(0x00000165), helpcontext(0x09700165)]
        HRESULT ChangeFileOpenDirectory([in] BSTR Path);
        [id(0x00000166), hidden, helpcontext(0x09700166)]
        HRESULT RunOld([in] BSTR MacroName);
        [id(0x00000167), helpcontext(0x09700167)]
        HRESULT GoForward();
        [id(0x00000168), helpcontext(0x09700168)]
        HRESULT Move(
                        [in] long Left, 
                        [in] long Top);
        [id(0x00000169), helpcontext(0x09700169)]
        HRESULT Resize(
                        [in] long Width, 
                        [in] long Height);
        [id(0x00000172), helpcontext(0x09700172)]
        HRESULT InchesToPoints(
                        [in] int Inches, 
                        [out, retval] /*single*/void* prop);
        [id(0x00000173), helpcontext(0x09700173)]
        HRESULT CentimetersToPoints(
                        [in] int Centimeters, 
                        [out, retval] int* prop);
        [id(0x00000174), helpcontext(0x09700174)]
        HRESULT MillimetersToPoints(
                        [in] int Millimeters, 
                        [out, retval] int* prop);
        [id(0x00000175), helpcontext(0x09700175)]
        HRESULT PicasToPoints(
                        [in] int Picas, 
                        [out, retval] int* prop);
        [id(0x00000176), helpcontext(0x09700176)]
        HRESULT LinesToPoints(
                        [in] int Lines, 
                        [out, retval] int* prop);
        [id(0x0000017c), helpcontext(0x0970017c)]
        HRESULT PointsToInches(
                        [in] int Points, 
                        [out, retval] int* prop);
        [id(0x0000017d), helpcontext(0x0970017d)]
        HRESULT PointsToCentimeters(
                        [in] int Points, 
                        [out, retval] int* prop);
        [id(0x0000017e), helpcontext(0x0970017e)]
        HRESULT PointsToMillimeters(
                        [in] int Points, 
                        [out, retval] int* prop);
        [id(0x0000017f), helpcontext(0x0970017f)]
        HRESULT PointsToPicas(
                        [in] int Points, 
                        [out, retval] int* prop);
        [id(0x00000180), helpcontext(0x09700180)]
        HRESULT PointsToLines(
                        [in] int Points, 
                        [out, retval] int* prop);
        [id(0x00000181), helpcontext(0x09700181)]
        HRESULT Activate();
        [id(0x00000183), helpcontext(0x09700183)]
        HRESULT PointsToPixels(
                        [in] int Points, 
                        [in, optional] VARIANT* fVertical, 
                        [out, retval] int* prop);
        [id(0x00000184), helpcontext(0x09700184)]
        HRESULT PixelsToPoints(
                        [in] int Pixels, 
                        [in, optional] VARIANT* fVertical, 
                        [out, retval] int* prop);
        [id(0x00000190), helpcontext(0x09700190)]
        HRESULT KeyboardLatin();
        [id(0x00000191), helpcontext(0x09700191)]
        HRESULT KeyboardBidi();
        [id(0x00000192), helpcontext(0x09700192)]
        HRESULT ToggleKeyboard();
        [id(0x000001be), helpcontext(0x097001be)]
        HRESULT Keyboard(
                        [in, optional, defaultvalue(0)] long LangId, 
                        [out, retval] long* prop);
        [id(0x00000194), helpcontext(0x09700194)]
        HRESULT ProductCode([out, retval] BSTR* prop);
        [id(0x00000195), helpcontext(0x09700195)]
        HRESULT DefaultWebOptions([out, retval] DefaultWebOptions** prop);
        [id(0x00000197), hidden, helpcontext(0x09700197)]
        HRESULT DiscussionSupport(
                        [in] VARIANT* Range, 
                        [in] VARIANT* cid, 
                        [in] VARIANT* piCSE);
        [id(0x0000019e), helpcontext(0x0970019e)]
        HRESULT SetDefaultTheme(
                        [in] BSTR Name, 
                        [in] WdDocumentMedium DocumentType);
        [id(0x000001a0), helpcontext(0x097001a0)]
        HRESULT GetDefaultTheme(
                        [in] WdDocumentMedium DocumentType, 
                        [out, retval] BSTR* prop);
        [id(0x00000185), propget, helpcontext(0x09700185)]
        HRESULT EmailOptions([out, retval] EmailOptions** prop);
        [id(0x00000187), propget, helpcontext(0x09700187)]
        HRESULT Language([out, retval] /*MsoLanguageID*/int* prop);
        [id(0x0000006f), propget, helpcontext(0x0970006f)]
        HRESULT COMAddIns([out, retval] COMAddIns** prop);
        [id(0x00000070), propget, helpcontext(0x09700070)]
        HRESULT CheckLanguage([out, retval] VARIANT_BOOL* prop);
        [id(0x00000070), propput, helpcontext(0x09700070)]
        HRESULT CheckLanguage([in] VARIANT_BOOL prop);
        [id(0x00000193), propget, helpcontext(0x09700193)]
        HRESULT LanguageSettings([out, retval] LanguageSettings** prop);
        [id(0x00000196), propget, hidden, helpcontext(0x09700196)]
        HRESULT Dummy1([out, retval] VARIANT_BOOL* prop);
        [id(0x00000199), propget, helpcontext(0x09700199)]
        HRESULT AnswerWizard([out, retval] AnswerWizard** prop);
        [id(0x000001bf), propget, helpcontext(0x097001bf)]
        HRESULT FeatureInstall([out, retval] /*MsoFeatureInstall*/int* prop);
        [id(0x000001bf), propput, helpcontext(0x097001bf)]
        HRESULT FeatureInstall([in] MsoFeatureInstall prop);
        [id(0x000001bc), hidden, helpcontext(0x097001bc)]
        HRESULT PrintOut2000(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* FileName, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint, 
                        [in, optional] VARIANT* PrintZoomColumn, 
                        [in, optional] VARIANT* PrintZoomRow, 
                        [in, optional] VARIANT* PrintZoomPaperWidth, 
                        [in, optional] VARIANT* PrintZoomPaperHeight);
        [id(0x000001bd), helpcontext(0x097001bd)]
        HRESULT Run(
                        [in] BSTR MacroName, 
                        [in, optional] VARIANT* varg1, 
                        [in, optional] VARIANT* varg2, 
                        [in, optional] VARIANT* varg3, 
                        [in, optional] VARIANT* varg4, 
                        [in, optional] VARIANT* varg5, 
                        [in, optional] VARIANT* varg6, 
                        [in, optional] VARIANT* varg7, 
                        [in, optional] VARIANT* varg8, 
                        [in, optional] VARIANT* varg9, 
                        [in, optional] VARIANT* varg10, 
                        [in, optional] VARIANT* varg11, 
                        [in, optional] VARIANT* varg12, 
                        [in, optional] VARIANT* varg13, 
                        [in, optional] VARIANT* varg14, 
                        [in, optional] VARIANT* varg15, 
                        [in, optional] VARIANT* varg16, 
                        [in, optional] VARIANT* varg17, 
                        [in, optional] VARIANT* varg18, 
                        [in, optional] VARIANT* varg19, 
                        [in, optional] VARIANT* varg20, 
                        [in, optional] VARIANT* varg21, 
                        [in, optional] VARIANT* varg22, 
                        [in, optional] VARIANT* varg23, 
                        [in, optional] VARIANT* varg24, 
                        [in, optional] VARIANT* varg25, 
                        [in, optional] VARIANT* varg26, 
                        [in, optional] VARIANT* varg27, 
                        [in, optional] VARIANT* varg28, 
                        [in, optional] VARIANT* varg29, 
                        [in, optional] VARIANT* varg30, 
                        [out, retval] VARIANT* prop);
        [id(0x000001c0), helpcontext(0x097001c0)]
        HRESULT PrintOut(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* FileName, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint, 
                        [in, optional] VARIANT* PrintZoomColumn, 
                        [in, optional] VARIANT* PrintZoomRow, 
                        [in, optional] VARIANT* PrintZoomPaperWidth, 
                        [in, optional] VARIANT* PrintZoomPaperHeight);
        [id(0x000001c1), propget, helpcontext(0x097001c1)]
        HRESULT AutomationSecurity([out, retval] MsoAutomationSecurity* prop);
        [id(0x000001c1), propput, helpcontext(0x097001c1)]
        HRESULT AutomationSecurity([in] MsoAutomationSecurity prop);
        [id(0x000001c2), propget, helpcontext(0x097001c2)]
        HRESULT FileDialog(
                        [in] MsoFileDialogType FileDialogType, 
                        [out, retval] FileDialog** prop);
        [id(0x000001c3), propget, helpcontext(0x097001c3)]
        HRESULT EmailTemplate([out, retval] BSTR* prop);
        [id(0x000001c3), propput, helpcontext(0x097001c3)]
        HRESULT EmailTemplate([in] BSTR prop);
        [id(0x000001c4), propget, helpcontext(0x097001c4)]
        HRESULT ShowWindowsInTaskbar([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c4), propput, helpcontext(0x097001c4)]
        HRESULT ShowWindowsInTaskbar([in] VARIANT_BOOL prop);
        [id(0x000001c6), propget, helpcontext(0x097001c6)]
        HRESULT NewDocument([out, retval] NewFile** prop);
        [id(0x000001c7), propget, helpcontext(0x097001c7)]
        HRESULT ShowStartupDialog([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c7), propput, helpcontext(0x097001c7)]
        HRESULT ShowStartupDialog([in] VARIANT_BOOL prop);
        [id(0x000001c8), propget, helpcontext(0x097001c8)]
        HRESULT AutoCorrectEmail([out, retval] AutoCorrect** prop);
        [id(0x000001c9), propget, helpcontext(0x097001c9)]
        HRESULT TaskPanes([out, retval] TaskPanes** prop);
        [id(0x000001cb), propget, helpcontext(0x097001cb)]
        HRESULT DefaultLegalBlackline([out, retval] VARIANT_BOOL* prop);
        [id(0x000001cb), propput, helpcontext(0x097001cb)]
        HRESULT DefaultLegalBlackline([in] VARIANT_BOOL prop);
        [id(0x000001ca), hidden, helpcontext(0x097001ca)]
        HRESULT Dummy2([out, retval] VARIANT_BOOL* prop);
        [id(0x000001cc), propget, helpcontext(0x097001cc)]
        HRESULT SmartTagRecognizers([out, retval] SmartTagRecognizers** prop);
        [id(0x000001cd), propget, helpcontext(0x097001cd)]
        HRESULT SmartTagTypes([out, retval] SmartTagTypes** prop);
        [id(0x000001cf), propget, helpcontext(0x097001cf)]
        HRESULT XMLNamespaces([out, retval] XMLNamespaces** prop);
        [id(0x000001d0), helpcontext(0x097001d0)]
        HRESULT PutFocusInMailHeader();
        [id(0x000001d1), propget, helpcontext(0x097001d1)]
        HRESULT ArbitraryXMLSupportAvailable([out, retval] VARIANT_BOOL* prop);
    };

    [
      odl,
      uuid(000209B9-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009b9),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _Global : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09b903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09b903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09b903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09b90000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09b90001)]
        HRESULT Documents([out, retval] Documents** prop);
        [id(0x00000002), propget, helpcontext(0x09b90002)]
        HRESULT Windows([out, retval] Windows** prop);
        [id(0x00000003), propget, helpcontext(0x09b90003)]
        HRESULT ActiveDocument([out, retval] Document** prop);
        [id(0x00000004), propget, helpcontext(0x09b90004)]
        HRESULT ActiveWindow([out, retval] Window** prop);
        [id(0x00000005), propget, helpcontext(0x09b90005)]
        HRESULT Selection([out, retval] Selection** prop);
        [id(0x00000006), propget, helpcontext(0x09b90006)]
        HRESULT WordBasic([out, retval] IDispatch** prop);
        [id(0x0000001b), propget, helpcontext(0x09b9001b)]
        HRESULT PrintPreview([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001b), propput, helpcontext(0x09b9001b)]
        HRESULT PrintPreview([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09b90007)]
        HRESULT RecentFiles([out, retval] RecentFiles** prop);
        [id(0x00000008), propget, helpcontext(0x09b90008)]
        HRESULT NormalTemplate([out, retval] Template** prop);
        [id(0x00000009), propget, helpcontext(0x09b90009)]
        HRESULT System([out, retval] System** prop);
        [id(0x0000000a), propget, helpcontext(0x09b9000a)]
        HRESULT AutoCorrect([out, retval] AutoCorrect** prop);
        [id(0x0000000b), propget, helpcontext(0x09b9000b)]
        HRESULT FontNames([out, retval] FontNames** prop);
        [id(0x0000000c), propget, helpcontext(0x09b9000c)]
        HRESULT LandscapeFontNames([out, retval] FontNames** prop);
        [id(0x0000000d), propget, helpcontext(0x09b9000d)]
        HRESULT PortraitFontNames([out, retval] FontNames** prop);
        [id(0x0000000e), propget, helpcontext(0x09b9000e)]
        HRESULT Languages([out, retval] Languages** prop);
        [id(0x0000000f), propget, helpcontext(0x09b9000f)]
        HRESULT Assistant([out, retval] Assistant** prop);
        [id(0x00000011), propget, helpcontext(0x09b90011)]
        HRESULT FileConverters([out, retval] FileConverters** prop);
        [id(0x00000013), propget, helpcontext(0x09b90013)]
        HRESULT Dialogs([out, retval] Dialogs** prop);
        [id(0x00000014), propget, helpcontext(0x09b90014)]
        HRESULT CaptionLabels([out, retval] CaptionLabels** prop);
        [id(0x00000015), propget, helpcontext(0x09b90015)]
        HRESULT AutoCaptions([out, retval] AutoCaptions** prop);
        [id(0x00000016), propget, helpcontext(0x09b90016)]
        HRESULT AddIns([out, retval] AddIns** prop);
        [id(0x0000001c), propget, helpcontext(0x09b9001c)]
        HRESULT Tasks([out, retval] Tasks** prop);
        [id(0x00000037), propget, helpcontext(0x09b90037)]
        HRESULT MacroContainer([out, retval] IDispatch** prop);
        [id(0x00000039), propget, helpcontext(0x09b90039)]
        HRESULT CommandBars([out, retval] CommandBars** prop);
        [id(0x0000003b), propget, helpcontext(0x09b9003b)]
        HRESULT SynonymInfo(
                        [in] BSTR Word, 
                        [in, optional] VARIANT* LanguageID, 
                        [out, retval] SynonymInfo** prop);
        [id(0x0000003d), propget, helpcontext(0x09b9003d)]
        HRESULT VBE([out, retval] VBE** prop);
        [id(0x00000041), propget, helpcontext(0x09b90041)]
        HRESULT ListGalleries([out, retval] ListGalleries** prop);
        [id(0x00000042), propget, helpcontext(0x09b90042)]
        HRESULT ActivePrinter([out, retval] BSTR* prop);
        [id(0x00000042), propput, helpcontext(0x09b90042)]
        HRESULT ActivePrinter([in] BSTR prop);
        [id(0x00000043), propget, helpcontext(0x09b90043)]
        HRESULT Templates([out, retval] Templates** prop);
        [id(0x00000044), propget, helpcontext(0x09b90044)]
        HRESULT CustomizationContext([out, retval] IDispatch** prop);
        [id(0x00000044), propput, helpcontext(0x09b90044)]
        HRESULT CustomizationContext([in] IDispatch* prop);
        [id(0x00000045), propget, helpcontext(0x09b90045)]
        HRESULT KeyBindings([out, retval] KeyBindings** prop);
        [id(0x00000046), propget, helpcontext(0x09b90046)]
        HRESULT KeysBoundTo(
                        [in] WdKeyCategory KeyCategory, 
                        [in] BSTR Command, 
                        [in, optional] VARIANT* CommandParameter, 
                        [out, retval] KeysBoundTo** prop);
        [id(0x00000047), propget, helpcontext(0x09b90047)]
        HRESULT FindKey(
                        [in] long KeyCode, 
                        [in, optional] VARIANT* KeyCode2, 
                        [out, retval] KeyBinding** prop);
        [id(0x0000005d), propget, helpcontext(0x09b9005d)]
        HRESULT Options([out, retval] Options** prop);
        [id(0x0000005f), propget, helpcontext(0x09b9005f)]
        HRESULT CustomDictionaries([out, retval] Dictionaries** prop);
        [id(0x00000061), propput, helpcontext(0x09b90061)]
        HRESULT StatusBar([in] BSTR rhs);
        [id(0x00000068), propget, helpcontext(0x09b90068)]
        HRESULT ShowVisualBasicEditor([out, retval] VARIANT_BOOL* prop);
        [id(0x00000068), propput, helpcontext(0x09b90068)]
        HRESULT ShowVisualBasicEditor([in] VARIANT_BOOL prop);
        [id(0x0000006d), propget, helpcontext(0x09b9006d)]
        HRESULT IsObjectValid(
                        [in] IDispatch* Object, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000006e), propget, helpcontext(0x09b9006e)]
        HRESULT HangulHanjaDictionaries([out, retval] HangulHanjaConversionDictionaries** prop);
        [id(0x00000131), helpcontext(0x09b90131)]
        HRESULT Repeat(
                        [in, optional] VARIANT* Times, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000136), helpcontext(0x09b90136)]
        HRESULT DDEExecute(
                        [in] long Channel, 
                        [in] BSTR Command);
        [id(0x00000137), helpcontext(0x09b90137)]
        HRESULT DDEInitiate(
                        [in] BSTR App, 
                        [in] BSTR Topic, 
                        [out, retval] long* prop);
        [id(0x00000138), helpcontext(0x09b90138)]
        HRESULT DDEPoke(
                        [in] long Channel, 
                        [in] BSTR Item, 
                        [in] BSTR Data);
        [id(0x00000139), helpcontext(0x09b90139)]
        HRESULT DDERequest(
                        [in] long Channel, 
                        [in] BSTR Item, 
                        [out, retval] BSTR* prop);
        [id(0x0000013a), helpcontext(0x09b9013a)]
        HRESULT DDETerminate([in] long Channel);
        [id(0x0000013b), helpcontext(0x09b9013b)]
        HRESULT DDETerminateAll();
        [id(0x0000013c), helpcontext(0x09b9013c)]
        HRESULT BuildKeyCode(
                        [in] WdKey Arg1, 
                        [in, optional] VARIANT* Arg2, 
                        [in, optional] VARIANT* Arg3, 
                        [in, optional] VARIANT* Arg4, 
                        [out, retval] long* prop);
        [id(0x0000013d), helpcontext(0x09b9013d)]
        HRESULT KeyString(
                        [in] long KeyCode, 
                        [in, optional] VARIANT* KeyCode2, 
                        [out, retval] BSTR* prop);
        [id(0x00000144), helpcontext(0x09b90144)]
        HRESULT CheckSpelling(
                        [in] BSTR Word, 
                        [in, optional] VARIANT* CustomDictionary, 
                        [in, optional] VARIANT* IgnoreUppercase, 
                        [in, optional] VARIANT* MainDictionary, 
                        [in, optional] VARIANT* CustomDictionary2, 
                        [in, optional] VARIANT* CustomDictionary3, 
                        [in, optional] VARIANT* CustomDictionary4, 
                        [in, optional] VARIANT* CustomDictionary5, 
                        [in, optional] VARIANT* CustomDictionary6, 
                        [in, optional] VARIANT* CustomDictionary7, 
                        [in, optional] VARIANT* CustomDictionary8, 
                        [in, optional] VARIANT* CustomDictionary9, 
                        [in, optional] VARIANT* CustomDictionary10, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000147), helpcontext(0x09b90147)]
        HRESULT GetSpellingSuggestions(
                        [in] BSTR Word, 
                        [in, optional] VARIANT* CustomDictionary, 
                        [in, optional] VARIANT* IgnoreUppercase, 
                        [in, optional] VARIANT* MainDictionary, 
                        [in, optional] VARIANT* SuggestionMode, 
                        [in, optional] VARIANT* CustomDictionary2, 
                        [in, optional] VARIANT* CustomDictionary3, 
                        [in, optional] VARIANT* CustomDictionary4, 
                        [in, optional] VARIANT* CustomDictionary5, 
                        [in, optional] VARIANT* CustomDictionary6, 
                        [in, optional] VARIANT* CustomDictionary7, 
                        [in, optional] VARIANT* CustomDictionary8, 
                        [in, optional] VARIANT* CustomDictionary9, 
                        [in, optional] VARIANT* CustomDictionary10, 
                        [out, retval] SpellingSuggestions** prop);
        [id(0x00000149), helpcontext(0x09b90149)]
        HRESULT Help([in] VARIANT* HelpType);
        [id(0x00000159), helpcontext(0x09b90159)]
        HRESULT NewWindow([out, retval] Window** prop);
        [id(0x00000162), helpcontext(0x09b90162)]
        HRESULT CleanString(
                        [in] BSTR String, 
                        [out, retval] BSTR* prop);
        [id(0x00000163), helpcontext(0x09b90163)]
        HRESULT ChangeFileOpenDirectory([in] BSTR Path);
        [id(0x00000172), helpcontext(0x09b90172)]
        HRESULT InchesToPoints(
                        [in] int Inches, 
                        [out, retval] int* prop);
        [id(0x00000173), helpcontext(0x09b90173)]
        HRESULT CentimetersToPoints(
                        [in] int Centimeters, 
                        [out, retval] int* prop);
        [id(0x00000174), helpcontext(0x09b90174)]
        HRESULT MillimetersToPoints(
                        [in] int Millimeters, 
                        [out, retval] int* prop);
        [id(0x00000175), helpcontext(0x09b90175)]
        HRESULT PicasToPoints(
                        [in] int Picas, 
                        [out, retval] int* prop);
        [id(0x00000176), helpcontext(0x09b90176)]
        HRESULT LinesToPoints(
                        [in] int Lines, 
                        [out, retval] int* prop);
        [id(0x0000017c), helpcontext(0x09b9017c)]
        HRESULT PointsToInches(
                        [in] int Points, 
                        [out, retval] int* prop);
        [id(0x0000017d), helpcontext(0x09b9017d)]
        HRESULT PointsToCentimeters(
                        [in] int Points, 
                        [out, retval] int* prop);
        [id(0x0000017e), helpcontext(0x09b9017e)]
        HRESULT PointsToMillimeters(
                        [in] int Points, 
                        [out, retval] int* prop);
        [id(0x0000017f), helpcontext(0x09b9017f)]
        HRESULT PointsToPicas(
                        [in] int Points, 
                        [out, retval] int* prop);
        [id(0x00000180), helpcontext(0x09b90180)]
        HRESULT PointsToLines(
                        [in] int Points, 
                        [out, retval] int* prop);
        [id(0x00000181), helpcontext(0x09b90181)]
        HRESULT PointsToPixels(
                        [in] int Points, 
                        [in, optional] VARIANT* fVertical, 
                        [out, retval] int* prop);
        [id(0x00000182), helpcontext(0x09b90182)]
        HRESULT PixelsToPoints(
                        [in] int Pixels, 
                        [in, optional] VARIANT* fVertical, 
                        [out, retval] int* prop);
        [id(0x0000006f), propget, helpcontext(0x09b9006f)]
        HRESULT LanguageSettings([out, retval] LanguageSettings** prop);
        [id(0x00000070), propget, helpcontext(0x09b90070)]
        HRESULT AnswerWizard([out, retval] AnswerWizard** prop);
        [id(0x00000071), propget, helpcontext(0x09b90071)]
        HRESULT AutoCorrectEmail([out, retval] AutoCorrect** prop);
    };

    [
      odl,
      uuid(0002096F-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000096f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FontNames : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x096ffffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x096f0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x096f03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096f03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096f03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x096f0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(0002096E-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000096e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Languages : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x096efffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x096e0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x096e03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x096e0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Language** prop);
    };

    [
      odl,
      uuid(0002096D-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000096d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Language : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x096d03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000a), propget, helpcontext(0x096d000a)]
        HRESULT ID([out, retval] WdLanguageID* prop);
        [id(00000000), propget, helpcontext(0x096d0000)]
        HRESULT NameLocal([out, retval] BSTR* prop);
        [id(0x0000000c), propget, helpcontext(0x096d000c)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x0000000d), propget, helpcontext(0x096d000d)]
        HRESULT ActiveGrammarDictionary([out, retval] Dictionary** prop);
        [id(0x0000000e), propget, helpcontext(0x096d000e)]
        HRESULT ActiveHyphenationDictionary([out, retval] Dictionary** prop);
        [id(0x0000000f), propget, helpcontext(0x096d000f)]
        HRESULT ActiveSpellingDictionary([out, retval] Dictionary** prop);
        [id(0x00000010), propget, helpcontext(0x096d0010)]
        HRESULT ActiveThesaurusDictionary([out, retval] Dictionary** prop);
        [id(0x00000011), propget, helpcontext(0x096d0011)]
        HRESULT DefaultWritingStyle([out, retval] BSTR* prop);
        [id(0x00000011), propput, helpcontext(0x096d0011)]
        HRESULT DefaultWritingStyle([in] BSTR prop);
        [id(0x00000012), propget, helpcontext(0x096d0012)]
        HRESULT WritingStyleList([out, retval] VARIANT* prop);
        [id(0x00000013), propget, helpcontext(0x096d0013)]
        HRESULT SpellingDictionaryType([out, retval] WdDictionaryType* prop);
        [id(0x00000013), propput, helpcontext(0x096d0013)]
        HRESULT SpellingDictionaryType([in] WdDictionaryType prop);
    };

    [
      odl,
      uuid(0002096C-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000096c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Documents : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x096cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x096c0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x096c03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x096c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Document** prop);
        [id(0x00000451), helpcontext(0x096c0451)]
        HRESULT Close(
                        [in, optional] VARIANT* SaveChanges, 
                        [in, optional] VARIANT* OriginalFormat, 
                        [in, optional] VARIANT* RouteDocument);
        [id(0x0000000b), hidden, helpcontext(0x096c000b)]
        HRESULT AddOld(
                        [in, optional] VARIANT* Template, 
                        [in, optional] VARIANT* NewTemplate, 
                        [out, retval] Document** prop);
        [id(0x0000000c), hidden, helpcontext(0x096c000c)]
        HRESULT OpenOld(
                        [in] VARIANT* FileName, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* Format, 
                        [out, retval] Document** prop);
        [id(0x0000000d), helpcontext(0x096c000d)]
        HRESULT Save(
                        [in, optional] VARIANT* NoPrompt, 
                        [in, optional] VARIANT* OriginalFormat);
        [id(0x0000000e), helpcontext(0x096c000e)]
        HRESULT Add(
                        [in, optional] VARIANT* Template, 
                        [in, optional] VARIANT* NewTemplate, 
                        [in, optional] VARIANT* DocumentType, 
                        [in, optional] VARIANT* Visible, 
                        [out, retval] Document** prop);
        [id(0x0000000f), hidden, helpcontext(0x096c000f)]
        HRESULT Open2000(
                        [in] VARIANT* FileName, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* Encoding, 
                        [in, optional] VARIANT* Visible, 
                        [out, retval] Document** prop);
        [id(0x00000010), helpcontext(0x096c0010)]
        HRESULT CheckOut([in] BSTR FileName);
        [id(0x00000011), helpcontext(0x096c0011)]
        HRESULT CanCheckOut(
                        [in] BSTR FileName, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000012), hidden, helpcontext(0x096c0012)]
        HRESULT Open2002(
                        [in] VARIANT* FileName, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* Encoding, 
                        [in, optional] VARIANT* Visible, 
                        [in, optional] VARIANT* OpenAndRepair, 
                        [in, optional] VARIANT* DocumentDirection, 
                        [in, optional] VARIANT* NoEncodingDialog, 
                        [out, retval] Document** prop);
        [id(0x00000013), helpcontext(0x096c0013)]
        HRESULT Open(
                        [in] VARIANT* FileName, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* Encoding, 
                        [in, optional] VARIANT* Visible, 
                        [in, optional] VARIANT* OpenAndRepair, 
                        [in, optional] VARIANT* DocumentDirection, 
                        [in, optional] VARIANT* NoEncodingDialog, 
                        [in, optional] VARIANT* XMLTransform, 
                        [out, retval] Document** prop);
    };

    [
      odl,
      uuid(0002096B-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000096b),
      hidden,
      dual,
      oleautomation
    ]
    interface _Document : IDispatch {
        [id(00000000), propget, helpcontext(0x096b0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x096b0001)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003e8), propget, helpcontext(0x096b03e8)]
        HRESULT BuiltInDocumentProperties([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x096b0002)]
        HRESULT CustomDocumentProperties([out, retval] IDispatch** prop);
        [id(0x00000003), propget, helpcontext(0x096b0003)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000004), propget, helpcontext(0x096b0004)]
        HRESULT Bookmarks([out, retval] Bookmarks** prop);
        [id(0x00000006), propget, helpcontext(0x096b0006)]
        HRESULT Tables([out, retval] Tables** prop);
        [id(0x00000007), propget, helpcontext(0x096b0007)]
        HRESULT Footnotes([out, retval] Footnotes** prop);
        [id(0x00000008), propget, helpcontext(0x096b0008)]
        HRESULT Endnotes([out, retval] Endnotes** prop);
        [id(0x00000009), propget, helpcontext(0x096b0009)]
        HRESULT Comments([out, retval] Comments** prop);
        [id(0x0000000a), propget, helpcontext(0x096b000a)]
        HRESULT Type([out, retval] WdDocumentType* prop);
        [id(0x0000000b), propget, helpcontext(0x096b000b)]
        HRESULT AutoHyphenation([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000b), propput, helpcontext(0x096b000b)]
        HRESULT AutoHyphenation([in] VARIANT_BOOL prop);
        [id(0x0000000c), propget, helpcontext(0x096b000c)]
        HRESULT HyphenateCaps([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propput, helpcontext(0x096b000c)]
        HRESULT HyphenateCaps([in] VARIANT_BOOL prop);
        [id(0x0000000d), propget, helpcontext(0x096b000d)]
        HRESULT HyphenationZone([out, retval] long* prop);
        [id(0x0000000d), propput, helpcontext(0x096b000d)]
        HRESULT HyphenationZone([in] long prop);
        [id(0x0000000e), propget, helpcontext(0x096b000e)]
        HRESULT ConsecutiveHyphensLimit([out, retval] long* prop);
        [id(0x0000000e), propput, helpcontext(0x096b000e)]
        HRESULT ConsecutiveHyphensLimit([in] long prop);
        [id(0x0000000f), propget, helpcontext(0x096b000f)]
        HRESULT Sections([out, retval] Sections** prop);
        [id(0x00000010), propget, helpcontext(0x096b0010)]
        HRESULT Paragraphs([out, retval] Paragraphs** prop);
        [id(0x00000011), propget, helpcontext(0x096b0011)]
        HRESULT Words([out, retval] Words** prop);
        [id(0x00000012), propget, helpcontext(0x096b0012)]
        HRESULT Sentences([out, retval] Sentences** prop);
        [id(0x00000013), propget, helpcontext(0x096b0013)]
        HRESULT Characters([out, retval] Characters** prop);
        [id(0x00000014), propget, helpcontext(0x096b0014)]
        HRESULT Fields([out, retval] Fields** prop);
        [id(0x00000015), propget, helpcontext(0x096b0015)]
        HRESULT FormFields([out, retval] FormFields** prop);
        [id(0x00000016), propget, helpcontext(0x096b0016)]
        HRESULT Styles([out, retval] Styles** prop);
        [id(0x00000017), propget, helpcontext(0x096b0017)]
        HRESULT Frames([out, retval] Frames** prop);
        [id(0x00000019), propget, helpcontext(0x096b0019)]
        HRESULT TablesOfFigures([out, retval] TablesOfFigures** prop);
        [id(0x0000001a), propget, helpcontext(0x096b001a)]
        HRESULT Variables([out, retval] Variables** prop);
        [id(0x0000001b), propget, helpcontext(0x096b001b)]
        HRESULT MailMerge([out, retval] MailMerge** prop);
        [id(0x0000001c), propget, helpcontext(0x096b001c)]
        HRESULT Envelope([out, retval] Envelope** prop);
        [id(0x0000001d), propget, helpcontext(0x096b001d)]
        HRESULT FullName([out, retval] BSTR* prop);
        [id(0x0000001e), propget, helpcontext(0x096b001e)]
        HRESULT Revisions([out, retval] Revisions** prop);
        [id(0x0000001f), propget, helpcontext(0x096b001f)]
        HRESULT TablesOfContents([out, retval] TablesOfContents** prop);
        [id(0x00000020), propget, helpcontext(0x096b0020)]
        HRESULT TablesOfAuthorities([out, retval] TablesOfAuthorities** prop);
        [id(0x0000044d), propget, helpcontext(0x096b044d)]
        HRESULT PageSetup([out, retval] PageSetup** prop);
        [id(0x0000044d), propput, helpcontext(0x096b044d)]
        HRESULT PageSetup([in] PageSetup* prop);
        [id(0x00000022), propget, helpcontext(0x096b0022)]
        HRESULT Windows([out, retval] Windows** prop);
        [id(0x00000023), propget, helpcontext(0x096b0023)]
        HRESULT HasRoutingSlip([out, retval] VARIANT_BOOL* prop);
        [id(0x00000023), propput, helpcontext(0x096b0023)]
        HRESULT HasRoutingSlip([in] VARIANT_BOOL prop);
        [id(0x00000024), propget, helpcontext(0x096b0024)]
        HRESULT RoutingSlip([out, retval] RoutingSlip** prop);
        [id(0x00000025), propget, helpcontext(0x096b0025)]
        HRESULT Routed([out, retval] VARIANT_BOOL* prop);
        [id(0x00000026), propget, helpcontext(0x096b0026)]
        HRESULT TablesOfAuthoritiesCategories([out, retval] TablesOfAuthoritiesCategories** prop);
        [id(0x00000027), propget, helpcontext(0x096b0027)]
        HRESULT Indexes([out, retval] Indexes** prop);
        [id(0x00000028), propget, helpcontext(0x096b0028)]
        HRESULT Saved([out, retval] VARIANT_BOOL* prop);
        [id(0x00000028), propput, helpcontext(0x096b0028)]
        HRESULT Saved([in] VARIANT_BOOL prop);
        [id(0x00000029), propget, helpcontext(0x096b0029)]
        HRESULT Content([out, retval] Range** prop);
        [id(0x0000002a), propget, helpcontext(0x096b002a)]
        HRESULT ActiveWindow([out, retval] Window** prop);
        [id(0x0000002b), propget, helpcontext(0x096b002b)]
        HRESULT Kind([out, retval] WdDocumentKind* prop);
        [id(0x0000002b), propput, helpcontext(0x096b002b)]
        HRESULT Kind([in] WdDocumentKind prop);
        [id(0x0000002c), propget, helpcontext(0x096b002c)]
        HRESULT ReadOnly([out, retval] VARIANT_BOOL* prop);
        [id(0x0000002d), propget, helpcontext(0x096b002d)]
        HRESULT Subdocuments([out, retval] Subdocuments** prop);
        [id(0x0000002e), propget, helpcontext(0x096b002e)]
        HRESULT IsMasterDocument([out, retval] VARIANT_BOOL* prop);
        [id(0x00000030), propget, helpcontext(0x096b0030)]
        HRESULT DefaultTabStop([out, retval] int* prop);
        [id(0x00000030), propput, helpcontext(0x096b0030)]
        HRESULT DefaultTabStop([in] int prop);
        [id(0x00000032), propget, helpcontext(0x096b0032)]
        HRESULT EmbedTrueTypeFonts([out, retval] VARIANT_BOOL* prop);
        [id(0x00000032), propput, helpcontext(0x096b0032)]
        HRESULT EmbedTrueTypeFonts([in] VARIANT_BOOL prop);
        [id(0x00000033), propget, helpcontext(0x096b0033)]
        HRESULT SaveFormsData([out, retval] VARIANT_BOOL* prop);
        [id(0x00000033), propput, helpcontext(0x096b0033)]
        HRESULT SaveFormsData([in] VARIANT_BOOL prop);
        [id(0x00000034), propget, helpcontext(0x096b0034)]
        HRESULT ReadOnlyRecommended([out, retval] VARIANT_BOOL* prop);
        [id(0x00000034), propput, helpcontext(0x096b0034)]
        HRESULT ReadOnlyRecommended([in] VARIANT_BOOL prop);
        [id(0x00000035), propget, helpcontext(0x096b0035)]
        HRESULT SaveSubsetFonts([out, retval] VARIANT_BOOL* prop);
        [id(0x00000035), propput, helpcontext(0x096b0035)]
        HRESULT SaveSubsetFonts([in] VARIANT_BOOL prop);
        [id(0x00000037), propget, helpcontext(0x096b0037)]
        HRESULT Compatibility(
                        [in] WdCompatibility Type, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000037), propput, helpcontext(0x096b0037)]
        HRESULT Compatibility(
                        [in] WdCompatibility Type, 
                        [in] VARIANT_BOOL prop);
        [id(0x00000038), propget, helpcontext(0x096b0038)]
        HRESULT StoryRanges([out, retval] StoryRanges** prop);
        [id(0x00000039), propget, helpcontext(0x096b0039)]
        HRESULT CommandBars([out, retval] CommandBars** prop);
        [id(0x0000003a), propget, helpcontext(0x096b003a)]
        HRESULT IsSubdocument([out, retval] VARIANT_BOOL* prop);
        [id(0x0000003b), propget, helpcontext(0x096b003b)]
        HRESULT SaveFormat([out, retval] long* prop);
        [id(0x0000003c), propget, helpcontext(0x096b003c)]
        HRESULT ProtectionType([out, retval] WdProtectionType* prop);
        [id(0x0000003d), propget, helpcontext(0x096b003d)]
        HRESULT Hyperlinks([out, retval] Hyperlinks** prop);
        [id(0x0000003e), propget, helpcontext(0x096b003e)]
        HRESULT Shapes([out, retval] Shapes** prop);
        [id(0x0000003f), propget, helpcontext(0x096b003f)]
        HRESULT ListTemplates([out, retval] ListTemplates** prop);
        [id(0x00000040), propget, helpcontext(0x096b0040)]
        HRESULT Lists([out, retval] Lists** prop);
        [id(0x00000042), propget, helpcontext(0x096b0042)]
        HRESULT UpdateStylesOnOpen([out, retval] VARIANT_BOOL* prop);
        [id(0x00000042), propput, helpcontext(0x096b0042)]
        HRESULT UpdateStylesOnOpen([in] VARIANT_BOOL prop);
        [id(0x00000043), propget, helpcontext(0x096b0043)]
        HRESULT AttachedTemplate([out, retval] VARIANT* prop);
        [id(0x00000043), propput, helpcontext(0x096b0043)]
        HRESULT AttachedTemplate([in] VARIANT* prop);
        [id(0x00000044), propget, helpcontext(0x096b0044)]
        HRESULT InlineShapes([out, retval] InlineShapes** prop);
        [id(0x00000045), propget, helpcontext(0x096b0045)]
        HRESULT Background([out, retval] Shape** prop);
        [id(0x00000045), propput, helpcontext(0x096b0045)]
        HRESULT Background([in] Shape* prop);
        [id(0x00000046), propget, helpcontext(0x096b0046)]
        HRESULT GrammarChecked([out, retval] VARIANT_BOOL* prop);
        [id(0x00000046), propput, helpcontext(0x096b0046)]
        HRESULT GrammarChecked([in] VARIANT_BOOL prop);
        [id(0x00000047), propget, helpcontext(0x096b0047)]
        HRESULT SpellingChecked([out, retval] VARIANT_BOOL* prop);
        [id(0x00000047), propput, helpcontext(0x096b0047)]
        HRESULT SpellingChecked([in] VARIANT_BOOL prop);
        [id(0x00000048), propget, helpcontext(0x096b0048)]
        HRESULT ShowGrammaticalErrors([out, retval] VARIANT_BOOL* prop);
        [id(0x00000048), propput, helpcontext(0x096b0048)]
        HRESULT ShowGrammaticalErrors([in] VARIANT_BOOL prop);
        [id(0x00000049), propget, helpcontext(0x096b0049)]
        HRESULT ShowSpellingErrors([out, retval] VARIANT_BOOL* prop);
        [id(0x00000049), propput, helpcontext(0x096b0049)]
        HRESULT ShowSpellingErrors([in] VARIANT_BOOL prop);
        [id(0x0000004b), propget, helpcontext(0x096b004b)]
        HRESULT Versions([out, retval] Versions** prop);
        [id(0x0000004c), propget, helpcontext(0x096b004c)]
        HRESULT ShowSummary([out, retval] VARIANT_BOOL* prop);
        [id(0x0000004c), propput, helpcontext(0x096b004c)]
        HRESULT ShowSummary([in] VARIANT_BOOL prop);
        [id(0x0000004d), propget, helpcontext(0x096b004d)]
        HRESULT SummaryViewMode([out, retval] WdSummaryMode* prop);
        [id(0x0000004d), propput, helpcontext(0x096b004d)]
        HRESULT SummaryViewMode([in] WdSummaryMode prop);
        [id(0x0000004e), propget, helpcontext(0x096b004e)]
        HRESULT SummaryLength([out, retval] long* prop);
        [id(0x0000004e), propput, helpcontext(0x096b004e)]
        HRESULT SummaryLength([in] long prop);
        [id(0x0000004f), propget, helpcontext(0x096b004f)]
        HRESULT PrintFractionalWidths([out, retval] VARIANT_BOOL* prop);
        [id(0x0000004f), propput, helpcontext(0x096b004f)]
        HRESULT PrintFractionalWidths([in] VARIANT_BOOL prop);
        [id(0x00000050), propget, helpcontext(0x096b0050)]
        HRESULT PrintPostScriptOverText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000050), propput, helpcontext(0x096b0050)]
        HRESULT PrintPostScriptOverText([in] VARIANT_BOOL prop);
        [id(0x00000052), propget, helpcontext(0x096b0052)]
        HRESULT Container([out, retval] IDispatch** prop);
        [id(0x00000053), propget, helpcontext(0x096b0053)]
        HRESULT PrintFormsData([out, retval] VARIANT_BOOL* prop);
        [id(0x00000053), propput, helpcontext(0x096b0053)]
        HRESULT PrintFormsData([in] VARIANT_BOOL prop);
        [id(0x00000054), propget, helpcontext(0x096b0054)]
        HRESULT ListParagraphs([out, retval] ListParagraphs** prop);
        [id(0x00000055), propput, helpcontext(0x096b0055)]
        HRESULT Password([in] BSTR rhs);
        [id(0x00000056), propput, helpcontext(0x096b0056)]
        HRESULT WritePassword([in] BSTR rhs);
        [id(0x00000057), propget, helpcontext(0x096b0057)]
        HRESULT HasPassword([out, retval] VARIANT_BOOL* prop);
        [id(0x00000058), propget, helpcontext(0x096b0058)]
        HRESULT WriteReserved([out, retval] VARIANT_BOOL* prop);
        [id(0x0000005a), propget, helpcontext(0x096b005a)]
        HRESULT ActiveWritingStyle(
                        [in] VARIANT* LanguageID, 
                        [out, retval] BSTR* prop);
        [id(0x0000005a), propput, helpcontext(0x096b005a)]
        HRESULT ActiveWritingStyle(
                        [in] VARIANT* LanguageID, 
                        [in] BSTR prop);
        [id(0x0000005c), propget, helpcontext(0x096b005c)]
        HRESULT UserControl([out, retval] VARIANT_BOOL* prop);
        [id(0x0000005c), propput, helpcontext(0x096b005c)]
        HRESULT UserControl([in] VARIANT_BOOL prop);
        [id(0x0000005d), propget, helpcontext(0x096b005d)]
        HRESULT HasMailer([out, retval] VARIANT_BOOL* prop);
        [id(0x0000005d), propput, helpcontext(0x096b005d)]
        HRESULT HasMailer([in] VARIANT_BOOL prop);
        [id(0x0000005e), propget, helpcontext(0x096b005e)]
        HRESULT Mailer([out, retval] Mailer** prop);
        [id(0x00000060), propget, helpcontext(0x096b0060)]
        HRESULT ReadabilityStatistics([out, retval] ReadabilityStatistics** prop);
        [id(0x00000061), propget, helpcontext(0x096b0061)]
        HRESULT GrammaticalErrors([out, retval] ProofreadingErrors** prop);
        [id(0x00000062), propget, helpcontext(0x096b0062)]
        HRESULT SpellingErrors([out, retval] ProofreadingErrors** prop);
        [id(0x00000063), propget, helpcontext(0x096b0063)]
        HRESULT VBProject([out, retval] VBProject** prop);
        [id(0x00000064), propget, helpcontext(0x096b0064)]
        HRESULT FormsDesign([out, retval] VARIANT_BOOL* prop);
        [id(0x80010000), propget, helpcontext(0x096b0000)]
        HRESULT _CodeName([out, retval] BSTR* prop);
        [id(0x80010000), propput, helpcontext(0x096b0000)]
        HRESULT _CodeName([in] BSTR prop);
        [id(0x00000106), propget, helpcontext(0x096b0106)]
        HRESULT CodeName([out, retval] BSTR* prop);
        [id(0x0000012c), propget, helpcontext(0x096b012c)]
        HRESULT SnapToGrid([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012c), propput, helpcontext(0x096b012c)]
        HRESULT SnapToGrid([in] VARIANT_BOOL prop);
        [id(0x0000012d), propget, helpcontext(0x096b012d)]
        HRESULT SnapToShapes([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012d), propput, helpcontext(0x096b012d)]
        HRESULT SnapToShapes([in] VARIANT_BOOL prop);
        [id(0x0000012e), propget, helpcontext(0x096b012e)]
        HRESULT GridDistanceHorizontal([out, retval] int* prop);
        [id(0x0000012e), propput, helpcontext(0x096b012e)]
        HRESULT GridDistanceHorizontal([in] int prop);
        [id(0x0000012f), propget, helpcontext(0x096b012f)]
        HRESULT GridDistanceVertical([out, retval] int* prop);
        [id(0x0000012f), propput, helpcontext(0x096b012f)]
        HRESULT GridDistanceVertical([in] int prop);
        [id(0x00000130), propget, helpcontext(0x096b0130)]
        HRESULT GridOriginHorizontal([out, retval] int* prop);
        [id(0x00000130), propput, helpcontext(0x096b0130)]
        HRESULT GridOriginHorizontal([in] int prop);
        [id(0x00000131), propget, helpcontext(0x096b0131)]
        HRESULT GridOriginVertical([out, retval] int* prop);
        [id(0x00000131), propput, helpcontext(0x096b0131)]
        HRESULT GridOriginVertical([in] int prop);
        [id(0x00000132), propget, helpcontext(0x096b0132)]
        HRESULT GridSpaceBetweenHorizontalLines([out, retval] long* prop);
        [id(0x00000132), propput, helpcontext(0x096b0132)]
        HRESULT GridSpaceBetweenHorizontalLines([in] long prop);
        [id(0x00000133), propget, helpcontext(0x096b0133)]
        HRESULT GridSpaceBetweenVerticalLines([out, retval] long* prop);
        [id(0x00000133), propput, helpcontext(0x096b0133)]
        HRESULT GridSpaceBetweenVerticalLines([in] long prop);
        [id(0x00000134), propget, helpcontext(0x096b0134)]
        HRESULT GridOriginFromMargin([out, retval] VARIANT_BOOL* prop);
        [id(0x00000134), propput, helpcontext(0x096b0134)]
        HRESULT GridOriginFromMargin([in] VARIANT_BOOL prop);
        [id(0x00000135), propget, helpcontext(0x096b0135)]
        HRESULT KerningByAlgorithm([out, retval] VARIANT_BOOL* prop);
        [id(0x00000135), propput, helpcontext(0x096b0135)]
        HRESULT KerningByAlgorithm([in] VARIANT_BOOL prop);
        [id(0x00000136), propget, helpcontext(0x096b0136)]
        HRESULT JustificationMode([out, retval] WdJustificationMode* prop);
        [id(0x00000136), propput, helpcontext(0x096b0136)]
        HRESULT JustificationMode([in] WdJustificationMode prop);
        [id(0x00000137), propget, helpcontext(0x096b0137)]
        HRESULT FarEastLineBreakLevel([out, retval] WdFarEastLineBreakLevel* prop);
        [id(0x00000137), propput, helpcontext(0x096b0137)]
        HRESULT FarEastLineBreakLevel([in] WdFarEastLineBreakLevel prop);
        [id(0x00000138), propget, helpcontext(0x096b0138)]
        HRESULT NoLineBreakBefore([out, retval] BSTR* prop);
        [id(0x00000138), propput, helpcontext(0x096b0138)]
        HRESULT NoLineBreakBefore([in] BSTR prop);
        [id(0x00000139), propget, helpcontext(0x096b0139)]
        HRESULT NoLineBreakAfter([out, retval] BSTR* prop);
        [id(0x00000139), propput, helpcontext(0x096b0139)]
        HRESULT NoLineBreakAfter([in] BSTR prop);
        [id(0x0000013a), propget, helpcontext(0x096b013a)]
        HRESULT TrackRevisions([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013a), propput, helpcontext(0x096b013a)]
        HRESULT TrackRevisions([in] VARIANT_BOOL prop);
        [id(0x0000013b), propget, helpcontext(0x096b013b)]
        HRESULT PrintRevisions([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013b), propput, helpcontext(0x096b013b)]
        HRESULT PrintRevisions([in] VARIANT_BOOL prop);
        [id(0x0000013c), propget, helpcontext(0x096b013c)]
        HRESULT ShowRevisions([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013c), propput, helpcontext(0x096b013c)]
        HRESULT ShowRevisions([in] VARIANT_BOOL prop);
        [id(0x00000451), helpcontext(0x096b0451)]
        HRESULT Close(
                        [in, optional] VARIANT* SaveChanges, 
                        [in, optional] VARIANT* OriginalFormat, 
                        [in, optional] VARIANT* RouteDocument);
        [id(0x00000066), hidden, helpcontext(0x096b0066)]
        HRESULT SaveAs2000(
                        [in, optional] VARIANT* FileName, 
                        [in, optional] VARIANT* FileFormat, 
                        [in, optional] VARIANT* LockComments, 
                        [in, optional] VARIANT* Password, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* WritePassword, 
                        [in, optional] VARIANT* ReadOnlyRecommended, 
                        [in, optional] VARIANT* EmbedTrueTypeFonts, 
                        [in, optional] VARIANT* SaveNativePictureFormat, 
                        [in, optional] VARIANT* SaveFormsData, 
                        [in, optional] VARIANT* SaveAsAOCELetter);
        [id(0x00000067), helpcontext(0x096b0067)]
        HRESULT Repaginate();
        [id(0x00000068), helpcontext(0x096b0068)]
        HRESULT FitToPages();
        [id(0x00000069), helpcontext(0x096b0069)]
        HRESULT ManualHyphenation();
        [id(0x0000ffff), helpcontext(0x096bffff)]
        HRESULT Select();
        [id(0x0000006a), helpcontext(0x096b006a)]
        HRESULT DataForm();
        [id(0x0000006b), helpcontext(0x096b006b)]
        HRESULT Route();
        [id(0x0000006c), helpcontext(0x096b006c)]
        HRESULT Save();
        [id(0x0000006d), hidden, helpcontext(0x096b006d)]
        HRESULT PrintOutOld(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint);
        [id(0x0000006e), helpcontext(0x096b006e)]
        HRESULT SendMail();
        [id(0x000007d0), helpcontext(0x096b07d0)]
        HRESULT Range(
                        [in, optional] VARIANT* Start, 
                        [in, optional] VARIANT* End, 
                        [out, retval] Range** prop);
        [id(0x00000070), helpcontext(0x096b0070)]
        HRESULT RunAutoMacro([in] WdAutoMacros Which);
        [id(0x00000071), helpcontext(0x096b0071)]
        HRESULT Activate();
        [id(0x00000072), helpcontext(0x096b0072)]
        HRESULT PrintPreview();
        [id(0x00000073), helpcontext(0x096b0073)]
        HRESULT GoTo(
                        [in, optional] VARIANT* What, 
                        [in, optional] VARIANT* Which, 
                        [in, optional] VARIANT* Count, 
                        [in, optional] VARIANT* Name, 
                        [out, retval] Range** prop);
        [id(0x00000074), helpcontext(0x096b0074)]
        HRESULT Undo(
                        [in, optional] VARIANT* Times, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000075), helpcontext(0x096b0075)]
        HRESULT Redo(
                        [in, optional] VARIANT* Times, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000076), helpcontext(0x096b0076)]
        HRESULT ComputeStatistics(
                        [in] WdStatistic Statistic, 
                        [in, optional] VARIANT* IncludeFootnotesAndEndnotes, 
                        [out, retval] long* prop);
        [id(0x00000077), helpcontext(0x096b0077)]
        HRESULT MakeCompatibilityDefault();
        [id(0x00000078), hidden, helpcontext(0x096b0078)]
        HRESULT Protect2002(
                        [in] WdProtectionType Type, 
                        [in, optional] VARIANT* NoReset, 
                        [in, optional] VARIANT* Password);
        [id(0x00000079), helpcontext(0x096b0079)]
        HRESULT Unprotect([in, optional] VARIANT* Password);
        [id(0x0000007a), helpcontext(0x096b007a)]
        HRESULT EditionOptions(
                        [in] WdEditionType Type, 
                        [in] WdEditionOption Option, 
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Format);
        [id(0x0000007b), helpcontext(0x096b007b)]
        HRESULT RunLetterWizard(
                        [in, optional] VARIANT* LetterContent, 
                        [in, optional] VARIANT* WizardMode);
        [id(0x0000007c), helpcontext(0x096b007c)]
        HRESULT GetLetterContent([out, retval] LetterContent** prop);
        [id(0x0000007d), helpcontext(0x096b007d)]
        HRESULT SetLetterContent([in] VARIANT* LetterContent);
        [id(0x0000007e), helpcontext(0x096b007e)]
        HRESULT CopyStylesFromTemplate([in] BSTR Template);
        [id(0x0000007f), helpcontext(0x096b007f)]
        HRESULT UpdateStyles();
        [id(0x00000083), helpcontext(0x096b0083)]
        HRESULT CheckGrammar();
        [id(0x00000084), helpcontext(0x096b0084)]
        HRESULT CheckSpelling(
                        [in, optional] VARIANT* CustomDictionary, 
                        [in, optional] VARIANT* IgnoreUppercase, 
                        [in, optional] VARIANT* AlwaysSuggest, 
                        [in, optional] VARIANT* CustomDictionary2, 
                        [in, optional] VARIANT* CustomDictionary3, 
                        [in, optional] VARIANT* CustomDictionary4, 
                        [in, optional] VARIANT* CustomDictionary5, 
                        [in, optional] VARIANT* CustomDictionary6, 
                        [in, optional] VARIANT* CustomDictionary7, 
                        [in, optional] VARIANT* CustomDictionary8, 
                        [in, optional] VARIANT* CustomDictionary9, 
                        [in, optional] VARIANT* CustomDictionary10);
        [id(0x00000087), helpcontext(0x096b0087)]
        HRESULT FollowHyperlink(
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* SubAddress, 
                        [in, optional] VARIANT* NewWindow, 
                        [in, optional] VARIANT* AddHistory, 
                        [in, optional] VARIANT* ExtraInfo, 
                        [in, optional] VARIANT* Method, 
                        [in, optional] VARIANT* HeaderInfo);
        [id(0x00000088), helpcontext(0x096b0088)]
        HRESULT AddToFavorites();
        [id(0x00000089), helpcontext(0x096b0089)]
        HRESULT Reload();
        [id(0x0000008a), helpcontext(0x096b008a)]
        HRESULT AutoSummarize(
                        [in, optional] VARIANT* Length, 
                        [in, optional] VARIANT* Mode, 
                        [in, optional] VARIANT* UpdateProperties, 
                        [out, retval] Range** prop);
        [id(0x0000008c), helpcontext(0x096b008c)]
        HRESULT RemoveNumbers([in, optional] VARIANT* NumberType);
        [id(0x0000008d), helpcontext(0x096b008d)]
        HRESULT ConvertNumbersToText([in, optional] VARIANT* NumberType);
        [id(0x0000008e), helpcontext(0x096b008e)]
        HRESULT CountNumberedItems(
                        [in, optional] VARIANT* NumberType, 
                        [in, optional] VARIANT* Level, 
                        [out, retval] long* prop);
        [id(0x0000008f), helpcontext(0x096b008f)]
        HRESULT Post();
        [id(0x00000090), helpcontext(0x096b0090)]
        HRESULT ToggleFormsDesign();
        [id(0x00000091), hidden, helpcontext(0x096b0091)]
        HRESULT Compare2000([in] BSTR Name);
        [id(0x00000092), helpcontext(0x096b0092)]
        HRESULT UpdateSummaryProperties();
        [id(0x00000093), helpcontext(0x096b0093)]
        HRESULT GetCrossReferenceItems(
                        [in] VARIANT* ReferenceType, 
                        [out, retval] VARIANT* prop);
        [id(0x00000094), helpcontext(0x096b0094)]
        HRESULT AutoFormat();
        [id(0x00000095), helpcontext(0x096b0095)]
        HRESULT ViewCode();
        [id(0x00000096), helpcontext(0x096b0096)]
        HRESULT ViewPropertyBrowser();
        [id(0x000000fa), helpcontext(0x096b00fa)]
        HRESULT ForwardMailer();
        [id(0x000000fb), helpcontext(0x096b00fb)]
        HRESULT Reply();
        [id(0x000000fc), helpcontext(0x096b00fc)]
        HRESULT ReplyAll();
        [id(0x000000fd), helpcontext(0x096b00fd)]
        HRESULT SendMailer(
                        [in, optional] VARIANT* FileFormat, 
                        [in, optional] VARIANT* Priority);
        [id(0x000000fe), helpcontext(0x096b00fe)]
        HRESULT UndoClear();
        [id(0x000000ff), helpcontext(0x096b00ff)]
        HRESULT PresentIt();
        [id(0x00000100), helpcontext(0x096b0100)]
        HRESULT SendFax(
                        [in] BSTR Address, 
                        [in, optional] VARIANT* Subject);
        [id(0x00000101), hidden, helpcontext(0x096b0101)]
        HRESULT Merge2000([in] BSTR FileName);
        [id(0x00000102), helpcontext(0x096b0102)]
        HRESULT ClosePrintPreview();
        [id(0x00000103), helpcontext(0x096b0103)]
        HRESULT CheckConsistency();
        [id(0x00000104), helpcontext(0x096b0104)]
        HRESULT CreateLetterContent(
                        [in] BSTR DateFormat, 
                        [in] VARIANT_BOOL IncludeHeaderFooter, 
                        [in] BSTR PageDesign, 
                        [in] WdLetterStyle LetterStyle, 
                        [in] VARIANT_BOOL Letterhead, 
                        [in] WdLetterheadLocation LetterheadLocation, 
                        [in] int LetterheadSize, 
                        [in] BSTR RecipientName, 
                        [in] BSTR RecipientAddress, 
                        [in] BSTR Salutation, 
                        [in] WdSalutationType SalutationType, 
                        [in] BSTR RecipientReference, 
                        [in] BSTR MailingInstructions, 
                        [in] BSTR AttentionLine, 
                        [in] BSTR Subject, 
                        [in] BSTR CCList, 
                        [in] BSTR ReturnAddress, 
                        [in] BSTR SenderName, 
                        [in] BSTR Closing, 
                        [in] BSTR SenderCompany, 
                        [in] BSTR SenderJobTitle, 
                        [in] BSTR SenderInitials, 
                        [in] long EnclosureNumber, 
                        [in, optional] VARIANT* InfoBlock, 
                        [in, optional] VARIANT* RecipientCode, 
                        [in, optional] VARIANT* RecipientGender, 
                        [in, optional] VARIANT* ReturnAddressShortForm, 
                        [in, optional] VARIANT* SenderCity, 
                        [in, optional] VARIANT* SenderCode, 
                        [in, optional] VARIANT* SenderGender, 
                        [in, optional] VARIANT* SenderReference, 
                        [out, retval] LetterContent** prop);
        [id(0x0000013d), helpcontext(0x096b013d)]
        HRESULT AcceptAllRevisions();
        [id(0x0000013e), helpcontext(0x096b013e)]
        HRESULT RejectAllRevisions();
        [id(0x00000097), helpcontext(0x096b0097)]
        HRESULT DetectLanguage();
        [id(0x00000142), helpcontext(0x096b0142)]
        HRESULT ApplyTheme([in] BSTR Name);
        [id(0x00000143), helpcontext(0x096b0143)]
        HRESULT RemoveTheme();
        [id(0x00000145), helpcontext(0x096b0145)]
        HRESULT WebPagePreview();
        [id(0x0000014b), helpcontext(0x096b014b)]
        HRESULT ReloadAs([in] MsoEncoding Encoding);
        [id(0x0000021c), propget, helpcontext(0x096b021c)]
        HRESULT ActiveTheme([out, retval] BSTR* prop);
        [id(0x0000021d), propget, helpcontext(0x096b021d)]
        HRESULT ActiveThemeDisplayName([out, retval] BSTR* prop);
        [id(0x0000013f), propget, helpcontext(0x096b013f)]
        HRESULT Email([out, retval] Email** prop);
        [id(0x00000140), propget, helpcontext(0x096b0140)]
        HRESULT Scripts([out, retval] Scripts** prop);
        [id(0x00000141), propget, helpcontext(0x096b0141)]
        HRESULT LanguageDetected([out, retval] VARIANT_BOOL* prop);
        [id(0x00000141), propput, helpcontext(0x096b0141)]
        HRESULT LanguageDetected([in] VARIANT_BOOL prop);
        [id(0x00000146), propget, helpcontext(0x096b0146)]
        HRESULT FarEastLineBreakLanguage([out, retval] WdFarEastLineBreakLanguageID* prop);
        [id(0x00000146), propput, helpcontext(0x096b0146)]
        HRESULT FarEastLineBreakLanguage([in] WdFarEastLineBreakLanguageID prop);
        [id(0x00000147), propget, helpcontext(0x096b0147)]
        HRESULT Frameset([out, retval] Frameset** prop);
        [id(0x00000148), propget, helpcontext(0x096b0148)]
        HRESULT ClickAndTypeParagraphStyle([out, retval] VARIANT* prop);
        [id(0x00000148), propput, helpcontext(0x096b0148)]
        HRESULT ClickAndTypeParagraphStyle([in] VARIANT* prop);
        [id(0x00000149), propget, helpcontext(0x096b0149)]
        HRESULT HTMLProject([out, retval] HTMLProject** prop);
        [id(0x0000014a), propget, helpcontext(0x096b014a)]
        HRESULT WebOptions([out, retval] WebOptions** prop);
        [id(0x0000014c), propget, helpcontext(0x096b014c)]
        HRESULT OpenEncoding([out, retval] MsoEncoding* prop);
        [id(0x0000014d), propget, helpcontext(0x096b014d)]
        HRESULT SaveEncoding([out, retval] MsoEncoding* prop);
        [id(0x0000014d), propput, helpcontext(0x096b014d)]
        HRESULT SaveEncoding([in] MsoEncoding prop);
        [id(0x0000014e), propget, helpcontext(0x096b014e)]
        HRESULT OptimizeForWord97([out, retval] VARIANT_BOOL* prop);
        [id(0x0000014e), propput, helpcontext(0x096b014e)]
        HRESULT OptimizeForWord97([in] VARIANT_BOOL prop);
        [id(0x0000014f), propget, helpcontext(0x096b014f)]
        HRESULT VBASigned([out, retval] VARIANT_BOOL* prop);
        [id(0x000001bc), hidden, helpcontext(0x096b01bc)]
        HRESULT PrintOut2000(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint, 
                        [in, optional] VARIANT* PrintZoomColumn, 
                        [in, optional] VARIANT* PrintZoomRow, 
                        [in, optional] VARIANT* PrintZoomPaperWidth, 
                        [in, optional] VARIANT* PrintZoomPaperHeight);
        [id(0x000001bd), hidden, helpcontext(0x096b01bd)]
        HRESULT sblt([in] BSTR s);
        [id(0x000001bf), helpcontext(0x096b01bf)]
        HRESULT ConvertVietDoc([in] long CodePageOrigin);
        [id(0x000001be), helpcontext(0x096b01be)]
        HRESULT PrintOut(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint, 
                        [in, optional] VARIANT* PrintZoomColumn, 
                        [in, optional] VARIANT* PrintZoomRow, 
                        [in, optional] VARIANT* PrintZoomPaperWidth, 
                        [in, optional] VARIANT* PrintZoomPaperHeight);
        [id(0x00000150), propget, helpcontext(0x096b0150)]
        HRESULT MailEnvelope([out, retval] MsoEnvelope** prop);
        [id(0x00000151), propget, helpcontext(0x096b0151)]
        HRESULT DisableFeatures([out, retval] VARIANT_BOOL* prop);
        [id(0x00000151), propput, helpcontext(0x096b0151)]
        HRESULT DisableFeatures([in] VARIANT_BOOL prop);
        [id(0x00000152), propget, helpcontext(0x096b0152)]
        HRESULT DoNotEmbedSystemFonts([out, retval] VARIANT_BOOL* prop);
        [id(0x00000152), propput, helpcontext(0x096b0152)]
        HRESULT DoNotEmbedSystemFonts([in] VARIANT_BOOL prop);
        [id(0x00000153), propget, helpcontext(0x096b0153)]
        HRESULT Signatures([out, retval] SignatureSet** prop);
        [id(0x00000154), propget, helpcontext(0x096b0154)]
        HRESULT DefaultTargetFrame([out, retval] BSTR* prop);
        [id(0x00000154), propput, helpcontext(0x096b0154)]
        HRESULT DefaultTargetFrame([in] BSTR prop);
        [id(0x00000156), propget, helpcontext(0x096b0156)]
        HRESULT HTMLDivisions([out, retval] HTMLDivisions** prop);
        [id(0x00000157), propget, helpcontext(0x096b0157)]
        HRESULT DisableFeaturesIntroducedAfter([out, retval] WdDisableFeaturesIntroducedAfter* prop);
        [id(0x00000157), propput, helpcontext(0x096b0157)]
        HRESULT DisableFeaturesIntroducedAfter([in] WdDisableFeaturesIntroducedAfter prop);
        [id(0x00000158), propget, helpcontext(0x096b0158)]
        HRESULT RemovePersonalInformation([out, retval] VARIANT_BOOL* prop);
        [id(0x00000158), propput, helpcontext(0x096b0158)]
        HRESULT RemovePersonalInformation([in] VARIANT_BOOL prop);
        [id(0x0000015a), propget, helpcontext(0x096b015a)]
        HRESULT SmartTags([out, retval] SmartTags** prop);
        [id(0x00000159), hidden, helpcontext(0x096b0159)]
        HRESULT Compare2002(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* AuthorName, 
                        [in, optional] VARIANT* CompareTarget, 
                        [in, optional] VARIANT* DetectFormatChanges, 
                        [in, optional] VARIANT* IgnoreAllComparisonWarnings, 
                        [in, optional] VARIANT* AddToRecentFiles);
        [id(0x0000015d), helpcontext(0x096b015d)]
        HRESULT CheckIn(
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL SaveChanges, 
                        [in, optional] VARIANT* Comments, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL MakePublic);
        [id(0x0000015f), helpcontext(0x096b015f)]
        HRESULT CanCheckin([out, retval] VARIANT_BOOL* prop);
        [id(0x0000016a), helpcontext(0x096b016a)]
        HRESULT Merge(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* MergeTarget, 
                        [in, optional] VARIANT* DetectFormatChanges, 
                        [in, optional] VARIANT* UseFormattingFrom, 
                        [in, optional] VARIANT* AddToRecentFiles);
        [id(0x0000015b), propget, helpcontext(0x096b015b)]
        HRESULT EmbedSmartTags([out, retval] VARIANT_BOOL* prop);
        [id(0x0000015b), propput, helpcontext(0x096b015b)]
        HRESULT EmbedSmartTags([in] VARIANT_BOOL prop);
        [id(0x0000015c), propget, helpcontext(0x096b015c)]
        HRESULT SmartTagsAsXMLProps([out, retval] VARIANT_BOOL* prop);
        [id(0x0000015c), propput, helpcontext(0x096b015c)]
        HRESULT SmartTagsAsXMLProps([in] VARIANT_BOOL prop);
        [id(0x00000165), propget, helpcontext(0x096b0165)]
        HRESULT TextEncoding([out, retval] MsoEncoding* prop);
        [id(0x00000165), propput, helpcontext(0x096b0165)]
        HRESULT TextEncoding([in] MsoEncoding prop);
        [id(0x00000166), propget, helpcontext(0x096b0166)]
        HRESULT TextLineEnding([out, retval] WdLineEndingType* prop);
        [id(0x00000166), propput, helpcontext(0x096b0166)]
        HRESULT TextLineEnding([in] WdLineEndingType prop);
        [id(0x00000161), helpcontext(0x096b0161)]
        HRESULT SendForReview(
                        [in, optional] VARIANT* Recipients, 
                        [in, optional] VARIANT* Subject, 
                        [in, optional] VARIANT* ShowMessage, 
                        [in, optional] VARIANT* IncludeAttachment);
        [id(0x00000162), helpcontext(0x096b0162)]
        HRESULT ReplyWithChanges([in, optional] VARIANT* ShowMessage);
        [id(0x00000164), helpcontext(0x096b0164)]
        HRESULT EndReview();
        [id(0x00000168), propget, helpcontext(0x096b0168)]
        HRESULT StyleSheets([out, retval] StyleSheets** prop);
        [id(0x0000016d), propget, helpcontext(0x096b016d)]
        HRESULT DefaultTableStyle([out, retval] VARIANT* prop);
        [id(0x0000016f), propget, helpcontext(0x096b016f)]
        HRESULT PasswordEncryptionProvider([out, retval] BSTR* prop);
        [id(0x00000170), propget, helpcontext(0x096b0170)]
        HRESULT PasswordEncryptionAlgorithm([out, retval] BSTR* prop);
        [id(0x00000171), propget, helpcontext(0x096b0171)]
        HRESULT PasswordEncryptionKeyLength([out, retval] long* prop);
        [id(0x00000172), propget, helpcontext(0x096b0172)]
        HRESULT PasswordEncryptionFileProperties([out, retval] VARIANT_BOOL* prop);
        [id(0x00000169), helpcontext(0x096b0169)]
        HRESULT SetPasswordEncryptionOptions(
                        [in] BSTR PasswordEncryptionProvider, 
                        [in] BSTR PasswordEncryptionAlgorithm, 
                        [in] long PasswordEncryptionKeyLength, 
                        [in, optional] VARIANT* PasswordEncryptionFileProperties);
        [id(0x0000016b), helpcontext(0x096b016b)]
        HRESULT RecheckSmartTags();
        [id(0x0000016c), helpcontext(0x096b016c)]
        HRESULT RemoveSmartTags();
        [id(0x0000016e), helpcontext(0x096b016e)]
        HRESULT SetDefaultTableStyle(
                        [in] VARIANT* Style, 
                        [in] VARIANT_BOOL SetInTemplate);
        [id(0x00000173), helpcontext(0x096b0173)]
        HRESULT DeleteAllComments();
        [id(0x00000174), helpcontext(0x096b0174)]
        HRESULT AcceptAllRevisionsShown();
        [id(0x00000175), helpcontext(0x096b0175)]
        HRESULT RejectAllRevisionsShown();
        [id(0x00000176), helpcontext(0x096b0176)]
        HRESULT DeleteAllCommentsShown();
        [id(0x00000177), helpcontext(0x096b0177)]
        HRESULT ResetFormFields();
        [id(0x00000178), helpcontext(0x096b0178)]
        HRESULT SaveAs(
                        [in, optional] VARIANT* FileName, 
                        [in, optional] VARIANT* FileFormat, 
                        [in, optional] VARIANT* LockComments, 
                        [in, optional] VARIANT* Password, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* WritePassword, 
                        [in, optional] VARIANT* ReadOnlyRecommended, 
                        [in, optional] VARIANT* EmbedTrueTypeFonts, 
                        [in, optional] VARIANT* SaveNativePictureFormat, 
                        [in, optional] VARIANT* SaveFormsData, 
                        [in, optional] VARIANT* SaveAsAOCELetter, 
                        [in, optional] VARIANT* Encoding, 
                        [in, optional] VARIANT* InsertLineBreaks, 
                        [in, optional] VARIANT* AllowSubstitutions, 
                        [in, optional] VARIANT* LineEnding, 
                        [in, optional] VARIANT* AddBiDiMarks);
        [id(0x00000179), propget, helpcontext(0x096b0179)]
        HRESULT EmbedLinguisticData([out, retval] VARIANT_BOOL* prop);
        [id(0x00000179), propput, helpcontext(0x096b0179)]
        HRESULT EmbedLinguisticData([in] VARIANT_BOOL prop);
        [id(0x000001c0), propget, helpcontext(0x096b01c0)]
        HRESULT FormattingShowFont([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c0), propput, helpcontext(0x096b01c0)]
        HRESULT FormattingShowFont([in] VARIANT_BOOL prop);
        [id(0x000001c1), propget, helpcontext(0x096b01c1)]
        HRESULT FormattingShowClear([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c1), propput, helpcontext(0x096b01c1)]
        HRESULT FormattingShowClear([in] VARIANT_BOOL prop);
        [id(0x000001c2), propget, helpcontext(0x096b01c2)]
        HRESULT FormattingShowParagraph([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c2), propput, helpcontext(0x096b01c2)]
        HRESULT FormattingShowParagraph([in] VARIANT_BOOL prop);
        [id(0x000001c3), propget, helpcontext(0x096b01c3)]
        HRESULT FormattingShowNumbering([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c3), propput, helpcontext(0x096b01c3)]
        HRESULT FormattingShowNumbering([in] VARIANT_BOOL prop);
        [id(0x000001c4), propget, helpcontext(0x096b01c4)]
        HRESULT FormattingShowFilter([out, retval] WdShowFilter* prop);
        [id(0x000001c4), propput, helpcontext(0x096b01c4)]
        HRESULT FormattingShowFilter([in] WdShowFilter prop);
        [id(0x0000017a), helpcontext(0x096b017a)]
        HRESULT CheckNewSmartTags();
        [id(0x000001c5), propget, helpcontext(0x096b01c5)]
        HRESULT Permission([out, retval] Permission** prop);
        [id(0x000001cc), propget, helpcontext(0x096b01cc)]
        HRESULT XMLNodes([out, retval] XMLNodes** prop);
        [id(0x000001cd), propget, helpcontext(0x096b01cd)]
        HRESULT XMLSchemaReferences([out, retval] XMLSchemaReferences** prop);
        [id(0x000001ce), propget, helpcontext(0x096b01ce)]
        HRESULT SmartDocument([out, retval] SmartDocument** prop);
        [id(0x000001cf), propget, helpcontext(0x096b01cf)]
        HRESULT SharedWorkspace([out, retval] SharedWorkspace** prop);
        [id(0x000001d2), propget, helpcontext(0x096b01d2)]
        HRESULT Sync([out, retval] Sync** prop);
        [id(0x000001d7), propget, helpcontext(0x096b01d7)]
        HRESULT EnforceStyle([out, retval] VARIANT_BOOL* prop);
        [id(0x000001d7), propput, helpcontext(0x096b01d7)]
        HRESULT EnforceStyle([in] VARIANT_BOOL prop);
        [id(0x000001d8), propget, helpcontext(0x096b01d8)]
        HRESULT AutoFormatOverride([out, retval] VARIANT_BOOL* prop);
        [id(0x000001d8), propput, helpcontext(0x096b01d8)]
        HRESULT AutoFormatOverride([in] VARIANT_BOOL prop);
        [id(0x000001d9), propget, helpcontext(0x096b01d9)]
        HRESULT XMLSaveDataOnly([out, retval] VARIANT_BOOL* prop);
        [id(0x000001d9), propput, helpcontext(0x096b01d9)]
        HRESULT XMLSaveDataOnly([in] VARIANT_BOOL prop);
        [id(0x000001dd), propget, helpcontext(0x096b01dd)]
        HRESULT XMLHideNamespaces([out, retval] VARIANT_BOOL* prop);
        [id(0x000001dd), propput, helpcontext(0x096b01dd)]
        HRESULT XMLHideNamespaces([in] VARIANT_BOOL prop);
        [id(0x000001de), propget, helpcontext(0x096b01de)]
        HRESULT XMLShowAdvancedErrors([out, retval] VARIANT_BOOL* prop);
        [id(0x000001de), propput, helpcontext(0x096b01de)]
        HRESULT XMLShowAdvancedErrors([in] VARIANT_BOOL prop);
        [id(0x000001da), propget, helpcontext(0x096b01da)]
        HRESULT XMLUseXSLTWhenSaving([out, retval] VARIANT_BOOL* prop);
        [id(0x000001da), propput, helpcontext(0x096b01da)]
        HRESULT XMLUseXSLTWhenSaving([in] VARIANT_BOOL prop);
        [id(0x000001db), propget, helpcontext(0x096b01db)]
        HRESULT XMLSaveThroughXSLT([out, retval] BSTR* prop);
        [id(0x000001db), propput, helpcontext(0x096b01db)]
        HRESULT XMLSaveThroughXSLT([in] BSTR prop);
        [id(0x000001dc), propget, helpcontext(0x096b01dc)]
        HRESULT DocumentLibraryVersions([out, retval] DocumentLibraryVersions** prop);
        [id(0x000001e1), propget, helpcontext(0x096b01e1)]
        HRESULT ReadingModeLayoutFrozen([out, retval] VARIANT_BOOL* prop);
        [id(0x000001e1), propput, helpcontext(0x096b01e1)]
        HRESULT ReadingModeLayoutFrozen([in] VARIANT_BOOL prop);
        [id(0x000001e4), propget, helpcontext(0x096b01e4)]
        HRESULT RemoveDateAndTime([out, retval] VARIANT_BOOL* prop);
        [id(0x000001e4), propput, helpcontext(0x096b01e4)]
        HRESULT RemoveDateAndTime([in] VARIANT_BOOL prop);
        [id(0x000001d0), helpcontext(0x096b01d0)]
        HRESULT SendFaxOverInternet(
                        [in, optional] VARIANT* Recipients, 
                        [in, optional] VARIANT* Subject, 
                        [in, optional] VARIANT* ShowMessage);
        [id(0x000001f4), helpcontext(0x096b01f4)]
        HRESULT TransformDocument(
                        [in] BSTR Path, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL DataOnly);
        [id(0x000001d3), helpcontext(0x096b01d3)]
        HRESULT Protect(
                        [in] WdProtectionType Type, 
                        [in, optional] VARIANT* NoReset, 
                        [in, optional] VARIANT* Password, 
                        [in, optional] VARIANT* UseIRM, 
                        [in, optional] VARIANT* EnforceStyleLock);
        [id(0x000001d4), helpcontext(0x096b01d4)]
        HRESULT SelectAllEditableRanges([in, optional] VARIANT* EditorID);
        [id(0x000001d5), helpcontext(0x096b01d5)]
        HRESULT DeleteAllEditableRanges([in, optional] VARIANT* EditorID);
        [id(0x000001df), helpcontext(0x096b01df)]
        HRESULT DeleteAllInkAnnotations();
        [id(0x000001e2), hidden, helpcontext(0x096b01e2)]
        HRESULT AddDocumentWorkspaceHeader(
                        [in] VARIANT_BOOL RichFormat, 
                        [in] BSTR Url, 
                        [in] BSTR Title, 
                        [in] BSTR Description, 
                        [in] BSTR ID);
        [id(0x000001e3), hidden, helpcontext(0x096b01e3)]
        HRESULT RemoveDocumentWorkspaceHeader([in] BSTR ID);
        [id(0x000001e5), helpcontext(0x096b01e5)]
        HRESULT Compare(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* AuthorName, 
                        [in, optional] VARIANT* CompareTarget, 
                        [in, optional] VARIANT* DetectFormatChanges, 
                        [in, optional] VARIANT* IgnoreAllComparisonWarnings, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* RemovePersonalInformation, 
                        [in, optional] VARIANT* RemoveDateAndTime);
        [id(0x000001e7), helpcontext(0x096b01e7)]
        HRESULT RemoveLockedStyles();
        [id(0x000001e6), propget, helpcontext(0x096b01e6)]
        HRESULT ChildNodeSuggestions([out, retval] XMLChildNodeSuggestions** prop);
        [id(0x000001e8), helpcontext(0x096b01e8)]
        HRESULT SelectSingleNode(
                        [in] BSTR XPath, 
                        [in, optional, defaultvalue("")] BSTR PrefixMapping, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL FastSearchSkippingTextNodes, 
                        [out, retval] XMLNode** prop);
        [id(0x000001e9), helpcontext(0x096b01e9)]
        HRESULT SelectNodes(
                        [in] BSTR XPath, 
                        [in, optional, defaultvalue("")] BSTR PrefixMapping, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL FastSearchSkippingTextNodes, 
                        [out, retval] XMLNodes** prop);
        [id(0x000001ea), propget, helpcontext(0x096b01ea)]
        HRESULT XMLSchemaViolations([out, retval] XMLNodes** prop);
        [id(0x000001eb), propget, helpcontext(0x096b01eb)]
        HRESULT ReadingLayoutSizeX([out, retval] long* prop);
        [id(0x000001eb), propput, helpcontext(0x096b01eb)]
        HRESULT ReadingLayoutSizeX([in] long prop);
        [id(0x000001ec), propget, helpcontext(0x096b01ec)]
        HRESULT ReadingLayoutSizeY([out, retval] long* prop);
        [id(0x000001ec), propput, helpcontext(0x096b01ec)]
        HRESULT ReadingLayoutSizeY([in] long prop);
    };

    [
      odl,
      uuid(0002096A-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000096a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Template : IDispatch {
        [id(00000000), propget, helpcontext(0x096a0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000003e8), propget, helpcontext(0x096a03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x096a0001)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x096a0002)]
        HRESULT AutoTextEntries([out, retval] AutoTextEntries** prop);
        [id(0x00000004), propget, helpcontext(0x096a0004)]
        HRESULT LanguageID([out, retval] WdLanguageID* prop);
        [id(0x00000004), propput, helpcontext(0x096a0004)]
        HRESULT LanguageID([in] WdLanguageID prop);
        [id(0x00000005), propget, helpcontext(0x096a0005)]
        HRESULT Saved([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x096a0005)]
        HRESULT Saved([in] VARIANT_BOOL prop);
        [id(0x00000006), propget, helpcontext(0x096a0006)]
        HRESULT Type([out, retval] WdTemplateType* prop);
        [id(0x00000007), propget, helpcontext(0x096a0007)]
        HRESULT FullName([out, retval] BSTR* prop);
        [id(0x00000008), propget, helpcontext(0x096a0008)]
        HRESULT BuiltInDocumentProperties([out, retval] IDispatch** prop);
        [id(0x00000009), propget, helpcontext(0x096a0009)]
        HRESULT CustomDocumentProperties([out, retval] IDispatch** prop);
        [id(0x0000000a), propget, helpcontext(0x096a000a)]
        HRESULT ListTemplates([out, retval] ListTemplates** prop);
        [id(0x0000000b), propget, helpcontext(0x096a000b)]
        HRESULT LanguageIDFarEast([out, retval] WdLanguageID* prop);
        [id(0x0000000b), propput, helpcontext(0x096a000b)]
        HRESULT LanguageIDFarEast([in] WdLanguageID prop);
        [id(0x00000063), propget, helpcontext(0x096a0063)]
        HRESULT VBProject([out, retval] VBProject** prop);
        [id(0x0000000c), propget, helpcontext(0x096a000c)]
        HRESULT KerningByAlgorithm([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propput, helpcontext(0x096a000c)]
        HRESULT KerningByAlgorithm([in] VARIANT_BOOL prop);
        [id(0x0000000d), propget, helpcontext(0x096a000d)]
        HRESULT JustificationMode([out, retval] WdJustificationMode* prop);
        [id(0x0000000d), propput, helpcontext(0x096a000d)]
        HRESULT JustificationMode([in] WdJustificationMode prop);
        [id(0x0000000e), propget, helpcontext(0x096a000e)]
        HRESULT FarEastLineBreakLevel([out, retval] WdFarEastLineBreakLevel* prop);
        [id(0x0000000e), propput, helpcontext(0x096a000e)]
        HRESULT FarEastLineBreakLevel([in] WdFarEastLineBreakLevel prop);
        [id(0x0000000f), propget, helpcontext(0x096a000f)]
        HRESULT NoLineBreakBefore([out, retval] BSTR* prop);
        [id(0x0000000f), propput, helpcontext(0x096a000f)]
        HRESULT NoLineBreakBefore([in] BSTR prop);
        [id(0x00000010), propget, helpcontext(0x096a0010)]
        HRESULT NoLineBreakAfter([out, retval] BSTR* prop);
        [id(0x00000010), propput, helpcontext(0x096a0010)]
        HRESULT NoLineBreakAfter([in] BSTR prop);
        [id(0x00000064), helpcontext(0x096a0064)]
        HRESULT OpenAsDocument([out, retval] Document** prop);
        [id(0x00000065), helpcontext(0x096a0065)]
        HRESULT Save();
        [id(0x00000011), propget, helpcontext(0x096a0011)]
        HRESULT NoProofing([out, retval] long* prop);
        [id(0x00000011), propput, helpcontext(0x096a0011)]
        HRESULT NoProofing([in] long prop);
        [id(0x00000012), propget, helpcontext(0x096a0012)]
        HRESULT FarEastLineBreakLanguage([out, retval] WdFarEastLineBreakLanguageID* prop);
        [id(0x00000012), propput, helpcontext(0x096a0012)]
        HRESULT FarEastLineBreakLanguage([in] WdFarEastLineBreakLanguageID prop);
    };

    [
      odl,
      uuid(000209A2-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009a2),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Templates : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09a203e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09a203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09a203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09a20001)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x09a2fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x09a20000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Template** prop);
    };

    [
      odl,
      uuid(00020969-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000969),
      dual,
      nonextensible,
      oleautomation
    ]
    interface RoutingSlip : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x096903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09690001)]
        HRESULT Subject([out, retval] BSTR* prop);
        [id(0x00000001), propput, helpcontext(0x09690001)]
        HRESULT Subject([in] BSTR prop);
        [id(0x00000002), propget, helpcontext(0x09690002)]
        HRESULT Message([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x09690002)]
        HRESULT Message([in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x09690003)]
        HRESULT Delivery([out, retval] WdRoutingSlipDelivery* prop);
        [id(0x00000003), propput, helpcontext(0x09690003)]
        HRESULT Delivery([in] WdRoutingSlipDelivery prop);
        [id(0x00000004), propget, helpcontext(0x09690004)]
        HRESULT TrackStatus([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09690004)]
        HRESULT TrackStatus([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x09690005)]
        HRESULT Protect([out, retval] WdProtectionType* prop);
        [id(0x00000005), propput, helpcontext(0x09690005)]
        HRESULT Protect([in] WdProtectionType prop);
        [id(0x00000006), propget, helpcontext(0x09690006)]
        HRESULT ReturnWhenDone([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x09690006)]
        HRESULT ReturnWhenDone([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09690007)]
        HRESULT Status([out, retval] WdRoutingSlipStatus* prop);
        [id(0x00000009), propget, helpcontext(0x09690009)]
        HRESULT Recipients(
                        [in, optional] VARIANT* Index, 
                        [out, retval] VARIANT* prop);
        [id(0x00000065), helpcontext(0x09690065)]
        HRESULT Reset();
        [id(0x00000066), helpcontext(0x09690066)]
        HRESULT AddRecipient([in] BSTR Recipient);
    };

    [
      odl,
      uuid(00020968-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000968),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Bookmark : IDispatch {
        [id(00000000), propget, helpcontext(0x09680000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09680001)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000002), propget, helpcontext(0x09680002)]
        HRESULT Empty([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propget, helpcontext(0x09680003)]
        HRESULT Start([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x09680003)]
        HRESULT Start([in] long prop);
        [id(0x00000004), propget, helpcontext(0x09680004)]
        HRESULT End([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x09680004)]
        HRESULT End([in] long prop);
        [id(0x00000005), propget, helpcontext(0x09680005)]
        HRESULT Column([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propget, helpcontext(0x09680006)]
        HRESULT StoryType([out, retval] WdStoryType* prop);
        [id(0x000003e8), propget, helpcontext(0x096803e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000ffff), helpcontext(0x0968ffff)]
        HRESULT Select();
        [id(0x0000000b), helpcontext(0x0968000b)]
        HRESULT Delete();
        [id(0x0000000c), helpcontext(0x0968000c)]
        HRESULT Copy(
                        [in] BSTR Name, 
                        [out, retval] Bookmark** prop);
    };

    [
      odl,
      uuid(00020967-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000967),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Bookmarks : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0967fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09670002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09670003)]
        HRESULT DefaultSorting([out, retval] WdBookmarkSortBy* prop);
        [id(0x00000003), propput, helpcontext(0x09670003)]
        HRESULT DefaultSorting([in] WdBookmarkSortBy prop);
        [id(0x00000004), propget, helpcontext(0x09670004)]
        HRESULT ShowHidden([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09670004)]
        HRESULT ShowHidden([in] VARIANT_BOOL prop);
        [id(0x000003e8), propget, helpcontext(0x096703e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09670000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Bookmark** prop);
        [id(0x00000005), helpcontext(0x09670005)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] Bookmark** prop);
        [id(0x00000006), helpcontext(0x09670006)]
        HRESULT Exists(
                        [in] BSTR Name, 
                        [out, retval] VARIANT_BOOL* prop);
    };

    [
      odl,
      uuid(00020966-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000966),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Variable : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x096603e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09660001)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(00000000), propget, helpcontext(0x09660000)]
        HRESULT Value([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x09660000)]
        HRESULT Value([in] BSTR prop);
        [id(0x00000002), propget, helpcontext(0x09660002)]
        HRESULT Index([out, retval] long* prop);
        [id(0x0000000b), helpcontext(0x0966000b)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(00020965-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000965),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Variables : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0965fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09650002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x096503e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09650000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Variable** prop);
        [id(0x00000007), helpcontext(0x09650007)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Value, 
                        [out, retval] Variable** prop);
    };

    [
      odl,
      uuid(00020964-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000964),
      dual,
      nonextensible,
      oleautomation
    ]
    interface RecentFile : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x096403e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09640000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09640001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09640002)]
        HRESULT ReadOnly([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09640002)]
        HRESULT ReadOnly([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x09640003)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000004), helpcontext(0x09640004)]
        HRESULT Open([out, retval] Document** prop);
        [id(0x00000005), helpcontext(0x09640005)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(00020963-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000963),
      dual,
      nonextensible,
      oleautomation
    ]
    interface RecentFiles : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x096303e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0963fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09630001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09630002)]
        HRESULT Maximum([out, retval] long* prop);
        [id(0x00000002), propput, helpcontext(0x09630002)]
        HRESULT Maximum([in] long prop);
        [id(00000000), helpcontext(0x09630000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] RecentFile** prop);
        [id(0x00000003), helpcontext(0x09630003)]
        HRESULT Add(
                        [in] VARIANT* Document, 
                        [in, optional] VARIANT* ReadOnly, 
                        [out, retval] RecentFile** prop);
    };

    [
      odl,
      uuid(00020962-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000962),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Window : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x096203e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09620001)]
        HRESULT ActivePane([out, retval] Pane** prop);
        [id(0x00000002), propget, helpcontext(0x09620002)]
        HRESULT Document([out, retval] Document** prop);
        [id(0x00000003), propget, helpcontext(0x09620003)]
        HRESULT Panes([out, retval] Panes** prop);
        [id(0x00000004), propget, helpcontext(0x09620004)]
        HRESULT Selection([out, retval] Selection** prop);
        [id(0x00000005), propget, helpcontext(0x09620005)]
        HRESULT Left([out, retval] long* prop);
        [id(0x00000005), propput, helpcontext(0x09620005)]
        HRESULT Left([in] long prop);
        [id(0x00000006), propget, helpcontext(0x09620006)]
        HRESULT Top([out, retval] long* prop);
        [id(0x00000006), propput, helpcontext(0x09620006)]
        HRESULT Top([in] long prop);
        [id(0x00000007), propget, helpcontext(0x09620007)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000007), propput, helpcontext(0x09620007)]
        HRESULT Width([in] long prop);
        [id(0x00000008), propget, helpcontext(0x09620008)]
        HRESULT Height([out, retval] long* prop);
        [id(0x00000008), propput, helpcontext(0x09620008)]
        HRESULT Height([in] long prop);
        [id(0x00000009), propget, helpcontext(0x09620009)]
        HRESULT Split([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x09620009)]
        HRESULT Split([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x0962000a)]
        HRESULT SplitVertical([out, retval] long* prop);
        [id(0x0000000a), propput, helpcontext(0x0962000a)]
        HRESULT SplitVertical([in] long prop);
        [id(00000000), propget, helpcontext(0x09620000)]
        HRESULT Caption([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x09620000)]
        HRESULT Caption([in] BSTR prop);
        [id(0x0000000b), propget, helpcontext(0x0962000b)]
        HRESULT WindowState([out, retval] WdWindowState* prop);
        [id(0x0000000b), propput, helpcontext(0x0962000b)]
        HRESULT WindowState([in] WdWindowState prop);
        [id(0x0000000c), propget, helpcontext(0x0962000c)]
        HRESULT DisplayRulers([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propput, helpcontext(0x0962000c)]
        HRESULT DisplayRulers([in] VARIANT_BOOL prop);
        [id(0x0000000d), propget, helpcontext(0x0962000d)]
        HRESULT DisplayVerticalRuler([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), propput, helpcontext(0x0962000d)]
        HRESULT DisplayVerticalRuler([in] VARIANT_BOOL prop);
        [id(0x0000000e), propget, helpcontext(0x0962000e)]
        HRESULT View([out, retval] View** prop);
        [id(0x0000000f), propget, helpcontext(0x0962000f)]
        HRESULT Type([out, retval] WdWindowType* prop);
        [id(0x00000010), propget, helpcontext(0x09620010)]
        HRESULT Next([out, retval] Window** prop);
        [id(0x00000011), propget, helpcontext(0x09620011)]
        HRESULT Previous([out, retval] Window** prop);
        [id(0x00000012), propget, helpcontext(0x09620012)]
        HRESULT WindowNumber([out, retval] long* prop);
        [id(0x00000013), propget, helpcontext(0x09620013)]
        HRESULT DisplayVerticalScrollBar([out, retval] VARIANT_BOOL* prop);
        [id(0x00000013), propput, helpcontext(0x09620013)]
        HRESULT DisplayVerticalScrollBar([in] VARIANT_BOOL prop);
        [id(0x00000014), propget, helpcontext(0x09620014)]
        HRESULT DisplayHorizontalScrollBar([out, retval] VARIANT_BOOL* prop);
        [id(0x00000014), propput, helpcontext(0x09620014)]
        HRESULT DisplayHorizontalScrollBar([in] VARIANT_BOOL prop);
        [id(0x00000015), propget, helpcontext(0x09620015)]
        HRESULT StyleAreaWidth([out, retval] int* prop);
        [id(0x00000015), propput, helpcontext(0x09620015)]
        HRESULT StyleAreaWidth([in] int prop);
        [id(0x00000016), propget, helpcontext(0x09620016)]
        HRESULT DisplayScreenTips([out, retval] VARIANT_BOOL* prop);
        [id(0x00000016), propput, helpcontext(0x09620016)]
        HRESULT DisplayScreenTips([in] VARIANT_BOOL prop);
        [id(0x00000017), propget, helpcontext(0x09620017)]
        HRESULT HorizontalPercentScrolled([out, retval] long* prop);
        [id(0x00000017), propput, helpcontext(0x09620017)]
        HRESULT HorizontalPercentScrolled([in] long prop);
        [id(0x00000018), propget, helpcontext(0x09620018)]
        HRESULT VerticalPercentScrolled([out, retval] long* prop);
        [id(0x00000018), propput, helpcontext(0x09620018)]
        HRESULT VerticalPercentScrolled([in] long prop);
        [id(0x00000019), propget, helpcontext(0x09620019)]
        HRESULT DocumentMap([out, retval] VARIANT_BOOL* prop);
        [id(0x00000019), propput, helpcontext(0x09620019)]
        HRESULT DocumentMap([in] VARIANT_BOOL prop);
        [id(0x0000001a), propget, helpcontext(0x0962001a)]
        HRESULT Active([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001b), propget, helpcontext(0x0962001b)]
        HRESULT DocumentMapPercentWidth([out, retval] long* prop);
        [id(0x0000001b), propput, helpcontext(0x0962001b)]
        HRESULT DocumentMapPercentWidth([in] long prop);
        [id(0x0000001c), propget, helpcontext(0x0962001c)]
        HRESULT Index([out, retval] long* prop);
        [id(0x0000001e), propget, helpcontext(0x0962001e)]
        HRESULT IMEMode([out, retval] WdIMEMode* prop);
        [id(0x0000001e), propput, helpcontext(0x0962001e)]
        HRESULT IMEMode([in] WdIMEMode prop);
        [id(0x00000064), helpcontext(0x09620064)]
        HRESULT Activate();
        [id(0x00000066), helpcontext(0x09620066)]
        HRESULT Close(
                        [in, optional] VARIANT* SaveChanges, 
                        [in, optional] VARIANT* RouteDocument);
        [id(0x00000067), helpcontext(0x09620067)]
        HRESULT LargeScroll(
                        [in, optional] VARIANT* Down, 
                        [in, optional] VARIANT* Up, 
                        [in, optional] VARIANT* ToRight, 
                        [in, optional] VARIANT* ToLeft);
        [id(0x00000068), helpcontext(0x09620068)]
        HRESULT SmallScroll(
                        [in, optional] VARIANT* Down, 
                        [in, optional] VARIANT* Up, 
                        [in, optional] VARIANT* ToRight, 
                        [in, optional] VARIANT* ToLeft);
        [id(0x00000069), helpcontext(0x09620069)]
        HRESULT NewWindow([out, retval] Window** prop);
        [id(0x0000006b), hidden, helpcontext(0x0962006b)]
        HRESULT PrintOutOld(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint);
        [id(0x0000006c), helpcontext(0x0962006c)]
        HRESULT PageScroll(
                        [in, optional] VARIANT* Down, 
                        [in, optional] VARIANT* Up);
        [id(0x0000006d), helpcontext(0x0962006d)]
        HRESULT SetFocus();
        [id(0x0000006e), helpcontext(0x0962006e)]
        HRESULT RangeFromPoint(
                        [in] long x, 
                        [in] long y, 
                        [out, retval] IDispatch** prop);
        [id(0x0000006f), helpcontext(0x0962006f)]
        HRESULT ScrollIntoView(
                        [in] IDispatch* obj, 
                        [in, optional] VARIANT* Start);
        [id(0x00000070), helpcontext(0x09620070)]
        HRESULT GetPoint(
                        [out] long* ScreenPixelsLeft, 
                        [out] long* ScreenPixelsTop, 
                        [out] long* ScreenPixelsWidth, 
                        [out] long* ScreenPixelsHeight, 
                        [in] IDispatch* obj);
        [id(0x000001bc), hidden, helpcontext(0x096201bc)]
        HRESULT PrintOut2000(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint, 
                        [in, optional] VARIANT* PrintZoomColumn, 
                        [in, optional] VARIANT* PrintZoomRow, 
                        [in, optional] VARIANT* PrintZoomPaperWidth, 
                        [in, optional] VARIANT* PrintZoomPaperHeight);
        [id(0x0000001f), propget, helpcontext(0x0962001f)]
        HRESULT UsableWidth([out, retval] long* prop);
        [id(0x00000020), propget, helpcontext(0x09620020)]
        HRESULT UsableHeight([out, retval] long* prop);
        [id(0x00000021), propget, helpcontext(0x09620021)]
        HRESULT EnvelopeVisible([out, retval] VARIANT_BOOL* prop);
        [id(0x00000021), propput, helpcontext(0x09620021)]
        HRESULT EnvelopeVisible([in] VARIANT_BOOL prop);
        [id(0x00000023), propget, helpcontext(0x09620023)]
        HRESULT DisplayRightRuler([out, retval] VARIANT_BOOL* prop);
        [id(0x00000023), propput, helpcontext(0x09620023)]
        HRESULT DisplayRightRuler([in] VARIANT_BOOL prop);
        [id(0x00000022), propget, helpcontext(0x09620022)]
        HRESULT DisplayLeftScrollBar([out, retval] VARIANT_BOOL* prop);
        [id(0x00000022), propput, helpcontext(0x09620022)]
        HRESULT DisplayLeftScrollBar([in] VARIANT_BOOL prop);
        [id(0x00000024), propget, helpcontext(0x09620024)]
        HRESULT Visible([out, retval] VARIANT_BOOL* prop);
        [id(0x00000024), propput, helpcontext(0x09620024)]
        HRESULT Visible([in] VARIANT_BOOL prop);
        [id(0x000001bd), helpcontext(0x096201bd)]
        HRESULT PrintOut(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint, 
                        [in, optional] VARIANT* PrintZoomColumn, 
                        [in, optional] VARIANT* PrintZoomRow, 
                        [in, optional] VARIANT* PrintZoomPaperWidth, 
                        [in, optional] VARIANT* PrintZoomPaperHeight);
        [id(0x000001be), helpcontext(0x096201be)]
        HRESULT ToggleShowAllReviewers();
        [id(0x00000025), propget, helpcontext(0x09620025)]
        HRESULT Thumbnails([out, retval] VARIANT_BOOL* prop);
        [id(0x00000025), propput, helpcontext(0x09620025)]
        HRESULT Thumbnails([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020961-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000961),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Windows : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0961fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09610002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x096103e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09610000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Window** prop);
        [id(0x0000000a), helpcontext(0x0961000a)]
        HRESULT Add(
                        [in, optional] VARIANT* Window, 
                        [out, retval] Window** prop);
        [id(0x0000000b), helpcontext(0x0961000b)]
        HRESULT Arrange([in, optional] VARIANT* ArrangeStyle);
        [id(0x0000000c), helpcontext(0x0961000c)]
        HRESULT CompareSideBySideWith(
                        [in] VARIANT* Document, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), helpcontext(0x0961000d)]
        HRESULT BreakSideBySide([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000e), helpcontext(0x0961000e)]
        HRESULT ResetPositionsSideBySide();
        [id(0x000003eb), propget, helpcontext(0x096103eb)]
        HRESULT SyncScrollingSideBySide([out, retval] VARIANT_BOOL* prop);
        [id(0x000003eb), propput, helpcontext(0x096103eb)]
        HRESULT SyncScrollingSideBySide([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020960-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000960),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Pane : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x096003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09600001)]
        HRESULT Document([out, retval] Document** prop);
        [id(0x00000003), propget, helpcontext(0x09600003)]
        HRESULT Selection([out, retval] Selection** prop);
        [id(0x00000004), propget, helpcontext(0x09600004)]
        HRESULT DisplayRulers([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09600004)]
        HRESULT DisplayRulers([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x09600005)]
        HRESULT DisplayVerticalRuler([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x09600005)]
        HRESULT DisplayVerticalRuler([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09600007)]
        HRESULT Zooms([out, retval] Zooms** prop);
        [id(0x00000009), propget, helpcontext(0x09600009)]
        HRESULT Index([out, retval] long* prop);
        [id(0x0000000a), propget, helpcontext(0x0960000a)]
        HRESULT View([out, retval] View** prop);
        [id(0x0000000b), propget, helpcontext(0x0960000b)]
        HRESULT Next([out, retval] Pane** prop);
        [id(0x0000000c), propget, helpcontext(0x0960000c)]
        HRESULT Previous([out, retval] Pane** prop);
        [id(0x0000000d), propget, helpcontext(0x0960000d)]
        HRESULT HorizontalPercentScrolled([out, retval] long* prop);
        [id(0x0000000d), propput, helpcontext(0x0960000d)]
        HRESULT HorizontalPercentScrolled([in] long prop);
        [id(0x0000000e), propget, helpcontext(0x0960000e)]
        HRESULT VerticalPercentScrolled([out, retval] long* prop);
        [id(0x0000000e), propput, helpcontext(0x0960000e)]
        HRESULT VerticalPercentScrolled([in] long prop);
        [id(0x0000000f), propget, helpcontext(0x0960000f)]
        HRESULT MinimumFontSize([out, retval] long* prop);
        [id(0x0000000f), propput, helpcontext(0x0960000f)]
        HRESULT MinimumFontSize([in] long prop);
        [id(0x00000010), propget, hidden, helpcontext(0x09600010)]
        HRESULT BrowseToWindow([out, retval] VARIANT_BOOL* prop);
        [id(0x00000010), propput, hidden, helpcontext(0x09600010)]
        HRESULT BrowseToWindow([in] VARIANT_BOOL prop);
        [id(0x00000011), propget, helpcontext(0x09600011)]
        HRESULT BrowseWidth([out, retval] long* prop);
        [id(0x00000064), helpcontext(0x09600064)]
        HRESULT Activate();
        [id(0x00000065), helpcontext(0x09600065)]
        HRESULT Close();
        [id(0x00000066), helpcontext(0x09600066)]
        HRESULT LargeScroll(
                        [in, optional] VARIANT* Down, 
                        [in, optional] VARIANT* Up, 
                        [in, optional] VARIANT* ToRight, 
                        [in, optional] VARIANT* ToLeft);
        [id(0x00000067), helpcontext(0x09600067)]
        HRESULT SmallScroll(
                        [in, optional] VARIANT* Down, 
                        [in, optional] VARIANT* Up, 
                        [in, optional] VARIANT* ToRight, 
                        [in, optional] VARIANT* ToLeft);
        [id(0x00000068), helpcontext(0x09600068)]
        HRESULT AutoScroll([in] long Velocity);
        [id(0x00000069), helpcontext(0x09600069)]
        HRESULT PageScroll(
                        [in, optional] VARIANT* Down, 
                        [in, optional] VARIANT* Up);
        [id(0x0000006a), helpcontext(0x0960006a)]
        HRESULT NewFrameset();
        [id(0x0000006b), helpcontext(0x0960006b)]
        HRESULT TOCInFrameset();
        [id(0x00000012), propget, helpcontext(0x09600012)]
        HRESULT Frameset([out, retval] Frameset** prop);
        [id(0x00000013), propget, helpcontext(0x09600013)]
        HRESULT Pages([out, retval] Pages** prop);
    };

    [
      odl,
      uuid(0002095F-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000095f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Panes : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x095ffffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x095f0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x095f03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095f03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095f03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x095f0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Pane** prop);
        [id(0x00000003), helpcontext(0x095f0003)]
        HRESULT Add(
                        [in, optional] VARIANT* SplitVertical, 
                        [out, retval] Pane** prop);
    };

    [
      odl,
      uuid(0002095E-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000095e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Range : IDispatch {
        [id(00000000), propget, helpcontext(0x095e0000)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x095e0000)]
        HRESULT Text([in] BSTR prop);
        [id(0x00000002), propget, helpcontext(0x095e0002)]
        HRESULT FormattedText([out, retval] Range** prop);
        [id(0x00000002), propput, helpcontext(0x095e0002)]
        HRESULT FormattedText([in] Range* prop);
        [id(0x00000003), propget, helpcontext(0x095e0003)]
        HRESULT Start([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x095e0003)]
        HRESULT Start([in] long prop);
        [id(0x00000004), propget, helpcontext(0x095e0004)]
        HRESULT End([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x095e0004)]
        HRESULT End([in] long prop);
        [id(0x00000005), propget, helpcontext(0x095e0005)]
        HRESULT Font([out, retval] Font** prop);
        [id(0x00000005), propput, helpcontext(0x095e0005)]
        HRESULT Font([in] Font* prop);
        [id(0x00000006), propget, helpcontext(0x095e0006)]
        HRESULT Duplicate([out, retval] Range** prop);
        [id(0x00000007), propget, helpcontext(0x095e0007)]
        HRESULT StoryType([out, retval] WdStoryType* prop);
        [id(0x00000032), propget, helpcontext(0x095e0032)]
        HRESULT Tables([out, retval] Tables** prop);
        [id(0x00000033), propget, helpcontext(0x095e0033)]
        HRESULT Words([out, retval] Words** prop);
        [id(0x00000034), propget, helpcontext(0x095e0034)]
        HRESULT Sentences([out, retval] Sentences** prop);
        [id(0x00000035), propget, helpcontext(0x095e0035)]
        HRESULT Characters([out, retval] Characters** prop);
        [id(0x00000036), propget, helpcontext(0x095e0036)]
        HRESULT Footnotes([out, retval] Footnotes** prop);
        [id(0x00000037), propget, helpcontext(0x095e0037)]
        HRESULT Endnotes([out, retval] Endnotes** prop);
        [id(0x00000038), propget, helpcontext(0x095e0038)]
        HRESULT Comments([out, retval] Comments** prop);
        [id(0x00000039), propget, helpcontext(0x095e0039)]
        HRESULT Cells([out, retval] Cells** prop);
        [id(0x0000003a), propget, helpcontext(0x095e003a)]
        HRESULT Sections([out, retval] Sections** prop);
        [id(0x0000003b), propget, helpcontext(0x095e003b)]
        HRESULT Paragraphs([out, retval] Paragraphs** prop);
        [id(0x0000044c), propget, helpcontext(0x095e044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x095e044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x0000003d), propget, helpcontext(0x095e003d)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x0000003e), propget, helpcontext(0x095e003e)]
        HRESULT TextRetrievalMode([out, retval] TextRetrievalMode** prop);
        [id(0x0000003e), propput, helpcontext(0x095e003e)]
        HRESULT TextRetrievalMode([in] TextRetrievalMode* prop);
        [id(0x00000040), propget, helpcontext(0x095e0040)]
        HRESULT Fields([out, retval] Fields** prop);
        [id(0x00000041), propget, helpcontext(0x095e0041)]
        HRESULT FormFields([out, retval] FormFields** prop);
        [id(0x00000042), propget, helpcontext(0x095e0042)]
        HRESULT Frames([out, retval] Frames** prop);
        [id(0x0000044e), propget, helpcontext(0x095e044e)]
        HRESULT ParagraphFormat([out, retval] ParagraphFormat** prop);
        [id(0x0000044e), propput, helpcontext(0x095e044e)]
        HRESULT ParagraphFormat([in] ParagraphFormat* prop);
        [id(0x00000044), propget, helpcontext(0x095e0044)]
        HRESULT ListFormat([out, retval] ListFormat** prop);
        [id(0x0000004b), propget, helpcontext(0x095e004b)]
        HRESULT Bookmarks([out, retval] Bookmarks** prop);
        [id(0x000003e8), propget, helpcontext(0x095e03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000082), propget, helpcontext(0x095e0082)]
        HRESULT Bold([out, retval] long* prop);
        [id(0x00000082), propput, helpcontext(0x095e0082)]
        HRESULT Bold([in] long prop);
        [id(0x00000083), propget, helpcontext(0x095e0083)]
        HRESULT Italic([out, retval] long* prop);
        [id(0x00000083), propput, helpcontext(0x095e0083)]
        HRESULT Italic([in] long prop);
        [id(0x0000008b), propget, helpcontext(0x095e008b)]
        HRESULT Underline([out, retval] WdUnderline* prop);
        [id(0x0000008b), propput, helpcontext(0x095e008b)]
        HRESULT Underline([in] WdUnderline prop);
        [id(0x0000008c), propget, helpcontext(0x095e008c)]
        HRESULT EmphasisMark([out, retval] WdEmphasisMark* prop);
        [id(0x0000008c), propput, helpcontext(0x095e008c)]
        HRESULT EmphasisMark([in] WdEmphasisMark prop);
        [id(0x0000008d), propget, helpcontext(0x095e008d)]
        HRESULT DisableCharacterSpaceGrid([out, retval] VARIANT_BOOL* prop);
        [id(0x0000008d), propput, helpcontext(0x095e008d)]
        HRESULT DisableCharacterSpaceGrid([in] VARIANT_BOOL prop);
        [id(0x00000096), propget, helpcontext(0x095e0096)]
        HRESULT Revisions([out, retval] Revisions** prop);
        [id(0x00000097), propget, helpcontext(0x095e0097)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(0x00000097), propput, helpcontext(0x095e0097)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x00000098), propget, helpcontext(0x095e0098)]
        HRESULT StoryLength([out, retval] long* prop);
        [id(0x00000099), propget, helpcontext(0x095e0099)]
        HRESULT LanguageID([out, retval] WdLanguageID* prop);
        [id(0x00000099), propput, helpcontext(0x095e0099)]
        HRESULT LanguageID([in] WdLanguageID prop);
        [id(0x0000009b), propget, helpcontext(0x095e009b)]
        HRESULT SynonymInfo([out, retval] SynonymInfo** prop);
        [id(0x0000009c), propget, helpcontext(0x095e009c)]
        HRESULT Hyperlinks([out, retval] Hyperlinks** prop);
        [id(0x0000009d), propget, helpcontext(0x095e009d)]
        HRESULT ListParagraphs([out, retval] ListParagraphs** prop);
        [id(0x0000009f), propget, helpcontext(0x095e009f)]
        HRESULT Subdocuments([out, retval] Subdocuments** prop);
        [id(0x00000104), propget, helpcontext(0x095e0104)]
        HRESULT GrammarChecked([out, retval] VARIANT_BOOL* prop);
        [id(0x00000104), propput, helpcontext(0x095e0104)]
        HRESULT GrammarChecked([in] VARIANT_BOOL prop);
        [id(0x00000105), propget, helpcontext(0x095e0105)]
        HRESULT SpellingChecked([out, retval] VARIANT_BOOL* prop);
        [id(0x00000105), propput, helpcontext(0x095e0105)]
        HRESULT SpellingChecked([in] VARIANT_BOOL prop);
        [id(0x0000012d), propget, helpcontext(0x095e012d)]
        HRESULT HighlightColorIndex([out, retval] WdColorIndex* prop);
        [id(0x0000012d), propput, helpcontext(0x095e012d)]
        HRESULT HighlightColorIndex([in] WdColorIndex prop);
        [id(0x0000012e), propget, helpcontext(0x095e012e)]
        HRESULT Columns([out, retval] Columns** prop);
        [id(0x0000012f), propget, helpcontext(0x095e012f)]
        HRESULT Rows([out, retval] Rows** prop);
        [id(0x00000130), propget, hidden, helpcontext(0x095e0130)]
        HRESULT CanEdit([out, retval] long* prop);
        [id(0x00000131), propget, hidden, helpcontext(0x095e0131)]
        HRESULT CanPaste([out, retval] long* prop);
        [id(0x00000133), propget, helpcontext(0x095e0133)]
        HRESULT IsEndOfRowMark([out, retval] VARIANT_BOOL* prop);
        [id(0x00000134), propget, helpcontext(0x095e0134)]
        HRESULT BookmarkID([out, retval] long* prop);
        [id(0x00000135), propget, helpcontext(0x095e0135)]
        HRESULT PreviousBookmarkID([out, retval] long* prop);
        [id(0x00000106), propget, helpcontext(0x095e0106)]
        HRESULT Find([out, retval] Find** prop);
        [id(0x0000044d), propget, helpcontext(0x095e044d)]
        HRESULT PageSetup([out, retval] PageSetup** prop);
        [id(0x0000044d), propput, helpcontext(0x095e044d)]
        HRESULT PageSetup([in] PageSetup* prop);
        [id(0x00000137), propget, helpcontext(0x095e0137)]
        HRESULT ShapeRange([out, retval] ShapeRange** prop);
        [id(0x00000138), propget, helpcontext(0x095e0138)]
        HRESULT Case([out, retval] WdCharacterCase* prop);
        [id(0x00000138), propput, helpcontext(0x095e0138)]
        HRESULT Case([in] WdCharacterCase prop);
        [id(0x00000139), propget, helpcontext(0x095e0139)]
        HRESULT Information(
                        [in] WdInformation Type, 
                        [out, retval] VARIANT* prop);
        [id(0x0000013a), propget, helpcontext(0x095e013a)]
        HRESULT ReadabilityStatistics([out, retval] ReadabilityStatistics** prop);
        [id(0x0000013b), propget, helpcontext(0x095e013b)]
        HRESULT GrammaticalErrors([out, retval] ProofreadingErrors** prop);
        [id(0x0000013c), propget, helpcontext(0x095e013c)]
        HRESULT SpellingErrors([out, retval] ProofreadingErrors** prop);
        [id(0x0000013d), propget, helpcontext(0x095e013d)]
        HRESULT Orientation([out, retval] WdTextOrientation* prop);
        [id(0x0000013d), propput, helpcontext(0x095e013d)]
        HRESULT Orientation([in] WdTextOrientation prop);
        [id(0x0000013f), propget, helpcontext(0x095e013f)]
        HRESULT InlineShapes([out, retval] InlineShapes** prop);
        [id(0x00000140), propget, helpcontext(0x095e0140)]
        HRESULT NextStoryRange([out, retval] Range** prop);
        [id(0x00000141), propget, helpcontext(0x095e0141)]
        HRESULT LanguageIDFarEast([out, retval] WdLanguageID* prop);
        [id(0x00000141), propput, helpcontext(0x095e0141)]
        HRESULT LanguageIDFarEast([in] WdLanguageID prop);
        [id(0x00000142), propget, helpcontext(0x095e0142)]
        HRESULT LanguageIDOther([out, retval] WdLanguageID* prop);
        [id(0x00000142), propput, helpcontext(0x095e0142)]
        HRESULT LanguageIDOther([in] WdLanguageID prop);
        [id(0x0000ffff), helpcontext(0x095effff)]
        HRESULT Select();
        [id(0x00000064), helpcontext(0x095e0064)]
        HRESULT SetRange(
                        [in] long Start, 
                        [in] long End);
        [id(0x00000065), helpcontext(0x095e0065)]
        HRESULT Collapse([in, optional] VARIANT* Direction);
        [id(0x00000066), helpcontext(0x095e0066)]
        HRESULT InsertBefore([in] BSTR Text);
        [id(0x00000068), helpcontext(0x095e0068)]
        HRESULT InsertAfter([in] BSTR Text);
        [id(0x00000069), helpcontext(0x095e0069)]
        HRESULT Next(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] Range** prop);
        [id(0x0000006a), helpcontext(0x095e006a)]
        HRESULT Previous(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] Range** prop);
        [id(0x0000006b), helpcontext(0x095e006b)]
        HRESULT StartOf(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x0000006c), helpcontext(0x095e006c)]
        HRESULT EndOf(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x0000006d), helpcontext(0x095e006d)]
        HRESULT Move(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x0000006e), helpcontext(0x095e006e)]
        HRESULT MoveStart(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x0000006f), helpcontext(0x095e006f)]
        HRESULT MoveEnd(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000070), helpcontext(0x095e0070)]
        HRESULT MoveWhile(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000071), helpcontext(0x095e0071)]
        HRESULT MoveStartWhile(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000072), helpcontext(0x095e0072)]
        HRESULT MoveEndWhile(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000073), helpcontext(0x095e0073)]
        HRESULT MoveUntil(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000074), helpcontext(0x095e0074)]
        HRESULT MoveStartUntil(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000075), helpcontext(0x095e0075)]
        HRESULT MoveEndUntil(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000077), helpcontext(0x095e0077)]
        HRESULT Cut();
        [id(0x00000078), helpcontext(0x095e0078)]
        HRESULT Copy();
        [id(0x00000079), helpcontext(0x095e0079)]
        HRESULT Paste();
        [id(0x0000007a), helpcontext(0x095e007a)]
        HRESULT InsertBreak([in, optional] VARIANT* Type);
        [id(0x0000007b), helpcontext(0x095e007b)]
        HRESULT InsertFile(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* Link, 
                        [in, optional] VARIANT* Attachment);
        [id(0x0000007d), helpcontext(0x095e007d)]
        HRESULT InStory(
                        [in] Range* Range, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000007e), helpcontext(0x095e007e)]
        HRESULT InRange(
                        [in] Range* Range, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000007f), helpcontext(0x095e007f)]
        HRESULT Delete(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000080), helpcontext(0x095e0080)]
        HRESULT WholeStory();
        [id(0x00000081), helpcontext(0x095e0081)]
        HRESULT Expand(
                        [in, optional] VARIANT* Unit, 
                        [out, retval] long* prop);
        [id(0x000000a0), helpcontext(0x095e00a0)]
        HRESULT InsertParagraph();
        [id(0x000000a1), helpcontext(0x095e00a1)]
        HRESULT InsertParagraphAfter();
        [id(0x000000a2), hidden, helpcontext(0x095e00a2)]
        HRESULT ConvertToTableOld(
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* NumRows, 
                        [in, optional] VARIANT* NumColumns, 
                        [in, optional] VARIANT* InitialColumnWidth, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ApplyBorders, 
                        [in, optional] VARIANT* ApplyShading, 
                        [in, optional] VARIANT* ApplyFont, 
                        [in, optional] VARIANT* ApplyColor, 
                        [in, optional] VARIANT* ApplyHeadingRows, 
                        [in, optional] VARIANT* ApplyLastRow, 
                        [in, optional] VARIANT* ApplyFirstColumn, 
                        [in, optional] VARIANT* ApplyLastColumn, 
                        [in, optional] VARIANT* AutoFit, 
                        [out, retval] Table** prop);
        [id(0x000000a3), hidden, helpcontext(0x095e00a3)]
        HRESULT InsertDateTimeOld(
                        [in, optional] VARIANT* DateTimeFormat, 
                        [in, optional] VARIANT* InsertAsField, 
                        [in, optional] VARIANT* InsertAsFullWidth);
        [id(0x000000a4), helpcontext(0x095e00a4)]
        HRESULT InsertSymbol(
                        [in] long CharacterNumber, 
                        [in, optional] VARIANT* Font, 
                        [in, optional] VARIANT* Unicode, 
                        [in, optional] VARIANT* Bias);
        [id(0x000000a5), hidden, helpcontext(0x095e00a5)]
        HRESULT InsertCrossReference_2002(
                        [in] VARIANT* ReferenceType, 
                        [in] WdReferenceKind ReferenceKind, 
                        [in] VARIANT* ReferenceItem, 
                        [in, optional] VARIANT* InsertAsHyperlink, 
                        [in, optional] VARIANT* IncludePosition);
        [id(0x000000a6), hidden, helpcontext(0x095e00a6)]
        HRESULT InsertCaptionXP(
                        [in] VARIANT* Label, 
                        [in, optional] VARIANT* Title, 
                        [in, optional] VARIANT* TitleAutoText, 
                        [in, optional] VARIANT* Position);
        [id(0x000000a7), helpcontext(0x095e00a7)]
        HRESULT CopyAsPicture();
        [id(0x000000a8), hidden, helpcontext(0x095e00a8)]
        HRESULT SortOld(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* FieldNumber, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* FieldNumber2, 
                        [in, optional] VARIANT* SortFieldType2, 
                        [in, optional] VARIANT* SortOrder2, 
                        [in, optional] VARIANT* FieldNumber3, 
                        [in, optional] VARIANT* SortFieldType3, 
                        [in, optional] VARIANT* SortOrder3, 
                        [in, optional] VARIANT* SortColumn, 
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* LanguageID);
        [id(0x000000a9), helpcontext(0x095e00a9)]
        HRESULT SortAscending();
        [id(0x000000aa), helpcontext(0x095e00aa)]
        HRESULT SortDescending();
        [id(0x000000ab), helpcontext(0x095e00ab)]
        HRESULT IsEqual(
                        [in] Range* Range, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x000000ac), helpcontext(0x095e00ac)]
        HRESULT Calculate([out, retval] int* prop);
        [id(0x000000ad), helpcontext(0x095e00ad)]
        HRESULT GoTo(
                        [in, optional] VARIANT* What, 
                        [in, optional] VARIANT* Which, 
                        [in, optional] VARIANT* Count, 
                        [in, optional] VARIANT* Name, 
                        [out, retval] Range** prop);
        [id(0x000000ae), helpcontext(0x095e00ae)]
        HRESULT GoToNext(
                        [in] WdGoToItem What, 
                        [out, retval] Range** prop);
        [id(0x000000af), helpcontext(0x095e00af)]
        HRESULT GoToPrevious(
                        [in] WdGoToItem What, 
                        [out, retval] Range** prop);
        [id(0x000000b0), helpcontext(0x095e00b0)]
        HRESULT PasteSpecial(
                        [in, optional] VARIANT* IconIndex, 
                        [in, optional] VARIANT* Link, 
                        [in, optional] VARIANT* Placement, 
                        [in, optional] VARIANT* DisplayAsIcon, 
                        [in, optional] VARIANT* DataType, 
                        [in, optional] VARIANT* IconFileName, 
                        [in, optional] VARIANT* IconLabel);
        [id(0x000000b1), helpcontext(0x095e00b1)]
        HRESULT LookupNameProperties();
        [id(0x000000b2), helpcontext(0x095e00b2)]
        HRESULT ComputeStatistics(
                        [in] WdStatistic Statistic, 
                        [out, retval] long* prop);
        [id(0x000000b3), helpcontext(0x095e00b3)]
        HRESULT Relocate([in] long Direction);
        [id(0x000000b4), helpcontext(0x095e00b4)]
        HRESULT CheckSynonyms();
        [id(0x000000b5), helpcontext(0x095e00b5)]
        HRESULT SubscribeTo(
                        [in] BSTR Edition, 
                        [in, optional] VARIANT* Format);
        [id(0x000000b6), helpcontext(0x095e00b6)]
        HRESULT CreatePublisher(
                        [in, optional] VARIANT* Edition, 
                        [in, optional] VARIANT* ContainsPICT, 
                        [in, optional] VARIANT* ContainsRTF, 
                        [in, optional] VARIANT* ContainsText);
        [id(0x000000b7), helpcontext(0x095e00b7)]
        HRESULT InsertAutoText();
        [id(0x000000c2), helpcontext(0x095e00c2)]
        HRESULT InsertDatabase(
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* Style, 
                        [in, optional] VARIANT* LinkToSource, 
                        [in, optional] VARIANT* Connection, 
                        [in, optional] VARIANT* SQLStatement, 
                        [in, optional] VARIANT* SQLStatement1, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* DataSource, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* IncludeFields);
        [id(0x000000c3), helpcontext(0x095e00c3)]
        HRESULT AutoFormat();
        [id(0x000000cc), helpcontext(0x095e00cc)]
        HRESULT CheckGrammar();
        [id(0x000000cd), helpcontext(0x095e00cd)]
        HRESULT CheckSpelling(
                        [in, optional] VARIANT* CustomDictionary, 
                        [in, optional] VARIANT* IgnoreUppercase, 
                        [in, optional] VARIANT* AlwaysSuggest, 
                        [in, optional] VARIANT* CustomDictionary2, 
                        [in, optional] VARIANT* CustomDictionary3, 
                        [in, optional] VARIANT* CustomDictionary4, 
                        [in, optional] VARIANT* CustomDictionary5, 
                        [in, optional] VARIANT* CustomDictionary6, 
                        [in, optional] VARIANT* CustomDictionary7, 
                        [in, optional] VARIANT* CustomDictionary8, 
                        [in, optional] VARIANT* CustomDictionary9, 
                        [in, optional] VARIANT* CustomDictionary10);
        [id(0x000000d1), helpcontext(0x095e00d1)]
        HRESULT GetSpellingSuggestions(
                        [in, optional] VARIANT* CustomDictionary, 
                        [in, optional] VARIANT* IgnoreUppercase, 
                        [in, optional] VARIANT* MainDictionary, 
                        [in, optional] VARIANT* SuggestionMode, 
                        [in, optional] VARIANT* CustomDictionary2, 
                        [in, optional] VARIANT* CustomDictionary3, 
                        [in, optional] VARIANT* CustomDictionary4, 
                        [in, optional] VARIANT* CustomDictionary5, 
                        [in, optional] VARIANT* CustomDictionary6, 
                        [in, optional] VARIANT* CustomDictionary7, 
                        [in, optional] VARIANT* CustomDictionary8, 
                        [in, optional] VARIANT* CustomDictionary9, 
                        [in, optional] VARIANT* CustomDictionary10, 
                        [out, retval] SpellingSuggestions** prop);
        [id(0x000000d4), helpcontext(0x095e00d4)]
        HRESULT InsertParagraphBefore();
        [id(0x000000db), helpcontext(0x095e00db)]
        HRESULT NextSubdocument();
        [id(0x000000dc), helpcontext(0x095e00dc)]
        HRESULT PreviousSubdocument();
        [id(0x000000dd), helpcontext(0x095e00dd)]
        HRESULT ConvertHangulAndHanja(
                        [in, optional] VARIANT* ConversionsMode, 
                        [in, optional] VARIANT* FastConversion, 
                        [in, optional] VARIANT* CheckHangulEnding, 
                        [in, optional] VARIANT* EnableRecentOrdering, 
                        [in, optional] VARIANT* CustomDictionary);
        [id(0x000000de), helpcontext(0x095e00de)]
        HRESULT PasteAsNestedTable();
        [id(0x000000df), helpcontext(0x095e00df)]
        HRESULT ModifyEnclosure(
                        [in] VARIANT* Style, 
                        [in, optional] VARIANT* Symbol, 
                        [in, optional] VARIANT* EnclosedText);
        [id(0x000000e0), helpcontext(0x095e00e0)]
        HRESULT PhoneticGuide(
                        [in] BSTR Text, 
                        [in, optional, defaultvalue(-1)] WdPhoneticGuideAlignmentType Alignment, 
                        [in, optional, defaultvalue(0)] long Raise, 
                        [in, optional, defaultvalue(0)] long FontSize, 
                        [in, optional, defaultvalue("")] BSTR FontName);
        [id(0x000001bc), helpcontext(0x095e01bc)]
        HRESULT InsertDateTime(
                        [in, optional] VARIANT* DateTimeFormat, 
                        [in, optional] VARIANT* InsertAsField, 
                        [in, optional] VARIANT* InsertAsFullWidth, 
                        [in, optional] VARIANT* DateLanguage, 
                        [in, optional] VARIANT* CalendarType);
        [id(0x000001e4), helpcontext(0x095e01e4)]
        HRESULT Sort(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* FieldNumber, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* FieldNumber2, 
                        [in, optional] VARIANT* SortFieldType2, 
                        [in, optional] VARIANT* SortOrder2, 
                        [in, optional] VARIANT* FieldNumber3, 
                        [in, optional] VARIANT* SortFieldType3, 
                        [in, optional] VARIANT* SortOrder3, 
                        [in, optional] VARIANT* SortColumn, 
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* BidiSort, 
                        [in, optional] VARIANT* IgnoreThe, 
                        [in, optional] VARIANT* IgnoreKashida, 
                        [in, optional] VARIANT* IgnoreDiacritics, 
                        [in, optional] VARIANT* IgnoreHe, 
                        [in, optional] VARIANT* LanguageID);
        [id(0x000000cb), helpcontext(0x095e00cb)]
        HRESULT DetectLanguage();
        [id(0x000001f2), helpcontext(0x095e01f2)]
        HRESULT ConvertToTable(
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* NumRows, 
                        [in, optional] VARIANT* NumColumns, 
                        [in, optional] VARIANT* InitialColumnWidth, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ApplyBorders, 
                        [in, optional] VARIANT* ApplyShading, 
                        [in, optional] VARIANT* ApplyFont, 
                        [in, optional] VARIANT* ApplyColor, 
                        [in, optional] VARIANT* ApplyHeadingRows, 
                        [in, optional] VARIANT* ApplyLastRow, 
                        [in, optional] VARIANT* ApplyFirstColumn, 
                        [in, optional] VARIANT* ApplyLastColumn, 
                        [in, optional] VARIANT* AutoFit, 
                        [in, optional] VARIANT* AutoFitBehavior, 
                        [in, optional] VARIANT* DefaultTableBehavior, 
                        [out, retval] Table** prop);
        [id(0x000001f3), helpcontext(0x095e01f3)]
        HRESULT TCSCConverter(
                        [in, optional, defaultvalue(2)] WdTCSCConverterDirection WdTCSCConverterDirection, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL CommonTerms, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL UseVariants);
        [id(0x00000107), propget, helpcontext(0x095e0107)]
        HRESULT LanguageDetected([out, retval] VARIANT_BOOL* prop);
        [id(0x00000107), propput, helpcontext(0x095e0107)]
        HRESULT LanguageDetected([in] VARIANT_BOOL prop);
        [id(0x00000108), propget, helpcontext(0x095e0108)]
        HRESULT FitTextWidth([out, retval] int* prop);
        [id(0x00000108), propput, helpcontext(0x095e0108)]
        HRESULT FitTextWidth([in] int prop);
        [id(0x00000109), propget, helpcontext(0x095e0109)]
        HRESULT HorizontalInVertical([out, retval] WdHorizontalInVerticalType* prop);
        [id(0x00000109), propput, helpcontext(0x095e0109)]
        HRESULT HorizontalInVertical([in] WdHorizontalInVerticalType prop);
        [id(0x0000010a), propget, helpcontext(0x095e010a)]
        HRESULT TwoLinesInOne([out, retval] WdTwoLinesInOneType* prop);
        [id(0x0000010a), propput, helpcontext(0x095e010a)]
        HRESULT TwoLinesInOne([in] WdTwoLinesInOneType prop);
        [id(0x0000010b), propget, helpcontext(0x095e010b)]
        HRESULT CombineCharacters([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010b), propput, helpcontext(0x095e010b)]
        HRESULT CombineCharacters([in] VARIANT_BOOL prop);
        [id(0x00000143), propget, helpcontext(0x095e0143)]
        HRESULT NoProofing([out, retval] long* prop);
        [id(0x00000143), propput, helpcontext(0x095e0143)]
        HRESULT NoProofing([in] long prop);
        [id(0x00000144), propget, helpcontext(0x095e0144)]
        HRESULT TopLevelTables([out, retval] Tables** prop);
        [id(0x00000145), propget, helpcontext(0x095e0145)]
        HRESULT Scripts([out, retval] Scripts** prop);
        [id(0x00000146), propget, helpcontext(0x095e0146)]
        HRESULT CharacterWidth([out, retval] WdCharacterWidth* prop);
        [id(0x00000146), propput, helpcontext(0x095e0146)]
        HRESULT CharacterWidth([in] WdCharacterWidth prop);
        [id(0x00000147), propget, helpcontext(0x095e0147)]
        HRESULT Kana([out, retval] WdKana* prop);
        [id(0x00000147), propput, helpcontext(0x095e0147)]
        HRESULT Kana([in] WdKana prop);
        [id(0x00000190), propget, helpcontext(0x095e0190)]
        HRESULT BoldBi([out, retval] long* prop);
        [id(0x00000190), propput, helpcontext(0x095e0190)]
        HRESULT BoldBi([in] long prop);
        [id(0x00000191), propget, helpcontext(0x095e0191)]
        HRESULT ItalicBi([out, retval] long* prop);
        [id(0x00000191), propput, helpcontext(0x095e0191)]
        HRESULT ItalicBi([in] long prop);
        [id(0x00000195), propget, helpcontext(0x095e0195)]
        HRESULT ID([out, retval] BSTR* prop);
        [id(0x00000195), propput, helpcontext(0x095e0195)]
        HRESULT ID([in] BSTR prop);
        [id(0x00000196), propget, helpcontext(0x095e0196)]
        HRESULT HTMLDivisions([out, retval] HTMLDivisions** prop);
        [id(0x00000197), propget, helpcontext(0x095e0197)]
        HRESULT SmartTags([out, retval] SmartTags** prop);
        [id(0x00000198), propget, helpcontext(0x095e0198)]
        HRESULT ShowAll([out, retval] VARIANT_BOOL* prop);
        [id(0x00000198), propput, helpcontext(0x095e0198)]
        HRESULT ShowAll([in] VARIANT_BOOL prop);
        [id(0x00000199), propget, helpcontext(0x095e0199)]
        HRESULT Document([out, retval] Document** prop);
        [id(0x0000019a), propget, helpcontext(0x095e019a)]
        HRESULT FootnoteOptions([out, retval] FootnoteOptions** prop);
        [id(0x0000019b), propget, helpcontext(0x095e019b)]
        HRESULT EndnoteOptions([out, retval] EndnoteOptions** prop);
        [id(0x0000019c), helpcontext(0x095e019c)]
        HRESULT PasteAndFormat([in] WdRecoveryType Type);
        [id(0x0000019d), helpcontext(0x095e019d)]
        HRESULT PasteExcelTable(
                        [in] VARIANT_BOOL LinkedToExcel, 
                        [in] VARIANT_BOOL WordFormatting, 
                        [in] VARIANT_BOOL RTF);
        [id(0x0000019e), helpcontext(0x095e019e)]
        HRESULT PasteAppendTable();
        [id(0x00000154), propget, helpcontext(0x095e0154)]
        HRESULT XMLNodes([out, retval] XMLNodes** prop);
        [id(0x00000155), propget, helpcontext(0x095e0155)]
        HRESULT XMLParentNode([out, retval] XMLNode** prop);
        [id(0x00000157), propget, helpcontext(0x095e0157)]
        HRESULT Editors([out, retval] Editors** prop);
        [id(0x00000158), propget, helpcontext(0x095e0158)]
        HRESULT XML(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL DataOnly, 
                        [out, retval] BSTR* prop);
        [id(0x00000159), propget, helpcontext(0x095e0159)]
        HRESULT EnhMetaFileBits([out, retval] VARIANT* prop);
        [id(0x0000019f), helpcontext(0x095e019f)]
        HRESULT GoToEditableRange(
                        [in, optional] VARIANT* EditorID, 
                        [out, retval] Range** prop);
        [id(0x000001a0), helpcontext(0x095e01a0)]
        HRESULT InsertXML(
                        [in] BSTR XML, 
                        [in, optional] VARIANT* Transform);
        [id(0x000001a1), helpcontext(0x095e01a1)]
        HRESULT InsertCaption(
                        [in] VARIANT* Label, 
                        [in, optional] VARIANT* Title, 
                        [in, optional] VARIANT* TitleAutoText, 
                        [in, optional] VARIANT* Position, 
                        [in, optional] VARIANT* ExcludeLabel);
        [id(0x000001a2), helpcontext(0x095e01a2)]
        HRESULT InsertCrossReference(
                        [in] VARIANT* ReferenceType, 
                        [in] WdReferenceKind ReferenceKind, 
                        [in] VARIANT* ReferenceItem, 
                        [in, optional] VARIANT* InsertAsHyperlink, 
                        [in, optional] VARIANT* IncludePosition, 
                        [in, optional] VARIANT* SeparateNumbers, 
                        [in, optional] VARIANT* SeparatorString);
    };

    [
      odl,
      uuid(000209C0-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009c0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListFormat : IDispatch {
        [id(0x00000044), propget, helpcontext(0x09c00044)]
        HRESULT ListLevelNumber([out, retval] long* prop);
        [id(0x00000044), propput, helpcontext(0x09c00044)]
        HRESULT ListLevelNumber([in] long prop);
        [id(0x00000045), propget, helpcontext(0x09c00045)]
        HRESULT List([out, retval] List** prop);
        [id(0x00000046), propget, helpcontext(0x09c00046)]
        HRESULT ListTemplate([out, retval] ListTemplate** prop);
        [id(0x00000047), propget, helpcontext(0x09c00047)]
        HRESULT ListValue([out, retval] long* prop);
        [id(0x00000048), propget, helpcontext(0x09c00048)]
        HRESULT SingleList([out, retval] VARIANT_BOOL* prop);
        [id(0x00000049), propget, helpcontext(0x09c00049)]
        HRESULT SingleListTemplate([out, retval] VARIANT_BOOL* prop);
        [id(0x0000004a), propget, helpcontext(0x09c0004a)]
        HRESULT ListType([out, retval] WdListType* prop);
        [id(0x0000004b), propget, helpcontext(0x09c0004b)]
        HRESULT ListString([out, retval] BSTR* prop);
        [id(0x000003e8), propget, helpcontext(0x09c003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09c003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09c003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000000b8), helpcontext(0x09c000b8)]
        HRESULT CanContinuePreviousList(
                        [in] ListTemplate* ListTemplate, 
                        [out, retval] WdContinue* prop);
        [id(0x000000b9), helpcontext(0x09c000b9)]
        HRESULT RemoveNumbers([in, optional] VARIANT* NumberType);
        [id(0x000000ba), helpcontext(0x09c000ba)]
        HRESULT ConvertNumbersToText([in, optional] VARIANT* NumberType);
        [id(0x000000bb), helpcontext(0x09c000bb)]
        HRESULT CountNumberedItems(
                        [in, optional] VARIANT* NumberType, 
                        [in, optional] VARIANT* Level, 
                        [out, retval] long* prop);
        [id(0x000000bc), hidden, helpcontext(0x09c000bc)]
        HRESULT ApplyBulletDefaultOld();
        [id(0x000000bd), hidden, helpcontext(0x09c000bd)]
        HRESULT ApplyNumberDefaultOld();
        [id(0x000000be), hidden, helpcontext(0x09c000be)]
        HRESULT ApplyOutlineNumberDefaultOld();
        [id(0x000000bf), hidden, helpcontext(0x09c000bf)]
        HRESULT ApplyListTemplateOld(
                        [in] ListTemplate* ListTemplate, 
                        [in, optional] VARIANT* ContinuePreviousList, 
                        [in, optional] VARIANT* ApplyTo);
        [id(0x000000d2), helpcontext(0x09c000d2)]
        HRESULT ListOutdent();
        [id(0x000000d3), helpcontext(0x09c000d3)]
        HRESULT ListIndent();
        [id(0x000000d4), helpcontext(0x09c000d4)]
        HRESULT ApplyBulletDefault([in, optional] VARIANT* DefaultListBehavior);
        [id(0x000000d5), helpcontext(0x09c000d5)]
        HRESULT ApplyNumberDefault([in, optional] VARIANT* DefaultListBehavior);
        [id(0x000000d6), helpcontext(0x09c000d6)]
        HRESULT ApplyOutlineNumberDefault([in, optional] VARIANT* DefaultListBehavior);
        [id(0x000000d7), helpcontext(0x09c000d7)]
        HRESULT ApplyListTemplate(
                        [in] ListTemplate* ListTemplate, 
                        [in, optional] VARIANT* ContinuePreviousList, 
                        [in, optional] VARIANT* ApplyTo, 
                        [in, optional] VARIANT* DefaultListBehavior);
        [id(0x0000004c), propget, helpcontext(0x09c0004c)]
        HRESULT ListPictureBullet([out, retval] InlineShape** prop);
    };

    [
      odl,
      uuid(000209B0-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009b0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Find : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09b003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09b003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09b003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000a), propget, helpcontext(0x09b0000a)]
        HRESULT Forward([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000a), propput, helpcontext(0x09b0000a)]
        HRESULT Forward([in] VARIANT_BOOL prop);
        [id(0x0000000b), propget, helpcontext(0x09b0000b)]
        HRESULT Font([out, retval] Font** prop);
        [id(0x0000000b), propput, helpcontext(0x09b0000b)]
        HRESULT Font([in] Font* prop);
        [id(0x0000000c), propget, helpcontext(0x09b0000c)]
        HRESULT Found([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), propget, helpcontext(0x09b0000d)]
        HRESULT MatchAllWordForms([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), propput, helpcontext(0x09b0000d)]
        HRESULT MatchAllWordForms([in] VARIANT_BOOL prop);
        [id(0x0000000e), propget, helpcontext(0x09b0000e)]
        HRESULT MatchCase([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000e), propput, helpcontext(0x09b0000e)]
        HRESULT MatchCase([in] VARIANT_BOOL prop);
        [id(0x0000000f), propget, helpcontext(0x09b0000f)]
        HRESULT MatchWildcards([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000f), propput, helpcontext(0x09b0000f)]
        HRESULT MatchWildcards([in] VARIANT_BOOL prop);
        [id(0x00000010), propget, helpcontext(0x09b00010)]
        HRESULT MatchSoundsLike([out, retval] VARIANT_BOOL* prop);
        [id(0x00000010), propput, helpcontext(0x09b00010)]
        HRESULT MatchSoundsLike([in] VARIANT_BOOL prop);
        [id(0x00000011), propget, helpcontext(0x09b00011)]
        HRESULT MatchWholeWord([out, retval] VARIANT_BOOL* prop);
        [id(0x00000011), propput, helpcontext(0x09b00011)]
        HRESULT MatchWholeWord([in] VARIANT_BOOL prop);
        [id(0x00000028), propget, helpcontext(0x09b00028)]
        HRESULT MatchFuzzy([out, retval] VARIANT_BOOL* prop);
        [id(0x00000028), propput, helpcontext(0x09b00028)]
        HRESULT MatchFuzzy([in] VARIANT_BOOL prop);
        [id(0x00000029), propget, helpcontext(0x09b00029)]
        HRESULT MatchByte([out, retval] VARIANT_BOOL* prop);
        [id(0x00000029), propput, helpcontext(0x09b00029)]
        HRESULT MatchByte([in] VARIANT_BOOL prop);
        [id(0x00000012), propget, helpcontext(0x09b00012)]
        HRESULT ParagraphFormat([out, retval] ParagraphFormat** prop);
        [id(0x00000012), propput, helpcontext(0x09b00012)]
        HRESULT ParagraphFormat([in] ParagraphFormat* prop);
        [id(0x00000013), propget, helpcontext(0x09b00013)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(0x00000013), propput, helpcontext(0x09b00013)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x00000016), propget, helpcontext(0x09b00016)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(0x00000016), propput, helpcontext(0x09b00016)]
        HRESULT Text([in] BSTR prop);
        [id(0x00000017), propget, helpcontext(0x09b00017)]
        HRESULT LanguageID([out, retval] WdLanguageID* prop);
        [id(0x00000017), propput, helpcontext(0x09b00017)]
        HRESULT LanguageID([in] WdLanguageID prop);
        [id(0x00000018), propget, helpcontext(0x09b00018)]
        HRESULT Highlight([out, retval] long* prop);
        [id(0x00000018), propput, helpcontext(0x09b00018)]
        HRESULT Highlight([in] long prop);
        [id(0x00000019), propget, helpcontext(0x09b00019)]
        HRESULT Replacement([out, retval] Replacement** prop);
        [id(0x0000001a), propget, helpcontext(0x09b0001a)]
        HRESULT Frame([out, retval] Frame** prop);
        [id(0x0000001b), propget, helpcontext(0x09b0001b)]
        HRESULT Wrap([out, retval] WdFindWrap* prop);
        [id(0x0000001b), propput, helpcontext(0x09b0001b)]
        HRESULT Wrap([in] WdFindWrap prop);
        [id(0x0000001c), propget, helpcontext(0x09b0001c)]
        HRESULT Format([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001c), propput, helpcontext(0x09b0001c)]
        HRESULT Format([in] VARIANT_BOOL prop);
        [id(0x0000001d), propget, helpcontext(0x09b0001d)]
        HRESULT LanguageIDFarEast([out, retval] WdLanguageID* prop);
        [id(0x0000001d), propput, helpcontext(0x09b0001d)]
        HRESULT LanguageIDFarEast([in] WdLanguageID prop);
        [id(0x0000003c), propget, helpcontext(0x09b0003c)]
        HRESULT LanguageIDOther([out, retval] WdLanguageID* prop);
        [id(0x0000003c), propput, helpcontext(0x09b0003c)]
        HRESULT LanguageIDOther([in] WdLanguageID prop);
        [id(0x0000003d), propget, helpcontext(0x09b0003d)]
        HRESULT CorrectHangulEndings([out, retval] VARIANT_BOOL* prop);
        [id(0x0000003d), propput, helpcontext(0x09b0003d)]
        HRESULT CorrectHangulEndings([in] VARIANT_BOOL prop);
        [id(0x0000001e), hidden, helpcontext(0x09b0001e)]
        HRESULT ExecuteOld(
                        [in, optional] VARIANT* FindText, 
                        [in, optional] VARIANT* MatchCase, 
                        [in, optional] VARIANT* MatchWholeWord, 
                        [in, optional] VARIANT* MatchWildcards, 
                        [in, optional] VARIANT* MatchSoundsLike, 
                        [in, optional] VARIANT* MatchAllWordForms, 
                        [in, optional] VARIANT* Forward, 
                        [in, optional] VARIANT* Wrap, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ReplaceWith, 
                        [in, optional] VARIANT* Replace, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000001f), helpcontext(0x09b0001f)]
        HRESULT ClearFormatting();
        [id(0x00000020), helpcontext(0x09b00020)]
        HRESULT SetAllFuzzyOptions();
        [id(0x00000021), helpcontext(0x09b00021)]
        HRESULT ClearAllFuzzyOptions();
        [id(0x000001bc), helpcontext(0x09b001bc)]
        HRESULT Execute(
                        [in, optional] VARIANT* FindText, 
                        [in, optional] VARIANT* MatchCase, 
                        [in, optional] VARIANT* MatchWholeWord, 
                        [in, optional] VARIANT* MatchWildcards, 
                        [in, optional] VARIANT* MatchSoundsLike, 
                        [in, optional] VARIANT* MatchAllWordForms, 
                        [in, optional] VARIANT* Forward, 
                        [in, optional] VARIANT* Wrap, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ReplaceWith, 
                        [in, optional] VARIANT* Replace, 
                        [in, optional] VARIANT* MatchKashida, 
                        [in, optional] VARIANT* MatchDiacritics, 
                        [in, optional] VARIANT* MatchAlefHamza, 
                        [in, optional] VARIANT* MatchControl, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000022), propget, helpcontext(0x09b00022)]
        HRESULT NoProofing([out, retval] long* prop);
        [id(0x00000022), propput, helpcontext(0x09b00022)]
        HRESULT NoProofing([in] long prop);
        [id(0x00000064), propget, helpcontext(0x09b00064)]
        HRESULT MatchKashida([out, retval] VARIANT_BOOL* prop);
        [id(0x00000064), propput, helpcontext(0x09b00064)]
        HRESULT MatchKashida([in] VARIANT_BOOL prop);
        [id(0x00000065), propget, helpcontext(0x09b00065)]
        HRESULT MatchDiacritics([out, retval] VARIANT_BOOL* prop);
        [id(0x00000065), propput, helpcontext(0x09b00065)]
        HRESULT MatchDiacritics([in] VARIANT_BOOL prop);
        [id(0x00000066), propget, helpcontext(0x09b00066)]
        HRESULT MatchAlefHamza([out, retval] VARIANT_BOOL* prop);
        [id(0x00000066), propput, helpcontext(0x09b00066)]
        HRESULT MatchAlefHamza([in] VARIANT_BOOL prop);
        [id(0x00000067), propget, helpcontext(0x09b00067)]
        HRESULT MatchControl([out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), propput, helpcontext(0x09b00067)]
        HRESULT MatchControl([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(000209B1-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009b1),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Replacement : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09b103e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09b103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09b103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000a), propget, helpcontext(0x09b1000a)]
        HRESULT Font([out, retval] Font** prop);
        [id(0x0000000a), propput, helpcontext(0x09b1000a)]
        HRESULT Font([in] Font* prop);
        [id(0x0000000b), propget, helpcontext(0x09b1000b)]
        HRESULT ParagraphFormat([out, retval] ParagraphFormat** prop);
        [id(0x0000000b), propput, helpcontext(0x09b1000b)]
        HRESULT ParagraphFormat([in] ParagraphFormat* prop);
        [id(0x0000000c), propget, helpcontext(0x09b1000c)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(0x0000000c), propput, helpcontext(0x09b1000c)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x0000000f), propget, helpcontext(0x09b1000f)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(0x0000000f), propput, helpcontext(0x09b1000f)]
        HRESULT Text([in] BSTR prop);
        [id(0x00000010), propget, helpcontext(0x09b10010)]
        HRESULT LanguageID([out, retval] WdLanguageID* prop);
        [id(0x00000010), propput, helpcontext(0x09b10010)]
        HRESULT LanguageID([in] WdLanguageID prop);
        [id(0x00000011), propget, helpcontext(0x09b10011)]
        HRESULT Highlight([out, retval] long* prop);
        [id(0x00000011), propput, helpcontext(0x09b10011)]
        HRESULT Highlight([in] long prop);
        [id(0x00000012), propget, helpcontext(0x09b10012)]
        HRESULT Frame([out, retval] Frame** prop);
        [id(0x00000013), propget, helpcontext(0x09b10013)]
        HRESULT LanguageIDFarEast([out, retval] WdLanguageID* prop);
        [id(0x00000013), propput, helpcontext(0x09b10013)]
        HRESULT LanguageIDFarEast([in] WdLanguageID prop);
        [id(0x00000014), helpcontext(0x09b10014)]
        HRESULT ClearFormatting();
        [id(0x00000015), propget, helpcontext(0x09b10015)]
        HRESULT NoProofing([out, retval] long* prop);
        [id(0x00000015), propput, helpcontext(0x09b10015)]
        HRESULT NoProofing([in] long prop);
    };

    [
      odl,
      uuid(0002095D-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000095d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Characters : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x095dfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x095d0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x095d0003)]
        HRESULT First([out, retval] Range** prop);
        [id(0x00000004), propget, helpcontext(0x095d0004)]
        HRESULT Last([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x095d03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x095d0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Range** prop);
    };

    [
      odl,
      uuid(0002095C-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000095c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Words : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x095cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x095c0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x095c0003)]
        HRESULT First([out, retval] Range** prop);
        [id(0x00000004), propget, helpcontext(0x095c0004)]
        HRESULT Last([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x095c03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x095c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Range** prop);
    };

    [
      odl,
      uuid(0002095B-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000095b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Sentences : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x095bfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x095b0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x095b0003)]
        HRESULT First([out, retval] Range** prop);
        [id(0x00000004), propget, helpcontext(0x095b0004)]
        HRESULT Last([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x095b03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x095b0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Range** prop);
    };

    [
      odl,
      uuid(0002095A-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000095a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Sections : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x095afffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x095a0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x095a0003)]
        HRESULT First([out, retval] Section** prop);
        [id(0x00000004), propget, helpcontext(0x095a0004)]
        HRESULT Last([out, retval] Section** prop);
        [id(0x000003e8), propget, helpcontext(0x095a03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000044d), propget, helpcontext(0x095a044d)]
        HRESULT PageSetup([out, retval] PageSetup** prop);
        [id(0x0000044d), propput, helpcontext(0x095a044d)]
        HRESULT PageSetup([in] PageSetup* prop);
        [id(00000000), helpcontext(0x095a0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Section** prop);
        [id(0x00000005), helpcontext(0x095a0005)]
        HRESULT Add(
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* Start, 
                        [out, retval] Section** prop);
    };

    [
      odl,
      uuid(00020959-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000959),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Section : IDispatch {
        [id(00000000), propget, helpcontext(0x09590000)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x095903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000044d), propget, helpcontext(0x0959044d)]
        HRESULT PageSetup([out, retval] PageSetup** prop);
        [id(0x0000044d), propput, helpcontext(0x0959044d)]
        HRESULT PageSetup([in] PageSetup* prop);
        [id(0x00000079), propget, helpcontext(0x09590079)]
        HRESULT Headers([out, retval] HeadersFooters** prop);
        [id(0x0000007a), propget, helpcontext(0x0959007a)]
        HRESULT Footers([out, retval] HeadersFooters** prop);
        [id(0x0000007b), propget, helpcontext(0x0959007b)]
        HRESULT ProtectedForForms([out, retval] VARIANT_BOOL* prop);
        [id(0x0000007b), propput, helpcontext(0x0959007b)]
        HRESULT ProtectedForForms([in] VARIANT_BOOL prop);
        [id(0x0000007c), propget, helpcontext(0x0959007c)]
        HRESULT Index([out, retval] long* prop);
        [id(0x0000044c), propget, helpcontext(0x0959044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x0959044c)]
        HRESULT Borders([in] Borders* prop);
    };

    [
      odl,
      uuid(00020958-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000958),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Paragraphs : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0958fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09580002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09580003)]
        HRESULT First([out, retval] Paragraph** prop);
        [id(0x00000004), propget, helpcontext(0x09580004)]
        HRESULT Last([out, retval] Paragraph** prop);
        [id(0x000003e8), propget, helpcontext(0x095803e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000044e), propget, helpcontext(0x0958044e)]
        HRESULT Format([out, retval] ParagraphFormat** prop);
        [id(0x0000044e), propput, helpcontext(0x0958044e)]
        HRESULT Format([in] ParagraphFormat* prop);
        [id(0x0000044f), propget, helpcontext(0x0958044f)]
        HRESULT TabStops([out, retval] TabStops** prop);
        [id(0x0000044f), propput, helpcontext(0x0958044f)]
        HRESULT TabStops([in] TabStops* prop);
        [id(0x0000044c), propget, helpcontext(0x0958044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x0958044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000064), propget, helpcontext(0x09580064)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(0x00000064), propput, helpcontext(0x09580064)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x00000065), propget, helpcontext(0x09580065)]
        HRESULT Alignment([out, retval] WdParagraphAlignment* prop);
        [id(0x00000065), propput, helpcontext(0x09580065)]
        HRESULT Alignment([in] WdParagraphAlignment prop);
        [id(0x00000066), propget, helpcontext(0x09580066)]
        HRESULT KeepTogether([out, retval] long* prop);
        [id(0x00000066), propput, helpcontext(0x09580066)]
        HRESULT KeepTogether([in] long prop);
        [id(0x00000067), propget, helpcontext(0x09580067)]
        HRESULT KeepWithNext([out, retval] long* prop);
        [id(0x00000067), propput, helpcontext(0x09580067)]
        HRESULT KeepWithNext([in] long prop);
        [id(0x00000068), propget, helpcontext(0x09580068)]
        HRESULT PageBreakBefore([out, retval] long* prop);
        [id(0x00000068), propput, helpcontext(0x09580068)]
        HRESULT PageBreakBefore([in] long prop);
        [id(0x00000069), propget, helpcontext(0x09580069)]
        HRESULT NoLineNumber([out, retval] long* prop);
        [id(0x00000069), propput, helpcontext(0x09580069)]
        HRESULT NoLineNumber([in] long prop);
        [id(0x0000006a), propget, helpcontext(0x0958006a)]
        HRESULT RightIndent([out, retval] int* prop);
        [id(0x0000006a), propput, helpcontext(0x0958006a)]
        HRESULT RightIndent([in] int prop);
        [id(0x0000006b), propget, helpcontext(0x0958006b)]
        HRESULT LeftIndent([out, retval] int* prop);
        [id(0x0000006b), propput, helpcontext(0x0958006b)]
        HRESULT LeftIndent([in] int prop);
        [id(0x0000006c), propget, helpcontext(0x0958006c)]
        HRESULT FirstLineIndent([out, retval] int* prop);
        [id(0x0000006c), propput, helpcontext(0x0958006c)]
        HRESULT FirstLineIndent([in] int prop);
        [id(0x0000006d), propget, helpcontext(0x0958006d)]
        HRESULT LineSpacing([out, retval] int* prop);
        [id(0x0000006d), propput, helpcontext(0x0958006d)]
        HRESULT LineSpacing([in] int prop);
        [id(0x0000006e), propget, helpcontext(0x0958006e)]
        HRESULT LineSpacingRule([out, retval] WdLineSpacing* prop);
        [id(0x0000006e), propput, helpcontext(0x0958006e)]
        HRESULT LineSpacingRule([in] WdLineSpacing prop);
        [id(0x0000006f), propget, helpcontext(0x0958006f)]
        HRESULT SpaceBefore([out, retval] int* prop);
        [id(0x0000006f), propput, helpcontext(0x0958006f)]
        HRESULT SpaceBefore([in] int prop);
        [id(0x00000070), propget, helpcontext(0x09580070)]
        HRESULT SpaceAfter([out, retval] int* prop);
        [id(0x00000070), propput, helpcontext(0x09580070)]
        HRESULT SpaceAfter([in] int prop);
        [id(0x00000071), propget, helpcontext(0x09580071)]
        HRESULT Hyphenation([out, retval] long* prop);
        [id(0x00000071), propput, helpcontext(0x09580071)]
        HRESULT Hyphenation([in] long prop);
        [id(0x00000072), propget, helpcontext(0x09580072)]
        HRESULT WidowControl([out, retval] long* prop);
        [id(0x00000072), propput, helpcontext(0x09580072)]
        HRESULT WidowControl([in] long prop);
        [id(0x00000074), propget, helpcontext(0x09580074)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000075), propget, helpcontext(0x09580075)]
        HRESULT FarEastLineBreakControl([out, retval] long* prop);
        [id(0x00000075), propput, helpcontext(0x09580075)]
        HRESULT FarEastLineBreakControl([in] long prop);
        [id(0x00000076), propget, helpcontext(0x09580076)]
        HRESULT WordWrap([out, retval] long* prop);
        [id(0x00000076), propput, helpcontext(0x09580076)]
        HRESULT WordWrap([in] long prop);
        [id(0x00000077), propget, helpcontext(0x09580077)]
        HRESULT HangingPunctuation([out, retval] long* prop);
        [id(0x00000077), propput, helpcontext(0x09580077)]
        HRESULT HangingPunctuation([in] long prop);
        [id(0x00000078), propget, helpcontext(0x09580078)]
        HRESULT HalfWidthPunctuationOnTopOfLine([out, retval] long* prop);
        [id(0x00000078), propput, helpcontext(0x09580078)]
        HRESULT HalfWidthPunctuationOnTopOfLine([in] long prop);
        [id(0x00000079), propget, helpcontext(0x09580079)]
        HRESULT AddSpaceBetweenFarEastAndAlpha([out, retval] long* prop);
        [id(0x00000079), propput, helpcontext(0x09580079)]
        HRESULT AddSpaceBetweenFarEastAndAlpha([in] long prop);
        [id(0x0000007a), propget, helpcontext(0x0958007a)]
        HRESULT AddSpaceBetweenFarEastAndDigit([out, retval] long* prop);
        [id(0x0000007a), propput, helpcontext(0x0958007a)]
        HRESULT AddSpaceBetweenFarEastAndDigit([in] long prop);
        [id(0x0000007b), propget, helpcontext(0x0958007b)]
        HRESULT BaseLineAlignment([out, retval] WdBaselineAlignment* prop);
        [id(0x0000007b), propput, helpcontext(0x0958007b)]
        HRESULT BaseLineAlignment([in] WdBaselineAlignment prop);
        [id(0x0000007c), propget, helpcontext(0x0958007c)]
        HRESULT AutoAdjustRightIndent([out, retval] long* prop);
        [id(0x0000007c), propput, helpcontext(0x0958007c)]
        HRESULT AutoAdjustRightIndent([in] long prop);
        [id(0x0000007d), propget, helpcontext(0x0958007d)]
        HRESULT DisableLineHeightGrid([out, retval] long* prop);
        [id(0x0000007d), propput, helpcontext(0x0958007d)]
        HRESULT DisableLineHeightGrid([in] long prop);
        [id(0x000000ca), propget, helpcontext(0x095800ca)]
        HRESULT OutlineLevel([out, retval] WdOutlineLevel* prop);
        [id(0x000000ca), propput, helpcontext(0x095800ca)]
        HRESULT OutlineLevel([in] WdOutlineLevel prop);
        [id(00000000), helpcontext(0x09580000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Paragraph** prop);
        [id(0x00000005), helpcontext(0x09580005)]
        HRESULT Add(
                        [in, optional] VARIANT* Range, 
                        [out, retval] Paragraph** prop);
        [id(0x0000012d), helpcontext(0x0958012d)]
        HRESULT CloseUp();
        [id(0x0000012e), helpcontext(0x0958012e)]
        HRESULT OpenUp();
        [id(0x0000012f), helpcontext(0x0958012f)]
        HRESULT OpenOrCloseUp();
        [id(0x00000130), helpcontext(0x09580130)]
        HRESULT TabHangingIndent([in] short Count);
        [id(0x00000132), helpcontext(0x09580132)]
        HRESULT TabIndent([in] short Count);
        [id(0x00000138), helpcontext(0x09580138)]
        HRESULT Reset();
        [id(0x00000139), helpcontext(0x09580139)]
        HRESULT Space1();
        [id(0x0000013a), helpcontext(0x0958013a)]
        HRESULT Space15();
        [id(0x0000013b), helpcontext(0x0958013b)]
        HRESULT Space2();
        [id(0x00000140), helpcontext(0x09580140)]
        HRESULT IndentCharWidth([in] short Count);
        [id(0x00000142), helpcontext(0x09580142)]
        HRESULT IndentFirstLineCharWidth([in] short Count);
        [id(0x00000144), helpcontext(0x09580144)]
        HRESULT OutlinePromote();
        [id(0x00000145), helpcontext(0x09580145)]
        HRESULT OutlineDemote();
        [id(0x00000146), helpcontext(0x09580146)]
        HRESULT OutlineDemoteToBody();
        [id(0x0000014d), helpcontext(0x0958014d)]
        HRESULT Indent();
        [id(0x0000014e), helpcontext(0x0958014e)]
        HRESULT Outdent();
        [id(0x0000007e), propget, helpcontext(0x0958007e)]
        HRESULT CharacterUnitRightIndent([out, retval] int* prop);
        [id(0x0000007e), propput, helpcontext(0x0958007e)]
        HRESULT CharacterUnitRightIndent([in] int prop);
        [id(0x0000007f), propget, helpcontext(0x0958007f)]
        HRESULT CharacterUnitLeftIndent([out, retval] int* prop);
        [id(0x0000007f), propput, helpcontext(0x0958007f)]
        HRESULT CharacterUnitLeftIndent([in] int prop);
        [id(0x00000080), propget, helpcontext(0x09580080)]
        HRESULT CharacterUnitFirstLineIndent([out, retval] int* prop);
        [id(0x00000080), propput, helpcontext(0x09580080)]
        HRESULT CharacterUnitFirstLineIndent([in] int prop);
        [id(0x00000081), propget, helpcontext(0x09580081)]
        HRESULT LineUnitBefore([out, retval] int* prop);
        [id(0x00000081), propput, helpcontext(0x09580081)]
        HRESULT LineUnitBefore([in] int prop);
        [id(0x00000082), propget, helpcontext(0x09580082)]
        HRESULT LineUnitAfter([out, retval] int* prop);
        [id(0x00000082), propput, helpcontext(0x09580082)]
        HRESULT LineUnitAfter([in] int prop);
        [id(0x00000083), propget, helpcontext(0x09580083)]
        HRESULT ReadingOrder([out, retval] WdReadingOrder* prop);
        [id(0x00000083), propput, helpcontext(0x09580083)]
        HRESULT ReadingOrder([in] WdReadingOrder prop);
        [id(0x00000084), propget, helpcontext(0x09580084)]
        HRESULT SpaceBeforeAuto([out, retval] long* prop);
        [id(0x00000084), propput, helpcontext(0x09580084)]
        HRESULT SpaceBeforeAuto([in] long prop);
        [id(0x00000085), propget, helpcontext(0x09580085)]
        HRESULT SpaceAfterAuto([out, retval] long* prop);
        [id(0x00000085), propput, helpcontext(0x09580085)]
        HRESULT SpaceAfterAuto([in] long prop);
        [id(0x0000014f), helpcontext(0x0958014f)]
        HRESULT IncreaseSpacing();
        [id(0x00000150), helpcontext(0x09580150)]
        HRESULT DecreaseSpacing();
    };

    [
      odl,
      uuid(00020957-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000957),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Paragraph : IDispatch {
        [id(00000000), propget, helpcontext(0x09570000)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x095703e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000044e), propget, helpcontext(0x0957044e)]
        HRESULT Format([out, retval] ParagraphFormat** prop);
        [id(0x0000044e), propput, helpcontext(0x0957044e)]
        HRESULT Format([in] ParagraphFormat* prop);
        [id(0x0000044f), propget, helpcontext(0x0957044f)]
        HRESULT TabStops([out, retval] TabStops** prop);
        [id(0x0000044f), propput, helpcontext(0x0957044f)]
        HRESULT TabStops([in] TabStops* prop);
        [id(0x0000044c), propget, helpcontext(0x0957044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x0957044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x0000000d), propget, helpcontext(0x0957000d)]
        HRESULT DropCap([out, retval] DropCap** prop);
        [id(0x00000064), propget, helpcontext(0x09570064)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(0x00000064), propput, helpcontext(0x09570064)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x00000065), propget, helpcontext(0x09570065)]
        HRESULT Alignment([out, retval] WdParagraphAlignment* prop);
        [id(0x00000065), propput, helpcontext(0x09570065)]
        HRESULT Alignment([in] WdParagraphAlignment prop);
        [id(0x00000066), propget, helpcontext(0x09570066)]
        HRESULT KeepTogether([out, retval] long* prop);
        [id(0x00000066), propput, helpcontext(0x09570066)]
        HRESULT KeepTogether([in] long prop);
        [id(0x00000067), propget, helpcontext(0x09570067)]
        HRESULT KeepWithNext([out, retval] long* prop);
        [id(0x00000067), propput, helpcontext(0x09570067)]
        HRESULT KeepWithNext([in] long prop);
        [id(0x00000068), propget, helpcontext(0x09570068)]
        HRESULT PageBreakBefore([out, retval] long* prop);
        [id(0x00000068), propput, helpcontext(0x09570068)]
        HRESULT PageBreakBefore([in] long prop);
        [id(0x00000069), propget, helpcontext(0x09570069)]
        HRESULT NoLineNumber([out, retval] long* prop);
        [id(0x00000069), propput, helpcontext(0x09570069)]
        HRESULT NoLineNumber([in] long prop);
        [id(0x0000006a), propget, helpcontext(0x0957006a)]
        HRESULT RightIndent([out, retval] int* prop);
        [id(0x0000006a), propput, helpcontext(0x0957006a)]
        HRESULT RightIndent([in] int prop);
        [id(0x0000006b), propget, helpcontext(0x0957006b)]
        HRESULT LeftIndent([out, retval] int* prop);
        [id(0x0000006b), propput, helpcontext(0x0957006b)]
        HRESULT LeftIndent([in] int prop);
        [id(0x0000006c), propget, helpcontext(0x0957006c)]
        HRESULT FirstLineIndent([out, retval] int* prop);
        [id(0x0000006c), propput, helpcontext(0x0957006c)]
        HRESULT FirstLineIndent([in] int prop);
        [id(0x0000006d), propget, helpcontext(0x0957006d)]
        HRESULT LineSpacing([out, retval] int* prop);
        [id(0x0000006d), propput, helpcontext(0x0957006d)]
        HRESULT LineSpacing([in] int prop);
        [id(0x0000006e), propget, helpcontext(0x0957006e)]
        HRESULT LineSpacingRule([out, retval] WdLineSpacing* prop);
        [id(0x0000006e), propput, helpcontext(0x0957006e)]
        HRESULT LineSpacingRule([in] WdLineSpacing prop);
        [id(0x0000006f), propget, helpcontext(0x0957006f)]
        HRESULT SpaceBefore([out, retval] int* prop);
        [id(0x0000006f), propput, helpcontext(0x0957006f)]
        HRESULT SpaceBefore([in] int prop);
        [id(0x00000070), propget, helpcontext(0x09570070)]
        HRESULT SpaceAfter([out, retval] int* prop);
        [id(0x00000070), propput, helpcontext(0x09570070)]
        HRESULT SpaceAfter([in] int prop);
        [id(0x00000071), propget, helpcontext(0x09570071)]
        HRESULT Hyphenation([out, retval] long* prop);
        [id(0x00000071), propput, helpcontext(0x09570071)]
        HRESULT Hyphenation([in] long prop);
        [id(0x00000072), propget, helpcontext(0x09570072)]
        HRESULT WidowControl([out, retval] long* prop);
        [id(0x00000072), propput, helpcontext(0x09570072)]
        HRESULT WidowControl([in] long prop);
        [id(0x00000074), propget, helpcontext(0x09570074)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000075), propget, helpcontext(0x09570075)]
        HRESULT FarEastLineBreakControl([out, retval] long* prop);
        [id(0x00000075), propput, helpcontext(0x09570075)]
        HRESULT FarEastLineBreakControl([in] long prop);
        [id(0x00000076), propget, helpcontext(0x09570076)]
        HRESULT WordWrap([out, retval] long* prop);
        [id(0x00000076), propput, helpcontext(0x09570076)]
        HRESULT WordWrap([in] long prop);
        [id(0x00000077), propget, helpcontext(0x09570077)]
        HRESULT HangingPunctuation([out, retval] long* prop);
        [id(0x00000077), propput, helpcontext(0x09570077)]
        HRESULT HangingPunctuation([in] long prop);
        [id(0x00000078), propget, helpcontext(0x09570078)]
        HRESULT HalfWidthPunctuationOnTopOfLine([out, retval] long* prop);
        [id(0x00000078), propput, helpcontext(0x09570078)]
        HRESULT HalfWidthPunctuationOnTopOfLine([in] long prop);
        [id(0x00000079), propget, helpcontext(0x09570079)]
        HRESULT AddSpaceBetweenFarEastAndAlpha([out, retval] long* prop);
        [id(0x00000079), propput, helpcontext(0x09570079)]
        HRESULT AddSpaceBetweenFarEastAndAlpha([in] long prop);
        [id(0x0000007a), propget, helpcontext(0x0957007a)]
        HRESULT AddSpaceBetweenFarEastAndDigit([out, retval] long* prop);
        [id(0x0000007a), propput, helpcontext(0x0957007a)]
        HRESULT AddSpaceBetweenFarEastAndDigit([in] long prop);
        [id(0x0000007b), propget, helpcontext(0x0957007b)]
        HRESULT BaseLineAlignment([out, retval] WdBaselineAlignment* prop);
        [id(0x0000007b), propput, helpcontext(0x0957007b)]
        HRESULT BaseLineAlignment([in] WdBaselineAlignment prop);
        [id(0x0000007c), propget, helpcontext(0x0957007c)]
        HRESULT AutoAdjustRightIndent([out, retval] long* prop);
        [id(0x0000007c), propput, helpcontext(0x0957007c)]
        HRESULT AutoAdjustRightIndent([in] long prop);
        [id(0x0000007d), propget, helpcontext(0x0957007d)]
        HRESULT DisableLineHeightGrid([out, retval] long* prop);
        [id(0x0000007d), propput, helpcontext(0x0957007d)]
        HRESULT DisableLineHeightGrid([in] long prop);
        [id(0x000000ca), propget, helpcontext(0x095700ca)]
        HRESULT OutlineLevel([out, retval] WdOutlineLevel* prop);
        [id(0x000000ca), propput, helpcontext(0x095700ca)]
        HRESULT OutlineLevel([in] WdOutlineLevel prop);
        [id(0x0000012d), helpcontext(0x0957012d)]
        HRESULT CloseUp();
        [id(0x0000012e), helpcontext(0x0957012e)]
        HRESULT OpenUp();
        [id(0x0000012f), helpcontext(0x0957012f)]
        HRESULT OpenOrCloseUp();
        [id(0x00000130), helpcontext(0x09570130)]
        HRESULT TabHangingIndent([in] short Count);
        [id(0x00000132), helpcontext(0x09570132)]
        HRESULT TabIndent([in] short Count);
        [id(0x00000138), helpcontext(0x09570138)]
        HRESULT Reset();
        [id(0x00000139), helpcontext(0x09570139)]
        HRESULT Space1();
        [id(0x0000013a), helpcontext(0x0957013a)]
        HRESULT Space15();
        [id(0x0000013b), helpcontext(0x0957013b)]
        HRESULT Space2();
        [id(0x00000140), helpcontext(0x09570140)]
        HRESULT IndentCharWidth([in] short Count);
        [id(0x00000142), helpcontext(0x09570142)]
        HRESULT IndentFirstLineCharWidth([in] short Count);
        [id(0x00000144), helpcontext(0x09570144)]
        HRESULT Next(
                        [in, optional] VARIANT* Count, 
                        [out, retval] Paragraph** prop);
        [id(0x00000145), helpcontext(0x09570145)]
        HRESULT Previous(
                        [in, optional] VARIANT* Count, 
                        [out, retval] Paragraph** prop);
        [id(0x00000146), helpcontext(0x09570146)]
        HRESULT OutlinePromote();
        [id(0x00000147), helpcontext(0x09570147)]
        HRESULT OutlineDemote();
        [id(0x00000148), helpcontext(0x09570148)]
        HRESULT OutlineDemoteToBody();
        [id(0x0000014d), helpcontext(0x0957014d)]
        HRESULT Indent();
        [id(0x0000014e), helpcontext(0x0957014e)]
        HRESULT Outdent();
        [id(0x0000007e), propget, helpcontext(0x0957007e)]
        HRESULT CharacterUnitRightIndent([out, retval] int* prop);
        [id(0x0000007e), propput, helpcontext(0x0957007e)]
        HRESULT CharacterUnitRightIndent([in] int prop);
        [id(0x0000007f), propget, helpcontext(0x0957007f)]
        HRESULT CharacterUnitLeftIndent([out, retval] int* prop);
        [id(0x0000007f), propput, helpcontext(0x0957007f)]
        HRESULT CharacterUnitLeftIndent([in] int prop);
        [id(0x00000080), propget, helpcontext(0x09570080)]
        HRESULT CharacterUnitFirstLineIndent([out, retval] int* prop);
        [id(0x00000080), propput, helpcontext(0x09570080)]
        HRESULT CharacterUnitFirstLineIndent([in] int prop);
        [id(0x00000081), propget, helpcontext(0x09570081)]
        HRESULT LineUnitBefore([out, retval] int* prop);
        [id(0x00000081), propput, helpcontext(0x09570081)]
        HRESULT LineUnitBefore([in] int prop);
        [id(0x00000082), propget, helpcontext(0x09570082)]
        HRESULT LineUnitAfter([out, retval] int* prop);
        [id(0x00000082), propput, helpcontext(0x09570082)]
        HRESULT LineUnitAfter([in] int prop);
        [id(0x000000cb), propget, helpcontext(0x095700cb)]
        HRESULT ReadingOrder([out, retval] WdReadingOrder* prop);
        [id(0x000000cb), propput, helpcontext(0x095700cb)]
        HRESULT ReadingOrder([in] WdReadingOrder prop);
        [id(0x000000cc), propget, helpcontext(0x095700cc)]
        HRESULT ID([out, retval] BSTR* prop);
        [id(0x000000cc), propput, helpcontext(0x095700cc)]
        HRESULT ID([in] BSTR prop);
        [id(0x00000084), propget, helpcontext(0x09570084)]
        HRESULT SpaceBeforeAuto([out, retval] long* prop);
        [id(0x00000084), propput, helpcontext(0x09570084)]
        HRESULT SpaceBeforeAuto([in] long prop);
        [id(0x00000085), propget, helpcontext(0x09570085)]
        HRESULT SpaceAfterAuto([out, retval] long* prop);
        [id(0x00000085), propput, helpcontext(0x09570085)]
        HRESULT SpaceAfterAuto([in] long prop);
        [id(0x00000086), propget, helpcontext(0x09570086)]
        HRESULT IsStyleSeparator([out, retval] VARIANT_BOOL* prop);
        [id(0x0000014f), helpcontext(0x0957014f)]
        HRESULT SelectNumber();
    };

    [
      odl,
      uuid(00020956-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000956),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DropCap : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x095603e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000a), propget, helpcontext(0x0956000a)]
        HRESULT Position([out, retval] WdDropPosition* prop);
        [id(0x0000000a), propput, helpcontext(0x0956000a)]
        HRESULT Position([in] WdDropPosition prop);
        [id(0x0000000b), propget, helpcontext(0x0956000b)]
        HRESULT FontName([out, retval] BSTR* prop);
        [id(0x0000000b), propput, helpcontext(0x0956000b)]
        HRESULT FontName([in] BSTR prop);
        [id(0x0000000c), propget, helpcontext(0x0956000c)]
        HRESULT LinesToDrop([out, retval] long* prop);
        [id(0x0000000c), propput, helpcontext(0x0956000c)]
        HRESULT LinesToDrop([in] long prop);
        [id(0x0000000d), propget, helpcontext(0x0956000d)]
        HRESULT DistanceFromText([out, retval] int* prop);
        [id(0x0000000d), propput, helpcontext(0x0956000d)]
        HRESULT DistanceFromText([in] int prop);
        [id(0x00000064), helpcontext(0x09560064)]
        HRESULT Clear();
        [id(0x00000065), helpcontext(0x09560065)]
        HRESULT Enable();
    };

    [
      odl,
      uuid(00020955-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000955),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TabStops : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0955fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09550002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x095503e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09550000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] TabStop** prop);
        [id(0x00000064), helpcontext(0x09550064)]
        HRESULT Add(
                        [in] int Position, 
                        [in, optional] VARIANT* Alignment, 
                        [in, optional] VARIANT* Leader, 
                        [out, retval] TabStop** prop);
        [id(0x00000065), helpcontext(0x09550065)]
        HRESULT ClearAll();
        [id(0x00000066), helpcontext(0x09550066)]
        HRESULT Before(
                        [in] int Position, 
                        [out, retval] TabStop** prop);
        [id(0x00000067), helpcontext(0x09550067)]
        HRESULT After(
                        [in] int Position, 
                        [out, retval] TabStop** prop);
    };

    [
      odl,
      uuid(00020954-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000954),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TabStop : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x095403e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09540064)]
        HRESULT Alignment([out, retval] WdTabAlignment* prop);
        [id(0x00000064), propput, helpcontext(0x09540064)]
        HRESULT Alignment([in] WdTabAlignment prop);
        [id(0x00000065), propget, helpcontext(0x09540065)]
        HRESULT Leader([out, retval] WdTabLeader* prop);
        [id(0x00000065), propput, helpcontext(0x09540065)]
        HRESULT Leader([in] WdTabLeader prop);
        [id(0x00000066), propget, helpcontext(0x09540066)]
        HRESULT Position([out, retval] int* prop);
        [id(0x00000066), propput, helpcontext(0x09540066)]
        HRESULT Position([in] int prop);
        [id(0x00000067), propget, helpcontext(0x09540067)]
        HRESULT CustomTab([out, retval] VARIANT_BOOL* prop);
        [id(0x00000068), propget, helpcontext(0x09540068)]
        HRESULT Next([out, retval] TabStop** prop);
        [id(0x00000069), propget, helpcontext(0x09540069)]
        HRESULT Previous([out, retval] TabStop** prop);
        [id(0x000000c8), helpcontext(0x095400c8)]
        HRESULT Clear();
    };

    [
      odl,
      uuid(00020953-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000953),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _ParagraphFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x095303e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000a), propget, helpcontext(0x0953000a)]
        HRESULT Duplicate([out, retval] ParagraphFormat** prop);
        [id(0x00000064), propget, helpcontext(0x09530064)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(0x00000064), propput, helpcontext(0x09530064)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x00000065), propget, helpcontext(0x09530065)]
        HRESULT Alignment([out, retval] WdParagraphAlignment* prop);
        [id(0x00000065), propput, helpcontext(0x09530065)]
        HRESULT Alignment([in] WdParagraphAlignment prop);
        [id(0x00000066), propget, helpcontext(0x09530066)]
        HRESULT KeepTogether([out, retval] long* prop);
        [id(0x00000066), propput, helpcontext(0x09530066)]
        HRESULT KeepTogether([in] long prop);
        [id(0x00000067), propget, helpcontext(0x09530067)]
        HRESULT KeepWithNext([out, retval] long* prop);
        [id(0x00000067), propput, helpcontext(0x09530067)]
        HRESULT KeepWithNext([in] long prop);
        [id(0x00000068), propget, helpcontext(0x09530068)]
        HRESULT PageBreakBefore([out, retval] long* prop);
        [id(0x00000068), propput, helpcontext(0x09530068)]
        HRESULT PageBreakBefore([in] long prop);
        [id(0x00000069), propget, helpcontext(0x09530069)]
        HRESULT NoLineNumber([out, retval] long* prop);
        [id(0x00000069), propput, helpcontext(0x09530069)]
        HRESULT NoLineNumber([in] long prop);
        [id(0x0000006a), propget, helpcontext(0x0953006a)]
        HRESULT RightIndent([out, retval] int* prop);
        [id(0x0000006a), propput, helpcontext(0x0953006a)]
        HRESULT RightIndent([in] int prop);
        [id(0x0000006b), propget, helpcontext(0x0953006b)]
        HRESULT LeftIndent([out, retval] int* prop);
        [id(0x0000006b), propput, helpcontext(0x0953006b)]
        HRESULT LeftIndent([in] int prop);
        [id(0x0000006c), propget, helpcontext(0x0953006c)]
        HRESULT FirstLineIndent([out, retval] int* prop);
        [id(0x0000006c), propput, helpcontext(0x0953006c)]
        HRESULT FirstLineIndent([in] int prop);
        [id(0x0000006d), propget, helpcontext(0x0953006d)]
        HRESULT LineSpacing([out, retval] int* prop);
        [id(0x0000006d), propput, helpcontext(0x0953006d)]
        HRESULT LineSpacing([in] int prop);
        [id(0x0000006e), propget, helpcontext(0x0953006e)]
        HRESULT LineSpacingRule([out, retval] WdLineSpacing* prop);
        [id(0x0000006e), propput, helpcontext(0x0953006e)]
        HRESULT LineSpacingRule([in] WdLineSpacing prop);
        [id(0x0000006f), propget, helpcontext(0x0953006f)]
        HRESULT SpaceBefore([out, retval] int* prop);
        [id(0x0000006f), propput, helpcontext(0x0953006f)]
        HRESULT SpaceBefore([in] int prop);
        [id(0x00000070), propget, helpcontext(0x09530070)]
        HRESULT SpaceAfter([out, retval] int* prop);
        [id(0x00000070), propput, helpcontext(0x09530070)]
        HRESULT SpaceAfter([in] int prop);
        [id(0x00000071), propget, helpcontext(0x09530071)]
        HRESULT Hyphenation([out, retval] long* prop);
        [id(0x00000071), propput, helpcontext(0x09530071)]
        HRESULT Hyphenation([in] long prop);
        [id(0x00000072), propget, helpcontext(0x09530072)]
        HRESULT WidowControl([out, retval] long* prop);
        [id(0x00000072), propput, helpcontext(0x09530072)]
        HRESULT WidowControl([in] long prop);
        [id(0x00000075), propget, helpcontext(0x09530075)]
        HRESULT FarEastLineBreakControl([out, retval] long* prop);
        [id(0x00000075), propput, helpcontext(0x09530075)]
        HRESULT FarEastLineBreakControl([in] long prop);
        [id(0x00000076), propget, helpcontext(0x09530076)]
        HRESULT WordWrap([out, retval] long* prop);
        [id(0x00000076), propput, helpcontext(0x09530076)]
        HRESULT WordWrap([in] long prop);
        [id(0x00000077), propget, helpcontext(0x09530077)]
        HRESULT HangingPunctuation([out, retval] long* prop);
        [id(0x00000077), propput, helpcontext(0x09530077)]
        HRESULT HangingPunctuation([in] long prop);
        [id(0x00000078), propget, helpcontext(0x09530078)]
        HRESULT HalfWidthPunctuationOnTopOfLine([out, retval] long* prop);
        [id(0x00000078), propput, helpcontext(0x09530078)]
        HRESULT HalfWidthPunctuationOnTopOfLine([in] long prop);
        [id(0x00000079), propget, helpcontext(0x09530079)]
        HRESULT AddSpaceBetweenFarEastAndAlpha([out, retval] long* prop);
        [id(0x00000079), propput, helpcontext(0x09530079)]
        HRESULT AddSpaceBetweenFarEastAndAlpha([in] long prop);
        [id(0x0000007a), propget, helpcontext(0x0953007a)]
        HRESULT AddSpaceBetweenFarEastAndDigit([out, retval] long* prop);
        [id(0x0000007a), propput, helpcontext(0x0953007a)]
        HRESULT AddSpaceBetweenFarEastAndDigit([in] long prop);
        [id(0x0000007b), propget, helpcontext(0x0953007b)]
        HRESULT BaseLineAlignment([out, retval] WdBaselineAlignment* prop);
        [id(0x0000007b), propput, helpcontext(0x0953007b)]
        HRESULT BaseLineAlignment([in] WdBaselineAlignment prop);
        [id(0x0000007c), propget, helpcontext(0x0953007c)]
        HRESULT AutoAdjustRightIndent([out, retval] long* prop);
        [id(0x0000007c), propput, helpcontext(0x0953007c)]
        HRESULT AutoAdjustRightIndent([in] long prop);
        [id(0x0000007d), propget, helpcontext(0x0953007d)]
        HRESULT DisableLineHeightGrid([out, retval] long* prop);
        [id(0x0000007d), propput, helpcontext(0x0953007d)]
        HRESULT DisableLineHeightGrid([in] long prop);
        [id(0x0000044f), propget, helpcontext(0x0953044f)]
        HRESULT TabStops([out, retval] TabStops** prop);
        [id(0x0000044f), propput, helpcontext(0x0953044f)]
        HRESULT TabStops([in] TabStops* prop);
        [id(0x0000044c), propget, helpcontext(0x0953044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x0953044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x0000044d), propget, helpcontext(0x0953044d)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x000000ca), propget, helpcontext(0x095300ca)]
        HRESULT OutlineLevel([out, retval] WdOutlineLevel* prop);
        [id(0x000000ca), propput, helpcontext(0x095300ca)]
        HRESULT OutlineLevel([in] WdOutlineLevel prop);
        [id(0x0000012d), helpcontext(0x0953012d)]
        HRESULT CloseUp();
        [id(0x0000012e), helpcontext(0x0953012e)]
        HRESULT OpenUp();
        [id(0x0000012f), helpcontext(0x0953012f)]
        HRESULT OpenOrCloseUp();
        [id(0x00000130), helpcontext(0x09530130)]
        HRESULT TabHangingIndent([in] short Count);
        [id(0x00000132), helpcontext(0x09530132)]
        HRESULT TabIndent([in] short Count);
        [id(0x00000138), helpcontext(0x09530138)]
        HRESULT Reset();
        [id(0x00000139), helpcontext(0x09530139)]
        HRESULT Space1();
        [id(0x0000013a), helpcontext(0x0953013a)]
        HRESULT Space15();
        [id(0x0000013b), helpcontext(0x0953013b)]
        HRESULT Space2();
        [id(0x00000140), helpcontext(0x09530140)]
        HRESULT IndentCharWidth([in] short Count);
        [id(0x00000142), helpcontext(0x09530142)]
        HRESULT IndentFirstLineCharWidth([in] short Count);
        [id(0x0000007e), propget, helpcontext(0x0953007e)]
        HRESULT CharacterUnitRightIndent([out, retval] int* prop);
        [id(0x0000007e), propput, helpcontext(0x0953007e)]
        HRESULT CharacterUnitRightIndent([in] int prop);
        [id(0x0000007f), propget, helpcontext(0x0953007f)]
        HRESULT CharacterUnitLeftIndent([out, retval] int* prop);
        [id(0x0000007f), propput, helpcontext(0x0953007f)]
        HRESULT CharacterUnitLeftIndent([in] int prop);
        [id(0x00000080), propget, helpcontext(0x09530080)]
        HRESULT CharacterUnitFirstLineIndent([out, retval] int* prop);
        [id(0x00000080), propput, helpcontext(0x09530080)]
        HRESULT CharacterUnitFirstLineIndent([in] int prop);
        [id(0x00000081), propget, helpcontext(0x09530081)]
        HRESULT LineUnitBefore([out, retval] int* prop);
        [id(0x00000081), propput, helpcontext(0x09530081)]
        HRESULT LineUnitBefore([in] int prop);
        [id(0x00000082), propget, helpcontext(0x09530082)]
        HRESULT LineUnitAfter([out, retval] int* prop);
        [id(0x00000082), propput, helpcontext(0x09530082)]
        HRESULT LineUnitAfter([in] int prop);
        [id(0x00000083), propget, helpcontext(0x09530083)]
        HRESULT ReadingOrder([out, retval] WdReadingOrder* prop);
        [id(0x00000083), propput, helpcontext(0x09530083)]
        HRESULT ReadingOrder([in] WdReadingOrder prop);
        [id(0x00000084), propget, helpcontext(0x09530084)]
        HRESULT SpaceBeforeAuto([out, retval] long* prop);
        [id(0x00000084), propput, helpcontext(0x09530084)]
        HRESULT SpaceBeforeAuto([in] long prop);
        [id(0x00000085), propget, helpcontext(0x09530085)]
        HRESULT SpaceAfterAuto([out, retval] long* prop);
        [id(0x00000085), propput, helpcontext(0x09530085)]
        HRESULT SpaceAfterAuto([in] long prop);
    };

    [
      odl,
      uuid(00020952-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000952),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _Font : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x095203e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000a), propget, helpcontext(0x0952000a)]
        HRESULT Duplicate([out, retval] Font** prop);
        [id(0x00000082), propget, helpcontext(0x09520082)]
        HRESULT Bold([out, retval] long* prop);
        [id(0x00000082), propput, helpcontext(0x09520082)]
        HRESULT Bold([in] long prop);
        [id(0x00000083), propget, helpcontext(0x09520083)]
        HRESULT Italic([out, retval] long* prop);
        [id(0x00000083), propput, helpcontext(0x09520083)]
        HRESULT Italic([in] long prop);
        [id(0x00000084), propget, helpcontext(0x09520084)]
        HRESULT Hidden([out, retval] long* prop);
        [id(0x00000084), propput, helpcontext(0x09520084)]
        HRESULT Hidden([in] long prop);
        [id(0x00000085), propget, helpcontext(0x09520085)]
        HRESULT SmallCaps([out, retval] long* prop);
        [id(0x00000085), propput, helpcontext(0x09520085)]
        HRESULT SmallCaps([in] long prop);
        [id(0x00000086), propget, helpcontext(0x09520086)]
        HRESULT AllCaps([out, retval] long* prop);
        [id(0x00000086), propput, helpcontext(0x09520086)]
        HRESULT AllCaps([in] long prop);
        [id(0x00000087), propget, helpcontext(0x09520087)]
        HRESULT StrikeThrough([out, retval] long* prop);
        [id(0x00000087), propput, helpcontext(0x09520087)]
        HRESULT StrikeThrough([in] long prop);
        [id(0x00000088), propget, helpcontext(0x09520088)]
        HRESULT DoubleStrikeThrough([out, retval] long* prop);
        [id(0x00000088), propput, helpcontext(0x09520088)]
        HRESULT DoubleStrikeThrough([in] long prop);
        [id(0x00000089), propget, helpcontext(0x09520089)]
        HRESULT ColorIndex([out, retval] WdColorIndex* prop);
        [id(0x00000089), propput, helpcontext(0x09520089)]
        HRESULT ColorIndex([in] WdColorIndex prop);
        [id(0x0000008a), propget, helpcontext(0x0952008a)]
        HRESULT Subscript([out, retval] long* prop);
        [id(0x0000008a), propput, helpcontext(0x0952008a)]
        HRESULT Subscript([in] long prop);
        [id(0x0000008b), propget, helpcontext(0x0952008b)]
        HRESULT Superscript([out, retval] long* prop);
        [id(0x0000008b), propput, helpcontext(0x0952008b)]
        HRESULT Superscript([in] long prop);
        [id(0x0000008c), propget, helpcontext(0x0952008c)]
        HRESULT Underline([out, retval] WdUnderline* prop);
        [id(0x0000008c), propput, helpcontext(0x0952008c)]
        HRESULT Underline([in] WdUnderline prop);
        [id(0x0000008d), propget, helpcontext(0x0952008d)]
        HRESULT Size([out, retval] int* prop);
        [id(0x0000008d), propput, helpcontext(0x0952008d)]
        HRESULT Size([in] int prop);
        [id(0x0000008e), propget, helpcontext(0x0952008e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x0000008e), propput, helpcontext(0x0952008e)]
        HRESULT Name([in] BSTR prop);
        [id(0x0000008f), propget, helpcontext(0x0952008f)]
        HRESULT Position([out, retval] long* prop);
        [id(0x0000008f), propput, helpcontext(0x0952008f)]
        HRESULT Position([in] long prop);
        [id(0x00000090), propget, helpcontext(0x09520090)]
        HRESULT Spacing([out, retval] int* prop);
        [id(0x00000090), propput, helpcontext(0x09520090)]
        HRESULT Spacing([in] int prop);
        [id(0x00000091), propget, helpcontext(0x09520091)]
        HRESULT Scaling([out, retval] long* prop);
        [id(0x00000091), propput, helpcontext(0x09520091)]
        HRESULT Scaling([in] long prop);
        [id(0x00000092), propget, helpcontext(0x09520092)]
        HRESULT Shadow([out, retval] long* prop);
        [id(0x00000092), propput, helpcontext(0x09520092)]
        HRESULT Shadow([in] long prop);
        [id(0x00000093), propget, helpcontext(0x09520093)]
        HRESULT Outline([out, retval] long* prop);
        [id(0x00000093), propput, helpcontext(0x09520093)]
        HRESULT Outline([in] long prop);
        [id(0x00000094), propget, helpcontext(0x09520094)]
        HRESULT Emboss([out, retval] long* prop);
        [id(0x00000094), propput, helpcontext(0x09520094)]
        HRESULT Emboss([in] long prop);
        [id(0x00000095), propget, helpcontext(0x09520095)]
        HRESULT Kerning([out, retval] int* prop);
        [id(0x00000095), propput, helpcontext(0x09520095)]
        HRESULT Kerning([in] int prop);
        [id(0x00000096), propget, helpcontext(0x09520096)]
        HRESULT Engrave([out, retval] long* prop);
        [id(0x00000096), propput, helpcontext(0x09520096)]
        HRESULT Engrave([in] long prop);
        [id(0x00000097), propget, helpcontext(0x09520097)]
        HRESULT Animation([out, retval] WdAnimation* prop);
        [id(0x00000097), propput, helpcontext(0x09520097)]
        HRESULT Animation([in] WdAnimation prop);
        [id(0x0000044c), propget, helpcontext(0x0952044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x0952044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000099), propget, helpcontext(0x09520099)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x0000009a), propget, helpcontext(0x0952009a)]
        HRESULT EmphasisMark([out, retval] WdEmphasisMark* prop);
        [id(0x0000009a), propput, helpcontext(0x0952009a)]
        HRESULT EmphasisMark([in] WdEmphasisMark prop);
        [id(0x0000009b), propget, helpcontext(0x0952009b)]
        HRESULT DisableCharacterSpaceGrid([out, retval] VARIANT_BOOL* prop);
        [id(0x0000009b), propput, helpcontext(0x0952009b)]
        HRESULT DisableCharacterSpaceGrid([in] VARIANT_BOOL prop);
        [id(0x0000009c), propget, helpcontext(0x0952009c)]
        HRESULT NameFarEast([out, retval] BSTR* prop);
        [id(0x0000009c), propput, helpcontext(0x0952009c)]
        HRESULT NameFarEast([in] BSTR prop);
        [id(0x0000009d), propget, helpcontext(0x0952009d)]
        HRESULT NameAscii([out, retval] BSTR* prop);
        [id(0x0000009d), propput, helpcontext(0x0952009d)]
        HRESULT NameAscii([in] BSTR prop);
        [id(0x0000009e), propget, helpcontext(0x0952009e)]
        HRESULT NameOther([out, retval] BSTR* prop);
        [id(0x0000009e), propput, helpcontext(0x0952009e)]
        HRESULT NameOther([in] BSTR prop);
        [id(0x00000064), helpcontext(0x09520064)]
        HRESULT Grow();
        [id(0x00000065), helpcontext(0x09520065)]
        HRESULT Shrink();
        [id(0x00000066), helpcontext(0x09520066)]
        HRESULT Reset();
        [id(0x00000067), helpcontext(0x09520067)]
        HRESULT SetAsTemplateDefault();
        [id(0x0000009f), propget, helpcontext(0x0952009f)]
        HRESULT Color([out, retval] WdColor* prop);
        [id(0x0000009f), propput, helpcontext(0x0952009f)]
        HRESULT Color([in] WdColor prop);
        [id(0x000000a0), propget, helpcontext(0x095200a0)]
        HRESULT BoldBi([out, retval] long* prop);
        [id(0x000000a0), propput, helpcontext(0x095200a0)]
        HRESULT BoldBi([in] long prop);
        [id(0x000000a1), propget, helpcontext(0x095200a1)]
        HRESULT ItalicBi([out, retval] long* prop);
        [id(0x000000a1), propput, helpcontext(0x095200a1)]
        HRESULT ItalicBi([in] long prop);
        [id(0x000000a2), propget, helpcontext(0x095200a2)]
        HRESULT SizeBi([out, retval] int* prop);
        [id(0x000000a2), propput, helpcontext(0x095200a2)]
        HRESULT SizeBi([in] int prop);
        [id(0x000000a3), propget, helpcontext(0x095200a3)]
        HRESULT NameBi([out, retval] BSTR* prop);
        [id(0x000000a3), propput, helpcontext(0x095200a3)]
        HRESULT NameBi([in] BSTR prop);
        [id(0x000000a4), propget, helpcontext(0x095200a4)]
        HRESULT ColorIndexBi([out, retval] WdColorIndex* prop);
        [id(0x000000a4), propput, helpcontext(0x095200a4)]
        HRESULT ColorIndexBi([in] WdColorIndex prop);
        [id(0x000000a5), propget, helpcontext(0x095200a5)]
        HRESULT DiacriticColor([out, retval] WdColor* prop);
        [id(0x000000a5), propput, helpcontext(0x095200a5)]
        HRESULT DiacriticColor([in] WdColor prop);
        [id(0x000000a6), propget, helpcontext(0x095200a6)]
        HRESULT UnderlineColor([out, retval] WdColor* prop);
        [id(0x000000a6), propput, helpcontext(0x095200a6)]
        HRESULT UnderlineColor([in] WdColor prop);
    };

    [
      odl,
      uuid(00020951-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000951),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Table : IDispatch {
        [id(00000000), propget, helpcontext(0x09510000)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x095103e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09510064)]
        HRESULT Columns([out, retval] Columns** prop);
        [id(0x00000065), propget, helpcontext(0x09510065)]
        HRESULT Rows([out, retval] Rows** prop);
        [id(0x0000044c), propget, helpcontext(0x0951044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x0951044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000068), propget, helpcontext(0x09510068)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000069), propget, helpcontext(0x09510069)]
        HRESULT Uniform([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006a), propget, helpcontext(0x0951006a)]
        HRESULT AutoFormatType([out, retval] long* prop);
        [id(0x000000c8), helpcontext(0x095100c8)]
        HRESULT Select();
        [id(0x00000009), helpcontext(0x09510009)]
        HRESULT Delete();
        [id(0x0000000a), hidden, helpcontext(0x0951000a)]
        HRESULT SortOld(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* FieldNumber, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* FieldNumber2, 
                        [in, optional] VARIANT* SortFieldType2, 
                        [in, optional] VARIANT* SortOrder2, 
                        [in, optional] VARIANT* FieldNumber3, 
                        [in, optional] VARIANT* SortFieldType3, 
                        [in, optional] VARIANT* SortOrder3, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* LanguageID);
        [id(0x0000000c), helpcontext(0x0951000c)]
        HRESULT SortAscending();
        [id(0x0000000d), helpcontext(0x0951000d)]
        HRESULT SortDescending();
        [id(0x0000000e), helpcontext(0x0951000e)]
        HRESULT AutoFormat(
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ApplyBorders, 
                        [in, optional] VARIANT* ApplyShading, 
                        [in, optional] VARIANT* ApplyFont, 
                        [in, optional] VARIANT* ApplyColor, 
                        [in, optional] VARIANT* ApplyHeadingRows, 
                        [in, optional] VARIANT* ApplyLastRow, 
                        [in, optional] VARIANT* ApplyFirstColumn, 
                        [in, optional] VARIANT* ApplyLastColumn, 
                        [in, optional] VARIANT* AutoFit);
        [id(0x0000000f), helpcontext(0x0951000f)]
        HRESULT UpdateAutoFormat();
        [id(0x00000010), hidden, helpcontext(0x09510010)]
        HRESULT ConvertToTextOld(
                        [in, optional] VARIANT* Separator, 
                        [out, retval] Range** prop);
        [id(0x00000011), helpcontext(0x09510011)]
        HRESULT Cell(
                        [in] long Row, 
                        [in] long Column, 
                        [out, retval] Cell** prop);
        [id(0x00000012), helpcontext(0x09510012)]
        HRESULT Split(
                        [in] VARIANT* BeforeRow, 
                        [out, retval] Table** prop);
        [id(0x00000013), helpcontext(0x09510013)]
        HRESULT ConvertToText(
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* NestedTables, 
                        [out, retval] Range** prop);
        [id(0x00000014), helpcontext(0x09510014)]
        HRESULT AutoFitBehavior([in] WdAutoFitBehavior Behavior);
        [id(0x00000017), helpcontext(0x09510017)]
        HRESULT Sort(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* FieldNumber, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* FieldNumber2, 
                        [in, optional] VARIANT* SortFieldType2, 
                        [in, optional] VARIANT* SortOrder2, 
                        [in, optional] VARIANT* FieldNumber3, 
                        [in, optional] VARIANT* SortFieldType3, 
                        [in, optional] VARIANT* SortOrder3, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* BidiSort, 
                        [in, optional] VARIANT* IgnoreThe, 
                        [in, optional] VARIANT* IgnoreKashida, 
                        [in, optional] VARIANT* IgnoreDiacritics, 
                        [in, optional] VARIANT* IgnoreHe, 
                        [in, optional] VARIANT* LanguageID);
        [id(0x0000006b), propget, helpcontext(0x0951006b)]
        HRESULT Tables([out, retval] Tables** prop);
        [id(0x0000006c), propget, helpcontext(0x0951006c)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x0000006d), propget, helpcontext(0x0951006d)]
        HRESULT AllowPageBreaks([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006d), propput, helpcontext(0x0951006d)]
        HRESULT AllowPageBreaks([in] VARIANT_BOOL prop);
        [id(0x0000006e), propget, helpcontext(0x0951006e)]
        HRESULT AllowAutoFit([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006e), propput, helpcontext(0x0951006e)]
        HRESULT AllowAutoFit([in] VARIANT_BOOL prop);
        [id(0x0000006f), propget, helpcontext(0x0951006f)]
        HRESULT PreferredWidth([out, retval] int* prop);
        [id(0x0000006f), propput, helpcontext(0x0951006f)]
        HRESULT PreferredWidth([in] int prop);
        [id(0x00000070), propget, helpcontext(0x09510070)]
        HRESULT PreferredWidthType([out, retval] WdPreferredWidthType* prop);
        [id(0x00000070), propput, helpcontext(0x09510070)]
        HRESULT PreferredWidthType([in] WdPreferredWidthType prop);
        [id(0x00000071), propget, helpcontext(0x09510071)]
        HRESULT TopPadding([out, retval] int* prop);
        [id(0x00000071), propput, helpcontext(0x09510071)]
        HRESULT TopPadding([in] int prop);
        [id(0x00000072), propget, helpcontext(0x09510072)]
        HRESULT BottomPadding([out, retval] int* prop);
        [id(0x00000072), propput, helpcontext(0x09510072)]
        HRESULT BottomPadding([in] int prop);
        [id(0x00000073), propget, helpcontext(0x09510073)]
        HRESULT LeftPadding([out, retval] int* prop);
        [id(0x00000073), propput, helpcontext(0x09510073)]
        HRESULT LeftPadding([in] int prop);
        [id(0x00000074), propget, helpcontext(0x09510074)]
        HRESULT RightPadding([out, retval] int* prop);
        [id(0x00000074), propput, helpcontext(0x09510074)]
        HRESULT RightPadding([in] int prop);
        [id(0x00000075), propget, helpcontext(0x09510075)]
        HRESULT Spacing([out, retval] int* prop);
        [id(0x00000075), propput, helpcontext(0x09510075)]
        HRESULT Spacing([in] int prop);
        [id(0x00000076), propget, helpcontext(0x09510076)]
        HRESULT TableDirection([out, retval] WdTableDirection* prop);
        [id(0x00000076), propput, helpcontext(0x09510076)]
        HRESULT TableDirection([in] WdTableDirection prop);
        [id(0x00000077), propget, helpcontext(0x09510077)]
        HRESULT ID([out, retval] BSTR* prop);
        [id(0x00000077), propput, helpcontext(0x09510077)]
        HRESULT ID([in] BSTR prop);
        [id(0x000000c9), propget, helpcontext(0x095100c9)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(0x000000c9), propput, helpcontext(0x095100c9)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x000000ca), propget, helpcontext(0x095100ca)]
        HRESULT ApplyStyleHeadingRows([out, retval] VARIANT_BOOL* prop);
        [id(0x000000ca), propput, helpcontext(0x095100ca)]
        HRESULT ApplyStyleHeadingRows([in] VARIANT_BOOL prop);
        [id(0x000000cb), propget, helpcontext(0x095100cb)]
        HRESULT ApplyStyleLastRow([out, retval] VARIANT_BOOL* prop);
        [id(0x000000cb), propput, helpcontext(0x095100cb)]
        HRESULT ApplyStyleLastRow([in] VARIANT_BOOL prop);
        [id(0x000000cc), propget, helpcontext(0x095100cc)]
        HRESULT ApplyStyleFirstColumn([out, retval] VARIANT_BOOL* prop);
        [id(0x000000cc), propput, helpcontext(0x095100cc)]
        HRESULT ApplyStyleFirstColumn([in] VARIANT_BOOL prop);
        [id(0x000000cd), propget, helpcontext(0x095100cd)]
        HRESULT ApplyStyleLastColumn([out, retval] VARIANT_BOOL* prop);
        [id(0x000000cd), propput, helpcontext(0x095100cd)]
        HRESULT ApplyStyleLastColumn([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020950-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000950),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Row : IDispatch {
        [id(00000000), propget, helpcontext(0x09500000)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x095003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000003), propget, helpcontext(0x09500003)]
        HRESULT AllowBreakAcrossPages([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x09500003)]
        HRESULT AllowBreakAcrossPages([in] long prop);
        [id(0x00000004), propget, helpcontext(0x09500004)]
        HRESULT Alignment([out, retval] WdRowAlignment* prop);
        [id(0x00000004), propput, helpcontext(0x09500004)]
        HRESULT Alignment([in] WdRowAlignment prop);
        [id(0x00000005), propget, helpcontext(0x09500005)]
        HRESULT HeadingFormat([out, retval] long* prop);
        [id(0x00000005), propput, helpcontext(0x09500005)]
        HRESULT HeadingFormat([in] long prop);
        [id(0x00000006), propget, helpcontext(0x09500006)]
        HRESULT SpaceBetweenColumns([out, retval] int* prop);
        [id(0x00000006), propput, helpcontext(0x09500006)]
        HRESULT SpaceBetweenColumns([in] int prop);
        [id(0x00000007), propget, helpcontext(0x09500007)]
        HRESULT Height([out, retval] int* prop);
        [id(0x00000007), propput, helpcontext(0x09500007)]
        HRESULT Height([in] int prop);
        [id(0x00000008), propget, helpcontext(0x09500008)]
        HRESULT HeightRule([out, retval] WdRowHeightRule* prop);
        [id(0x00000008), propput, helpcontext(0x09500008)]
        HRESULT HeightRule([in] WdRowHeightRule prop);
        [id(0x00000009), propget, helpcontext(0x09500009)]
        HRESULT LeftIndent([out, retval] int* prop);
        [id(0x00000009), propput, helpcontext(0x09500009)]
        HRESULT LeftIndent([in] int prop);
        [id(0x0000000a), propget, helpcontext(0x0950000a)]
        HRESULT IsLast([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000b), propget, helpcontext(0x0950000b)]
        HRESULT IsFirst([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propget, helpcontext(0x0950000c)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000064), propget, helpcontext(0x09500064)]
        HRESULT Cells([out, retval] Cells** prop);
        [id(0x0000044c), propget, helpcontext(0x0950044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x0950044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000067), propget, helpcontext(0x09500067)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000068), propget, helpcontext(0x09500068)]
        HRESULT Next([out, retval] Row** prop);
        [id(0x00000069), propget, helpcontext(0x09500069)]
        HRESULT Previous([out, retval] Row** prop);
        [id(0x0000ffff), helpcontext(0x0950ffff)]
        HRESULT Select();
        [id(0x000000c8), helpcontext(0x095000c8)]
        HRESULT Delete();
        [id(0x000000ca), helpcontext(0x095000ca)]
        HRESULT SetLeftIndent(
                        [in] int LeftIndent, 
                        [in] WdRulerStyle RulerStyle);
        [id(0x000000cb), helpcontext(0x095000cb)]
        HRESULT SetHeight(
                        [in] int RowHeight, 
                        [in] WdRowHeightRule HeightRule);
        [id(0x00000010), hidden, helpcontext(0x09500010)]
        HRESULT ConvertToTextOld(
                        [in, optional] VARIANT* Separator, 
                        [out, retval] Range** prop);
        [id(0x00000012), helpcontext(0x09500012)]
        HRESULT ConvertToText(
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* NestedTables, 
                        [out, retval] Range** prop);
        [id(0x0000006a), propget, helpcontext(0x0950006a)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x0000006b), propget, helpcontext(0x0950006b)]
        HRESULT ID([out, retval] BSTR* prop);
        [id(0x0000006b), propput, helpcontext(0x0950006b)]
        HRESULT ID([in] BSTR prop);
    };

    [
      odl,
      uuid(0002094F-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000094f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Column : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x094f03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094f03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094f03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000003), propget, helpcontext(0x094f0003)]
        HRESULT Width([out, retval] int* prop);
        [id(0x00000003), propput, helpcontext(0x094f0003)]
        HRESULT Width([in] int prop);
        [id(0x00000004), propget, helpcontext(0x094f0004)]
        HRESULT IsFirst([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propget, helpcontext(0x094f0005)]
        HRESULT IsLast([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propget, helpcontext(0x094f0006)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000064), propget, helpcontext(0x094f0064)]
        HRESULT Cells([out, retval] Cells** prop);
        [id(0x0000044c), propget, helpcontext(0x094f044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x094f044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000066), propget, helpcontext(0x094f0066)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000067), propget, helpcontext(0x094f0067)]
        HRESULT Next([out, retval] Column** prop);
        [id(0x00000068), propget, helpcontext(0x094f0068)]
        HRESULT Previous([out, retval] Column** prop);
        [id(0x0000ffff), helpcontext(0x094fffff)]
        HRESULT Select();
        [id(0x000000c8), helpcontext(0x094f00c8)]
        HRESULT Delete();
        [id(0x000000c9), helpcontext(0x094f00c9)]
        HRESULT SetWidth(
                        [in] int ColumnWidth, 
                        [in] WdRulerStyle RulerStyle);
        [id(0x000000ca), helpcontext(0x094f00ca)]
        HRESULT AutoFit();
        [id(0x000000cb), hidden, helpcontext(0x094f00cb)]
        HRESULT SortOld(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* LanguageID);
        [id(0x000000cc), helpcontext(0x094f00cc)]
        HRESULT Sort(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* BidiSort, 
                        [in, optional] VARIANT* IgnoreThe, 
                        [in, optional] VARIANT* IgnoreKashida, 
                        [in, optional] VARIANT* IgnoreDiacritics, 
                        [in, optional] VARIANT* IgnoreHe, 
                        [in, optional] VARIANT* LanguageID);
        [id(0x00000069), propget, helpcontext(0x094f0069)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x0000006a), propget, helpcontext(0x094f006a)]
        HRESULT PreferredWidth([out, retval] int* prop);
        [id(0x0000006a), propput, helpcontext(0x094f006a)]
        HRESULT PreferredWidth([in] int prop);
        [id(0x0000006b), propget, helpcontext(0x094f006b)]
        HRESULT PreferredWidthType([out, retval] WdPreferredWidthType* prop);
        [id(0x0000006b), propput, helpcontext(0x094f006b)]
        HRESULT PreferredWidthType([in] WdPreferredWidthType prop);
    };

    [
      odl,
      uuid(0002094E-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000094e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Cell : IDispatch {
        [id(00000000), propget, helpcontext(0x094e0000)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x094e03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000004), propget, helpcontext(0x094e0004)]
        HRESULT RowIndex([out, retval] long* prop);
        [id(0x00000005), propget, helpcontext(0x094e0005)]
        HRESULT ColumnIndex([out, retval] long* prop);
        [id(0x00000006), propget, helpcontext(0x094e0006)]
        HRESULT Width([out, retval] int* prop);
        [id(0x00000006), propput, helpcontext(0x094e0006)]
        HRESULT Width([in] int prop);
        [id(0x00000007), propget, helpcontext(0x094e0007)]
        HRESULT Height([out, retval] int* prop);
        [id(0x00000007), propput, helpcontext(0x094e0007)]
        HRESULT Height([in] int prop);
        [id(0x00000008), propget, helpcontext(0x094e0008)]
        HRESULT HeightRule([out, retval] WdRowHeightRule* prop);
        [id(0x00000008), propput, helpcontext(0x094e0008)]
        HRESULT HeightRule([in] WdRowHeightRule prop);
        [id(0x00000450), propget, helpcontext(0x094e0450)]
        HRESULT VerticalAlignment([out, retval] WdCellVerticalAlignment* prop);
        [id(0x00000450), propput, helpcontext(0x094e0450)]
        HRESULT VerticalAlignment([in] WdCellVerticalAlignment prop);
        [id(0x00000065), propget, helpcontext(0x094e0065)]
        HRESULT Column([out, retval] Column** prop);
        [id(0x00000066), propget, helpcontext(0x094e0066)]
        HRESULT Row([out, retval] Row** prop);
        [id(0x00000067), propget, helpcontext(0x094e0067)]
        HRESULT Next([out, retval] Cell** prop);
        [id(0x00000068), propget, helpcontext(0x094e0068)]
        HRESULT Previous([out, retval] Cell** prop);
        [id(0x00000069), propget, helpcontext(0x094e0069)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x0000044c), propget, helpcontext(0x094e044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x094e044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x0000ffff), helpcontext(0x094effff)]
        HRESULT Select();
        [id(0x000000c8), helpcontext(0x094e00c8)]
        HRESULT Delete([in, optional] VARIANT* ShiftCells);
        [id(0x000000c9), helpcontext(0x094e00c9)]
        HRESULT Formula(
                        [in, optional] VARIANT* Formula, 
                        [in, optional] VARIANT* NumFormat);
        [id(0x000000ca), helpcontext(0x094e00ca)]
        HRESULT SetWidth(
                        [in] int ColumnWidth, 
                        [in] WdRulerStyle RulerStyle);
        [id(0x000000cb), helpcontext(0x094e00cb)]
        HRESULT SetHeight(
                        [in] VARIANT* RowHeight, 
                        [in] WdRowHeightRule HeightRule);
        [id(0x000000cc), helpcontext(0x094e00cc)]
        HRESULT Merge([in] Cell* MergeTo);
        [id(0x000000cd), helpcontext(0x094e00cd)]
        HRESULT Split(
                        [in, optional] VARIANT* NumRows, 
                        [in, optional] VARIANT* NumColumns);
        [id(0x000000ce), helpcontext(0x094e00ce)]
        HRESULT AutoSum();
        [id(0x0000006a), propget, helpcontext(0x094e006a)]
        HRESULT Tables([out, retval] Tables** prop);
        [id(0x0000006b), propget, helpcontext(0x094e006b)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x0000006c), propget, helpcontext(0x094e006c)]
        HRESULT WordWrap([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006c), propput, helpcontext(0x094e006c)]
        HRESULT WordWrap([in] VARIANT_BOOL prop);
        [id(0x0000006d), propget, helpcontext(0x094e006d)]
        HRESULT PreferredWidth([out, retval] int* prop);
        [id(0x0000006d), propput, helpcontext(0x094e006d)]
        HRESULT PreferredWidth([in] int prop);
        [id(0x0000006e), propget, helpcontext(0x094e006e)]
        HRESULT FitText([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006e), propput, helpcontext(0x094e006e)]
        HRESULT FitText([in] VARIANT_BOOL prop);
        [id(0x0000006f), propget, helpcontext(0x094e006f)]
        HRESULT TopPadding([out, retval] int* prop);
        [id(0x0000006f), propput, helpcontext(0x094e006f)]
        HRESULT TopPadding([in] int prop);
        [id(0x00000070), propget, helpcontext(0x094e0070)]
        HRESULT BottomPadding([out, retval] int* prop);
        [id(0x00000070), propput, helpcontext(0x094e0070)]
        HRESULT BottomPadding([in] int prop);
        [id(0x00000071), propget, helpcontext(0x094e0071)]
        HRESULT LeftPadding([out, retval] int* prop);
        [id(0x00000071), propput, helpcontext(0x094e0071)]
        HRESULT LeftPadding([in] int prop);
        [id(0x00000072), propget, helpcontext(0x094e0072)]
        HRESULT RightPadding([out, retval] int* prop);
        [id(0x00000072), propput, helpcontext(0x094e0072)]
        HRESULT RightPadding([in] int prop);
        [id(0x00000073), propget, helpcontext(0x094e0073)]
        HRESULT ID([out, retval] BSTR* prop);
        [id(0x00000073), propput, helpcontext(0x094e0073)]
        HRESULT ID([in] BSTR prop);
        [id(0x00000074), propget, helpcontext(0x094e0074)]
        HRESULT PreferredWidthType([out, retval] WdPreferredWidthType* prop);
        [id(0x00000074), propput, helpcontext(0x094e0074)]
        HRESULT PreferredWidthType([in] WdPreferredWidthType prop);
    };

    [
      odl,
      uuid(0002094D-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000094d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Tables : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x094dfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x094d0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x094d03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x094d0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Table** prop);
        [id(0x00000004), hidden, helpcontext(0x094d0004)]
        HRESULT AddOld(
                        [in] Range* Range, 
                        [in] long NumRows, 
                        [in] long NumColumns, 
                        [out, retval] Table** prop);
        [id(0x000000c8), helpcontext(0x094d00c8)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in] long NumRows, 
                        [in] long NumColumns, 
                        [in, optional] VARIANT* DefaultTableBehavior, 
                        [in, optional] VARIANT* AutoFitBehavior, 
                        [out, retval] Table** prop);
        [id(0x00000064), propget, helpcontext(0x094d0064)]
        HRESULT NestingLevel([out, retval] long* prop);
    };

    [
      odl,
      uuid(0002094C-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000094c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Rows : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x094cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x094c0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x094c0003)]
        HRESULT AllowBreakAcrossPages([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x094c0003)]
        HRESULT AllowBreakAcrossPages([in] long prop);
        [id(0x00000004), propget, helpcontext(0x094c0004)]
        HRESULT Alignment([out, retval] WdRowAlignment* prop);
        [id(0x00000004), propput, helpcontext(0x094c0004)]
        HRESULT Alignment([in] WdRowAlignment prop);
        [id(0x00000005), propget, helpcontext(0x094c0005)]
        HRESULT HeadingFormat([out, retval] long* prop);
        [id(0x00000005), propput, helpcontext(0x094c0005)]
        HRESULT HeadingFormat([in] long prop);
        [id(0x00000006), propget, helpcontext(0x094c0006)]
        HRESULT SpaceBetweenColumns([out, retval] int* prop);
        [id(0x00000006), propput, helpcontext(0x094c0006)]
        HRESULT SpaceBetweenColumns([in] int prop);
        [id(0x00000007), propget, helpcontext(0x094c0007)]
        HRESULT Height([out, retval] int* prop);
        [id(0x00000007), propput, helpcontext(0x094c0007)]
        HRESULT Height([in] int prop);
        [id(0x00000008), propget, helpcontext(0x094c0008)]
        HRESULT HeightRule([out, retval] WdRowHeightRule* prop);
        [id(0x00000008), propput, helpcontext(0x094c0008)]
        HRESULT HeightRule([in] WdRowHeightRule prop);
        [id(0x00000009), propget, helpcontext(0x094c0009)]
        HRESULT LeftIndent([out, retval] int* prop);
        [id(0x00000009), propput, helpcontext(0x094c0009)]
        HRESULT LeftIndent([in] int prop);
        [id(0x0000000a), propget, helpcontext(0x094c000a)]
        HRESULT First([out, retval] Row** prop);
        [id(0x0000000b), propget, helpcontext(0x094c000b)]
        HRESULT Last([out, retval] Row** prop);
        [id(0x000003e8), propget, helpcontext(0x094c03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000044c), propget, helpcontext(0x094c044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x094c044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000066), propget, helpcontext(0x094c0066)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(00000000), helpcontext(0x094c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Row** prop);
        [id(0x00000064), helpcontext(0x094c0064)]
        HRESULT Add(
                        [in, optional] VARIANT* BeforeRow, 
                        [out, retval] Row** prop);
        [id(0x000000c7), helpcontext(0x094c00c7)]
        HRESULT Select();
        [id(0x000000c8), helpcontext(0x094c00c8)]
        HRESULT Delete();
        [id(0x000000ca), helpcontext(0x094c00ca)]
        HRESULT SetLeftIndent(
                        [in] int LeftIndent, 
                        [in] WdRulerStyle RulerStyle);
        [id(0x000000cb), helpcontext(0x094c00cb)]
        HRESULT SetHeight(
                        [in] int RowHeight, 
                        [in] WdRowHeightRule HeightRule);
        [id(0x00000010), hidden, helpcontext(0x094c0010)]
        HRESULT ConvertToTextOld(
                        [in, optional] VARIANT* Separator, 
                        [out, retval] Range** prop);
        [id(0x000000ce), helpcontext(0x094c00ce)]
        HRESULT DistributeHeight();
        [id(0x000000d2), helpcontext(0x094c00d2)]
        HRESULT ConvertToText(
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* NestedTables, 
                        [out, retval] Range** prop);
        [id(0x0000000c), propget, helpcontext(0x094c000c)]
        HRESULT WrapAroundText([out, retval] long* prop);
        [id(0x0000000c), propput, helpcontext(0x094c000c)]
        HRESULT WrapAroundText([in] long prop);
        [id(0x0000000d), propget, helpcontext(0x094c000d)]
        HRESULT DistanceTop([out, retval] int* prop);
        [id(0x0000000d), propput, helpcontext(0x094c000d)]
        HRESULT DistanceTop([in] int prop);
        [id(0x0000000e), propget, helpcontext(0x094c000e)]
        HRESULT DistanceBottom([out, retval] int* prop);
        [id(0x0000000e), propput, helpcontext(0x094c000e)]
        HRESULT DistanceBottom([in] int prop);
        [id(0x00000014), propget, helpcontext(0x094c0014)]
        HRESULT DistanceLeft([out, retval] int* prop);
        [id(0x00000014), propput, helpcontext(0x094c0014)]
        HRESULT DistanceLeft([in] int prop);
        [id(0x00000015), propget, helpcontext(0x094c0015)]
        HRESULT DistanceRight([out, retval] int* prop);
        [id(0x00000015), propput, helpcontext(0x094c0015)]
        HRESULT DistanceRight([in] int prop);
        [id(0x0000000f), propget, helpcontext(0x094c000f)]
        HRESULT HorizontalPosition([out, retval] int* prop);
        [id(0x0000000f), propput, helpcontext(0x094c000f)]
        HRESULT HorizontalPosition([in] int prop);
        [id(0x00000011), propget, helpcontext(0x094c0011)]
        HRESULT VerticalPosition([out, retval] int* prop);
        [id(0x00000011), propput, helpcontext(0x094c0011)]
        HRESULT VerticalPosition([in] int prop);
        [id(0x00000012), propget, helpcontext(0x094c0012)]
        HRESULT RelativeHorizontalPosition([out, retval] WdRelativeHorizontalPosition* prop);
        [id(0x00000012), propput, helpcontext(0x094c0012)]
        HRESULT RelativeHorizontalPosition([in] WdRelativeHorizontalPosition prop);
        [id(0x00000013), propget, helpcontext(0x094c0013)]
        HRESULT RelativeVerticalPosition([out, retval] WdRelativeVerticalPosition* prop);
        [id(0x00000013), propput, helpcontext(0x094c0013)]
        HRESULT RelativeVerticalPosition([in] WdRelativeVerticalPosition prop);
        [id(0x00000016), propget, helpcontext(0x094c0016)]
        HRESULT AllowOverlap([out, retval] long* prop);
        [id(0x00000016), propput, helpcontext(0x094c0016)]
        HRESULT AllowOverlap([in] long prop);
        [id(0x00000067), propget, helpcontext(0x094c0067)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x00000068), propget, helpcontext(0x094c0068)]
        HRESULT TableDirection([out, retval] WdTableDirection* prop);
        [id(0x00000068), propput, helpcontext(0x094c0068)]
        HRESULT TableDirection([in] WdTableDirection prop);
    };

    [
      odl,
      uuid(0002094B-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000094b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Columns : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x094bfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x094b0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x094b03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x094b0064)]
        HRESULT First([out, retval] Column** prop);
        [id(0x00000065), propget, helpcontext(0x094b0065)]
        HRESULT Last([out, retval] Column** prop);
        [id(0x00000003), propget, helpcontext(0x094b0003)]
        HRESULT Width([out, retval] int* prop);
        [id(0x00000003), propput, helpcontext(0x094b0003)]
        HRESULT Width([in] int prop);
        [id(0x0000044c), propget, helpcontext(0x094b044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x094b044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000067), propget, helpcontext(0x094b0067)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(00000000), helpcontext(0x094b0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Column** prop);
        [id(0x00000005), helpcontext(0x094b0005)]
        HRESULT Add(
                        [in, optional] VARIANT* BeforeColumn, 
                        [out, retval] Column** prop);
        [id(0x000000c7), helpcontext(0x094b00c7)]
        HRESULT Select();
        [id(0x000000c8), helpcontext(0x094b00c8)]
        HRESULT Delete();
        [id(0x000000c9), helpcontext(0x094b00c9)]
        HRESULT SetWidth(
                        [in] int ColumnWidth, 
                        [in] WdRulerStyle RulerStyle);
        [id(0x000000ca), helpcontext(0x094b00ca)]
        HRESULT AutoFit();
        [id(0x000000cb), helpcontext(0x094b00cb)]
        HRESULT DistributeWidth();
        [id(0x00000068), propget, helpcontext(0x094b0068)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x00000069), propget, helpcontext(0x094b0069)]
        HRESULT PreferredWidth([out, retval] int* prop);
        [id(0x00000069), propput, helpcontext(0x094b0069)]
        HRESULT PreferredWidth([in] int prop);
        [id(0x0000006a), propget, helpcontext(0x094b006a)]
        HRESULT PreferredWidthType([out, retval] WdPreferredWidthType* prop);
        [id(0x0000006a), propput, helpcontext(0x094b006a)]
        HRESULT PreferredWidthType([in] WdPreferredWidthType prop);
    };

    [
      odl,
      uuid(0002094A-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000094a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Cells : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x094afffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x094a0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x094a03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000006), propget, helpcontext(0x094a0006)]
        HRESULT Width([out, retval] int* prop);
        [id(0x00000006), propput, helpcontext(0x094a0006)]
        HRESULT Width([in] int prop);
        [id(0x00000007), propget, helpcontext(0x094a0007)]
        HRESULT Height([out, retval] int* prop);
        [id(0x00000007), propput, helpcontext(0x094a0007)]
        HRESULT Height([in] int prop);
        [id(0x00000008), propget, helpcontext(0x094a0008)]
        HRESULT HeightRule([out, retval] WdRowHeightRule* prop);
        [id(0x00000008), propput, helpcontext(0x094a0008)]
        HRESULT HeightRule([in] WdRowHeightRule prop);
        [id(0x00000450), propget, helpcontext(0x094a0450)]
        HRESULT VerticalAlignment([out, retval] WdCellVerticalAlignment* prop);
        [id(0x00000450), propput, helpcontext(0x094a0450)]
        HRESULT VerticalAlignment([in] WdCellVerticalAlignment prop);
        [id(0x0000044c), propget, helpcontext(0x094a044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x094a044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000065), propget, helpcontext(0x094a0065)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(00000000), helpcontext(0x094a0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Cell** prop);
        [id(0x00000004), helpcontext(0x094a0004)]
        HRESULT Add(
                        [in, optional] VARIANT* BeforeCell, 
                        [out, retval] Cell** prop);
        [id(0x000000c8), helpcontext(0x094a00c8)]
        HRESULT Delete([in, optional] VARIANT* ShiftCells);
        [id(0x000000ca), helpcontext(0x094a00ca)]
        HRESULT SetWidth(
                        [in] int ColumnWidth, 
                        [in] WdRulerStyle RulerStyle);
        [id(0x000000cb), helpcontext(0x094a00cb)]
        HRESULT SetHeight(
                        [in] VARIANT* RowHeight, 
                        [in] WdRowHeightRule HeightRule);
        [id(0x000000cc), helpcontext(0x094a00cc)]
        HRESULT Merge();
        [id(0x000000cd), helpcontext(0x094a00cd)]
        HRESULT Split(
                        [in, optional] VARIANT* NumRows, 
                        [in, optional] VARIANT* NumColumns, 
                        [in, optional] VARIANT* MergeBeforeSplit);
        [id(0x000000ce), helpcontext(0x094a00ce)]
        HRESULT DistributeHeight();
        [id(0x000000cf), helpcontext(0x094a00cf)]
        HRESULT DistributeWidth();
        [id(0x000000d0), helpcontext(0x094a00d0)]
        HRESULT AutoFit();
        [id(0x00000066), propget, helpcontext(0x094a0066)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x00000067), propget, helpcontext(0x094a0067)]
        HRESULT PreferredWidth([out, retval] int* prop);
        [id(0x00000067), propput, helpcontext(0x094a0067)]
        HRESULT PreferredWidth([in] int prop);
        [id(0x00000068), propget, helpcontext(0x094a0068)]
        HRESULT PreferredWidthType([out, retval] WdPreferredWidthType* prop);
        [id(0x00000068), propput, helpcontext(0x094a0068)]
        HRESULT PreferredWidthType([in] WdPreferredWidthType prop);
    };

    [
      odl,
      uuid(00020949-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000949),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AutoCorrect : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x094903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09490001)]
        HRESULT CorrectDays([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09490001)]
        HRESULT CorrectDays([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x09490002)]
        HRESULT CorrectInitialCaps([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09490002)]
        HRESULT CorrectInitialCaps([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x09490003)]
        HRESULT CorrectSentenceCaps([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09490003)]
        HRESULT CorrectSentenceCaps([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09490004)]
        HRESULT ReplaceText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09490004)]
        HRESULT ReplaceText([in] VARIANT_BOOL prop);
        [id(0x00000006), propget, helpcontext(0x09490006)]
        HRESULT Entries([out, retval] AutoCorrectEntries** prop);
        [id(0x00000007), propget, helpcontext(0x09490007)]
        HRESULT FirstLetterExceptions([out, retval] FirstLetterExceptions** prop);
        [id(0x00000008), propget, helpcontext(0x09490008)]
        HRESULT FirstLetterAutoAdd([out, retval] VARIANT_BOOL* prop);
        [id(0x00000008), propput, helpcontext(0x09490008)]
        HRESULT FirstLetterAutoAdd([in] VARIANT_BOOL prop);
        [id(0x00000009), propget, helpcontext(0x09490009)]
        HRESULT TwoInitialCapsExceptions([out, retval] TwoInitialCapsExceptions** prop);
        [id(0x0000000a), propget, helpcontext(0x0949000a)]
        HRESULT TwoInitialCapsAutoAdd([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000a), propput, helpcontext(0x0949000a)]
        HRESULT TwoInitialCapsAutoAdd([in] VARIANT_BOOL prop);
        [id(0x0000000b), propget, helpcontext(0x0949000b)]
        HRESULT CorrectCapsLock([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000b), propput, helpcontext(0x0949000b)]
        HRESULT CorrectCapsLock([in] VARIANT_BOOL prop);
        [id(0x0000000c), propget, helpcontext(0x0949000c)]
        HRESULT CorrectHangulAndAlphabet([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propput, helpcontext(0x0949000c)]
        HRESULT CorrectHangulAndAlphabet([in] VARIANT_BOOL prop);
        [id(0x0000000d), propget, helpcontext(0x0949000d)]
        HRESULT HangulAndAlphabetExceptions([out, retval] HangulAndAlphabetExceptions** prop);
        [id(0x0000000e), propget, helpcontext(0x0949000e)]
        HRESULT HangulAndAlphabetAutoAdd([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000e), propput, helpcontext(0x0949000e)]
        HRESULT HangulAndAlphabetAutoAdd([in] VARIANT_BOOL prop);
        [id(0x0000000f), propget, helpcontext(0x0949000f)]
        HRESULT ReplaceTextFromSpellingChecker([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000f), propput, helpcontext(0x0949000f)]
        HRESULT ReplaceTextFromSpellingChecker([in] VARIANT_BOOL prop);
        [id(0x00000010), propget, helpcontext(0x09490010)]
        HRESULT OtherCorrectionsAutoAdd([out, retval] VARIANT_BOOL* prop);
        [id(0x00000010), propput, helpcontext(0x09490010)]
        HRESULT OtherCorrectionsAutoAdd([in] VARIANT_BOOL prop);
        [id(0x00000011), propget, helpcontext(0x09490011)]
        HRESULT OtherCorrectionsExceptions([out, retval] OtherCorrectionsExceptions** prop);
        [id(0x00000012), propget, helpcontext(0x09490012)]
        HRESULT CorrectKeyboardSetting([out, retval] VARIANT_BOOL* prop);
        [id(0x00000012), propput, helpcontext(0x09490012)]
        HRESULT CorrectKeyboardSetting([in] VARIANT_BOOL prop);
        [id(0x00000013), propget, helpcontext(0x09490013)]
        HRESULT CorrectTableCells([out, retval] VARIANT_BOOL* prop);
        [id(0x00000013), propput, helpcontext(0x09490013)]
        HRESULT CorrectTableCells([in] VARIANT_BOOL prop);
        [id(0x00000014), propget, helpcontext(0x09490014)]
        HRESULT DisplayAutoCorrectOptions([out, retval] VARIANT_BOOL* prop);
        [id(0x00000014), propput, helpcontext(0x09490014)]
        HRESULT DisplayAutoCorrectOptions([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020948-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000948),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AutoCorrectEntries : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x094803e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0948fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09480001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09480000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] AutoCorrectEntry** prop);
        [id(0x00000065), helpcontext(0x09480065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in] BSTR Value, 
                        [out, retval] AutoCorrectEntry** prop);
        [id(0x00000066), helpcontext(0x09480066)]
        HRESULT AddRichText(
                        [in] BSTR Name, 
                        [in] Range* Range, 
                        [out, retval] AutoCorrectEntry** prop);
    };

    [
      odl,
      uuid(00020947-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000947),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AutoCorrectEntry : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x094703e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09470001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09470002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x09470002)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x09470003)]
        HRESULT Value([out, retval] BSTR* prop);
        [id(0x00000003), propput, helpcontext(0x09470003)]
        HRESULT Value([in] BSTR prop);
        [id(0x00000004), propget, helpcontext(0x09470004)]
        HRESULT RichText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000065), helpcontext(0x09470065)]
        HRESULT Delete();
        [id(0x00000066), helpcontext(0x09470066)]
        HRESULT Apply([in] Range* Range);
    };

    [
      odl,
      uuid(00020946-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000946),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FirstLetterExceptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x094603e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0946fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09460001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09460000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] FirstLetterException** prop);
        [id(0x00000065), helpcontext(0x09460065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] FirstLetterException** prop);
    };

    [
      odl,
      uuid(00020945-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000945),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FirstLetterException : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x094503e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09450001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09450002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000065), helpcontext(0x09450065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(00020944-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000944),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TwoInitialCapsExceptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x094403e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0944fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09440001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09440000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] TwoInitialCapsException** prop);
        [id(0x00000065), helpcontext(0x09440065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] TwoInitialCapsException** prop);
    };

    [
      odl,
      uuid(00020943-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000943),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TwoInitialCapsException : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x094303e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09430001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09430002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000065), helpcontext(0x09430065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(00020942-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000942),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Footnotes : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0942fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09420002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x094203e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09420064)]
        HRESULT Location([out, retval] WdFootnoteLocation* prop);
        [id(0x00000064), propput, helpcontext(0x09420064)]
        HRESULT Location([in] WdFootnoteLocation prop);
        [id(0x00000065), propget, helpcontext(0x09420065)]
        HRESULT NumberStyle([out, retval] WdNoteNumberStyle* prop);
        [id(0x00000065), propput, helpcontext(0x09420065)]
        HRESULT NumberStyle([in] WdNoteNumberStyle prop);
        [id(0x00000066), propget, helpcontext(0x09420066)]
        HRESULT StartingNumber([out, retval] long* prop);
        [id(0x00000066), propput, helpcontext(0x09420066)]
        HRESULT StartingNumber([in] long prop);
        [id(0x00000067), propget, helpcontext(0x09420067)]
        HRESULT NumberingRule([out, retval] WdNumberingRule* prop);
        [id(0x00000067), propput, helpcontext(0x09420067)]
        HRESULT NumberingRule([in] WdNumberingRule prop);
        [id(0x00000068), propget, helpcontext(0x09420068)]
        HRESULT Separator([out, retval] Range** prop);
        [id(0x00000069), propget, helpcontext(0x09420069)]
        HRESULT ContinuationSeparator([out, retval] Range** prop);
        [id(0x0000006a), propget, helpcontext(0x0942006a)]
        HRESULT ContinuationNotice([out, retval] Range** prop);
        [id(00000000), helpcontext(0x09420000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Footnote** prop);
        [id(0x00000004), helpcontext(0x09420004)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Reference, 
                        [in, optional] VARIANT* Text, 
                        [out, retval] Footnote** prop);
        [id(0x00000005), helpcontext(0x09420005)]
        HRESULT Convert();
        [id(0x00000006), helpcontext(0x09420006)]
        HRESULT SwapWithEndnotes();
        [id(0x00000007), helpcontext(0x09420007)]
        HRESULT ResetSeparator();
        [id(0x00000008), helpcontext(0x09420008)]
        HRESULT ResetContinuationSeparator();
        [id(0x00000009), helpcontext(0x09420009)]
        HRESULT ResetContinuationNotice();
    };

    [
      odl,
      uuid(00020941-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000941),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Endnotes : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0941fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09410002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x094103e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09410064)]
        HRESULT Location([out, retval] WdEndnoteLocation* prop);
        [id(0x00000064), propput, helpcontext(0x09410064)]
        HRESULT Location([in] WdEndnoteLocation prop);
        [id(0x00000065), propget, helpcontext(0x09410065)]
        HRESULT NumberStyle([out, retval] WdNoteNumberStyle* prop);
        [id(0x00000065), propput, helpcontext(0x09410065)]
        HRESULT NumberStyle([in] WdNoteNumberStyle prop);
        [id(0x00000066), propget, helpcontext(0x09410066)]
        HRESULT StartingNumber([out, retval] long* prop);
        [id(0x00000066), propput, helpcontext(0x09410066)]
        HRESULT StartingNumber([in] long prop);
        [id(0x00000067), propget, helpcontext(0x09410067)]
        HRESULT NumberingRule([out, retval] WdNumberingRule* prop);
        [id(0x00000067), propput, helpcontext(0x09410067)]
        HRESULT NumberingRule([in] WdNumberingRule prop);
        [id(0x00000068), propget, helpcontext(0x09410068)]
        HRESULT Separator([out, retval] Range** prop);
        [id(0x00000069), propget, helpcontext(0x09410069)]
        HRESULT ContinuationSeparator([out, retval] Range** prop);
        [id(0x0000006a), propget, helpcontext(0x0941006a)]
        HRESULT ContinuationNotice([out, retval] Range** prop);
        [id(00000000), helpcontext(0x09410000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Endnote** prop);
        [id(0x00000004), helpcontext(0x09410004)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Reference, 
                        [in, optional] VARIANT* Text, 
                        [out, retval] Endnote** prop);
        [id(0x00000005), helpcontext(0x09410005)]
        HRESULT Convert();
        [id(0x00000006), helpcontext(0x09410006)]
        HRESULT SwapWithFootnotes();
        [id(0x00000007), helpcontext(0x09410007)]
        HRESULT ResetSeparator();
        [id(0x00000008), helpcontext(0x09410008)]
        HRESULT ResetContinuationSeparator();
        [id(0x00000009), helpcontext(0x09410009)]
        HRESULT ResetContinuationNotice();
    };

    [
      odl,
      uuid(00020940-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000940),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Comments : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0940fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09400002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x094003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), propget, helpcontext(0x094003eb)]
        HRESULT ShowBy([out, retval] BSTR* prop);
        [id(0x000003eb), propput, helpcontext(0x094003eb)]
        HRESULT ShowBy([in] BSTR prop);
        [id(00000000), helpcontext(0x09400000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Comment** prop);
        [id(0x00000004), helpcontext(0x09400004)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Text, 
                        [out, retval] Comment** prop);
    };

    [
      odl,
      uuid(0002093F-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000093f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Footnote : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093f03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093f03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093f03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000004), propget, helpcontext(0x093f0004)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000005), propget, helpcontext(0x093f0005)]
        HRESULT Reference([out, retval] Range** prop);
        [id(0x00000006), propget, helpcontext(0x093f0006)]
        HRESULT Index([out, retval] long* prop);
        [id(0x0000000a), helpcontext(0x093f000a)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(0002093E-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000093e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Endnote : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093e03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000004), propget, helpcontext(0x093e0004)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000005), propget, helpcontext(0x093e0005)]
        HRESULT Reference([out, retval] Range** prop);
        [id(0x00000006), propget, helpcontext(0x093e0006)]
        HRESULT Index([out, retval] long* prop);
        [id(0x0000000a), helpcontext(0x093e000a)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(0002093D-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000093d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Comment : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093d03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), propget, helpcontext(0x093d03eb)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x000003ec), propget, helpcontext(0x093d03ec)]
        HRESULT Reference([out, retval] Range** prop);
        [id(0x000003ed), propget, helpcontext(0x093d03ed)]
        HRESULT Scope([out, retval] Range** prop);
        [id(0x000003ee), propget, helpcontext(0x093d03ee)]
        HRESULT Index([out, retval] long* prop);
        [id(0x000003ef), propget, helpcontext(0x093d03ef)]
        HRESULT Author([out, retval] BSTR* prop);
        [id(0x000003ef), propput, helpcontext(0x093d03ef)]
        HRESULT Author([in] BSTR prop);
        [id(0x000003f0), propget, helpcontext(0x093d03f0)]
        HRESULT Initial([out, retval] BSTR* prop);
        [id(0x000003f0), propput, helpcontext(0x093d03f0)]
        HRESULT Initial([in] BSTR prop);
        [id(0x000003f1), propget, helpcontext(0x093d03f1)]
        HRESULT ShowTip([out, retval] VARIANT_BOOL* prop);
        [id(0x000003f1), propput, helpcontext(0x093d03f1)]
        HRESULT ShowTip([in] VARIANT_BOOL prop);
        [id(0x0000000a), helpcontext(0x093d000a)]
        HRESULT Delete();
        [id(0x000003f3), helpcontext(0x093d03f3)]
        HRESULT Edit();
        [id(0x000003f2), propget, helpcontext(0x093d03f2)]
        HRESULT Date([out, retval] DATE* prop);
        [id(0x000003f4), propget, helpcontext(0x093d03f4)]
        HRESULT IsInk([out, retval] VARIANT_BOOL* prop);
    };

    [
      odl,
      uuid(0002093C-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000093c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Borders : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093c03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x093cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x093c0001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x093c0002)]
        HRESULT Enable([out, retval] long* prop);
        [id(0x00000002), propput, helpcontext(0x093c0002)]
        HRESULT Enable([in] long prop);
        [id(0x00000004), propget, helpcontext(0x093c0004)]
        HRESULT DistanceFromTop([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x093c0004)]
        HRESULT DistanceFromTop([in] long prop);
        [id(0x00000005), propget, helpcontext(0x093c0005)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x093c0005)]
        HRESULT Shadow([in] VARIANT_BOOL prop);
        [id(0x00000006), propget, helpcontext(0x093c0006)]
        HRESULT InsideLineStyle([out, retval] WdLineStyle* prop);
        [id(0x00000006), propput, helpcontext(0x093c0006)]
        HRESULT InsideLineStyle([in] WdLineStyle prop);
        [id(0x00000007), propget, helpcontext(0x093c0007)]
        HRESULT OutsideLineStyle([out, retval] WdLineStyle* prop);
        [id(0x00000007), propput, helpcontext(0x093c0007)]
        HRESULT OutsideLineStyle([in] WdLineStyle prop);
        [id(0x00000008), propget, helpcontext(0x093c0008)]
        HRESULT InsideLineWidth([out, retval] WdLineWidth* prop);
        [id(0x00000008), propput, helpcontext(0x093c0008)]
        HRESULT InsideLineWidth([in] WdLineWidth prop);
        [id(0x00000009), propget, helpcontext(0x093c0009)]
        HRESULT OutsideLineWidth([out, retval] WdLineWidth* prop);
        [id(0x00000009), propput, helpcontext(0x093c0009)]
        HRESULT OutsideLineWidth([in] WdLineWidth prop);
        [id(0x0000000a), propget, helpcontext(0x093c000a)]
        HRESULT InsideColorIndex([out, retval] WdColorIndex* prop);
        [id(0x0000000a), propput, helpcontext(0x093c000a)]
        HRESULT InsideColorIndex([in] WdColorIndex prop);
        [id(0x0000000b), propget, helpcontext(0x093c000b)]
        HRESULT OutsideColorIndex([out, retval] WdColorIndex* prop);
        [id(0x0000000b), propput, helpcontext(0x093c000b)]
        HRESULT OutsideColorIndex([in] WdColorIndex prop);
        [id(0x00000014), propget, helpcontext(0x093c0014)]
        HRESULT DistanceFromLeft([out, retval] long* prop);
        [id(0x00000014), propput, helpcontext(0x093c0014)]
        HRESULT DistanceFromLeft([in] long prop);
        [id(0x00000015), propget, helpcontext(0x093c0015)]
        HRESULT DistanceFromBottom([out, retval] long* prop);
        [id(0x00000015), propput, helpcontext(0x093c0015)]
        HRESULT DistanceFromBottom([in] long prop);
        [id(0x00000016), propget, helpcontext(0x093c0016)]
        HRESULT DistanceFromRight([out, retval] long* prop);
        [id(0x00000016), propput, helpcontext(0x093c0016)]
        HRESULT DistanceFromRight([in] long prop);
        [id(0x00000017), propget, helpcontext(0x093c0017)]
        HRESULT AlwaysInFront([out, retval] VARIANT_BOOL* prop);
        [id(0x00000017), propput, helpcontext(0x093c0017)]
        HRESULT AlwaysInFront([in] VARIANT_BOOL prop);
        [id(0x00000018), propget, helpcontext(0x093c0018)]
        HRESULT SurroundHeader([out, retval] VARIANT_BOOL* prop);
        [id(0x00000018), propput, helpcontext(0x093c0018)]
        HRESULT SurroundHeader([in] VARIANT_BOOL prop);
        [id(0x00000019), propget, helpcontext(0x093c0019)]
        HRESULT SurroundFooter([out, retval] VARIANT_BOOL* prop);
        [id(0x00000019), propput, helpcontext(0x093c0019)]
        HRESULT SurroundFooter([in] VARIANT_BOOL prop);
        [id(0x0000001a), propget, helpcontext(0x093c001a)]
        HRESULT JoinBorders([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001a), propput, helpcontext(0x093c001a)]
        HRESULT JoinBorders([in] VARIANT_BOOL prop);
        [id(0x0000001b), propget, helpcontext(0x093c001b)]
        HRESULT HasHorizontal([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001c), propget, helpcontext(0x093c001c)]
        HRESULT HasVertical([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001d), propget, helpcontext(0x093c001d)]
        HRESULT DistanceFrom([out, retval] WdBorderDistanceFrom* prop);
        [id(0x0000001d), propput, helpcontext(0x093c001d)]
        HRESULT DistanceFrom([in] WdBorderDistanceFrom prop);
        [id(0x0000001e), propget, helpcontext(0x093c001e)]
        HRESULT EnableFirstPageInSection([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001e), propput, helpcontext(0x093c001e)]
        HRESULT EnableFirstPageInSection([in] VARIANT_BOOL prop);
        [id(0x0000001f), propget, helpcontext(0x093c001f)]
        HRESULT EnableOtherPagesInSection([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001f), propput, helpcontext(0x093c001f)]
        HRESULT EnableOtherPagesInSection([in] VARIANT_BOOL prop);
        [id(00000000), helpcontext(0x093c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] WdBorderType Index, 
                        [out, retval] Border** prop);
        [id(0x000007d0), helpcontext(0x093c07d0)]
        HRESULT ApplyPageBordersToAllSections();
        [id(0x00000020), propget, helpcontext(0x093c0020)]
        HRESULT InsideColor([out, retval] WdColor* prop);
        [id(0x00000020), propput, helpcontext(0x093c0020)]
        HRESULT InsideColor([in] WdColor prop);
        [id(0x00000021), propget, helpcontext(0x093c0021)]
        HRESULT OutsideColor([out, retval] WdColor* prop);
        [id(0x00000021), propput, helpcontext(0x093c0021)]
        HRESULT OutsideColor([in] WdColor prop);
    };

    [
      odl,
      uuid(0002093B-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000093b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Border : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093b03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x093b0000)]
        HRESULT Visible([out, retval] VARIANT_BOOL* prop);
        [id(00000000), propput, helpcontext(0x093b0000)]
        HRESULT Visible([in] VARIANT_BOOL prop);
        [id(0x00000001), propget, helpcontext(0x093b0001)]
        HRESULT ColorIndex([out, retval] WdColorIndex* prop);
        [id(0x00000001), propput, helpcontext(0x093b0001)]
        HRESULT ColorIndex([in] WdColorIndex prop);
        [id(0x00000002), propget, helpcontext(0x093b0002)]
        HRESULT Inside([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propget, helpcontext(0x093b0003)]
        HRESULT LineStyle([out, retval] WdLineStyle* prop);
        [id(0x00000003), propput, helpcontext(0x093b0003)]
        HRESULT LineStyle([in] WdLineStyle prop);
        [id(0x00000004), propget, helpcontext(0x093b0004)]
        HRESULT LineWidth([out, retval] WdLineWidth* prop);
        [id(0x00000004), propput, helpcontext(0x093b0004)]
        HRESULT LineWidth([in] WdLineWidth prop);
        [id(0x00000005), propget, helpcontext(0x093b0005)]
        HRESULT ArtStyle([out, retval] WdPageBorderArt* prop);
        [id(0x00000005), propput, helpcontext(0x093b0005)]
        HRESULT ArtStyle([in] WdPageBorderArt prop);
        [id(0x00000006), propget, helpcontext(0x093b0006)]
        HRESULT ArtWidth([out, retval] long* prop);
        [id(0x00000006), propput, helpcontext(0x093b0006)]
        HRESULT ArtWidth([in] long prop);
        [id(0x00000007), propget, helpcontext(0x093b0007)]
        HRESULT Color([out, retval] WdColor* prop);
        [id(0x00000007), propput, helpcontext(0x093b0007)]
        HRESULT Color([in] WdColor prop);
    };

    [
      odl,
      uuid(0002093A-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000093a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Shading : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093a03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x093a0001)]
        HRESULT ForegroundPatternColorIndex([out, retval] WdColorIndex* prop);
        [id(0x00000001), propput, helpcontext(0x093a0001)]
        HRESULT ForegroundPatternColorIndex([in] WdColorIndex prop);
        [id(0x00000002), propget, helpcontext(0x093a0002)]
        HRESULT BackgroundPatternColorIndex([out, retval] WdColorIndex* prop);
        [id(0x00000002), propput, helpcontext(0x093a0002)]
        HRESULT BackgroundPatternColorIndex([in] WdColorIndex prop);
        [id(0x00000003), propget, helpcontext(0x093a0003)]
        HRESULT Texture([out, retval] WdTextureIndex* prop);
        [id(0x00000003), propput, helpcontext(0x093a0003)]
        HRESULT Texture([in] WdTextureIndex prop);
        [id(0x00000004), propget, helpcontext(0x093a0004)]
        HRESULT ForegroundPatternColor([out, retval] WdColor* prop);
        [id(0x00000004), propput, helpcontext(0x093a0004)]
        HRESULT ForegroundPatternColor([in] WdColor prop);
        [id(0x00000005), propget, helpcontext(0x093a0005)]
        HRESULT BackgroundPatternColor([out, retval] WdColor* prop);
        [id(0x00000005), propput, helpcontext(0x093a0005)]
        HRESULT BackgroundPatternColor([in] WdColor prop);
    };

    [
      odl,
      uuid(00020939-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000939),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextRetrievalMode : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09390000)]
        HRESULT ViewType([out, retval] WdViewType* prop);
        [id(00000000), propput, helpcontext(0x09390000)]
        HRESULT ViewType([in] WdViewType prop);
        [id(0x00000001), propget, helpcontext(0x09390001)]
        HRESULT Duplicate([out, retval] TextRetrievalMode** prop);
        [id(0x00000002), propget, helpcontext(0x09390002)]
        HRESULT IncludeHiddenText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09390002)]
        HRESULT IncludeHiddenText([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x09390003)]
        HRESULT IncludeFieldCodes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09390003)]
        HRESULT IncludeFieldCodes([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020937-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000937),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AutoTextEntries : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093703e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0937fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09370001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09370000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] AutoTextEntry** prop);
        [id(0x00000065), helpcontext(0x09370065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in] Range* Range, 
                        [out, retval] AutoTextEntry** prop);
        [id(0x00000066), helpcontext(0x09370066)]
        HRESULT AppendToSpike(
                        [in] Range* Range, 
                        [out, retval] AutoTextEntry** prop);
    };

    [
      odl,
      uuid(00020936-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000936),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AutoTextEntry : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093603e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09360001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09360002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x09360002)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x09360003)]
        HRESULT StyleName([out, retval] BSTR* prop);
        [id(00000000), propget, helpcontext(0x09360000)]
        HRESULT Value([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x09360000)]
        HRESULT Value([in] BSTR prop);
        [id(0x00000065), helpcontext(0x09360065)]
        HRESULT Delete();
        [id(0x00000066), helpcontext(0x09360066)]
        HRESULT Insert(
                        [in] Range* Where, 
                        [in, optional] VARIANT* RichText, 
                        [out, retval] Range** prop);
    };

    [
      odl,
      uuid(00020935-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000935),
      dual,
      nonextensible,
      oleautomation
    ]
    interface System : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093503e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09350001)]
        HRESULT OperatingSystem([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x09350002)]
        HRESULT ProcessorType([out, retval] BSTR* prop);
        [id(0x00000003), propget, helpcontext(0x09350003)]
        HRESULT Version([out, retval] BSTR* prop);
        [id(0x00000004), propget, helpcontext(0x09350004)]
        HRESULT FreeDiskSpace([out, retval] long* prop);
        [id(0x00000005), propget, hidden, helpcontext(0x09350005)]
        HRESULT Country([out, retval] WdCountry* prop);
        [id(0x00000006), propget, helpcontext(0x09350006)]
        HRESULT LanguageDesignation([out, retval] BSTR* prop);
        [id(0x00000007), propget, helpcontext(0x09350007)]
        HRESULT HorizontalResolution([out, retval] long* prop);
        [id(0x00000008), propget, helpcontext(0x09350008)]
        HRESULT VerticalResolution([out, retval] long* prop);
        [id(0x00000009), propget, helpcontext(0x09350009)]
        HRESULT ProfileString(
                        [in] BSTR Section, 
                        [in] BSTR Key, 
                        [out, retval] BSTR* prop);
        [id(0x00000009), propput, helpcontext(0x09350009)]
        HRESULT ProfileString(
                        [in] BSTR Section, 
                        [in] BSTR Key, 
                        [in] BSTR prop);
        [id(0x0000000a), propget, helpcontext(0x0935000a)]
        HRESULT PrivateProfileString(
                        [in] BSTR FileName, 
                        [in] BSTR Section, 
                        [in] BSTR Key, 
                        [out, retval] BSTR* prop);
        [id(0x0000000a), propput, helpcontext(0x0935000a)]
        HRESULT PrivateProfileString(
                        [in] BSTR FileName, 
                        [in] BSTR Section, 
                        [in] BSTR Key, 
                        [in] BSTR prop);
        [id(0x0000000b), propget, helpcontext(0x0935000b)]
        HRESULT MathCoprocessorInstalled([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propget, helpcontext(0x0935000c)]
        HRESULT ComputerType([out, retval] BSTR* prop);
        [id(0x0000000e), propget, helpcontext(0x0935000e)]
        HRESULT MacintoshName([out, retval] BSTR* prop);
        [id(0x0000000f), propget, helpcontext(0x0935000f)]
        HRESULT QuickDrawInstalled([out, retval] VARIANT_BOOL* prop);
        [id(0x00000010), propget, helpcontext(0x09350010)]
        HRESULT Cursor([out, retval] WdCursorType* prop);
        [id(0x00000010), propput, helpcontext(0x09350010)]
        HRESULT Cursor([in] WdCursorType prop);
        [id(0x00000065), helpcontext(0x09350065)]
        HRESULT MSInfo();
        [id(0x00000066), helpcontext(0x09350066)]
        HRESULT Connect(
                        [in] BSTR Path, 
                        [in, optional] VARIANT* Drive, 
                        [in, optional] VARIANT* Password);
        [id(0x00000067), propget, helpcontext(0x09350067)]
        HRESULT CountryRegion([out, retval] WdCountry* prop);
    };

    [
      odl,
      uuid(00020933-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000933),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OLEFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093303e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x09330002)]
        HRESULT ClassType([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x09330002)]
        HRESULT ClassType([in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x09330003)]
        HRESULT DisplayAsIcon([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09330003)]
        HRESULT DisplayAsIcon([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09330007)]
        HRESULT IconName([out, retval] BSTR* prop);
        [id(0x00000007), propput, helpcontext(0x09330007)]
        HRESULT IconName([in] BSTR prop);
        [id(0x00000008), propget, helpcontext(0x09330008)]
        HRESULT IconPath([out, retval] BSTR* prop);
        [id(0x00000009), propget, helpcontext(0x09330009)]
        HRESULT IconIndex([out, retval] long* prop);
        [id(0x00000009), propput, helpcontext(0x09330009)]
        HRESULT IconIndex([in] long prop);
        [id(0x0000000a), propget, helpcontext(0x0933000a)]
        HRESULT IconLabel([out, retval] BSTR* prop);
        [id(0x0000000a), propput, helpcontext(0x0933000a)]
        HRESULT IconLabel([in] BSTR prop);
        [id(0x0000000c), propget, helpcontext(0x0933000c)]
        HRESULT Label([out, retval] BSTR* prop);
        [id(0x0000000e), propget, helpcontext(0x0933000e)]
        HRESULT Object([out, retval] IDispatch** prop);
        [id(0x00000016), propget, helpcontext(0x09330016)]
        HRESULT ProgID([out, retval] BSTR* prop);
        [id(0x00000068), helpcontext(0x09330068)]
        HRESULT Activate();
        [id(0x0000006a), helpcontext(0x0933006a)]
        HRESULT Edit();
        [id(0x0000006b), helpcontext(0x0933006b)]
        HRESULT Open();
        [id(0x0000006d), helpcontext(0x0933006d)]
        HRESULT DoVerb([in, optional] VARIANT* VerbIndex);
        [id(0x0000006e), helpcontext(0x0933006e)]
        HRESULT ConvertTo(
                        [in, optional] VARIANT* ClassType, 
                        [in, optional] VARIANT* DisplayAsIcon, 
                        [in, optional] VARIANT* IconFileName, 
                        [in, optional] VARIANT* IconIndex, 
                        [in, optional] VARIANT* IconLabel);
        [id(0x0000006f), helpcontext(0x0933006f)]
        HRESULT ActivateAs([in] BSTR ClassType);
        [id(0x00000070), propget, helpcontext(0x09330070)]
        HRESULT PreserveFormattingOnUpdate([out, retval] VARIANT_BOOL* prop);
        [id(0x00000070), propput, helpcontext(0x09330070)]
        HRESULT PreserveFormattingOnUpdate([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020931-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000931),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LinkFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093103e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09310001)]
        HRESULT AutoUpdate([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09310001)]
        HRESULT AutoUpdate([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09310004)]
        HRESULT SourceName([out, retval] BSTR* prop);
        [id(0x00000005), propget, helpcontext(0x09310005)]
        HRESULT SourcePath([out, retval] BSTR* prop);
        [id(0x0000000d), propget, helpcontext(0x0931000d)]
        HRESULT Locked([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), propput, helpcontext(0x0931000d)]
        HRESULT Locked([in] VARIANT_BOOL prop);
        [id(0x00000010), propget, helpcontext(0x09310010)]
        HRESULT Type([out, retval] WdLinkType* prop);
        [id(0x00000015), propget, helpcontext(0x09310015)]
        HRESULT SourceFullName([out, retval] BSTR* prop);
        [id(0x00000015), propput, helpcontext(0x09310015)]
        HRESULT SourceFullName([in] BSTR prop);
        [id(0x00000016), propget, helpcontext(0x09310016)]
        HRESULT SavePictureWithDocument([out, retval] VARIANT_BOOL* prop);
        [id(0x00000016), propput, helpcontext(0x09310016)]
        HRESULT SavePictureWithDocument([in] VARIANT_BOOL prop);
        [id(0x00000068), helpcontext(0x09310068)]
        HRESULT BreakLink();
        [id(0x00000069), helpcontext(0x09310069)]
        HRESULT Update();
    };

    [
      odl,
      uuid(000209A4-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009a4),
      hidden,
      dual,
      oleautomation
    ]
    interface _OLEControl : IDispatch {
        [id(0x80010103), propget, helpcontext(0x09a40103)]
        HRESULT Left([out, retval] int* prop);
        [id(0x80010103), propput, helpcontext(0x09a40103)]
        HRESULT Left([in] int prop);
        [id(0x80010104), propget, helpcontext(0x09a40104)]
        HRESULT Top([out, retval] int* prop);
        [id(0x80010104), propput, helpcontext(0x09a40104)]
        HRESULT Top([in] int prop);
        [id(0x80010105), propget, helpcontext(0x09a40105)]
        HRESULT Height([out, retval] int* prop);
        [id(0x80010105), propput, helpcontext(0x09a40105)]
        HRESULT Height([in] int prop);
        [id(0x80010106), propget, helpcontext(0x09a40106)]
        HRESULT Width([out, retval] int* prop);
        [id(0x80010106), propput, helpcontext(0x09a40106)]
        HRESULT Width([in] int prop);
        [id(0x80010000), propget, helpcontext(0x09a40000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x80010000), propput, helpcontext(0x09a40000)]
        HRESULT Name([in] BSTR prop);
        [id(0x80010107), propget, helpcontext(0x09a40107)]
        HRESULT Automation([out, retval] IDispatch** prop);
        [id(0x80010220), helpcontext(0x09a40220)]
        HRESULT Select();
        [id(0x80010228), helpcontext(0x09a40228)]
        HRESULT Copy();
        [id(0x80010229), helpcontext(0x09a40229)]
        HRESULT Cut();
        [id(0x80010250), helpcontext(0x09a40250)]
        HRESULT Delete();
        [id(0x80010251), helpcontext(0x09a40251)]
        HRESULT Activate();
        [id(0x80010bc3), propget, hidden, helpcontext(0x09a40bc3)]
        HRESULT AltHTML([out, retval] BSTR* prop);
        [id(0x80010bc3), propput, hidden, helpcontext(0x09a40bc3)]
        HRESULT AltHTML([in] BSTR prop);
    };

    [
      odl,
      uuid(00020930-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000930),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Fields : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09300001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09300002)]
        HRESULT Locked([out, retval] long* prop);
        [id(0x00000002), propput, helpcontext(0x09300002)]
        HRESULT Locked([in] long prop);
        [id(0xfffffffc), propget, helpcontext(0x0930fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x09300000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Field** prop);
        [id(0x00000064), helpcontext(0x09300064)]
        HRESULT ToggleShowCodes();
        [id(0x00000065), helpcontext(0x09300065)]
        HRESULT Update([out, retval] long* prop);
        [id(0x00000066), helpcontext(0x09300066)]
        HRESULT Unlink();
        [id(0x00000068), helpcontext(0x09300068)]
        HRESULT UpdateSource();
        [id(0x00000069), helpcontext(0x09300069)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Type, 
                        [in, optional] VARIANT* Text, 
                        [in, optional] VARIANT* PreserveFormatting, 
                        [out, retval] Field** prop);
    };

    [
      odl,
      uuid(0002092F-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000092f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Field : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092f03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092f03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092f03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x092f0000)]
        HRESULT Code([out, retval] Range** prop);
        [id(00000000), propput, helpcontext(0x092f0000)]
        HRESULT Code([in] Range* prop);
        [id(0x00000001), propget, helpcontext(0x092f0001)]
        HRESULT Type([out, retval] WdFieldType* prop);
        [id(0x00000002), propget, helpcontext(0x092f0002)]
        HRESULT Locked([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x092f0002)]
        HRESULT Locked([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x092f0003)]
        HRESULT Kind([out, retval] WdFieldKind* prop);
        [id(0x00000004), propget, helpcontext(0x092f0004)]
        HRESULT Result([out, retval] Range** prop);
        [id(0x00000004), propput, helpcontext(0x092f0004)]
        HRESULT Result([in] Range* prop);
        [id(0x00000005), propget, helpcontext(0x092f0005)]
        HRESULT Data([out, retval] BSTR* prop);
        [id(0x00000005), propput, helpcontext(0x092f0005)]
        HRESULT Data([in] BSTR prop);
        [id(0x00000006), propget, helpcontext(0x092f0006)]
        HRESULT Next([out, retval] Field** prop);
        [id(0x00000007), propget, helpcontext(0x092f0007)]
        HRESULT Previous([out, retval] Field** prop);
        [id(0x00000008), propget, helpcontext(0x092f0008)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000009), propget, helpcontext(0x092f0009)]
        HRESULT ShowCodes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x092f0009)]
        HRESULT ShowCodes([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x092f000a)]
        HRESULT LinkFormat([out, retval] LinkFormat** prop);
        [id(0x0000000b), propget, helpcontext(0x092f000b)]
        HRESULT OLEFormat([out, retval] OLEFormat** prop);
        [id(0x0000000c), propget, helpcontext(0x092f000c)]
        HRESULT InlineShape([out, retval] InlineShape** prop);
        [id(0x0000ffff), helpcontext(0x092fffff)]
        HRESULT Select();
        [id(0x00000065), helpcontext(0x092f0065)]
        HRESULT Update([out, retval] VARIANT_BOOL* prop);
        [id(0x00000066), helpcontext(0x092f0066)]
        HRESULT Unlink();
        [id(0x00000067), helpcontext(0x092f0067)]
        HRESULT UpdateSource();
        [id(0x00000068), helpcontext(0x092f0068)]
        HRESULT DoClick();
        [id(0x00000069), helpcontext(0x092f0069)]
        HRESULT Copy();
        [id(0x0000006a), helpcontext(0x092f006a)]
        HRESULT Cut();
        [id(0x0000006b), helpcontext(0x092f006b)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(0002092E-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000092e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Browser : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092e03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x092e0001)]
        HRESULT Target([out, retval] WdBrowseTarget* prop);
        [id(0x00000001), propput, helpcontext(0x092e0001)]
        HRESULT Target([in] WdBrowseTarget prop);
        [id(0x00000065), helpcontext(0x092e0065)]
        HRESULT Next();
        [id(0x00000066), helpcontext(0x092e0066)]
        HRESULT Previous();
    };

    [
      odl,
      uuid(0002092D-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000092d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Styles : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092d03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x092dfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x092d0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x092d0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Style** prop);
        [id(0x00000064), helpcontext(0x092d0064)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Type, 
                        [out, retval] Style** prop);
    };

    [
      odl,
      uuid(0002092C-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000092c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Style : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092c03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x092c0000)]
        HRESULT NameLocal([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x092c0000)]
        HRESULT NameLocal([in] BSTR prop);
        [id(0x00000001), propget, helpcontext(0x092c0001)]
        HRESULT BaseStyle([out, retval] VARIANT* prop);
        [id(0x00000001), propput, helpcontext(0x092c0001)]
        HRESULT BaseStyle([in] VARIANT* prop);
        [id(0x00000002), propget, helpcontext(0x092c0002)]
        HRESULT Description([out, retval] BSTR* prop);
        [id(0x00000003), propget, helpcontext(0x092c0003)]
        HRESULT Type([out, retval] WdStyleType* prop);
        [id(0x00000004), propget, helpcontext(0x092c0004)]
        HRESULT BuiltIn([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propget, helpcontext(0x092c0005)]
        HRESULT NextParagraphStyle([out, retval] VARIANT* prop);
        [id(0x00000005), propput, helpcontext(0x092c0005)]
        HRESULT NextParagraphStyle([in] VARIANT* prop);
        [id(0x00000006), propget, helpcontext(0x092c0006)]
        HRESULT InUse([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propget, helpcontext(0x092c0007)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000008), propget, helpcontext(0x092c0008)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x00000008), propput, helpcontext(0x092c0008)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000009), propget, helpcontext(0x092c0009)]
        HRESULT ParagraphFormat([out, retval] ParagraphFormat** prop);
        [id(0x00000009), propput, helpcontext(0x092c0009)]
        HRESULT ParagraphFormat([in] ParagraphFormat* prop);
        [id(0x0000000a), propget, helpcontext(0x092c000a)]
        HRESULT Font([out, retval] Font** prop);
        [id(0x0000000a), propput, helpcontext(0x092c000a)]
        HRESULT Font([in] Font* prop);
        [id(0x0000000b), propget, helpcontext(0x092c000b)]
        HRESULT Frame([out, retval] Frame** prop);
        [id(0x0000000c), propget, helpcontext(0x092c000c)]
        HRESULT LanguageID([out, retval] WdLanguageID* prop);
        [id(0x0000000c), propput, helpcontext(0x092c000c)]
        HRESULT LanguageID([in] WdLanguageID prop);
        [id(0x0000000d), propget, helpcontext(0x092c000d)]
        HRESULT AutomaticallyUpdate([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), propput, helpcontext(0x092c000d)]
        HRESULT AutomaticallyUpdate([in] VARIANT_BOOL prop);
        [id(0x0000000e), propget, helpcontext(0x092c000e)]
        HRESULT ListTemplate([out, retval] ListTemplate** prop);
        [id(0x0000000f), propget, helpcontext(0x092c000f)]
        HRESULT ListLevelNumber([out, retval] long* prop);
        [id(0x00000010), propget, helpcontext(0x092c0010)]
        HRESULT LanguageIDFarEast([out, retval] WdLanguageID* prop);
        [id(0x00000010), propput, helpcontext(0x092c0010)]
        HRESULT LanguageIDFarEast([in] WdLanguageID prop);
        [id(0x00000011), propget, hidden, helpcontext(0x092c0011)]
        HRESULT Hidden([out, retval] VARIANT_BOOL* prop);
        [id(0x00000011), propput, hidden, helpcontext(0x092c0011)]
        HRESULT Hidden([in] VARIANT_BOOL prop);
        [id(0x00000064), helpcontext(0x092c0064)]
        HRESULT Delete();
        [id(0x00000065), helpcontext(0x092c0065)]
        HRESULT LinkToListTemplate(
                        [in] ListTemplate* ListTemplate, 
                        [in, optional] VARIANT* ListLevelNumber);
        [id(0x00000012), propget, helpcontext(0x092c0012)]
        HRESULT NoProofing([out, retval] long* prop);
        [id(0x00000012), propput, helpcontext(0x092c0012)]
        HRESULT NoProofing([in] long prop);
        [id(0x00000068), propget, helpcontext(0x092c0068)]
        HRESULT LinkStyle([out, retval] VARIANT* prop);
        [id(0x00000068), propput, helpcontext(0x092c0068)]
        HRESULT LinkStyle([in] VARIANT* prop);
        [id(0x00000013), propget, hidden, helpcontext(0x092c0013)]
        HRESULT Visibility([out, retval] VARIANT_BOOL* prop);
        [id(0x00000013), propput, hidden, helpcontext(0x092c0013)]
        HRESULT Visibility([in] VARIANT_BOOL prop);
        [id(0x00000014), propget, helpcontext(0x092c0014)]
        HRESULT NoSpaceBetweenParagraphsOfSameStyle([out, retval] VARIANT_BOOL* prop);
        [id(0x00000014), propput, helpcontext(0x092c0014)]
        HRESULT NoSpaceBetweenParagraphsOfSameStyle([in] VARIANT_BOOL prop);
        [id(0x00000015), propget, helpcontext(0x092c0015)]
        HRESULT Table([out, retval] TableStyle** prop);
        [id(0x00000016), propget, helpcontext(0x092c0016)]
        HRESULT Locked([out, retval] VARIANT_BOOL* prop);
        [id(0x00000016), propput, helpcontext(0x092c0016)]
        HRESULT Locked([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(0002092B-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000092b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Frames : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092b03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x092bfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x092b0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x092b0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Frame** prop);
        [id(0x00000064), helpcontext(0x092b0064)]
        HRESULT Add(
                        [in] Range* Range, 
                        [out, retval] Frame** prop);
        [id(0x00000065), helpcontext(0x092b0065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(0002092A-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000092a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Frame : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092a03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x092a0001)]
        HRESULT HeightRule([out, retval] WdFrameSizeRule* prop);
        [id(0x00000001), propput, helpcontext(0x092a0001)]
        HRESULT HeightRule([in] WdFrameSizeRule prop);
        [id(0x00000002), propget, helpcontext(0x092a0002)]
        HRESULT WidthRule([out, retval] WdFrameSizeRule* prop);
        [id(0x00000002), propput, helpcontext(0x092a0002)]
        HRESULT WidthRule([in] WdFrameSizeRule prop);
        [id(0x00000003), propget, helpcontext(0x092a0003)]
        HRESULT HorizontalDistanceFromText([out, retval] int* prop);
        [id(0x00000003), propput, helpcontext(0x092a0003)]
        HRESULT HorizontalDistanceFromText([in] int prop);
        [id(0x00000004), propget, helpcontext(0x092a0004)]
        HRESULT Height([out, retval] int* prop);
        [id(0x00000004), propput, helpcontext(0x092a0004)]
        HRESULT Height([in] int prop);
        [id(0x00000005), propget, helpcontext(0x092a0005)]
        HRESULT HorizontalPosition([out, retval] int* prop);
        [id(0x00000005), propput, helpcontext(0x092a0005)]
        HRESULT HorizontalPosition([in] int prop);
        [id(0x00000006), propget, helpcontext(0x092a0006)]
        HRESULT LockAnchor([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x092a0006)]
        HRESULT LockAnchor([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x092a0007)]
        HRESULT RelativeHorizontalPosition([out, retval] WdRelativeHorizontalPosition* prop);
        [id(0x00000007), propput, helpcontext(0x092a0007)]
        HRESULT RelativeHorizontalPosition([in] WdRelativeHorizontalPosition prop);
        [id(0x00000008), propget, helpcontext(0x092a0008)]
        HRESULT RelativeVerticalPosition([out, retval] WdRelativeVerticalPosition* prop);
        [id(0x00000008), propput, helpcontext(0x092a0008)]
        HRESULT RelativeVerticalPosition([in] WdRelativeVerticalPosition prop);
        [id(0x00000009), propget, helpcontext(0x092a0009)]
        HRESULT VerticalDistanceFromText([out, retval] int* prop);
        [id(0x00000009), propput, helpcontext(0x092a0009)]
        HRESULT VerticalDistanceFromText([in] int prop);
        [id(0x0000000a), propget, helpcontext(0x092a000a)]
        HRESULT VerticalPosition([out, retval] int* prop);
        [id(0x0000000a), propput, helpcontext(0x092a000a)]
        HRESULT VerticalPosition([in] int prop);
        [id(0x0000000b), propget, helpcontext(0x092a000b)]
        HRESULT Width([out, retval] int* prop);
        [id(0x0000000b), propput, helpcontext(0x092a000b)]
        HRESULT Width([in] int prop);
        [id(0x0000000c), propget, helpcontext(0x092a000c)]
        HRESULT TextWrap([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propput, helpcontext(0x092a000c)]
        HRESULT TextWrap([in] VARIANT_BOOL prop);
        [id(0x0000000d), propget, helpcontext(0x092a000d)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x0000044c), propget, helpcontext(0x092a044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x092a044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x0000000f), propget, helpcontext(0x092a000f)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000064), helpcontext(0x092a0064)]
        HRESULT Delete();
        [id(0x0000ffff), helpcontext(0x092affff)]
        HRESULT Select();
        [id(0x00000065), helpcontext(0x092a0065)]
        HRESULT Copy();
        [id(0x00000066), helpcontext(0x092a0066)]
        HRESULT Cut();
    };

    [
      odl,
      uuid(00020929-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000929),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FormFields : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09290001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09290002)]
        HRESULT Shaded([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09290002)]
        HRESULT Shaded([in] VARIANT_BOOL prop);
        [id(0xfffffffc), propget, helpcontext(0x0929fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x09290000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] FormField** prop);
        [id(0x00000065), helpcontext(0x09290065)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in] WdFieldType Type, 
                        [out, retval] FormField** prop);
    };

    [
      odl,
      uuid(00020928-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000928),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FormField : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092803e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09280000)]
        HRESULT Type([out, retval] WdFieldType* prop);
        [id(0x00000002), propget, helpcontext(0x09280002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x09280002)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x09280003)]
        HRESULT EntryMacro([out, retval] BSTR* prop);
        [id(0x00000003), propput, helpcontext(0x09280003)]
        HRESULT EntryMacro([in] BSTR prop);
        [id(0x00000004), propget, helpcontext(0x09280004)]
        HRESULT ExitMacro([out, retval] BSTR* prop);
        [id(0x00000004), propput, helpcontext(0x09280004)]
        HRESULT ExitMacro([in] BSTR prop);
        [id(0x00000005), propget, helpcontext(0x09280005)]
        HRESULT OwnHelp([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x09280005)]
        HRESULT OwnHelp([in] VARIANT_BOOL prop);
        [id(0x00000006), propget, helpcontext(0x09280006)]
        HRESULT OwnStatus([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x09280006)]
        HRESULT OwnStatus([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09280007)]
        HRESULT HelpText([out, retval] BSTR* prop);
        [id(0x00000007), propput, helpcontext(0x09280007)]
        HRESULT HelpText([in] BSTR prop);
        [id(0x00000008), propget, helpcontext(0x09280008)]
        HRESULT StatusText([out, retval] BSTR* prop);
        [id(0x00000008), propput, helpcontext(0x09280008)]
        HRESULT StatusText([in] BSTR prop);
        [id(0x00000009), propget, helpcontext(0x09280009)]
        HRESULT Enabled([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x09280009)]
        HRESULT Enabled([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x0928000a)]
        HRESULT Result([out, retval] BSTR* prop);
        [id(0x0000000a), propput, helpcontext(0x0928000a)]
        HRESULT Result([in] BSTR prop);
        [id(0x0000000b), propget, helpcontext(0x0928000b)]
        HRESULT TextInput([out, retval] TextInput** prop);
        [id(0x0000000c), propget, helpcontext(0x0928000c)]
        HRESULT CheckBox([out, retval] CheckBox** prop);
        [id(0x0000000d), propget, helpcontext(0x0928000d)]
        HRESULT DropDown([out, retval] DropDown** prop);
        [id(0x0000000e), propget, helpcontext(0x0928000e)]
        HRESULT Next([out, retval] FormField** prop);
        [id(0x0000000f), propget, helpcontext(0x0928000f)]
        HRESULT Previous([out, retval] FormField** prop);
        [id(0x00000010), propget, helpcontext(0x09280010)]
        HRESULT CalculateOnExit([out, retval] VARIANT_BOOL* prop);
        [id(0x00000010), propput, helpcontext(0x09280010)]
        HRESULT CalculateOnExit([in] VARIANT_BOOL prop);
        [id(0x00000011), propget, helpcontext(0x09280011)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x0000ffff), helpcontext(0x0928ffff)]
        HRESULT Select();
        [id(0x00000065), helpcontext(0x09280065)]
        HRESULT Copy();
        [id(0x00000066), helpcontext(0x09280066)]
        HRESULT Cut();
        [id(0x00000067), helpcontext(0x09280067)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(00020927-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000927),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextInput : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092703e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09270000)]
        HRESULT Valid([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propget, helpcontext(0x09270001)]
        HRESULT Default([out, retval] BSTR* prop);
        [id(0x00000001), propput, helpcontext(0x09270001)]
        HRESULT Default([in] BSTR prop);
        [id(0x00000002), propget, helpcontext(0x09270002)]
        HRESULT Type([out, retval] WdTextFormFieldType* prop);
        [id(0x00000003), propget, helpcontext(0x09270003)]
        HRESULT Format([out, retval] BSTR* prop);
        [id(0x00000004), propget, helpcontext(0x09270004)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x09270004)]
        HRESULT Width([in] long prop);
        [id(0x00000065), helpcontext(0x09270065)]
        HRESULT Clear();
        [id(0x00000066), helpcontext(0x09270066)]
        HRESULT EditType(
                        [in] WdTextFormFieldType Type, 
                        [in, optional] VARIANT* Default, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* Enabled);
    };

    [
      odl,
      uuid(00020926-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000926),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CheckBox : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092603e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09260000)]
        HRESULT Valid([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propget, helpcontext(0x09260001)]
        HRESULT AutoSize([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09260001)]
        HRESULT AutoSize([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x09260002)]
        HRESULT Size([out, retval] int* prop);
        [id(0x00000002), propput, helpcontext(0x09260002)]
        HRESULT Size([in] int prop);
        [id(0x00000003), propget, helpcontext(0x09260003)]
        HRESULT Default([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09260003)]
        HRESULT Default([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09260004)]
        HRESULT Value([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09260004)]
        HRESULT Value([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020925-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000925),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DropDown : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092503e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09250000)]
        HRESULT Valid([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propget, helpcontext(0x09250001)]
        HRESULT Default([out, retval] long* prop);
        [id(0x00000001), propput, helpcontext(0x09250001)]
        HRESULT Default([in] long prop);
        [id(0x00000002), propget, helpcontext(0x09250002)]
        HRESULT Value([out, retval] long* prop);
        [id(0x00000002), propput, helpcontext(0x09250002)]
        HRESULT Value([in] long prop);
        [id(0x00000003), propget, helpcontext(0x09250003)]
        HRESULT ListEntries([out, retval] ListEntries** prop);
    };

    [
      odl,
      uuid(00020924-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000924),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListEntries : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092403e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0924fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09240001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09240000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] ListEntry** prop);
        [id(0x00000065), helpcontext(0x09240065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Index, 
                        [out, retval] ListEntry** prop);
        [id(0x00000066), helpcontext(0x09240066)]
        HRESULT Clear();
    };

    [
      odl,
      uuid(00020923-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000923),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListEntry : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092303e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09230001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09230002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x09230002)]
        HRESULT Name([in] BSTR prop);
        [id(0x0000000b), helpcontext(0x0923000b)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(00020922-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000922),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TablesOfFigures : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092203e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0922fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09220001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09220002)]
        HRESULT Format([out, retval] WdTofFormat* prop);
        [id(0x00000002), propput, helpcontext(0x09220002)]
        HRESULT Format([in] WdTofFormat prop);
        [id(00000000), helpcontext(0x09220000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] TableOfFigures** prop);
        [id(0x00000064), hidden, helpcontext(0x09220064)]
        HRESULT AddOld(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Caption, 
                        [in, optional] VARIANT* IncludeLabel, 
                        [in, optional] VARIANT* UseHeadingStyles, 
                        [in, optional] VARIANT* UpperHeadingLevel, 
                        [in, optional] VARIANT* LowerHeadingLevel, 
                        [in, optional] VARIANT* UseFields, 
                        [in, optional] VARIANT* TableID, 
                        [in, optional] VARIANT* RightAlignPageNumbers, 
                        [in, optional] VARIANT* IncludePageNumbers, 
                        [in, optional] VARIANT* AddedStyles, 
                        [out, retval] TableOfFigures** prop);
        [id(0x00000065), helpcontext(0x09220065)]
        HRESULT MarkEntry(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Entry, 
                        [in, optional] VARIANT* EntryAutoText, 
                        [in, optional] VARIANT* TableID, 
                        [in, optional] VARIANT* Level, 
                        [out, retval] Field** prop);
        [id(0x000001bc), helpcontext(0x092201bc)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Caption, 
                        [in, optional] VARIANT* IncludeLabel, 
                        [in, optional] VARIANT* UseHeadingStyles, 
                        [in, optional] VARIANT* UpperHeadingLevel, 
                        [in, optional] VARIANT* LowerHeadingLevel, 
                        [in, optional] VARIANT* UseFields, 
                        [in, optional] VARIANT* TableID, 
                        [in, optional] VARIANT* RightAlignPageNumbers, 
                        [in, optional] VARIANT* IncludePageNumbers, 
                        [in, optional] VARIANT* AddedStyles, 
                        [in, optional] VARIANT* UseHyperlinks, 
                        [in, optional] VARIANT* HidePageNumbersInWeb, 
                        [out, retval] TableOfFigures** prop);
    };

    [
      odl,
      uuid(00020921-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000921),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TableOfFigures : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092103e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09210001)]
        HRESULT Caption([out, retval] BSTR* prop);
        [id(0x00000001), propput, helpcontext(0x09210001)]
        HRESULT Caption([in] BSTR prop);
        [id(0x00000002), propget, helpcontext(0x09210002)]
        HRESULT IncludeLabel([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09210002)]
        HRESULT IncludeLabel([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x09210003)]
        HRESULT RightAlignPageNumbers([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09210003)]
        HRESULT RightAlignPageNumbers([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09210004)]
        HRESULT UseHeadingStyles([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09210004)]
        HRESULT UseHeadingStyles([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x09210005)]
        HRESULT LowerHeadingLevel([out, retval] long* prop);
        [id(0x00000005), propput, helpcontext(0x09210005)]
        HRESULT LowerHeadingLevel([in] long prop);
        [id(0x00000006), propget, helpcontext(0x09210006)]
        HRESULT UpperHeadingLevel([out, retval] long* prop);
        [id(0x00000006), propput, helpcontext(0x09210006)]
        HRESULT UpperHeadingLevel([in] long prop);
        [id(0x00000007), propget, helpcontext(0x09210007)]
        HRESULT IncludePageNumbers([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propput, helpcontext(0x09210007)]
        HRESULT IncludePageNumbers([in] VARIANT_BOOL prop);
        [id(0x00000008), propget, helpcontext(0x09210008)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000009), propget, helpcontext(0x09210009)]
        HRESULT UseFields([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x09210009)]
        HRESULT UseFields([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x0921000a)]
        HRESULT TableID([out, retval] BSTR* prop);
        [id(0x0000000a), propput, helpcontext(0x0921000a)]
        HRESULT TableID([in] BSTR prop);
        [id(0x0000000b), propget, helpcontext(0x0921000b)]
        HRESULT HeadingStyles([out, retval] HeadingStyles** prop);
        [id(0x0000000c), propget, helpcontext(0x0921000c)]
        HRESULT TabLeader([out, retval] WdTabLeader* prop);
        [id(0x0000000c), propput, helpcontext(0x0921000c)]
        HRESULT TabLeader([in] WdTabLeader prop);
        [id(0x00000064), helpcontext(0x09210064)]
        HRESULT Delete();
        [id(0x00000065), helpcontext(0x09210065)]
        HRESULT UpdatePageNumbers();
        [id(0x00000066), helpcontext(0x09210066)]
        HRESULT Update();
        [id(0x0000000d), propget, helpcontext(0x0921000d)]
        HRESULT UseHyperlinks([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), propput, helpcontext(0x0921000d)]
        HRESULT UseHyperlinks([in] VARIANT_BOOL prop);
        [id(0x0000000e), propget, helpcontext(0x0921000e)]
        HRESULT HidePageNumbersInWeb([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000e), propput, helpcontext(0x0921000e)]
        HRESULT HidePageNumbersInWeb([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020920-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000920),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMerge : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09200001)]
        HRESULT MainDocumentType([out, retval] WdMailMergeMainDocType* prop);
        [id(0x00000001), propput, helpcontext(0x09200001)]
        HRESULT MainDocumentType([in] WdMailMergeMainDocType prop);
        [id(0x00000002), propget, helpcontext(0x09200002)]
        HRESULT State([out, retval] WdMailMergeState* prop);
        [id(0x00000003), propget, helpcontext(0x09200003)]
        HRESULT Destination([out, retval] WdMailMergeDestination* prop);
        [id(0x00000003), propput, helpcontext(0x09200003)]
        HRESULT Destination([in] WdMailMergeDestination prop);
        [id(0x00000004), propget, helpcontext(0x09200004)]
        HRESULT DataSource([out, retval] MailMergeDataSource** prop);
        [id(0x00000005), propget, helpcontext(0x09200005)]
        HRESULT Fields([out, retval] MailMergeFields** prop);
        [id(0x00000006), propget, helpcontext(0x09200006)]
        HRESULT ViewMailMergeFieldCodes([out, retval] long* prop);
        [id(0x00000006), propput, helpcontext(0x09200006)]
        HRESULT ViewMailMergeFieldCodes([in] long prop);
        [id(0x00000007), propget, helpcontext(0x09200007)]
        HRESULT SuppressBlankLines([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propput, helpcontext(0x09200007)]
        HRESULT SuppressBlankLines([in] VARIANT_BOOL prop);
        [id(0x00000008), propget, helpcontext(0x09200008)]
        HRESULT MailAsAttachment([out, retval] VARIANT_BOOL* prop);
        [id(0x00000008), propput, helpcontext(0x09200008)]
        HRESULT MailAsAttachment([in] VARIANT_BOOL prop);
        [id(0x00000009), propget, helpcontext(0x09200009)]
        HRESULT MailAddressFieldName([out, retval] BSTR* prop);
        [id(0x00000009), propput, helpcontext(0x09200009)]
        HRESULT MailAddressFieldName([in] BSTR prop);
        [id(0x0000000a), propget, helpcontext(0x0920000a)]
        HRESULT MailSubject([out, retval] BSTR* prop);
        [id(0x0000000a), propput, helpcontext(0x0920000a)]
        HRESULT MailSubject([in] BSTR prop);
        [id(0x00000065), helpcontext(0x09200065)]
        HRESULT CreateDataSource(
                        [in, optional] VARIANT* Name, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* HeaderRecord, 
                        [in, optional] VARIANT* MSQuery, 
                        [in, optional] VARIANT* SQLStatement, 
                        [in, optional] VARIANT* SQLStatement1, 
                        [in, optional] VARIANT* Connection, 
                        [in, optional] VARIANT* LinkToSource);
        [id(0x00000066), helpcontext(0x09200066)]
        HRESULT CreateHeaderSource(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* HeaderRecord);
        [id(0x00000067), hidden, helpcontext(0x09200067)]
        HRESULT OpenDataSource2000(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* LinkToSource, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* Connection, 
                        [in, optional] VARIANT* SQLStatement, 
                        [in, optional] VARIANT* SQLStatement1);
        [id(0x00000068), hidden, helpcontext(0x09200068)]
        HRESULT OpenHeaderSource2000(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate);
        [id(0x00000069), helpcontext(0x09200069)]
        HRESULT Execute([in, optional] VARIANT* Pause);
        [id(0x0000006a), helpcontext(0x0920006a)]
        HRESULT Check();
        [id(0x0000006b), helpcontext(0x0920006b)]
        HRESULT EditDataSource();
        [id(0x0000006c), helpcontext(0x0920006c)]
        HRESULT EditHeaderSource();
        [id(0x0000006d), helpcontext(0x0920006d)]
        HRESULT EditMainDocument();
        [id(0x0000006f), hidden, helpcontext(0x0920006f)]
        HRESULT UseAddressBook([in] BSTR Type);
        [id(0x0000000b), propget, helpcontext(0x0920000b)]
        HRESULT HighlightMergeFields([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000b), propput, helpcontext(0x0920000b)]
        HRESULT HighlightMergeFields([in] VARIANT_BOOL prop);
        [id(0x0000000c), propget, helpcontext(0x0920000c)]
        HRESULT MailFormat([out, retval] WdMailMergeMailFormat* prop);
        [id(0x0000000c), propput, helpcontext(0x0920000c)]
        HRESULT MailFormat([in] WdMailMergeMailFormat prop);
        [id(0x0000000d), propget, helpcontext(0x0920000d)]
        HRESULT ShowSendToCustom([out, retval] BSTR* prop);
        [id(0x0000000d), propput, helpcontext(0x0920000d)]
        HRESULT ShowSendToCustom([in] BSTR prop);
        [id(0x0000000e), propget, helpcontext(0x0920000e)]
        HRESULT WizardState([out, retval] long* prop);
        [id(0x0000000e), propput, helpcontext(0x0920000e)]
        HRESULT WizardState([in] long prop);
        [id(0x00000070), helpcontext(0x09200070)]
        HRESULT OpenDataSource(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* LinkToSource, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* Connection, 
                        [in, optional] VARIANT* SQLStatement, 
                        [in, optional] VARIANT* SQLStatement1, 
                        [in, optional] VARIANT* OpenExclusive, 
                        [in, optional] VARIANT* SubType);
        [id(0x00000071), helpcontext(0x09200071)]
        HRESULT OpenHeaderSource(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* OpenExclusive);
        [id(0x00000072), helpcontext(0x09200072)]
        HRESULT ShowWizard(
                        [in] VARIANT* InitialState, 
                        [in, optional] VARIANT* ShowDocumentStep, 
                        [in, optional] VARIANT* ShowTemplateStep, 
                        [in, optional] VARIANT* ShowDataStep, 
                        [in, optional] VARIANT* ShowWriteStep, 
                        [in, optional] VARIANT* ShowPreviewStep, 
                        [in, optional] VARIANT* ShowMergeStep);
    };

    [
      odl,
      uuid(0002091F-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000091f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMergeFields : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091f03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091f03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091f03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x091ffffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x091f0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x091f0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] MailMergeField** prop);
        [id(0x00000065), helpcontext(0x091f0065)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in] BSTR Name, 
                        [out, retval] MailMergeField** prop);
        [id(0x00000066), helpcontext(0x091f0066)]
        HRESULT AddAsk(
                        [in] Range* Range, 
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Prompt, 
                        [in, optional] VARIANT* DefaultAskText, 
                        [in, optional] VARIANT* AskOnce, 
                        [out, retval] MailMergeField** prop);
        [id(0x00000067), helpcontext(0x091f0067)]
        HRESULT AddFillIn(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Prompt, 
                        [in, optional] VARIANT* DefaultFillInText, 
                        [in, optional] VARIANT* AskOnce, 
                        [out, retval] MailMergeField** prop);
        [id(0x00000068), helpcontext(0x091f0068)]
        HRESULT AddIf(
                        [in] Range* Range, 
                        [in] BSTR MergeField, 
                        [in] WdMailMergeComparison Comparison, 
                        [in, optional] VARIANT* CompareTo, 
                        [in, optional] VARIANT* TrueAutoText, 
                        [in, optional] VARIANT* TrueText, 
                        [in, optional] VARIANT* FalseAutoText, 
                        [in, optional] VARIANT* FalseText, 
                        [out, retval] MailMergeField** prop);
        [id(0x00000069), helpcontext(0x091f0069)]
        HRESULT AddMergeRec(
                        [in] Range* Range, 
                        [out, retval] MailMergeField** prop);
        [id(0x0000006a), helpcontext(0x091f006a)]
        HRESULT AddMergeSeq(
                        [in] Range* Range, 
                        [out, retval] MailMergeField** prop);
        [id(0x0000006b), helpcontext(0x091f006b)]
        HRESULT AddNext(
                        [in] Range* Range, 
                        [out, retval] MailMergeField** prop);
        [id(0x0000006c), helpcontext(0x091f006c)]
        HRESULT AddNextIf(
                        [in] Range* Range, 
                        [in] BSTR MergeField, 
                        [in] WdMailMergeComparison Comparison, 
                        [in, optional] VARIANT* CompareTo, 
                        [out, retval] MailMergeField** prop);
        [id(0x0000006d), helpcontext(0x091f006d)]
        HRESULT AddSet(
                        [in] Range* Range, 
                        [in] BSTR Name, 
                        [in, optional] VARIANT* ValueText, 
                        [in, optional] VARIANT* ValueAutoText, 
                        [out, retval] MailMergeField** prop);
        [id(0x0000006e), helpcontext(0x091f006e)]
        HRESULT AddSkipIf(
                        [in] Range* Range, 
                        [in] BSTR MergeField, 
                        [in] WdMailMergeComparison Comparison, 
                        [in, optional] VARIANT* CompareTo, 
                        [out, retval] MailMergeField** prop);
    };

    [
      odl,
      uuid(0002091E-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000091e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMergeField : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091e03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x091e0000)]
        HRESULT Type([out, retval] WdFieldType* prop);
        [id(0x00000003), propget, helpcontext(0x091e0003)]
        HRESULT Locked([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x091e0003)]
        HRESULT Locked([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x091e0005)]
        HRESULT Code([out, retval] Range** prop);
        [id(0x00000005), propput, helpcontext(0x091e0005)]
        HRESULT Code([in] Range* prop);
        [id(0x00000008), propget, helpcontext(0x091e0008)]
        HRESULT Next([out, retval] MailMergeField** prop);
        [id(0x00000009), propget, helpcontext(0x091e0009)]
        HRESULT Previous([out, retval] MailMergeField** prop);
        [id(0x0000ffff), helpcontext(0x091effff)]
        HRESULT Select();
        [id(0x00000069), helpcontext(0x091e0069)]
        HRESULT Copy();
        [id(0x0000006a), helpcontext(0x091e006a)]
        HRESULT Cut();
        [id(0x0000006b), helpcontext(0x091e006b)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(0002091D-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000091d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMergeDataSource : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091d03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x091d0001)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x091d0002)]
        HRESULT HeaderSourceName([out, retval] BSTR* prop);
        [id(0x00000003), propget, helpcontext(0x091d0003)]
        HRESULT Type([out, retval] WdMailMergeDataSource* prop);
        [id(0x00000004), propget, helpcontext(0x091d0004)]
        HRESULT HeaderSourceType([out, retval] WdMailMergeDataSource* prop);
        [id(0x00000005), propget, helpcontext(0x091d0005)]
        HRESULT ConnectString([out, retval] BSTR* prop);
        [id(0x00000006), propget, helpcontext(0x091d0006)]
        HRESULT QueryString([out, retval] BSTR* prop);
        [id(0x00000006), propput, helpcontext(0x091d0006)]
        HRESULT QueryString([in] BSTR prop);
        [id(0x00000007), propget, helpcontext(0x091d0007)]
        HRESULT ActiveRecord([out, retval] WdMailMergeActiveRecord* prop);
        [id(0x00000007), propput, helpcontext(0x091d0007)]
        HRESULT ActiveRecord([in] WdMailMergeActiveRecord prop);
        [id(0x00000008), propget, helpcontext(0x091d0008)]
        HRESULT FirstRecord([out, retval] long* prop);
        [id(0x00000008), propput, helpcontext(0x091d0008)]
        HRESULT FirstRecord([in] long prop);
        [id(0x00000009), propget, helpcontext(0x091d0009)]
        HRESULT LastRecord([out, retval] long* prop);
        [id(0x00000009), propput, helpcontext(0x091d0009)]
        HRESULT LastRecord([in] long prop);
        [id(0x0000000a), propget, helpcontext(0x091d000a)]
        HRESULT FieldNames([out, retval] MailMergeFieldNames** prop);
        [id(0x0000000b), propget, helpcontext(0x091d000b)]
        HRESULT DataFields([out, retval] MailMergeDataFields** prop);
        [id(0x00000065), hidden, helpcontext(0x091d0065)]
        HRESULT FindRecord2000(
                        [in] BSTR FindText, 
                        [in] BSTR Field, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propget, helpcontext(0x091d000c)]
        HRESULT RecordCount([out, retval] long* prop);
        [id(0x0000000d), propget, helpcontext(0x091d000d)]
        HRESULT Included([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), propput, helpcontext(0x091d000d)]
        HRESULT Included([in] VARIANT_BOOL prop);
        [id(0x0000000e), propget, helpcontext(0x091d000e)]
        HRESULT InvalidAddress([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000e), propput, helpcontext(0x091d000e)]
        HRESULT InvalidAddress([in] VARIANT_BOOL prop);
        [id(0x0000000f), propget, helpcontext(0x091d000f)]
        HRESULT InvalidComments([out, retval] BSTR* prop);
        [id(0x0000000f), propput, helpcontext(0x091d000f)]
        HRESULT InvalidComments([in] BSTR prop);
        [id(0x00000010), propget, helpcontext(0x091d0010)]
        HRESULT MappedDataFields([out, retval] MappedDataFields** prop);
        [id(0x00000011), propget, helpcontext(0x091d0011)]
        HRESULT TableName([out, retval] BSTR* prop);
        [id(0x00000066), helpcontext(0x091d0066)]
        HRESULT FindRecord(
                        [in] BSTR FindText, 
                        [in, optional] VARIANT* Field, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), helpcontext(0x091d0067)]
        HRESULT SetAllIncludedFlags([in] VARIANT_BOOL Included);
        [id(0x00000068), helpcontext(0x091d0068)]
        HRESULT SetAllErrorFlags(
                        [in] VARIANT_BOOL Invalid, 
                        [in] BSTR InvalidComment);
        [id(0x00000069), helpcontext(0x091d0069)]
        HRESULT Close();
    };

    [
      odl,
      uuid(0002091C-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000091c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMergeFieldNames : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091c03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x091cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x091c0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x091c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] MailMergeFieldName** prop);
    };

    [
      odl,
      uuid(0002091B-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000091b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMergeFieldName : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091b03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x091b0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x091b0001)]
        HRESULT Index([out, retval] long* prop);
    };

    [
      odl,
      uuid(0002091A-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000091a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMergeDataFields : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091a03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x091afffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x091a0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x091a0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] MailMergeDataField** prop);
    };

    [
      odl,
      uuid(00020919-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000919),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMergeDataField : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09190000)]
        HRESULT Value([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09190001)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x09190002)]
        HRESULT Index([out, retval] long* prop);
    };

    [
      odl,
      uuid(00020918-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000918),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Envelope : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091803e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09180001)]
        HRESULT Address([out, retval] Range** prop);
        [id(0x00000002), propget, helpcontext(0x09180002)]
        HRESULT ReturnAddress([out, retval] Range** prop);
        [id(0x00000004), propget, helpcontext(0x09180004)]
        HRESULT DefaultPrintBarCode([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09180004)]
        HRESULT DefaultPrintBarCode([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x09180005)]
        HRESULT DefaultPrintFIMA([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x09180005)]
        HRESULT DefaultPrintFIMA([in] VARIANT_BOOL prop);
        [id(0x00000006), propget, helpcontext(0x09180006)]
        HRESULT DefaultHeight([out, retval] int* prop);
        [id(0x00000006), propput, helpcontext(0x09180006)]
        HRESULT DefaultHeight([in] int prop);
        [id(0x00000007), propget, helpcontext(0x09180007)]
        HRESULT DefaultWidth([out, retval] int* prop);
        [id(0x00000007), propput, helpcontext(0x09180007)]
        HRESULT DefaultWidth([in] int prop);
        [id(00000000), propget, helpcontext(0x09180000)]
        HRESULT DefaultSize([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x09180000)]
        HRESULT DefaultSize([in] BSTR prop);
        [id(0x00000009), propget, helpcontext(0x09180009)]
        HRESULT DefaultOmitReturnAddress([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x09180009)]
        HRESULT DefaultOmitReturnAddress([in] VARIANT_BOOL prop);
        [id(0x0000000c), propget, helpcontext(0x0918000c)]
        HRESULT FeedSource([out, retval] WdPaperTray* prop);
        [id(0x0000000c), propput, helpcontext(0x0918000c)]
        HRESULT FeedSource([in] WdPaperTray prop);
        [id(0x0000000d), propget, helpcontext(0x0918000d)]
        HRESULT AddressFromLeft([out, retval] int* prop);
        [id(0x0000000d), propput, helpcontext(0x0918000d)]
        HRESULT AddressFromLeft([in] int prop);
        [id(0x0000000e), propget, helpcontext(0x0918000e)]
        HRESULT AddressFromTop([out, retval] int* prop);
        [id(0x0000000e), propput, helpcontext(0x0918000e)]
        HRESULT AddressFromTop([in] int prop);
        [id(0x0000000f), propget, helpcontext(0x0918000f)]
        HRESULT ReturnAddressFromLeft([out, retval] int* prop);
        [id(0x0000000f), propput, helpcontext(0x0918000f)]
        HRESULT ReturnAddressFromLeft([in] int prop);
        [id(0x00000010), propget, helpcontext(0x09180010)]
        HRESULT ReturnAddressFromTop([out, retval] int* prop);
        [id(0x00000010), propput, helpcontext(0x09180010)]
        HRESULT ReturnAddressFromTop([in] int prop);
        [id(0x00000011), propget, helpcontext(0x09180011)]
        HRESULT AddressStyle([out, retval] Style** prop);
        [id(0x00000012), propget, helpcontext(0x09180012)]
        HRESULT ReturnAddressStyle([out, retval] Style** prop);
        [id(0x00000013), propget, helpcontext(0x09180013)]
        HRESULT DefaultOrientation([out, retval] WdEnvelopeOrientation* prop);
        [id(0x00000013), propput, helpcontext(0x09180013)]
        HRESULT DefaultOrientation([in] WdEnvelopeOrientation prop);
        [id(0x00000014), propget, helpcontext(0x09180014)]
        HRESULT DefaultFaceUp([out, retval] VARIANT_BOOL* prop);
        [id(0x00000014), propput, helpcontext(0x09180014)]
        HRESULT DefaultFaceUp([in] VARIANT_BOOL prop);
        [id(0x00000065), hidden, helpcontext(0x09180065)]
        HRESULT Insert2000(
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* AutoText, 
                        [in, optional] VARIANT* OmitReturnAddress, 
                        [in, optional] VARIANT* ReturnAddress, 
                        [in, optional] VARIANT* ReturnAutoText, 
                        [in, optional] VARIANT* PrintBarCode, 
                        [in, optional] VARIANT* PrintFIMA, 
                        [in, optional] VARIANT* Size, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* FeedSource, 
                        [in, optional] VARIANT* AddressFromLeft, 
                        [in, optional] VARIANT* AddressFromTop, 
                        [in, optional] VARIANT* ReturnAddressFromLeft, 
                        [in, optional] VARIANT* ReturnAddressFromTop, 
                        [in, optional] VARIANT* DefaultFaceUp, 
                        [in, optional] VARIANT* DefaultOrientation);
        [id(0x00000066), hidden, helpcontext(0x09180066)]
        HRESULT PrintOut2000(
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* AutoText, 
                        [in, optional] VARIANT* OmitReturnAddress, 
                        [in, optional] VARIANT* ReturnAddress, 
                        [in, optional] VARIANT* ReturnAutoText, 
                        [in, optional] VARIANT* PrintBarCode, 
                        [in, optional] VARIANT* PrintFIMA, 
                        [in, optional] VARIANT* Size, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* FeedSource, 
                        [in, optional] VARIANT* AddressFromLeft, 
                        [in, optional] VARIANT* AddressFromTop, 
                        [in, optional] VARIANT* ReturnAddressFromLeft, 
                        [in, optional] VARIANT* ReturnAddressFromTop, 
                        [in, optional] VARIANT* DefaultFaceUp, 
                        [in, optional] VARIANT* DefaultOrientation);
        [id(0x00000067), helpcontext(0x09180067)]
        HRESULT UpdateDocument();
        [id(0x00000068), helpcontext(0x09180068)]
        HRESULT Options();
        [id(0x00000016), propget, helpcontext(0x09180016)]
        HRESULT Vertical([out, retval] VARIANT_BOOL* prop);
        [id(0x00000016), propput, helpcontext(0x09180016)]
        HRESULT Vertical([in] VARIANT_BOOL prop);
        [id(0x00000017), propget, helpcontext(0x09180017)]
        HRESULT RecipientNamefromLeft([out, retval] int* prop);
        [id(0x00000017), propput, helpcontext(0x09180017)]
        HRESULT RecipientNamefromLeft([in] int prop);
        [id(0x00000018), propget, helpcontext(0x09180018)]
        HRESULT RecipientNamefromTop([out, retval] int* prop);
        [id(0x00000018), propput, helpcontext(0x09180018)]
        HRESULT RecipientNamefromTop([in] int prop);
        [id(0x00000019), propget, helpcontext(0x09180019)]
        HRESULT RecipientPostalfromLeft([out, retval] int* prop);
        [id(0x00000019), propput, helpcontext(0x09180019)]
        HRESULT RecipientPostalfromLeft([in] int prop);
        [id(0x0000001a), propget, helpcontext(0x0918001a)]
        HRESULT RecipientPostalfromTop([out, retval] int* prop);
        [id(0x0000001a), propput, helpcontext(0x0918001a)]
        HRESULT RecipientPostalfromTop([in] int prop);
        [id(0x0000001b), propget, helpcontext(0x0918001b)]
        HRESULT SenderNamefromLeft([out, retval] int* prop);
        [id(0x0000001b), propput, helpcontext(0x0918001b)]
        HRESULT SenderNamefromLeft([in] int prop);
        [id(0x0000001c), propget, helpcontext(0x0918001c)]
        HRESULT SenderNamefromTop([out, retval] int* prop);
        [id(0x0000001c), propput, helpcontext(0x0918001c)]
        HRESULT SenderNamefromTop([in] int prop);
        [id(0x0000001d), propget, helpcontext(0x0918001d)]
        HRESULT SenderPostalfromLeft([out, retval] int* prop);
        [id(0x0000001d), propput, helpcontext(0x0918001d)]
        HRESULT SenderPostalfromLeft([in] int prop);
        [id(0x0000001e), propget, helpcontext(0x0918001e)]
        HRESULT SenderPostalfromTop([out, retval] int* prop);
        [id(0x0000001e), propput, helpcontext(0x0918001e)]
        HRESULT SenderPostalfromTop([in] int prop);
        [id(0x00000069), helpcontext(0x09180069)]
        HRESULT Insert(
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* AutoText, 
                        [in, optional] VARIANT* OmitReturnAddress, 
                        [in, optional] VARIANT* ReturnAddress, 
                        [in, optional] VARIANT* ReturnAutoText, 
                        [in, optional] VARIANT* PrintBarCode, 
                        [in, optional] VARIANT* PrintFIMA, 
                        [in, optional] VARIANT* Size, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* FeedSource, 
                        [in, optional] VARIANT* AddressFromLeft, 
                        [in, optional] VARIANT* AddressFromTop, 
                        [in, optional] VARIANT* ReturnAddressFromLeft, 
                        [in, optional] VARIANT* ReturnAddressFromTop, 
                        [in, optional] VARIANT* DefaultFaceUp, 
                        [in, optional] VARIANT* DefaultOrientation, 
                        [in, optional] VARIANT* PrintEPostage, 
                        [in, optional] VARIANT* Vertical, 
                        [in, optional] VARIANT* RecipientNamefromLeft, 
                        [in, optional] VARIANT* RecipientNamefromTop, 
                        [in, optional] VARIANT* RecipientPostalfromLeft, 
                        [in, optional] VARIANT* RecipientPostalfromTop, 
                        [in, optional] VARIANT* SenderNamefromLeft, 
                        [in, optional] VARIANT* SenderNamefromTop, 
                        [in, optional] VARIANT* SenderPostalfromLeft, 
                        [in, optional] VARIANT* SenderPostalfromTop);
        [id(0x0000006a), helpcontext(0x0918006a)]
        HRESULT PrintOut(
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* AutoText, 
                        [in, optional] VARIANT* OmitReturnAddress, 
                        [in, optional] VARIANT* ReturnAddress, 
                        [in, optional] VARIANT* ReturnAutoText, 
                        [in, optional] VARIANT* PrintBarCode, 
                        [in, optional] VARIANT* PrintFIMA, 
                        [in, optional] VARIANT* Size, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* FeedSource, 
                        [in, optional] VARIANT* AddressFromLeft, 
                        [in, optional] VARIANT* AddressFromTop, 
                        [in, optional] VARIANT* ReturnAddressFromLeft, 
                        [in, optional] VARIANT* ReturnAddressFromTop, 
                        [in, optional] VARIANT* DefaultFaceUp, 
                        [in, optional] VARIANT* DefaultOrientation, 
                        [in, optional] VARIANT* PrintEPostage, 
                        [in, optional] VARIANT* Vertical, 
                        [in, optional] VARIANT* RecipientNamefromLeft, 
                        [in, optional] VARIANT* RecipientNamefromTop, 
                        [in, optional] VARIANT* RecipientPostalfromLeft, 
                        [in, optional] VARIANT* RecipientPostalfromTop, 
                        [in, optional] VARIANT* SenderNamefromLeft, 
                        [in, optional] VARIANT* SenderNamefromTop, 
                        [in, optional] VARIANT* SenderPostalfromLeft, 
                        [in, optional] VARIANT* SenderPostalfromTop);
    };

    [
      odl,
      uuid(00020917-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000917),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailingLabel : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091703e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x09170002)]
        HRESULT DefaultPrintBarCode([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09170002)]
        HRESULT DefaultPrintBarCode([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09170004)]
        HRESULT DefaultLaserTray([out, retval] WdPaperTray* prop);
        [id(0x00000004), propput, helpcontext(0x09170004)]
        HRESULT DefaultLaserTray([in] WdPaperTray prop);
        [id(0x00000008), propget, helpcontext(0x09170008)]
        HRESULT CustomLabels([out, retval] CustomLabels** prop);
        [id(0x00000009), propget, helpcontext(0x09170009)]
        HRESULT DefaultLabelName([out, retval] BSTR* prop);
        [id(0x00000009), propput, helpcontext(0x09170009)]
        HRESULT DefaultLabelName([in] BSTR prop);
        [id(0x00000065), hidden, helpcontext(0x09170065)]
        HRESULT CreateNewDocument2000(
                        [in, optional] VARIANT* Name, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* AutoText, 
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* LaserTray, 
                        [out, retval] Document** prop);
        [id(0x00000066), hidden, helpcontext(0x09170066)]
        HRESULT PrintOut2000(
                        [in, optional] VARIANT* Name, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* LaserTray, 
                        [in, optional] VARIANT* SingleLabel, 
                        [in, optional] VARIANT* Row, 
                        [in, optional] VARIANT* Column);
        [id(0x00000067), helpcontext(0x09170067)]
        HRESULT LabelOptions();
        [id(0x00000068), helpcontext(0x09170068)]
        HRESULT CreateNewDocument(
                        [in, optional] VARIANT* Name, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* AutoText, 
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* LaserTray, 
                        [in, optional] VARIANT* PrintEPostageLabel, 
                        [in, optional] VARIANT* Vertical, 
                        [out, retval] Document** prop);
        [id(0x00000069), helpcontext(0x09170069)]
        HRESULT PrintOut(
                        [in, optional] VARIANT* Name, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* LaserTray, 
                        [in, optional] VARIANT* SingleLabel, 
                        [in, optional] VARIANT* Row, 
                        [in, optional] VARIANT* Column, 
                        [in, optional] VARIANT* PrintEPostageLabel, 
                        [in, optional] VARIANT* Vertical);
        [id(0x0000000a), propget, helpcontext(0x0917000a)]
        HRESULT Vertical([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000a), propput, helpcontext(0x0917000a)]
        HRESULT Vertical([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020916-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000916),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomLabels : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091603e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0916fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09160001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09160000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] CustomLabel** prop);
        [id(0x00000065), helpcontext(0x09160065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* DotMatrix, 
                        [out, retval] CustomLabel** prop);
    };

    [
      odl,
      uuid(00020915-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000915),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomLabel : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091503e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09150001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09150002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x09150002)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x09150003)]
        HRESULT TopMargin([out, retval] int* prop);
        [id(0x00000003), propput, helpcontext(0x09150003)]
        HRESULT TopMargin([in] int prop);
        [id(0x00000004), propget, helpcontext(0x09150004)]
        HRESULT SideMargin([out, retval] int* prop);
        [id(0x00000004), propput, helpcontext(0x09150004)]
        HRESULT SideMargin([in] int prop);
        [id(0x00000005), propget, helpcontext(0x09150005)]
        HRESULT Height([out, retval] int* prop);
        [id(0x00000005), propput, helpcontext(0x09150005)]
        HRESULT Height([in] int prop);
        [id(0x00000006), propget, helpcontext(0x09150006)]
        HRESULT Width([out, retval] int* prop);
        [id(0x00000006), propput, helpcontext(0x09150006)]
        HRESULT Width([in] int prop);
        [id(0x00000007), propget, helpcontext(0x09150007)]
        HRESULT VerticalPitch([out, retval] int* prop);
        [id(0x00000007), propput, helpcontext(0x09150007)]
        HRESULT VerticalPitch([in] int prop);
        [id(0x00000008), propget, helpcontext(0x09150008)]
        HRESULT HorizontalPitch([out, retval] int* prop);
        [id(0x00000008), propput, helpcontext(0x09150008)]
        HRESULT HorizontalPitch([in] int prop);
        [id(0x00000009), propget, helpcontext(0x09150009)]
        HRESULT NumberAcross([out, retval] long* prop);
        [id(0x00000009), propput, helpcontext(0x09150009)]
        HRESULT NumberAcross([in] long prop);
        [id(0x0000000a), propget, helpcontext(0x0915000a)]
        HRESULT NumberDown([out, retval] long* prop);
        [id(0x0000000a), propput, helpcontext(0x0915000a)]
        HRESULT NumberDown([in] long prop);
        [id(0x0000000b), propget, helpcontext(0x0915000b)]
        HRESULT DotMatrix([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propget, helpcontext(0x0915000c)]
        HRESULT PageSize([out, retval] WdCustomLabelPageSize* prop);
        [id(0x0000000c), propput, helpcontext(0x0915000c)]
        HRESULT PageSize([in] WdCustomLabelPageSize prop);
        [id(0x0000000d), propget, helpcontext(0x0915000d)]
        HRESULT Valid([out, retval] VARIANT_BOOL* prop);
        [id(0x00000065), helpcontext(0x09150065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(00020914-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000914),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TablesOfContents : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091403e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0914fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09140001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09140002)]
        HRESULT Format([out, retval] WdTocFormat* prop);
        [id(0x00000002), propput, helpcontext(0x09140002)]
        HRESULT Format([in] WdTocFormat prop);
        [id(00000000), helpcontext(0x09140000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] TableOfContents** prop);
        [id(0x00000064), hidden, helpcontext(0x09140064)]
        HRESULT AddOld(
                        [in] Range* Range, 
                        [in, optional] VARIANT* UseHeadingStyles, 
                        [in, optional] VARIANT* UpperHeadingLevel, 
                        [in, optional] VARIANT* LowerHeadingLevel, 
                        [in, optional] VARIANT* UseFields, 
                        [in, optional] VARIANT* TableID, 
                        [in, optional] VARIANT* RightAlignPageNumbers, 
                        [in, optional] VARIANT* IncludePageNumbers, 
                        [in, optional] VARIANT* AddedStyles, 
                        [out, retval] TableOfContents** prop);
        [id(0x00000065), helpcontext(0x09140065)]
        HRESULT MarkEntry(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Entry, 
                        [in, optional] VARIANT* EntryAutoText, 
                        [in, optional] VARIANT* TableID, 
                        [in, optional] VARIANT* Level, 
                        [out, retval] Field** prop);
        [id(0x00000066), hidden, helpcontext(0x09140066)]
        HRESULT Add2000(
                        [in] Range* Range, 
                        [in, optional] VARIANT* UseHeadingStyles, 
                        [in, optional] VARIANT* UpperHeadingLevel, 
                        [in, optional] VARIANT* LowerHeadingLevel, 
                        [in, optional] VARIANT* UseFields, 
                        [in, optional] VARIANT* TableID, 
                        [in, optional] VARIANT* RightAlignPageNumbers, 
                        [in, optional] VARIANT* IncludePageNumbers, 
                        [in, optional] VARIANT* AddedStyles, 
                        [in, optional] VARIANT* UseHyperlinks, 
                        [in, optional] VARIANT* HidePageNumbersInWeb, 
                        [out, retval] TableOfContents** prop);
        [id(0x00000067), helpcontext(0x09140067)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in, optional] VARIANT* UseHeadingStyles, 
                        [in, optional] VARIANT* UpperHeadingLevel, 
                        [in, optional] VARIANT* LowerHeadingLevel, 
                        [in, optional] VARIANT* UseFields, 
                        [in, optional] VARIANT* TableID, 
                        [in, optional] VARIANT* RightAlignPageNumbers, 
                        [in, optional] VARIANT* IncludePageNumbers, 
                        [in, optional] VARIANT* AddedStyles, 
                        [in, optional] VARIANT* UseHyperlinks, 
                        [in, optional] VARIANT* HidePageNumbersInWeb, 
                        [in, optional] VARIANT* UseOutlineLevels, 
                        [out, retval] TableOfContents** prop);
    };

    [
      odl,
      uuid(00020913-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000913),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TableOfContents : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091303e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09130001)]
        HRESULT UseHeadingStyles([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09130001)]
        HRESULT UseHeadingStyles([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x09130002)]
        HRESULT UseFields([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09130002)]
        HRESULT UseFields([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x09130003)]
        HRESULT UpperHeadingLevel([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x09130003)]
        HRESULT UpperHeadingLevel([in] long prop);
        [id(0x00000004), propget, helpcontext(0x09130004)]
        HRESULT LowerHeadingLevel([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x09130004)]
        HRESULT LowerHeadingLevel([in] long prop);
        [id(0x00000005), propget, helpcontext(0x09130005)]
        HRESULT TableID([out, retval] BSTR* prop);
        [id(0x00000005), propput, helpcontext(0x09130005)]
        HRESULT TableID([in] BSTR prop);
        [id(0x00000006), propget, helpcontext(0x09130006)]
        HRESULT HeadingStyles([out, retval] HeadingStyles** prop);
        [id(0x00000007), propget, helpcontext(0x09130007)]
        HRESULT RightAlignPageNumbers([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propput, helpcontext(0x09130007)]
        HRESULT RightAlignPageNumbers([in] VARIANT_BOOL prop);
        [id(0x00000008), propget, helpcontext(0x09130008)]
        HRESULT IncludePageNumbers([out, retval] VARIANT_BOOL* prop);
        [id(0x00000008), propput, helpcontext(0x09130008)]
        HRESULT IncludePageNumbers([in] VARIANT_BOOL prop);
        [id(0x00000009), propget, helpcontext(0x09130009)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x0000000a), propget, helpcontext(0x0913000a)]
        HRESULT TabLeader([out, retval] WdTabLeader* prop);
        [id(0x0000000a), propput, helpcontext(0x0913000a)]
        HRESULT TabLeader([in] WdTabLeader prop);
        [id(0x00000064), helpcontext(0x09130064)]
        HRESULT Delete();
        [id(0x00000065), helpcontext(0x09130065)]
        HRESULT UpdatePageNumbers();
        [id(0x00000066), helpcontext(0x09130066)]
        HRESULT Update();
        [id(0x0000000b), propget, helpcontext(0x0913000b)]
        HRESULT UseHyperlinks([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000b), propput, helpcontext(0x0913000b)]
        HRESULT UseHyperlinks([in] VARIANT_BOOL prop);
        [id(0x0000000c), propget, helpcontext(0x0913000c)]
        HRESULT HidePageNumbersInWeb([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propput, helpcontext(0x0913000c)]
        HRESULT HidePageNumbersInWeb([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020912-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000912),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TablesOfAuthorities : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091203e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0912fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09120001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09120002)]
        HRESULT Format([out, retval] WdToaFormat* prop);
        [id(0x00000002), propput, helpcontext(0x09120002)]
        HRESULT Format([in] WdToaFormat prop);
        [id(00000000), helpcontext(0x09120000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] TableOfAuthorities** prop);
        [id(0x00000064), helpcontext(0x09120064)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Category, 
                        [in, optional] VARIANT* Bookmark, 
                        [in, optional] VARIANT* Passim, 
                        [in, optional] VARIANT* KeepEntryFormatting, 
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* IncludeSequenceName, 
                        [in, optional] VARIANT* EntrySeparator, 
                        [in, optional] VARIANT* PageRangeSeparator, 
                        [in, optional] VARIANT* IncludeCategoryHeader, 
                        [in, optional] VARIANT* PageNumberSeparator, 
                        [out, retval] TableOfAuthorities** prop);
        [id(0x00000067), helpcontext(0x09120067)]
        HRESULT NextCitation([in] BSTR ShortCitation);
        [id(0x00000065), helpcontext(0x09120065)]
        HRESULT MarkCitation(
                        [in] Range* Range, 
                        [in] BSTR ShortCitation, 
                        [in, optional] VARIANT* LongCitation, 
                        [in, optional] VARIANT* LongCitationAutoText, 
                        [in, optional] VARIANT* Category, 
                        [out, retval] Field** prop);
        [id(0x00000066), helpcontext(0x09120066)]
        HRESULT MarkAllCitations(
                        [in] BSTR ShortCitation, 
                        [in, optional] VARIANT* LongCitation, 
                        [in, optional] VARIANT* LongCitationAutoText, 
                        [in, optional] VARIANT* Category);
    };

    [
      odl,
      uuid(00020911-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000911),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TableOfAuthorities : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091103e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09110001)]
        HRESULT Passim([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09110001)]
        HRESULT Passim([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x09110002)]
        HRESULT KeepEntryFormatting([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09110002)]
        HRESULT KeepEntryFormatting([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x09110003)]
        HRESULT Category([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x09110003)]
        HRESULT Category([in] long prop);
        [id(0x00000004), propget, helpcontext(0x09110004)]
        HRESULT Bookmark([out, retval] BSTR* prop);
        [id(0x00000004), propput, helpcontext(0x09110004)]
        HRESULT Bookmark([in] BSTR prop);
        [id(0x00000005), propget, helpcontext(0x09110005)]
        HRESULT Separator([out, retval] BSTR* prop);
        [id(0x00000005), propput, helpcontext(0x09110005)]
        HRESULT Separator([in] BSTR prop);
        [id(0x00000006), propget, helpcontext(0x09110006)]
        HRESULT IncludeSequenceName([out, retval] BSTR* prop);
        [id(0x00000006), propput, helpcontext(0x09110006)]
        HRESULT IncludeSequenceName([in] BSTR prop);
        [id(0x00000007), propget, helpcontext(0x09110007)]
        HRESULT EntrySeparator([out, retval] BSTR* prop);
        [id(0x00000007), propput, helpcontext(0x09110007)]
        HRESULT EntrySeparator([in] BSTR prop);
        [id(0x00000008), propget, helpcontext(0x09110008)]
        HRESULT PageRangeSeparator([out, retval] BSTR* prop);
        [id(0x00000008), propput, helpcontext(0x09110008)]
        HRESULT PageRangeSeparator([in] BSTR prop);
        [id(0x00000009), propget, helpcontext(0x09110009)]
        HRESULT IncludeCategoryHeader([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x09110009)]
        HRESULT IncludeCategoryHeader([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x0911000a)]
        HRESULT PageNumberSeparator([out, retval] BSTR* prop);
        [id(0x0000000a), propput, helpcontext(0x0911000a)]
        HRESULT PageNumberSeparator([in] BSTR prop);
        [id(0x0000000b), propget, helpcontext(0x0911000b)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x0000000c), propget, helpcontext(0x0911000c)]
        HRESULT TabLeader([out, retval] WdTabLeader* prop);
        [id(0x0000000c), propput, helpcontext(0x0911000c)]
        HRESULT TabLeader([in] WdTabLeader prop);
        [id(0x00000064), helpcontext(0x09110064)]
        HRESULT Delete();
        [id(0x00000065), helpcontext(0x09110065)]
        HRESULT Update();
    };

    [
      odl,
      uuid(00020910-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000910),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Dialogs : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0910fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09100001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09100000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] WdWordDialog Index, 
                        [out, retval] Dialog** prop);
    };

    [
      odl,
      uuid(000209B8-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009b8),
      dual,
      oleautomation
    ]
    interface Dialog : IDispatch {
        [id(0x00007d03), propget, helpcontext(0x09b87d03)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x00007d04), propget, helpcontext(0x09b87d04)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00007d05), propget, helpcontext(0x09b87d05)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00007d02), propget, helpcontext(0x09b87d02)]
        HRESULT DefaultTab([out, retval] WdWordDialogTab* prop);
        [id(0x00007d02), propput, helpcontext(0x09b87d02)]
        HRESULT DefaultTab([in] WdWordDialogTab prop);
        [id(00000000), propget, helpcontext(0x09b80000)]
        HRESULT Type([out, retval] WdWordDialog* prop);
        [id(0x00000150), helpcontext(0x09b80150)]
        HRESULT Show(
                        [in, optional] VARIANT* TimeOut, 
                        [out, retval] long* prop);
        [id(0x00000152), helpcontext(0x09b80152)]
        HRESULT Display(
                        [in, optional] VARIANT* TimeOut, 
                        [out, retval] long* prop);
        [id(0x00007d01), helpcontext(0x09b87d01)]
        HRESULT Execute();
        [id(0x0000012e), helpcontext(0x09b8012e)]
        HRESULT Update();
        [id(0x00007d06), propget, helpcontext(0x09b87d06)]
        HRESULT CommandName([out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(00020971-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000971),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PageSetup : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097103e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09710064)]
        HRESULT TopMargin([out, retval] int* prop);
        [id(0x00000064), propput, helpcontext(0x09710064)]
        HRESULT TopMargin([in] int prop);
        [id(0x00000065), propget, helpcontext(0x09710065)]
        HRESULT BottomMargin([out, retval] int* prop);
        [id(0x00000065), propput, helpcontext(0x09710065)]
        HRESULT BottomMargin([in] int prop);
        [id(0x00000066), propget, helpcontext(0x09710066)]
        HRESULT LeftMargin([out, retval] int* prop);
        [id(0x00000066), propput, helpcontext(0x09710066)]
        HRESULT LeftMargin([in] int prop);
        [id(0x00000067), propget, helpcontext(0x09710067)]
        HRESULT RightMargin([out, retval] int* prop);
        [id(0x00000067), propput, helpcontext(0x09710067)]
        HRESULT RightMargin([in] int prop);
        [id(0x00000068), propget, helpcontext(0x09710068)]
        HRESULT Gutter([out, retval] int* prop);
        [id(0x00000068), propput, helpcontext(0x09710068)]
        HRESULT Gutter([in] int prop);
        [id(0x00000069), propget, helpcontext(0x09710069)]
        HRESULT PageWidth([out, retval] int* prop);
        [id(0x00000069), propput, helpcontext(0x09710069)]
        HRESULT PageWidth([in] int prop);
        [id(0x0000006a), propget, helpcontext(0x0971006a)]
        HRESULT PageHeight([out, retval] int* prop);
        [id(0x0000006a), propput, helpcontext(0x0971006a)]
        HRESULT PageHeight([in] int prop);
        [id(0x0000006b), propget, helpcontext(0x0971006b)]
        HRESULT Orientation([out, retval] WdOrientation* prop);
        [id(0x0000006b), propput, helpcontext(0x0971006b)]
        HRESULT Orientation([in] WdOrientation prop);
        [id(0x0000006c), propget, helpcontext(0x0971006c)]
        HRESULT FirstPageTray([out, retval] WdPaperTray* prop);
        [id(0x0000006c), propput, helpcontext(0x0971006c)]
        HRESULT FirstPageTray([in] WdPaperTray prop);
        [id(0x0000006d), propget, helpcontext(0x0971006d)]
        HRESULT OtherPagesTray([out, retval] WdPaperTray* prop);
        [id(0x0000006d), propput, helpcontext(0x0971006d)]
        HRESULT OtherPagesTray([in] WdPaperTray prop);
        [id(0x0000006e), propget, helpcontext(0x0971006e)]
        HRESULT VerticalAlignment([out, retval] WdVerticalAlignment* prop);
        [id(0x0000006e), propput, helpcontext(0x0971006e)]
        HRESULT VerticalAlignment([in] WdVerticalAlignment prop);
        [id(0x0000006f), propget, helpcontext(0x0971006f)]
        HRESULT MirrorMargins([out, retval] long* prop);
        [id(0x0000006f), propput, helpcontext(0x0971006f)]
        HRESULT MirrorMargins([in] long prop);
        [id(0x00000070), propget, helpcontext(0x09710070)]
        HRESULT HeaderDistance([out, retval] int* prop);
        [id(0x00000070), propput, helpcontext(0x09710070)]
        HRESULT HeaderDistance([in] int prop);
        [id(0x00000071), propget, helpcontext(0x09710071)]
        HRESULT FooterDistance([out, retval] int* prop);
        [id(0x00000071), propput, helpcontext(0x09710071)]
        HRESULT FooterDistance([in] int prop);
        [id(0x00000072), propget, helpcontext(0x09710072)]
        HRESULT SectionStart([out, retval] WdSectionStart* prop);
        [id(0x00000072), propput, helpcontext(0x09710072)]
        HRESULT SectionStart([in] WdSectionStart prop);
        [id(0x00000073), propget, helpcontext(0x09710073)]
        HRESULT OddAndEvenPagesHeaderFooter([out, retval] long* prop);
        [id(0x00000073), propput, helpcontext(0x09710073)]
        HRESULT OddAndEvenPagesHeaderFooter([in] long prop);
        [id(0x00000074), propget, helpcontext(0x09710074)]
        HRESULT DifferentFirstPageHeaderFooter([out, retval] long* prop);
        [id(0x00000074), propput, helpcontext(0x09710074)]
        HRESULT DifferentFirstPageHeaderFooter([in] long prop);
        [id(0x00000075), propget, helpcontext(0x09710075)]
        HRESULT SuppressEndnotes([out, retval] long* prop);
        [id(0x00000075), propput, helpcontext(0x09710075)]
        HRESULT SuppressEndnotes([in] long prop);
        [id(0x00000076), propget, helpcontext(0x09710076)]
        HRESULT LineNumbering([out, retval] LineNumbering** prop);
        [id(0x00000076), propput, helpcontext(0x09710076)]
        HRESULT LineNumbering([in] LineNumbering* prop);
        [id(0x00000077), propget, helpcontext(0x09710077)]
        HRESULT TextColumns([out, retval] TextColumns** prop);
        [id(0x00000077), propput, helpcontext(0x09710077)]
        HRESULT TextColumns([in] TextColumns* prop);
        [id(0x00000078), propget, helpcontext(0x09710078)]
        HRESULT PaperSize([out, retval] WdPaperSize* prop);
        [id(0x00000078), propput, helpcontext(0x09710078)]
        HRESULT PaperSize([in] WdPaperSize prop);
        [id(0x00000079), propget, helpcontext(0x09710079)]
        HRESULT TwoPagesOnOne([out, retval] VARIANT_BOOL* prop);
        [id(0x00000079), propput, helpcontext(0x09710079)]
        HRESULT TwoPagesOnOne([in] VARIANT_BOOL prop);
        [id(0x0000007a), propget, hidden, helpcontext(0x0971007a)]
        HRESULT GutterOnTop([out, retval] VARIANT_BOOL* prop);
        [id(0x0000007a), propput, hidden, helpcontext(0x0971007a)]
        HRESULT GutterOnTop([in] VARIANT_BOOL prop);
        [id(0x0000007b), propget, helpcontext(0x0971007b)]
        HRESULT CharsLine([out, retval] int* prop);
        [id(0x0000007b), propput, helpcontext(0x0971007b)]
        HRESULT CharsLine([in] int prop);
        [id(0x0000007c), propget, helpcontext(0x0971007c)]
        HRESULT LinesPage([out, retval] int* prop);
        [id(0x0000007c), propput, helpcontext(0x0971007c)]
        HRESULT LinesPage([in] int prop);
        [id(0x00000080), propget, helpcontext(0x09710080)]
        HRESULT ShowGrid([out, retval] VARIANT_BOOL* prop);
        [id(0x00000080), propput, helpcontext(0x09710080)]
        HRESULT ShowGrid([in] VARIANT_BOOL prop);
        [id(0x000000c9), helpcontext(0x097100c9)]
        HRESULT TogglePortrait();
        [id(0x000000ca), helpcontext(0x097100ca)]
        HRESULT SetAsTemplateDefault();
        [id(0x00000081), propget, helpcontext(0x09710081)]
        HRESULT GutterStyle([out, retval] WdGutterStyleOld* prop);
        [id(0x00000081), propput, helpcontext(0x09710081)]
        HRESULT GutterStyle([in] WdGutterStyleOld prop);
        [id(0x00000082), propget, helpcontext(0x09710082)]
        HRESULT SectionDirection([out, retval] WdSectionDirection* prop);
        [id(0x00000082), propput, helpcontext(0x09710082)]
        HRESULT SectionDirection([in] WdSectionDirection prop);
        [id(0x00000083), propget, helpcontext(0x09710083)]
        HRESULT LayoutMode([out, retval] WdLayoutMode* prop);
        [id(0x00000083), propput, helpcontext(0x09710083)]
        HRESULT LayoutMode([in] WdLayoutMode prop);
        [id(0x000004c6), propget, helpcontext(0x097104c6)]
        HRESULT GutterPos([out, retval] WdGutterStyle* prop);
        [id(0x000004c6), propput, helpcontext(0x097104c6)]
        HRESULT GutterPos([in] WdGutterStyle prop);
        [id(0x000004c7), propget, helpcontext(0x097104c7)]
        HRESULT BookFoldPrinting([out, retval] VARIANT_BOOL* prop);
        [id(0x000004c7), propput, helpcontext(0x097104c7)]
        HRESULT BookFoldPrinting([in] VARIANT_BOOL prop);
        [id(0x000004c8), propget, helpcontext(0x097104c8)]
        HRESULT BookFoldRevPrinting([out, retval] VARIANT_BOOL* prop);
        [id(0x000004c8), propput, helpcontext(0x097104c8)]
        HRESULT BookFoldRevPrinting([in] VARIANT_BOOL prop);
        [id(0x000004c9), propget, helpcontext(0x097104c9)]
        HRESULT BookFoldPrintingSheets([out, retval] long* prop);
        [id(0x000004c9), propput, helpcontext(0x097104c9)]
        HRESULT BookFoldPrintingSheets([in] long prop);
    };

    [
      odl,
      uuid(00020972-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000972),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LineNumbering : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097203e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09720064)]
        HRESULT RestartMode([out, retval] WdNumberingRule* prop);
        [id(0x00000064), propput, helpcontext(0x09720064)]
        HRESULT RestartMode([in] WdNumberingRule prop);
        [id(0x00000065), propget, helpcontext(0x09720065)]
        HRESULT StartingNumber([out, retval] long* prop);
        [id(0x00000065), propput, helpcontext(0x09720065)]
        HRESULT StartingNumber([in] long prop);
        [id(0x00000066), propget, helpcontext(0x09720066)]
        HRESULT DistanceFromText([out, retval] int* prop);
        [id(0x00000066), propput, helpcontext(0x09720066)]
        HRESULT DistanceFromText([in] int prop);
        [id(0x00000067), propget, helpcontext(0x09720067)]
        HRESULT CountBy([out, retval] long* prop);
        [id(0x00000067), propput, helpcontext(0x09720067)]
        HRESULT CountBy([in] long prop);
        [id(0x00000068), propget, helpcontext(0x09720068)]
        HRESULT Active([out, retval] long* prop);
        [id(0x00000068), propput, helpcontext(0x09720068)]
        HRESULT Active([in] long prop);
    };

    [
      odl,
      uuid(00020973-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000973),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextColumns : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0973fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09730002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x097303e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09730064)]
        HRESULT EvenlySpaced([out, retval] long* prop);
        [id(0x00000064), propput, helpcontext(0x09730064)]
        HRESULT EvenlySpaced([in] long prop);
        [id(0x00000065), propget, helpcontext(0x09730065)]
        HRESULT LineBetween([out, retval] long* prop);
        [id(0x00000065), propput, helpcontext(0x09730065)]
        HRESULT LineBetween([in] long prop);
        [id(0x00000066), propget, helpcontext(0x09730066)]
        HRESULT Width([out, retval] int* prop);
        [id(0x00000066), propput, helpcontext(0x09730066)]
        HRESULT Width([in] int prop);
        [id(0x00000067), propget, helpcontext(0x09730067)]
        HRESULT Spacing([out, retval] int* prop);
        [id(0x00000067), propput, helpcontext(0x09730067)]
        HRESULT Spacing([in] int prop);
        [id(00000000), helpcontext(0x09730000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] TextColumn** prop);
        [id(0x000000c9), helpcontext(0x097300c9)]
        HRESULT Add(
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* Spacing, 
                        [in, optional] VARIANT* EvenlySpaced, 
                        [out, retval] TextColumn** prop);
        [id(0x000000ca), helpcontext(0x097300ca)]
        HRESULT SetCount([in] long NumColumns);
        [id(0x00000068), propget, helpcontext(0x09730068)]
        HRESULT FlowDirection([out, retval] WdFlowDirection* prop);
        [id(0x00000068), propput, helpcontext(0x09730068)]
        HRESULT FlowDirection([in] WdFlowDirection prop);
    };

    [
      odl,
      uuid(00020974-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000974),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextColumn : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097403e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09740064)]
        HRESULT Width([out, retval] int* prop);
        [id(0x00000064), propput, helpcontext(0x09740064)]
        HRESULT Width([in] int prop);
        [id(0x00000065), propget, helpcontext(0x09740065)]
        HRESULT SpaceAfter([out, retval] int* prop);
        [id(0x00000065), propput, helpcontext(0x09740065)]
        HRESULT SpaceAfter([in] int prop);
    };

    [
      odl,
      uuid(00020975-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000975),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Selection : IDispatch {
        [id(00000000), propget, helpcontext(0x09750000)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x09750000)]
        HRESULT Text([in] BSTR prop);
        [id(0x00000002), propget, helpcontext(0x09750002)]
        HRESULT FormattedText([out, retval] Range** prop);
        [id(0x00000002), propput, helpcontext(0x09750002)]
        HRESULT FormattedText([in] Range* prop);
        [id(0x00000003), propget, helpcontext(0x09750003)]
        HRESULT Start([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x09750003)]
        HRESULT Start([in] long prop);
        [id(0x00000004), propget, helpcontext(0x09750004)]
        HRESULT End([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x09750004)]
        HRESULT End([in] long prop);
        [id(0x00000005), propget, helpcontext(0x09750005)]
        HRESULT Font([out, retval] Font** prop);
        [id(0x00000005), propput, helpcontext(0x09750005)]
        HRESULT Font([in] Font* prop);
        [id(0x00000006), propget, helpcontext(0x09750006)]
        HRESULT Type([out, retval] WdSelectionType* prop);
        [id(0x00000007), propget, helpcontext(0x09750007)]
        HRESULT StoryType([out, retval] WdStoryType* prop);
        [id(0x00000008), propget, helpcontext(0x09750008)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(0x00000008), propput, helpcontext(0x09750008)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x00000032), propget, helpcontext(0x09750032)]
        HRESULT Tables([out, retval] Tables** prop);
        [id(0x00000033), propget, helpcontext(0x09750033)]
        HRESULT Words([out, retval] Words** prop);
        [id(0x00000034), propget, helpcontext(0x09750034)]
        HRESULT Sentences([out, retval] Sentences** prop);
        [id(0x00000035), propget, helpcontext(0x09750035)]
        HRESULT Characters([out, retval] Characters** prop);
        [id(0x00000036), propget, helpcontext(0x09750036)]
        HRESULT Footnotes([out, retval] Footnotes** prop);
        [id(0x00000037), propget, helpcontext(0x09750037)]
        HRESULT Endnotes([out, retval] Endnotes** prop);
        [id(0x00000038), propget, helpcontext(0x09750038)]
        HRESULT Comments([out, retval] Comments** prop);
        [id(0x00000039), propget, helpcontext(0x09750039)]
        HRESULT Cells([out, retval] Cells** prop);
        [id(0x0000003a), propget, helpcontext(0x0975003a)]
        HRESULT Sections([out, retval] Sections** prop);
        [id(0x0000003b), propget, helpcontext(0x0975003b)]
        HRESULT Paragraphs([out, retval] Paragraphs** prop);
        [id(0x0000044c), propget, helpcontext(0x0975044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x0975044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x0000003d), propget, helpcontext(0x0975003d)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000040), propget, helpcontext(0x09750040)]
        HRESULT Fields([out, retval] Fields** prop);
        [id(0x00000041), propget, helpcontext(0x09750041)]
        HRESULT FormFields([out, retval] FormFields** prop);
        [id(0x00000042), propget, helpcontext(0x09750042)]
        HRESULT Frames([out, retval] Frames** prop);
        [id(0x0000044e), propget, helpcontext(0x0975044e)]
        HRESULT ParagraphFormat([out, retval] ParagraphFormat** prop);
        [id(0x0000044e), propput, helpcontext(0x0975044e)]
        HRESULT ParagraphFormat([in] ParagraphFormat* prop);
        [id(0x0000044d), propget, helpcontext(0x0975044d)]
        HRESULT PageSetup([out, retval] PageSetup** prop);
        [id(0x0000044d), propput, helpcontext(0x0975044d)]
        HRESULT PageSetup([in] PageSetup* prop);
        [id(0x0000004b), propget, helpcontext(0x0975004b)]
        HRESULT Bookmarks([out, retval] Bookmarks** prop);
        [id(0x00000098), propget, helpcontext(0x09750098)]
        HRESULT StoryLength([out, retval] long* prop);
        [id(0x00000099), propget, helpcontext(0x09750099)]
        HRESULT LanguageID([out, retval] WdLanguageID* prop);
        [id(0x00000099), propput, helpcontext(0x09750099)]
        HRESULT LanguageID([in] WdLanguageID prop);
        [id(0x0000009a), propget, helpcontext(0x0975009a)]
        HRESULT LanguageIDFarEast([out, retval] WdLanguageID* prop);
        [id(0x0000009a), propput, helpcontext(0x0975009a)]
        HRESULT LanguageIDFarEast([in] WdLanguageID prop);
        [id(0x0000009b), propget, helpcontext(0x0975009b)]
        HRESULT LanguageIDOther([out, retval] WdLanguageID* prop);
        [id(0x0000009b), propput, helpcontext(0x0975009b)]
        HRESULT LanguageIDOther([in] WdLanguageID prop);
        [id(0x0000009c), propget, helpcontext(0x0975009c)]
        HRESULT Hyperlinks([out, retval] Hyperlinks** prop);
        [id(0x0000012e), propget, helpcontext(0x0975012e)]
        HRESULT Columns([out, retval] Columns** prop);
        [id(0x0000012f), propget, helpcontext(0x0975012f)]
        HRESULT Rows([out, retval] Rows** prop);
        [id(0x00000132), propget, helpcontext(0x09750132)]
        HRESULT HeaderFooter([out, retval] HeaderFooter** prop);
        [id(0x00000133), propget, helpcontext(0x09750133)]
        HRESULT IsEndOfRowMark([out, retval] VARIANT_BOOL* prop);
        [id(0x00000134), propget, helpcontext(0x09750134)]
        HRESULT BookmarkID([out, retval] long* prop);
        [id(0x00000135), propget, helpcontext(0x09750135)]
        HRESULT PreviousBookmarkID([out, retval] long* prop);
        [id(0x00000106), propget, helpcontext(0x09750106)]
        HRESULT Find([out, retval] Find** prop);
        [id(0x00000190), propget, helpcontext(0x09750190)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000191), propget, helpcontext(0x09750191)]
        HRESULT Information(
                        [in] WdInformation Type, 
                        [out, retval] VARIANT* prop);
        [id(0x00000192), propget, helpcontext(0x09750192)]
        HRESULT Flags([out, retval] WdSelectionFlags* prop);
        [id(0x00000192), propput, helpcontext(0x09750192)]
        HRESULT Flags([in] WdSelectionFlags prop);
        [id(0x00000193), propget, helpcontext(0x09750193)]
        HRESULT Active([out, retval] VARIANT_BOOL* prop);
        [id(0x00000194), propget, helpcontext(0x09750194)]
        HRESULT StartIsActive([out, retval] VARIANT_BOOL* prop);
        [id(0x00000194), propput, helpcontext(0x09750194)]
        HRESULT StartIsActive([in] VARIANT_BOOL prop);
        [id(0x00000195), propget, helpcontext(0x09750195)]
        HRESULT IPAtEndOfLine([out, retval] VARIANT_BOOL* prop);
        [id(0x00000196), propget, helpcontext(0x09750196)]
        HRESULT ExtendMode([out, retval] VARIANT_BOOL* prop);
        [id(0x00000196), propput, helpcontext(0x09750196)]
        HRESULT ExtendMode([in] VARIANT_BOOL prop);
        [id(0x00000197), propget, helpcontext(0x09750197)]
        HRESULT ColumnSelectMode([out, retval] VARIANT_BOOL* prop);
        [id(0x00000197), propput, helpcontext(0x09750197)]
        HRESULT ColumnSelectMode([in] VARIANT_BOOL prop);
        [id(0x0000019a), propget, helpcontext(0x0975019a)]
        HRESULT Orientation([out, retval] WdTextOrientation* prop);
        [id(0x0000019a), propput, helpcontext(0x0975019a)]
        HRESULT Orientation([in] WdTextOrientation prop);
        [id(0x0000019b), propget, helpcontext(0x0975019b)]
        HRESULT InlineShapes([out, retval] InlineShapes** prop);
        [id(0x000003e8), propget, helpcontext(0x097503e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), propget, helpcontext(0x097503eb)]
        HRESULT Document([out, retval] Document** prop);
        [id(0x000003ec), propget, helpcontext(0x097503ec)]
        HRESULT ShapeRange([out, retval] ShapeRange** prop);
        [id(0x0000ffff), helpcontext(0x0975ffff)]
        HRESULT Select();
        [id(0x00000064), helpcontext(0x09750064)]
        HRESULT SetRange(
                        [in] long Start, 
                        [in] long End);
        [id(0x00000065), helpcontext(0x09750065)]
        HRESULT Collapse([in, optional] VARIANT* Direction);
        [id(0x00000066), helpcontext(0x09750066)]
        HRESULT InsertBefore([in] BSTR Text);
        [id(0x00000068), helpcontext(0x09750068)]
        HRESULT InsertAfter([in] BSTR Text);
        [id(0x00000069), helpcontext(0x09750069)]
        HRESULT Next(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] Range** prop);
        [id(0x0000006a), helpcontext(0x0975006a)]
        HRESULT Previous(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] Range** prop);
        [id(0x0000006b), helpcontext(0x0975006b)]
        HRESULT StartOf(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x0000006c), helpcontext(0x0975006c)]
        HRESULT EndOf(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x0000006d), helpcontext(0x0975006d)]
        HRESULT Move(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x0000006e), helpcontext(0x0975006e)]
        HRESULT MoveStart(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x0000006f), helpcontext(0x0975006f)]
        HRESULT MoveEnd(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000070), helpcontext(0x09750070)]
        HRESULT MoveWhile(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000071), helpcontext(0x09750071)]
        HRESULT MoveStartWhile(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000072), helpcontext(0x09750072)]
        HRESULT MoveEndWhile(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000073), helpcontext(0x09750073)]
        HRESULT MoveUntil(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000074), helpcontext(0x09750074)]
        HRESULT MoveStartUntil(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000075), helpcontext(0x09750075)]
        HRESULT MoveEndUntil(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000077), helpcontext(0x09750077)]
        HRESULT Cut();
        [id(0x00000078), helpcontext(0x09750078)]
        HRESULT Copy();
        [id(0x00000079), helpcontext(0x09750079)]
        HRESULT Paste();
        [id(0x0000007a), helpcontext(0x0975007a)]
        HRESULT InsertBreak([in, optional] VARIANT* Type);
        [id(0x0000007b), helpcontext(0x0975007b)]
        HRESULT InsertFile(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* Link, 
                        [in, optional] VARIANT* Attachment);
        [id(0x0000007d), helpcontext(0x0975007d)]
        HRESULT InStory(
                        [in] Range* Range, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000007e), helpcontext(0x0975007e)]
        HRESULT InRange(
                        [in] Range* Range, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000007f), helpcontext(0x0975007f)]
        HRESULT Delete(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000081), helpcontext(0x09750081)]
        HRESULT Expand(
                        [in, optional] VARIANT* Unit, 
                        [out, retval] long* prop);
        [id(0x000000a0), helpcontext(0x097500a0)]
        HRESULT InsertParagraph();
        [id(0x000000a1), helpcontext(0x097500a1)]
        HRESULT InsertParagraphAfter();
        [id(0x000000a2), hidden, helpcontext(0x097500a2)]
        HRESULT ConvertToTableOld(
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* NumRows, 
                        [in, optional] VARIANT* NumColumns, 
                        [in, optional] VARIANT* InitialColumnWidth, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ApplyBorders, 
                        [in, optional] VARIANT* ApplyShading, 
                        [in, optional] VARIANT* ApplyFont, 
                        [in, optional] VARIANT* ApplyColor, 
                        [in, optional] VARIANT* ApplyHeadingRows, 
                        [in, optional] VARIANT* ApplyLastRow, 
                        [in, optional] VARIANT* ApplyFirstColumn, 
                        [in, optional] VARIANT* ApplyLastColumn, 
                        [in, optional] VARIANT* AutoFit, 
                        [out, retval] Table** prop);
        [id(0x000000a3), hidden, helpcontext(0x097500a3)]
        HRESULT InsertDateTimeOld(
                        [in, optional] VARIANT* DateTimeFormat, 
                        [in, optional] VARIANT* InsertAsField, 
                        [in, optional] VARIANT* InsertAsFullWidth);
        [id(0x000000a4), helpcontext(0x097500a4)]
        HRESULT InsertSymbol(
                        [in] long CharacterNumber, 
                        [in, optional] VARIANT* Font, 
                        [in, optional] VARIANT* Unicode, 
                        [in, optional] VARIANT* Bias);
        [id(0x000000a5), hidden, helpcontext(0x097500a5)]
        HRESULT InsertCrossReference_2002(
                        [in] VARIANT* ReferenceType, 
                        [in] WdReferenceKind ReferenceKind, 
                        [in] VARIANT* ReferenceItem, 
                        [in, optional] VARIANT* InsertAsHyperlink, 
                        [in, optional] VARIANT* IncludePosition);
        [id(0x000000a6), hidden, helpcontext(0x097500a6)]
        HRESULT InsertCaptionXP(
                        [in] VARIANT* Label, 
                        [in, optional] VARIANT* Title, 
                        [in, optional] VARIANT* TitleAutoText, 
                        [in, optional] VARIANT* Position);
        [id(0x000000a7), helpcontext(0x097500a7)]
        HRESULT CopyAsPicture();
        [id(0x000000a8), hidden, helpcontext(0x097500a8)]
        HRESULT SortOld(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* FieldNumber, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* FieldNumber2, 
                        [in, optional] VARIANT* SortFieldType2, 
                        [in, optional] VARIANT* SortOrder2, 
                        [in, optional] VARIANT* FieldNumber3, 
                        [in, optional] VARIANT* SortFieldType3, 
                        [in, optional] VARIANT* SortOrder3, 
                        [in, optional] VARIANT* SortColumn, 
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* LanguageID);
        [id(0x000000a9), helpcontext(0x097500a9)]
        HRESULT SortAscending();
        [id(0x000000aa), helpcontext(0x097500aa)]
        HRESULT SortDescending();
        [id(0x000000ab), helpcontext(0x097500ab)]
        HRESULT IsEqual(
                        [in] Range* Range, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x000000ac), helpcontext(0x097500ac)]
        HRESULT Calculate([out, retval] int* prop);
        [id(0x000000ad), helpcontext(0x097500ad)]
        HRESULT GoTo(
                        [in, optional] VARIANT* What, 
                        [in, optional] VARIANT* Which, 
                        [in, optional] VARIANT* Count, 
                        [in, optional] VARIANT* Name, 
                        [out, retval] Range** prop);
        [id(0x000000ae), helpcontext(0x097500ae)]
        HRESULT GoToNext(
                        [in] WdGoToItem What, 
                        [out, retval] Range** prop);
        [id(0x000000af), helpcontext(0x097500af)]
        HRESULT GoToPrevious(
                        [in] WdGoToItem What, 
                        [out, retval] Range** prop);
        [id(0x000000b0), helpcontext(0x097500b0)]
        HRESULT PasteSpecial(
                        [in, optional] VARIANT* IconIndex, 
                        [in, optional] VARIANT* Link, 
                        [in, optional] VARIANT* Placement, 
                        [in, optional] VARIANT* DisplayAsIcon, 
                        [in, optional] VARIANT* DataType, 
                        [in, optional] VARIANT* IconFileName, 
                        [in, optional] VARIANT* IconLabel);
        [id(0x000000b1), helpcontext(0x097500b1)]
        HRESULT PreviousField([out, retval] Field** prop);
        [id(0x000000b2), helpcontext(0x097500b2)]
        HRESULT NextField([out, retval] Field** prop);
        [id(0x000000d4), helpcontext(0x097500d4)]
        HRESULT InsertParagraphBefore();
        [id(0x000000d6), helpcontext(0x097500d6)]
        HRESULT InsertCells([in, optional] VARIANT* ShiftCells);
        [id(0x0000012c), helpcontext(0x0975012c)]
        HRESULT Extend([in, optional] VARIANT* Character);
        [id(0x0000012d), helpcontext(0x0975012d)]
        HRESULT Shrink();
        [id(0x000001f4), helpcontext(0x097501f4)]
        HRESULT MoveLeft(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x000001f5), helpcontext(0x097501f5)]
        HRESULT MoveRight(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x000001f6), helpcontext(0x097501f6)]
        HRESULT MoveUp(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x000001f7), helpcontext(0x097501f7)]
        HRESULT MoveDown(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x000001f8), helpcontext(0x097501f8)]
        HRESULT HomeKey(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x000001f9), helpcontext(0x097501f9)]
        HRESULT EndKey(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x000001fa), helpcontext(0x097501fa)]
        HRESULT EscapeKey();
        [id(0x000001fb), helpcontext(0x097501fb)]
        HRESULT TypeText([in] BSTR Text);
        [id(0x000001fd), helpcontext(0x097501fd)]
        HRESULT CopyFormat();
        [id(0x000001fe), helpcontext(0x097501fe)]
        HRESULT PasteFormat();
        [id(0x00000200), helpcontext(0x09750200)]
        HRESULT TypeParagraph();
        [id(0x00000201), helpcontext(0x09750201)]
        HRESULT TypeBackspace();
        [id(0x00000202), helpcontext(0x09750202)]
        HRESULT NextSubdocument();
        [id(0x00000203), helpcontext(0x09750203)]
        HRESULT PreviousSubdocument();
        [id(0x00000204), helpcontext(0x09750204)]
        HRESULT SelectColumn();
        [id(0x00000205), helpcontext(0x09750205)]
        HRESULT SelectCurrentFont();
        [id(0x00000206), helpcontext(0x09750206)]
        HRESULT SelectCurrentAlignment();
        [id(0x00000207), helpcontext(0x09750207)]
        HRESULT SelectCurrentSpacing();
        [id(0x00000208), helpcontext(0x09750208)]
        HRESULT SelectCurrentIndent();
        [id(0x00000209), helpcontext(0x09750209)]
        HRESULT SelectCurrentTabs();
        [id(0x0000020a), helpcontext(0x0975020a)]
        HRESULT SelectCurrentColor();
        [id(0x0000020b), helpcontext(0x0975020b)]
        HRESULT CreateTextbox();
        [id(0x0000020c), helpcontext(0x0975020c)]
        HRESULT WholeStory();
        [id(0x0000020d), helpcontext(0x0975020d)]
        HRESULT SelectRow();
        [id(0x0000020e), helpcontext(0x0975020e)]
        HRESULT SplitTable();
        [id(0x00000210), helpcontext(0x09750210)]
        HRESULT InsertRows([in, optional] VARIANT* NumRows);
        [id(0x00000211), helpcontext(0x09750211)]
        HRESULT InsertColumns();
        [id(0x00000212), helpcontext(0x09750212)]
        HRESULT InsertFormula(
                        [in, optional] VARIANT* Formula, 
                        [in, optional] VARIANT* NumberFormat);
        [id(0x00000213), helpcontext(0x09750213)]
        HRESULT NextRevision(
                        [in, optional] VARIANT* Wrap, 
                        [out, retval] Revision** prop);
        [id(0x00000214), helpcontext(0x09750214)]
        HRESULT PreviousRevision(
                        [in, optional] VARIANT* Wrap, 
                        [out, retval] Revision** prop);
        [id(0x00000215), helpcontext(0x09750215)]
        HRESULT PasteAsNestedTable();
        [id(0x00000216), helpcontext(0x09750216)]
        HRESULT CreateAutoTextEntry(
                        [in] BSTR Name, 
                        [in] BSTR StyleName, 
                        [out, retval] AutoTextEntry** prop);
        [id(0x00000217), helpcontext(0x09750217)]
        HRESULT DetectLanguage();
        [id(0x00000218), helpcontext(0x09750218)]
        HRESULT SelectCell();
        [id(0x00000219), helpcontext(0x09750219)]
        HRESULT InsertRowsBelow([in, optional] VARIANT* NumRows);
        [id(0x0000021a), helpcontext(0x0975021a)]
        HRESULT InsertColumnsRight();
        [id(0x0000021b), helpcontext(0x0975021b)]
        HRESULT InsertRowsAbove([in, optional] VARIANT* NumRows);
        [id(0x00000258), helpcontext(0x09750258)]
        HRESULT RtlRun();
        [id(0x00000259), helpcontext(0x09750259)]
        HRESULT LtrRun();
        [id(0x0000025a), helpcontext(0x0975025a)]
        HRESULT BoldRun();
        [id(0x0000025b), helpcontext(0x0975025b)]
        HRESULT ItalicRun();
        [id(0x0000025d), helpcontext(0x0975025d)]
        HRESULT RtlPara();
        [id(0x0000025e), helpcontext(0x0975025e)]
        HRESULT LtrPara();
        [id(0x000001bc), helpcontext(0x097501bc)]
        HRESULT InsertDateTime(
                        [in, optional] VARIANT* DateTimeFormat, 
                        [in, optional] VARIANT* InsertAsField, 
                        [in, optional] VARIANT* InsertAsFullWidth, 
                        [in, optional] VARIANT* DateLanguage, 
                        [in, optional] VARIANT* CalendarType);
        [id(0x000001bd), hidden, helpcontext(0x097501bd)]
        HRESULT Sort2000(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* FieldNumber, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* FieldNumber2, 
                        [in, optional] VARIANT* SortFieldType2, 
                        [in, optional] VARIANT* SortOrder2, 
                        [in, optional] VARIANT* FieldNumber3, 
                        [in, optional] VARIANT* SortFieldType3, 
                        [in, optional] VARIANT* SortOrder3, 
                        [in, optional] VARIANT* SortColumn, 
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* BidiSort, 
                        [in, optional] VARIANT* IgnoreThe, 
                        [in, optional] VARIANT* IgnoreKashida, 
                        [in, optional] VARIANT* IgnoreDiacritics, 
                        [in, optional] VARIANT* IgnoreHe, 
                        [in, optional] VARIANT* LanguageID);
        [id(0x000001c9), helpcontext(0x097501c9)]
        HRESULT ConvertToTable(
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* NumRows, 
                        [in, optional] VARIANT* NumColumns, 
                        [in, optional] VARIANT* InitialColumnWidth, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ApplyBorders, 
                        [in, optional] VARIANT* ApplyShading, 
                        [in, optional] VARIANT* ApplyFont, 
                        [in, optional] VARIANT* ApplyColor, 
                        [in, optional] VARIANT* ApplyHeadingRows, 
                        [in, optional] VARIANT* ApplyLastRow, 
                        [in, optional] VARIANT* ApplyFirstColumn, 
                        [in, optional] VARIANT* ApplyLastColumn, 
                        [in, optional] VARIANT* AutoFit, 
                        [in, optional] VARIANT* AutoFitBehavior, 
                        [in, optional] VARIANT* DefaultTableBehavior, 
                        [out, retval] Table** prop);
        [id(0x000003ed), propget, helpcontext(0x097503ed)]
        HRESULT NoProofing([out, retval] long* prop);
        [id(0x000003ed), propput, helpcontext(0x097503ed)]
        HRESULT NoProofing([in] long prop);
        [id(0x000003ee), propget, helpcontext(0x097503ee)]
        HRESULT TopLevelTables([out, retval] Tables** prop);
        [id(0x000003ef), propget, helpcontext(0x097503ef)]
        HRESULT LanguageDetected([out, retval] VARIANT_BOOL* prop);
        [id(0x000003ef), propput, helpcontext(0x097503ef)]
        HRESULT LanguageDetected([in] VARIANT_BOOL prop);
        [id(0x000003f0), propget, helpcontext(0x097503f0)]
        HRESULT FitTextWidth([out, retval] int* prop);
        [id(0x000003f0), propput, helpcontext(0x097503f0)]
        HRESULT FitTextWidth([in] int prop);
        [id(0x000003f1), helpcontext(0x097503f1)]
        HRESULT ClearFormatting();
        [id(0x000003f2), helpcontext(0x097503f2)]
        HRESULT PasteAppendTable();
        [id(0x000003f3), propget, helpcontext(0x097503f3)]
        HRESULT HTMLDivisions([out, retval] HTMLDivisions** prop);
        [id(0x000003f7), propget, helpcontext(0x097503f7)]
        HRESULT SmartTags([out, retval] SmartTags** prop);
        [id(0x000003fd), propget, helpcontext(0x097503fd)]
        HRESULT ChildShapeRange([out, retval] ShapeRange** prop);
        [id(0x000003fe), propget, helpcontext(0x097503fe)]
        HRESULT HasChildShapeRange([out, retval] VARIANT_BOOL* prop);
        [id(0x00000400), propget, helpcontext(0x09750400)]
        HRESULT FootnoteOptions([out, retval] FootnoteOptions** prop);
        [id(0x00000401), propget, helpcontext(0x09750401)]
        HRESULT EndnoteOptions([out, retval] EndnoteOptions** prop);
        [id(0x000003f4), helpcontext(0x097503f4)]
        HRESULT ToggleCharacterCode();
        [id(0x000003f5), helpcontext(0x097503f5)]
        HRESULT PasteAndFormat([in] WdRecoveryType Type);
        [id(0x000003f6), helpcontext(0x097503f6)]
        HRESULT PasteExcelTable(
                        [in] VARIANT_BOOL LinkedToExcel, 
                        [in] VARIANT_BOOL WordFormatting, 
                        [in] VARIANT_BOOL RTF);
        [id(0x000003fb), helpcontext(0x097503fb)]
        HRESULT ShrinkDiscontiguousSelection();
        [id(0x000003fc), helpcontext(0x097503fc)]
        HRESULT InsertStyleSeparator();
        [id(0x000003ff), helpcontext(0x097503ff)]
        HRESULT Sort(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* FieldNumber, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* FieldNumber2, 
                        [in, optional] VARIANT* SortFieldType2, 
                        [in, optional] VARIANT* SortOrder2, 
                        [in, optional] VARIANT* FieldNumber3, 
                        [in, optional] VARIANT* SortFieldType3, 
                        [in, optional] VARIANT* SortOrder3, 
                        [in, optional] VARIANT* SortColumn, 
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* BidiSort, 
                        [in, optional] VARIANT* IgnoreThe, 
                        [in, optional] VARIANT* IgnoreKashida, 
                        [in, optional] VARIANT* IgnoreDiacritics, 
                        [in, optional] VARIANT* IgnoreHe, 
                        [in, optional] VARIANT* LanguageID, 
                        [in, optional] VARIANT* SubFieldNumber, 
                        [in, optional] VARIANT* SubFieldNumber2, 
                        [in, optional] VARIANT* SubFieldNumber3);
        [id(0x00000136), propget, helpcontext(0x09750136)]
        HRESULT XMLNodes([out, retval] XMLNodes** prop);
        [id(0x00000137), propget, helpcontext(0x09750137)]
        HRESULT XMLParentNode([out, retval] XMLNode** prop);
        [id(0x00000139), propget, helpcontext(0x09750139)]
        HRESULT Editors([out, retval] Editors** prop);
        [id(0x0000013a), propget, helpcontext(0x0975013a)]
        HRESULT XML(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL DataOnly, 
                        [out, retval] BSTR* prop);
        [id(0x0000013b), propget, helpcontext(0x0975013b)]
        HRESULT EnhMetaFileBits([out, retval] VARIANT* prop);
        [id(0x00000403), helpcontext(0x09750403)]
        HRESULT GoToEditableRange(
                        [in, optional] VARIANT* EditorID, 
                        [out, retval] Range** prop);
        [id(0x00000404), helpcontext(0x09750404)]
        HRESULT InsertXML(
                        [in] BSTR XML, 
                        [in, optional] VARIANT* Transform);
        [id(0x000001a1), helpcontext(0x097501a1)]
        HRESULT InsertCaption(
                        [in] VARIANT* Label, 
                        [in, optional] VARIANT* Title, 
                        [in, optional] VARIANT* TitleAutoText, 
                        [in, optional] VARIANT* Position, 
                        [in, optional] VARIANT* ExcludeLabel);
        [id(0x000001a2), helpcontext(0x097501a2)]
        HRESULT InsertCrossReference(
                        [in] VARIANT* ReferenceType, 
                        [in] WdReferenceKind ReferenceKind, 
                        [in] VARIANT* ReferenceItem, 
                        [in, optional] VARIANT* InsertAsHyperlink, 
                        [in, optional] VARIANT* IncludePosition, 
                        [in, optional] VARIANT* SeparateNumbers, 
                        [in, optional] VARIANT* SeparatorString);
    };

    [
      odl,
      uuid(00020976-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000976),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TablesOfAuthoritiesCategories : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097603e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0976fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09760001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09760000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] TableOfAuthoritiesCategory** prop);
    };

    [
      odl,
      uuid(00020977-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000977),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TableOfAuthoritiesCategory : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097703e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09770000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x09770000)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000001), propget, helpcontext(0x09770001)]
        HRESULT Index([out, retval] long* prop);
    };

    [
      odl,
      uuid(00020978-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000978),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CaptionLabels : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097803e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0978fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09780001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09780000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] CaptionLabel** prop);
        [id(0x00000064), helpcontext(0x09780064)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] CaptionLabel** prop);
    };

    [
      odl,
      uuid(00020979-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000979),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CaptionLabel : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09790000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09790001)]
        HRESULT BuiltIn([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propget, helpcontext(0x09790002)]
        HRESULT ID([out, retval] WdCaptionLabelID* prop);
        [id(0x00000003), propget, helpcontext(0x09790003)]
        HRESULT IncludeChapterNumber([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09790003)]
        HRESULT IncludeChapterNumber([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09790004)]
        HRESULT NumberStyle([out, retval] WdCaptionNumberStyle* prop);
        [id(0x00000004), propput, helpcontext(0x09790004)]
        HRESULT NumberStyle([in] WdCaptionNumberStyle prop);
        [id(0x00000005), propget, helpcontext(0x09790005)]
        HRESULT ChapterStyleLevel([out, retval] long* prop);
        [id(0x00000005), propput, helpcontext(0x09790005)]
        HRESULT ChapterStyleLevel([in] long prop);
        [id(0x00000006), propget, helpcontext(0x09790006)]
        HRESULT Separator([out, retval] WdSeparatorType* prop);
        [id(0x00000006), propput, helpcontext(0x09790006)]
        HRESULT Separator([in] WdSeparatorType prop);
        [id(0x00000007), propget, helpcontext(0x09790007)]
        HRESULT Position([out, retval] WdCaptionPosition* prop);
        [id(0x00000007), propput, helpcontext(0x09790007)]
        HRESULT Position([in] WdCaptionPosition prop);
        [id(0x00000064), helpcontext(0x09790064)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(0002097A-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000097a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AutoCaptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097a03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x097afffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x097a0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x097a0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] AutoCaption** prop);
        [id(0x00000064), helpcontext(0x097a0064)]
        HRESULT CancelAutoInsert();
    };

    [
      odl,
      uuid(0002097B-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000097b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AutoCaption : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097b03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x097b0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x097b0001)]
        HRESULT AutoInsert([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x097b0001)]
        HRESULT AutoInsert([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x097b0002)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x097b0003)]
        HRESULT CaptionLabel([out, retval] VARIANT* prop);
        [id(0x00000003), propput, helpcontext(0x097b0003)]
        HRESULT CaptionLabel([in] VARIANT* prop);
    };

    [
      odl,
      uuid(0002097C-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000097c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Indexes : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097c03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x097cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x097c0001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x097c0002)]
        HRESULT Format([out, retval] WdIndexFormat* prop);
        [id(0x00000002), propput, helpcontext(0x097c0002)]
        HRESULT Format([in] WdIndexFormat prop);
        [id(00000000), helpcontext(0x097c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Index** prop);
        [id(0x00000064), hidden, helpcontext(0x097c0064)]
        HRESULT AddOld(
                        [in] Range* Range, 
                        [in, optional] VARIANT* HeadingSeparator, 
                        [in, optional] VARIANT* RightAlignPageNumbers, 
                        [in, optional] VARIANT* Type, 
                        [in, optional] VARIANT* NumberOfColumns, 
                        [in, optional] VARIANT* AccentedLetters, 
                        [out, retval] Index** prop);
        [id(0x00000065), helpcontext(0x097c0065)]
        HRESULT MarkEntry(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Entry, 
                        [in, optional] VARIANT* EntryAutoText, 
                        [in, optional] VARIANT* CrossReference, 
                        [in, optional] VARIANT* CrossReferenceAutoText, 
                        [in, optional] VARIANT* BookmarkName, 
                        [in, optional] VARIANT* Bold, 
                        [in, optional] VARIANT* Italic, 
                        [in, optional] VARIANT* Reading, 
                        [out, retval] Field** prop);
        [id(0x00000066), helpcontext(0x097c0066)]
        HRESULT MarkAllEntries(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Entry, 
                        [in, optional] VARIANT* EntryAutoText, 
                        [in, optional] VARIANT* CrossReference, 
                        [in, optional] VARIANT* CrossReferenceAutoText, 
                        [in, optional] VARIANT* BookmarkName, 
                        [in, optional] VARIANT* Bold, 
                        [in, optional] VARIANT* Italic);
        [id(0x00000067), helpcontext(0x097c0067)]
        HRESULT AutoMarkEntries([in] BSTR ConcordanceFileName);
        [id(0x00000068), helpcontext(0x097c0068)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in, optional] VARIANT* HeadingSeparator, 
                        [in, optional] VARIANT* RightAlignPageNumbers, 
                        [in, optional] VARIANT* Type, 
                        [in, optional] VARIANT* NumberOfColumns, 
                        [in, optional] VARIANT* AccentedLetters, 
                        [in, optional] VARIANT* SortBy, 
                        [in, optional] VARIANT* IndexLanguage, 
                        [out, retval] Index** prop);
    };

    [
      odl,
      uuid(0002097D-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000097d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Index : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097d03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x097d0001)]
        HRESULT HeadingSeparator([out, retval] WdHeadingSeparator* prop);
        [id(0x00000001), propput, helpcontext(0x097d0001)]
        HRESULT HeadingSeparator([in] WdHeadingSeparator prop);
        [id(0x00000002), propget, helpcontext(0x097d0002)]
        HRESULT RightAlignPageNumbers([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x097d0002)]
        HRESULT RightAlignPageNumbers([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x097d0003)]
        HRESULT Type([out, retval] WdIndexType* prop);
        [id(0x00000003), propput, helpcontext(0x097d0003)]
        HRESULT Type([in] WdIndexType prop);
        [id(0x00000004), propget, helpcontext(0x097d0004)]
        HRESULT NumberOfColumns([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x097d0004)]
        HRESULT NumberOfColumns([in] long prop);
        [id(0x00000005), propget, helpcontext(0x097d0005)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000006), propget, helpcontext(0x097d0006)]
        HRESULT TabLeader([out, retval] WdTabLeader* prop);
        [id(0x00000006), propput, helpcontext(0x097d0006)]
        HRESULT TabLeader([in] WdTabLeader prop);
        [id(0x00000007), propget, helpcontext(0x097d0007)]
        HRESULT AccentedLetters([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propput, helpcontext(0x097d0007)]
        HRESULT AccentedLetters([in] VARIANT_BOOL prop);
        [id(0x00000008), propget, helpcontext(0x097d0008)]
        HRESULT SortBy([out, retval] WdIndexSortBy* prop);
        [id(0x00000008), propput, helpcontext(0x097d0008)]
        HRESULT SortBy([in] WdIndexSortBy prop);
        [id(0x00000009), propget, helpcontext(0x097d0009)]
        HRESULT Filter([out, retval] WdIndexFilter* prop);
        [id(0x00000009), propput, helpcontext(0x097d0009)]
        HRESULT Filter([in] WdIndexFilter prop);
        [id(0x00000064), helpcontext(0x097d0064)]
        HRESULT Delete();
        [id(0x00000066), helpcontext(0x097d0066)]
        HRESULT Update();
        [id(0x0000000a), propget, helpcontext(0x097d000a)]
        HRESULT IndexLanguage([out, retval] WdLanguageID* prop);
        [id(0x0000000a), propput, helpcontext(0x097d000a)]
        HRESULT IndexLanguage([in] WdLanguageID prop);
    };

    [
      odl,
      uuid(0002097E-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000097e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AddIn : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097e03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x097e0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x097e0001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x097e0003)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000004), propget, helpcontext(0x097e0004)]
        HRESULT Installed([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x097e0004)]
        HRESULT Installed([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x097e0005)]
        HRESULT Compiled([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propget, helpcontext(0x097e0006)]
        HRESULT Autoload([out, retval] VARIANT_BOOL* prop);
        [id(0x00000065), helpcontext(0x097e0065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(0002097F-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000097f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AddIns : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097f03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097f03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097f03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x097ffffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x097f0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x097f0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] AddIn** prop);
        [id(0x00000002), helpcontext(0x097f0002)]
        HRESULT Add(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* Install, 
                        [out, retval] AddIn** prop);
        [id(0x00000003), helpcontext(0x097f0003)]
        HRESULT Unload([in] VARIANT_BOOL RemoveFromList);
    };

    [
      odl,
      uuid(00020980-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000980),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Revisions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0980fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000005), propget, helpcontext(0x09800005)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09800000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Revision** prop);
        [id(0x00000065), helpcontext(0x09800065)]
        HRESULT AcceptAll();
        [id(0x00000066), helpcontext(0x09800066)]
        HRESULT RejectAll();
    };

    [
      odl,
      uuid(00020981-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000981),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Revision : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098103e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09810001)]
        HRESULT Author([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x09810002)]
        HRESULT Date([out, retval] DATE* prop);
        [id(0x00000003), propget, helpcontext(0x09810003)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000004), propget, helpcontext(0x09810004)]
        HRESULT Type([out, retval] WdRevisionType* prop);
        [id(0x00000005), propget, helpcontext(0x09810005)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000065), helpcontext(0x09810065)]
        HRESULT Accept();
        [id(0x00000066), helpcontext(0x09810066)]
        HRESULT Reject();
        [id(0x00000008), propget, helpcontext(0x09810008)]
        HRESULT Style([out, retval] Style** prop);
        [id(0x00000009), propget, helpcontext(0x09810009)]
        HRESULT FormatDescription([out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(00020982-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000982),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Task : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098203e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09820000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09820001)]
        HRESULT Left([out, retval] long* prop);
        [id(0x00000001), propput, helpcontext(0x09820001)]
        HRESULT Left([in] long prop);
        [id(0x00000002), propget, helpcontext(0x09820002)]
        HRESULT Top([out, retval] long* prop);
        [id(0x00000002), propput, helpcontext(0x09820002)]
        HRESULT Top([in] long prop);
        [id(0x00000003), propget, helpcontext(0x09820003)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x09820003)]
        HRESULT Width([in] long prop);
        [id(0x00000004), propget, helpcontext(0x09820004)]
        HRESULT Height([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x09820004)]
        HRESULT Height([in] long prop);
        [id(0x00000005), propget, helpcontext(0x09820005)]
        HRESULT WindowState([out, retval] WdWindowState* prop);
        [id(0x00000005), propput, helpcontext(0x09820005)]
        HRESULT WindowState([in] WdWindowState prop);
        [id(0x00000006), propget, helpcontext(0x09820006)]
        HRESULT Visible([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x09820006)]
        HRESULT Visible([in] VARIANT_BOOL prop);
        [id(0x0000000a), helpcontext(0x0982000a)]
        HRESULT Activate([in, optional] VARIANT* Wait);
        [id(0x0000000b), helpcontext(0x0982000b)]
        HRESULT Close();
        [id(0x0000000c), helpcontext(0x0982000c)]
        HRESULT Move(
                        [in] long Left, 
                        [in] long Top);
        [id(0x0000000d), helpcontext(0x0982000d)]
        HRESULT Resize(
                        [in] long Width, 
                        [in] long Height);
        [id(0x0000000e), helpcontext(0x0982000e)]
        HRESULT SendWindowMessage(
                        [in] long Message, 
                        [in] long wParam, 
                        [in] long lParam);
    };

    [
      odl,
      uuid(00020983-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000983),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Tasks : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098303e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0983fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09830001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09830000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Task** prop);
        [id(0x00000002), helpcontext(0x09830002)]
        HRESULT Exists(
                        [in] BSTR Name, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), helpcontext(0x09830003)]
        HRESULT ExitWindows();
    };

    [
      odl,
      uuid(00020984-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000984),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HeadersFooters : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098403e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0984fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09840001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09840000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] WdHeaderFooterIndex Index, 
                        [out, retval] HeaderFooter** prop);
    };

    [
      odl,
      uuid(00020985-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000985),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HeaderFooter : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098503e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09850000)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000002), propget, helpcontext(0x09850002)]
        HRESULT Index([out, retval] WdHeaderFooterIndex* prop);
        [id(0x00000003), propget, helpcontext(0x09850003)]
        HRESULT IsHeader([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propget, helpcontext(0x09850004)]
        HRESULT Exists([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09850004)]
        HRESULT Exists([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x09850005)]
        HRESULT PageNumbers([out, retval] PageNumbers** prop);
        [id(0x00000006), propget, helpcontext(0x09850006)]
        HRESULT LinkToPrevious([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x09850006)]
        HRESULT LinkToPrevious([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09850007)]
        HRESULT Shapes([out, retval] Shapes** prop);
    };

    [
      odl,
      uuid(00020986-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000986),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PageNumbers : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098603e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0986fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09860001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09860002)]
        HRESULT NumberStyle([out, retval] WdPageNumberStyle* prop);
        [id(0x00000002), propput, helpcontext(0x09860002)]
        HRESULT NumberStyle([in] WdPageNumberStyle prop);
        [id(0x00000003), propget, helpcontext(0x09860003)]
        HRESULT IncludeChapterNumber([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09860003)]
        HRESULT IncludeChapterNumber([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09860004)]
        HRESULT HeadingLevelForChapter([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x09860004)]
        HRESULT HeadingLevelForChapter([in] long prop);
        [id(0x00000005), propget, helpcontext(0x09860005)]
        HRESULT ChapterPageSeparator([out, retval] WdSeparatorType* prop);
        [id(0x00000005), propput, helpcontext(0x09860005)]
        HRESULT ChapterPageSeparator([in] WdSeparatorType prop);
        [id(0x00000006), propget, helpcontext(0x09860006)]
        HRESULT RestartNumberingAtSection([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x09860006)]
        HRESULT RestartNumberingAtSection([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09860007)]
        HRESULT StartingNumber([out, retval] long* prop);
        [id(0x00000007), propput, helpcontext(0x09860007)]
        HRESULT StartingNumber([in] long prop);
        [id(0x00000008), propget, helpcontext(0x09860008)]
        HRESULT ShowFirstPageNumber([out, retval] VARIANT_BOOL* prop);
        [id(0x00000008), propput, helpcontext(0x09860008)]
        HRESULT ShowFirstPageNumber([in] VARIANT_BOOL prop);
        [id(00000000), helpcontext(0x09860000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] PageNumber** prop);
        [id(0x00000065), helpcontext(0x09860065)]
        HRESULT Add(
                        [in, optional] VARIANT* PageNumberAlignment, 
                        [in, optional] VARIANT* FirstPage, 
                        [out, retval] PageNumber** prop);
        [id(0x0000000a), propget, helpcontext(0x0986000a)]
        HRESULT DoubleQuote([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000a), propput, helpcontext(0x0986000a)]
        HRESULT DoubleQuote([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020987-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000987),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PageNumber : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098703e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09870001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09870003)]
        HRESULT Alignment([out, retval] WdPageNumberAlignment* prop);
        [id(0x00000003), propput, helpcontext(0x09870003)]
        HRESULT Alignment([in] WdPageNumberAlignment prop);
        [id(0x0000ffff), helpcontext(0x0987ffff)]
        HRESULT Select();
        [id(0x00000065), helpcontext(0x09870065)]
        HRESULT Copy();
        [id(0x00000066), helpcontext(0x09870066)]
        HRESULT Cut();
        [id(0x00000067), helpcontext(0x09870067)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(00020988-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000988),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Subdocuments : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098803e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09880001)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x0988fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09880002)]
        HRESULT Expanded([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09880002)]
        HRESULT Expanded([in] VARIANT_BOOL prop);
        [id(00000000), helpcontext(0x09880000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Subdocument** prop);
        [id(0x00000064), helpcontext(0x09880064)]
        HRESULT AddFromFile(
                        [in] VARIANT* Name, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [out, retval] Subdocument** prop);
        [id(0x00000065), helpcontext(0x09880065)]
        HRESULT AddFromRange(
                        [in] Range* Range, 
                        [out, retval] Subdocument** prop);
        [id(0x00000066), helpcontext(0x09880066)]
        HRESULT Merge(
                        [in, optional] VARIANT* FirstSubdocument, 
                        [in, optional] VARIANT* LastSubdocument);
        [id(0x00000067), helpcontext(0x09880067)]
        HRESULT Delete();
        [id(0x00000068), helpcontext(0x09880068)]
        HRESULT Select();
    };

    [
      odl,
      uuid(00020989-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000989),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Subdocument : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09890001)]
        HRESULT Locked([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09890001)]
        HRESULT Locked([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x09890002)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000003), propget, helpcontext(0x09890003)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000004), propget, helpcontext(0x09890004)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000005), propget, helpcontext(0x09890005)]
        HRESULT HasFile([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propget, helpcontext(0x09890006)]
        HRESULT Level([out, retval] long* prop);
        [id(0x00000064), helpcontext(0x09890064)]
        HRESULT Delete();
        [id(0x00000065), helpcontext(0x09890065)]
        HRESULT Split([in] Range* Range);
        [id(0x00000066), helpcontext(0x09890066)]
        HRESULT Open([out, retval] Document** prop);
    };

    [
      odl,
      uuid(0002098A-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000098a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HeadingStyles : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098a03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x098afffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x098a0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x098a0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] HeadingStyle** prop);
        [id(0x00000064), helpcontext(0x098a0064)]
        HRESULT Add(
                        [in] VARIANT* Style, 
                        [in] short Level, 
                        [out, retval] HeadingStyle** prop);
    };

    [
      odl,
      uuid(0002098B-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000098b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HeadingStyle : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098b03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x098b0000)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(00000000), propput, helpcontext(0x098b0000)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x00000002), propget, helpcontext(0x098b0002)]
        HRESULT Level([out, retval] short* prop);
        [id(0x00000002), propput, helpcontext(0x098b0002)]
        HRESULT Level([in] short prop);
        [id(0x00000064), helpcontext(0x098b0064)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(0002098C-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000098c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface StoryRanges : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x098cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x098c0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x098c03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x098c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] WdStoryType Index, 
                        [out, retval] Range** prop);
    };

    [
      odl,
      uuid(0002098D-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000098d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListLevel : IDispatch {
        [id(0x00000001), propget, helpcontext(0x098d0001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x098d0002)]
        HRESULT NumberFormat([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x098d0002)]
        HRESULT NumberFormat([in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x098d0003)]
        HRESULT TrailingCharacter([out, retval] WdTrailingCharacter* prop);
        [id(0x00000003), propput, helpcontext(0x098d0003)]
        HRESULT TrailingCharacter([in] WdTrailingCharacter prop);
        [id(0x00000004), propget, helpcontext(0x098d0004)]
        HRESULT NumberStyle([out, retval] WdListNumberStyle* prop);
        [id(0x00000004), propput, helpcontext(0x098d0004)]
        HRESULT NumberStyle([in] WdListNumberStyle prop);
        [id(0x00000005), propget, helpcontext(0x098d0005)]
        HRESULT NumberPosition([out, retval] int* prop);
        [id(0x00000005), propput, helpcontext(0x098d0005)]
        HRESULT NumberPosition([in] int prop);
        [id(0x00000006), propget, helpcontext(0x098d0006)]
        HRESULT Alignment([out, retval] WdListLevelAlignment* prop);
        [id(0x00000006), propput, helpcontext(0x098d0006)]
        HRESULT Alignment([in] WdListLevelAlignment prop);
        [id(0x00000007), propget, helpcontext(0x098d0007)]
        HRESULT TextPosition([out, retval] int* prop);
        [id(0x00000007), propput, helpcontext(0x098d0007)]
        HRESULT TextPosition([in] int prop);
        [id(0x00000008), propget, helpcontext(0x098d0008)]
        HRESULT TabPosition([out, retval] int* prop);
        [id(0x00000008), propput, helpcontext(0x098d0008)]
        HRESULT TabPosition([in] int prop);
        [id(0x00000009), propget, hidden, helpcontext(0x098d0009)]
        HRESULT ResetOnHigherOld([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, hidden, helpcontext(0x098d0009)]
        HRESULT ResetOnHigherOld([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x098d000a)]
        HRESULT StartAt([out, retval] long* prop);
        [id(0x0000000a), propput, helpcontext(0x098d000a)]
        HRESULT StartAt([in] long prop);
        [id(0x0000000b), propget, helpcontext(0x098d000b)]
        HRESULT LinkedStyle([out, retval] BSTR* prop);
        [id(0x0000000b), propput, helpcontext(0x098d000b)]
        HRESULT LinkedStyle([in] BSTR prop);
        [id(0x0000000c), propget, helpcontext(0x098d000c)]
        HRESULT Font([out, retval] Font** prop);
        [id(0x0000000c), propput, helpcontext(0x098d000c)]
        HRESULT Font([in] Font* prop);
        [id(0x000003e8), propget, helpcontext(0x098d03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000d), propget, helpcontext(0x098d000d)]
        HRESULT ResetOnHigher([out, retval] long* prop);
        [id(0x0000000d), propput, helpcontext(0x098d000d)]
        HRESULT ResetOnHigher([in] long prop);
        [id(0x0000000e), propget, helpcontext(0x098d000e)]
        HRESULT PictureBullet([out, retval] InlineShape** prop);
        [id(00000000), helpcontext(0x098d0000)]
        HRESULT ApplyPictureBullet(
                        [in] BSTR FileName, 
                        [out, retval] InlineShape** prop);
    };

    [
      odl,
      uuid(0002098E-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000098e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListLevels : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x098efffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x098e0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x098e03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x098e0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] ListLevel** prop);
    };

    [
      odl,
      uuid(0002098F-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000098f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListTemplate : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098f03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098f03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098f03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x098f0001)]
        HRESULT OutlineNumbered([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x098f0001)]
        HRESULT OutlineNumbered([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x098f0003)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000003), propput, helpcontext(0x098f0003)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000002), propget, helpcontext(0x098f0002)]
        HRESULT ListLevels([out, retval] ListLevels** prop);
        [id(0x00000065), helpcontext(0x098f0065)]
        HRESULT Convert(
                        [in, optional] VARIANT* Level, 
                        [out, retval] ListTemplate** prop);
    };

    [
      odl,
      uuid(00020990-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000990),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListTemplates : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0990fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09900002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x099003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09900000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] ListTemplate** prop);
        [id(0x00000064), helpcontext(0x09900064)]
        HRESULT Add(
                        [in, optional] VARIANT* OutlineNumbered, 
                        [in, optional] VARIANT* Name, 
                        [out, retval] ListTemplate** prop);
    };

    [
      odl,
      uuid(00020991-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000991),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListParagraphs : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0991fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09910002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x099103e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09910000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Paragraph** prop);
    };

    [
      odl,
      uuid(00020992-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000992),
      dual,
      nonextensible,
      oleautomation
    ]
    interface List : IDispatch {
        [id(0x00000001), propget, helpcontext(0x09920001)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000002), propget, helpcontext(0x09920002)]
        HRESULT ListParagraphs([out, retval] ListParagraphs** prop);
        [id(0x00000003), propget, helpcontext(0x09920003)]
        HRESULT SingleListTemplate([out, retval] VARIANT_BOOL* prop);
        [id(0x000003e8), propget, helpcontext(0x099203e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000065), helpcontext(0x09920065)]
        HRESULT ConvertNumbersToText([in, optional] VARIANT* NumberType);
        [id(0x00000066), helpcontext(0x09920066)]
        HRESULT RemoveNumbers([in, optional] VARIANT* NumberType);
        [id(0x00000067), helpcontext(0x09920067)]
        HRESULT CountNumberedItems(
                        [in, optional] VARIANT* NumberType, 
                        [in, optional] VARIANT* Level, 
                        [out, retval] long* prop);
        [id(0x00000068), hidden, helpcontext(0x09920068)]
        HRESULT ApplyListTemplateOld(
                        [in] ListTemplate* ListTemplate, 
                        [in, optional] VARIANT* ContinuePreviousList);
        [id(0x00000069), helpcontext(0x09920069)]
        HRESULT CanContinuePreviousList(
                        [in] ListTemplate* ListTemplate, 
                        [out, retval] WdContinue* prop);
        [id(0x0000006a), helpcontext(0x0992006a)]
        HRESULT ApplyListTemplate(
                        [in] ListTemplate* ListTemplate, 
                        [in, optional] VARIANT* ContinuePreviousList, 
                        [in, optional] VARIANT* DefaultListBehavior);
        [id(0x00000004), propget, helpcontext(0x09920004)]
        HRESULT StyleName([out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(00020993-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000993),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Lists : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0993fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09930002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x099303e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09930000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] List** prop);
    };

    [
      odl,
      uuid(00020994-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000994),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListGallery : IDispatch {
        [id(0x00000001), propget, helpcontext(0x09940001)]
        HRESULT ListTemplates([out, retval] ListTemplates** prop);
        [id(0x000003e8), propget, helpcontext(0x099403e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000065), propget, helpcontext(0x09940065)]
        HRESULT Modified(
                        [in] long Index, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000064), helpcontext(0x09940064)]
        HRESULT Reset([in] long Index);
    };

    [
      odl,
      uuid(00020995-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000995),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListGalleries : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0995fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09950002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x099503e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09950000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] WdListGalleryType Index, 
                        [out, retval] ListGallery** prop);
    };

    [
      odl,
      uuid(00020996-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000996),
      dual,
      nonextensible,
      oleautomation
    ]
    interface KeyBindings : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x099603e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0996fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09960002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x0000000a), propget, helpcontext(0x0996000a)]
        HRESULT Context([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09960000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] KeyBinding** prop);
        [id(0x00000065), helpcontext(0x09960065)]
        HRESULT Add(
                        [in] WdKeyCategory KeyCategory, 
                        [in] BSTR Command, 
                        [in] long KeyCode, 
                        [in, optional] VARIANT* KeyCode2, 
                        [in, optional] VARIANT* CommandParameter, 
                        [out, retval] KeyBinding** prop);
        [id(0x00000066), helpcontext(0x09960066)]
        HRESULT ClearAll();
        [id(0x0000006e), helpcontext(0x0996006e)]
        HRESULT Key(
                        [in] long KeyCode, 
                        [in, optional] VARIANT* KeyCode2, 
                        [out, retval] KeyBinding** prop);
    };

    [
      odl,
      uuid(00020997-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000997),
      dual,
      nonextensible,
      oleautomation
    ]
    interface KeysBoundTo : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x099703e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0997fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09970002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09970003)]
        HRESULT KeyCategory([out, retval] WdKeyCategory* prop);
        [id(0x00000004), propget, helpcontext(0x09970004)]
        HRESULT Command([out, retval] BSTR* prop);
        [id(0x00000005), propget, helpcontext(0x09970005)]
        HRESULT CommandParameter([out, retval] BSTR* prop);
        [id(0x0000000a), propget, helpcontext(0x0997000a)]
        HRESULT Context([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09970000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] KeyBinding** prop);
        [id(0x00000001), helpcontext(0x09970001)]
        HRESULT Key(
                        [in] long KeyCode, 
                        [in, optional] VARIANT* KeyCode2, 
                        [out, retval] KeyBinding** prop);
    };

    [
      odl,
      uuid(00020998-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000998),
      dual,
      nonextensible,
      oleautomation
    ]
    interface KeyBinding : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x099803e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09980001)]
        HRESULT Command([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x09980002)]
        HRESULT KeyString([out, retval] BSTR* prop);
        [id(0x00000003), propget, helpcontext(0x09980003)]
        HRESULT Protected([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propget, helpcontext(0x09980004)]
        HRESULT KeyCategory([out, retval] WdKeyCategory* prop);
        [id(0x00000006), propget, helpcontext(0x09980006)]
        HRESULT KeyCode([out, retval] long* prop);
        [id(0x00000007), propget, helpcontext(0x09980007)]
        HRESULT KeyCode2([out, retval] long* prop);
        [id(0x00000008), propget, helpcontext(0x09980008)]
        HRESULT CommandParameter([out, retval] BSTR* prop);
        [id(0x0000000a), propget, helpcontext(0x0998000a)]
        HRESULT Context([out, retval] IDispatch** prop);
        [id(0x00000065), helpcontext(0x09980065)]
        HRESULT Clear();
        [id(0x00000066), helpcontext(0x09980066)]
        HRESULT Disable();
        [id(0x00000067), helpcontext(0x09980067)]
        HRESULT Execute();
        [id(0x00000068), helpcontext(0x09980068)]
        HRESULT Rebind(
                        [in] WdKeyCategory KeyCategory, 
                        [in] BSTR Command, 
                        [in, optional] VARIANT* CommandParameter);
    };

    [
      odl,
      uuid(00020999-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x00000999),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FileConverter : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x099903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09990000)]
        HRESULT FormatName([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09990001)]
        HRESULT ClassName([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x09990002)]
        HRESULT SaveFormat([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09990003)]
        HRESULT OpenFormat([out, retval] long* prop);
        [id(0x00000004), propget, helpcontext(0x09990004)]
        HRESULT CanSave([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propget, helpcontext(0x09990005)]
        HRESULT CanOpen([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propget, helpcontext(0x09990006)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000007), propget, helpcontext(0x09990007)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000008), propget, helpcontext(0x09990008)]
        HRESULT Extensions([out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(0002099A-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000099a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FileConverters : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x099a03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x099a0001)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x099afffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x099a0002)]
        HRESULT ConvertMacWordChevrons([out, retval] WdChevronConvertRule* prop);
        [id(0x00000002), propput, helpcontext(0x099a0002)]
        HRESULT ConvertMacWordChevrons([in] WdChevronConvertRule prop);
        [id(00000000), helpcontext(0x099a0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] FileConverter** prop);
    };

    [
      odl,
      uuid(0002099B-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000099b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SynonymInfo : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x099b03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x099b0001)]
        HRESULT Word([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x099b0002)]
        HRESULT Found([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propget, helpcontext(0x099b0003)]
        HRESULT MeaningCount([out, retval] long* prop);
        [id(0x00000004), propget, helpcontext(0x099b0004)]
        HRESULT MeaningList([out, retval] VARIANT* prop);
        [id(0x00000005), propget, helpcontext(0x099b0005)]
        HRESULT PartOfSpeechList([out, retval] VARIANT* prop);
        [id(0x00000007), propget, helpcontext(0x099b0007)]
        HRESULT SynonymList(
                        [in] VARIANT* Meaning, 
                        [out, retval] VARIANT* prop);
        [id(0x00000008), propget, helpcontext(0x099b0008)]
        HRESULT AntonymList([out, retval] VARIANT* prop);
        [id(0x00000009), propget, helpcontext(0x099b0009)]
        HRESULT RelatedExpressionList([out, retval] VARIANT* prop);
        [id(0x0000000a), propget, helpcontext(0x099b000a)]
        HRESULT RelatedWordList([out, retval] VARIANT* prop);
    };

    [
      odl,
      uuid(0002099C-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000099c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Hyperlinks : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x099c03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x099c0001)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x099cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x099c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Hyperlink** prop);
        [id(0x00000064), hidden, helpcontext(0x099c0064)]
        HRESULT _Add(
                        [in] IDispatch* Anchor, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* SubAddress, 
                        [out, retval] Hyperlink** prop);
        [id(0x00000065), helpcontext(0x099c0065)]
        HRESULT Add(
                        [in] IDispatch* Anchor, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* SubAddress, 
                        [in, optional] VARIANT* ScreenTip, 
                        [in, optional] VARIANT* TextToDisplay, 
                        [in, optional] VARIANT* Target, 
                        [out, retval] Hyperlink** prop);
    };

    [
      odl,
      uuid(0002099D-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000099d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Hyperlink : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x099d03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), propget, helpcontext(0x099d03eb)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000003ec), propget, hidden, helpcontext(0x099d03ec)]
        HRESULT AddressOld([out, retval] BSTR* prop);
        [id(0x000003ed), propget, helpcontext(0x099d03ed)]
        HRESULT Type([out, retval] MsoHyperlinkType* prop);
        [id(0x000003ee), propget, helpcontext(0x099d03ee)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x000003ef), propget, helpcontext(0x099d03ef)]
        HRESULT Shape([out, retval] Shape** prop);
        [id(0x000003f0), propget, hidden, helpcontext(0x099d03f0)]
        HRESULT SubAddressOld([out, retval] BSTR* prop);
        [id(0x000003f1), propget, helpcontext(0x099d03f1)]
        HRESULT ExtraInfoRequired([out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), helpcontext(0x099d0067)]
        HRESULT Delete();
        [id(0x00000068), helpcontext(0x099d0068)]
        HRESULT Follow(
                        [in, optional] VARIANT* NewWindow, 
                        [in, optional] VARIANT* AddHistory, 
                        [in, optional] VARIANT* ExtraInfo, 
                        [in, optional] VARIANT* Method, 
                        [in, optional] VARIANT* HeaderInfo);
        [id(0x00000069), helpcontext(0x099d0069)]
        HRESULT AddToFavorites();
        [id(0x0000006a), helpcontext(0x099d006a)]
        HRESULT CreateNewDocument(
                        [in] BSTR FileName, 
                        [in] VARIANT_BOOL EditNow, 
                        [in] VARIANT_BOOL Overwrite);
        [id(0x0000044c), propget, helpcontext(0x099d044c)]
        HRESULT Address([out, retval] BSTR* prop);
        [id(0x0000044c), propput, helpcontext(0x099d044c)]
        HRESULT Address([in] BSTR prop);
        [id(0x0000044d), propget, helpcontext(0x099d044d)]
        HRESULT SubAddress([out, retval] BSTR* prop);
        [id(0x0000044d), propput, helpcontext(0x099d044d)]
        HRESULT SubAddress([in] BSTR prop);
        [id(0x000003f2), propget, helpcontext(0x099d03f2)]
        HRESULT EmailSubject([out, retval] BSTR* prop);
        [id(0x000003f2), propput, helpcontext(0x099d03f2)]
        HRESULT EmailSubject([in] BSTR prop);
        [id(0x000003f3), propget, helpcontext(0x099d03f3)]
        HRESULT ScreenTip([out, retval] BSTR* prop);
        [id(0x000003f3), propput, helpcontext(0x099d03f3)]
        HRESULT ScreenTip([in] BSTR prop);
        [id(0x000003f4), propget, helpcontext(0x099d03f4)]
        HRESULT TextToDisplay([out, retval] BSTR* prop);
        [id(0x000003f4), propput, helpcontext(0x099d03f4)]
        HRESULT TextToDisplay([in] BSTR prop);
        [id(0x000003f5), propget, helpcontext(0x099d03f5)]
        HRESULT Target([out, retval] BSTR* prop);
        [id(0x000003f5), propput, helpcontext(0x099d03f5)]
        HRESULT Target([in] BSTR prop);
    };

    [
      odl,
      uuid(0002099F-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x0000099f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Shapes : IDispatch {
        [id(0x00001f40), propget, helpcontext(0x099f1f40)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x00001f41), propget, helpcontext(0x099f1f41)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x099f0001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x099f0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x099ffffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x099f0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Shape** prop);
        [id(0x0000000a), helpcontext(0x099f000a)]
        HRESULT AddCallout(
                        [in] MsoCalloutType Type, 
                        [in] int Left, 
                        [in] int Top, 
                        [in] int Width, 
                        [in] int Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x0000000b), hidden, helpcontext(0x099f000b)]
        HRESULT AddConnector(
                        [in] MsoConnectorType Type, 
                        [in] int BeginX, 
                        [in] int BeginY, 
                        [in] int EndX, 
                        [in] int EndY, 
                        [out, retval] Shape** prop);
        [id(0x0000000c), helpcontext(0x099f000c)]
        HRESULT AddCurve(
                        [in] VARIANT* SafeArrayOfPoints, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x0000000d), helpcontext(0x099f000d)]
        HRESULT AddLabel(
                        [in] MsoTextOrientation Orientation, 
                        [in] int Left, 
                        [in] int Top, 
                        [in] int Width, 
                        [in] int Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x0000000e), helpcontext(0x099f000e)]
        HRESULT AddLine(
                        [in] int BeginX, 
                        [in] int BeginY, 
                        [in] int EndX, 
                        [in] int EndY, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x0000000f), helpcontext(0x099f000f)]
        HRESULT AddPicture(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* LinkToFile, 
                        [in, optional] VARIANT* SaveWithDocument, 
                        [in, optional] VARIANT* Left, 
                        [in, optional] VARIANT* Top, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000010), helpcontext(0x099f0010)]
        HRESULT AddPolyline(
                        [in] VARIANT* SafeArrayOfPoints, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000011), helpcontext(0x099f0011)]
        HRESULT AddShape(
                        [in] long Type, 
                        [in] int Left, 
                        [in] int Top, 
                        [in] int Width, 
                        [in] int Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000012), helpcontext(0x099f0012)]
        HRESULT AddTextEffect(
                        [in] MsoPresetTextEffect PresetTextEffect, 
                        [in] BSTR Text, 
                        [in] BSTR FontName, 
                        [in] int FontSize, 
                        [in] MsoTriState FontBold, 
                        [in] MsoTriState FontItalic, 
                        [in] int Left, 
                        [in] int Top, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000013), helpcontext(0x099f0013)]
        HRESULT AddTextbox(
                        [in] MsoTextOrientation Orientation, 
                        [in] int Left, 
                        [in] int Top, 
                        [in] int Width, 
                        [in] int Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000014), helpcontext(0x099f0014)]
        HRESULT BuildFreeform(
                        [in] MsoEditingType EditingType, 
                        [in] int X1, 
                        [in] int Y1, 
                        [out, retval] FreeformBuilder** prop);
        [id(0x00000015), helpcontext(0x099f0015)]
        HRESULT Range(
                        [in] VARIANT* Index, 
                        [out, retval] ShapeRange** prop);
        [id(0x00000016), helpcontext(0x099f0016)]
        HRESULT SelectAll();
        [id(0x00000018), helpcontext(0x099f0018)]
        HRESULT AddOLEObject(
                        [in, optional] VARIANT* ClassType, 
                        [in, optional] VARIANT* FileName, 
                        [in, optional] VARIANT* LinkToFile, 
                        [in, optional] VARIANT* DisplayAsIcon, 
                        [in, optional] VARIANT* IconFileName, 
                        [in, optional] VARIANT* IconIndex, 
                        [in, optional] VARIANT* IconLabel, 
                        [in, optional] VARIANT* Left, 
                        [in, optional] VARIANT* Top, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000066), helpcontext(0x099f0066)]
        HRESULT AddOLEControl(
                        [in, optional] VARIANT* ClassType, 
                        [in, optional] VARIANT* Left, 
                        [in, optional] VARIANT* Top, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000017), helpcontext(0x099f0017)]
        HRESULT AddDiagram(
                        [in] MsoDiagramType Type, 
                        [in] int Left, 
                        [in] int Top, 
                        [in] int Width, 
                        [in] int Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000019), helpcontext(0x099f0019)]
        HRESULT AddCanvas(
                        [in] int Left, 
                        [in] int Top, 
                        [in] int Width, 
                        [in] int Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
    };

    [
      odl,
      uuid(000209B5-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009b5),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShapeRange : IDispatch {
        [id(0x00001f40), propget, helpcontext(0x09b51f40)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x00001f41), propget, helpcontext(0x09b51f41)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09b50001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x09b50002)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x09b5fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000064), propget, helpcontext(0x09b50064)]
        HRESULT Adjustments([out, retval] Adjustments** prop);
        [id(0x00000065), propget, helpcontext(0x09b50065)]
        HRESULT AutoShapeType([out, retval] MsoAutoShapeType* prop);
        [id(0x00000065), propput, helpcontext(0x09b50065)]
        HRESULT AutoShapeType([in] MsoAutoShapeType prop);
        [id(0x00000067), propget, helpcontext(0x09b50067)]
        HRESULT Callout([out, retval] CalloutFormat** prop);
        [id(0x00000068), propget, hidden, helpcontext(0x09b50068)]
        HRESULT ConnectionSiteCount([out, retval] long* prop);
        [id(0x00000069), propget, hidden, helpcontext(0x09b50069)]
        HRESULT Connector([out, retval] MsoTriState* prop);
        [id(0x0000006a), propget, hidden, helpcontext(0x09b5006a)]
        HRESULT ConnectorFormat([out, retval] ConnectorFormat** prop);
        [id(0x0000006b), propget, helpcontext(0x09b5006b)]
        HRESULT Fill([out, retval] FillFormat** prop);
        [id(0x0000006c), propget, helpcontext(0x09b5006c)]
        HRESULT GroupItems([out, retval] GroupShapes** prop);
        [id(0x0000006d), propget, helpcontext(0x09b5006d)]
        HRESULT Height([out, retval] int* prop);
        [id(0x0000006d), propput, helpcontext(0x09b5006d)]
        HRESULT Height([in] int prop);
        [id(0x0000006e), propget, helpcontext(0x09b5006e)]
        HRESULT HorizontalFlip([out, retval] MsoTriState* prop);
        [id(0x0000006f), propget, helpcontext(0x09b5006f)]
        HRESULT Left([out, retval] int* prop);
        [id(0x0000006f), propput, helpcontext(0x09b5006f)]
        HRESULT Left([in] int prop);
        [id(0x00000070), propget, helpcontext(0x09b50070)]
        HRESULT Line([out, retval] LineFormat** prop);
        [id(0x00000071), propget, helpcontext(0x09b50071)]
        HRESULT LockAspectRatio([out, retval] MsoTriState* prop);
        [id(0x00000071), propput, helpcontext(0x09b50071)]
        HRESULT LockAspectRatio([in] MsoTriState prop);
        [id(0x00000073), propget, helpcontext(0x09b50073)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000073), propput, helpcontext(0x09b50073)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000074), propget, helpcontext(0x09b50074)]
        HRESULT Nodes([out, retval] ShapeNodes** prop);
        [id(0x00000075), propget, helpcontext(0x09b50075)]
        HRESULT Rotation([out, retval] int* prop);
        [id(0x00000075), propput, helpcontext(0x09b50075)]
        HRESULT Rotation([in] int prop);
        [id(0x00000076), propget, helpcontext(0x09b50076)]
        HRESULT PictureFormat([out, retval] PictureFormat** prop);
        [id(0x00000077), propget, helpcontext(0x09b50077)]
        HRESULT Shadow([out, retval] ShadowFormat** prop);
        [id(0x00000078), propget, helpcontext(0x09b50078)]
        HRESULT TextEffect([out, retval] TextEffectFormat** prop);
        [id(0x00000079), propget, helpcontext(0x09b50079)]
        HRESULT TextFrame([out, retval] TextFrame** prop);
        [id(0x0000007a), propget, helpcontext(0x09b5007a)]
        HRESULT ThreeD([out, retval] ThreeDFormat** prop);
        [id(0x0000007b), propget, helpcontext(0x09b5007b)]
        HRESULT Top([out, retval] int* prop);
        [id(0x0000007b), propput, helpcontext(0x09b5007b)]
        HRESULT Top([in] int prop);
        [id(0x0000007c), propget, helpcontext(0x09b5007c)]
        HRESULT Type([out, retval] MsoShapeType* prop);
        [id(0x0000007d), propget, helpcontext(0x09b5007d)]
        HRESULT VerticalFlip([out, retval] MsoTriState* prop);
        [id(0x0000007e), propget, helpcontext(0x09b5007e)]
        HRESULT Vertices([out, retval] VARIANT* prop);
        [id(0x0000007f), propget, helpcontext(0x09b5007f)]
        HRESULT Visible([out, retval] MsoTriState* prop);
        [id(0x0000007f), propput, helpcontext(0x09b5007f)]
        HRESULT Visible([in] MsoTriState prop);
        [id(0x00000080), propget, helpcontext(0x09b50080)]
        HRESULT Width([out, retval] int* prop);
        [id(0x00000080), propput, helpcontext(0x09b50080)]
        HRESULT Width([in] int prop);
        [id(0x00000081), propget, helpcontext(0x09b50081)]
        HRESULT ZOrderPosition([out, retval] long* prop);
        [id(0x000003e9), propget, helpcontext(0x09b503e9)]
        HRESULT Hyperlink([out, retval] Hyperlink** prop);
        [id(0x0000012c), propget, helpcontext(0x09b5012c)]
        HRESULT RelativeHorizontalPosition([out, retval] WdRelativeHorizontalPosition* prop);
        [id(0x0000012c), propput, helpcontext(0x09b5012c)]
        HRESULT RelativeHorizontalPosition([in] WdRelativeHorizontalPosition prop);
        [id(0x0000012d), propget, helpcontext(0x09b5012d)]
        HRESULT RelativeVerticalPosition([out, retval] WdRelativeVerticalPosition* prop);
        [id(0x0000012d), propput, helpcontext(0x09b5012d)]
        HRESULT RelativeVerticalPosition([in] WdRelativeVerticalPosition prop);
        [id(0x0000012e), propget, helpcontext(0x09b5012e)]
        HRESULT LockAnchor([out, retval] long* prop);
        [id(0x0000012e), propput, helpcontext(0x09b5012e)]
        HRESULT LockAnchor([in] long prop);
        [id(0x0000012f), propget, helpcontext(0x09b5012f)]
        HRESULT WrapFormat([out, retval] WrapFormat** prop);
        [id(0x00000130), propget, helpcontext(0x09b50130)]
        HRESULT Anchor([out, retval] Range** prop);
        [id(00000000), helpcontext(0x09b50000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Shape** prop);
        [id(0x0000000a), helpcontext(0x09b5000a)]
        HRESULT Align(
                        [in] MsoAlignCmd Align, 
                        [in] long RelativeTo);
        [id(0x0000000b), helpcontext(0x09b5000b)]
        HRESULT Apply();
        [id(0x0000000c), helpcontext(0x09b5000c)]
        HRESULT Delete();
        [id(0x0000000d), helpcontext(0x09b5000d)]
        HRESULT Distribute(
                        [in] MsoDistributeCmd Distribute, 
                        [in] long RelativeTo);
        [id(0x0000000e), helpcontext(0x09b5000e)]
        HRESULT Duplicate([out, retval] ShapeRange** prop);
        [id(0x0000000f), helpcontext(0x09b5000f)]
        HRESULT Flip([in] MsoFlipCmd FlipCmd);
        [id(0x00000010), helpcontext(0x09b50010)]
        HRESULT IncrementLeft([in] int Increment);
        [id(0x00000011), helpcontext(0x09b50011)]
        HRESULT IncrementRotation([in] int Increment);
        [id(0x00000012), helpcontext(0x09b50012)]
        HRESULT IncrementTop([in] int Increment);
        [id(0x00000013), helpcontext(0x09b50013)]
        HRESULT Group([out, retval] Shape** prop);
        [id(0x00000014), helpcontext(0x09b50014)]
        HRESULT PickUp();
        [id(0x00000015), helpcontext(0x09b50015)]
        HRESULT Regroup([out, retval] Shape** prop);
        [id(0x00000016), hidden, helpcontext(0x09b50016)]
        HRESULT RerouteConnections();
        [id(0x00000017), helpcontext(0x09b50017)]
        HRESULT ScaleHeight(
                        [in] int Factor, 
                        [in] MsoTriState RelativeToOriginalSize, 
                        [in, optional, defaultvalue(0)] MsoScaleFrom Scale);
        [id(0x00000018), helpcontext(0x09b50018)]
        HRESULT ScaleWidth(
                        [in] int Factor, 
                        [in] MsoTriState RelativeToOriginalSize, 
                        [in, optional, defaultvalue(0)] MsoScaleFrom Scale);
        [id(0x00000019), helpcontext(0x09b50019)]
        HRESULT Select([in, optional] VARIANT* Replace);
        [id(0x0000001a), helpcontext(0x09b5001a)]
        HRESULT SetShapesDefaultProperties();
        [id(0x0000001b), helpcontext(0x09b5001b)]
        HRESULT Ungroup([out, retval] ShapeRange** prop);
        [id(0x0000001c), helpcontext(0x09b5001c)]
        HRESULT ZOrder([in] MsoZOrderCmd ZOrderCmd);
        [id(0x0000001d), helpcontext(0x09b5001d)]
        HRESULT ConvertToFrame([out, retval] Frame** prop);
        [id(0x0000001e), helpcontext(0x09b5001e)]
        HRESULT ConvertToInlineShape([out, retval] InlineShape** prop);
        [id(0x00000032), helpcontext(0x09b50032)]
        HRESULT Activate();
        [id(0x00000083), propget, helpcontext(0x09b50083)]
        HRESULT AlternativeText([out, retval] BSTR* prop);
        [id(0x00000083), propput, helpcontext(0x09b50083)]
        HRESULT AlternativeText([in] BSTR prop);
        [id(0x00000084), propget, helpcontext(0x09b50084)]
        HRESULT HasDiagram([out, retval] MsoTriState* prop);
        [id(0x00000085), propget, helpcontext(0x09b50085)]
        HRESULT Diagram([out, retval] IMsoDiagram** prop);
        [id(0x00000086), propget, helpcontext(0x09b50086)]
        HRESULT HasDiagramNode([out, retval] MsoTriState* prop);
        [id(0x00000087), propget, helpcontext(0x09b50087)]
        HRESULT DiagramNode([out, retval] DiagramNode** prop);
        [id(0x00000088), propget, helpcontext(0x09b50088)]
        HRESULT Child([out, retval] MsoTriState* prop);
        [id(0x00000089), propget, helpcontext(0x09b50089)]
        HRESULT ParentGroup([out, retval] Shape** prop);
        [id(0x0000008a), propget, helpcontext(0x09b5008a)]
        HRESULT CanvasItems([out, retval] CanvasShapes** prop);
        [id(0x0000008b), propget, helpcontext(0x09b5008b)]
        HRESULT ID([out, retval] long* prop);
        [id(0x0000008c), helpcontext(0x09b5008c)]
        HRESULT CanvasCropLeft([in] int Increment);
        [id(0x0000008d), helpcontext(0x09b5008d)]
        HRESULT CanvasCropTop([in] int Increment);
        [id(0x0000008e), helpcontext(0x09b5008e)]
        HRESULT CanvasCropRight([in] int Increment);
        [id(0x0000008f), helpcontext(0x09b5008f)]
        HRESULT CanvasCropBottom([in] int Increment);
        [id(0x00000090), propput, hidden, helpcontext(0x09b50090)]
        HRESULT RTF([in] BSTR rhs);
        [id(0x00000091), propget, helpcontext(0x09b50091)]
        HRESULT LayoutInCell([out, retval] long* prop);
        [id(0x00000091), propput, helpcontext(0x09b50091)]
        HRESULT LayoutInCell([in] long prop);
    };

    [
      odl,
      uuid(000209B6-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009b6),
      dual,
      nonextensible,
      oleautomation
    ]
    interface GroupShapes : IDispatch {
        [id(0x00001f40), propget, helpcontext(0x09b61f40)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x00001f41), propget, helpcontext(0x09b61f41)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09b60001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x09b60002)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x09b6fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x09b60000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Shape** prop);
        [id(0x0000000a), helpcontext(0x09b6000a)]
        HRESULT Range(
                        [in] VARIANT* Index, 
                        [out, retval] ShapeRange** prop);
    };

    [
      odl,
      uuid(000209A0-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009a0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Shape : IDispatch {
        [id(0x00001f40), propget, helpcontext(0x09a01f40)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x00001f41), propget, helpcontext(0x09a01f41)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09a00001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09a00064)]
        HRESULT Adjustments([out, retval] Adjustments** prop);
        [id(0x00000065), propget, helpcontext(0x09a00065)]
        HRESULT AutoShapeType([out, retval] MsoAutoShapeType* prop);
        [id(0x00000065), propput, helpcontext(0x09a00065)]
        HRESULT AutoShapeType([in] MsoAutoShapeType prop);
        [id(0x00000067), propget, helpcontext(0x09a00067)]
        HRESULT Callout([out, retval] CalloutFormat** prop);
        [id(0x00000068), propget, hidden, helpcontext(0x09a00068)]
        HRESULT ConnectionSiteCount([out, retval] long* prop);
        [id(0x00000069), propget, hidden, helpcontext(0x09a00069)]
        HRESULT Connector([out, retval] MsoTriState* prop);
        [id(0x0000006a), propget, hidden, helpcontext(0x09a0006a)]
        HRESULT ConnectorFormat([out, retval] ConnectorFormat** prop);
        [id(0x0000006b), propget, helpcontext(0x09a0006b)]
        HRESULT Fill([out, retval] FillFormat** prop);
        [id(0x0000006c), propget, helpcontext(0x09a0006c)]
        HRESULT GroupItems([out, retval] GroupShapes** prop);
        [id(0x0000006d), propget, helpcontext(0x09a0006d)]
        HRESULT Height([out, retval] int* prop);
        [id(0x0000006d), propput, helpcontext(0x09a0006d)]
        HRESULT Height([in] int prop);
        [id(0x0000006e), propget, helpcontext(0x09a0006e)]
        HRESULT HorizontalFlip([out, retval] MsoTriState* prop);
        [id(0x0000006f), propget, helpcontext(0x09a0006f)]
        HRESULT Left([out, retval] int* prop);
        [id(0x0000006f), propput, helpcontext(0x09a0006f)]
        HRESULT Left([in] int prop);
        [id(0x00000070), propget, helpcontext(0x09a00070)]
        HRESULT Line([out, retval] LineFormat** prop);
        [id(0x00000071), propget, helpcontext(0x09a00071)]
        HRESULT LockAspectRatio([out, retval] MsoTriState* prop);
        [id(0x00000071), propput, helpcontext(0x09a00071)]
        HRESULT LockAspectRatio([in] MsoTriState prop);
        [id(0x00000073), propget, helpcontext(0x09a00073)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000073), propput, helpcontext(0x09a00073)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000074), propget, helpcontext(0x09a00074)]
        HRESULT Nodes([out, retval] ShapeNodes** prop);
        [id(0x00000075), propget, helpcontext(0x09a00075)]
        HRESULT Rotation([out, retval] int* prop);
        [id(0x00000075), propput, helpcontext(0x09a00075)]
        HRESULT Rotation([in] int prop);
        [id(0x00000076), propget, helpcontext(0x09a00076)]
        HRESULT PictureFormat([out, retval] PictureFormat** prop);
        [id(0x00000077), propget, helpcontext(0x09a00077)]
        HRESULT Shadow([out, retval] ShadowFormat** prop);
        [id(0x00000078), propget, helpcontext(0x09a00078)]
        HRESULT TextEffect([out, retval] TextEffectFormat** prop);
        [id(0x00000079), propget, helpcontext(0x09a00079)]
        HRESULT TextFrame([out, retval] TextFrame** prop);
        [id(0x0000007a), propget, helpcontext(0x09a0007a)]
        HRESULT ThreeD([out, retval] ThreeDFormat** prop);
        [id(0x0000007b), propget, helpcontext(0x09a0007b)]
        HRESULT Top([out, retval] int* prop);
        [id(0x0000007b), propput, helpcontext(0x09a0007b)]
        HRESULT Top([in] int prop);
        [id(0x0000007c), propget, helpcontext(0x09a0007c)]
        HRESULT Type([out, retval] MsoShapeType* prop);
        [id(0x0000007d), propget, helpcontext(0x09a0007d)]
        HRESULT VerticalFlip([out, retval] MsoTriState* prop);
        [id(0x0000007e), propget, helpcontext(0x09a0007e)]
        HRESULT Vertices([out, retval] VARIANT* prop);
        [id(0x0000007f), propget, helpcontext(0x09a0007f)]
        HRESULT Visible([out, retval] MsoTriState* prop);
        [id(0x0000007f), propput, helpcontext(0x09a0007f)]
        HRESULT Visible([in] MsoTriState prop);
        [id(0x00000080), propget, helpcontext(0x09a00080)]
        HRESULT Width([out, retval] int* prop);
        [id(0x00000080), propput, helpcontext(0x09a00080)]
        HRESULT Width([in] int prop);
        [id(0x00000081), propget, helpcontext(0x09a00081)]
        HRESULT ZOrderPosition([out, retval] long* prop);
        [id(0x000003e9), propget, helpcontext(0x09a003e9)]
        HRESULT Hyperlink([out, retval] Hyperlink** prop);
        [id(0x0000012c), propget, helpcontext(0x09a0012c)]
        HRESULT RelativeHorizontalPosition([out, retval] WdRelativeHorizontalPosition* prop);
        [id(0x0000012c), propput, helpcontext(0x09a0012c)]
        HRESULT RelativeHorizontalPosition([in] WdRelativeHorizontalPosition prop);
        [id(0x0000012d), propget, helpcontext(0x09a0012d)]
        HRESULT RelativeVerticalPosition([out, retval] WdRelativeVerticalPosition* prop);
        [id(0x0000012d), propput, helpcontext(0x09a0012d)]
        HRESULT RelativeVerticalPosition([in] WdRelativeVerticalPosition prop);
        [id(0x0000012e), propget, helpcontext(0x09a0012e)]
        HRESULT LockAnchor([out, retval] long* prop);
        [id(0x0000012e), propput, helpcontext(0x09a0012e)]
        HRESULT LockAnchor([in] long prop);
        [id(0x0000012f), propget, helpcontext(0x09a0012f)]
        HRESULT WrapFormat([out, retval] WrapFormat** prop);
        [id(0x000001f4), propget, helpcontext(0x09a001f4)]
        HRESULT OLEFormat([out, retval] OLEFormat** prop);
        [id(0x000001f5), propget, helpcontext(0x09a001f5)]
        HRESULT Anchor([out, retval] Range** prop);
        [id(0x000001f6), propget, helpcontext(0x09a001f6)]
        HRESULT LinkFormat([out, retval] LinkFormat** prop);
        [id(0x0000000a), helpcontext(0x09a0000a)]
        HRESULT Apply();
        [id(0x0000000b), helpcontext(0x09a0000b)]
        HRESULT Delete();
        [id(0x0000000c), helpcontext(0x09a0000c)]
        HRESULT Duplicate([out, retval] Shape** prop);
        [id(0x0000000d), helpcontext(0x09a0000d)]
        HRESULT Flip([in] MsoFlipCmd FlipCmd);
        [id(0x0000000e), helpcontext(0x09a0000e)]
        HRESULT IncrementLeft([in] int Increment);
        [id(0x0000000f), helpcontext(0x09a0000f)]
        HRESULT IncrementRotation([in] int Increment);
        [id(0x00000010), helpcontext(0x09a00010)]
        HRESULT IncrementTop([in] int Increment);
        [id(0x00000011), helpcontext(0x09a00011)]
        HRESULT PickUp();
        [id(0x00000012), hidden, helpcontext(0x09a00012)]
        HRESULT RerouteConnections();
        [id(0x00000013), helpcontext(0x09a00013)]
        HRESULT ScaleHeight(
                        [in] int Factor, 
                        [in] MsoTriState RelativeToOriginalSize, 
                        [in, optional, defaultvalue(0)] MsoScaleFrom Scale);
        [id(0x00000014), helpcontext(0x09a00014)]
        HRESULT ScaleWidth(
                        [in] int Factor, 
                        [in] MsoTriState RelativeToOriginalSize, 
                        [in, optional, defaultvalue(0)] MsoScaleFrom Scale);
        [id(0x00000015), helpcontext(0x09a00015)]
        HRESULT Select([in, optional] VARIANT* Replace);
        [id(0x00000016), helpcontext(0x09a00016)]
        HRESULT SetShapesDefaultProperties();
        [id(0x00000017), helpcontext(0x09a00017)]
        HRESULT Ungroup([out, retval] ShapeRange** prop);
        [id(0x00000018), helpcontext(0x09a00018)]
        HRESULT ZOrder([in] MsoZOrderCmd ZOrderCmd);
        [id(0x00000019), helpcontext(0x09a00019)]
        HRESULT ConvertToInlineShape([out, retval] InlineShape** prop);
        [id(0x0000001d), helpcontext(0x09a0001d)]
        HRESULT ConvertToFrame([out, retval] Frame** prop);
        [id(0x00000032), helpcontext(0x09a00032)]
        HRESULT Activate();
        [id(0x00000083), propget, helpcontext(0x09a00083)]
        HRESULT AlternativeText([out, retval] BSTR* prop);
        [id(0x00000083), propput, helpcontext(0x09a00083)]
        HRESULT AlternativeText([in] BSTR prop);
        [id(0x000001f7), propget, helpcontext(0x09a001f7)]
        HRESULT Script([out, retval] Script** prop);
        [id(0x00000084), propget, helpcontext(0x09a00084)]
        HRESULT HasDiagram([out, retval] MsoTriState* prop);
        [id(0x00000085), propget, helpcontext(0x09a00085)]
        HRESULT Diagram([out, retval] IMsoDiagram** prop);
        [id(0x00000086), propget, helpcontext(0x09a00086)]
        HRESULT HasDiagramNode([out, retval] MsoTriState* prop);
        [id(0x00000087), propget, helpcontext(0x09a00087)]
        HRESULT DiagramNode([out, retval] DiagramNode** prop);
        [id(0x00000088), propget, helpcontext(0x09a00088)]
        HRESULT Child([out, retval] MsoTriState* prop);
        [id(0x00000089), propget, helpcontext(0x09a00089)]
        HRESULT ParentGroup([out, retval] Shape** prop);
        [id(0x0000008a), propget, helpcontext(0x09a0008a)]
        HRESULT CanvasItems([out, retval] CanvasShapes** prop);
        [id(0x0000008b), propget, helpcontext(0x09a0008b)]
        HRESULT ID([out, retval] long* prop);
        [id(0x0000008c), helpcontext(0x09a0008c)]
        HRESULT CanvasCropLeft([in] int Increment);
        [id(0x0000008d), helpcontext(0x09a0008d)]
        HRESULT CanvasCropTop([in] int Increment);
        [id(0x0000008e), helpcontext(0x09a0008e)]
        HRESULT CanvasCropRight([in] int Increment);
        [id(0x0000008f), helpcontext(0x09a0008f)]
        HRESULT CanvasCropBottom([in] int Increment);
        [id(0x00000090), propput, hidden, helpcontext(0x09a00090)]
        HRESULT RTF([in] BSTR rhs);
        [id(0x00000091), propget, helpcontext(0x09a00091)]
        HRESULT LayoutInCell([out, retval] long* prop);
        [id(0x00000091), propput, helpcontext(0x09a00091)]
        HRESULT LayoutInCell([in] long prop);
    };

    [
      odl,
      uuid(000209B2-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009b2),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextFrame : IDispatch {
        [id(0x00001f40), propget, helpcontext(0x09b21f40)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x00001f41), propget, helpcontext(0x09b21f41)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09b20001)]
        HRESULT Parent([out, retval] Shape** prop);
        [id(0x00000064), propget, helpcontext(0x09b20064)]
        HRESULT MarginBottom([out, retval] int* prop);
        [id(0x00000064), propput, helpcontext(0x09b20064)]
        HRESULT MarginBottom([in] int prop);
        [id(0x00000065), propget, helpcontext(0x09b20065)]
        HRESULT MarginLeft([out, retval] int* prop);
        [id(0x00000065), propput, helpcontext(0x09b20065)]
        HRESULT MarginLeft([in] int prop);
        [id(0x00000066), propget, helpcontext(0x09b20066)]
        HRESULT MarginRight([out, retval] int* prop);
        [id(0x00000066), propput, helpcontext(0x09b20066)]
        HRESULT MarginRight([in] int prop);
        [id(0x00000067), propget, helpcontext(0x09b20067)]
        HRESULT MarginTop([out, retval] int* prop);
        [id(0x00000067), propput, helpcontext(0x09b20067)]
        HRESULT MarginTop([in] int prop);
        [id(0x00000068), propget, helpcontext(0x09b20068)]
        HRESULT Orientation([out, retval] MsoTextOrientation* prop);
        [id(0x00000068), propput, helpcontext(0x09b20068)]
        HRESULT Orientation([in] MsoTextOrientation prop);
        [id(0x000003e9), propget, helpcontext(0x09b203e9)]
        HRESULT TextRange([out, retval] Range** prop);
        [id(0x000003ea), propget, helpcontext(0x09b203ea)]
        HRESULT ContainingRange([out, retval] Range** prop);
        [id(0x00001389), propget, helpcontext(0x09b21389)]
        HRESULT Next([out, retval] TextFrame** prop);
        [id(0x00001389), propput, helpcontext(0x09b21389)]
        HRESULT Next([in] TextFrame* prop);
        [id(0x0000138a), propget, helpcontext(0x09b2138a)]
        HRESULT Previous([out, retval] TextFrame** prop);
        [id(0x0000138a), propput, helpcontext(0x09b2138a)]
        HRESULT Previous([in] TextFrame* prop);
        [id(0x0000138b), propget, helpcontext(0x09b2138b)]
        HRESULT Overflowing([out, retval] VARIANT_BOOL* prop);
        [id(0x00001390), propget, helpcontext(0x09b21390)]
        HRESULT HasText([out, retval] long* prop);
        [id(0x0000138c), helpcontext(0x09b2138c)]
        HRESULT BreakForwardLink();
        [id(0x0000138e), helpcontext(0x09b2138e)]
        HRESULT ValidLinkTarget(
                        [in] TextFrame* TargetTextFrame, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00001391), propget, helpcontext(0x09b21391)]
        HRESULT AutoSize([out, retval] long* prop);
        [id(0x00001391), propput, helpcontext(0x09b21391)]
        HRESULT AutoSize([in] long prop);
        [id(0x00001392), propget, helpcontext(0x09b21392)]
        HRESULT WordWrap([out, retval] long* prop);
        [id(0x00001392), propput, helpcontext(0x09b21392)]
        HRESULT WordWrap([in] long prop);
    };

    [
      odl,
      uuid(000209A1-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009a1),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _LetterContent : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09a103e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09a103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09a103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000a), propget, helpcontext(0x09a1000a)]
        HRESULT Duplicate([out, retval] LetterContent** prop);
        [id(0x00000065), propget, helpcontext(0x09a10065)]
        HRESULT DateFormat([out, retval] BSTR* prop);
        [id(0x00000065), propput, helpcontext(0x09a10065)]
        HRESULT DateFormat([in] BSTR prop);
        [id(0x00000066), propget, helpcontext(0x09a10066)]
        HRESULT IncludeHeaderFooter([out, retval] VARIANT_BOOL* prop);
        [id(0x00000066), propput, helpcontext(0x09a10066)]
        HRESULT IncludeHeaderFooter([in] VARIANT_BOOL prop);
        [id(0x00000067), propget, helpcontext(0x09a10067)]
        HRESULT PageDesign([out, retval] BSTR* prop);
        [id(0x00000067), propput, helpcontext(0x09a10067)]
        HRESULT PageDesign([in] BSTR prop);
        [id(0x00000068), propget, helpcontext(0x09a10068)]
        HRESULT LetterStyle([out, retval] WdLetterStyle* prop);
        [id(0x00000068), propput, helpcontext(0x09a10068)]
        HRESULT LetterStyle([in] WdLetterStyle prop);
        [id(0x00000069), propget, helpcontext(0x09a10069)]
        HRESULT Letterhead([out, retval] VARIANT_BOOL* prop);
        [id(0x00000069), propput, helpcontext(0x09a10069)]
        HRESULT Letterhead([in] VARIANT_BOOL prop);
        [id(0x0000006a), propget, helpcontext(0x09a1006a)]
        HRESULT LetterheadLocation([out, retval] WdLetterheadLocation* prop);
        [id(0x0000006a), propput, helpcontext(0x09a1006a)]
        HRESULT LetterheadLocation([in] WdLetterheadLocation prop);
        [id(0x0000006b), propget, helpcontext(0x09a1006b)]
        HRESULT LetterheadSize([out, retval] int* prop);
        [id(0x0000006b), propput, helpcontext(0x09a1006b)]
        HRESULT LetterheadSize([in] int prop);
        [id(0x0000006c), propget, helpcontext(0x09a1006c)]
        HRESULT RecipientName([out, retval] BSTR* prop);
        [id(0x0000006c), propput, helpcontext(0x09a1006c)]
        HRESULT RecipientName([in] BSTR prop);
        [id(0x0000006d), propget, helpcontext(0x09a1006d)]
        HRESULT RecipientAddress([out, retval] BSTR* prop);
        [id(0x0000006d), propput, helpcontext(0x09a1006d)]
        HRESULT RecipientAddress([in] BSTR prop);
        [id(0x0000006e), propget, helpcontext(0x09a1006e)]
        HRESULT Salutation([out, retval] BSTR* prop);
        [id(0x0000006e), propput, helpcontext(0x09a1006e)]
        HRESULT Salutation([in] BSTR prop);
        [id(0x0000006f), propget, helpcontext(0x09a1006f)]
        HRESULT SalutationType([out, retval] WdSalutationType* prop);
        [id(0x0000006f), propput, helpcontext(0x09a1006f)]
        HRESULT SalutationType([in] WdSalutationType prop);
        [id(0x00000070), propget, helpcontext(0x09a10070)]
        HRESULT RecipientReference([out, retval] BSTR* prop);
        [id(0x00000070), propput, helpcontext(0x09a10070)]
        HRESULT RecipientReference([in] BSTR prop);
        [id(0x00000072), propget, helpcontext(0x09a10072)]
        HRESULT MailingInstructions([out, retval] BSTR* prop);
        [id(0x00000072), propput, helpcontext(0x09a10072)]
        HRESULT MailingInstructions([in] BSTR prop);
        [id(0x00000073), propget, helpcontext(0x09a10073)]
        HRESULT AttentionLine([out, retval] BSTR* prop);
        [id(0x00000073), propput, helpcontext(0x09a10073)]
        HRESULT AttentionLine([in] BSTR prop);
        [id(0x00000074), propget, helpcontext(0x09a10074)]
        HRESULT Subject([out, retval] BSTR* prop);
        [id(0x00000074), propput, helpcontext(0x09a10074)]
        HRESULT Subject([in] BSTR prop);
        [id(0x00000075), propget, helpcontext(0x09a10075)]
        HRESULT EnclosureNumber([out, retval] long* prop);
        [id(0x00000075), propput, helpcontext(0x09a10075)]
        HRESULT EnclosureNumber([in] long prop);
        [id(0x00000076), propget, helpcontext(0x09a10076)]
        HRESULT CCList([out, retval] BSTR* prop);
        [id(0x00000076), propput, helpcontext(0x09a10076)]
        HRESULT CCList([in] BSTR prop);
        [id(0x00000077), propget, helpcontext(0x09a10077)]
        HRESULT ReturnAddress([out, retval] BSTR* prop);
        [id(0x00000077), propput, helpcontext(0x09a10077)]
        HRESULT ReturnAddress([in] BSTR prop);
        [id(0x00000078), propget, helpcontext(0x09a10078)]
        HRESULT SenderName([out, retval] BSTR* prop);
        [id(0x00000078), propput, helpcontext(0x09a10078)]
        HRESULT SenderName([in] BSTR prop);
        [id(0x00000079), propget, helpcontext(0x09a10079)]
        HRESULT Closing([out, retval] BSTR* prop);
        [id(0x00000079), propput, helpcontext(0x09a10079)]
        HRESULT Closing([in] BSTR prop);
        [id(0x0000007a), propget, helpcontext(0x09a1007a)]
        HRESULT SenderCompany([out, retval] BSTR* prop);
        [id(0x0000007a), propput, helpcontext(0x09a1007a)]
        HRESULT SenderCompany([in] BSTR prop);
        [id(0x0000007b), propget, helpcontext(0x09a1007b)]
        HRESULT SenderJobTitle([out, retval] BSTR* prop);
        [id(0x0000007b), propput, helpcontext(0x09a1007b)]
        HRESULT SenderJobTitle([in] BSTR prop);
        [id(0x0000007c), propget, helpcontext(0x09a1007c)]
        HRESULT SenderInitials([out, retval] BSTR* prop);
        [id(0x0000007c), propput, helpcontext(0x09a1007c)]
        HRESULT SenderInitials([in] BSTR prop);
        [id(0x0000007d), propget, helpcontext(0x09a1007d)]
        HRESULT InfoBlock([out, retval] VARIANT_BOOL* prop);
        [id(0x0000007d), propput, helpcontext(0x09a1007d)]
        HRESULT InfoBlock([in] VARIANT_BOOL prop);
        [id(0x0000007e), propget, helpcontext(0x09a1007e)]
        HRESULT RecipientCode([out, retval] BSTR* prop);
        [id(0x0000007e), propput, helpcontext(0x09a1007e)]
        HRESULT RecipientCode([in] BSTR prop);
        [id(0x0000007f), propget, helpcontext(0x09a1007f)]
        HRESULT RecipientGender([out, retval] WdSalutationGender* prop);
        [id(0x0000007f), propput, helpcontext(0x09a1007f)]
        HRESULT RecipientGender([in] WdSalutationGender prop);
        [id(0x00000080), propget, helpcontext(0x09a10080)]
        HRESULT ReturnAddressShortForm([out, retval] BSTR* prop);
        [id(0x00000080), propput, helpcontext(0x09a10080)]
        HRESULT ReturnAddressShortForm([in] BSTR prop);
        [id(0x00000081), propget, helpcontext(0x09a10081)]
        HRESULT SenderCity([out, retval] BSTR* prop);
        [id(0x00000081), propput, helpcontext(0x09a10081)]
        HRESULT SenderCity([in] BSTR prop);
        [id(0x00000082), propget, helpcontext(0x09a10082)]
        HRESULT SenderCode([out, retval] BSTR* prop);
        [id(0x00000082), propput, helpcontext(0x09a10082)]
        HRESULT SenderCode([in] BSTR prop);
        [id(0x00000083), propget, helpcontext(0x09a10083)]
        HRESULT SenderGender([out, retval] WdSalutationGender* prop);
        [id(0x00000083), propput, helpcontext(0x09a10083)]
        HRESULT SenderGender([in] WdSalutationGender prop);
        [id(0x00000084), propget, helpcontext(0x09a10084)]
        HRESULT SenderReference([out, retval] BSTR* prop);
        [id(0x00000084), propput, helpcontext(0x09a10084)]
        HRESULT SenderReference([in] BSTR prop);
    };

    [
      odl,
      uuid(000209A5-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009a5),
      dual,
      nonextensible,
      oleautomation
    ]
    interface View : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09a503e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09a503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09a503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09a50000)]
        HRESULT Type([out, retval] WdViewType* prop);
        [id(00000000), propput, helpcontext(0x09a50000)]
        HRESULT Type([in] WdViewType prop);
        [id(0x00000001), propget, helpcontext(0x09a50001)]
        HRESULT FullScreen([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09a50001)]
        HRESULT FullScreen([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x09a50002)]
        HRESULT Draft([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09a50002)]
        HRESULT Draft([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x09a50003)]
        HRESULT ShowAll([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09a50003)]
        HRESULT ShowAll([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09a50004)]
        HRESULT ShowFieldCodes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09a50004)]
        HRESULT ShowFieldCodes([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x09a50005)]
        HRESULT MailMergeDataView([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x09a50005)]
        HRESULT MailMergeDataView([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09a50007)]
        HRESULT Magnifier([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propput, helpcontext(0x09a50007)]
        HRESULT Magnifier([in] VARIANT_BOOL prop);
        [id(0x00000008), propget, helpcontext(0x09a50008)]
        HRESULT ShowFirstLineOnly([out, retval] VARIANT_BOOL* prop);
        [id(0x00000008), propput, helpcontext(0x09a50008)]
        HRESULT ShowFirstLineOnly([in] VARIANT_BOOL prop);
        [id(0x00000009), propget, helpcontext(0x09a50009)]
        HRESULT ShowFormat([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x09a50009)]
        HRESULT ShowFormat([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x09a5000a)]
        HRESULT Zoom([out, retval] Zoom** prop);
        [id(0x0000000b), propget, helpcontext(0x09a5000b)]
        HRESULT ShowObjectAnchors([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000b), propput, helpcontext(0x09a5000b)]
        HRESULT ShowObjectAnchors([in] VARIANT_BOOL prop);
        [id(0x0000000c), propget, helpcontext(0x09a5000c)]
        HRESULT ShowTextBoundaries([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propput, helpcontext(0x09a5000c)]
        HRESULT ShowTextBoundaries([in] VARIANT_BOOL prop);
        [id(0x0000000d), propget, helpcontext(0x09a5000d)]
        HRESULT ShowHighlight([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), propput, helpcontext(0x09a5000d)]
        HRESULT ShowHighlight([in] VARIANT_BOOL prop);
        [id(0x0000000e), propget, helpcontext(0x09a5000e)]
        HRESULT ShowDrawings([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000e), propput, helpcontext(0x09a5000e)]
        HRESULT ShowDrawings([in] VARIANT_BOOL prop);
        [id(0x0000000f), propget, helpcontext(0x09a5000f)]
        HRESULT ShowTabs([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000f), propput, helpcontext(0x09a5000f)]
        HRESULT ShowTabs([in] VARIANT_BOOL prop);
        [id(0x00000010), propget, helpcontext(0x09a50010)]
        HRESULT ShowSpaces([out, retval] VARIANT_BOOL* prop);
        [id(0x00000010), propput, helpcontext(0x09a50010)]
        HRESULT ShowSpaces([in] VARIANT_BOOL prop);
        [id(0x00000011), propget, helpcontext(0x09a50011)]
        HRESULT ShowParagraphs([out, retval] VARIANT_BOOL* prop);
        [id(0x00000011), propput, helpcontext(0x09a50011)]
        HRESULT ShowParagraphs([in] VARIANT_BOOL prop);
        [id(0x00000012), propget, helpcontext(0x09a50012)]
        HRESULT ShowHyphens([out, retval] VARIANT_BOOL* prop);
        [id(0x00000012), propput, helpcontext(0x09a50012)]
        HRESULT ShowHyphens([in] VARIANT_BOOL prop);
        [id(0x00000013), propget, helpcontext(0x09a50013)]
        HRESULT ShowHiddenText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000013), propput, helpcontext(0x09a50013)]
        HRESULT ShowHiddenText([in] VARIANT_BOOL prop);
        [id(0x00000014), propget, helpcontext(0x09a50014)]
        HRESULT WrapToWindow([out, retval] VARIANT_BOOL* prop);
        [id(0x00000014), propput, helpcontext(0x09a50014)]
        HRESULT WrapToWindow([in] VARIANT_BOOL prop);
        [id(0x00000015), propget, helpcontext(0x09a50015)]
        HRESULT ShowPicturePlaceHolders([out, retval] VARIANT_BOOL* prop);
        [id(0x00000015), propput, helpcontext(0x09a50015)]
        HRESULT ShowPicturePlaceHolders([in] VARIANT_BOOL prop);
        [id(0x00000016), propget, helpcontext(0x09a50016)]
        HRESULT ShowBookmarks([out, retval] VARIANT_BOOL* prop);
        [id(0x00000016), propput, helpcontext(0x09a50016)]
        HRESULT ShowBookmarks([in] VARIANT_BOOL prop);
        [id(0x00000017), propget, helpcontext(0x09a50017)]
        HRESULT FieldShading([out, retval] WdFieldShading* prop);
        [id(0x00000017), propput, helpcontext(0x09a50017)]
        HRESULT FieldShading([in] WdFieldShading prop);
        [id(0x00000018), propget, helpcontext(0x09a50018)]
        HRESULT ShowAnimation([out, retval] VARIANT_BOOL* prop);
        [id(0x00000018), propput, helpcontext(0x09a50018)]
        HRESULT ShowAnimation([in] VARIANT_BOOL prop);
        [id(0x00000019), propget, helpcontext(0x09a50019)]
        HRESULT TableGridlines([out, retval] VARIANT_BOOL* prop);
        [id(0x00000019), propput, helpcontext(0x09a50019)]
        HRESULT TableGridlines([in] VARIANT_BOOL prop);
        [id(0x0000001a), propget, hidden, helpcontext(0x09a5001a)]
        HRESULT EnlargeFontsLessThan([out, retval] long* prop);
        [id(0x0000001a), propput, hidden, helpcontext(0x09a5001a)]
        HRESULT EnlargeFontsLessThan([in] long prop);
        [id(0x0000001b), propget, helpcontext(0x09a5001b)]
        HRESULT ShowMainTextLayer([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001b), propput, helpcontext(0x09a5001b)]
        HRESULT ShowMainTextLayer([in] VARIANT_BOOL prop);
        [id(0x0000001c), propget, helpcontext(0x09a5001c)]
        HRESULT SeekView([out, retval] WdSeekView* prop);
        [id(0x0000001c), propput, helpcontext(0x09a5001c)]
        HRESULT SeekView([in] WdSeekView prop);
        [id(0x0000001d), propget, helpcontext(0x09a5001d)]
        HRESULT SplitSpecial([out, retval] WdSpecialPane* prop);
        [id(0x0000001d), propput, helpcontext(0x09a5001d)]
        HRESULT SplitSpecial([in] WdSpecialPane prop);
        [id(0x0000001e), propget, hidden, helpcontext(0x09a5001e)]
        HRESULT BrowseToWindow([out, retval] long* prop);
        [id(0x0000001e), propput, hidden, helpcontext(0x09a5001e)]
        HRESULT BrowseToWindow([in] long prop);
        [id(0x0000001f), propget, helpcontext(0x09a5001f)]
        HRESULT ShowOptionalBreaks([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001f), propput, helpcontext(0x09a5001f)]
        HRESULT ShowOptionalBreaks([in] VARIANT_BOOL prop);
        [id(0x00000065), helpcontext(0x09a50065)]
        HRESULT CollapseOutline([in, optional] VARIANT* Range);
        [id(0x00000066), helpcontext(0x09a50066)]
        HRESULT ExpandOutline([in, optional] VARIANT* Range);
        [id(0x00000067), helpcontext(0x09a50067)]
        HRESULT ShowAllHeadings();
        [id(0x00000068), helpcontext(0x09a50068)]
        HRESULT ShowHeading([in] long Level);
        [id(0x00000069), helpcontext(0x09a50069)]
        HRESULT PreviousHeaderFooter();
        [id(0x0000006a), helpcontext(0x09a5006a)]
        HRESULT NextHeaderFooter();
        [id(0x00000020), propget, helpcontext(0x09a50020)]
        HRESULT DisplayPageBoundaries([out, retval] VARIANT_BOOL* prop);
        [id(0x00000020), propput, helpcontext(0x09a50020)]
        HRESULT DisplayPageBoundaries([in] VARIANT_BOOL prop);
        [id(0x00000021), propget, helpcontext(0x09a50021)]
        HRESULT DisplaySmartTags([out, retval] VARIANT_BOOL* prop);
        [id(0x00000021), propput, helpcontext(0x09a50021)]
        HRESULT DisplaySmartTags([in] VARIANT_BOOL prop);
        [id(0x00000022), propget, helpcontext(0x09a50022)]
        HRESULT ShowRevisionsAndComments([out, retval] VARIANT_BOOL* prop);
        [id(0x00000022), propput, helpcontext(0x09a50022)]
        HRESULT ShowRevisionsAndComments([in] VARIANT_BOOL prop);
        [id(0x00000023), propget, helpcontext(0x09a50023)]
        HRESULT ShowComments([out, retval] VARIANT_BOOL* prop);
        [id(0x00000023), propput, helpcontext(0x09a50023)]
        HRESULT ShowComments([in] VARIANT_BOOL prop);
        [id(0x00000024), propget, helpcontext(0x09a50024)]
        HRESULT ShowInsertionsAndDeletions([out, retval] VARIANT_BOOL* prop);
        [id(0x00000024), propput, helpcontext(0x09a50024)]
        HRESULT ShowInsertionsAndDeletions([in] VARIANT_BOOL prop);
        [id(0x00000025), propget, helpcontext(0x09a50025)]
        HRESULT ShowFormatChanges([out, retval] VARIANT_BOOL* prop);
        [id(0x00000025), propput, helpcontext(0x09a50025)]
        HRESULT ShowFormatChanges([in] VARIANT_BOOL prop);
        [id(0x00000026), propget, helpcontext(0x09a50026)]
        HRESULT RevisionsView([out, retval] WdRevisionsView* prop);
        [id(0x00000026), propput, helpcontext(0x09a50026)]
        HRESULT RevisionsView([in] WdRevisionsView prop);
        [id(0x00000027), propget, helpcontext(0x09a50027)]
        HRESULT RevisionsMode([out, retval] WdRevisionsMode* prop);
        [id(0x00000027), propput, helpcontext(0x09a50027)]
        HRESULT RevisionsMode([in] WdRevisionsMode prop);
        [id(0x00000028), propget, helpcontext(0x09a50028)]
        HRESULT RevisionsBalloonWidth([out, retval] int* prop);
        [id(0x00000028), propput, helpcontext(0x09a50028)]
        HRESULT RevisionsBalloonWidth([in] int prop);
        [id(0x00000029), propget, helpcontext(0x09a50029)]
        HRESULT RevisionsBalloonWidthType([out, retval] WdRevisionsBalloonWidthType* prop);
        [id(0x00000029), propput, helpcontext(0x09a50029)]
        HRESULT RevisionsBalloonWidthType([in] WdRevisionsBalloonWidthType prop);
        [id(0x0000002a), propget, helpcontext(0x09a5002a)]
        HRESULT RevisionsBalloonSide([out, retval] WdRevisionsBalloonMargin* prop);
        [id(0x0000002a), propput, helpcontext(0x09a5002a)]
        HRESULT RevisionsBalloonSide([in] WdRevisionsBalloonMargin prop);
        [id(0x0000002b), propget, helpcontext(0x09a5002b)]
        HRESULT Reviewers([out, retval] Reviewers** prop);
        [id(0x0000002c), propget, helpcontext(0x09a5002c)]
        HRESULT RevisionsBalloonShowConnectingLines([out, retval] VARIANT_BOOL* prop);
        [id(0x0000002c), propput, helpcontext(0x09a5002c)]
        HRESULT RevisionsBalloonShowConnectingLines([in] VARIANT_BOOL prop);
        [id(0x0000002d), propget, helpcontext(0x09a5002d)]
        HRESULT ReadingLayout([out, retval] VARIANT_BOOL* prop);
        [id(0x0000002d), propput, helpcontext(0x09a5002d)]
        HRESULT ReadingLayout([in] VARIANT_BOOL prop);
        [id(0x0000002e), propget, helpcontext(0x09a5002e)]
        HRESULT ShowXMLMarkup([out, retval] long* prop);
        [id(0x0000002e), propput, helpcontext(0x09a5002e)]
        HRESULT ShowXMLMarkup([in] long prop);
        [id(0x0000002f), propget, helpcontext(0x09a5002f)]
        HRESULT ShadeEditableRanges([out, retval] long* prop);
        [id(0x0000002f), propput, helpcontext(0x09a5002f)]
        HRESULT ShadeEditableRanges([in] long prop);
        [id(0x00000030), propget, helpcontext(0x09a50030)]
        HRESULT ShowInkAnnotations([out, retval] VARIANT_BOOL* prop);
        [id(0x00000030), propput, helpcontext(0x09a50030)]
        HRESULT ShowInkAnnotations([in] VARIANT_BOOL prop);
        [id(0x00000031), propget, helpcontext(0x09a50031)]
        HRESULT DisplayBackgrounds([out, retval] VARIANT_BOOL* prop);
        [id(0x00000031), propput, helpcontext(0x09a50031)]
        HRESULT DisplayBackgrounds([in] VARIANT_BOOL prop);
        [id(0x00000032), propget, helpcontext(0x09a50032)]
        HRESULT ReadingLayoutActualView([out, retval] VARIANT_BOOL* prop);
        [id(0x00000032), propput, helpcontext(0x09a50032)]
        HRESULT ReadingLayoutActualView([in] VARIANT_BOOL prop);
        [id(0x00000033), propget, helpcontext(0x09a50033)]
        HRESULT ReadingLayoutAllowMultiplePages([out, retval] VARIANT_BOOL* prop);
        [id(0x00000033), propput, helpcontext(0x09a50033)]
        HRESULT ReadingLayoutAllowMultiplePages([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(000209A6-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009a6),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Zoom : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09a603e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09a603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09a603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09a60000)]
        HRESULT Percentage([out, retval] long* prop);
        [id(00000000), propput, helpcontext(0x09a60000)]
        HRESULT Percentage([in] long prop);
        [id(0x00000001), propget, helpcontext(0x09a60001)]
        HRESULT PageFit([out, retval] WdPageFit* prop);
        [id(0x00000001), propput, helpcontext(0x09a60001)]
        HRESULT PageFit([in] WdPageFit prop);
        [id(0x00000002), propget, helpcontext(0x09a60002)]
        HRESULT PageRows([out, retval] long* prop);
        [id(0x00000002), propput, helpcontext(0x09a60002)]
        HRESULT PageRows([in] long prop);
        [id(0x00000003), propget, helpcontext(0x09a60003)]
        HRESULT PageColumns([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x09a60003)]
        HRESULT PageColumns([in] long prop);
    };

    [
      odl,
      uuid(000209A7-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009a7),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Zooms : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09a703e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09a703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09a703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09a70000)]
        HRESULT Item(
                        [in] WdViewType Index, 
                        [out, retval] Zoom** prop);
    };

    [
      odl,
      uuid(000209A8-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009a8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface InlineShape : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09a803e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09a803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09a803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000044c), propget, helpcontext(0x09a8044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x09a8044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000002), propget, helpcontext(0x09a80002)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000003), propget, helpcontext(0x09a80003)]
        HRESULT LinkFormat([out, retval] LinkFormat** prop);
        [id(0x00000004), propget, helpcontext(0x09a80004)]
        HRESULT Field([out, retval] Field** prop);
        [id(0x00000005), propget, helpcontext(0x09a80005)]
        HRESULT OLEFormat([out, retval] OLEFormat** prop);
        [id(0x00000006), propget, helpcontext(0x09a80006)]
        HRESULT Type([out, retval] WdInlineShapeType* prop);
        [id(0x00000007), propget, helpcontext(0x09a80007)]
        HRESULT Hyperlink([out, retval] Hyperlink** prop);
        [id(0x00000008), propget, helpcontext(0x09a80008)]
        HRESULT Height([out, retval] int* prop);
        [id(0x00000008), propput, helpcontext(0x09a80008)]
        HRESULT Height([in] int prop);
        [id(0x00000009), propget, helpcontext(0x09a80009)]
        HRESULT Width([out, retval] int* prop);
        [id(0x00000009), propput, helpcontext(0x09a80009)]
        HRESULT Width([in] int prop);
        [id(0x0000000a), propget, helpcontext(0x09a8000a)]
        HRESULT ScaleHeight([out, retval] int* prop);
        [id(0x0000000a), propput, helpcontext(0x09a8000a)]
        HRESULT ScaleHeight([in] int prop);
        [id(0x0000000b), propget, helpcontext(0x09a8000b)]
        HRESULT ScaleWidth([out, retval] int* prop);
        [id(0x0000000b), propput, helpcontext(0x09a8000b)]
        HRESULT ScaleWidth([in] int prop);
        [id(0x0000000c), propget, helpcontext(0x09a8000c)]
        HRESULT LockAspectRatio([out, retval] MsoTriState* prop);
        [id(0x0000000c), propput, helpcontext(0x09a8000c)]
        HRESULT LockAspectRatio([in] MsoTriState prop);
        [id(0x00000070), propget, helpcontext(0x09a80070)]
        HRESULT Line([out, retval] LineFormat** prop);
        [id(0x0000006b), propget, helpcontext(0x09a8006b)]
        HRESULT Fill([out, retval] FillFormat** prop);
        [id(0x00000076), propget, helpcontext(0x09a80076)]
        HRESULT PictureFormat([out, retval] PictureFormat** prop);
        [id(0x00000076), propput, helpcontext(0x09a80076)]
        HRESULT PictureFormat([in] PictureFormat* prop);
        [id(0x00000064), helpcontext(0x09a80064)]
        HRESULT Activate();
        [id(0x00000065), helpcontext(0x09a80065)]
        HRESULT Reset();
        [id(0x00000066), helpcontext(0x09a80066)]
        HRESULT Delete();
        [id(0x0000ffff), helpcontext(0x09a8ffff)]
        HRESULT Select();
        [id(0x00000068), helpcontext(0x09a80068)]
        HRESULT ConvertToShape([out, retval] Shape** prop);
        [id(0x00000077), propget, helpcontext(0x09a80077)]
        HRESULT HorizontalLineFormat([out, retval] HorizontalLineFormat** prop);
        [id(0x0000007a), propget, helpcontext(0x09a8007a)]
        HRESULT Script([out, retval] Script** prop);
        [id(0x00000082), propget, hidden, helpcontext(0x09a80082)]
        HRESULT OWSAnchor([out, retval] long* prop);
        [id(0x00000078), propget, helpcontext(0x09a80078)]
        HRESULT TextEffect([out, retval] TextEffectFormat** prop);
        [id(0x00000078), propput, helpcontext(0x09a80078)]
        HRESULT TextEffect([in] TextEffectFormat* prop);
        [id(0x00000083), propget, helpcontext(0x09a80083)]
        HRESULT AlternativeText([out, retval] BSTR* prop);
        [id(0x00000083), propput, helpcontext(0x09a80083)]
        HRESULT AlternativeText([in] BSTR prop);
        [id(0x00000084), propget, helpcontext(0x09a80084)]
        HRESULT IsPictureBullet([out, retval] VARIANT_BOOL* prop);
    };

    [
      odl,
      uuid(000209A9-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009a9),
      dual,
      nonextensible,
      oleautomation
    ]
    interface InlineShapes : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09a903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09a903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09a903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09a90001)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x09a9fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x09a90000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] InlineShape** prop);
        [id(0x00000064), helpcontext(0x09a90064)]
        HRESULT AddPicture(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* LinkToFile, 
                        [in, optional] VARIANT* SaveWithDocument, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] InlineShape** prop);
        [id(0x00000018), helpcontext(0x09a90018)]
        HRESULT AddOLEObject(
                        [in, optional] VARIANT* ClassType, 
                        [in, optional] VARIANT* FileName, 
                        [in, optional] VARIANT* LinkToFile, 
                        [in, optional] VARIANT* DisplayAsIcon, 
                        [in, optional] VARIANT* IconFileName, 
                        [in, optional] VARIANT* IconIndex, 
                        [in, optional] VARIANT* IconLabel, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] InlineShape** prop);
        [id(0x00000066), helpcontext(0x09a90066)]
        HRESULT AddOLEControl(
                        [in, optional] VARIANT* ClassType, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] InlineShape** prop);
        [id(0x000000c8), helpcontext(0x09a900c8)]
        HRESULT New(
                        [in] Range* Range, 
                        [out, retval] InlineShape** prop);
        [id(0x00000068), helpcontext(0x09a90068)]
        HRESULT AddHorizontalLine(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] InlineShape** prop);
        [id(0x00000069), helpcontext(0x09a90069)]
        HRESULT AddHorizontalLineStandard(
                        [in, optional] VARIANT* Range, 
                        [out, retval] InlineShape** prop);
        [id(0x0000006a), helpcontext(0x09a9006a)]
        HRESULT AddPictureBullet(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] InlineShape** prop);
    };

    [
      odl,
      uuid(000209AA-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009aa),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SpellingSuggestions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09aa03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09aa03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09aa03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09aafffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09aa0001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09aa0002)]
        HRESULT SpellingErrorType([out, retval] WdSpellingErrorType* prop);
        [id(00000000), helpcontext(0x09aa0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] SpellingSuggestion** prop);
    };

    [
      odl,
      uuid(000209AB-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009ab),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SpellingSuggestion : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ab03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ab03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09ab03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09ab0000)]
        HRESULT Name([out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(000209AC-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009ac),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Dictionaries : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ac03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ac03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09ac03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09acfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09ac0001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09ac0002)]
        HRESULT Maximum([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09ac0003)]
        HRESULT ActiveCustomDictionary([out, retval] Dictionary** prop);
        [id(0x00000003), propput, helpcontext(0x09ac0003)]
        HRESULT ActiveCustomDictionary([in] Dictionary* prop);
        [id(00000000), helpcontext(0x09ac0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Dictionary** prop);
        [id(0x00000065), helpcontext(0x09ac0065)]
        HRESULT Add(
                        [in] BSTR FileName, 
                        [out, retval] Dictionary** prop);
        [id(0x00000066), helpcontext(0x09ac0066)]
        HRESULT ClearAll();
    };

    [
      odl,
      uuid(000209E0-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009e0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HangulHanjaConversionDictionaries : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09e0fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09e00001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09e00002)]
        HRESULT Maximum([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09e00003)]
        HRESULT ActiveCustomDictionary([out, retval] Dictionary** prop);
        [id(0x00000003), propput, helpcontext(0x09e00003)]
        HRESULT ActiveCustomDictionary([in] Dictionary* prop);
        [id(0x00000004), propget, helpcontext(0x09e00004)]
        HRESULT BuiltinDictionary([out, retval] Dictionary** prop);
        [id(00000000), helpcontext(0x09e00000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Dictionary** prop);
        [id(0x00000065), helpcontext(0x09e00065)]
        HRESULT Add(
                        [in] BSTR FileName, 
                        [out, retval] Dictionary** prop);
        [id(0x00000066), helpcontext(0x09e00066)]
        HRESULT ClearAll();
    };

    [
      odl,
      uuid(000209AD-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009ad),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Dictionary : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ad03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ad03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09ad03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09ad0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09ad0001)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x09ad0002)]
        HRESULT LanguageID([out, retval] WdLanguageID* prop);
        [id(0x00000002), propput, helpcontext(0x09ad0002)]
        HRESULT LanguageID([in] WdLanguageID prop);
        [id(0x00000003), propget, helpcontext(0x09ad0003)]
        HRESULT ReadOnly([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propget, helpcontext(0x09ad0004)]
        HRESULT Type([out, retval] WdDictionaryType* prop);
        [id(0x00000005), propget, helpcontext(0x09ad0005)]
        HRESULT LanguageSpecific([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x09ad0005)]
        HRESULT LanguageSpecific([in] VARIANT_BOOL prop);
        [id(0x00000065), helpcontext(0x09ad0065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(000209AE-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009ae),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ReadabilityStatistics : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ae03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ae03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09ae03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09aefffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09ae0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09ae0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] ReadabilityStatistic** prop);
    };

    [
      odl,
      uuid(000209AF-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009af),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ReadabilityStatistic : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09af03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09af03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09af03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09af0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09af0001)]
        HRESULT Value([out, retval] int* prop);
    };

    [
      odl,
      uuid(000209B3-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009b3),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Versions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09b303e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09b303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09b303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09b3fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09b30002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09b30003)]
        HRESULT AutoVersion([out, retval] WdAutoVersions* prop);
        [id(0x00000003), propput, helpcontext(0x09b30003)]
        HRESULT AutoVersion([in] WdAutoVersions prop);
        [id(00000000), helpcontext(0x09b30000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Version** prop);
        [id(0x0000000b), helpcontext(0x09b3000b)]
        HRESULT Save([in, optional] VARIANT* Comment);
    };

    [
      odl,
      uuid(000209B4-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009b4),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Version : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09b403e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09b403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09b403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), propget, helpcontext(0x09b403eb)]
        HRESULT SavedBy([out, retval] BSTR* prop);
        [id(0x000003ec), propget, helpcontext(0x09b403ec)]
        HRESULT Comment([out, retval] BSTR* prop);
        [id(0x000003ed), propget, helpcontext(0x09b403ed)]
        HRESULT Date([out, retval] DATE* prop);
        [id(0x00000002), propget, helpcontext(0x09b40002)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000065), hidden, helpcontext(0x09b40065)]
        HRESULT OpenOld();
        [id(0x00000066), helpcontext(0x09b40066)]
        HRESULT Delete();
        [id(0x00000067), helpcontext(0x09b40067)]
        HRESULT Open([out, retval] Document** prop);
    };

    [
      odl,
      uuid(000209B7-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009b7),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Options : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09b703e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09b703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09b703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09b70001)]
        HRESULT AllowAccentedUppercase([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09b70001)]
        HRESULT AllowAccentedUppercase([in] VARIANT_BOOL prop);
        [id(0x00000011), propget, helpcontext(0x09b70011)]
        HRESULT WPHelp([out, retval] VARIANT_BOOL* prop);
        [id(0x00000011), propput, helpcontext(0x09b70011)]
        HRESULT WPHelp([in] VARIANT_BOOL prop);
        [id(0x00000012), propget, helpcontext(0x09b70012)]
        HRESULT WPDocNavKeys([out, retval] VARIANT_BOOL* prop);
        [id(0x00000012), propput, helpcontext(0x09b70012)]
        HRESULT WPDocNavKeys([in] VARIANT_BOOL prop);
        [id(0x00000013), propget, helpcontext(0x09b70013)]
        HRESULT Pagination([out, retval] VARIANT_BOOL* prop);
        [id(0x00000013), propput, helpcontext(0x09b70013)]
        HRESULT Pagination([in] VARIANT_BOOL prop);
        [id(0x00000014), propget, helpcontext(0x09b70014)]
        HRESULT BlueScreen([out, retval] VARIANT_BOOL* prop);
        [id(0x00000014), propput, helpcontext(0x09b70014)]
        HRESULT BlueScreen([in] VARIANT_BOOL prop);
        [id(0x00000015), propget, helpcontext(0x09b70015)]
        HRESULT EnableSound([out, retval] VARIANT_BOOL* prop);
        [id(0x00000015), propput, helpcontext(0x09b70015)]
        HRESULT EnableSound([in] VARIANT_BOOL prop);
        [id(0x00000016), propget, helpcontext(0x09b70016)]
        HRESULT ConfirmConversions([out, retval] VARIANT_BOOL* prop);
        [id(0x00000016), propput, helpcontext(0x09b70016)]
        HRESULT ConfirmConversions([in] VARIANT_BOOL prop);
        [id(0x00000017), propget, helpcontext(0x09b70017)]
        HRESULT UpdateLinksAtOpen([out, retval] VARIANT_BOOL* prop);
        [id(0x00000017), propput, helpcontext(0x09b70017)]
        HRESULT UpdateLinksAtOpen([in] VARIANT_BOOL prop);
        [id(0x00000018), propget, helpcontext(0x09b70018)]
        HRESULT SendMailAttach([out, retval] VARIANT_BOOL* prop);
        [id(0x00000018), propput, helpcontext(0x09b70018)]
        HRESULT SendMailAttach([in] VARIANT_BOOL prop);
        [id(0x0000001a), propget, helpcontext(0x09b7001a)]
        HRESULT MeasurementUnit([out, retval] WdMeasurementUnits* prop);
        [id(0x0000001a), propput, helpcontext(0x09b7001a)]
        HRESULT MeasurementUnit([in] WdMeasurementUnits prop);
        [id(0x0000001b), propget, helpcontext(0x09b7001b)]
        HRESULT ButtonFieldClicks([out, retval] long* prop);
        [id(0x0000001b), propput, helpcontext(0x09b7001b)]
        HRESULT ButtonFieldClicks([in] long prop);
        [id(0x0000001c), propget, helpcontext(0x09b7001c)]
        HRESULT ShortMenuNames([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001c), propput, helpcontext(0x09b7001c)]
        HRESULT ShortMenuNames([in] VARIANT_BOOL prop);
        [id(0x0000001d), propget, helpcontext(0x09b7001d)]
        HRESULT RTFInClipboard([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001d), propput, helpcontext(0x09b7001d)]
        HRESULT RTFInClipboard([in] VARIANT_BOOL prop);
        [id(0x0000001e), propget, helpcontext(0x09b7001e)]
        HRESULT UpdateFieldsAtPrint([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001e), propput, helpcontext(0x09b7001e)]
        HRESULT UpdateFieldsAtPrint([in] VARIANT_BOOL prop);
        [id(0x0000001f), propget, helpcontext(0x09b7001f)]
        HRESULT PrintProperties([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001f), propput, helpcontext(0x09b7001f)]
        HRESULT PrintProperties([in] VARIANT_BOOL prop);
        [id(0x00000020), propget, helpcontext(0x09b70020)]
        HRESULT PrintFieldCodes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000020), propput, helpcontext(0x09b70020)]
        HRESULT PrintFieldCodes([in] VARIANT_BOOL prop);
        [id(0x00000021), propget, helpcontext(0x09b70021)]
        HRESULT PrintComments([out, retval] VARIANT_BOOL* prop);
        [id(0x00000021), propput, helpcontext(0x09b70021)]
        HRESULT PrintComments([in] VARIANT_BOOL prop);
        [id(0x00000022), propget, helpcontext(0x09b70022)]
        HRESULT PrintHiddenText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000022), propput, helpcontext(0x09b70022)]
        HRESULT PrintHiddenText([in] VARIANT_BOOL prop);
        [id(0x00000023), propget, helpcontext(0x09b70023)]
        HRESULT EnvelopeFeederInstalled([out, retval] VARIANT_BOOL* prop);
        [id(0x00000024), propget, helpcontext(0x09b70024)]
        HRESULT UpdateLinksAtPrint([out, retval] VARIANT_BOOL* prop);
        [id(0x00000024), propput, helpcontext(0x09b70024)]
        HRESULT UpdateLinksAtPrint([in] VARIANT_BOOL prop);
        [id(0x00000025), propget, helpcontext(0x09b70025)]
        HRESULT PrintBackground([out, retval] VARIANT_BOOL* prop);
        [id(0x00000025), propput, helpcontext(0x09b70025)]
        HRESULT PrintBackground([in] VARIANT_BOOL prop);
        [id(0x00000026), propget, helpcontext(0x09b70026)]
        HRESULT PrintDrawingObjects([out, retval] VARIANT_BOOL* prop);
        [id(0x00000026), propput, helpcontext(0x09b70026)]
        HRESULT PrintDrawingObjects([in] VARIANT_BOOL prop);
        [id(0x00000027), propget, helpcontext(0x09b70027)]
        HRESULT DefaultTray([out, retval] BSTR* prop);
        [id(0x00000027), propput, helpcontext(0x09b70027)]
        HRESULT DefaultTray([in] BSTR prop);
        [id(0x00000028), propget, helpcontext(0x09b70028)]
        HRESULT DefaultTrayID([out, retval] long* prop);
        [id(0x00000028), propput, helpcontext(0x09b70028)]
        HRESULT DefaultTrayID([in] long prop);
        [id(0x00000029), propget, helpcontext(0x09b70029)]
        HRESULT CreateBackup([out, retval] VARIANT_BOOL* prop);
        [id(0x00000029), propput, helpcontext(0x09b70029)]
        HRESULT CreateBackup([in] VARIANT_BOOL prop);
        [id(0x0000002a), propget, helpcontext(0x09b7002a)]
        HRESULT AllowFastSave([out, retval] VARIANT_BOOL* prop);
        [id(0x0000002a), propput, helpcontext(0x09b7002a)]
        HRESULT AllowFastSave([in] VARIANT_BOOL prop);
        [id(0x0000002b), propget, helpcontext(0x09b7002b)]
        HRESULT SavePropertiesPrompt([out, retval] VARIANT_BOOL* prop);
        [id(0x0000002b), propput, helpcontext(0x09b7002b)]
        HRESULT SavePropertiesPrompt([in] VARIANT_BOOL prop);
        [id(0x0000002c), propget, helpcontext(0x09b7002c)]
        HRESULT SaveNormalPrompt([out, retval] VARIANT_BOOL* prop);
        [id(0x0000002c), propput, helpcontext(0x09b7002c)]
        HRESULT SaveNormalPrompt([in] VARIANT_BOOL prop);
        [id(0x0000002d), propget, helpcontext(0x09b7002d)]
        HRESULT SaveInterval([out, retval] long* prop);
        [id(0x0000002d), propput, helpcontext(0x09b7002d)]
        HRESULT SaveInterval([in] long prop);
        [id(0x0000002e), propget, helpcontext(0x09b7002e)]
        HRESULT BackgroundSave([out, retval] VARIANT_BOOL* prop);
        [id(0x0000002e), propput, helpcontext(0x09b7002e)]
        HRESULT BackgroundSave([in] VARIANT_BOOL prop);
        [id(0x00000039), propget, helpcontext(0x09b70039)]
        HRESULT InsertedTextMark([out, retval] WdInsertedTextMark* prop);
        [id(0x00000039), propput, helpcontext(0x09b70039)]
        HRESULT InsertedTextMark([in] WdInsertedTextMark prop);
        [id(0x0000003a), propget, helpcontext(0x09b7003a)]
        HRESULT DeletedTextMark([out, retval] WdDeletedTextMark* prop);
        [id(0x0000003a), propput, helpcontext(0x09b7003a)]
        HRESULT DeletedTextMark([in] WdDeletedTextMark prop);
        [id(0x0000003b), propget, helpcontext(0x09b7003b)]
        HRESULT RevisedLinesMark([out, retval] WdRevisedLinesMark* prop);
        [id(0x0000003b), propput, helpcontext(0x09b7003b)]
        HRESULT RevisedLinesMark([in] WdRevisedLinesMark prop);
        [id(0x0000003c), propget, helpcontext(0x09b7003c)]
        HRESULT InsertedTextColor([out, retval] WdColorIndex* prop);
        [id(0x0000003c), propput, helpcontext(0x09b7003c)]
        HRESULT InsertedTextColor([in] WdColorIndex prop);
        [id(0x0000003d), propget, helpcontext(0x09b7003d)]
        HRESULT DeletedTextColor([out, retval] WdColorIndex* prop);
        [id(0x0000003d), propput, helpcontext(0x09b7003d)]
        HRESULT DeletedTextColor([in] WdColorIndex prop);
        [id(0x0000003e), propget, helpcontext(0x09b7003e)]
        HRESULT RevisedLinesColor([out, retval] WdColorIndex* prop);
        [id(0x0000003e), propput, helpcontext(0x09b7003e)]
        HRESULT RevisedLinesColor([in] WdColorIndex prop);
        [id(0x00000041), propget, helpcontext(0x09b70041)]
        HRESULT DefaultFilePath(
                        [in] WdDefaultFilePath Path, 
                        [out, retval] BSTR* prop);
        [id(0x00000041), propput, helpcontext(0x09b70041)]
        HRESULT DefaultFilePath(
                        [in] WdDefaultFilePath Path, 
                        [in] BSTR prop);
        [id(0x00000042), propget, helpcontext(0x09b70042)]
        HRESULT Overtype([out, retval] VARIANT_BOOL* prop);
        [id(0x00000042), propput, helpcontext(0x09b70042)]
        HRESULT Overtype([in] VARIANT_BOOL prop);
        [id(0x00000043), propget, helpcontext(0x09b70043)]
        HRESULT ReplaceSelection([out, retval] VARIANT_BOOL* prop);
        [id(0x00000043), propput, helpcontext(0x09b70043)]
        HRESULT ReplaceSelection([in] VARIANT_BOOL prop);
        [id(0x00000044), propget, helpcontext(0x09b70044)]
        HRESULT AllowDragAndDrop([out, retval] VARIANT_BOOL* prop);
        [id(0x00000044), propput, helpcontext(0x09b70044)]
        HRESULT AllowDragAndDrop([in] VARIANT_BOOL prop);
        [id(0x00000045), propget, helpcontext(0x09b70045)]
        HRESULT AutoWordSelection([out, retval] VARIANT_BOOL* prop);
        [id(0x00000045), propput, helpcontext(0x09b70045)]
        HRESULT AutoWordSelection([in] VARIANT_BOOL prop);
        [id(0x00000046), propget, helpcontext(0x09b70046)]
        HRESULT INSKeyForPaste([out, retval] VARIANT_BOOL* prop);
        [id(0x00000046), propput, helpcontext(0x09b70046)]
        HRESULT INSKeyForPaste([in] VARIANT_BOOL prop);
        [id(0x00000047), propget, helpcontext(0x09b70047)]
        HRESULT SmartCutPaste([out, retval] VARIANT_BOOL* prop);
        [id(0x00000047), propput, helpcontext(0x09b70047)]
        HRESULT SmartCutPaste([in] VARIANT_BOOL prop);
        [id(0x00000048), propget, helpcontext(0x09b70048)]
        HRESULT TabIndentKey([out, retval] VARIANT_BOOL* prop);
        [id(0x00000048), propput, helpcontext(0x09b70048)]
        HRESULT TabIndentKey([in] VARIANT_BOOL prop);
        [id(0x00000049), propget, helpcontext(0x09b70049)]
        HRESULT PictureEditor([out, retval] BSTR* prop);
        [id(0x00000049), propput, helpcontext(0x09b70049)]
        HRESULT PictureEditor([in] BSTR prop);
        [id(0x0000004a), propget, helpcontext(0x09b7004a)]
        HRESULT AnimateScreenMovements([out, retval] VARIANT_BOOL* prop);
        [id(0x0000004a), propput, helpcontext(0x09b7004a)]
        HRESULT AnimateScreenMovements([in] VARIANT_BOOL prop);
        [id(0x0000004b), propget, hidden, helpcontext(0x09b7004b)]
        HRESULT VirusProtection([out, retval] VARIANT_BOOL* prop);
        [id(0x0000004b), propput, hidden, helpcontext(0x09b7004b)]
        HRESULT VirusProtection([in] VARIANT_BOOL prop);
        [id(0x0000004c), propget, helpcontext(0x09b7004c)]
        HRESULT RevisedPropertiesMark([out, retval] WdRevisedPropertiesMark* prop);
        [id(0x0000004c), propput, helpcontext(0x09b7004c)]
        HRESULT RevisedPropertiesMark([in] WdRevisedPropertiesMark prop);
        [id(0x0000004d), propget, helpcontext(0x09b7004d)]
        HRESULT RevisedPropertiesColor([out, retval] WdColorIndex* prop);
        [id(0x0000004d), propput, helpcontext(0x09b7004d)]
        HRESULT RevisedPropertiesColor([in] WdColorIndex prop);
        [id(0x0000004f), propget, helpcontext(0x09b7004f)]
        HRESULT SnapToGrid([out, retval] VARIANT_BOOL* prop);
        [id(0x0000004f), propput, helpcontext(0x09b7004f)]
        HRESULT SnapToGrid([in] VARIANT_BOOL prop);
        [id(0x00000050), propget, helpcontext(0x09b70050)]
        HRESULT SnapToShapes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000050), propput, helpcontext(0x09b70050)]
        HRESULT SnapToShapes([in] VARIANT_BOOL prop);
        [id(0x00000051), propget, helpcontext(0x09b70051)]
        HRESULT GridDistanceHorizontal([out, retval] int* prop);
        [id(0x00000051), propput, helpcontext(0x09b70051)]
        HRESULT GridDistanceHorizontal([in] int prop);
        [id(0x00000052), propget, helpcontext(0x09b70052)]
        HRESULT GridDistanceVertical([out, retval] int* prop);
        [id(0x00000052), propput, helpcontext(0x09b70052)]
        HRESULT GridDistanceVertical([in] int prop);
        [id(0x00000053), propget, helpcontext(0x09b70053)]
        HRESULT GridOriginHorizontal([out, retval] int* prop);
        [id(0x00000053), propput, helpcontext(0x09b70053)]
        HRESULT GridOriginHorizontal([in] int prop);
        [id(0x00000054), propget, helpcontext(0x09b70054)]
        HRESULT GridOriginVertical([out, retval] int* prop);
        [id(0x00000054), propput, helpcontext(0x09b70054)]
        HRESULT GridOriginVertical([in] int prop);
        [id(0x00000056), propget, helpcontext(0x09b70056)]
        HRESULT InlineConversion([out, retval] VARIANT_BOOL* prop);
        [id(0x00000056), propput, helpcontext(0x09b70056)]
        HRESULT InlineConversion([in] VARIANT_BOOL prop);
        [id(0x00000057), propget, helpcontext(0x09b70057)]
        HRESULT IMEAutomaticControl([out, retval] VARIANT_BOOL* prop);
        [id(0x00000057), propput, helpcontext(0x09b70057)]
        HRESULT IMEAutomaticControl([in] VARIANT_BOOL prop);
        [id(0x000000fa), propget, helpcontext(0x09b700fa)]
        HRESULT AutoFormatApplyHeadings([out, retval] VARIANT_BOOL* prop);
        [id(0x000000fa), propput, helpcontext(0x09b700fa)]
        HRESULT AutoFormatApplyHeadings([in] VARIANT_BOOL prop);
        [id(0x000000fb), propget, helpcontext(0x09b700fb)]
        HRESULT AutoFormatApplyLists([out, retval] VARIANT_BOOL* prop);
        [id(0x000000fb), propput, helpcontext(0x09b700fb)]
        HRESULT AutoFormatApplyLists([in] VARIANT_BOOL prop);
        [id(0x000000fc), propget, helpcontext(0x09b700fc)]
        HRESULT AutoFormatApplyBulletedLists([out, retval] VARIANT_BOOL* prop);
        [id(0x000000fc), propput, helpcontext(0x09b700fc)]
        HRESULT AutoFormatApplyBulletedLists([in] VARIANT_BOOL prop);
        [id(0x000000fd), propget, helpcontext(0x09b700fd)]
        HRESULT AutoFormatApplyOtherParas([out, retval] VARIANT_BOOL* prop);
        [id(0x000000fd), propput, helpcontext(0x09b700fd)]
        HRESULT AutoFormatApplyOtherParas([in] VARIANT_BOOL prop);
        [id(0x000000fe), propget, helpcontext(0x09b700fe)]
        HRESULT AutoFormatReplaceQuotes([out, retval] VARIANT_BOOL* prop);
        [id(0x000000fe), propput, helpcontext(0x09b700fe)]
        HRESULT AutoFormatReplaceQuotes([in] VARIANT_BOOL prop);
        [id(0x000000ff), propget, helpcontext(0x09b700ff)]
        HRESULT AutoFormatReplaceSymbols([out, retval] VARIANT_BOOL* prop);
        [id(0x000000ff), propput, helpcontext(0x09b700ff)]
        HRESULT AutoFormatReplaceSymbols([in] VARIANT_BOOL prop);
        [id(0x00000100), propget, helpcontext(0x09b70100)]
        HRESULT AutoFormatReplaceOrdinals([out, retval] VARIANT_BOOL* prop);
        [id(0x00000100), propput, helpcontext(0x09b70100)]
        HRESULT AutoFormatReplaceOrdinals([in] VARIANT_BOOL prop);
        [id(0x00000101), propget, helpcontext(0x09b70101)]
        HRESULT AutoFormatReplaceFractions([out, retval] VARIANT_BOOL* prop);
        [id(0x00000101), propput, helpcontext(0x09b70101)]
        HRESULT AutoFormatReplaceFractions([in] VARIANT_BOOL prop);
        [id(0x00000102), propget, helpcontext(0x09b70102)]
        HRESULT AutoFormatReplacePlainTextEmphasis([out, retval] VARIANT_BOOL* prop);
        [id(0x00000102), propput, helpcontext(0x09b70102)]
        HRESULT AutoFormatReplacePlainTextEmphasis([in] VARIANT_BOOL prop);
        [id(0x00000103), propget, helpcontext(0x09b70103)]
        HRESULT AutoFormatPreserveStyles([out, retval] VARIANT_BOOL* prop);
        [id(0x00000103), propput, helpcontext(0x09b70103)]
        HRESULT AutoFormatPreserveStyles([in] VARIANT_BOOL prop);
        [id(0x00000104), propget, helpcontext(0x09b70104)]
        HRESULT AutoFormatAsYouTypeApplyHeadings([out, retval] VARIANT_BOOL* prop);
        [id(0x00000104), propput, helpcontext(0x09b70104)]
        HRESULT AutoFormatAsYouTypeApplyHeadings([in] VARIANT_BOOL prop);
        [id(0x00000105), propget, helpcontext(0x09b70105)]
        HRESULT AutoFormatAsYouTypeApplyBorders([out, retval] VARIANT_BOOL* prop);
        [id(0x00000105), propput, helpcontext(0x09b70105)]
        HRESULT AutoFormatAsYouTypeApplyBorders([in] VARIANT_BOOL prop);
        [id(0x00000106), propget, helpcontext(0x09b70106)]
        HRESULT AutoFormatAsYouTypeApplyBulletedLists([out, retval] VARIANT_BOOL* prop);
        [id(0x00000106), propput, helpcontext(0x09b70106)]
        HRESULT AutoFormatAsYouTypeApplyBulletedLists([in] VARIANT_BOOL prop);
        [id(0x00000107), propget, helpcontext(0x09b70107)]
        HRESULT AutoFormatAsYouTypeApplyNumberedLists([out, retval] VARIANT_BOOL* prop);
        [id(0x00000107), propput, helpcontext(0x09b70107)]
        HRESULT AutoFormatAsYouTypeApplyNumberedLists([in] VARIANT_BOOL prop);
        [id(0x00000108), propget, helpcontext(0x09b70108)]
        HRESULT AutoFormatAsYouTypeReplaceQuotes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000108), propput, helpcontext(0x09b70108)]
        HRESULT AutoFormatAsYouTypeReplaceQuotes([in] VARIANT_BOOL prop);
        [id(0x00000109), propget, helpcontext(0x09b70109)]
        HRESULT AutoFormatAsYouTypeReplaceSymbols([out, retval] VARIANT_BOOL* prop);
        [id(0x00000109), propput, helpcontext(0x09b70109)]
        HRESULT AutoFormatAsYouTypeReplaceSymbols([in] VARIANT_BOOL prop);
        [id(0x0000010a), propget, helpcontext(0x09b7010a)]
        HRESULT AutoFormatAsYouTypeReplaceOrdinals([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010a), propput, helpcontext(0x09b7010a)]
        HRESULT AutoFormatAsYouTypeReplaceOrdinals([in] VARIANT_BOOL prop);
        [id(0x0000010b), propget, helpcontext(0x09b7010b)]
        HRESULT AutoFormatAsYouTypeReplaceFractions([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010b), propput, helpcontext(0x09b7010b)]
        HRESULT AutoFormatAsYouTypeReplaceFractions([in] VARIANT_BOOL prop);
        [id(0x0000010c), propget, helpcontext(0x09b7010c)]
        HRESULT AutoFormatAsYouTypeReplacePlainTextEmphasis([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010c), propput, helpcontext(0x09b7010c)]
        HRESULT AutoFormatAsYouTypeReplacePlainTextEmphasis([in] VARIANT_BOOL prop);
        [id(0x0000010d), propget, helpcontext(0x09b7010d)]
        HRESULT AutoFormatAsYouTypeFormatListItemBeginning([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010d), propput, helpcontext(0x09b7010d)]
        HRESULT AutoFormatAsYouTypeFormatListItemBeginning([in] VARIANT_BOOL prop);
        [id(0x0000010e), propget, helpcontext(0x09b7010e)]
        HRESULT AutoFormatAsYouTypeDefineStyles([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010e), propput, helpcontext(0x09b7010e)]
        HRESULT AutoFormatAsYouTypeDefineStyles([in] VARIANT_BOOL prop);
        [id(0x0000010f), propget, helpcontext(0x09b7010f)]
        HRESULT AutoFormatPlainTextWordMail([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010f), propput, helpcontext(0x09b7010f)]
        HRESULT AutoFormatPlainTextWordMail([in] VARIANT_BOOL prop);
        [id(0x00000110), propget, helpcontext(0x09b70110)]
        HRESULT AutoFormatAsYouTypeReplaceHyperlinks([out, retval] VARIANT_BOOL* prop);
        [id(0x00000110), propput, helpcontext(0x09b70110)]
        HRESULT AutoFormatAsYouTypeReplaceHyperlinks([in] VARIANT_BOOL prop);
        [id(0x00000111), propget, helpcontext(0x09b70111)]
        HRESULT AutoFormatReplaceHyperlinks([out, retval] VARIANT_BOOL* prop);
        [id(0x00000111), propput, helpcontext(0x09b70111)]
        HRESULT AutoFormatReplaceHyperlinks([in] VARIANT_BOOL prop);
        [id(0x00000112), propget, helpcontext(0x09b70112)]
        HRESULT DefaultHighlightColorIndex([out, retval] WdColorIndex* prop);
        [id(0x00000112), propput, helpcontext(0x09b70112)]
        HRESULT DefaultHighlightColorIndex([in] WdColorIndex prop);
        [id(0x00000113), propget, helpcontext(0x09b70113)]
        HRESULT DefaultBorderLineStyle([out, retval] WdLineStyle* prop);
        [id(0x00000113), propput, helpcontext(0x09b70113)]
        HRESULT DefaultBorderLineStyle([in] WdLineStyle prop);
        [id(0x00000114), propget, helpcontext(0x09b70114)]
        HRESULT CheckSpellingAsYouType([out, retval] VARIANT_BOOL* prop);
        [id(0x00000114), propput, helpcontext(0x09b70114)]
        HRESULT CheckSpellingAsYouType([in] VARIANT_BOOL prop);
        [id(0x00000115), propget, helpcontext(0x09b70115)]
        HRESULT CheckGrammarAsYouType([out, retval] VARIANT_BOOL* prop);
        [id(0x00000115), propput, helpcontext(0x09b70115)]
        HRESULT CheckGrammarAsYouType([in] VARIANT_BOOL prop);
        [id(0x00000116), propget, helpcontext(0x09b70116)]
        HRESULT IgnoreInternetAndFileAddresses([out, retval] VARIANT_BOOL* prop);
        [id(0x00000116), propput, helpcontext(0x09b70116)]
        HRESULT IgnoreInternetAndFileAddresses([in] VARIANT_BOOL prop);
        [id(0x00000117), propget, helpcontext(0x09b70117)]
        HRESULT ShowReadabilityStatistics([out, retval] VARIANT_BOOL* prop);
        [id(0x00000117), propput, helpcontext(0x09b70117)]
        HRESULT ShowReadabilityStatistics([in] VARIANT_BOOL prop);
        [id(0x00000118), propget, helpcontext(0x09b70118)]
        HRESULT IgnoreUppercase([out, retval] VARIANT_BOOL* prop);
        [id(0x00000118), propput, helpcontext(0x09b70118)]
        HRESULT IgnoreUppercase([in] VARIANT_BOOL prop);
        [id(0x00000119), propget, helpcontext(0x09b70119)]
        HRESULT IgnoreMixedDigits([out, retval] VARIANT_BOOL* prop);
        [id(0x00000119), propput, helpcontext(0x09b70119)]
        HRESULT IgnoreMixedDigits([in] VARIANT_BOOL prop);
        [id(0x0000011a), propget, helpcontext(0x09b7011a)]
        HRESULT SuggestFromMainDictionaryOnly([out, retval] VARIANT_BOOL* prop);
        [id(0x0000011a), propput, helpcontext(0x09b7011a)]
        HRESULT SuggestFromMainDictionaryOnly([in] VARIANT_BOOL prop);
        [id(0x0000011b), propget, helpcontext(0x09b7011b)]
        HRESULT SuggestSpellingCorrections([out, retval] VARIANT_BOOL* prop);
        [id(0x0000011b), propput, helpcontext(0x09b7011b)]
        HRESULT SuggestSpellingCorrections([in] VARIANT_BOOL prop);
        [id(0x0000011c), propget, helpcontext(0x09b7011c)]
        HRESULT DefaultBorderLineWidth([out, retval] WdLineWidth* prop);
        [id(0x0000011c), propput, helpcontext(0x09b7011c)]
        HRESULT DefaultBorderLineWidth([in] WdLineWidth prop);
        [id(0x0000011d), propget, helpcontext(0x09b7011d)]
        HRESULT CheckGrammarWithSpelling([out, retval] VARIANT_BOOL* prop);
        [id(0x0000011d), propput, helpcontext(0x09b7011d)]
        HRESULT CheckGrammarWithSpelling([in] VARIANT_BOOL prop);
        [id(0x0000011e), propget, helpcontext(0x09b7011e)]
        HRESULT DefaultOpenFormat([out, retval] WdOpenFormat* prop);
        [id(0x0000011e), propput, helpcontext(0x09b7011e)]
        HRESULT DefaultOpenFormat([in] WdOpenFormat prop);
        [id(0x0000011f), propget, helpcontext(0x09b7011f)]
        HRESULT PrintDraft([out, retval] VARIANT_BOOL* prop);
        [id(0x0000011f), propput, helpcontext(0x09b7011f)]
        HRESULT PrintDraft([in] VARIANT_BOOL prop);
        [id(0x00000120), propget, helpcontext(0x09b70120)]
        HRESULT PrintReverse([out, retval] VARIANT_BOOL* prop);
        [id(0x00000120), propput, helpcontext(0x09b70120)]
        HRESULT PrintReverse([in] VARIANT_BOOL prop);
        [id(0x00000121), propget, helpcontext(0x09b70121)]
        HRESULT MapPaperSize([out, retval] VARIANT_BOOL* prop);
        [id(0x00000121), propput, helpcontext(0x09b70121)]
        HRESULT MapPaperSize([in] VARIANT_BOOL prop);
        [id(0x00000122), propget, helpcontext(0x09b70122)]
        HRESULT AutoFormatAsYouTypeApplyTables([out, retval] VARIANT_BOOL* prop);
        [id(0x00000122), propput, helpcontext(0x09b70122)]
        HRESULT AutoFormatAsYouTypeApplyTables([in] VARIANT_BOOL prop);
        [id(0x00000123), propget, helpcontext(0x09b70123)]
        HRESULT AutoFormatApplyFirstIndents([out, retval] VARIANT_BOOL* prop);
        [id(0x00000123), propput, helpcontext(0x09b70123)]
        HRESULT AutoFormatApplyFirstIndents([in] VARIANT_BOOL prop);
        [id(0x00000126), propget, helpcontext(0x09b70126)]
        HRESULT AutoFormatMatchParentheses([out, retval] VARIANT_BOOL* prop);
        [id(0x00000126), propput, helpcontext(0x09b70126)]
        HRESULT AutoFormatMatchParentheses([in] VARIANT_BOOL prop);
        [id(0x00000127), propget, helpcontext(0x09b70127)]
        HRESULT AutoFormatReplaceFarEastDashes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000127), propput, helpcontext(0x09b70127)]
        HRESULT AutoFormatReplaceFarEastDashes([in] VARIANT_BOOL prop);
        [id(0x00000128), propget, helpcontext(0x09b70128)]
        HRESULT AutoFormatDeleteAutoSpaces([out, retval] VARIANT_BOOL* prop);
        [id(0x00000128), propput, helpcontext(0x09b70128)]
        HRESULT AutoFormatDeleteAutoSpaces([in] VARIANT_BOOL prop);
        [id(0x00000129), propget, helpcontext(0x09b70129)]
        HRESULT AutoFormatAsYouTypeApplyFirstIndents([out, retval] VARIANT_BOOL* prop);
        [id(0x00000129), propput, helpcontext(0x09b70129)]
        HRESULT AutoFormatAsYouTypeApplyFirstIndents([in] VARIANT_BOOL prop);
        [id(0x0000012a), propget, helpcontext(0x09b7012a)]
        HRESULT AutoFormatAsYouTypeApplyDates([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012a), propput, helpcontext(0x09b7012a)]
        HRESULT AutoFormatAsYouTypeApplyDates([in] VARIANT_BOOL prop);
        [id(0x0000012b), propget, helpcontext(0x09b7012b)]
        HRESULT AutoFormatAsYouTypeApplyClosings([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012b), propput, helpcontext(0x09b7012b)]
        HRESULT AutoFormatAsYouTypeApplyClosings([in] VARIANT_BOOL prop);
        [id(0x0000012c), propget, helpcontext(0x09b7012c)]
        HRESULT AutoFormatAsYouTypeMatchParentheses([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012c), propput, helpcontext(0x09b7012c)]
        HRESULT AutoFormatAsYouTypeMatchParentheses([in] VARIANT_BOOL prop);
        [id(0x0000012d), propget, helpcontext(0x09b7012d)]
        HRESULT AutoFormatAsYouTypeReplaceFarEastDashes([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012d), propput, helpcontext(0x09b7012d)]
        HRESULT AutoFormatAsYouTypeReplaceFarEastDashes([in] VARIANT_BOOL prop);
        [id(0x0000012e), propget, helpcontext(0x09b7012e)]
        HRESULT AutoFormatAsYouTypeDeleteAutoSpaces([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012e), propput, helpcontext(0x09b7012e)]
        HRESULT AutoFormatAsYouTypeDeleteAutoSpaces([in] VARIANT_BOOL prop);
        [id(0x0000012f), propget, helpcontext(0x09b7012f)]
        HRESULT AutoFormatAsYouTypeInsertClosings([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012f), propput, helpcontext(0x09b7012f)]
        HRESULT AutoFormatAsYouTypeInsertClosings([in] VARIANT_BOOL prop);
        [id(0x00000130), propget, helpcontext(0x09b70130)]
        HRESULT AutoFormatAsYouTypeAutoLetterWizard([out, retval] VARIANT_BOOL* prop);
        [id(0x00000130), propput, helpcontext(0x09b70130)]
        HRESULT AutoFormatAsYouTypeAutoLetterWizard([in] VARIANT_BOOL prop);
        [id(0x00000131), propget, helpcontext(0x09b70131)]
        HRESULT AutoFormatAsYouTypeInsertOvers([out, retval] VARIANT_BOOL* prop);
        [id(0x00000131), propput, helpcontext(0x09b70131)]
        HRESULT AutoFormatAsYouTypeInsertOvers([in] VARIANT_BOOL prop);
        [id(0x00000132), propget, helpcontext(0x09b70132)]
        HRESULT DisplayGridLines([out, retval] VARIANT_BOOL* prop);
        [id(0x00000132), propput, helpcontext(0x09b70132)]
        HRESULT DisplayGridLines([in] VARIANT_BOOL prop);
        [id(0x00000135), propget, helpcontext(0x09b70135)]
        HRESULT MatchFuzzyCase([out, retval] VARIANT_BOOL* prop);
        [id(0x00000135), propput, helpcontext(0x09b70135)]
        HRESULT MatchFuzzyCase([in] VARIANT_BOOL prop);
        [id(0x00000136), propget, helpcontext(0x09b70136)]
        HRESULT MatchFuzzyByte([out, retval] VARIANT_BOOL* prop);
        [id(0x00000136), propput, helpcontext(0x09b70136)]
        HRESULT MatchFuzzyByte([in] VARIANT_BOOL prop);
        [id(0x00000137), propget, helpcontext(0x09b70137)]
        HRESULT MatchFuzzyHiragana([out, retval] VARIANT_BOOL* prop);
        [id(0x00000137), propput, helpcontext(0x09b70137)]
        HRESULT MatchFuzzyHiragana([in] VARIANT_BOOL prop);
        [id(0x00000138), propget, helpcontext(0x09b70138)]
        HRESULT MatchFuzzySmallKana([out, retval] VARIANT_BOOL* prop);
        [id(0x00000138), propput, helpcontext(0x09b70138)]
        HRESULT MatchFuzzySmallKana([in] VARIANT_BOOL prop);
        [id(0x00000139), propget, helpcontext(0x09b70139)]
        HRESULT MatchFuzzyDash([out, retval] VARIANT_BOOL* prop);
        [id(0x00000139), propput, helpcontext(0x09b70139)]
        HRESULT MatchFuzzyDash([in] VARIANT_BOOL prop);
        [id(0x0000013a), propget, helpcontext(0x09b7013a)]
        HRESULT MatchFuzzyIterationMark([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013a), propput, helpcontext(0x09b7013a)]
        HRESULT MatchFuzzyIterationMark([in] VARIANT_BOOL prop);
        [id(0x0000013b), propget, helpcontext(0x09b7013b)]
        HRESULT MatchFuzzyKanji([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013b), propput, helpcontext(0x09b7013b)]
        HRESULT MatchFuzzyKanji([in] VARIANT_BOOL prop);
        [id(0x0000013c), propget, helpcontext(0x09b7013c)]
        HRESULT MatchFuzzyOldKana([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013c), propput, helpcontext(0x09b7013c)]
        HRESULT MatchFuzzyOldKana([in] VARIANT_BOOL prop);
        [id(0x0000013d), propget, helpcontext(0x09b7013d)]
        HRESULT MatchFuzzyProlongedSoundMark([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013d), propput, helpcontext(0x09b7013d)]
        HRESULT MatchFuzzyProlongedSoundMark([in] VARIANT_BOOL prop);
        [id(0x0000013e), propget, helpcontext(0x09b7013e)]
        HRESULT MatchFuzzyDZ([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013e), propput, helpcontext(0x09b7013e)]
        HRESULT MatchFuzzyDZ([in] VARIANT_BOOL prop);
        [id(0x0000013f), propget, helpcontext(0x09b7013f)]
        HRESULT MatchFuzzyBV([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013f), propput, helpcontext(0x09b7013f)]
        HRESULT MatchFuzzyBV([in] VARIANT_BOOL prop);
        [id(0x00000140), propget, helpcontext(0x09b70140)]
        HRESULT MatchFuzzyTC([out, retval] VARIANT_BOOL* prop);
        [id(0x00000140), propput, helpcontext(0x09b70140)]
        HRESULT MatchFuzzyTC([in] VARIANT_BOOL prop);
        [id(0x00000141), propget, helpcontext(0x09b70141)]
        HRESULT MatchFuzzyHF([out, retval] VARIANT_BOOL* prop);
        [id(0x00000141), propput, helpcontext(0x09b70141)]
        HRESULT MatchFuzzyHF([in] VARIANT_BOOL prop);
        [id(0x00000142), propget, helpcontext(0x09b70142)]
        HRESULT MatchFuzzyZJ([out, retval] VARIANT_BOOL* prop);
        [id(0x00000142), propput, helpcontext(0x09b70142)]
        HRESULT MatchFuzzyZJ([in] VARIANT_BOOL prop);
        [id(0x00000143), propget, helpcontext(0x09b70143)]
        HRESULT MatchFuzzyAY([out, retval] VARIANT_BOOL* prop);
        [id(0x00000143), propput, helpcontext(0x09b70143)]
        HRESULT MatchFuzzyAY([in] VARIANT_BOOL prop);
        [id(0x00000144), propget, helpcontext(0x09b70144)]
        HRESULT MatchFuzzyKiKu([out, retval] VARIANT_BOOL* prop);
        [id(0x00000144), propput, helpcontext(0x09b70144)]
        HRESULT MatchFuzzyKiKu([in] VARIANT_BOOL prop);
        [id(0x00000145), propget, helpcontext(0x09b70145)]
        HRESULT MatchFuzzyPunctuation([out, retval] VARIANT_BOOL* prop);
        [id(0x00000145), propput, helpcontext(0x09b70145)]
        HRESULT MatchFuzzyPunctuation([in] VARIANT_BOOL prop);
        [id(0x00000146), propget, helpcontext(0x09b70146)]
        HRESULT MatchFuzzySpace([out, retval] VARIANT_BOOL* prop);
        [id(0x00000146), propput, helpcontext(0x09b70146)]
        HRESULT MatchFuzzySpace([in] VARIANT_BOOL prop);
        [id(0x00000147), propget, helpcontext(0x09b70147)]
        HRESULT ApplyFarEastFontsToAscii([out, retval] VARIANT_BOOL* prop);
        [id(0x00000147), propput, helpcontext(0x09b70147)]
        HRESULT ApplyFarEastFontsToAscii([in] VARIANT_BOOL prop);
        [id(0x00000148), propget, helpcontext(0x09b70148)]
        HRESULT ConvertHighAnsiToFarEast([out, retval] VARIANT_BOOL* prop);
        [id(0x00000148), propput, helpcontext(0x09b70148)]
        HRESULT ConvertHighAnsiToFarEast([in] VARIANT_BOOL prop);
        [id(0x0000014a), propget, helpcontext(0x09b7014a)]
        HRESULT PrintOddPagesInAscendingOrder([out, retval] VARIANT_BOOL* prop);
        [id(0x0000014a), propput, helpcontext(0x09b7014a)]
        HRESULT PrintOddPagesInAscendingOrder([in] VARIANT_BOOL prop);
        [id(0x0000014b), propget, helpcontext(0x09b7014b)]
        HRESULT PrintEvenPagesInAscendingOrder([out, retval] VARIANT_BOOL* prop);
        [id(0x0000014b), propput, helpcontext(0x09b7014b)]
        HRESULT PrintEvenPagesInAscendingOrder([in] VARIANT_BOOL prop);
        [id(0x00000151), propget, helpcontext(0x09b70151)]
        HRESULT DefaultBorderColorIndex([out, retval] WdColorIndex* prop);
        [id(0x00000151), propput, helpcontext(0x09b70151)]
        HRESULT DefaultBorderColorIndex([in] WdColorIndex prop);
        [id(0x00000152), propget, helpcontext(0x09b70152)]
        HRESULT EnableMisusedWordsDictionary([out, retval] VARIANT_BOOL* prop);
        [id(0x00000152), propput, helpcontext(0x09b70152)]
        HRESULT EnableMisusedWordsDictionary([in] VARIANT_BOOL prop);
        [id(0x00000153), propget, helpcontext(0x09b70153)]
        HRESULT AllowCombinedAuxiliaryForms([out, retval] VARIANT_BOOL* prop);
        [id(0x00000153), propput, helpcontext(0x09b70153)]
        HRESULT AllowCombinedAuxiliaryForms([in] VARIANT_BOOL prop);
        [id(0x00000154), propget, helpcontext(0x09b70154)]
        HRESULT HangulHanjaFastConversion([out, retval] VARIANT_BOOL* prop);
        [id(0x00000154), propput, helpcontext(0x09b70154)]
        HRESULT HangulHanjaFastConversion([in] VARIANT_BOOL prop);
        [id(0x00000155), propget, helpcontext(0x09b70155)]
        HRESULT CheckHangulEndings([out, retval] VARIANT_BOOL* prop);
        [id(0x00000155), propput, helpcontext(0x09b70155)]
        HRESULT CheckHangulEndings([in] VARIANT_BOOL prop);
        [id(0x00000156), propget, helpcontext(0x09b70156)]
        HRESULT EnableHangulHanjaRecentOrdering([out, retval] VARIANT_BOOL* prop);
        [id(0x00000156), propput, helpcontext(0x09b70156)]
        HRESULT EnableHangulHanjaRecentOrdering([in] VARIANT_BOOL prop);
        [id(0x00000157), propget, helpcontext(0x09b70157)]
        HRESULT MultipleWordConversionsMode([out, retval] WdMultipleWordConversionsMode* prop);
        [id(0x00000157), propput, helpcontext(0x09b70157)]
        HRESULT MultipleWordConversionsMode([in] WdMultipleWordConversionsMode prop);
        [id(0x0000014d), helpcontext(0x09b7014d)]
        HRESULT SetWPHelpOptions(
                        [in, optional] VARIANT* CommandKeyHelp, 
                        [in, optional] VARIANT* DocNavigationKeys, 
                        [in, optional] VARIANT* MouseSimulation, 
                        [in, optional] VARIANT* DemoGuidance, 
                        [in, optional] VARIANT* DemoSpeed, 
                        [in, optional] VARIANT* HelpType);
        [id(0x00000158), propget, helpcontext(0x09b70158)]
        HRESULT DefaultBorderColor([out, retval] WdColor* prop);
        [id(0x00000158), propput, helpcontext(0x09b70158)]
        HRESULT DefaultBorderColor([in] WdColor prop);
        [id(0x00000159), propget, helpcontext(0x09b70159)]
        HRESULT AllowPixelUnits([out, retval] VARIANT_BOOL* prop);
        [id(0x00000159), propput, helpcontext(0x09b70159)]
        HRESULT AllowPixelUnits([in] VARIANT_BOOL prop);
        [id(0x0000015a), propget, helpcontext(0x09b7015a)]
        HRESULT UseCharacterUnit([out, retval] VARIANT_BOOL* prop);
        [id(0x0000015a), propput, helpcontext(0x09b7015a)]
        HRESULT UseCharacterUnit([in] VARIANT_BOOL prop);
        [id(0x0000015b), propget, helpcontext(0x09b7015b)]
        HRESULT AllowCompoundNounProcessing([out, retval] VARIANT_BOOL* prop);
        [id(0x0000015b), propput, helpcontext(0x09b7015b)]
        HRESULT AllowCompoundNounProcessing([in] VARIANT_BOOL prop);
        [id(0x0000018f), propget, helpcontext(0x09b7018f)]
        HRESULT AutoKeyboardSwitching([out, retval] VARIANT_BOOL* prop);
        [id(0x0000018f), propput, helpcontext(0x09b7018f)]
        HRESULT AutoKeyboardSwitching([in] VARIANT_BOOL prop);
        [id(0x00000190), propget, helpcontext(0x09b70190)]
        HRESULT DocumentViewDirection([out, retval] WdDocumentViewDirection* prop);
        [id(0x00000190), propput, helpcontext(0x09b70190)]
        HRESULT DocumentViewDirection([in] WdDocumentViewDirection prop);
        [id(0x00000191), propget, helpcontext(0x09b70191)]
        HRESULT ArabicNumeral([out, retval] WdArabicNumeral* prop);
        [id(0x00000191), propput, helpcontext(0x09b70191)]
        HRESULT ArabicNumeral([in] WdArabicNumeral prop);
        [id(0x00000192), propget, helpcontext(0x09b70192)]
        HRESULT MonthNames([out, retval] WdMonthNames* prop);
        [id(0x00000192), propput, helpcontext(0x09b70192)]
        HRESULT MonthNames([in] WdMonthNames prop);
        [id(0x00000193), propget, helpcontext(0x09b70193)]
        HRESULT CursorMovement([out, retval] WdCursorMovement* prop);
        [id(0x00000193), propput, helpcontext(0x09b70193)]
        HRESULT CursorMovement([in] WdCursorMovement prop);
        [id(0x00000194), propget, helpcontext(0x09b70194)]
        HRESULT VisualSelection([out, retval] WdVisualSelection* prop);
        [id(0x00000194), propput, helpcontext(0x09b70194)]
        HRESULT VisualSelection([in] WdVisualSelection prop);
        [id(0x00000195), propget, helpcontext(0x09b70195)]
        HRESULT ShowDiacritics([out, retval] VARIANT_BOOL* prop);
        [id(0x00000195), propput, helpcontext(0x09b70195)]
        HRESULT ShowDiacritics([in] VARIANT_BOOL prop);
        [id(0x00000196), propget, helpcontext(0x09b70196)]
        HRESULT ShowControlCharacters([out, retval] VARIANT_BOOL* prop);
        [id(0x00000196), propput, helpcontext(0x09b70196)]
        HRESULT ShowControlCharacters([in] VARIANT_BOOL prop);
        [id(0x00000197), propget, helpcontext(0x09b70197)]
        HRESULT AddControlCharacters([out, retval] VARIANT_BOOL* prop);
        [id(0x00000197), propput, helpcontext(0x09b70197)]
        HRESULT AddControlCharacters([in] VARIANT_BOOL prop);
        [id(0x00000198), propget, helpcontext(0x09b70198)]
        HRESULT AddBiDirectionalMarksWhenSavingTextFile([out, retval] VARIANT_BOOL* prop);
        [id(0x00000198), propput, helpcontext(0x09b70198)]
        HRESULT AddBiDirectionalMarksWhenSavingTextFile([in] VARIANT_BOOL prop);
        [id(0x00000199), propget, helpcontext(0x09b70199)]
        HRESULT StrictInitialAlefHamza([out, retval] VARIANT_BOOL* prop);
        [id(0x00000199), propput, helpcontext(0x09b70199)]
        HRESULT StrictInitialAlefHamza([in] VARIANT_BOOL prop);
        [id(0x0000019a), propget, helpcontext(0x09b7019a)]
        HRESULT StrictFinalYaa([out, retval] VARIANT_BOOL* prop);
        [id(0x0000019a), propput, helpcontext(0x09b7019a)]
        HRESULT StrictFinalYaa([in] VARIANT_BOOL prop);
        [id(0x0000019b), propget, helpcontext(0x09b7019b)]
        HRESULT HebrewMode([out, retval] WdHebSpellStart* prop);
        [id(0x0000019b), propput, helpcontext(0x09b7019b)]
        HRESULT HebrewMode([in] WdHebSpellStart prop);
        [id(0x0000019c), propget, helpcontext(0x09b7019c)]
        HRESULT ArabicMode([out, retval] WdAraSpeller* prop);
        [id(0x0000019c), propput, helpcontext(0x09b7019c)]
        HRESULT ArabicMode([in] WdAraSpeller prop);
        [id(0x0000019d), propget, helpcontext(0x09b7019d)]
        HRESULT AllowClickAndTypeMouse([out, retval] VARIANT_BOOL* prop);
        [id(0x0000019d), propput, helpcontext(0x09b7019d)]
        HRESULT AllowClickAndTypeMouse([in] VARIANT_BOOL prop);
        [id(0x0000019f), propget, helpcontext(0x09b7019f)]
        HRESULT UseGermanSpellingReform([out, retval] VARIANT_BOOL* prop);
        [id(0x0000019f), propput, helpcontext(0x09b7019f)]
        HRESULT UseGermanSpellingReform([in] VARIANT_BOOL prop);
        [id(0x000001a2), propget, helpcontext(0x09b701a2)]
        HRESULT InterpretHighAnsi([out, retval] WdHighAnsiText* prop);
        [id(0x000001a2), propput, helpcontext(0x09b701a2)]
        HRESULT InterpretHighAnsi([in] WdHighAnsiText prop);
        [id(0x000001a3), propget, helpcontext(0x09b701a3)]
        HRESULT AddHebDoubleQuote([out, retval] VARIANT_BOOL* prop);
        [id(0x000001a3), propput, helpcontext(0x09b701a3)]
        HRESULT AddHebDoubleQuote([in] VARIANT_BOOL prop);
        [id(0x000001a4), propget, helpcontext(0x09b701a4)]
        HRESULT UseDiffDiacColor([out, retval] VARIANT_BOOL* prop);
        [id(0x000001a4), propput, helpcontext(0x09b701a4)]
        HRESULT UseDiffDiacColor([in] VARIANT_BOOL prop);
        [id(0x000001a5), propget, helpcontext(0x09b701a5)]
        HRESULT DiacriticColorVal([out, retval] WdColor* prop);
        [id(0x000001a5), propput, helpcontext(0x09b701a5)]
        HRESULT DiacriticColorVal([in] WdColor prop);
        [id(0x000001a7), propget, helpcontext(0x09b701a7)]
        HRESULT OptimizeForWord97byDefault([out, retval] VARIANT_BOOL* prop);
        [id(0x000001a7), propput, helpcontext(0x09b701a7)]
        HRESULT OptimizeForWord97byDefault([in] VARIANT_BOOL prop);
        [id(0x000001a8), propget, helpcontext(0x09b701a8)]
        HRESULT LocalNetworkFile([out, retval] VARIANT_BOOL* prop);
        [id(0x000001a8), propput, helpcontext(0x09b701a8)]
        HRESULT LocalNetworkFile([in] VARIANT_BOOL prop);
        [id(0x000001a9), propget, helpcontext(0x09b701a9)]
        HRESULT TypeNReplace([out, retval] VARIANT_BOOL* prop);
        [id(0x000001a9), propput, helpcontext(0x09b701a9)]
        HRESULT TypeNReplace([in] VARIANT_BOOL prop);
        [id(0x000001aa), propget, helpcontext(0x09b701aa)]
        HRESULT SequenceCheck([out, retval] VARIANT_BOOL* prop);
        [id(0x000001aa), propput, helpcontext(0x09b701aa)]
        HRESULT SequenceCheck([in] VARIANT_BOOL prop);
        [id(0x000001ab), propget, helpcontext(0x09b701ab)]
        HRESULT BackgroundOpen([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ab), propput, helpcontext(0x09b701ab)]
        HRESULT BackgroundOpen([in] VARIANT_BOOL prop);
        [id(0x000001ac), propget, helpcontext(0x09b701ac)]
        HRESULT DisableFeaturesbyDefault([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ac), propput, helpcontext(0x09b701ac)]
        HRESULT DisableFeaturesbyDefault([in] VARIANT_BOOL prop);
        [id(0x000001ad), propget, helpcontext(0x09b701ad)]
        HRESULT PasteAdjustWordSpacing([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ad), propput, helpcontext(0x09b701ad)]
        HRESULT PasteAdjustWordSpacing([in] VARIANT_BOOL prop);
        [id(0x000001ae), propget, helpcontext(0x09b701ae)]
        HRESULT PasteAdjustParagraphSpacing([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ae), propput, helpcontext(0x09b701ae)]
        HRESULT PasteAdjustParagraphSpacing([in] VARIANT_BOOL prop);
        [id(0x000001af), propget, helpcontext(0x09b701af)]
        HRESULT PasteAdjustTableFormatting([out, retval] VARIANT_BOOL* prop);
        [id(0x000001af), propput, helpcontext(0x09b701af)]
        HRESULT PasteAdjustTableFormatting([in] VARIANT_BOOL prop);
        [id(0x000001b0), propget, helpcontext(0x09b701b0)]
        HRESULT PasteSmartStyleBehavior([out, retval] VARIANT_BOOL* prop);
        [id(0x000001b0), propput, helpcontext(0x09b701b0)]
        HRESULT PasteSmartStyleBehavior([in] VARIANT_BOOL prop);
        [id(0x000001b1), propget, helpcontext(0x09b701b1)]
        HRESULT PasteMergeFromPPT([out, retval] VARIANT_BOOL* prop);
        [id(0x000001b1), propput, helpcontext(0x09b701b1)]
        HRESULT PasteMergeFromPPT([in] VARIANT_BOOL prop);
        [id(0x000001b2), propget, helpcontext(0x09b701b2)]
        HRESULT PasteMergeFromXL([out, retval] VARIANT_BOOL* prop);
        [id(0x000001b2), propput, helpcontext(0x09b701b2)]
        HRESULT PasteMergeFromXL([in] VARIANT_BOOL prop);
        [id(0x000001b3), propget, helpcontext(0x09b701b3)]
        HRESULT CtrlClickHyperlinkToOpen([out, retval] VARIANT_BOOL* prop);
        [id(0x000001b3), propput, helpcontext(0x09b701b3)]
        HRESULT CtrlClickHyperlinkToOpen([in] VARIANT_BOOL prop);
        [id(0x000001b4), propget, helpcontext(0x09b701b4)]
        HRESULT PictureWrapType([out, retval] WdWrapTypeMerged* prop);
        [id(0x000001b4), propput, helpcontext(0x09b701b4)]
        HRESULT PictureWrapType([in] WdWrapTypeMerged prop);
        [id(0x000001b5), propget, helpcontext(0x09b701b5)]
        HRESULT DisableFeaturesIntroducedAfterbyDefault([out, retval] WdDisableFeaturesIntroducedAfter* prop);
        [id(0x000001b5), propput, helpcontext(0x09b701b5)]
        HRESULT DisableFeaturesIntroducedAfterbyDefault([in] WdDisableFeaturesIntroducedAfter prop);
        [id(0x000001b6), propget, helpcontext(0x09b701b6)]
        HRESULT PasteSmartCutPaste([out, retval] VARIANT_BOOL* prop);
        [id(0x000001b6), propput, helpcontext(0x09b701b6)]
        HRESULT PasteSmartCutPaste([in] VARIANT_BOOL prop);
        [id(0x000001b7), propget, helpcontext(0x09b701b7)]
        HRESULT DisplayPasteOptions([out, retval] VARIANT_BOOL* prop);
        [id(0x000001b7), propput, helpcontext(0x09b701b7)]
        HRESULT DisplayPasteOptions([in] VARIANT_BOOL prop);
        [id(0x000001b9), propget, helpcontext(0x09b701b9)]
        HRESULT PromptUpdateStyle([out, retval] VARIANT_BOOL* prop);
        [id(0x000001b9), propput, helpcontext(0x09b701b9)]
        HRESULT PromptUpdateStyle([in] VARIANT_BOOL prop);
        [id(0x000001ba), propget, helpcontext(0x09b701ba)]
        HRESULT DefaultEPostageApp([out, retval] BSTR* prop);
        [id(0x000001ba), propput, helpcontext(0x09b701ba)]
        HRESULT DefaultEPostageApp([in] BSTR prop);
        [id(0x000001bb), propget, helpcontext(0x09b701bb)]
        HRESULT DefaultTextEncoding([out, retval] MsoEncoding* prop);
        [id(0x000001bb), propput, helpcontext(0x09b701bb)]
        HRESULT DefaultTextEncoding([in] MsoEncoding prop);
        [id(0x000001bc), propget, helpcontext(0x09b701bc)]
        HRESULT LabelSmartTags([out, retval] VARIANT_BOOL* prop);
        [id(0x000001bc), propput, helpcontext(0x09b701bc)]
        HRESULT LabelSmartTags([in] VARIANT_BOOL prop);
        [id(0x000001bd), propget, helpcontext(0x09b701bd)]
        HRESULT DisplaySmartTagButtons([out, retval] VARIANT_BOOL* prop);
        [id(0x000001bd), propput, helpcontext(0x09b701bd)]
        HRESULT DisplaySmartTagButtons([in] VARIANT_BOOL prop);
        [id(0x000001be), propget, helpcontext(0x09b701be)]
        HRESULT WarnBeforeSavingPrintingSendingMarkup([out, retval] VARIANT_BOOL* prop);
        [id(0x000001be), propput, helpcontext(0x09b701be)]
        HRESULT WarnBeforeSavingPrintingSendingMarkup([in] VARIANT_BOOL prop);
        [id(0x000001bf), propget, helpcontext(0x09b701bf)]
        HRESULT StoreRSIDOnSave([out, retval] VARIANT_BOOL* prop);
        [id(0x000001bf), propput, helpcontext(0x09b701bf)]
        HRESULT StoreRSIDOnSave([in] VARIANT_BOOL prop);
        [id(0x000001c0), propget, helpcontext(0x09b701c0)]
        HRESULT ShowFormatError([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c0), propput, helpcontext(0x09b701c0)]
        HRESULT ShowFormatError([in] VARIANT_BOOL prop);
        [id(0x000001c1), propget, helpcontext(0x09b701c1)]
        HRESULT FormatScanning([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c1), propput, helpcontext(0x09b701c1)]
        HRESULT FormatScanning([in] VARIANT_BOOL prop);
        [id(0x000001c2), propget, helpcontext(0x09b701c2)]
        HRESULT PasteMergeLists([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c2), propput, helpcontext(0x09b701c2)]
        HRESULT PasteMergeLists([in] VARIANT_BOOL prop);
        [id(0x000001c3), propget, helpcontext(0x09b701c3)]
        HRESULT AutoCreateNewDrawings([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c3), propput, helpcontext(0x09b701c3)]
        HRESULT AutoCreateNewDrawings([in] VARIANT_BOOL prop);
        [id(0x000001c4), propget, helpcontext(0x09b701c4)]
        HRESULT SmartParaSelection([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c4), propput, helpcontext(0x09b701c4)]
        HRESULT SmartParaSelection([in] VARIANT_BOOL prop);
        [id(0x000001c5), propget, helpcontext(0x09b701c5)]
        HRESULT RevisionsBalloonPrintOrientation([out, retval] WdRevisionsBalloonPrintOrientation* prop);
        [id(0x000001c5), propput, helpcontext(0x09b701c5)]
        HRESULT RevisionsBalloonPrintOrientation([in] WdRevisionsBalloonPrintOrientation prop);
        [id(0x000001c6), propget, helpcontext(0x09b701c6)]
        HRESULT CommentsColor([out, retval] WdColorIndex* prop);
        [id(0x000001c6), propput, helpcontext(0x09b701c6)]
        HRESULT CommentsColor([in] WdColorIndex prop);
        [id(0x000001c7), propget, helpcontext(0x09b701c7)]
        HRESULT PrintXMLTag([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c7), propput, helpcontext(0x09b701c7)]
        HRESULT PrintXMLTag([in] VARIANT_BOOL prop);
        [id(0x000001c8), propget, helpcontext(0x09b701c8)]
        HRESULT PrintBackgrounds([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c8), propput, helpcontext(0x09b701c8)]
        HRESULT PrintBackgrounds([in] VARIANT_BOOL prop);
        [id(0x000001c9), propget, helpcontext(0x09b701c9)]
        HRESULT AllowReadingMode([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c9), propput, helpcontext(0x09b701c9)]
        HRESULT AllowReadingMode([in] VARIANT_BOOL prop);
        [id(0x000001ca), propget, helpcontext(0x09b701ca)]
        HRESULT ShowMarkupOpenSave([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ca), propput, helpcontext(0x09b701ca)]
        HRESULT ShowMarkupOpenSave([in] VARIANT_BOOL prop);
        [id(0x000001cb), propget, helpcontext(0x09b701cb)]
        HRESULT SmartCursoring([out, retval] VARIANT_BOOL* prop);
        [id(0x000001cb), propput, helpcontext(0x09b701cb)]
        HRESULT SmartCursoring([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(000209BA-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009ba),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMessage : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ba03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ba03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09ba03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000014e), helpcontext(0x09ba014e)]
        HRESULT CheckName();
        [id(0x0000014f), helpcontext(0x09ba014f)]
        HRESULT Delete();
        [id(0x00000150), helpcontext(0x09ba0150)]
        HRESULT DisplayMoveDialog();
        [id(0x00000151), helpcontext(0x09ba0151)]
        HRESULT DisplayProperties();
        [id(0x00000152), helpcontext(0x09ba0152)]
        HRESULT DisplaySelectNamesDialog();
        [id(0x00000153), helpcontext(0x09ba0153)]
        HRESULT Forward();
        [id(0x00000154), helpcontext(0x09ba0154)]
        HRESULT GoToNext();
        [id(0x00000155), helpcontext(0x09ba0155)]
        HRESULT GoToPrevious();
        [id(0x00000156), helpcontext(0x09ba0156)]
        HRESULT Reply();
        [id(0x00000157), helpcontext(0x09ba0157)]
        HRESULT ReplyAll();
        [id(0x00000158), helpcontext(0x09ba0158)]
        HRESULT ToggleHeader();
    };

    [
      odl,
      uuid(000209BB-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009bb),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ProofreadingErrors : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09bb03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09bb03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09bb03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09bbfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09bb0001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09bb0002)]
        HRESULT Type([out, retval] WdProofreadingErrorType* prop);
        [id(00000000), helpcontext(0x09bb0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Range** prop);
    };

    [
      odl,
      uuid(000209BD-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009bd),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Mailer : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09bd03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09bd03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09bd03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09bd0064)]
        HRESULT BCCRecipients([out, retval] VARIANT* prop);
        [id(0x00000064), propput, helpcontext(0x09bd0064)]
        HRESULT BCCRecipients([in] VARIANT* prop);
        [id(0x00000065), propget, helpcontext(0x09bd0065)]
        HRESULT CCRecipients([out, retval] VARIANT* prop);
        [id(0x00000065), propput, helpcontext(0x09bd0065)]
        HRESULT CCRecipients([in] VARIANT* prop);
        [id(0x00000066), propget, helpcontext(0x09bd0066)]
        HRESULT Recipients([out, retval] VARIANT* prop);
        [id(0x00000066), propput, helpcontext(0x09bd0066)]
        HRESULT Recipients([in] VARIANT* prop);
        [id(0x00000067), propget, helpcontext(0x09bd0067)]
        HRESULT Enclosures([out, retval] VARIANT* prop);
        [id(0x00000067), propput, helpcontext(0x09bd0067)]
        HRESULT Enclosures([in] VARIANT* prop);
        [id(0x00000068), propget, helpcontext(0x09bd0068)]
        HRESULT Sender([out, retval] BSTR* prop);
        [id(0x00000069), propget, helpcontext(0x09bd0069)]
        HRESULT SendDateTime([out, retval] DATE* prop);
        [id(0x0000006a), propget, helpcontext(0x09bd006a)]
        HRESULT Received([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006b), propget, helpcontext(0x09bd006b)]
        HRESULT Subject([out, retval] BSTR* prop);
        [id(0x0000006b), propput, helpcontext(0x09bd006b)]
        HRESULT Subject([in] BSTR prop);
    };

    [
      odl,
      uuid(000209C3-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009c3),
      dual,
      nonextensible,
      oleautomation
    ]
    interface WrapFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09c303e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09c303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09c303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09c30064)]
        HRESULT Type([out, retval] WdWrapType* prop);
        [id(0x00000064), propput, helpcontext(0x09c30064)]
        HRESULT Type([in] WdWrapType prop);
        [id(0x00000065), propget, helpcontext(0x09c30065)]
        HRESULT Side([out, retval] WdWrapSideType* prop);
        [id(0x00000065), propput, helpcontext(0x09c30065)]
        HRESULT Side([in] WdWrapSideType prop);
        [id(0x00000066), propget, helpcontext(0x09c30066)]
        HRESULT DistanceTop([out, retval] int* prop);
        [id(0x00000066), propput, helpcontext(0x09c30066)]
        HRESULT DistanceTop([in] int prop);
        [id(0x00000067), propget, helpcontext(0x09c30067)]
        HRESULT DistanceBottom([out, retval] int* prop);
        [id(0x00000067), propput, helpcontext(0x09c30067)]
        HRESULT DistanceBottom([in] int prop);
        [id(0x00000068), propget, helpcontext(0x09c30068)]
        HRESULT DistanceLeft([out, retval] int* prop);
        [id(0x00000068), propput, helpcontext(0x09c30068)]
        HRESULT DistanceLeft([in] int prop);
        [id(0x00000069), propget, helpcontext(0x09c30069)]
        HRESULT DistanceRight([out, retval] int* prop);
        [id(0x00000069), propput, helpcontext(0x09c30069)]
        HRESULT DistanceRight([in] int prop);
        [id(0x0000006a), propget, helpcontext(0x09c3006a)]
        HRESULT AllowOverlap([out, retval] long* prop);
        [id(0x0000006a), propput, helpcontext(0x09c3006a)]
        HRESULT AllowOverlap([in] long prop);
    };

    [
      odl,
      uuid(000209D1-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009d1),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HangulAndAlphabetExceptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09d103e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09d103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09d103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09d1fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09d10001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09d10000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] HangulAndAlphabetException** prop);
        [id(0x00000065), helpcontext(0x09d10065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] HangulAndAlphabetException** prop);
    };

    [
      odl,
      uuid(000209D2-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009d2),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HangulAndAlphabetException : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09d203e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09d203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09d203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09d20001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09d20002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000065), helpcontext(0x09d20065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(000209C4-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009c4),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Adjustments : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09c403e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09c403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09c40001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x09c40002)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), propget, helpcontext(0x09c40000)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] int* prop);
        [id(00000000), propput, helpcontext(0x09c40000)]
        HRESULT Item(
                        [in] long Index, 
                        [in] int prop);
    };

    [
      odl,
      uuid(000209C5-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009c5),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CalloutFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09c503e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09c503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09c50001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09c50064)]
        HRESULT Accent([out, retval] MsoTriState* prop);
        [id(0x00000064), propput, helpcontext(0x09c50064)]
        HRESULT Accent([in] MsoTriState prop);
        [id(0x00000065), propget, helpcontext(0x09c50065)]
        HRESULT Angle([out, retval] MsoCalloutAngleType* prop);
        [id(0x00000065), propput, helpcontext(0x09c50065)]
        HRESULT Angle([in] MsoCalloutAngleType prop);
        [id(0x00000066), propget, helpcontext(0x09c50066)]
        HRESULT AutoAttach([out, retval] MsoTriState* prop);
        [id(0x00000066), propput, helpcontext(0x09c50066)]
        HRESULT AutoAttach([in] MsoTriState prop);
        [id(0x00000067), propget, helpcontext(0x09c50067)]
        HRESULT AutoLength([out, retval] MsoTriState* prop);
        [id(0x00000068), propget, helpcontext(0x09c50068)]
        HRESULT Border([out, retval] MsoTriState* prop);
        [id(0x00000068), propput, helpcontext(0x09c50068)]
        HRESULT Border([in] MsoTriState prop);
        [id(0x00000069), propget, helpcontext(0x09c50069)]
        HRESULT Drop([out, retval] int* prop);
        [id(0x0000006a), propget, helpcontext(0x09c5006a)]
        HRESULT DropType([out, retval] MsoCalloutDropType* prop);
        [id(0x0000006b), propget, helpcontext(0x09c5006b)]
        HRESULT Gap([out, retval] int* prop);
        [id(0x0000006b), propput, helpcontext(0x09c5006b)]
        HRESULT Gap([in] int prop);
        [id(0x0000006c), propget, helpcontext(0x09c5006c)]
        HRESULT Length([out, retval] int* prop);
        [id(0x0000006d), propget, helpcontext(0x09c5006d)]
        HRESULT Type([out, retval] MsoCalloutType* prop);
        [id(0x0000006d), propput, helpcontext(0x09c5006d)]
        HRESULT Type([in] MsoCalloutType prop);
        [id(0x0000000a), helpcontext(0x09c5000a)]
        HRESULT AutomaticLength();
        [id(0x0000000b), helpcontext(0x09c5000b)]
        HRESULT CustomDrop([in] int Drop);
        [id(0x0000000c), helpcontext(0x09c5000c)]
        HRESULT CustomLength([in] int Length);
        [id(0x0000000d), helpcontext(0x09c5000d)]
        HRESULT PresetDrop([in] MsoCalloutDropType DropType);
    };

    [
      odl,
      uuid(000209C6-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009c6),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ColorFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09c603e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09c603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09c60001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09c60000)]
        HRESULT RGB([out, retval] long* prop);
        [id(00000000), propput, helpcontext(0x09c60000)]
        HRESULT RGB([in] long prop);
        [id(0x00000064), propget, hidden, helpcontext(0x09c60064)]
        HRESULT SchemeColor([out, retval] long* prop);
        [id(0x00000064), propput, hidden, helpcontext(0x09c60064)]
        HRESULT SchemeColor([in] long prop);
        [id(0x00000065), propget, helpcontext(0x09c60065)]
        HRESULT Type([out, retval] MsoColorType* prop);
        [id(0x00000066), propget, helpcontext(0x09c60066)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000066), propput, helpcontext(0x09c60066)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000067), propget, helpcontext(0x09c60067)]
        HRESULT TintAndShade([out, retval] int* prop);
        [id(0x00000067), propput, helpcontext(0x09c60067)]
        HRESULT TintAndShade([in] int prop);
        [id(0x00000068), propget, helpcontext(0x09c60068)]
        HRESULT OverPrint([out, retval] MsoTriState* prop);
        [id(0x00000068), propput, helpcontext(0x09c60068)]
        HRESULT OverPrint([in] MsoTriState prop);
        [id(0x00000069), propget, helpcontext(0x09c60069)]
        HRESULT Ink(
                        [in] long Index, 
                        [out, retval] int* prop);
        [id(0x00000069), propput, helpcontext(0x09c60069)]
        HRESULT Ink(
                        [in] long Index, 
                        [in] int prop);
        [id(0x0000006a), propget, helpcontext(0x09c6006a)]
        HRESULT Cyan([out, retval] long* prop);
        [id(0x0000006a), propput, helpcontext(0x09c6006a)]
        HRESULT Cyan([in] long prop);
        [id(0x0000006b), propget, helpcontext(0x09c6006b)]
        HRESULT Magenta([out, retval] long* prop);
        [id(0x0000006b), propput, helpcontext(0x09c6006b)]
        HRESULT Magenta([in] long prop);
        [id(0x0000006c), propget, helpcontext(0x09c6006c)]
        HRESULT Yellow([out, retval] long* prop);
        [id(0x0000006c), propput, helpcontext(0x09c6006c)]
        HRESULT Yellow([in] long prop);
        [id(0x0000006d), propget, helpcontext(0x09c6006d)]
        HRESULT Black([out, retval] long* prop);
        [id(0x0000006d), propput, helpcontext(0x09c6006d)]
        HRESULT Black([in] long prop);
        [id(0x0000006e), helpcontext(0x09c6006e)]
        HRESULT SetCMYK(
                        [in] long Cyan, 
                        [in] long Magenta, 
                        [in] long Yellow, 
                        [in] long Black);
    };

    [
      odl,
      uuid(000209C7-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009c7),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ConnectorFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09c703e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09c703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000064), propget, helpcontext(0x09c70064)]
        HRESULT BeginConnected([out, retval] MsoTriState* prop);
        [id(0x00000065), propget, helpcontext(0x09c70065)]
        HRESULT BeginConnectedShape([out, retval] Shape** prop);
        [id(0x00000066), propget, helpcontext(0x09c70066)]
        HRESULT BeginConnectionSite([out, retval] long* prop);
        [id(0x00000067), propget, helpcontext(0x09c70067)]
        HRESULT EndConnected([out, retval] MsoTriState* prop);
        [id(0x00000068), propget, helpcontext(0x09c70068)]
        HRESULT EndConnectedShape([out, retval] Shape** prop);
        [id(0x00000069), propget, helpcontext(0x09c70069)]
        HRESULT EndConnectionSite([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09c70001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000006a), propget, helpcontext(0x09c7006a)]
        HRESULT Type([out, retval] MsoConnectorType* prop);
        [id(0x0000006a), propput, helpcontext(0x09c7006a)]
        HRESULT Type([in] MsoConnectorType prop);
        [id(0x0000000a), helpcontext(0x09c7000a)]
        HRESULT BeginConnect(
                        [out] Shape** ConnectedShape, 
                        [in] long ConnectionSite);
        [id(0x0000000b), helpcontext(0x09c7000b)]
        HRESULT BeginDisconnect();
        [id(0x0000000c), helpcontext(0x09c7000c)]
        HRESULT EndConnect(
                        [out] Shape** ConnectedShape, 
                        [in] long ConnectionSite);
        [id(0x0000000d), helpcontext(0x09c7000d)]
        HRESULT EndDisconnect();
    };

    [
      odl,
      uuid(000209C8-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009c8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FillFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09c803e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09c803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09c80001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09c80064)]
        HRESULT BackColor([out, retval] ColorFormat** prop);
        [id(0x00000065), propget, helpcontext(0x09c80065)]
        HRESULT ForeColor([out, retval] ColorFormat** prop);
        [id(0x00000066), propget, helpcontext(0x09c80066)]
        HRESULT GradientColorType([out, retval] MsoGradientColorType* prop);
        [id(0x00000067), propget, helpcontext(0x09c80067)]
        HRESULT GradientDegree([out, retval] int* prop);
        [id(0x00000068), propget, helpcontext(0x09c80068)]
        HRESULT GradientStyle([out, retval] MsoGradientStyle* prop);
        [id(0x00000069), propget, helpcontext(0x09c80069)]
        HRESULT GradientVariant([out, retval] long* prop);
        [id(0x0000006a), propget, helpcontext(0x09c8006a)]
        HRESULT Pattern([out, retval] MsoPatternType* prop);
        [id(0x0000006b), propget, helpcontext(0x09c8006b)]
        HRESULT PresetGradientType([out, retval] MsoPresetGradientType* prop);
        [id(0x0000006c), propget, helpcontext(0x09c8006c)]
        HRESULT PresetTexture([out, retval] MsoPresetTexture* prop);
        [id(0x0000006d), propget, helpcontext(0x09c8006d)]
        HRESULT TextureName([out, retval] BSTR* prop);
        [id(0x0000006e), propget, helpcontext(0x09c8006e)]
        HRESULT TextureType([out, retval] MsoTextureType* prop);
        [id(0x0000006f), propget, helpcontext(0x09c8006f)]
        HRESULT Transparency([out, retval] int* prop);
        [id(0x0000006f), propput, helpcontext(0x09c8006f)]
        HRESULT Transparency([in] int prop);
        [id(0x00000070), propget, helpcontext(0x09c80070)]
        HRESULT Type([out, retval] MsoFillType* prop);
        [id(0x00000071), propget, helpcontext(0x09c80071)]
        HRESULT Visible([out, retval] MsoTriState* prop);
        [id(0x00000071), propput, helpcontext(0x09c80071)]
        HRESULT Visible([in] MsoTriState prop);
        [id(0x0000000a), hidden, helpcontext(0x09c8000a)]
        HRESULT Background();
        [id(0x0000000b), helpcontext(0x09c8000b)]
        HRESULT OneColorGradient(
                        [in] MsoGradientStyle Style, 
                        [in] long Variant, 
                        [in] int Degree);
        [id(0x0000000c), helpcontext(0x09c8000c)]
        HRESULT Patterned([in] MsoPatternType Pattern);
        [id(0x0000000d), helpcontext(0x09c8000d)]
        HRESULT PresetGradient(
                        [in] MsoGradientStyle Style, 
                        [in] long Variant, 
                        [in] MsoPresetGradientType PresetGradientType);
        [id(0x0000000e), helpcontext(0x09c8000e)]
        HRESULT PresetTextured([in] MsoPresetTexture PresetTexture);
        [id(0x0000000f), helpcontext(0x09c8000f)]
        HRESULT Solid();
        [id(0x00000010), helpcontext(0x09c80010)]
        HRESULT TwoColorGradient(
                        [in] MsoGradientStyle Style, 
                        [in] long Variant);
        [id(0x00000011), helpcontext(0x09c80011)]
        HRESULT UserPicture([in] BSTR PictureFile);
        [id(0x00000012), helpcontext(0x09c80012)]
        HRESULT UserTextured([in] BSTR TextureFile);
    };

    [
      odl,
      uuid(000209C9-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009c9),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FreeformBuilder : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09c903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09c903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09c90001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000a), helpcontext(0x09c9000a)]
        HRESULT AddNodes(
                        [in] MsoSegmentType SegmentType, 
                        [in] MsoEditingType EditingType, 
                        [in] int X1, 
                        [in] int Y1, 
                        [in, optional, defaultvalue(0)] single X2, 
                        [in, optional, defaultvalue(0)] single Y2, 
                        [in, optional, defaultvalue(0)] single X3, 
                        [in, optional, defaultvalue(0)] single Y3);
        [id(0x0000000b), helpcontext(0x09c9000b)]
        HRESULT ConvertToShape(
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
    };

    [
      odl,
      uuid(000209CA-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009ca),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LineFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ca03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ca03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09ca0001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09ca0064)]
        HRESULT BackColor([out, retval] ColorFormat** prop);
        [id(0x00000065), propget, helpcontext(0x09ca0065)]
        HRESULT BeginArrowheadLength([out, retval] MsoArrowheadLength* prop);
        [id(0x00000065), propput, helpcontext(0x09ca0065)]
        HRESULT BeginArrowheadLength([in] MsoArrowheadLength prop);
        [id(0x00000066), propget, helpcontext(0x09ca0066)]
        HRESULT BeginArrowheadStyle([out, retval] MsoArrowheadStyle* prop);
        [id(0x00000066), propput, helpcontext(0x09ca0066)]
        HRESULT BeginArrowheadStyle([in] MsoArrowheadStyle prop);
        [id(0x00000067), propget, helpcontext(0x09ca0067)]
        HRESULT BeginArrowheadWidth([out, retval] MsoArrowheadWidth* prop);
        [id(0x00000067), propput, helpcontext(0x09ca0067)]
        HRESULT BeginArrowheadWidth([in] MsoArrowheadWidth prop);
        [id(0x00000068), propget, helpcontext(0x09ca0068)]
        HRESULT DashStyle([out, retval] MsoLineDashStyle* prop);
        [id(0x00000068), propput, helpcontext(0x09ca0068)]
        HRESULT DashStyle([in] MsoLineDashStyle prop);
        [id(0x00000069), propget, helpcontext(0x09ca0069)]
        HRESULT EndArrowheadLength([out, retval] MsoArrowheadLength* prop);
        [id(0x00000069), propput, helpcontext(0x09ca0069)]
        HRESULT EndArrowheadLength([in] MsoArrowheadLength prop);
        [id(0x0000006a), propget, helpcontext(0x09ca006a)]
        HRESULT EndArrowheadStyle([out, retval] MsoArrowheadStyle* prop);
        [id(0x0000006a), propput, helpcontext(0x09ca006a)]
        HRESULT EndArrowheadStyle([in] MsoArrowheadStyle prop);
        [id(0x0000006b), propget, helpcontext(0x09ca006b)]
        HRESULT EndArrowheadWidth([out, retval] MsoArrowheadWidth* prop);
        [id(0x0000006b), propput, helpcontext(0x09ca006b)]
        HRESULT EndArrowheadWidth([in] MsoArrowheadWidth prop);
        [id(0x0000006c), propget, helpcontext(0x09ca006c)]
        HRESULT ForeColor([out, retval] ColorFormat** prop);
        [id(0x0000006d), propget, helpcontext(0x09ca006d)]
        HRESULT Pattern([out, retval] MsoPatternType* prop);
        [id(0x0000006d), propput, helpcontext(0x09ca006d)]
        HRESULT Pattern([in] MsoPatternType prop);
        [id(0x0000006e), propget, helpcontext(0x09ca006e)]
        HRESULT Style([out, retval] MsoLineStyle* prop);
        [id(0x0000006e), propput, helpcontext(0x09ca006e)]
        HRESULT Style([in] MsoLineStyle prop);
        [id(0x0000006f), propget, helpcontext(0x09ca006f)]
        HRESULT Transparency([out, retval] int* prop);
        [id(0x0000006f), propput, helpcontext(0x09ca006f)]
        HRESULT Transparency([in] int prop);
        [id(0x00000070), propget, helpcontext(0x09ca0070)]
        HRESULT Visible([out, retval] MsoTriState* prop);
        [id(0x00000070), propput, helpcontext(0x09ca0070)]
        HRESULT Visible([in] MsoTriState prop);
        [id(0x00000071), propget, helpcontext(0x09ca0071)]
        HRESULT Weight([out, retval] int* prop);
        [id(0x00000071), propput, helpcontext(0x09ca0071)]
        HRESULT Weight([in] int prop);
        [id(0x00000072), propget, helpcontext(0x09ca0072)]
        HRESULT InsetPen([out, retval] MsoTriState* prop);
        [id(0x00000072), propput, helpcontext(0x09ca0072)]
        HRESULT InsetPen([in] MsoTriState prop);
    };

    [
      odl,
      uuid(000209CB-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009cb),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PictureFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09cb03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09cb03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09cb0001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09cb0064)]
        HRESULT Brightness([out, retval] int* prop);
        [id(0x00000064), propput, helpcontext(0x09cb0064)]
        HRESULT Brightness([in] int prop);
        [id(0x00000065), propget, helpcontext(0x09cb0065)]
        HRESULT ColorType([out, retval] MsoPictureColorType* prop);
        [id(0x00000065), propput, helpcontext(0x09cb0065)]
        HRESULT ColorType([in] MsoPictureColorType prop);
        [id(0x00000066), propget, helpcontext(0x09cb0066)]
        HRESULT Contrast([out, retval] int* prop);
        [id(0x00000066), propput, helpcontext(0x09cb0066)]
        HRESULT Contrast([in] int prop);
        [id(0x00000067), propget, helpcontext(0x09cb0067)]
        HRESULT CropBottom([out, retval] int* prop);
        [id(0x00000067), propput, helpcontext(0x09cb0067)]
        HRESULT CropBottom([in] int prop);
        [id(0x00000068), propget, helpcontext(0x09cb0068)]
        HRESULT CropLeft([out, retval] int* prop);
        [id(0x00000068), propput, helpcontext(0x09cb0068)]
        HRESULT CropLeft([in] int prop);
        [id(0x00000069), propget, helpcontext(0x09cb0069)]
        HRESULT CropRight([out, retval] int* prop);
        [id(0x00000069), propput, helpcontext(0x09cb0069)]
        HRESULT CropRight([in] int prop);
        [id(0x0000006a), propget, helpcontext(0x09cb006a)]
        HRESULT CropTop([out, retval] int* prop);
        [id(0x0000006a), propput, helpcontext(0x09cb006a)]
        HRESULT CropTop([in] int prop);
        [id(0x0000006b), propget, helpcontext(0x09cb006b)]
        HRESULT TransparencyColor([out, retval] long* prop);
        [id(0x0000006b), propput, helpcontext(0x09cb006b)]
        HRESULT TransparencyColor([in] long prop);
        [id(0x0000006c), propget, helpcontext(0x09cb006c)]
        HRESULT TransparentBackground([out, retval] MsoTriState* prop);
        [id(0x0000006c), propput, helpcontext(0x09cb006c)]
        HRESULT TransparentBackground([in] MsoTriState prop);
        [id(0x0000000a), helpcontext(0x09cb000a)]
        HRESULT IncrementBrightness([in] int Increment);
        [id(0x0000000b), helpcontext(0x09cb000b)]
        HRESULT IncrementContrast([in] int Increment);
    };

    [
      odl,
      uuid(000209CC-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009cc),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShadowFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09cc03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09cc03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09cc0001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09cc0064)]
        HRESULT ForeColor([out, retval] ColorFormat** prop);
        [id(0x00000065), propget, helpcontext(0x09cc0065)]
        HRESULT Obscured([out, retval] MsoTriState* prop);
        [id(0x00000065), propput, helpcontext(0x09cc0065)]
        HRESULT Obscured([in] MsoTriState prop);
        [id(0x00000066), propget, helpcontext(0x09cc0066)]
        HRESULT OffsetX([out, retval] int* prop);
        [id(0x00000066), propput, helpcontext(0x09cc0066)]
        HRESULT OffsetX([in] int prop);
        [id(0x00000067), propget, helpcontext(0x09cc0067)]
        HRESULT OffsetY([out, retval] int* prop);
        [id(0x00000067), propput, helpcontext(0x09cc0067)]
        HRESULT OffsetY([in] int prop);
        [id(0x00000068), propget, helpcontext(0x09cc0068)]
        HRESULT Transparency([out, retval] int* prop);
        [id(0x00000068), propput, helpcontext(0x09cc0068)]
        HRESULT Transparency([in] int prop);
        [id(0x00000069), propget, helpcontext(0x09cc0069)]
        HRESULT Type([out, retval] MsoShadowType* prop);
        [id(0x00000069), propput, helpcontext(0x09cc0069)]
        HRESULT Type([in] MsoShadowType prop);
        [id(0x0000006a), propget, helpcontext(0x09cc006a)]
        HRESULT Visible([out, retval] MsoTriState* prop);
        [id(0x0000006a), propput, helpcontext(0x09cc006a)]
        HRESULT Visible([in] MsoTriState prop);
        [id(0x0000000a), helpcontext(0x09cc000a)]
        HRESULT IncrementOffsetX([in] int Increment);
        [id(0x0000000b), helpcontext(0x09cc000b)]
        HRESULT IncrementOffsetY([in] int Increment);
    };

    [
      odl,
      uuid(000209CD-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009cd),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShapeNode : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09cd03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09cd03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09cd0001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09cd0064)]
        HRESULT EditingType([out, retval] MsoEditingType* prop);
        [id(0x00000065), propget, helpcontext(0x09cd0065)]
        HRESULT Points([out, retval] VARIANT* prop);
        [id(0x00000066), propget, helpcontext(0x09cd0066)]
        HRESULT SegmentType([out, retval] MsoSegmentType* prop);
    };

    [
      odl,
      uuid(000209CE-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009ce),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShapeNodes : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ce03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ce03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09ce0001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x09ce0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x09cefffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x0000000b), helpcontext(0x09ce000b)]
        HRESULT Delete([in] long Index);
        [id(00000000), helpcontext(0x09ce0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] ShapeNode** prop);
        [id(0x0000000d), helpcontext(0x09ce000d)]
        HRESULT SetEditingType(
                        [in] long Index, 
                        [in] MsoEditingType EditingType);
        [id(0x0000000e), helpcontext(0x09ce000e)]
        HRESULT SetPosition(
                        [in] long Index, 
                        [in] int X1, 
                        [in] int Y1);
        [id(0x0000000f), helpcontext(0x09ce000f)]
        HRESULT SetSegmentType(
                        [in] long Index, 
                        [in] MsoSegmentType SegmentType);
        [id(0x0000000c), helpcontext(0x09ce000c)]
        HRESULT Insert(
                        [in] long Index, 
                        [in] MsoSegmentType SegmentType, 
                        [in] MsoEditingType EditingType, 
                        [in] int X1, 
                        [in] int Y1, 
                        [in, optional, defaultvalue(0)] single X2, 
                        [in, optional, defaultvalue(0)] single Y2, 
                        [in, optional, defaultvalue(0)] single X3, 
                        [in, optional, defaultvalue(0)] single Y3);
    };

    [
      odl,
      uuid(000209CF-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009cf),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextEffectFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09cf03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09cf03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09cf0001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09cf0064)]
        HRESULT Alignment([out, retval] MsoTextEffectAlignment* prop);
        [id(0x00000064), propput, helpcontext(0x09cf0064)]
        HRESULT Alignment([in] MsoTextEffectAlignment prop);
        [id(0x00000065), propget, helpcontext(0x09cf0065)]
        HRESULT FontBold([out, retval] MsoTriState* prop);
        [id(0x00000065), propput, helpcontext(0x09cf0065)]
        HRESULT FontBold([in] MsoTriState prop);
        [id(0x00000066), propget, helpcontext(0x09cf0066)]
        HRESULT FontItalic([out, retval] MsoTriState* prop);
        [id(0x00000066), propput, helpcontext(0x09cf0066)]
        HRESULT FontItalic([in] MsoTriState prop);
        [id(0x00000067), propget, helpcontext(0x09cf0067)]
        HRESULT FontName([out, retval] BSTR* prop);
        [id(0x00000067), propput, helpcontext(0x09cf0067)]
        HRESULT FontName([in] BSTR prop);
        [id(0x00000068), propget, helpcontext(0x09cf0068)]
        HRESULT FontSize([out, retval] int* prop);
        [id(0x00000068), propput, helpcontext(0x09cf0068)]
        HRESULT FontSize([in] int prop);
        [id(0x00000069), propget, helpcontext(0x09cf0069)]
        HRESULT KernedPairs([out, retval] MsoTriState* prop);
        [id(0x00000069), propput, helpcontext(0x09cf0069)]
        HRESULT KernedPairs([in] MsoTriState prop);
        [id(0x0000006a), propget, helpcontext(0x09cf006a)]
        HRESULT NormalizedHeight([out, retval] MsoTriState* prop);
        [id(0x0000006a), propput, helpcontext(0x09cf006a)]
        HRESULT NormalizedHeight([in] MsoTriState prop);
        [id(0x0000006b), propget, helpcontext(0x09cf006b)]
        HRESULT PresetShape([out, retval] MsoPresetTextEffectShape* prop);
        [id(0x0000006b), propput, helpcontext(0x09cf006b)]
        HRESULT PresetShape([in] MsoPresetTextEffectShape prop);
        [id(0x0000006c), propget, helpcontext(0x09cf006c)]
        HRESULT PresetTextEffect([out, retval] MsoPresetTextEffect* prop);
        [id(0x0000006c), propput, helpcontext(0x09cf006c)]
        HRESULT PresetTextEffect([in] MsoPresetTextEffect prop);
        [id(0x0000006d), propget, helpcontext(0x09cf006d)]
        HRESULT RotatedChars([out, retval] MsoTriState* prop);
        [id(0x0000006d), propput, helpcontext(0x09cf006d)]
        HRESULT RotatedChars([in] MsoTriState prop);
        [id(0x0000006e), propget, helpcontext(0x09cf006e)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(0x0000006e), propput, helpcontext(0x09cf006e)]
        HRESULT Text([in] BSTR prop);
        [id(0x0000006f), propget, helpcontext(0x09cf006f)]
        HRESULT Tracking([out, retval] int* prop);
        [id(0x0000006f), propput, helpcontext(0x09cf006f)]
        HRESULT Tracking([in] int prop);
        [id(0x0000000a), helpcontext(0x09cf000a)]
        HRESULT ToggleVerticalText();
    };

    [
      odl,
      uuid(000209D0-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009d0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ThreeDFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09d003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09d003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09d00001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09d00064)]
        HRESULT Depth([out, retval] int* prop);
        [id(0x00000064), propput, helpcontext(0x09d00064)]
        HRESULT Depth([in] int prop);
        [id(0x00000065), propget, helpcontext(0x09d00065)]
        HRESULT ExtrusionColor([out, retval] ColorFormat** prop);
        [id(0x00000066), propget, helpcontext(0x09d00066)]
        HRESULT ExtrusionColorType([out, retval] MsoExtrusionColorType* prop);
        [id(0x00000066), propput, helpcontext(0x09d00066)]
        HRESULT ExtrusionColorType([in] MsoExtrusionColorType prop);
        [id(0x00000067), propget, helpcontext(0x09d00067)]
        HRESULT Perspective([out, retval] MsoTriState* prop);
        [id(0x00000067), propput, helpcontext(0x09d00067)]
        HRESULT Perspective([in] MsoTriState prop);
        [id(0x00000068), propget, helpcontext(0x09d00068)]
        HRESULT PresetExtrusionDirection([out, retval] MsoPresetExtrusionDirection* prop);
        [id(0x00000069), propget, helpcontext(0x09d00069)]
        HRESULT PresetLightingDirection([out, retval] MsoPresetLightingDirection* prop);
        [id(0x00000069), propput, helpcontext(0x09d00069)]
        HRESULT PresetLightingDirection([in] MsoPresetLightingDirection prop);
        [id(0x0000006a), propget, helpcontext(0x09d0006a)]
        HRESULT PresetLightingSoftness([out, retval] MsoPresetLightingSoftness* prop);
        [id(0x0000006a), propput, helpcontext(0x09d0006a)]
        HRESULT PresetLightingSoftness([in] MsoPresetLightingSoftness prop);
        [id(0x0000006b), propget, helpcontext(0x09d0006b)]
        HRESULT PresetMaterial([out, retval] MsoPresetMaterial* prop);
        [id(0x0000006b), propput, helpcontext(0x09d0006b)]
        HRESULT PresetMaterial([in] MsoPresetMaterial prop);
        [id(0x0000006c), propget, helpcontext(0x09d0006c)]
        HRESULT PresetThreeDFormat([out, retval] MsoPresetThreeDFormat* prop);
        [id(0x0000006d), propget, helpcontext(0x09d0006d)]
        HRESULT RotationX([out, retval] int* prop);
        [id(0x0000006d), propput, helpcontext(0x09d0006d)]
        HRESULT RotationX([in] int prop);
        [id(0x0000006e), propget, helpcontext(0x09d0006e)]
        HRESULT RotationY([out, retval] int* prop);
        [id(0x0000006e), propput, helpcontext(0x09d0006e)]
        HRESULT RotationY([in] int prop);
        [id(0x0000006f), propget, helpcontext(0x09d0006f)]
        HRESULT Visible([out, retval] MsoTriState* prop);
        [id(0x0000006f), propput, helpcontext(0x09d0006f)]
        HRESULT Visible([in] MsoTriState prop);
        [id(0x0000000a), helpcontext(0x09d0000a)]
        HRESULT IncrementRotationX([in] int Increment);
        [id(0x0000000b), helpcontext(0x09d0000b)]
        HRESULT IncrementRotationY([in] int Increment);
        [id(0x0000000c), helpcontext(0x09d0000c)]
        HRESULT ResetRotation();
        [id(0x0000000e), helpcontext(0x09d0000e)]
        HRESULT SetExtrusionDirection([in] MsoPresetExtrusionDirection PresetExtrusionDirection);
        [id(0x0000000d), helpcontext(0x09d0000d)]
        HRESULT SetThreeDFormat([in] MsoPresetThreeDFormat PresetThreeDFormat);
    };

    [
      uuid(000209F7-0000-0000-C000-000000000046),
      helpcontext(0x00000fa0),
      hidden
    ]
    dispinterface ApplicationEvents {
        properties:
        methods:
    };

    [
      uuid(000209F0-0000-0000-C000-000000000046),
      helpcontext(0x000009b9),
      appobject
    ]
    coclass Global {
        [default] interface _Global;
    };
#undef Application
    [
      uuid(000209FF-0000-0000-C000-000000000046),
      helpcontext(0x00000970)
    ]
    coclass Application {
        [default] interface _Application;
        [source] dispinterface ApplicationEvents;
        [source] dispinterface ApplicationEvents2;
        [source] dispinterface ApplicationEvents3;
        [default, source] dispinterface ApplicationEvents4;
    };

    [
      uuid(000209F6-0000-0000-C000-000000000046),
      helpcontext(0x00000fa1),
      hidden
    ]
    dispinterface DocumentEvents {
        properties:
        methods:
            [id(0x00000004), helpcontext(0x003d0cec)]
            void New();
            [id(0x00000005), helpcontext(0x003d0ced)]
            void Open();
            [id(0x00000006), helpcontext(0x003d0cee)]
            void Close();
    };

#undef Document
    [
      uuid(00020906-0000-0000-C000-000000000046),
      helpcontext(0x0000096b)
    ]
    coclass Document {
        [default] interface _Document;
        [source] dispinterface DocumentEvents;
        [default, source] dispinterface DocumentEvents2;
    };

    [
      uuid(000209F5-0000-0000-C000-000000000046),
      helpcontext(0x00000952)
    ]
    coclass Font {
        [default] interface _Font;
    };

#undef ParagraphFormat
    [
      uuid(000209F4-0000-0000-C000-000000000046),
      helpcontext(0x00000953)
    ]
    coclass ParagraphFormat {
        [default] interface _ParagraphFormat;
    };

    [
      uuid(000209F3-0000-0000-C000-000000000046),
      helpcontext(0x00000fa2),
      hidden
    ]
    dispinterface OCXEvents {
        properties:
        methods:
            [id(0x800100e0), helpcontext(0x003d10d1)]
            void GotFocus();
            [id(0x800100e1), helpcontext(0x003d10d2)]
            void LostFocus();
    };

    [
      uuid(000209F2-0000-0000-C000-000000000046),
      helpcontext(0x000009a4),
      hidden
    ]
    coclass OLEControl {
        [default] interface _OLEControl;
        [default, source] dispinterface OCXEvents;
    };

#undef LetterContent
    [
      uuid(000209F1-0000-0000-C000-000000000046),
      helpcontext(0x000009a1)
    ]
    coclass LetterContent {
        [default] interface _LetterContent;
    };

    [
      odl,
      uuid(000209F7-0001-0000-C000-000000000046),
      version(10.0),
      helpcontext(0x00000fa0),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IApplicationEvents : IDispatch {
        [id(0x00000001), restricted, hidden]
        HRESULT Startup();
        [id(0x00000002), helpcontext(0x00061a82)]
        HRESULT Quit();
        [id(0x00000003), helpcontext(0x00061a83)]
        HRESULT DocumentChange();
    };

    [
      odl,
      uuid(000209FE-0001-0000-C000-000000000046),
      version(10.0),
      helpcontext(0x00000fa0),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IApplicationEvents2 : IDispatch {
        [id(0x00000001), restricted, hidden]
        HRESULT Startup();
        [id(0x00000002), helpcontext(0x00061a82)]
        HRESULT Quit();
        [id(0x00000003), helpcontext(0x00061a83)]
        HRESULT DocumentChange();
        [id(0x00000004), helpcontext(0x00061a84)]
        HRESULT DocumentOpen([in] Document* Doc);
        [id(0x00000006), helpcontext(0x00061a85)]
        HRESULT DocumentBeforeClose(
                        [in] Document* Doc, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x00000007), helpcontext(0x00061a86)]
        HRESULT DocumentBeforePrint(
                        [in] Document* Doc, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x00000008), helpcontext(0x00061a87)]
        HRESULT DocumentBeforeSave(
                        [in] Document* Doc, 
                        [in] VARIANT_BOOL* SaveAsUI, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x00000009), helpcontext(0x00061a88)]
        HRESULT NewDocument([in] Document* Doc);
        [id(0x0000000a), helpcontext(0x00061a89)]
        HRESULT WindowActivate(
                        [in] Document* Doc, 
                        [in] Window* Wn);
        [id(0x0000000b), helpcontext(0x003d090a)]
        HRESULT WindowDeactivate(
                        [in] Document* Doc, 
                        [in] Window* Wn);
        [id(0x0000000c), helpcontext(0x003d090b)]
        HRESULT WindowSelectionChange([in] Selection* Sel);
        [id(0x0000000d), helpcontext(0x003d090c)]
        HRESULT WindowBeforeRightClick(
                        [in] Selection* Sel, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x0000000e), helpcontext(0x003d090d)]
        HRESULT WindowBeforeDoubleClick(
                        [in] Selection* Sel, 
                        [in] VARIANT_BOOL* Cancel);
    };

    [
      uuid(000209FE-0000-0000-C000-000000000046),
      helpcontext(0x00000fa2),
      hidden
    ]
    dispinterface ApplicationEvents2 {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000001), restricted, hidden]
            void Startup();
            [id(0x00000002), helpcontext(0x00061a82)]
            void Quit();
            [id(0x00000003), helpcontext(0x00061a83)]
            void DocumentChange();
            [id(0x00000004), helpcontext(0x00061a84)]
            void DocumentOpen([in] Document* Doc);
            [id(0x00000006), helpcontext(0x00061a85)]
            void DocumentBeforeClose(
                            [in] Document* Doc, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x00000007), helpcontext(0x00061a86)]
            void DocumentBeforePrint(
                            [in] Document* Doc, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x00000008), helpcontext(0x00061a87)]
            void DocumentBeforeSave(
                            [in] Document* Doc, 
                            [in] VARIANT_BOOL* SaveAsUI, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x00000009), helpcontext(0x00061a88)]
            void NewDocument([in] Document* Doc);
            [id(0x0000000a), helpcontext(0x00061a89)]
            void WindowActivate(
                            [in] Document* Doc, 
                            [in] Window* Wn);
            [id(0x0000000b), helpcontext(0x003d090a)]
            void WindowDeactivate(
                            [in] Document* Doc, 
                            [in] Window* Wn);
            [id(0x0000000c), helpcontext(0x003d090b)]
            void WindowSelectionChange([in] Selection* Sel);
            [id(0x0000000d), helpcontext(0x003d090c)]
            void WindowBeforeRightClick(
                            [in] Selection* Sel, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x0000000e), helpcontext(0x003d090d)]
            void WindowBeforeDoubleClick(
                            [in] Selection* Sel, 
                            [in] VARIANT_BOOL* Cancel);
    };

    

    [
      odl,
      uuid(000209D7-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009d7),
      dual,
      nonextensible,
      oleautomation
    ]
    interface EmailAuthor : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09d703e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09d703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09d703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x09d70067)]
        HRESULT Style([out, retval] Style** prop);
    };

    [
      odl,
      uuid(000209DB-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009db),
      dual,
      nonextensible,
      oleautomation
    ]
    interface EmailOptions : IDispatch {
        [id(0x00000064), propget, helpcontext(0x09db0064)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x00000065), propget, helpcontext(0x09db0065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x09db0066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x09db0067)]
        HRESULT UseThemeStyle([out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), propput, helpcontext(0x09db0067)]
        HRESULT UseThemeStyle([in] VARIANT_BOOL prop);
        [id(0x0000006a), propget, helpcontext(0x09db006a)]
        HRESULT MarkCommentsWith([out, retval] BSTR* prop);
        [id(0x0000006a), propput, helpcontext(0x09db006a)]
        HRESULT MarkCommentsWith([in] BSTR prop);
        [id(0x0000006b), propget, helpcontext(0x09db006b)]
        HRESULT MarkComments([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006b), propput, helpcontext(0x09db006b)]
        HRESULT MarkComments([in] VARIANT_BOOL prop);
        [id(0x0000006c), propget, helpcontext(0x09db006c)]
        HRESULT EmailSignature([out, retval] EmailSignature** prop);
        [id(0x0000006d), propget, helpcontext(0x09db006d)]
        HRESULT ComposeStyle([out, retval] Style** prop);
        [id(0x0000006e), propget, helpcontext(0x09db006e)]
        HRESULT ReplyStyle([out, retval] Style** prop);
        [id(0x00000072), propget, helpcontext(0x09db0072)]
        HRESULT ThemeName([out, retval] BSTR* prop);
        [id(0x00000072), propput, helpcontext(0x09db0072)]
        HRESULT ThemeName([in] BSTR prop);
        [id(0x0000006f), propget, hidden, helpcontext(0x09db006f)]
        HRESULT Dummy1([out, retval] VARIANT_BOOL* prop);
        [id(0x00000070), propget, hidden, helpcontext(0x09db0070)]
        HRESULT Dummy2([out, retval] VARIANT_BOOL* prop);
        [id(0x00000071), hidden, helpcontext(0x09db0071)]
        HRESULT Dummy3();
        [id(0x00000074), propget, helpcontext(0x09db0074)]
        HRESULT NewColorOnReply([out, retval] VARIANT_BOOL* prop);
        [id(0x00000074), propput, helpcontext(0x09db0074)]
        HRESULT NewColorOnReply([in] VARIANT_BOOL prop);
        [id(0x00000075), propget, helpcontext(0x09db0075)]
        HRESULT PlainTextStyle([out, retval] Style** prop);
        [id(0x00000076), propget, helpcontext(0x09db0076)]
        HRESULT UseThemeStyleOnReply([out, retval] VARIANT_BOOL* prop);
        [id(0x00000076), propput, helpcontext(0x09db0076)]
        HRESULT UseThemeStyleOnReply([in] VARIANT_BOOL prop);
        [id(0x00000104), propget, helpcontext(0x09db0104)]
        HRESULT AutoFormatAsYouTypeApplyHeadings([out, retval] VARIANT_BOOL* prop);
        [id(0x00000104), propput, helpcontext(0x09db0104)]
        HRESULT AutoFormatAsYouTypeApplyHeadings([in] VARIANT_BOOL prop);
        [id(0x00000105), propget, helpcontext(0x09db0105)]
        HRESULT AutoFormatAsYouTypeApplyBorders([out, retval] VARIANT_BOOL* prop);
        [id(0x00000105), propput, helpcontext(0x09db0105)]
        HRESULT AutoFormatAsYouTypeApplyBorders([in] VARIANT_BOOL prop);
        [id(0x00000106), propget, helpcontext(0x09db0106)]
        HRESULT AutoFormatAsYouTypeApplyBulletedLists([out, retval] VARIANT_BOOL* prop);
        [id(0x00000106), propput, helpcontext(0x09db0106)]
        HRESULT AutoFormatAsYouTypeApplyBulletedLists([in] VARIANT_BOOL prop);
        [id(0x00000107), propget, helpcontext(0x09db0107)]
        HRESULT AutoFormatAsYouTypeApplyNumberedLists([out, retval] VARIANT_BOOL* prop);
        [id(0x00000107), propput, helpcontext(0x09db0107)]
        HRESULT AutoFormatAsYouTypeApplyNumberedLists([in] VARIANT_BOOL prop);
        [id(0x00000108), propget, helpcontext(0x09db0108)]
        HRESULT AutoFormatAsYouTypeReplaceQuotes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000108), propput, helpcontext(0x09db0108)]
        HRESULT AutoFormatAsYouTypeReplaceQuotes([in] VARIANT_BOOL prop);
        [id(0x00000109), propget, helpcontext(0x09db0109)]
        HRESULT AutoFormatAsYouTypeReplaceSymbols([out, retval] VARIANT_BOOL* prop);
        [id(0x00000109), propput, helpcontext(0x09db0109)]
        HRESULT AutoFormatAsYouTypeReplaceSymbols([in] VARIANT_BOOL prop);
        [id(0x0000010a), propget, helpcontext(0x09db010a)]
        HRESULT AutoFormatAsYouTypeReplaceOrdinals([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010a), propput, helpcontext(0x09db010a)]
        HRESULT AutoFormatAsYouTypeReplaceOrdinals([in] VARIANT_BOOL prop);
        [id(0x0000010b), propget, helpcontext(0x09db010b)]
        HRESULT AutoFormatAsYouTypeReplaceFractions([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010b), propput, helpcontext(0x09db010b)]
        HRESULT AutoFormatAsYouTypeReplaceFractions([in] VARIANT_BOOL prop);
        [id(0x0000010c), propget, helpcontext(0x09db010c)]
        HRESULT AutoFormatAsYouTypeReplacePlainTextEmphasis([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010c), propput, helpcontext(0x09db010c)]
        HRESULT AutoFormatAsYouTypeReplacePlainTextEmphasis([in] VARIANT_BOOL prop);
        [id(0x0000010d), propget, helpcontext(0x09db010d)]
        HRESULT AutoFormatAsYouTypeFormatListItemBeginning([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010d), propput, helpcontext(0x09db010d)]
        HRESULT AutoFormatAsYouTypeFormatListItemBeginning([in] VARIANT_BOOL prop);
        [id(0x0000010e), propget, helpcontext(0x09db010e)]
        HRESULT AutoFormatAsYouTypeDefineStyles([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010e), propput, helpcontext(0x09db010e)]
        HRESULT AutoFormatAsYouTypeDefineStyles([in] VARIANT_BOOL prop);
        [id(0x00000110), propget, helpcontext(0x09db0110)]
        HRESULT AutoFormatAsYouTypeReplaceHyperlinks([out, retval] VARIANT_BOOL* prop);
        [id(0x00000110), propput, helpcontext(0x09db0110)]
        HRESULT AutoFormatAsYouTypeReplaceHyperlinks([in] VARIANT_BOOL prop);
        [id(0x00000122), propget, helpcontext(0x09db0122)]
        HRESULT AutoFormatAsYouTypeApplyTables([out, retval] VARIANT_BOOL* prop);
        [id(0x00000122), propput, helpcontext(0x09db0122)]
        HRESULT AutoFormatAsYouTypeApplyTables([in] VARIANT_BOOL prop);
        [id(0x00000129), propget, helpcontext(0x09db0129)]
        HRESULT AutoFormatAsYouTypeApplyFirstIndents([out, retval] VARIANT_BOOL* prop);
        [id(0x00000129), propput, helpcontext(0x09db0129)]
        HRESULT AutoFormatAsYouTypeApplyFirstIndents([in] VARIANT_BOOL prop);
        [id(0x0000012a), propget, helpcontext(0x09db012a)]
        HRESULT AutoFormatAsYouTypeApplyDates([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012a), propput, helpcontext(0x09db012a)]
        HRESULT AutoFormatAsYouTypeApplyDates([in] VARIANT_BOOL prop);
        [id(0x0000012b), propget, helpcontext(0x09db012b)]
        HRESULT AutoFormatAsYouTypeApplyClosings([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012b), propput, helpcontext(0x09db012b)]
        HRESULT AutoFormatAsYouTypeApplyClosings([in] VARIANT_BOOL prop);
        [id(0x0000012c), propget, helpcontext(0x09db012c)]
        HRESULT AutoFormatAsYouTypeMatchParentheses([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012c), propput, helpcontext(0x09db012c)]
        HRESULT AutoFormatAsYouTypeMatchParentheses([in] VARIANT_BOOL prop);
        [id(0x0000012d), propget, helpcontext(0x09db012d)]
        HRESULT AutoFormatAsYouTypeReplaceFarEastDashes([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012d), propput, helpcontext(0x09db012d)]
        HRESULT AutoFormatAsYouTypeReplaceFarEastDashes([in] VARIANT_BOOL prop);
        [id(0x0000012e), propget, helpcontext(0x09db012e)]
        HRESULT AutoFormatAsYouTypeDeleteAutoSpaces([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012e), propput, helpcontext(0x09db012e)]
        HRESULT AutoFormatAsYouTypeDeleteAutoSpaces([in] VARIANT_BOOL prop);
        [id(0x0000012f), propget, helpcontext(0x09db012f)]
        HRESULT AutoFormatAsYouTypeInsertClosings([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012f), propput, helpcontext(0x09db012f)]
        HRESULT AutoFormatAsYouTypeInsertClosings([in] VARIANT_BOOL prop);
        [id(0x00000130), propget, helpcontext(0x09db0130)]
        HRESULT AutoFormatAsYouTypeAutoLetterWizard([out, retval] VARIANT_BOOL* prop);
        [id(0x00000130), propput, helpcontext(0x09db0130)]
        HRESULT AutoFormatAsYouTypeAutoLetterWizard([in] VARIANT_BOOL prop);
        [id(0x00000131), propget, helpcontext(0x09db0131)]
        HRESULT AutoFormatAsYouTypeInsertOvers([out, retval] VARIANT_BOOL* prop);
        [id(0x00000131), propput, helpcontext(0x09db0131)]
        HRESULT AutoFormatAsYouTypeInsertOvers([in] VARIANT_BOOL prop);
        [id(0x00000132), propget, helpcontext(0x09db0132)]
        HRESULT RelyOnCSS([out, retval] VARIANT_BOOL* prop);
        [id(0x00000132), propput, helpcontext(0x09db0132)]
        HRESULT RelyOnCSS([in] VARIANT_BOOL prop);
        [id(0x00000133), propget, helpcontext(0x09db0133)]
        HRESULT HTMLFidelity([out, retval] WdEmailHTMLFidelity* prop);
        [id(0x00000133), propput, helpcontext(0x09db0133)]
        HRESULT HTMLFidelity([in] WdEmailHTMLFidelity prop);
        [id(0x00000134), propget, helpcontext(0x09db0134)]
        HRESULT EmbedSmartTag([out, retval] VARIANT_BOOL* prop);
        [id(0x00000134), propput, helpcontext(0x09db0134)]
        HRESULT EmbedSmartTag([in] VARIANT_BOOL prop);
        [id(0x00000135), propget, helpcontext(0x09db0135)]
        HRESULT TabIndentKey([out, retval] VARIANT_BOOL* prop);
        [id(0x00000135), propput, helpcontext(0x09db0135)]
        HRESULT TabIndentKey([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(000209DC-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009dc),
      dual,
      nonextensible,
      oleautomation
    ]
    interface EmailSignature : IDispatch {
        [id(0x00000064), propget, helpcontext(0x09dc0064)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x00000065), propget, helpcontext(0x09dc0065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x09dc0066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x09dc0067)]
        HRESULT NewMessageSignature([out, retval] BSTR* prop);
        [id(0x00000067), propput, helpcontext(0x09dc0067)]
        HRESULT NewMessageSignature([in] BSTR prop);
        [id(0x00000068), propget, helpcontext(0x09dc0068)]
        HRESULT ReplyMessageSignature([out, retval] BSTR* prop);
        [id(0x00000068), propput, helpcontext(0x09dc0068)]
        HRESULT ReplyMessageSignature([in] BSTR prop);
        [id(0x00000069), propget, helpcontext(0x09dc0069)]
        HRESULT EmailSignatureEntries([out, retval] EmailSignatureEntries** prop);
    };

    [
      odl,
      uuid(000209DD-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009dd),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Email : IDispatch {
        [id(0x00000064), propget, helpcontext(0x09dd0064)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x00000065), propget, helpcontext(0x09dd0065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x09dd0066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000069), propget, helpcontext(0x09dd0069)]
        HRESULT CurrentEmailAuthor([out, retval] EmailAuthor** prop);
    };

    [
      odl,
      uuid(000209DE-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009de),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HorizontalLineFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09de03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09de03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09de03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x09de0002)]
        HRESULT PercentWidth([out, retval] int* prop);
        [id(0x00000002), propput, helpcontext(0x09de0002)]
        HRESULT PercentWidth([in] int prop);
        [id(0x00000003), propget, helpcontext(0x09de0003)]
        HRESULT NoShade([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09de0003)]
        HRESULT NoShade([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09de0004)]
        HRESULT Alignment([out, retval] WdHorizontalLineAlignment* prop);
        [id(0x00000004), propput, helpcontext(0x09de0004)]
        HRESULT Alignment([in] WdHorizontalLineAlignment prop);
        [id(0x00000005), propget, helpcontext(0x09de0005)]
        HRESULT WidthType([out, retval] WdHorizontalLineWidthType* prop);
        [id(0x00000005), propput, helpcontext(0x09de0005)]
        HRESULT WidthType([in] WdHorizontalLineWidthType prop);
    };

    [
      odl,
      uuid(000209E2-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009e2),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Frameset : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e203e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09e2fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x000003eb), propget, helpcontext(0x09e203eb)]
        HRESULT ParentFrameset([out, retval] Frameset** prop);
        [id(00000000), propget, helpcontext(0x09e20000)]
        HRESULT Type([out, retval] WdFramesetType* prop);
        [id(0x00000001), propget, helpcontext(0x09e20001)]
        HRESULT WidthType([out, retval] WdFramesetSizeType* prop);
        [id(0x00000001), propput, helpcontext(0x09e20001)]
        HRESULT WidthType([in] WdFramesetSizeType prop);
        [id(0x00000002), propget, helpcontext(0x09e20002)]
        HRESULT HeightType([out, retval] WdFramesetSizeType* prop);
        [id(0x00000002), propput, helpcontext(0x09e20002)]
        HRESULT HeightType([in] WdFramesetSizeType prop);
        [id(0x00000003), propget, helpcontext(0x09e20003)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x09e20003)]
        HRESULT Width([in] long prop);
        [id(0x00000004), propget, helpcontext(0x09e20004)]
        HRESULT Height([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x09e20004)]
        HRESULT Height([in] long prop);
        [id(0x00000005), propget, helpcontext(0x09e20005)]
        HRESULT ChildFramesetCount([out, retval] long* prop);
        [id(0x00000006), propget, helpcontext(0x09e20006)]
        HRESULT ChildFramesetItem(
                        [in] long Index, 
                        [out, retval] Frameset** prop);
        [id(0x00000014), propget, helpcontext(0x09e20014)]
        HRESULT FramesetBorderWidth([out, retval] int* prop);
        [id(0x00000014), propput, helpcontext(0x09e20014)]
        HRESULT FramesetBorderWidth([in] int prop);
        [id(0x00000015), propget, helpcontext(0x09e20015)]
        HRESULT FramesetBorderColor([out, retval] WdColor* prop);
        [id(0x00000015), propput, helpcontext(0x09e20015)]
        HRESULT FramesetBorderColor([in] WdColor prop);
        [id(0x0000001e), propget, helpcontext(0x09e2001e)]
        HRESULT FrameScrollbarType([out, retval] WdScrollbarType* prop);
        [id(0x0000001e), propput, helpcontext(0x09e2001e)]
        HRESULT FrameScrollbarType([in] WdScrollbarType prop);
        [id(0x0000001f), propget, helpcontext(0x09e2001f)]
        HRESULT FrameResizable([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001f), propput, helpcontext(0x09e2001f)]
        HRESULT FrameResizable([in] VARIANT_BOOL prop);
        [id(0x00000022), propget, helpcontext(0x09e20022)]
        HRESULT FrameName([out, retval] BSTR* prop);
        [id(0x00000022), propput, helpcontext(0x09e20022)]
        HRESULT FrameName([in] BSTR prop);
        [id(0x00000023), propget, helpcontext(0x09e20023)]
        HRESULT FrameDisplayBorders([out, retval] VARIANT_BOOL* prop);
        [id(0x00000023), propput, helpcontext(0x09e20023)]
        HRESULT FrameDisplayBorders([in] VARIANT_BOOL prop);
        [id(0x00000024), propget, helpcontext(0x09e20024)]
        HRESULT FrameDefaultURL([out, retval] BSTR* prop);
        [id(0x00000024), propput, helpcontext(0x09e20024)]
        HRESULT FrameDefaultURL([in] BSTR prop);
        [id(0x00000025), propget, helpcontext(0x09e20025)]
        HRESULT FrameLinkToFile([out, retval] VARIANT_BOOL* prop);
        [id(0x00000025), propput, helpcontext(0x09e20025)]
        HRESULT FrameLinkToFile([in] VARIANT_BOOL prop);
        [id(0x00000032), helpcontext(0x09e20032)]
        HRESULT AddNewFrame(
                        [in] WdFramesetNewFrameLocation Where, 
                        [out, retval] Frameset** prop);
        [id(0x00000033), helpcontext(0x09e20033)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(000209E3-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009e3),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DefaultWebOptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e303e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09e30001)]
        HRESULT OptimizeForBrowser([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09e30001)]
        HRESULT OptimizeForBrowser([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x09e30002)]
        HRESULT BrowserLevel([out, retval] WdBrowserLevel* prop);
        [id(0x00000002), propput, helpcontext(0x09e30002)]
        HRESULT BrowserLevel([in] WdBrowserLevel prop);
        [id(0x00000003), propget, helpcontext(0x09e30003)]
        HRESULT RelyOnCSS([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09e30003)]
        HRESULT RelyOnCSS([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09e30004)]
        HRESULT OrganizeInFolder([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09e30004)]
        HRESULT OrganizeInFolder([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x09e30005)]
        HRESULT UpdateLinksOnSave([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x09e30005)]
        HRESULT UpdateLinksOnSave([in] VARIANT_BOOL prop);
        [id(0x00000006), propget, helpcontext(0x09e30006)]
        HRESULT UseLongFileNames([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x09e30006)]
        HRESULT UseLongFileNames([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09e30007)]
        HRESULT CheckIfOfficeIsHTMLEditor([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propput, helpcontext(0x09e30007)]
        HRESULT CheckIfOfficeIsHTMLEditor([in] VARIANT_BOOL prop);
        [id(0x00000008), propget, helpcontext(0x09e30008)]
        HRESULT CheckIfWordIsDefaultHTMLEditor([out, retval] VARIANT_BOOL* prop);
        [id(0x00000008), propput, helpcontext(0x09e30008)]
        HRESULT CheckIfWordIsDefaultHTMLEditor([in] VARIANT_BOOL prop);
        [id(0x00000009), propget, helpcontext(0x09e30009)]
        HRESULT RelyOnVML([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x09e30009)]
        HRESULT RelyOnVML([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x09e3000a)]
        HRESULT AllowPNG([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000a), propput, helpcontext(0x09e3000a)]
        HRESULT AllowPNG([in] VARIANT_BOOL prop);
        [id(0x0000000b), propget, helpcontext(0x09e3000b)]
        HRESULT ScreenSize([out, retval] MsoScreenSize* prop);
        [id(0x0000000b), propput, helpcontext(0x09e3000b)]
        HRESULT ScreenSize([in] MsoScreenSize prop);
        [id(0x0000000c), propget, helpcontext(0x09e3000c)]
        HRESULT PixelsPerInch([out, retval] long* prop);
        [id(0x0000000c), propput, helpcontext(0x09e3000c)]
        HRESULT PixelsPerInch([in] long prop);
        [id(0x0000000d), propget, helpcontext(0x09e3000d)]
        HRESULT Encoding([out, retval] MsoEncoding* prop);
        [id(0x0000000d), propput, helpcontext(0x09e3000d)]
        HRESULT Encoding([in] MsoEncoding prop);
        [id(0x0000000e), propget, helpcontext(0x09e3000e)]
        HRESULT AlwaysSaveInDefaultEncoding([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000e), propput, helpcontext(0x09e3000e)]
        HRESULT AlwaysSaveInDefaultEncoding([in] VARIANT_BOOL prop);
        [id(0x0000000f), propget, helpcontext(0x09e3000f)]
        HRESULT Fonts([out, retval] WebPageFonts** prop);
        [id(0x00000010), propget, helpcontext(0x09e30010)]
        HRESULT FolderSuffix([out, retval] BSTR* prop);
        [id(0x00000011), propget, helpcontext(0x09e30011)]
        HRESULT TargetBrowser([out, retval] MsoTargetBrowser* prop);
        [id(0x00000011), propput, helpcontext(0x09e30011)]
        HRESULT TargetBrowser([in] MsoTargetBrowser prop);
        [id(0x00000012), propget, helpcontext(0x09e30012)]
        HRESULT SaveNewWebPagesAsWebArchives([out, retval] VARIANT_BOOL* prop);
        [id(0x00000012), propput, helpcontext(0x09e30012)]
        HRESULT SaveNewWebPagesAsWebArchives([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(000209E4-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009e4),
      dual,
      nonextensible,
      oleautomation
    ]
    interface WebOptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e403e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09e40001)]
        HRESULT OptimizeForBrowser([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09e40001)]
        HRESULT OptimizeForBrowser([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x09e40002)]
        HRESULT BrowserLevel([out, retval] WdBrowserLevel* prop);
        [id(0x00000002), propput, helpcontext(0x09e40002)]
        HRESULT BrowserLevel([in] WdBrowserLevel prop);
        [id(0x00000003), propget, helpcontext(0x09e40003)]
        HRESULT RelyOnCSS([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09e40003)]
        HRESULT RelyOnCSS([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09e40004)]
        HRESULT OrganizeInFolder([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09e40004)]
        HRESULT OrganizeInFolder([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x09e40005)]
        HRESULT UseLongFileNames([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x09e40005)]
        HRESULT UseLongFileNames([in] VARIANT_BOOL prop);
        [id(0x00000006), propget, helpcontext(0x09e40006)]
        HRESULT RelyOnVML([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x09e40006)]
        HRESULT RelyOnVML([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09e40007)]
        HRESULT AllowPNG([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propput, helpcontext(0x09e40007)]
        HRESULT AllowPNG([in] VARIANT_BOOL prop);
        [id(0x00000008), propget, helpcontext(0x09e40008)]
        HRESULT ScreenSize([out, retval] MsoScreenSize* prop);
        [id(0x00000008), propput, helpcontext(0x09e40008)]
        HRESULT ScreenSize([in] MsoScreenSize prop);
        [id(0x00000009), propget, helpcontext(0x09e40009)]
        HRESULT PixelsPerInch([out, retval] long* prop);
        [id(0x00000009), propput, helpcontext(0x09e40009)]
        HRESULT PixelsPerInch([in] long prop);
        [id(0x0000000a), propget, helpcontext(0x09e4000a)]
        HRESULT Encoding([out, retval] MsoEncoding* prop);
        [id(0x0000000a), propput, helpcontext(0x09e4000a)]
        HRESULT Encoding([in] MsoEncoding prop);
        [id(0x0000000b), propget, helpcontext(0x09e4000b)]
        HRESULT FolderSuffix([out, retval] BSTR* prop);
        [id(0x00000065), helpcontext(0x09e40065)]
        HRESULT UseDefaultFolderSuffix();
        [id(0x0000000c), propget, helpcontext(0x09e4000c)]
        HRESULT TargetBrowser([out, retval] MsoTargetBrowser* prop);
        [id(0x0000000c), propput, helpcontext(0x09e4000c)]
        HRESULT TargetBrowser([in] MsoTargetBrowser prop);
    };

    [
      odl,
      uuid(000209DF-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009df),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OtherCorrectionsExceptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09df03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09df03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09df03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09dffffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09df0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09df0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] OtherCorrectionsException** prop);
        [id(0x00000065), helpcontext(0x09df0065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] OtherCorrectionsException** prop);
    };

    [
      odl,
      uuid(000209E1-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009e1),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OtherCorrectionsException : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e103e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09e10001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09e10002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000065), helpcontext(0x09e10065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(000209E5-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009e5),
      dual,
      nonextensible,
      oleautomation
    ]
    interface EmailSignatureEntries : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e503e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09e5fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09e50001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09e50000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] EmailSignatureEntry** prop);
        [id(0x00000065), helpcontext(0x09e50065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in] Range* Range, 
                        [out, retval] EmailSignatureEntry** prop);
    };

    [
      odl,
      uuid(000209E6-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009e6),
      dual,
      nonextensible,
      oleautomation
    ]
    interface EmailSignatureEntry : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e603e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09e60001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09e60002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x09e60002)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000065), helpcontext(0x09e60065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(000209E7-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009e7),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HTMLDivision : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e703e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09e70001)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x0000044c), propget, helpcontext(0x09e7044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x00000003), propget, helpcontext(0x09e70003)]
        HRESULT LeftIndent([out, retval] int* prop);
        [id(0x00000003), propput, helpcontext(0x09e70003)]
        HRESULT LeftIndent([in] int prop);
        [id(0x00000004), propget, helpcontext(0x09e70004)]
        HRESULT RightIndent([out, retval] int* prop);
        [id(0x00000004), propput, helpcontext(0x09e70004)]
        HRESULT RightIndent([in] int prop);
        [id(0x00000005), propget, helpcontext(0x09e70005)]
        HRESULT SpaceBefore([out, retval] int* prop);
        [id(0x00000005), propput, helpcontext(0x09e70005)]
        HRESULT SpaceBefore([in] int prop);
        [id(0x00000006), propget, helpcontext(0x09e70006)]
        HRESULT SpaceAfter([out, retval] int* prop);
        [id(0x00000006), propput, helpcontext(0x09e70006)]
        HRESULT SpaceAfter([in] int prop);
        [id(0x00000007), propget, helpcontext(0x09e70007)]
        HRESULT HTMLDivisions([out, retval] HTMLDivisions** prop);
        [id(0x00000008), helpcontext(0x09e70008)]
        HRESULT HTMLDivisionParent(
                        [in, optional] VARIANT* LevelsUp, 
                        [out, retval] HTMLDivision** prop);
        [id(0x00000065), helpcontext(0x09e70065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(000209E8-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009e8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HTMLDivisions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e803e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09e8fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09e80001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09e80002)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x00000065), helpcontext(0x09e80065)]
        HRESULT Add(
                        [in, optional] VARIANT* Range, 
                        [out, retval] HTMLDivision** prop);
        [id(00000000), helpcontext(0x09e80000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] HTMLDivision** prop);
    };

    [
      odl,
      uuid(000209E9-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009e9),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DiagramNode : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000064), propget, helpcontext(0x09e90064)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000065), propget, helpcontext(0x09e90065)]
        HRESULT Children([out, retval] DiagramNodeChildren** prop);
        [id(0x00000066), propget, helpcontext(0x09e90066)]
        HRESULT Shape([out, retval] Shape** prop);
        [id(0x00000067), propget, helpcontext(0x09e90067)]
        HRESULT Root([out, retval] DiagramNode** prop);
        [id(0x00000068), propget, helpcontext(0x09e90068)]
        HRESULT Diagram([out, retval] Diagram** prop);
        [id(0x00000069), propget, helpcontext(0x09e90069)]
        HRESULT Layout([out, retval] MsoOrgChartLayoutType* prop);
        [id(0x00000069), propput, helpcontext(0x09e90069)]
        HRESULT Layout([in] MsoOrgChartLayoutType prop);
        [id(0x0000006a), propget, helpcontext(0x09e9006a)]
        HRESULT TextShape([out, retval] Shape** prop);
        [id(0x0000000a), helpcontext(0x09e9000a)]
        HRESULT AddNode(
                        [in, optional, defaultvalue(2)] MsoRelativeNodePosition Pos, 
                        [in, optional, defaultvalue(1)] MsoDiagramNodeType NodeType, 
                        [out, retval] DiagramNode** prop);
        [id(0x0000000b), helpcontext(0x09e9000b)]
        HRESULT Delete();
        [id(0x0000000c), helpcontext(0x09e9000c)]
        HRESULT MoveNode(
                        [out] DiagramNode** TargetNode, 
                        [in] MsoRelativeNodePosition Pos);
        [id(0x0000000d), helpcontext(0x09e9000d)]
        HRESULT ReplaceNode([out] DiagramNode** TargetNode);
        [id(0x0000000e), helpcontext(0x09e9000e)]
        HRESULT SwapNode(
                        [out] DiagramNode** TargetNode, 
                        [in, optional, defaultvalue(-1)] MsoRelativeNodePosition Pos);
        [id(0x0000000f), helpcontext(0x09e9000f)]
        HRESULT CloneNode(
                        [in] VARIANT_BOOL copyChildren, 
                        [out, optional, defaultvalue(0)] DiagramNode** TargetNode, 
                        [in, optional, defaultvalue(2)] MsoRelativeNodePosition Pos, 
                        [out, retval] DiagramNode** prop);
        [id(0x00000010), helpcontext(0x09e90010)]
        HRESULT TransferChildren([out] DiagramNode** ReceivingNode);
        [id(0x00000011), helpcontext(0x09e90011)]
        HRESULT NextNode([out, retval] DiagramNode** prop);
        [id(0x00000012), helpcontext(0x09e90012)]
        HRESULT PrevNode([out, retval] DiagramNode** prop);
    };

    [
      odl,
      uuid(000209EA-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009ea),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DiagramNodeChildren : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ea03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ea03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x09eafffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000064), propget, helpcontext(0x09ea0064)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000065), propget, helpcontext(0x09ea0065)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000067), propget, helpcontext(0x09ea0067)]
        HRESULT FirstChild([out, retval] DiagramNode** prop);
        [id(0x00000068), propget, helpcontext(0x09ea0068)]
        HRESULT LastChild([out, retval] DiagramNode** prop);
        [id(00000000), helpcontext(0x09ea0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] DiagramNode** prop);
        [id(0x0000000a), helpcontext(0x09ea000a)]
        HRESULT AddNode(
                        [in, optional, defaultvalue(-1)] VARIANT* Index, 
                        [in, optional, defaultvalue(1)] MsoDiagramNodeType NodeType, 
                        [out, retval] DiagramNode** prop);
        [id(0x0000000b), helpcontext(0x09ea000b)]
        HRESULT SelectAll();
    };

    [
      odl,
      uuid(000209EB-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009eb),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DiagramNodes : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09eb03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09eb03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x09ebfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000064), propget, helpcontext(0x09eb0064)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000065), propget, helpcontext(0x09eb0065)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09eb0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] DiagramNode** prop);
        [id(0x0000000a), helpcontext(0x09eb000a)]
        HRESULT SelectAll();
    };

    [
      odl,
      uuid(000209EC-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009ec),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Diagram : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ec03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ec03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000064), propget, helpcontext(0x09ec0064)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000065), propget, helpcontext(0x09ec0065)]
        HRESULT Nodes([out, retval] DiagramNodes** prop);
        [id(0x00000066), propget, helpcontext(0x09ec0066)]
        HRESULT Type([out, retval] MsoDiagramType* prop);
        [id(0x00000067), propget, helpcontext(0x09ec0067)]
        HRESULT AutoLayout([out, retval] MsoTriState* prop);
        [id(0x00000067), propput, helpcontext(0x09ec0067)]
        HRESULT AutoLayout([in] MsoTriState prop);
        [id(0x00000068), propget, helpcontext(0x09ec0068)]
        HRESULT Reverse([out, retval] MsoTriState* prop);
        [id(0x00000068), propput, helpcontext(0x09ec0068)]
        HRESULT Reverse([in] MsoTriState prop);
        [id(0x00000069), propget, helpcontext(0x09ec0069)]
        HRESULT AutoFormat([out, retval] MsoTriState* prop);
        [id(0x00000069), propput, helpcontext(0x09ec0069)]
        HRESULT AutoFormat([in] MsoTriState prop);
        [id(0x0000000a), helpcontext(0x09ec000a)]
        HRESULT Convert([in] MsoDiagramType Type);
        [id(0x0000000b), helpcontext(0x09ec000b)]
        HRESULT FitText();
    };

    [
      odl,
      uuid(B923FDE0-F08C-11D3-91B0-00105A0A19FD),
      version(8.3),
      helpcontext(0x00000de0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomProperty : IDispatch {
        [id(0x00000001), propget, helpcontext(0x0de00001)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(00000000), propget, helpcontext(0x0de00000)]
        HRESULT Value([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x0de00000)]
        HRESULT Value([in] BSTR prop);
        [id(0x000003e8), propget, helpcontext(0x0de003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0de003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0de003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000b), helpcontext(0x0de0000b)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(B923FDE1-F08C-11D3-91B0-00105A0A19FD),
      version(8.3),
      helpcontext(0x00000de1),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomProperties : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0de1fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x0de10002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x0de103e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0de103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0de103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x0de10000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] CustomProperty** prop);
        [id(0x00000005), helpcontext(0x0de10005)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in] BSTR Value, 
                        [out, retval] CustomProperty** prop);
    };

    [
      odl,
      uuid(000209ED-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009ed),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartTag : IDispatch {
        [id(00000000), propget, helpcontext(0x09ed0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x09ed0002)]
        HRESULT XML([out, retval] BSTR* prop);
        [id(0x00000003), propget, helpcontext(0x09ed0003)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000004), propget, helpcontext(0x09ed0004)]
        HRESULT DownloadURL([out, retval] BSTR* prop);
        [id(0x00000005), propget, helpcontext(0x09ed0005)]
        HRESULT Properties([out, retval] CustomProperties** prop);
        [id(0x000003e8), propget, helpcontext(0x09ed03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ed03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09ed03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000ffff), helpcontext(0x09edffff)]
        HRESULT Select();
        [id(0x0000000b), helpcontext(0x09ed000b)]
        HRESULT Delete();
        [id(0x000003eb), propget, helpcontext(0x09ed03eb)]
        HRESULT SmartTagActions([out, retval] SmartTagActions** prop);
        [id(0x000003ec), propget, helpcontext(0x09ed03ec)]
        HRESULT XMLNode([out, retval] XMLNode** prop);
    };

    [
      odl,
      uuid(000209EE-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009ee),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartTags : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x09eefffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09ee0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x09ee03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ee03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09ee03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09ee0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] SmartTag** prop);
        [id(0x00000005), helpcontext(0x09ee0005)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* Properties, 
                        [out, retval] SmartTag** prop);
        [id(0x000003eb), helpcontext(0x09ee03eb)]
        HRESULT SmartTagsByType(
                        [in] BSTR Name, 
                        [out, retval] SmartTags** prop);
    };

    [
      odl,
      uuid(000209EF-0000-0000-C000-000000000046),
      version(8.3),
      helpcontext(0x000009ef),
      dual,
      nonextensible,
      oleautomation
    ]
    interface StyleSheet : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ef03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ef03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000064), propget, helpcontext(0x09ef0064)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09ef0001)]
        HRESULT FullName([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x09ef0002)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09ef0003)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000004), propget, helpcontext(0x09ef0004)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000005), propget, helpcontext(0x09ef0005)]
        HRESULT Type([out, retval] WdStyleSheetLinkType* prop);
        [id(0x00000005), propput, helpcontext(0x09ef0005)]
        HRESULT Type([in] WdStyleSheetLinkType prop);
        [id(0x00000006), propget, helpcontext(0x09ef0006)]
        HRESULT Title([out, retval] BSTR* prop);
        [id(0x00000006), propput, helpcontext(0x09ef0006)]
        HRESULT Title([in] BSTR prop);
        [id(0x00000007), helpcontext(0x09ef0007)]
        HRESULT Move([in] WdStyleSheetPrecedence Precedence);
        [id(0x00000008), helpcontext(0x09ef0008)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(07B7CC7E-E66C-11D3-9454-00105AA31A08),
      version(8.3),
      helpcontext(0x00000c7e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface StyleSheets : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0c7e03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0c7e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0c7e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0c7efffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x0c7e0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x0c7e0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] StyleSheet** prop);
        [id(0x00000002), helpcontext(0x0c7e0002)]
        HRESULT Add(
                        [in] BSTR FileName, 
                        [in] WdStyleSheetLinkType LinkType, 
                        [in] BSTR Title, 
                        [in] WdStyleSheetPrecedence Precedence, 
                        [out, retval] StyleSheet** prop);
    };

    [
      odl,
      uuid(5D311669-EA51-11D3-87CC-00105AA31A34),
      version(8.3),
      helpcontext(0x00000669),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MappedDataField : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x066903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x066903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x066903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x06690001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x06690002)]
        HRESULT DataFieldName([out, retval] BSTR* prop);
        [id(00000000), propget, helpcontext(0x06690000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000004), propget, helpcontext(0x06690004)]
        HRESULT Value([out, retval] BSTR* prop);
        [id(0x00000005), propget, helpcontext(0x06690005)]
        HRESULT DataFieldIndex([out, retval] long* prop);
        [id(0x00000005), propput, helpcontext(0x06690005)]
        HRESULT DataFieldIndex([in] long prop);
    };

    [
      odl,
      uuid(799A6814-EA41-11D3-87CC-00105AA31A34),
      version(8.3),
      helpcontext(0x00000814),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MappedDataFields : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x081403e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x081403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x081403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x08140001)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x0814fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x08140000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] WdMappedDataFields Index, 
                        [out, retval] MappedDataField** prop);
    };

    [
      odl,
      uuid(396F9073-F9FD-11D3-8EA0-0050049A1A01),
      version(8.3),
      helpcontext(0x00000073),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CanvasShapes : IDispatch {
        [id(0x00001f40), propget, helpcontext(0x00731f40)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x00001f41), propget, helpcontext(0x00731f41)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x00730001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x00730002)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x0073fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x00730000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Shape** prop);
        [id(0x0000000a), helpcontext(0x0073000a)]
        HRESULT AddCallout(
                        [in] MsoCalloutType Type, 
                        [in] int Left, 
                        [in] int Top, 
                        [in] int Width, 
                        [in] int Height, 
                        [out, retval] Shape** prop);
        [id(0x0000000b), helpcontext(0x0073000b)]
        HRESULT AddConnector(
                        [in] MsoConnectorType Type, 
                        [in] int BeginX, 
                        [in] int BeginY, 
                        [in] int EndX, 
                        [in] int EndY, 
                        [out, retval] Shape** prop);
        [id(0x0000000c), helpcontext(0x0073000c)]
        HRESULT AddCurve(
                        [in] VARIANT* SafeArrayOfPoints, 
                        [out, retval] Shape** prop);
        [id(0x0000000d), helpcontext(0x0073000d)]
        HRESULT AddLabel(
                        [in] MsoTextOrientation Orientation, 
                        [in] int Left, 
                        [in] int Top, 
                        [in] int Width, 
                        [in] int Height, 
                        [out, retval] Shape** prop);
        [id(0x0000000e), helpcontext(0x0073000e)]
        HRESULT AddLine(
                        [in] int BeginX, 
                        [in] int BeginY, 
                        [in] int EndX, 
                        [in] int EndY, 
                        [out, retval] Shape** prop);
        [id(0x0000000f), helpcontext(0x0073000f)]
        HRESULT AddPicture(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* LinkToFile, 
                        [in, optional] VARIANT* SaveWithDocument, 
                        [in, optional] VARIANT* Left, 
                        [in, optional] VARIANT* Top, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* Height, 
                        [out, retval] Shape** prop);
        [id(0x00000010), helpcontext(0x00730010)]
        HRESULT AddPolyline(
                        [in] VARIANT* SafeArrayOfPoints, 
                        [out, retval] Shape** prop);
        [id(0x00000011), helpcontext(0x00730011)]
        HRESULT AddShape(
                        [in] long Type, 
                        [in] int Left, 
                        [in] int Top, 
                        [in] int Width, 
                        [in] int Height, 
                        [out, retval] Shape** prop);
        [id(0x00000012), helpcontext(0x00730012)]
        HRESULT AddTextEffect(
                        [in] MsoPresetTextEffect PresetTextEffect, 
                        [in] BSTR Text, 
                        [in] BSTR FontName, 
                        [in] int FontSize, 
                        [in] MsoTriState FontBold, 
                        [in] MsoTriState FontItalic, 
                        [in] int Left, 
                        [in] int Top, 
                        [out, retval] Shape** prop);
        [id(0x00000013), helpcontext(0x00730013)]
        HRESULT AddTextbox(
                        [in] MsoTextOrientation Orientation, 
                        [in] int Left, 
                        [in] int Top, 
                        [in] int Width, 
                        [in] int Height, 
                        [out, retval] Shape** prop);
        [id(0x00000014), helpcontext(0x00730014)]
        HRESULT BuildFreeform(
                        [in] MsoEditingType EditingType, 
                        [in] int X1, 
                        [in] int Y1, 
                        [out, retval] FreeformBuilder** prop);
        [id(0x00000015), helpcontext(0x00730015)]
        HRESULT Range(
                        [in] VARIANT* Index, 
                        [out, retval] ShapeRange** prop);
        [id(0x00000016), helpcontext(0x00730016)]
        HRESULT SelectAll();
    };

    [
      odl,
      uuid(B7564E97-0519-4C68-B400-3803E7C63242),
      version(8.3),
      helpcontext(0x00000e97),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TableStyle : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0e9703e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0e9703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000064), propget, helpcontext(0x0e970064)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x0e970002)]
        HRESULT AllowPageBreaks([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x0e970002)]
        HRESULT AllowPageBreaks([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x0e970003)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x00000003), propput, helpcontext(0x0e970003)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000004), propget, helpcontext(0x0e970004)]
        HRESULT BottomPadding([out, retval] int* prop);
        [id(0x00000004), propput, helpcontext(0x0e970004)]
        HRESULT BottomPadding([in] int prop);
        [id(0x00000005), propget, helpcontext(0x0e970005)]
        HRESULT LeftPadding([out, retval] int* prop);
        [id(0x00000005), propput, helpcontext(0x0e970005)]
        HRESULT LeftPadding([in] int prop);
        [id(0x00000006), propget, helpcontext(0x0e970006)]
        HRESULT TopPadding([out, retval] int* prop);
        [id(0x00000006), propput, helpcontext(0x0e970006)]
        HRESULT TopPadding([in] int prop);
        [id(0x00000007), propget, helpcontext(0x0e970007)]
        HRESULT RightPadding([out, retval] int* prop);
        [id(0x00000007), propput, helpcontext(0x0e970007)]
        HRESULT RightPadding([in] int prop);
        [id(0x00000009), propget, helpcontext(0x0e970009)]
        HRESULT Alignment([out, retval] WdRowAlignment* prop);
        [id(0x00000009), propput, helpcontext(0x0e970009)]
        HRESULT Alignment([in] WdRowAlignment prop);
        [id(0x0000000a), propget, helpcontext(0x0e97000a)]
        HRESULT Spacing([out, retval] int* prop);
        [id(0x0000000a), propput, helpcontext(0x0e97000a)]
        HRESULT Spacing([in] int prop);
        [id(0x00000010), helpcontext(0x0e970010)]
        HRESULT Condition(
                        [in] WdConditionCode ConditionCode, 
                        [out, retval] ConditionalStyle** prop);
        [id(0x0000000c), propget, helpcontext(0x0e97000c)]
        HRESULT TableDirection([out, retval] WdTableDirection* prop);
        [id(0x0000000c), propput, helpcontext(0x0e97000c)]
        HRESULT TableDirection([in] WdTableDirection prop);
        [id(0x0000000d), propget, helpcontext(0x0e97000d)]
        HRESULT AllowBreakAcrossPage([out, retval] long* prop);
        [id(0x0000000d), propput, helpcontext(0x0e97000d)]
        HRESULT AllowBreakAcrossPage([in] long prop);
        [id(0x0000000e), propget, helpcontext(0x0e97000e)]
        HRESULT LeftIndent([out, retval] int* prop);
        [id(0x0000000e), propput, helpcontext(0x0e97000e)]
        HRESULT LeftIndent([in] int prop);
        [id(0x0000000f), propget, helpcontext(0x0e97000f)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000011), propget, helpcontext(0x0e970011)]
        HRESULT RowStripe([out, retval] long* prop);
        [id(0x00000011), propput, helpcontext(0x0e970011)]
        HRESULT RowStripe([in] long prop);
        [id(0x00000012), propget, helpcontext(0x0e970012)]
        HRESULT ColumnStripe([out, retval] long* prop);
        [id(0x00000012), propput, helpcontext(0x0e970012)]
        HRESULT ColumnStripe([in] long prop);
    };

    [
      odl,
      uuid(1498F56D-ED33-41F9-B37B-EF30E50B08AC),
      version(8.3),
      helpcontext(0x0000056d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ConditionalStyle : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x056d03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x056d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000064), propget, helpcontext(0x056d0064)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x056d0001)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000002), propget, helpcontext(0x056d0002)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x00000002), propput, helpcontext(0x056d0002)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000003), propget, helpcontext(0x056d0003)]
        HRESULT BottomPadding([out, retval] int* prop);
        [id(0x00000003), propput, helpcontext(0x056d0003)]
        HRESULT BottomPadding([in] int prop);
        [id(0x00000004), propget, helpcontext(0x056d0004)]
        HRESULT TopPadding([out, retval] int* prop);
        [id(0x00000004), propput, helpcontext(0x056d0004)]
        HRESULT TopPadding([in] int prop);
        [id(0x00000005), propget, helpcontext(0x056d0005)]
        HRESULT LeftPadding([out, retval] int* prop);
        [id(0x00000005), propput, helpcontext(0x056d0005)]
        HRESULT LeftPadding([in] int prop);
        [id(0x00000006), propget, helpcontext(0x056d0006)]
        HRESULT RightPadding([out, retval] int* prop);
        [id(0x00000006), propput, helpcontext(0x056d0006)]
        HRESULT RightPadding([in] int prop);
        [id(0x00000009), propget, helpcontext(0x056d0009)]
        HRESULT ParagraphFormat([out, retval] ParagraphFormat** prop);
        [id(0x00000009), propput, helpcontext(0x056d0009)]
        HRESULT ParagraphFormat([in] ParagraphFormat* prop);
        [id(0x0000000a), propget, helpcontext(0x056d000a)]
        HRESULT Font([out, retval] Font** prop);
        [id(0x0000000a), propput, helpcontext(0x056d000a)]
        HRESULT Font([in] Font* prop);
    };

    [
      odl,
      uuid(BEA85A24-D7DA-4F3D-B58C-ED90FB01D615),
      version(8.3),
      helpcontext(0x00000a24),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FootnoteOptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0a2403e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0a2403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0a2403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x0a240064)]
        HRESULT Location([out, retval] WdFootnoteLocation* prop);
        [id(0x00000064), propput, helpcontext(0x0a240064)]
        HRESULT Location([in] WdFootnoteLocation prop);
        [id(0x00000065), propget, helpcontext(0x0a240065)]
        HRESULT NumberStyle([out, retval] WdNoteNumberStyle* prop);
        [id(0x00000065), propput, helpcontext(0x0a240065)]
        HRESULT NumberStyle([in] WdNoteNumberStyle prop);
        [id(0x00000066), propget, helpcontext(0x0a240066)]
        HRESULT StartingNumber([out, retval] long* prop);
        [id(0x00000066), propput, helpcontext(0x0a240066)]
        HRESULT StartingNumber([in] long prop);
        [id(0x00000067), propget, helpcontext(0x0a240067)]
        HRESULT NumberingRule([out, retval] WdNumberingRule* prop);
        [id(0x00000067), propput, helpcontext(0x0a240067)]
        HRESULT NumberingRule([in] WdNumberingRule prop);
    };

    [
      odl,
      uuid(BF043168-F4DE-4E7C-B206-741A8B3EF71A),
      version(8.3),
      helpcontext(0x00000168),
      dual,
      nonextensible,
      oleautomation
    ]
    interface EndnoteOptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x016803e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x016803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x016803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x01680064)]
        HRESULT Location([out, retval] WdEndnoteLocation* prop);
        [id(0x00000064), propput, helpcontext(0x01680064)]
        HRESULT Location([in] WdEndnoteLocation prop);
        [id(0x00000065), propget, helpcontext(0x01680065)]
        HRESULT NumberStyle([out, retval] WdNoteNumberStyle* prop);
        [id(0x00000065), propput, helpcontext(0x01680065)]
        HRESULT NumberStyle([in] WdNoteNumberStyle prop);
        [id(0x00000066), propget, helpcontext(0x01680066)]
        HRESULT StartingNumber([out, retval] long* prop);
        [id(0x00000066), propput, helpcontext(0x01680066)]
        HRESULT StartingNumber([in] long prop);
        [id(0x00000067), propget, helpcontext(0x01680067)]
        HRESULT NumberingRule([out, retval] WdNumberingRule* prop);
        [id(0x00000067), propput, helpcontext(0x01680067)]
        HRESULT NumberingRule([in] WdNumberingRule prop);
    };

    [
      odl,
      uuid(12DCDC9A-5418-48A3-BBE6-EB57BAE275E8),
      version(8.3),
      helpcontext(0x00000c9a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Reviewers : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0c9afffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x000003e8), propget, helpcontext(0x0c9a03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0c9a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0c9a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x0c9a0002)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x0c9a0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Reviewer** prop);
    };

    [
      odl,
      uuid(47CEF4AE-DC32-4220-8AA5-19CCC0E6633A),
      version(8.3),
      helpcontext(0x000004ae),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Reviewer : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x04ae03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x04ae03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x04ae03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x04ae0000)]
        HRESULT Visible([out, retval] VARIANT_BOOL* prop);
        [id(00000000), propput, helpcontext(0x04ae0000)]
        HRESULT Visible([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(B9F1A4E2-0D0A-43B7-8495-139E7ACBD840),
      version(8.3),
      helpcontext(0x000004e2),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TaskPane : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x04e203e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x04e203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x04e203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), propget, helpcontext(0x04e203eb)]
        HRESULT Visible([out, retval] VARIANT_BOOL* prop);
        [id(0x000003eb), propput, helpcontext(0x04e203eb)]
        HRESULT Visible([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(E6AAEC05-E543-4085-BA92-9BF7D2474F5C),
      version(8.3),
      helpcontext(0x00000c05),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TaskPanes : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0c05fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x0c050002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x0c0503e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0c0503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0c0503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x0c050000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] WdTaskPanes Index, 
                        [out, retval] TaskPane** prop);
    };

    [
      odl,
      uuid(00020A00-0001-0000-C000-000000000046),
      version(10.0),
      helpcontext(0x00000fa0),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IApplicationEvents3 : IDispatch {
        [id(0x00000001), restricted, hidden]
        HRESULT Startup();
        [id(0x00000002), helpcontext(0x00061a82)]
        HRESULT Quit();
        [id(0x00000003), helpcontext(0x00061a83)]
        HRESULT DocumentChange();
        [id(0x00000004), helpcontext(0x00061a84)]
        HRESULT DocumentOpen([in] Document* Doc);
        [id(0x00000006), helpcontext(0x00061a85)]
        HRESULT DocumentBeforeClose(
                        [in] Document* Doc, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x00000007), helpcontext(0x00061a86)]
        HRESULT DocumentBeforePrint(
                        [in] Document* Doc, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x00000008), helpcontext(0x00061a87)]
        HRESULT DocumentBeforeSave(
                        [in] Document* Doc, 
                        [in] VARIANT_BOOL* SaveAsUI, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x00000009), helpcontext(0x00061a88)]
        HRESULT NewDocument([in] Document* Doc);
        [id(0x0000000a), helpcontext(0x00061a89)]
        HRESULT WindowActivate(
                        [in] Document* Doc, 
                        [in] Window* Wn);
        [id(0x0000000b), helpcontext(0x003d090a)]
        HRESULT WindowDeactivate(
                        [in] Document* Doc, 
                        [in] Window* Wn);
        [id(0x0000000c), helpcontext(0x003d090b)]
        HRESULT WindowSelectionChange([in] Selection* Sel);
        [id(0x0000000d), helpcontext(0x003d090c)]
        HRESULT WindowBeforeRightClick(
                        [in] Selection* Sel, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x0000000e), helpcontext(0x003d090d)]
        HRESULT WindowBeforeDoubleClick(
                        [in] Selection* Sel, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x0000000f), helpcontext(0x003d090e)]
        HRESULT EPostagePropertyDialog([in] Document* Doc);
        [id(0x00000010), helpcontext(0x003d090f)]
        HRESULT EPostageInsert([in] Document* Doc);
        [id(0x00000011), helpcontext(0x003d0910)]
        HRESULT MailMergeAfterMerge(
                        [in] Document* Doc, 
                        [in] Document* DocResult);
        [id(0x00000012), helpcontext(0x003d0911)]
        HRESULT MailMergeAfterRecordMerge([in] Document* Doc);
        [id(0x00000013), helpcontext(0x003d0912)]
        HRESULT MailMergeBeforeMerge(
                        [in] Document* Doc, 
                        [in] long StartRecord, 
                        [in] long EndRecord, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x00000014), helpcontext(0x003d0913)]
        HRESULT MailMergeBeforeRecordMerge(
                        [in] Document* Doc, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x00000015), helpcontext(0x003d0914)]
        HRESULT MailMergeDataSourceLoad([in] Document* Doc);
        [id(0x00000016), helpcontext(0x003d0915)]
        HRESULT MailMergeDataSourceValidate(
                        [in] Document* Doc, 
                        [in] VARIANT_BOOL* Handled);
        [id(0x00000017), helpcontext(0x003d0916)]
        HRESULT MailMergeWizardSendToCustom([in] Document* Doc);
        [id(0x00000018), helpcontext(0x003d0917)]
        HRESULT MailMergeWizardStateChange(
                        [in] Document* Doc, 
                        [in] int* FromState, 
                        [in] int* ToState, 
                        [in] VARIANT_BOOL* Handled);
        [id(0x00000019), helpcontext(0x003d0918)]
        HRESULT WindowSize(
                        [in] Document* Doc, 
                        [in] Window* Wn);
    };

    [
      uuid(00020A00-0000-0000-C000-000000000046),
      helpcontext(0x00000fa3),
      hidden
    ]
    dispinterface ApplicationEvents3 {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000001), restricted, hidden]
            void Startup();
            [id(0x00000002), helpcontext(0x00061a82)]
            void Quit();
            [id(0x00000003), helpcontext(0x00061a83)]
            void DocumentChange();
            [id(0x00000004), helpcontext(0x00061a84)]
            void DocumentOpen([in] Document* Doc);
            [id(0x00000006), helpcontext(0x00061a85)]
            void DocumentBeforeClose(
                            [in] Document* Doc, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x00000007), helpcontext(0x00061a86)]
            void DocumentBeforePrint(
                            [in] Document* Doc, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x00000008), helpcontext(0x00061a87)]
            void DocumentBeforeSave(
                            [in] Document* Doc, 
                            [in] VARIANT_BOOL* SaveAsUI, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x00000009), helpcontext(0x00061a88)]
            void NewDocument([in] Document* Doc);
            [id(0x0000000a), helpcontext(0x00061a89)]
            void WindowActivate(
                            [in] Document* Doc, 
                            [in] Window* Wn);
            [id(0x0000000b), helpcontext(0x003d090a)]
            void WindowDeactivate(
                            [in] Document* Doc, 
                            [in] Window* Wn);
            [id(0x0000000c), helpcontext(0x003d090b)]
            void WindowSelectionChange([in] Selection* Sel);
            [id(0x0000000d), helpcontext(0x003d090c)]
            void WindowBeforeRightClick(
                            [in] Selection* Sel, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x0000000e), helpcontext(0x003d090d)]
            void WindowBeforeDoubleClick(
                            [in] Selection* Sel, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x0000000f), helpcontext(0x003d090e)]
            void EPostagePropertyDialog([in] Document* Doc);
            [id(0x00000010), helpcontext(0x003d090f)]
            void EPostageInsert([in] Document* Doc);
            [id(0x00000011), helpcontext(0x003d0910)]
            void MailMergeAfterMerge(
                            [in] Document* Doc, 
                            [in] Document* DocResult);
            [id(0x00000012), helpcontext(0x003d0911)]
            void MailMergeAfterRecordMerge([in] Document* Doc);
            [id(0x00000013), helpcontext(0x003d0912)]
            void MailMergeBeforeMerge(
                            [in] Document* Doc, 
                            [in] long StartRecord, 
                            [in] long EndRecord, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x00000014), helpcontext(0x003d0913)]
            void MailMergeBeforeRecordMerge(
                            [in] Document* Doc, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x00000015), helpcontext(0x003d0914)]
            void MailMergeDataSourceLoad([in] Document* Doc);
            [id(0x00000016), helpcontext(0x003d0915)]
            void MailMergeDataSourceValidate(
                            [in] Document* Doc, 
                            [in] VARIANT_BOOL* Handled);
            [id(0x00000017), helpcontext(0x003d0916)]
            void MailMergeWizardSendToCustom([in] Document* Doc);
            [id(0x00000018), helpcontext(0x003d0917)]
            void MailMergeWizardStateChange(
                            [in] Document* Doc, 
                            [in] int* FromState, 
                            [in] int* ToState, 
                            [in] VARIANT_BOOL* Handled);
            [id(0x00000019), helpcontext(0x003d0918)]
            void WindowSize(
                            [in] Document* Doc, 
                            [in] Window* Wn);
    };

    

    [
      odl,
      uuid(DFB6AA6C-1068-420F-969D-01280FCC1630),
      version(8.3),
      helpcontext(0x00000a6c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartTagAction : IDispatch {
        [id(00000000), propget, helpcontext(0x0a6c0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000003e8), propget, helpcontext(0x0a6c03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0a6c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0a6c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), helpcontext(0x0a6c03eb)]
        HRESULT Execute();
        [id(0x000003ec), propget, helpcontext(0x0a6c03ec)]
        HRESULT Type([out, retval] WdSmartTagControlType* prop);
        [id(0x000003ed), propget, helpcontext(0x0a6c03ed)]
        HRESULT PresentInPane([out, retval] VARIANT_BOOL* prop);
        [id(0x000003ee), propget, helpcontext(0x0a6c03ee)]
        HRESULT ExpandHelp([out, retval] VARIANT_BOOL* prop);
        [id(0x000003ee), propput, helpcontext(0x0a6c03ee)]
        HRESULT ExpandHelp([in] VARIANT_BOOL prop);
        [id(0x000003ef), propget, helpcontext(0x0a6c03ef)]
        HRESULT CheckboxState([out, retval] VARIANT_BOOL* prop);
        [id(0x000003ef), propput, helpcontext(0x0a6c03ef)]
        HRESULT CheckboxState([in] VARIANT_BOOL prop);
        [id(0x000003f0), propget, helpcontext(0x0a6c03f0)]
        HRESULT TextboxText([out, retval] BSTR* prop);
        [id(0x000003f0), propput, helpcontext(0x0a6c03f0)]
        HRESULT TextboxText([in] BSTR prop);
        [id(0x000003f1), propget, helpcontext(0x0a6c03f1)]
        HRESULT ListSelection([out, retval] long* prop);
        [id(0x000003f1), propput, helpcontext(0x0a6c03f1)]
        HRESULT ListSelection([in] long prop);
        [id(0x000003f2), propget, helpcontext(0x0a6c03f2)]
        HRESULT RadioGroupSelection([out, retval] long* prop);
        [id(0x000003f2), propput, helpcontext(0x0a6c03f2)]
        HRESULT RadioGroupSelection([in] long prop);
        [id(0x000003f3), propget, helpcontext(0x0a6c03f3)]
        HRESULT ExpandDocumentFragment([out, retval] VARIANT_BOOL* prop);
        [id(0x000003f3), propput, helpcontext(0x0a6c03f3)]
        HRESULT ExpandDocumentFragment([in] VARIANT_BOOL prop);
        [id(0x000003f4), propget, helpcontext(0x0a6c03f4)]
        HRESULT ActiveXControl([out, retval] IDispatch** prop);
    };

    [
      odl,
      uuid(CDE12CD8-767B-4757-8A31-13029A086305),
      version(8.3),
      helpcontext(0x00000cd8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartTagActions : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0cd8fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x0cd80002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x0cd803e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0cd803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0cd803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x0cd80000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] SmartTagAction** prop);
        [id(0x000003eb), helpcontext(0x0cd803eb)]
        HRESULT ReloadActions();
    };

    [
      odl,
      uuid(15EBE471-0182-4CCE-98D0-B6614D1C32A1),
      version(8.3),
      helpcontext(0x00000471),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartTagRecognizer : IDispatch {
        [id(0x00000001), propget, helpcontext(0x04710001)]
        HRESULT FullName([out, retval] BSTR* prop);
        [id(0x000003e8), propget, helpcontext(0x047103e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x047103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x047103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), propget, helpcontext(0x047103eb)]
        HRESULT Enabled([out, retval] VARIANT_BOOL* prop);
        [id(0x000003eb), propput, helpcontext(0x047103eb)]
        HRESULT Enabled([in] VARIANT_BOOL prop);
        [id(00000000), propget, helpcontext(0x04710000)]
        HRESULT ProgID([out, retval] BSTR* prop);
        [id(0x000003ec), propget, helpcontext(0x047103ec)]
        HRESULT Caption([out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(F2B60A10-DED5-46FB-A914-3C6F4EBB6451),
      version(8.3),
      helpcontext(0x00000a10),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartTagRecognizers : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0a10fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x0a100002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x0a1003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0a1003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0a1003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x0a100000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] SmartTagRecognizer** prop);
        [id(0x000003eb), helpcontext(0x0a1003eb)]
        HRESULT ReloadRecognizers();
    };

    [
      odl,
      uuid(5E9A888C-E5DC-4DCB-8308-3C91FB61E6F4),
      version(8.3),
      helpcontext(0x0000088c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartTagType : IDispatch {
        [id(00000000), propget, helpcontext(0x088c0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000003e8), propget, helpcontext(0x088c03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x088c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x088c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), propget, helpcontext(0x088c03eb)]
        HRESULT SmartTagActions([out, retval] SmartTagActions** prop);
        [id(0x000003ec), propget, helpcontext(0x088c03ec)]
        HRESULT SmartTagRecognizers([out, retval] SmartTagRecognizers** prop);
        [id(0x000003ed), propget, helpcontext(0x088c03ed)]
        HRESULT FriendlyName([out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(DB8E3072-E106-4453-8E7C-53056F1D30DC),
      version(8.3),
      helpcontext(0x00000072),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartTagTypes : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0072fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x00720002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x007203e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x007203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x007203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x00720000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] SmartTagType** prop);
        [id(0x000003eb), helpcontext(0x007203eb)]
        HRESULT ReloadAll();
    };

    [
      odl,
      uuid(AE6CE2F5-B9D3-407D-85A8-0F10C63289A4),
      version(8.3),
      helpcontext(0x000002f5),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Line : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x02f503e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x02f503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x02f503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x02f50002)]
        HRESULT LineType([out, retval] WdLineType* prop);
        [id(0x00000003), propget, helpcontext(0x02f50003)]
        HRESULT Left([out, retval] long* prop);
        [id(0x00000004), propget, helpcontext(0x02f50004)]
        HRESULT Top([out, retval] long* prop);
        [id(0x00000005), propget, helpcontext(0x02f50005)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000006), propget, helpcontext(0x02f50006)]
        HRESULT Height([out, retval] long* prop);
        [id(0x00000007), propget, helpcontext(0x02f50007)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000008), propget, helpcontext(0x02f50008)]
        HRESULT Rectangles([out, retval] Rectangles** prop);
    };

    [
      odl,
      uuid(E2E8A400-0615-427D-ADCC-CAD39FFEBD42),
      version(8.3),
      helpcontext(0x00000400),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Lines : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0400fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x04000002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x040003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x040003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x040003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x04000000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Line** prop);
    };

    [
      odl,
      uuid(ADD4EDF3-2F33-4734-9CE6-D476097C5ADA),
      version(8.3),
      helpcontext(0x00000df3),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Rectangle : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0df303e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0df303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0df303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x0df30002)]
        HRESULT RectangleType([out, retval] WdRectangleType* prop);
        [id(0x00000003), propget, helpcontext(0x0df30003)]
        HRESULT Left([out, retval] long* prop);
        [id(0x00000004), propget, helpcontext(0x0df30004)]
        HRESULT Top([out, retval] long* prop);
        [id(0x00000005), propget, helpcontext(0x0df30005)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000006), propget, helpcontext(0x0df30006)]
        HRESULT Height([out, retval] long* prop);
        [id(0x00000007), propget, helpcontext(0x0df30007)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000008), propget, helpcontext(0x0df30008)]
        HRESULT Lines([out, retval] Lines** prop);
    };

    [
      odl,
      uuid(7D0F7985-68D9-4D93-91CB-8109280E76CC),
      version(8.3),
      helpcontext(0x00000985),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Rectangles : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0985fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09850002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x098503e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09850000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Rectangle** prop);
    };

    [
      odl,
      uuid(79635BF1-BD1D-4B3F-A520-C1106F1AAAD8),
      version(8.3),
      helpcontext(0x00000bf1),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Break : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0bf103e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0bf103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0bf103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x0bf10002)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000003), propget, helpcontext(0x0bf10003)]
        HRESULT PageIndex([out, retval] long* prop);
    };

    [
      odl,
      uuid(16BE9309-D708-4322-BB1A-B056F58D17EA),
      version(8.3),
      helpcontext(0x00000309),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Breaks : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0309fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x03090002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x030903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x030903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x030903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x03090000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Break** prop);
    };

    [
      odl,
      uuid(352840A9-AF7D-4CA4-87FC-21C68FDAB3E4),
      version(8.3),
      helpcontext(0x000000a9),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Page : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x00a903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x00a903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x00a903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x00a90002)]
        HRESULT Left([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x00a90003)]
        HRESULT Top([out, retval] long* prop);
        [id(0x00000004), propget, helpcontext(0x00a90004)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000005), propget, helpcontext(0x00a90005)]
        HRESULT Height([out, retval] long* prop);
        [id(0x00000006), propget, helpcontext(0x00a90006)]
        HRESULT Rectangles([out, retval] Rectangles** prop);
        [id(0x00000007), propget, helpcontext(0x00a90007)]
        HRESULT Breaks([out, retval] Breaks** prop);
    };

    [
      odl,
      uuid(91807402-6C6F-47CD-B8FA-C42FEE8EE924),
      version(8.3),
      helpcontext(0x00000402),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Pages : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0402fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x04020002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x040203e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x040203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x040203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x04020000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Page** prop);
    };

    [
      odl,
      uuid(09760240-0B89-49F7-A79D-479F24723F56),
      version(8.3),
      helpcontext(0x00000240),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLNode : IDispatch {
        [id(00000000), propget, helpcontext(0x02400000)]
        HRESULT BaseName([out, retval] BSTR* prop);
        [id(0x000003e8), propget, helpcontext(0x024003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x024003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x024003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x02400001)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000002), propget, helpcontext(0x02400002)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x02400002)]
        HRESULT Text([in] BSTR prop);
        [id(0x00000004), propget, helpcontext(0x02400004)]
        HRESULT NamespaceURI([out, retval] BSTR* prop);
        [id(0x00000005), propget, helpcontext(0x02400005)]
        HRESULT XML(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL DataOnly, 
                        [out, retval] BSTR* prop);
        [id(0x00000006), propget, helpcontext(0x02400006)]
        HRESULT NextSibling([out, retval] XMLNode** prop);
        [id(0x00000007), propget, helpcontext(0x02400007)]
        HRESULT PreviousSibling([out, retval] XMLNode** prop);
        [id(0x00000008), propget, helpcontext(0x02400008)]
        HRESULT ParentNode([out, retval] XMLNode** prop);
        [id(0x00000009), propget, helpcontext(0x02400009)]
        HRESULT FirstChild([out, retval] XMLNode** prop);
        [id(0x0000000a), propget, helpcontext(0x0240000a)]
        HRESULT LastChild([out, retval] XMLNode** prop);
        [id(0x0000000b), propget, helpcontext(0x0240000b)]
        HRESULT OwnerDocument([out, retval] Document** prop);
        [id(0x0000000c), propget, helpcontext(0x0240000c)]
        HRESULT NodeType([out, retval] WdXMLNodeType* prop);
        [id(0x0000000d), propget, helpcontext(0x0240000d)]
        HRESULT ChildNodes([out, retval] XMLNodes** prop);
        [id(0x0000000f), propget, helpcontext(0x0240000f)]
        HRESULT Attributes([out, retval] XMLNodes** prop);
        [id(0x00000010), propget, helpcontext(0x02400010)]
        HRESULT NodeValue([out, retval] BSTR* prop);
        [id(0x00000010), propput, helpcontext(0x02400010)]
        HRESULT NodeValue([in] BSTR prop);
        [id(0x00000011), propget, helpcontext(0x02400011)]
        HRESULT HasChildNodes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000012), helpcontext(0x02400012)]
        HRESULT SelectSingleNode(
                        [in] BSTR XPath, 
                        [in, optional, defaultvalue("")] BSTR PrefixMapping, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL FastSearchSkippingTextNodes, 
                        [out, retval] XMLNode** prop);
        [id(0x00000013), helpcontext(0x02400013)]
        HRESULT SelectNodes(
                        [in] BSTR XPath, 
                        [in, optional, defaultvalue("")] BSTR PrefixMapping, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL FastSearchSkippingTextNodes, 
                        [out, retval] XMLNodes** prop);
        [id(0x00000014), propget, helpcontext(0x02400014)]
        HRESULT ChildNodeSuggestions([out, retval] XMLChildNodeSuggestions** prop);
        [id(0x00000015), propget, helpcontext(0x02400015)]
        HRESULT Level([out, retval] WdXMLNodeLevel* prop);
        [id(0x00000016), propget, helpcontext(0x02400016)]
        HRESULT ValidationStatus([out, retval] WdXMLValidationStatus* prop);
        [id(0x00000017), propget, helpcontext(0x02400017)]
        HRESULT SmartTag([out, retval] SmartTag** prop);
        [id(0x00000018), propget, helpcontext(0x02400018)]
        HRESULT ValidationErrorText(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Advanced, 
                        [out, retval] BSTR* prop);
        [id(0x00000019), propget, helpcontext(0x02400019)]
        HRESULT PlaceholderText([out, retval] BSTR* prop);
        [id(0x00000019), propput, helpcontext(0x02400019)]
        HRESULT PlaceholderText([in] BSTR prop);
        [id(0x00000064), helpcontext(0x02400064)]
        HRESULT Delete();
        [id(0x00000065), helpcontext(0x02400065)]
        HRESULT Copy();
        [id(0x00000066), helpcontext(0x02400066)]
        HRESULT RemoveChild([in] XMLNode* ChildElement);
        [id(0x00000067), helpcontext(0x02400067)]
        HRESULT Cut();
        [id(0x00000068), helpcontext(0x02400068)]
        HRESULT Validate();
        [id(0x00000069), helpcontext(0x02400069)]
        HRESULT SetValidationError(
                        [in] WdXMLValidationStatus Status, 
                        [in, optional] VARIANT* ErrorText, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL ClearedAutomatically);
    };

    [
      odl,
      uuid(D36C1F42-7044-4B9E-9CA3-85919454DB04),
      version(8.3),
      helpcontext(0x00000f42),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLNodes : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0f42fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x0f420002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x0f4203e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0f4203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0f4203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x0f420000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] XMLNode** prop);
        [id(0x00000064), helpcontext(0x0f420064)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in] BSTR Namespace, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] XMLNode** prop);
    };

    [
      odl,
      uuid(FE0971F0-5E60-4985-BCDA-95CB0B8E0308),
      version(8.3),
      helpcontext(0x000001f0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLSchemaReference : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x01f003e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x01f003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x01f003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x01f00002)]
        HRESULT NamespaceURI([out, retval] BSTR* prop);
        [id(0x00000003), propget, helpcontext(0x01f00003)]
        HRESULT Location([out, retval] BSTR* prop);
        [id(0x00000064), helpcontext(0x01f00064)]
        HRESULT Delete();
        [id(0x00000065), helpcontext(0x01f00065)]
        HRESULT Reload();
    };

    [
      odl,
      uuid(356B06EC-4908-42A4-81FC-4B5A51F3483B),
      version(8.3),
      helpcontext(0x000006ec),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLSchemaReferences : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x06ecfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x06ec0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x06ec03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x06ec03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x06ec03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000003), propget, helpcontext(0x06ec0003)]
        HRESULT AutomaticValidation([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x06ec0003)]
        HRESULT AutomaticValidation([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x06ec0004)]
        HRESULT AllowSaveAsXMLWithoutValidation([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x06ec0004)]
        HRESULT AllowSaveAsXMLWithoutValidation([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x06ec0005)]
        HRESULT HideValidationErrors([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x06ec0005)]
        HRESULT HideValidationErrors([in] VARIANT_BOOL prop);
        [id(0x00000006), propget, helpcontext(0x06ec0006)]
        HRESULT IgnoreMixedContent([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x06ec0006)]
        HRESULT IgnoreMixedContent([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x06ec0007)]
        HRESULT ShowPlaceholderText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propput, helpcontext(0x06ec0007)]
        HRESULT ShowPlaceholderText([in] VARIANT_BOOL prop);
        [id(00000000), helpcontext(0x06ec0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] XMLSchemaReference** prop);
        [id(0x00000064), helpcontext(0x06ec0064)]
        HRESULT Validate();
        [id(0x00000065), helpcontext(0x06ec0065)]
        HRESULT Add(
                        [in, optional] VARIANT* NamespaceURI, 
                        [in, optional] VARIANT* Alias, 
                        [in, optional] VARIANT* FileName, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL InstallForAllUsers, 
                        [out, retval] XMLSchemaReference** prop);
    };

    [
      odl,
      uuid(A87E00E9-3AC3-4B53-ABE3-7379653D0E82),
      version(8.3),
      helpcontext(0x000000e9),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLChildNodeSuggestion : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x00e903e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x00e903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x00e903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x00e90000)]
        HRESULT BaseName([out, retval] BSTR* prop);
        [id(0x00000003), propget, helpcontext(0x00e90003)]
        HRESULT NamespaceURI([out, retval] BSTR* prop);
        [id(0x00000004), propget, helpcontext(0x00e90004)]
        HRESULT XMLSchemaReference([out, retval] XMLSchemaReference** prop);
        [id(0x00000064), helpcontext(0x00e90064)]
        HRESULT Insert(
                        [in, optional] VARIANT* Range, 
                        [out, retval] XMLNode** prop);
    };

    [
      odl,
      uuid(DE63B5AC-CA4F-46FE-9184-A5719AB9ED5B),
      version(8.3),
      helpcontext(0x000005ac),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLChildNodeSuggestions : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x05acfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x05ac0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x05ac03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x05ac03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x05ac03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x05ac0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] XMLChildNodeSuggestion** prop);
    };

    [
      odl,
      uuid(B140A023-4850-4DA6-BC5F-CC459C4507BC),
      version(8.3),
      helpcontext(0x00000023),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLNamespace : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x002303e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x002303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x002303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x00230002)]
        HRESULT URI([out, retval] BSTR* prop);
        [id(0x00000003), propget, helpcontext(0x00230003)]
        HRESULT Location(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [out, retval] BSTR* prop);
        [id(0x00000003), propput, helpcontext(0x00230003)]
        HRESULT Location(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [in] BSTR prop);
        [id(0x00000004), propget, helpcontext(0x00230004)]
        HRESULT Alias(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [out, retval] BSTR* prop);
        [id(0x00000004), propput, helpcontext(0x00230004)]
        HRESULT Alias(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [in] BSTR prop);
        [id(0x00000005), propget, helpcontext(0x00230005)]
        HRESULT XSLTransforms([out, retval] XSLTransforms** prop);
        [id(0x00000006), propget, helpcontext(0x00230006)]
        HRESULT DefaultTransform(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [out, retval] XSLTransform** prop);
        [id(0x00000006), propput, helpcontext(0x00230006)]
        HRESULT DefaultTransform(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [in] XSLTransform* prop);
        [id(0x00000064), helpcontext(0x00230064)]
        HRESULT AttachToDocument([in] VARIANT* Document);
        [id(0x00000065), helpcontext(0x00230065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(656BBED7-E82D-4B0A-8F97-EC742BA11FFA),
      version(8.3),
      helpcontext(0x00000ed7),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLNamespaces : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0ed7fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x0ed70002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x0ed703e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0ed703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0ed703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x0ed70000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] XMLNamespace** prop);
        [id(0x00000065), helpcontext(0x0ed70065)]
        HRESULT Add(
                        [in] BSTR Path, 
                        [in, optional] VARIANT* NamespaceURI, 
                        [in, optional] VARIANT* Alias, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL InstallForAllUsers, 
                        [out, retval] XMLNamespace** prop);
        [id(0x00000066), helpcontext(0x0ed70066)]
        HRESULT InstallManifest(
                        [in] BSTR Path, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL InstallForAllUsers);
    };

    [
      odl,
      uuid(E3124493-7D6A-410F-9A48-CC822C033CEC),
      version(8.3),
      helpcontext(0x00000493),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XSLTransform : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x049303e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x049303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x049303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x04930002)]
        HRESULT Alias(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x04930002)]
        HRESULT Alias(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x04930003)]
        HRESULT Location(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [out, retval] BSTR* prop);
        [id(0x00000003), propput, helpcontext(0x04930003)]
        HRESULT Location(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [in] BSTR prop);
        [id(0x00000065), helpcontext(0x04930065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(C774F5EA-A539-4284-A1BE-30AEC052D899),
      version(8.3),
      helpcontext(0x000005ea),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XSLTransforms : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x05eafffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x05ea0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x05ea03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x05ea03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x05ea03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x05ea0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] XSLTransform** prop);
        [id(0x00000065), helpcontext(0x05ea0065)]
        HRESULT Add(
                        [in] BSTR Location, 
                        [in, optional] VARIANT* Alias, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL InstallForAllUsers, 
                        [out, retval] XSLTransform** prop);
    };

    [
      odl,
      uuid(AED7E08C-14F0-4F33-921D-4C5353137BF6),
      version(8.3),
      helpcontext(0x0000008c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Editors : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x008c03e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x008c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x008c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x008c0002)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x008c0000)]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Editor** prop);
        [id(0x000001f5), helpcontext(0x008c01f5)]
        HRESULT Add(
                        [in] VARIANT* EditorID, 
                        [out, retval] Editor** prop);
    };

    [
      odl,
      uuid(DD947D72-F33C-4198-9BDF-F86181D05E41),
      version(8.3),
      helpcontext(0x00000d72),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Editor : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0d720064)]
        HRESULT ID([out, retval] BSTR* prop);
        [id(0x00000065), propget, helpcontext(0x0d720065)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000066), propget, helpcontext(0x0d720066)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000067), propget, helpcontext(0x0d720067)]
        HRESULT NextRange([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x0d7203e8)]
        HRESULT Application([out, retval] Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0d7203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0d7203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000001f4), helpcontext(0x0d7201f4)]
        HRESULT Delete();
        [id(0x000001f5), helpcontext(0x0d7201f5)]
        HRESULT DeleteAll();
        [id(0x000001f6), helpcontext(0x0d7201f6)]
        HRESULT SelectAll();
    };

    [
      odl,
      uuid(00020A01-0001-0000-C000-000000000046),
      version(10.0),
      helpcontext(0x00000fa0),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IApplicationEvents4 : IDispatch {
        [id(0x00000001), restricted, hidden]
        HRESULT Startup();
        [id(0x00000002), helpcontext(0x00061a82)]
        HRESULT Quit();
        [id(0x00000003), helpcontext(0x00061a83)]
        HRESULT DocumentChange();
        [id(0x00000004), helpcontext(0x00061a84)]
        HRESULT DocumentOpen([in] Document* Doc);
        [id(0x00000006), helpcontext(0x00061a85)]
        HRESULT DocumentBeforeClose(
                        [in] Document* Doc, 
                        [in, out] VARIANT_BOOL* Cancel);
        [id(0x00000007), helpcontext(0x00061a86)]
        HRESULT DocumentBeforePrint(
                        [in] Document* Doc, 
                        [in, out] VARIANT_BOOL* Cancel);
        [id(0x00000008), helpcontext(0x00061a87)]
        HRESULT DocumentBeforeSave(
                        [in] Document* Doc, 
                        [in] VARIANT_BOOL* SaveAsUI, 
                        [in, out] VARIANT_BOOL* Cancel);
        [id(0x00000009), helpcontext(0x00061a88)]
        HRESULT NewDocument([in] Document* Doc);
        [id(0x0000000a), helpcontext(0x00061a89)]
        HRESULT WindowActivate(
                        [in] Document* Doc, 
                        [in] Window* Wn);
        [id(0x0000000b), helpcontext(0x003d090a)]
        HRESULT WindowDeactivate(
                        [in] Document* Doc, 
                        [in] Window* Wn);
        [id(0x0000000c), helpcontext(0x003d090b)]
        HRESULT WindowSelectionChange([in] Selection* Sel);
        [id(0x0000000d), helpcontext(0x003d090c)]
        HRESULT WindowBeforeRightClick(
                        [in] Selection* Sel, 
                        [in, out] VARIANT_BOOL* Cancel);
        [id(0x0000000e), helpcontext(0x003d090d)]
        HRESULT WindowBeforeDoubleClick(
                        [in] Selection* Sel, 
                        [in, out] VARIANT_BOOL* Cancel);
        [id(0x0000000f), helpcontext(0x003d090e)]
        HRESULT EPostagePropertyDialog([in] Document* Doc);
        [id(0x00000010), helpcontext(0x003d090f)]
        HRESULT EPostageInsert([in] Document* Doc);
        [id(0x00000011), helpcontext(0x003d0910)]
        HRESULT MailMergeAfterMerge(
                        [in] Document* Doc, 
                        [in] Document* DocResult);
        [id(0x00000012), helpcontext(0x003d0911)]
        HRESULT MailMergeAfterRecordMerge([in] Document* Doc);
        [id(0x00000013), helpcontext(0x003d0912)]
        HRESULT MailMergeBeforeMerge(
                        [in] Document* Doc, 
                        [in] long StartRecord, 
                        [in] long EndRecord, 
                        [in, out] VARIANT_BOOL* Cancel);
        [id(0x00000014), helpcontext(0x003d0913)]
        HRESULT MailMergeBeforeRecordMerge(
                        [in] Document* Doc, 
                        [in, out] VARIANT_BOOL* Cancel);
        [id(0x00000015), helpcontext(0x003d0914)]
        HRESULT MailMergeDataSourceLoad([in] Document* Doc);
        [id(0x00000016), helpcontext(0x003d0915)]
        HRESULT MailMergeDataSourceValidate(
                        [in] Document* Doc, 
                        [in] VARIANT_BOOL* Handled);
        [id(0x00000017), helpcontext(0x003d0916)]
        HRESULT MailMergeWizardSendToCustom([in] Document* Doc);
        [id(0x00000018), helpcontext(0x003d0917)]
        HRESULT MailMergeWizardStateChange(
                        [in] Document* Doc, 
                        [in] int* FromState, 
                        [in] int* ToState, 
                        [in] VARIANT_BOOL* Handled);
        [id(0x00000019), helpcontext(0x003d0918)]
        HRESULT WindowSize(
                        [in] Document* Doc, 
                        [in] Window* Wn);
        [id(0x0000001a), helpcontext(0x003d0919)]
        HRESULT XMLSelectionChange(
                        [in] Selection* Sel, 
                        [in] XMLNode* OldXMLNode, 
                        [in] XMLNode* NewXMLNode, 
                        [in] long* Reason);
        [id(0x0000001b), helpcontext(0x003d091a)]
        HRESULT XMLValidationError([in] XMLNode* XMLNode);
        [id(0x0000001c), helpcontext(0x003d091b)]
        HRESULT DocumentSync(
                        [in] Document* Doc, 
                        [in] MsoSyncEventType SyncEventType);
        [id(0x0000001d), helpcontext(0x003d091c)]
        HRESULT EPostageInsertEx(
                        [in] Document* Doc, 
                        [in] int cpDeliveryAddrStart, 
                        [in] int cpDeliveryAddrEnd, 
                        [in] int cpReturnAddrStart, 
                        [in] int cpReturnAddrEnd, 
                        [in] int xaWidth, 
                        [in] int yaHeight, 
                        [in] BSTR bstrPrinterName, 
                        [in] BSTR bstrPaperFeed, 
                        [in] VARIANT_BOOL fPrint, 
                        [in, out] VARIANT_BOOL* fCancel);
    };

    [
      uuid(00020A01-0000-0000-C000-000000000046),
      helpcontext(0x00000fa3),
      hidden
    ]
    dispinterface ApplicationEvents4 {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000001), restricted, hidden]
            void Startup();
            [id(0x00000002), helpcontext(0x00061a82)]
            void Quit();
            [id(0x00000003), helpcontext(0x00061a83)]
            void DocumentChange();
            [id(0x00000004), helpcontext(0x00061a84)]
            void DocumentOpen([in] Document* Doc);
            [id(0x00000006), helpcontext(0x00061a85)]
            void DocumentBeforeClose(
                            [in] Document* Doc, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000007), helpcontext(0x00061a86)]
            void DocumentBeforePrint(
                            [in] Document* Doc, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000008), helpcontext(0x00061a87)]
            void DocumentBeforeSave(
                            [in] Document* Doc, 
                            [in] VARIANT_BOOL* SaveAsUI, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000009), helpcontext(0x00061a88)]
            void NewDocument([in] Document* Doc);
            [id(0x0000000a), helpcontext(0x00061a89)]
            void WindowActivate(
                            [in] Document* Doc, 
                            [in] Window* Wn);
            [id(0x0000000b), helpcontext(0x003d090a)]
            void WindowDeactivate(
                            [in] Document* Doc, 
                            [in] Window* Wn);
            [id(0x0000000c), helpcontext(0x003d090b)]
            void WindowSelectionChange([in] Selection* Sel);
            [id(0x0000000d), helpcontext(0x003d090c)]
            void WindowBeforeRightClick(
                            [in] Selection* Sel, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x0000000e), helpcontext(0x003d090d)]
            void WindowBeforeDoubleClick(
                            [in] Selection* Sel, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x0000000f), helpcontext(0x003d090e)]
            void EPostagePropertyDialog([in] Document* Doc);
            [id(0x00000010), helpcontext(0x003d090f)]
            void EPostageInsert([in] Document* Doc);
            [id(0x00000011), helpcontext(0x003d0910)]
            void MailMergeAfterMerge(
                            [in] Document* Doc, 
                            [in] Document* DocResult);
            [id(0x00000012), helpcontext(0x003d0911)]
            void MailMergeAfterRecordMerge([in] Document* Doc);
            [id(0x00000013), helpcontext(0x003d0912)]
            void MailMergeBeforeMerge(
                            [in] Document* Doc, 
                            [in] long StartRecord, 
                            [in] long EndRecord, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000014), helpcontext(0x003d0913)]
            void MailMergeBeforeRecordMerge(
                            [in] Document* Doc, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000015), helpcontext(0x003d0914)]
            void MailMergeDataSourceLoad([in] Document* Doc);
            [id(0x00000016), helpcontext(0x003d0915)]
            void MailMergeDataSourceValidate(
                            [in] Document* Doc, 
                            [in] VARIANT_BOOL* Handled);
            [id(0x00000017), helpcontext(0x003d0916)]
            void MailMergeWizardSendToCustom([in] Document* Doc);
            [id(0x00000018), helpcontext(0x003d0917)]
            void MailMergeWizardStateChange(
                            [in] Document* Doc, 
                            [in] int* FromState, 
                            [in] int* ToState, 
                            [in] VARIANT_BOOL* Handled);
            [id(0x00000019), helpcontext(0x003d0918)]
            void WindowSize(
                            [in] Document* Doc, 
                            [in] Window* Wn);
            [id(0x0000001a), helpcontext(0x003d0919)]
            void XMLSelectionChange(
                            [in] Selection* Sel, 
                            [in] XMLNode* OldXMLNode, 
                            [in] XMLNode* NewXMLNode, 
                            [in] long* Reason);
            [id(0x0000001b), helpcontext(0x003d091a)]
            void XMLValidationError([in] XMLNode* XMLNode);
            [id(0x0000001c), helpcontext(0x003d091b)]
            void DocumentSync(
                            [in] Document* Doc, 
                            [in] MsoSyncEventType SyncEventType);
            [id(0x0000001d), helpcontext(0x003d091c)]
            void EPostageInsertEx(
                            [in] Document* Doc, 
                            [in] int cpDeliveryAddrStart, 
                            [in] int cpDeliveryAddrEnd, 
                            [in] int cpReturnAddrStart, 
                            [in] int cpReturnAddrEnd, 
                            [in] int xaWidth, 
                            [in] int yaHeight, 
                            [in] BSTR bstrPrinterName, 
                            [in] BSTR bstrPaperFeed, 
                            [in] VARIANT_BOOL fPrint, 
                            [in, out] VARIANT_BOOL* fCancel);
    };

    [
      uuid(00020A02-0000-0000-C000-000000000046),
      helpcontext(0x00000fa1),
      hidden
    ]
    dispinterface DocumentEvents2 {
        properties:
        methods:
            [id(0x00000004), helpcontext(0x003d0cec)]
            void New();
            [id(0x00000005), helpcontext(0x003d0ced)]
            void Open();
            [id(0x00000006), helpcontext(0x003d0cee)]
            void Close();
            [id(0x00000007), helpcontext(0x003d0cef)]
            void Sync(MsoSyncEventType SyncEventType);
            [id(0x00000008), helpcontext(0x003d0cf0)]
            void XMLAfterInsert(
                            [in] XMLNode* NewXMLNode, 
                            [in] VARIANT_BOOL InUndoRedo);
            [id(0x00000009), helpcontext(0x003d0cf1)]
            void XMLBeforeDelete(
                            [in] Range* DeletedRange, 
                            [in] XMLNode* OldXMLNode, 
                            [in] VARIANT_BOOL InUndoRedo);
    };

};
