// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: MSO.DLL

[
  uuid(2DF8D04C-5BFA-101B-BDE5-00AA0044DE52),
  version(2.7),
  helpstring("Microsoft Office 15.0 Object Library"),
  helpfile("vbaof11.chm"),
  helpcontext(0x00000001),
  custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, "Microsoft.Office.Core.dll")

]
library Office
{
    // TLib :     // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    interface IAccessible;
    interface _IMsoDispObj;
    interface _IMsoOleAccDispObj;
    interface _CommandBars;
    interface CommandBar;
    interface CommandBarControls;
    interface CommandBarControl;
    interface _CommandBarButton;
    interface CommandBarPopup;
    interface _CommandBarComboBox;
    interface _CommandBarActiveX;
    interface Adjustments;
    interface CalloutFormat;
    interface ColorFormat;
    interface ConnectorFormat;
    interface FillFormat;
    interface FreeformBuilder;
    interface GroupShapes;
    interface LineFormat;
    interface ShapeNode;
    interface ShapeNodes;
    interface PictureFormat;
    interface ShadowFormat;
    interface Script;
    interface Scripts;
    interface Shape;
    interface ShapeRange;
    interface Shapes;
    interface TextEffectFormat;
    interface TextFrame;
    interface ThreeDFormat;
    interface IMsoDispCagNotifySink;
    interface Balloon;
    interface BalloonCheckboxes;
    interface BalloonCheckbox;
    interface BalloonLabels;
    interface BalloonLabel;
    interface AnswerWizardFiles;
    interface AnswerWizard;
    interface Assistant;
    interface DocumentProperty;
    interface DocumentProperties;
    interface IFoundFiles;
    interface IFind;
    interface FoundFiles;
    interface PropertyTest;
    interface PropertyTests;
    interface FileSearch;
    interface COMAddIn;
    interface COMAddIns;
    interface LanguageSettings;
    interface ICommandBarsEvents;
    dispinterface _CommandBarsEvents;
    interface ICommandBarComboBoxEvents;
    dispinterface _CommandBarComboBoxEvents;
    interface ICommandBarButtonEvents;
    dispinterface _CommandBarButtonEvents;
    interface WebPageFont;
    interface WebPageFonts;
    interface HTMLProjectItem;
    interface HTMLProjectItems;
    interface HTMLProject;
    interface MsoDebugOptions;
    interface FileDialogSelectedItems;
    interface FileDialogFilter;
    interface FileDialogFilters;
    interface FileDialog;
    interface SignatureSet;
    interface Signature;
    interface IMsoEnvelopeVB;
    dispinterface IMsoEnvelopeVBEvents;
    interface FileTypes;
    interface SearchFolders;
    interface ScopeFolders;
    interface ScopeFolder;
    interface SearchScope;
    interface SearchScopes;
    interface IMsoDiagram;
    interface DiagramNodes;
    interface DiagramNodeChildren;
    interface DiagramNode;
    interface CanvasShapes;
    interface OfficeDataSourceObject;
    interface ODSOColumn;
    interface ODSOColumns;
    interface ODSOFilter;
    interface ODSOFilters;
    interface NewFile;
    interface WebComponent;
    interface WebComponentWindowExternal;
    interface WebComponentFormat;
    interface ILicWizExternal;
    interface ILicValidator;
    interface ILicAgent;
    interface IMsoEServicesDialog;
    interface WebComponentProperties;
    interface SmartDocument;
    interface SharedWorkspaceMember;
    interface SharedWorkspaceMembers;
    interface SharedWorkspaceTask;
    interface SharedWorkspaceTasks;
    interface SharedWorkspaceFile;
    interface SharedWorkspaceFiles;
    interface SharedWorkspaceFolder;
    interface SharedWorkspaceFolders;
    interface SharedWorkspaceLink;
    interface SharedWorkspaceLinks;
    interface SharedWorkspace;
    interface Sync;
    interface DocumentLibraryVersion;
    interface DocumentLibraryVersions;
    interface UserPermission;
    interface Permission;
    interface MsoDebugOptions_UTRunResult;
    interface MsoDebugOptions_UT;
    interface MsoDebugOptions_UTs;
    interface MsoDebugOptions_UTManager;
    interface MetaProperty;
    interface MetaProperties;
    interface PolicyItem;
    interface ServerPolicy;
    interface DocumentInspector;
    interface DocumentInspectors;
    interface WorkflowTask;
    interface WorkflowTasks;
    interface WorkflowTemplate;
    interface WorkflowTemplates;
    interface IDocumentInspector;
    interface SignatureSetup;
    interface SignatureInfo;
    interface SignatureProvider;
    interface CustomXMLPrefixMapping;
    interface CustomXMLPrefixMappings;
    interface CustomXMLSchema;
    interface _CustomXMLSchemaCollection;
    interface CustomXMLNodes;
    interface CustomXMLNode;
    interface CustomXMLValidationError;
    interface CustomXMLValidationErrors;
    interface _CustomXMLPart;
    interface ICustomXMLPartEvents;
    dispinterface _CustomXMLPartEvents;
    interface _CustomXMLParts;
    interface ICustomXMLPartsEvents;
    dispinterface _CustomXMLPartsEvents;
    interface GradientStop;
    interface GradientStops;
    interface SoftEdgeFormat;
    interface GlowFormat;
    interface ReflectionFormat;
    interface ParagraphFormat2;
    interface Font2;
    interface TextColumn2;
    interface TextRange2;
    interface TextFrame2;
    interface ThemeColor;
    interface ThemeColorScheme;
    interface ThemeFont;
    interface ThemeFonts;
    interface ThemeFontScheme;
    interface ThemeEffectScheme;
    interface OfficeTheme;
    interface _CustomTaskPane;
    interface CustomTaskPaneEvents;
    dispinterface _CustomTaskPaneEvents;
    interface ICTPFactory;
    interface ICustomTaskPaneConsumer;
    interface IRibbonUI;
    interface IRibbonControl;
    interface IRibbonExtensibility;
    interface IAssistance;
    interface IMsoChartData;
    interface IMsoChart;
    interface IMsoCorners;
    interface IMsoLegend;
    interface IMsoBorder;
    interface IMsoWalls;
    interface IMsoFloor;
    interface IMsoPlotArea;
    interface IMsoChartArea;
    interface IMsoSeriesLines;
    interface IMsoLeaderLines;
    interface GridLines;
    interface IMsoUpBars;
    interface IMsoDownBars;
    interface IMsoInterior;
    interface ChartFillFormat;
    interface LegendEntries;
    interface ChartFont;
    interface ChartColorFormat;
    interface LegendEntry;
    interface IMsoLegendKey;
    interface SeriesCollection;
    interface IMsoSeries;
    interface IMsoErrorBars;
    interface IMsoTrendline;
    interface Trendlines;
    interface IMsoDataLabels;
    interface IMsoDataLabel;
    interface Points;
    interface ChartPoint;
    interface Axes;
    interface IMsoAxis;
    interface IMsoDataTable;
    interface IMsoChartTitle;
    interface IMsoAxisTitle;
    interface IMsoDisplayUnitLabel;
    interface IMsoTickLabels;
    interface IMsoHyperlinks;
    interface IMsoDropLines;
    interface IMsoHiLoLines;
    interface IMsoChartGroup;
    interface ChartGroups;
    interface IMsoCharacters;
    interface IMsoChartFormat;
    interface BulletFormat2;
    interface TabStops2;
    interface TabStop2;
    interface Ruler2;
    interface RulerLevels2;
    interface RulerLevel2;
    interface EncryptionProvider;
    interface IBlogExtensibility;
    interface IBlogPictureExtensibility;
    interface IConverterPreferences;
    interface IConverterApplicationPreferences;
    interface IConverterUICallback;
    interface IConverter;
    interface SmartArt;
    interface SmartArtNodes;
    interface SmartArtNode;
    interface SmartArtLayouts;
    interface SmartArtLayout;
    interface SmartArtQuickStyles;
    interface SmartArtQuickStyle;
    interface SmartArtColors;
    interface SmartArtColor;
    interface PickerField;
    interface PickerFields;
    interface PickerProperty;
    interface PickerProperties;
    interface PickerResult;
    interface PickerResults;
    interface PickerDialog;
    interface IMsoContactCard;
    interface EffectParameter;
    interface EffectParameters;
    interface PictureEffect;
    interface PictureEffects;
    interface Crop;
    interface ContactCard;
    interface FullSeriesCollection;
    interface IMsoCategory;
    interface CategoryCollection;

    typedef enum {
        msoLineDashStyleMixed = 0xfffffffe,
        msoLineSolid = 1,
        msoLineSquareDot = 2,
        msoLineRoundDot = 3,
        msoLineDash = 4,
        msoLineDashDot = 5,
        msoLineDashDotDot = 6,
        msoLineLongDash = 7,
        msoLineLongDashDot = 8,
        msoLineLongDashDotDot = 9,
        msoLineSysDash = 10,
        msoLineSysDot = 11,
        msoLineSysDashDot = 12
    } MsoLineDashStyle;

    typedef enum {
        msoLineStyleMixed = 0xfffffffe,
        msoLineSingle = 1,
        msoLineThinThin = 2,
        msoLineThinThick = 3,
        msoLineThickThin = 4,
        msoLineThickBetweenThin = 5
    } MsoLineStyle;

    typedef enum {
        msoArrowheadStyleMixed = 0xfffffffe,
        msoArrowheadNone = 1,
        msoArrowheadTriangle = 2,
        msoArrowheadOpen = 3,
        msoArrowheadStealth = 4,
        msoArrowheadDiamond = 5,
        msoArrowheadOval = 6
    } MsoArrowheadStyle;

    typedef enum {
        msoArrowheadWidthMixed = 0xfffffffe,
        msoArrowheadNarrow = 1,
        msoArrowheadWidthMedium = 2,
        msoArrowheadWide = 3
    } MsoArrowheadWidth;

    typedef enum {
        msoArrowheadLengthMixed = 0xfffffffe,
        msoArrowheadShort = 1,
        msoArrowheadLengthMedium = 2,
        msoArrowheadLong = 3
    } MsoArrowheadLength;

    typedef enum {
        msoFillMixed = 0xfffffffe,
        msoFillSolid = 1,
        msoFillPatterned = 2,
        msoFillGradient = 3,
        msoFillTextured = 4,
        msoFillBackground = 5,
        msoFillPicture = 6
    } MsoFillType;

    typedef enum {
        msoGradientMixed = 0xfffffffe,
        msoGradientHorizontal = 1,
        msoGradientVertical = 2,
        msoGradientDiagonalUp = 3,
        msoGradientDiagonalDown = 4,
        msoGradientFromCorner = 5,
        msoGradientFromTitle = 6,
        msoGradientFromCenter = 7
    } MsoGradientStyle;

    typedef enum {
        msoGradientColorMixed = 0xfffffffe,
        msoGradientOneColor = 1,
        msoGradientTwoColors = 2,
        msoGradientPresetColors = 3,
        msoGradientMultiColor = 4
    } MsoGradientColorType;

    typedef enum {
        msoTextureTypeMixed = 0xfffffffe,
        msoTexturePreset = 1,
        msoTextureUserDefined = 2
    } MsoTextureType;

    typedef enum {
        msoPresetTextureMixed = 0xfffffffe,
        msoTexturePapyrus = 1,
        msoTextureCanvas = 2,
        msoTextureDenim = 3,
        msoTextureWovenMat = 4,
        msoTextureWaterDroplets = 5,
        msoTexturePaperBag = 6,
        msoTextureFishFossil = 7,
        msoTextureSand = 8,
        msoTextureGreenMarble = 9,
        msoTextureWhiteMarble = 10,
        msoTextureBrownMarble = 11,
        msoTextureGranite = 12,
        msoTextureNewsprint = 13,
        msoTextureRecycledPaper = 14,
        msoTextureParchment = 15,
        msoTextureStationery = 16,
        msoTextureBlueTissuePaper = 17,
        msoTexturePinkTissuePaper = 18,
        msoTexturePurpleMesh = 19,
        msoTextureBouquet = 20,
        msoTextureCork = 21,
        msoTextureWalnut = 22,
        msoTextureOak = 23,
        msoTextureMediumWood = 24
    } MsoPresetTexture;

    typedef enum {
        msoPatternMixed = 0xfffffffe,
        msoPattern5Percent = 1,
        msoPattern10Percent = 2,
        msoPattern20Percent = 3,
        msoPattern25Percent = 4,
        msoPattern30Percent = 5,
        msoPattern40Percent = 6,
        msoPattern50Percent = 7,
        msoPattern60Percent = 8,
        msoPattern70Percent = 9,
        msoPattern75Percent = 10,
        msoPattern80Percent = 11,
        msoPattern90Percent = 12,
        msoPatternDarkHorizontal = 13,
        msoPatternDarkVertical = 14,
        msoPatternDarkDownwardDiagonal = 15,
        msoPatternDarkUpwardDiagonal = 16,
        msoPatternSmallCheckerBoard = 17,
        msoPatternTrellis = 18,
        msoPatternLightHorizontal = 19,
        msoPatternLightVertical = 20,
        msoPatternLightDownwardDiagonal = 21,
        msoPatternLightUpwardDiagonal = 22,
        msoPatternSmallGrid = 23,
        msoPatternDottedDiamond = 24,
        msoPatternWideDownwardDiagonal = 25,
        msoPatternWideUpwardDiagonal = 26,
        msoPatternDashedUpwardDiagonal = 27,
        msoPatternDashedDownwardDiagonal = 28,
        msoPatternNarrowVertical = 29,
        msoPatternNarrowHorizontal = 30,
        msoPatternDashedVertical = 31,
        msoPatternDashedHorizontal = 32,
        msoPatternLargeConfetti = 33,
        msoPatternLargeGrid = 34,
        msoPatternHorizontalBrick = 35,
        msoPatternLargeCheckerBoard = 36,
        msoPatternSmallConfetti = 37,
        msoPatternZigZag = 38,
        msoPatternSolidDiamond = 39,
        msoPatternDiagonalBrick = 40,
        msoPatternOutlinedDiamond = 41,
        msoPatternPlaid = 42,
        msoPatternSphere = 43,
        msoPatternWeave = 44,
        msoPatternDottedGrid = 45,
        msoPatternDivot = 46,
        msoPatternShingle = 47,
        msoPatternWave = 48,
        msoPatternHorizontal = 49,
        msoPatternVertical = 50,
        msoPatternCross = 51,
        msoPatternDownwardDiagonal = 52,
        msoPatternUpwardDiagonal = 53,
        msoPatternDiagonalCross = 54
    } MsoPatternType;

    typedef enum {
        msoPresetGradientMixed = 0xfffffffe,
        msoGradientEarlySunset = 1,
        msoGradientLateSunset = 2,
        msoGradientNightfall = 3,
        msoGradientDaybreak = 4,
        msoGradientHorizon = 5,
        msoGradientDesert = 6,
        msoGradientOcean = 7,
        msoGradientCalmWater = 8,
        msoGradientFire = 9,
        msoGradientFog = 10,
        msoGradientMoss = 11,
        msoGradientPeacock = 12,
        msoGradientWheat = 13,
        msoGradientParchment = 14,
        msoGradientMahogany = 15,
        msoGradientRainbow = 16,
        msoGradientRainbowII = 17,
        msoGradientGold = 18,
        msoGradientGoldII = 19,
        msoGradientBrass = 20,
        msoGradientChrome = 21,
        msoGradientChromeII = 22,
        msoGradientSilver = 23,
        msoGradientSapphire = 24
    } MsoPresetGradientType;

    typedef enum {
        msoShadowMixed = 0xfffffffe,
        msoShadow1 = 1,
        msoShadow2 = 2,
        msoShadow3 = 3,
        msoShadow4 = 4,
        msoShadow5 = 5,
        msoShadow6 = 6,
        msoShadow7 = 7,
        msoShadow8 = 8,
        msoShadow9 = 9,
        msoShadow10 = 10,
        msoShadow11 = 11,
        msoShadow12 = 12,
        msoShadow13 = 13,
        msoShadow14 = 14,
        msoShadow15 = 15,
        msoShadow16 = 16,
        msoShadow17 = 17,
        msoShadow18 = 18,
        msoShadow19 = 19,
        msoShadow20 = 20,
        msoShadow21 = 21,
        msoShadow22 = 22,
        msoShadow23 = 23,
        msoShadow24 = 24,
        msoShadow25 = 25,
        msoShadow26 = 26,
        msoShadow27 = 27,
        msoShadow28 = 28,
        msoShadow29 = 29,
        msoShadow30 = 30,
        msoShadow31 = 31,
        msoShadow32 = 32,
        msoShadow33 = 33,
        msoShadow34 = 34,
        msoShadow35 = 35,
        msoShadow36 = 36,
        msoShadow37 = 37,
        msoShadow38 = 38,
        msoShadow39 = 39,
        msoShadow40 = 40,
        msoShadow41 = 41,
        msoShadow42 = 42,
        msoShadow43 = 43
    } MsoShadowType;

    typedef enum {
        msoTextEffectMixed = 0xfffffffe,
        msoTextEffect1 = 0,
        msoTextEffect2 = 1,
        msoTextEffect3 = 2,
        msoTextEffect4 = 3,
        msoTextEffect5 = 4,
        msoTextEffect6 = 5,
        msoTextEffect7 = 6,
        msoTextEffect8 = 7,
        msoTextEffect9 = 8,
        msoTextEffect10 = 9,
        msoTextEffect11 = 10,
        msoTextEffect12 = 11,
        msoTextEffect13 = 12,
        msoTextEffect14 = 13,
        msoTextEffect15 = 14,
        msoTextEffect16 = 15,
        msoTextEffect17 = 16,
        msoTextEffect18 = 17,
        msoTextEffect19 = 18,
        msoTextEffect20 = 19,
        msoTextEffect21 = 20,
        msoTextEffect22 = 21,
        msoTextEffect23 = 22,
        msoTextEffect24 = 23,
        msoTextEffect25 = 24,
        msoTextEffect26 = 25,
        msoTextEffect27 = 26,
        msoTextEffect28 = 27,
        msoTextEffect29 = 28,
        msoTextEffect30 = 29,
        msoTextEffect31 = 30,
        msoTextEffect32 = 31,
        msoTextEffect33 = 32,
        msoTextEffect34 = 33,
        msoTextEffect35 = 34,
        msoTextEffect36 = 35,
        msoTextEffect37 = 36,
        msoTextEffect38 = 37,
        msoTextEffect39 = 38,
        msoTextEffect40 = 39,
        msoTextEffect41 = 40,
        msoTextEffect42 = 41,
        msoTextEffect43 = 42,
        msoTextEffect44 = 43,
        msoTextEffect45 = 44,
        msoTextEffect46 = 45,
        msoTextEffect47 = 46,
        msoTextEffect48 = 47,
        msoTextEffect49 = 48,
        msoTextEffect50 = 49
    } MsoPresetTextEffect;

    typedef enum {
        msoTextEffectShapeMixed = 0xfffffffe,
        msoTextEffectShapePlainText = 1,
        msoTextEffectShapeStop = 2,
        msoTextEffectShapeTriangleUp = 3,
        msoTextEffectShapeTriangleDown = 4,
        msoTextEffectShapeChevronUp = 5,
        msoTextEffectShapeChevronDown = 6,
        msoTextEffectShapeRingInside = 7,
        msoTextEffectShapeRingOutside = 8,
        msoTextEffectShapeArchUpCurve = 9,
        msoTextEffectShapeArchDownCurve = 10,
        msoTextEffectShapeCircleCurve = 11,
        msoTextEffectShapeButtonCurve = 12,
        msoTextEffectShapeArchUpPour = 13,
        msoTextEffectShapeArchDownPour = 14,
        msoTextEffectShapeCirclePour = 15,
        msoTextEffectShapeButtonPour = 16,
        msoTextEffectShapeCurveUp = 17,
        msoTextEffectShapeCurveDown = 18,
        msoTextEffectShapeCanUp = 19,
        msoTextEffectShapeCanDown = 20,
        msoTextEffectShapeWave1 = 21,
        msoTextEffectShapeWave2 = 22,
        msoTextEffectShapeDoubleWave1 = 23,
        msoTextEffectShapeDoubleWave2 = 24,
        msoTextEffectShapeInflate = 25,
        msoTextEffectShapeDeflate = 26,
        msoTextEffectShapeInflateBottom = 27,
        msoTextEffectShapeDeflateBottom = 28,
        msoTextEffectShapeInflateTop = 29,
        msoTextEffectShapeDeflateTop = 30,
        msoTextEffectShapeDeflateInflate = 31,
        msoTextEffectShapeDeflateInflateDeflate = 32,
        msoTextEffectShapeFadeRight = 33,
        msoTextEffectShapeFadeLeft = 34,
        msoTextEffectShapeFadeUp = 35,
        msoTextEffectShapeFadeDown = 36,
        msoTextEffectShapeSlantUp = 37,
        msoTextEffectShapeSlantDown = 38,
        msoTextEffectShapeCascadeUp = 39,
        msoTextEffectShapeCascadeDown = 40
    } MsoPresetTextEffectShape;

    typedef enum {
        msoTextEffectAlignmentMixed = 0xfffffffe,
        msoTextEffectAlignmentLeft = 1,
        msoTextEffectAlignmentCentered = 2,
        msoTextEffectAlignmentRight = 3,
        msoTextEffectAlignmentLetterJustify = 4,
        msoTextEffectAlignmentWordJustify = 5,
        msoTextEffectAlignmentStretchJustify = 6
    } MsoTextEffectAlignment;

    typedef enum {
        msoPresetLightingDirectionMixed = 0xfffffffe,
        msoLightingTopLeft = 1,
        msoLightingTop = 2,
        msoLightingTopRight = 3,
        msoLightingLeft = 4,
        msoLightingNone = 5,
        msoLightingRight = 6,
        msoLightingBottomLeft = 7,
        msoLightingBottom = 8,
        msoLightingBottomRight = 9
    } MsoPresetLightingDirection;

    typedef enum {
        msoPresetLightingSoftnessMixed = 0xfffffffe,
        msoLightingDim = 1,
        msoLightingNormal = 2,
        msoLightingBright = 3
    } MsoPresetLightingSoftness;

    typedef enum {
        msoPresetMaterialMixed = 0xfffffffe,
        msoMaterialMatte = 1,
        msoMaterialPlastic = 2,
        msoMaterialMetal = 3,
        msoMaterialWireFrame = 4,
        msoMaterialMatte2 = 5,
        msoMaterialPlastic2 = 6,
        msoMaterialMetal2 = 7,
        msoMaterialWarmMatte = 8,
        msoMaterialTranslucentPowder = 9,
        msoMaterialPowder = 10,
        msoMaterialDarkEdge = 11,
        msoMaterialSoftEdge = 12,
        msoMaterialClear = 13,
        msoMaterialFlat = 14,
        msoMaterialSoftMetal = 15
    } MsoPresetMaterial;

    typedef enum {
        msoPresetExtrusionDirectionMixed = 0xfffffffe,
        msoExtrusionBottomRight = 1,
        msoExtrusionBottom = 2,
        msoExtrusionBottomLeft = 3,
        msoExtrusionRight = 4,
        msoExtrusionNone = 5,
        msoExtrusionLeft = 6,
        msoExtrusionTopRight = 7,
        msoExtrusionTop = 8,
        msoExtrusionTopLeft = 9
    } MsoPresetExtrusionDirection;

    typedef enum {
        msoPresetThreeDFormatMixed = 0xfffffffe,
        msoThreeD1 = 1,
        msoThreeD2 = 2,
        msoThreeD3 = 3,
        msoThreeD4 = 4,
        msoThreeD5 = 5,
        msoThreeD6 = 6,
        msoThreeD7 = 7,
        msoThreeD8 = 8,
        msoThreeD9 = 9,
        msoThreeD10 = 10,
        msoThreeD11 = 11,
        msoThreeD12 = 12,
        msoThreeD13 = 13,
        msoThreeD14 = 14,
        msoThreeD15 = 15,
        msoThreeD16 = 16,
        msoThreeD17 = 17,
        msoThreeD18 = 18,
        msoThreeD19 = 19,
        msoThreeD20 = 20
    } MsoPresetThreeDFormat;

    typedef enum {
        msoExtrusionColorTypeMixed = 0xfffffffe,
        msoExtrusionColorAutomatic = 1,
        msoExtrusionColorCustom = 2
    } MsoExtrusionColorType;

    typedef enum {
        msoAlignLefts = 0,
        msoAlignCenters = 1,
        msoAlignRights = 2,
        msoAlignTops = 3,
        msoAlignMiddles = 4,
        msoAlignBottoms = 5
    } MsoAlignCmd;

    typedef enum {
        msoDistributeHorizontally = 0,
        msoDistributeVertically = 1
    } MsoDistributeCmd;

    typedef enum {
        msoConnectorTypeMixed = 0xfffffffe,
        msoConnectorStraight = 1,
        msoConnectorElbow = 2,
        msoConnectorCurve = 3
    } MsoConnectorType;

    typedef enum {
        msoHorizontalAnchorMixed = 0xfffffffe,
        msoAnchorNone = 1,
        msoAnchorCenter = 2
    } MsoHorizontalAnchor;

    typedef enum {
        msoVerticalAnchorMixed = 0xfffffffe,
        msoAnchorTop = 1,
        msoAnchorTopBaseline = 2,
        msoAnchorMiddle = 3,
        msoAnchorBottom = 4,
        msoAnchorBottomBaseLine = 5
    } MsoVerticalAnchor;

    typedef enum {
        msoOrientationMixed = 0xfffffffe,
        msoOrientationHorizontal = 1,
        msoOrientationVertical = 2
    } MsoOrientation;

    typedef enum {
        msoBringToFront = 0,
        msoSendToBack = 1,
        msoBringForward = 2,
        msoSendBackward = 3,
        msoBringInFrontOfText = 4,
        msoSendBehindText = 5
    } MsoZOrderCmd;

    typedef enum {
        msoSegmentLine = 0,
        msoSegmentCurve = 1
    } MsoSegmentType;

    typedef enum {
        msoEditingAuto = 0,
        msoEditingCorner = 1,
        msoEditingSmooth = 2,
        msoEditingSymmetric = 3
    } MsoEditingType;

    typedef enum {
        msoShapeMixed = 0xfffffffe,
        msoShapeRectangle = 1,
        msoShapeParallelogram = 2,
        msoShapeTrapezoid = 3,
        msoShapeDiamond = 4,
        msoShapeRoundedRectangle = 5,
        msoShapeOctagon = 6,
        msoShapeIsoscelesTriangle = 7,
        msoShapeRightTriangle = 8,
        msoShapeOval = 9,
        msoShapeHexagon = 10,
        msoShapeCross = 11,
        msoShapeRegularPentagon = 12,
        msoShapeCan = 13,
        msoShapeCube = 14,
        msoShapeBevel = 15,
        msoShapeFoldedCorner = 16,
        msoShapeSmileyFace = 17,
        msoShapeDonut = 18,
        msoShapeNoSymbol = 19,
        msoShapeBlockArc = 20,
        msoShapeHeart = 21,
        msoShapeLightningBolt = 22,
        msoShapeSun = 23,
        msoShapeMoon = 24,
        msoShapeArc = 25,
        msoShapeDoubleBracket = 26,
        msoShapeDoubleBrace = 27,
        msoShapePlaque = 28,
        msoShapeLeftBracket = 29,
        msoShapeRightBracket = 30,
        msoShapeLeftBrace = 31,
        msoShapeRightBrace = 32,
        msoShapeRightArrow = 33,
        msoShapeLeftArrow = 34,
        msoShapeUpArrow = 35,
        msoShapeDownArrow = 36,
        msoShapeLeftRightArrow = 37,
        msoShapeUpDownArrow = 38,
        msoShapeQuadArrow = 39,
        msoShapeLeftRightUpArrow = 40,
        msoShapeBentArrow = 41,
        msoShapeUTurnArrow = 42,
        msoShapeLeftUpArrow = 43,
        msoShapeBentUpArrow = 44,
        msoShapeCurvedRightArrow = 45,
        msoShapeCurvedLeftArrow = 46,
        msoShapeCurvedUpArrow = 47,
        msoShapeCurvedDownArrow = 48,
        msoShapeStripedRightArrow = 49,
        msoShapeNotchedRightArrow = 50,
        msoShapePentagon = 51,
        msoShapeChevron = 52,
        msoShapeRightArrowCallout = 53,
        msoShapeLeftArrowCallout = 54,
        msoShapeUpArrowCallout = 55,
        msoShapeDownArrowCallout = 56,
        msoShapeLeftRightArrowCallout = 57,
        msoShapeUpDownArrowCallout = 58,
        msoShapeQuadArrowCallout = 59,
        msoShapeCircularArrow = 60,
        msoShapeFlowchartProcess = 61,
        msoShapeFlowchartAlternateProcess = 62,
        msoShapeFlowchartDecision = 63,
        msoShapeFlowchartData = 64,
        msoShapeFlowchartPredefinedProcess = 65,
        msoShapeFlowchartInternalStorage = 66,
        msoShapeFlowchartDocument = 67,
        msoShapeFlowchartMultidocument = 68,
        msoShapeFlowchartTerminator = 69,
        msoShapeFlowchartPreparation = 70,
        msoShapeFlowchartManualInput = 71,
        msoShapeFlowchartManualOperation = 72,
        msoShapeFlowchartConnector = 73,
        msoShapeFlowchartOffpageConnector = 74,
        msoShapeFlowchartCard = 75,
        msoShapeFlowchartPunchedTape = 76,
        msoShapeFlowchartSummingJunction = 77,
        msoShapeFlowchartOr = 78,
        msoShapeFlowchartCollate = 79,
        msoShapeFlowchartSort = 80,
        msoShapeFlowchartExtract = 81,
        msoShapeFlowchartMerge = 82,
        msoShapeFlowchartStoredData = 83,
        msoShapeFlowchartDelay = 84,
        msoShapeFlowchartSequentialAccessStorage = 85,
        msoShapeFlowchartMagneticDisk = 86,
        msoShapeFlowchartDirectAccessStorage = 87,
        msoShapeFlowchartDisplay = 88,
        msoShapeExplosion1 = 89,
        msoShapeExplosion2 = 90,
        msoShape4pointStar = 91,
        msoShape5pointStar = 92,
        msoShape8pointStar = 93,
        msoShape16pointStar = 94,
        msoShape24pointStar = 95,
        msoShape32pointStar = 96,
        msoShapeUpRibbon = 97,
        msoShapeDownRibbon = 98,
        msoShapeCurvedUpRibbon = 99,
        msoShapeCurvedDownRibbon = 100,
        msoShapeVerticalScroll = 101,
        msoShapeHorizontalScroll = 102,
        msoShapeWave = 103,
        msoShapeDoubleWave = 104,
        msoShapeRectangularCallout = 105,
        msoShapeRoundedRectangularCallout = 106,
        msoShapeOvalCallout = 107,
        msoShapeCloudCallout = 108,
        msoShapeLineCallout1 = 109,
        msoShapeLineCallout2 = 110,
        msoShapeLineCallout3 = 111,
        msoShapeLineCallout4 = 112,
        msoShapeLineCallout1AccentBar = 113,
        msoShapeLineCallout2AccentBar = 114,
        msoShapeLineCallout3AccentBar = 115,
        msoShapeLineCallout4AccentBar = 116,
        msoShapeLineCallout1NoBorder = 117,
        msoShapeLineCallout2NoBorder = 118,
        msoShapeLineCallout3NoBorder = 119,
        msoShapeLineCallout4NoBorder = 120,
        msoShapeLineCallout1BorderandAccentBar = 121,
        msoShapeLineCallout2BorderandAccentBar = 122,
        msoShapeLineCallout3BorderandAccentBar = 123,
        msoShapeLineCallout4BorderandAccentBar = 124,
        msoShapeActionButtonCustom = 125,
        msoShapeActionButtonHome = 126,
        msoShapeActionButtonHelp = 127,
        msoShapeActionButtonInformation = 128,
        msoShapeActionButtonBackorPrevious = 129,
        msoShapeActionButtonForwardorNext = 130,
        msoShapeActionButtonBeginning = 131,
        msoShapeActionButtonEnd = 132,
        msoShapeActionButtonReturn = 133,
        msoShapeActionButtonDocument = 134,
        msoShapeActionButtonSound = 135,
        msoShapeActionButtonMovie = 136,
        msoShapeBalloon = 137,
        msoShapeNotPrimitive = 138,
        msoShapeFlowchartOfflineStorage = 139,
        msoShapeLeftRightRibbon = 140,
        msoShapeDiagonalStripe = 141,
        msoShapePie = 142,
        msoShapeNonIsoscelesTrapezoid = 143,
        msoShapeDecagon = 144,
        msoShapeHeptagon = 145,
        msoShapeDodecagon = 146,
        msoShape6pointStar = 147,
        msoShape7pointStar = 148,
        msoShape10pointStar = 149,
        msoShape12pointStar = 150,
        msoShapeRound1Rectangle = 151,
        msoShapeRound2SameRectangle = 152,
        msoShapeRound2DiagRectangle = 153,
        msoShapeSnipRoundRectangle = 154,
        msoShapeSnip1Rectangle = 155,
        msoShapeSnip2SameRectangle = 156,
        msoShapeSnip2DiagRectangle = 157,
        msoShapeFrame = 158,
        msoShapeHalfFrame = 159,
        msoShapeTear = 160,
        msoShapeChord = 161,
        msoShapeCorner = 162,
        msoShapeMathPlus = 163,
        msoShapeMathMinus = 164,
        msoShapeMathMultiply = 165,
        msoShapeMathDivide = 166,
        msoShapeMathEqual = 167,
        msoShapeMathNotEqual = 168,
        msoShapeCornerTabs = 169,
        msoShapeSquareTabs = 170,
        msoShapePlaqueTabs = 171,
        msoShapeGear6 = 172,
        msoShapeGear9 = 173,
        msoShapeFunnel = 174,
        msoShapePieWedge = 175,
        msoShapeLeftCircularArrow = 176,
        msoShapeLeftRightCircularArrow = 177,
        msoShapeSwooshArrow = 178,
        msoShapeCloud = 179,
        msoShapeChartX = 180,
        msoShapeChartStar = 181,
        msoShapeChartPlus = 182,
        msoShapeLineInverse = 183
    } MsoAutoShapeType;

    typedef enum {
        msoShapeTypeMixed = 0xfffffffe,
        msoAutoShape = 1,
        msoCallout = 2,
        msoChart = 3,
        msoComment = 4,
        msoFreeform = 5,
        msoGroup = 6,
        msoEmbeddedOLEObject = 7,
        msoFormControl = 8,
        msoLine = 9,
        msoLinkedOLEObject = 10,
        msoLinkedPicture = 11,
        msoOLEControlObject = 12,
        msoPicture = 13,
        msoPlaceholder = 14,
        msoTextEffect = 15,
        msoMedia = 16,
        msoTextBox = 17,
        msoScriptAnchor = 18,
        msoTable = 19,
        msoCanvas = 20,
        msoDiagram = 21,
        msoInk = 22,
        msoInkComment = 23,
        msoSmartArt = 24,
        msoSlicer = 25,
        msoWebVideo = 26
    } MsoShapeType;

    typedef enum {
        msoFlipHorizontal = 0,
        msoFlipVertical = 1
    } MsoFlipCmd;

    typedef enum {
        msoTrue = 0xffffffff,
        msoFalse = 0,
        msoCTrue = 1,
        msoTriStateToggle = 0xfffffffd,
        msoTriStateMixed = 0xfffffffe
    } MsoTriState;

    typedef enum {
        msoColorTypeMixed = 0xfffffffe,
        msoColorTypeRGB = 1,
        msoColorTypeScheme = 2,
        msoColorTypeCMYK = 3,
        msoColorTypeCMS = 4,
        msoColorTypeInk = 5
    } MsoColorType;

    typedef enum {
        msoPictureMixed = 0xfffffffe,
        msoPictureAutomatic = 1,
        msoPictureGrayscale = 2,
        msoPictureBlackAndWhite = 3,
        msoPictureWatermark = 4
    } MsoPictureColorType;

    typedef enum {
        msoCalloutAngleMixed = 0xfffffffe,
        msoCalloutAngleAutomatic = 1,
        msoCalloutAngle30 = 2,
        msoCalloutAngle45 = 3,
        msoCalloutAngle60 = 4,
        msoCalloutAngle90 = 5
    } MsoCalloutAngleType;

    typedef enum {
        msoCalloutDropMixed = 0xfffffffe,
        msoCalloutDropCustom = 1,
        msoCalloutDropTop = 2,
        msoCalloutDropCenter = 3,
        msoCalloutDropBottom = 4
    } MsoCalloutDropType;

    typedef enum {
        msoCalloutMixed = 0xfffffffe,
        msoCalloutOne = 1,
        msoCalloutTwo = 2,
        msoCalloutThree = 3,
        msoCalloutFour = 4
    } MsoCalloutType;

    typedef enum {
        msoBlackWhiteMixed = 0xfffffffe,
        msoBlackWhiteAutomatic = 1,
        msoBlackWhiteGrayScale = 2,
        msoBlackWhiteLightGrayScale = 3,
        msoBlackWhiteInverseGrayScale = 4,
        msoBlackWhiteGrayOutline = 5,
        msoBlackWhiteBlackTextAndLine = 6,
        msoBlackWhiteHighContrast = 7,
        msoBlackWhiteBlack = 8,
        msoBlackWhiteWhite = 9,
        msoBlackWhiteDontShow = 10
    } MsoBlackWhiteMode;

    typedef enum {
        msoIntegerMixed = 32768,
        msoSingleMixed = 0x80000000
    } MsoMixedType;

    typedef enum {
        msoTextOrientationMixed = 0xfffffffe,
        msoTextOrientationHorizontal = 1,
        msoTextOrientationUpward = 2,
        msoTextOrientationDownward = 3,
        msoTextOrientationVerticalFarEast = 4,
        msoTextOrientationVertical = 5,
        msoTextOrientationHorizontalRotatedFarEast = 6
    } MsoTextOrientation;

    typedef enum {
        msoScaleFromTopLeft = 0,
        msoScaleFromMiddle = 1,
        msoScaleFromBottomRight = 2
    } MsoScaleFrom;

    typedef [public]
    long MsoRGBType;

    typedef enum {
        msoBarLeft = 0,
        msoBarTop = 1,
        msoBarRight = 2,
        msoBarBottom = 3,
        msoBarFloating = 4,
        msoBarPopup = 5,
        msoBarMenuBar = 6
    } MsoBarPosition;

    typedef enum {
        msoBarNoProtection = 0,
        msoBarNoCustomize = 1,
        msoBarNoResize = 2,
        msoBarNoMove = 4,
        msoBarNoChangeVisible = 8,
        msoBarNoChangeDock = 16,
        msoBarNoVerticalDock = 32,
        msoBarNoHorizontalDock = 64
    } MsoBarProtection;

    typedef enum {
        msoBarTypeNormal = 0,
        msoBarTypeMenuBar = 1,
        msoBarTypePopup = 2
    } MsoBarType;

    typedef enum {
        msoControlCustom = 0,
        msoControlButton = 1,
        msoControlEdit = 2,
        msoControlDropdown = 3,
        msoControlComboBox = 4,
        msoControlButtonDropdown = 5,
        msoControlSplitDropdown = 6,
        msoControlOCXDropdown = 7,
        msoControlGenericDropdown = 8,
        msoControlGraphicDropdown = 9,
        msoControlPopup = 10,
        msoControlGraphicPopup = 11,
        msoControlButtonPopup = 12,
        msoControlSplitButtonPopup = 13,
        msoControlSplitButtonMRUPopup = 14,
        msoControlLabel = 15,
        msoControlExpandingGrid = 16,
        msoControlSplitExpandingGrid = 17,
        msoControlGrid = 18,
        msoControlGauge = 19,
        msoControlGraphicCombo = 20,
        msoControlPane = 21,
        msoControlActiveX = 22,
        msoControlSpinner = 23,
        msoControlLabelEx = 24,
        msoControlWorkPane = 25,
        msoControlAutoCompleteCombo = 26
    } MsoControlType;

    typedef enum {
        msoButtonUp = 0,
        msoButtonDown = 0xffffffff,
        msoButtonMixed = 2
    } MsoButtonState;

    typedef enum {
        msoControlOLEUsageNeither = 0,
        msoControlOLEUsageServer = 1,
        msoControlOLEUsageClient = 2,
        msoControlOLEUsageBoth = 3
    } MsoControlOLEUsage;

    typedef enum {
        msoButtonWrapText = 4,
        msoButtonTextBelow = 8
    } MsoButtonStyleHidden;

    typedef enum {
        msoButtonAutomatic = 0,
        msoButtonIcon = 1,
        msoButtonCaption = 2,
        msoButtonIconAndCaption = 3,
        msoButtonIconAndWrapCaption = 7,
        msoButtonIconAndCaptionBelow = 11,
        msoButtonWrapCaption = 14,
        msoButtonIconAndWrapCaptionBelow = 15
    } MsoButtonStyle;

    typedef enum {
        msoComboNormal = 0,
        msoComboLabel = 1
    } MsoComboStyle;

    typedef enum {
        msoOLEMenuGroupNone = 0xffffffff,
        msoOLEMenuGroupFile = 0,
        msoOLEMenuGroupEdit = 1,
        msoOLEMenuGroupContainer = 2,
        msoOLEMenuGroupObject = 3,
        msoOLEMenuGroupWindow = 4,
        msoOLEMenuGroupHelp = 5
    } MsoOLEMenuGroup;

    typedef enum {
        msoMenuAnimationNone = 0,
        msoMenuAnimationRandom = 1,
        msoMenuAnimationUnfold = 2,
        msoMenuAnimationSlide = 3
    } MsoMenuAnimation;

    typedef enum {
        msoBarRowFirst = 0,
        msoBarRowLast = 0xffffffff
    } MsoBarRow;

    typedef enum {
        msoCommandBarButtonHyperlinkNone = 0,
        msoCommandBarButtonHyperlinkOpen = 1,
        msoCommandBarButtonHyperlinkInsertPicture = 2
    } MsoCommandBarButtonHyperlinkType;

    typedef enum {
        msoHyperlinkRange = 0,
        msoHyperlinkShape = 1,
        msoHyperlinkInlineShape = 2
    } MsoHyperlinkType;

    typedef enum {
        msoMethodGet = 0,
        msoMethodPost = 1
    } MsoExtraInfoMethod;

    typedef enum {
        msoAnimationIdle = 1,
        msoAnimationGreeting = 2,
        msoAnimationGoodbye = 3,
        msoAnimationBeginSpeaking = 4,
        msoAnimationRestPose = 5,
        msoAnimationCharacterSuccessMajor = 6,
        msoAnimationGetAttentionMajor = 11,
        msoAnimationGetAttentionMinor = 12,
        msoAnimationSearching = 13,
        msoAnimationPrinting = 18,
        msoAnimationGestureRight = 19,
        msoAnimationWritingNotingSomething = 22,
        msoAnimationWorkingAtSomething = 23,
        msoAnimationThinking = 24,
        msoAnimationSendingMail = 25,
        msoAnimationListensToComputer = 26,
        msoAnimationDisappear = 31,
        msoAnimationAppear = 32,
        msoAnimationGetArtsy = 100,
        msoAnimationGetTechy = 101,
        msoAnimationGetWizardy = 102,
        msoAnimationCheckingSomething = 103,
        msoAnimationLookDown = 104,
        msoAnimationLookDownLeft = 105,
        msoAnimationLookDownRight = 106,
        msoAnimationLookLeft = 107,
        msoAnimationLookRight = 108,
        msoAnimationLookUp = 109,
        msoAnimationLookUpLeft = 110,
        msoAnimationLookUpRight = 111,
        msoAnimationSaving = 112,
        msoAnimationGestureDown = 113,
        msoAnimationGestureLeft = 114,
        msoAnimationGestureUp = 115,
        msoAnimationEmptyTrash = 116
    } MsoAnimationType;

    typedef enum {
        msoButtonSetNone = 0,
        msoButtonSetOK = 1,
        msoButtonSetCancel = 2,
        msoButtonSetOkCancel = 3,
        msoButtonSetYesNo = 4,
        msoButtonSetYesNoCancel = 5,
        msoButtonSetBackClose = 6,
        msoButtonSetNextClose = 7,
        msoButtonSetBackNextClose = 8,
        msoButtonSetRetryCancel = 9,
        msoButtonSetAbortRetryIgnore = 10,
        msoButtonSetSearchClose = 11,
        msoButtonSetBackNextSnooze = 12,
        msoButtonSetTipsOptionsClose = 13,
        msoButtonSetYesAllNoCancel = 14
    } MsoButtonSetType;

    typedef enum {
        msoIconNone = 0,
        msoIconAlert = 2,
        msoIconTip = 3,
        msoIconAlertInfo = 4,
        msoIconAlertWarning = 5,
        msoIconAlertQuery = 6,
        msoIconAlertCritical = 7
    } MsoIconType;

    typedef enum {
        msoBalloonTypeButtons = 0,
        msoBalloonTypeBullets = 1,
        msoBalloonTypeNumbers = 2
    } MsoBalloonType;

    typedef enum {
        msoModeModal = 0,
        msoModeAutoDown = 1,
        msoModeModeless = 2
    } MsoModeType;

    typedef enum {
        msoBalloonErrorNone = 0,
        msoBalloonErrorOther = 1,
        msoBalloonErrorTooBig = 2,
        msoBalloonErrorOutOfMemory = 3,
        msoBalloonErrorBadPictureRef = 4,
        msoBalloonErrorBadReference = 5,
        msoBalloonErrorButtonlessModal = 6,
        msoBalloonErrorButtonModeless = 7,
        msoBalloonErrorBadCharacter = 8,
        msoBalloonErrorCOMFailure = 9,
        msoBalloonErrorCharNotTopmostForModal = 10,
        msoBalloonErrorTooManyControls = 11
    } MsoBalloonErrorType;

    typedef enum {
        msoWizardActInactive = 0,
        msoWizardActActive = 1,
        msoWizardActSuspend = 2,
        msoWizardActResume = 3
    } MsoWizardActType;

    typedef enum {
        msoWizardMsgLocalStateOn = 1,
        msoWizardMsgLocalStateOff = 2,
        msoWizardMsgShowHelp = 3,
        msoWizardMsgSuspending = 4,
        msoWizardMsgResuming = 5
    } MsoWizardMsgType;

    typedef enum {
        msoBalloonButtonYesToAll = 0xfffffff1,
        msoBalloonButtonOptions = 0xfffffff2,
        msoBalloonButtonTips = 0xfffffff3,
        msoBalloonButtonClose = 0xfffffff4,
        msoBalloonButtonSnooze = 0xfffffff5,
        msoBalloonButtonSearch = 0xfffffff6,
        msoBalloonButtonIgnore = 0xfffffff7,
        msoBalloonButtonAbort = 0xfffffff8,
        msoBalloonButtonRetry = 0xfffffff9,
        msoBalloonButtonNext = 0xfffffffa,
        msoBalloonButtonBack = 0xfffffffb,
        msoBalloonButtonNo = 0xfffffffc,
        msoBalloonButtonYes = 0xfffffffd,
        msoBalloonButtonCancel = 0xfffffffe,
        msoBalloonButtonOK = 0xffffffff,
        msoBalloonButtonNull = 0
    } MsoBalloonButtonType;

    typedef enum {
        offPropertyTypeNumber = 1,
        offPropertyTypeBoolean = 2,
        offPropertyTypeDate = 3,
        offPropertyTypeString = 4,
        offPropertyTypeFloat = 5
    } DocProperties;

    typedef enum {
        msoPropertyTypeNumber = 1,
        msoPropertyTypeBoolean = 2,
        msoPropertyTypeDate = 3,
        msoPropertyTypeString = 4,
        msoPropertyTypeFloat = 5
    } MsoDocProperties;

    typedef enum {
        msoLanguageIDInstall = 1,
        msoLanguageIDUI = 2,
        msoLanguageIDHelp = 3,
        msoLanguageIDExeMode = 4,
        msoLanguageIDUIPrevious = 5
    } MsoAppLanguageID;

    typedef enum {
        MsoFarEastLineBreakLanguageJapanese = 1041,
        MsoFarEastLineBreakLanguageKorean = 1042,
        MsoFarEastLineBreakLanguageSimplifiedChinese = 2052,
        MsoFarEastLineBreakLanguageTraditionalChinese = 1028
    } MsoFarEastLineBreakLanguageID;

    typedef enum {
        msoFeatureInstallNone = 0,
        msoFeatureInstallOnDemand = 1,
        msoFeatureInstallOnDemandWithUI = 2
    } MsoFeatureInstall;

	typedef enum {
        msoPresetCameraMixed = 0xfffffffe,
        msoCameraLegacyObliqueTopLeft = 1,
        msoCameraLegacyObliqueTop = 2,
        msoCameraLegacyObliqueTopRight = 3,
        msoCameraLegacyObliqueLeft = 4,
        msoCameraLegacyObliqueFront = 5,
        msoCameraLegacyObliqueRight = 6,
        msoCameraLegacyObliqueBottomLeft = 7,
        msoCameraLegacyObliqueBottom = 8,
        msoCameraLegacyObliqueBottomRight = 9,
        msoCameraLegacyPerspectiveTopLeft = 10,
        msoCameraLegacyPerspectiveTop = 11,
        msoCameraLegacyPerspectiveTopRight = 12,
        msoCameraLegacyPerspectiveLeft = 13,
        msoCameraLegacyPerspectiveFront = 14,
        msoCameraLegacyPerspectiveRight = 15,
        msoCameraLegacyPerspectiveBottomLeft = 16,
        msoCameraLegacyPerspectiveBottom = 17,
        msoCameraLegacyPerspectiveBottomRight = 18,
        msoCameraOrthographicFront = 19,
        msoCameraIsometricTopUp = 20,
        msoCameraIsometricTopDown = 21,
        msoCameraIsometricBottomUp = 22,
        msoCameraIsometricBottomDown = 23,
        msoCameraIsometricLeftUp = 24,
        msoCameraIsometricLeftDown = 25,
        msoCameraIsometricRightUp = 26,
        msoCameraIsometricRightDown = 27,
        msoCameraIsometricOffAxis1Left = 28,
        msoCameraIsometricOffAxis1Right = 29,
        msoCameraIsometricOffAxis1Top = 30,
        msoCameraIsometricOffAxis2Left = 31,
        msoCameraIsometricOffAxis2Right = 32,
        msoCameraIsometricOffAxis2Top = 33,
        msoCameraIsometricOffAxis3Left = 34,
        msoCameraIsometricOffAxis3Right = 35,
        msoCameraIsometricOffAxis3Bottom = 36,
        msoCameraIsometricOffAxis4Left = 37,
        msoCameraIsometricOffAxis4Right = 38,
        msoCameraIsometricOffAxis4Bottom = 39,
        msoCameraObliqueTopLeft = 40,
        msoCameraObliqueTop = 41,
        msoCameraObliqueTopRight = 42,
        msoCameraObliqueLeft = 43,
        msoCameraObliqueRight = 44,
        msoCameraObliqueBottomLeft = 45,
        msoCameraObliqueBottom = 46,
        msoCameraObliqueBottomRight = 47,
        msoCameraPerspectiveFront = 48,
        msoCameraPerspectiveLeft = 49,
        msoCameraPerspectiveRight = 50,
        msoCameraPerspectiveAbove = 51,
        msoCameraPerspectiveBelow = 52,
        msoCameraPerspectiveAboveLeftFacing = 53,
        msoCameraPerspectiveAboveRightFacing = 54,
        msoCameraPerspectiveContrastingLeftFacing = 55,
        msoCameraPerspectiveContrastingRightFacing = 56,
        msoCameraPerspectiveHeroicLeftFacing = 57,
        msoCameraPerspectiveHeroicRightFacing = 58,
        msoCameraPerspectiveHeroicExtremeLeftFacing = 59,
        msoCameraPerspectiveHeroicExtremeRightFacing = 60,
        msoCameraPerspectiveRelaxed = 61,
        msoCameraPerspectiveRelaxedModerately = 62
    } MsoPresetCamera;

    typedef enum {
        msoBevelTypeMixed = 0xfffffffe,
        msoBevelNone = 1,
        msoBevelRelaxedInset = 2,
        msoBevelCircle = 3,
        msoBevelSlope = 4,
        msoBevelCross = 5,
        msoBevelAngle = 6,
        msoBevelSoftRound = 7,
        msoBevelConvex = 8,
        msoBevelCoolSlant = 9,
        msoBevelDivot = 10,
        msoBevelRiblet = 11,
        msoBevelHardEdge = 12,
        msoBevelArtDeco = 13
    } MsoBevelType;

    typedef enum {
        msoLightRigMixed = 0xfffffffe,
        msoLightRigLegacyFlat1 = 1,
        msoLightRigLegacyFlat2 = 2,
        msoLightRigLegacyFlat3 = 3,
        msoLightRigLegacyFlat4 = 4,
        msoLightRigLegacyNormal1 = 5,
        msoLightRigLegacyNormal2 = 6,
        msoLightRigLegacyNormal3 = 7,
        msoLightRigLegacyNormal4 = 8,
        msoLightRigLegacyHarsh1 = 9,
        msoLightRigLegacyHarsh2 = 10,
        msoLightRigLegacyHarsh3 = 11,
        msoLightRigLegacyHarsh4 = 12,
        msoLightRigThreePoint = 13,
        msoLightRigBalanced = 14,
        msoLightRigSoft = 15,
        msoLightRigHarsh = 16,
        msoLightRigFlood = 17,
        msoLightRigContrasting = 18,
        msoLightRigMorning = 19,
        msoLightRigSunrise = 20,
        msoLightRigSunset = 21,
        msoLightRigChilly = 22,
        msoLightRigFreezing = 23,
        msoLightRigFlat = 24,
        msoLightRigTwoPoint = 25,
        msoLightRigGlow = 26,
        msoLightRigBrightRoom = 27
    } MsoLightRigType;

    typedef enum {
        msoAlignMixed = 0xfffffffe,
        msoAlignLeft = 1,
        msoAlignCenter = 2,
        msoAlignRight = 3,
        msoAlignJustify = 4,
        msoAlignDistribute = 5,
        msoAlignThaiDistribute = 6,
        msoAlignJustifyLow = 7
    } MsoParagraphAlignment;

    typedef enum {
        msoStrikeMixed = 0xfffffffe,
        msoNoStrike = 0,
        msoSingleStrike = 1,
        msoDoubleStrike = 2
    } MsoTextStrike;

    typedef enum {
        msoCapsMixed = 0xfffffffe,
        msoNoCaps = 0,
        msoSmallCaps = 1,
        msoAllCaps = 2
    } MsoTextCaps;

    typedef enum {
        msoUnderlineMixed = 0xfffffffe,
        msoNoUnderline = 0,
        msoUnderlineWords = 1,
        msoUnderlineSingleLine = 2,
        msoUnderlineDoubleLine = 3,
        msoUnderlineHeavyLine = 4,
        msoUnderlineDottedLine = 5,
        msoUnderlineDottedHeavyLine = 6,
        msoUnderlineDashLine = 7,
        msoUnderlineDashHeavyLine = 8,
        msoUnderlineDashLongLine = 9,
        msoUnderlineDashLongHeavyLine = 10,
        msoUnderlineDotDashLine = 11,
        msoUnderlineDotDashHeavyLine = 12,
        msoUnderlineDotDotDashLine = 13,
        msoUnderlineDotDotDashHeavyLine = 14,
        msoUnderlineWavyLine = 15,
        msoUnderlineWavyHeavyLine = 16,
        msoUnderlineWavyDoubleLine = 17
    } MsoTextUnderlineType;

    typedef enum {
        msoTabAlignMixed = 0xfffffffe,
        msoTabAlignLeft = 0,
        msoTabAlignCenter = 1,
        msoTabAlignRight = 2,
        msoTabAlignDecimal = 3
    } MsoTextTabAlign;

    typedef enum {
        msoCharWrapMixed = 0xfffffffe,
        msoNoCharWrap = 0,
        msoStandardCharWrap = 1,
        msoStrictCharWrap = 2,
        msoCustomCharWrap = 3
    } MsoTextCharWrap;

    typedef enum {
        msoFontAlignMixed = 0xfffffffe,
        msoFontAlignAuto = 0,
        msoFontAlignTop = 1,
        msoFontAlignCenter = 2,
        msoFontAlignBaseline = 3,
        msoFontAlignBottom = 4
    } MsoTextFontAlign;

    typedef enum {
        msoAutoSizeMixed = 0xfffffffe,
        msoAutoSizeNone = 0,
        msoAutoSizeShapeToFitText = 1,
        msoAutoSizeTextToFitShape = 2
    } MsoAutoSize;

    typedef enum {
        msoPathTypeMixed = 0xfffffffe,
        msoPathTypeNone = 0,
        msoPathType1 = 1,
        msoPathType2 = 2,
        msoPathType3 = 3,
        msoPathType4 = 4
    } MsoPathFormat;

    typedef enum {
        msoWarpFormatMixed = 0xfffffffe,
        msoWarpFormat1 = 0,
        msoWarpFormat2 = 1,
        msoWarpFormat3 = 2,
        msoWarpFormat4 = 3,
        msoWarpFormat5 = 4,
        msoWarpFormat6 = 5,
        msoWarpFormat7 = 6,
        msoWarpFormat8 = 7,
        msoWarpFormat9 = 8,
        msoWarpFormat10 = 9,
        msoWarpFormat11 = 10,
        msoWarpFormat12 = 11,
        msoWarpFormat13 = 12,
        msoWarpFormat14 = 13,
        msoWarpFormat15 = 14,
        msoWarpFormat16 = 15,
        msoWarpFormat17 = 16,
        msoWarpFormat18 = 17,
        msoWarpFormat19 = 18,
        msoWarpFormat20 = 19,
        msoWarpFormat21 = 20,
        msoWarpFormat22 = 21,
        msoWarpFormat23 = 22,
        msoWarpFormat24 = 23,
        msoWarpFormat25 = 24,
        msoWarpFormat26 = 25,
        msoWarpFormat27 = 26,
        msoWarpFormat28 = 27,
        msoWarpFormat29 = 28,
        msoWarpFormat30 = 29,
        msoWarpFormat31 = 30,
        msoWarpFormat32 = 31,
        msoWarpFormat33 = 32,
        msoWarpFormat34 = 33,
        msoWarpFormat35 = 34,
        msoWarpFormat36 = 35,
        msoWarpFormat37 = 36
    } MsoWarpFormat;

    typedef enum {
        msoCaseSentence = 1,
        msoCaseLower = 2,
        msoCaseUpper = 3,
        msoCaseTitle = 4,
        msoCaseToggle = 5
    } MsoTextChangeCase;

    typedef enum {
        msoDateTimeFormatMixed = 0xfffffffe,
        msoDateTimeMdyy = 1,
        msoDateTimeddddMMMMddyyyy = 2,
        msoDateTimedMMMMyyyy = 3,
        msoDateTimeMMMMdyyyy = 4,
        msoDateTimedMMMyy = 5,
        msoDateTimeMMMMyy = 6,
        msoDateTimeMMyy = 7,
        msoDateTimeMMddyyHmm = 8,
        msoDateTimeMMddyyhmmAMPM = 9,
        msoDateTimeHmm = 10,
        msoDateTimeHmmss = 11,
        msoDateTimehmmAMPM = 12,
        msoDateTimehmmssAMPM = 13,
        msoDateTimeFigureOut = 14
    } MsoDateTimeFormat;

    typedef enum {
        msoThemeDark1 = 1,
        msoThemeLight1 = 2,
        msoThemeDark2 = 3,
        msoThemeLight2 = 4,
        msoThemeAccent1 = 5,
        msoThemeAccent2 = 6,
        msoThemeAccent3 = 7,
        msoThemeAccent4 = 8,
        msoThemeAccent5 = 9,
        msoThemeAccent6 = 10,
        msoThemeHyperlink = 11,
        msoThemeFollowedHyperlink = 12
    } MsoThemeColorSchemeIndex;

    typedef enum {
        msoThemeColorMixed = 0xfffffffe,
        msoNotThemeColor = 0,
        msoThemeColorDark1 = 1,
        msoThemeColorLight1 = 2,
        msoThemeColorDark2 = 3,
        msoThemeColorLight2 = 4,
        msoThemeColorAccent1 = 5,
        msoThemeColorAccent2 = 6,
        msoThemeColorAccent3 = 7,
        msoThemeColorAccent4 = 8,
        msoThemeColorAccent5 = 9,
        msoThemeColorAccent6 = 10,
        msoThemeColorHyperlink = 11,
        msoThemeColorFollowedHyperlink = 12,
        msoThemeColorText1 = 13,
        msoThemeColorBackground1 = 14,
        msoThemeColorText2 = 15,
        msoThemeColorBackground2 = 16
    } MsoThemeColorIndex;

    typedef enum {
        msoThemeLatin = 1,
        msoThemeComplexScript = 2,
        msoThemeEastAsian = 3
    } MsoFontLanguageIndex;

    typedef enum {
        msoShapeStyleMixed = 0xfffffffe,
        msoShapeStyleNotAPreset = 0,
        msoShapeStylePreset1 = 1,
        msoShapeStylePreset2 = 2,
        msoShapeStylePreset3 = 3,
        msoShapeStylePreset4 = 4,
        msoShapeStylePreset5 = 5,
        msoShapeStylePreset6 = 6,
        msoShapeStylePreset7 = 7,
        msoShapeStylePreset8 = 8,
        msoShapeStylePreset9 = 9,
        msoShapeStylePreset10 = 10,
        msoShapeStylePreset11 = 11,
        msoShapeStylePreset12 = 12,
        msoShapeStylePreset13 = 13,
        msoShapeStylePreset14 = 14,
        msoShapeStylePreset15 = 15,
        msoShapeStylePreset16 = 16,
        msoShapeStylePreset17 = 17,
        msoShapeStylePreset18 = 18,
        msoShapeStylePreset19 = 19,
        msoShapeStylePreset20 = 20,
        msoShapeStylePreset21 = 21,
        msoShapeStylePreset22 = 22,
        msoShapeStylePreset23 = 23,
        msoShapeStylePreset24 = 24,
        msoShapeStylePreset25 = 25,
        msoShapeStylePreset26 = 26,
        msoShapeStylePreset27 = 27,
        msoShapeStylePreset28 = 28,
        msoShapeStylePreset29 = 29,
        msoShapeStylePreset30 = 30,
        msoShapeStylePreset31 = 31,
        msoShapeStylePreset32 = 32,
        msoShapeStylePreset33 = 33,
        msoShapeStylePreset34 = 34,
        msoShapeStylePreset35 = 35,
        msoShapeStylePreset36 = 36,
        msoShapeStylePreset37 = 37,
        msoShapeStylePreset38 = 38,
        msoShapeStylePreset39 = 39,
        msoShapeStylePreset40 = 40,
        msoShapeStylePreset41 = 41,
        msoShapeStylePreset42 = 42,
        msoLineStylePreset1 = 10001,
        msoLineStylePreset2 = 10002,
        msoLineStylePreset3 = 10003,
        msoLineStylePreset4 = 10004,
        msoLineStylePreset5 = 10005,
        msoLineStylePreset6 = 10006,
        msoLineStylePreset7 = 10007,
        msoLineStylePreset8 = 10008,
        msoLineStylePreset9 = 10009,
        msoLineStylePreset10 = 10010,
        msoLineStylePreset11 = 10011,
        msoLineStylePreset12 = 10012,
        msoLineStylePreset13 = 10013,
        msoLineStylePreset14 = 10014,
        msoLineStylePreset15 = 10015,
        msoLineStylePreset16 = 10016,
        msoLineStylePreset17 = 10017,
        msoLineStylePreset18 = 10018,
        msoLineStylePreset19 = 10019,
        msoLineStylePreset20 = 10020,
        msoLineStylePreset21 = 10021
    } MsoShapeStyleIndex;

    typedef enum {
        msoBackgroundStyleMixed = 0xfffffffe,
        msoBackgroundStyleNotAPreset = 0,
        msoBackgroundStylePreset1 = 1,
        msoBackgroundStylePreset2 = 2,
        msoBackgroundStylePreset3 = 3,
        msoBackgroundStylePreset4 = 4,
        msoBackgroundStylePreset5 = 5,
        msoBackgroundStylePreset6 = 6,
        msoBackgroundStylePreset7 = 7,
        msoBackgroundStylePreset8 = 8,
        msoBackgroundStylePreset9 = 9,
        msoBackgroundStylePreset10 = 10,
        msoBackgroundStylePreset11 = 11,
        msoBackgroundStylePreset12 = 12
    } MsoBackgroundStyleIndex;

	typedef enum {
        msoCTPDockPositionLeft = 0,
        msoCTPDockPositionTop = 1,
        msoCTPDockPositionRight = 2,
        msoCTPDockPositionBottom = 3,
        msoCTPDockPositionFloating = 4
    } MsoCTPDockPosition;

    typedef enum {
        msoCTPDockPositionRestrictNone = 0,
        msoCTPDockPositionRestrictNoChange = 1,
        msoCTPDockPositionRestrictNoHorizontal = 2,
        msoCTPDockPositionRestrictNoVertical = 3
    } MsoCTPDockPositionRestrict;

	typedef enum {
        RibbonControlSizeRegular = 0,
        RibbonControlSizeLarge = 1
    } RibbonControlSize;

    
    typedef enum {
        msoTextDirectionMixed = 0xfffffffe,
        msoTextDirectionLeftToRight = 1,
        msoTextDirectionRightToLeft = 2
    } MsoTextDirection;

	
    typedef enum {
        msoShadowStyleMixed = 0xfffffffe,
        msoShadowStyleInnerShadow = 1,
        msoShadowStyleOuterShadow = 2
    } MsoShadowStyle;

	typedef enum {
        xlColumnClustered = 51,
        xlColumnStacked = 52,
        xlColumnStacked100 = 53,
        xl3DColumnClustered = 54,
        xl3DColumnStacked = 55,
        xl3DColumnStacked100 = 56,
        xlBarClustered = 57,
        xlBarStacked = 58,
        xlBarStacked100 = 59,
        xl3DBarClustered = 60,
        xl3DBarStacked = 61,
        xl3DBarStacked100 = 62,
        xlLineStacked = 63,
        xlLineStacked100 = 64,
        xlLineMarkers = 65,
        xlLineMarkersStacked = 66,
        xlLineMarkersStacked100 = 67,
        xlPieOfPie = 68,
        xlPieExploded = 69,
        xl3DPieExploded = 70,
        xlBarOfPie = 71,
        xlXYScatterSmooth = 72,
        xlXYScatterSmoothNoMarkers = 73,
        xlXYScatterLines = 74,
        xlXYScatterLinesNoMarkers = 75,
        xlAreaStacked = 76,
        xlAreaStacked100 = 77,
        xl3DAreaStacked = 78,
        xl3DAreaStacked100 = 79,
        xlDoughnutExploded = 80,
        xlRadarMarkers = 81,
        xlRadarFilled = 82,
        xlSurface = 83,
        xlSurfaceWireframe = 84,
        xlSurfaceTopView = 85,
        xlSurfaceTopViewWireframe = 86,
        xlBubble = 15,
        xlBubble3DEffect = 87,
        xlStockHLC = 88,
        xlStockOHLC = 89,
        xlStockVHLC = 90,
        xlStockVOHLC = 91,
        xlCylinderColClustered = 92,
        xlCylinderColStacked = 93,
        xlCylinderColStacked100 = 94,
        xlCylinderBarClustered = 95,
        xlCylinderBarStacked = 96,
        xlCylinderBarStacked100 = 97,
        xlCylinderCol = 98,
        xlConeColClustered = 99,
        xlConeColStacked = 100,
        xlConeColStacked100 = 101,
        xlConeBarClustered = 102,
        xlConeBarStacked = 103,
        xlConeBarStacked100 = 104,
        xlConeCol = 105,
        xlPyramidColClustered = 106,
        xlPyramidColStacked = 107,
        xlPyramidColStacked100 = 108,
        xlPyramidBarClustered = 109,
        xlPyramidBarStacked = 110,
        xlPyramidBarStacked100 = 111,
        xlPyramidCol = 112,
        xl3DColumn = 0xffffeffc,
        xlLine = 4,
        xl3DLine = 0xffffeffb,
        xl3DPie = 0xffffeffa,
        xlPie = 5,
        xlXYScatter = 0xffffefb7,
        xl3DArea = 0xffffeffe,
        xlArea = 1,
        xlDoughnut = 0xffffefe8,
        xlRadar = 0xffffefc9,
        xlCombo = 0xffffefc8,
        xlComboColumnClusteredLine = 113,
        xlComboColumnClusteredLineSecondaryAxis = 114,
        xlComboAreaStackedColumnClustered = 115,
        xlOtherCombinations = 116,
        xlSuggestedChart = 0xfffffffe
    } XlChartType;

    typedef [uuid(732091CB-0A8D-44BC-B977-418CCB37B552)]
    enum {
        xlSplitByPosition = 1,
        xlSplitByPercentValue = 3,
        xlSplitByCustomSplit = 4,
        xlSplitByValue = 2
    } XlChartSplitType;

    typedef [uuid(8B544093-ECC1-43E3-80EF-25D6FBCC7540)]
    enum {
        xlSizeIsWidth = 2,
        xlSizeIsArea = 1
    } XlSizeRepresents;

	typedef enum {
        msoOrgChartOrientationMixed = 0xfffffffe,
        msoOrgChartOrientationVertical = 1
    } MsoOrgChartOrientation;

    typedef enum {
        msoOrgChartLayoutMixed = 0xfffffffe,
        msoOrgChartLayoutStandard = 1,
        msoOrgChartLayoutBothHanging = 2,
        msoOrgChartLayoutLeftHanging = 3,
        msoOrgChartLayoutRightHanging = 4,
        msoOrgChartLayoutDefault = 5
    } MsoOrgChartLayoutType;

    typedef enum {
        msoBeforeNode = 1,
        msoAfterNode = 2,
        msoBeforeFirstSibling = 3,
        msoAfterLastSibling = 4
    } MsoRelativeNodePosition;

    typedef enum {
        msoDiagramMixed = 0xfffffffe,
        msoDiagramOrgChart = 1,
        msoDiagramCycle = 2,
        msoDiagramRadial = 3,
        msoDiagramPyramid = 4,
        msoDiagramVenn = 5,
        msoDiagramTarget = 6
    } MsoDiagramType;

    typedef enum {
        msoDiagramNode = 1,
        msoDiagramAssistant = 2
    } MsoDiagramNodeType;

    typedef [uuid(7D8D95F5-EFE7-4189-8D68-0B3BCCEA097A)]
    enum {
        xlPrimary = 1,
        xlSecondary = 2
    } XlAxisGroup;

    typedef enum {
        xlAutomatic = 0xffffeff7,
        xlCombination = 0xffffeff1,
        xlCustom = 0xffffefee,
        xlBar = 2,
        xlColumn = 3,
        xl3DBar = 0xffffeffd,
        xl3DSurface = 0xffffeff9,
        xlDefaultAutoFormat = 0xffffffff,
        xlNone = 0xffffefd2,
        xlAbove = 0,
        xlBelow = 1,
        xlBoth = 1,
        xlBottom = 0xffffeff5,
        xlCenter = 0xffffeff4,
        xlChecker = 9,
        xlCircle = 8,
        xlCorner = 2,
        xlCrissCross = 16,
        xlCross = 4,
        xlDiamond = 2,
        xlDistributed = 0xffffefeb,
        xlFill = 5,
        xlFixedValue = 1,
        xlGeneral = 1,
        xlGray16 = 17,
        xlGray25 = 0xffffefe4,
        xlGray50 = 0xffffefe3,
        xlGray75 = 0xffffefe2,
        xlGray8 = 18,
        xlGrid = 15,
        xlHigh = 0xffffefe1,
        xlInside = 2,
        xlJustify = 0xffffefde,
        xlLeft = 0xffffefdd,
        xlLightDown = 13,
        xlLightHorizontal = 11,
        xlLightUp = 14,
        xlLightVertical = 12,
        xlLow = 0xffffefda,
        xlMaximum = 2,
        xlMinimum = 4,
        xlMinusValues = 3,
        xlNextToAxis = 4,
        xlOpaque = 3,
        xlOutside = 3,
        xlPercent = 2,
        xlPlus = 9,
        xlPlusValues = 2,
        xlRight = 0xffffefc8,
        xlScale = 3,
        xlSemiGray75 = 10,
        xlShowLabel = 4,
        xlShowLabelAndPercent = 5,
        xlShowPercent = 3,
        xlShowValue = 2,
        xlSingle = 2,
        xlSolid = 1,
        xlSquare = 1,
        xlStar = 5,
        xlStError = 4,
        xlTop = 0xffffefc0,
        xlTransparent = 2,
        xlTriangle = 3
    } XlConstants;

    typedef enum {
        xlContext = 0xffffec76,
        xlLTR = 0xffffec75,
        xlRTL = 0xffffec74
    } XlReadingOrder;

    typedef enum {
        xlHairline = 1,
        xlMedium = 0xffffefd6,
        xlThick = 4,
        xlThin = 2
    } XlBorderWeight;

    typedef [uuid(04D217CD-1859-4786-B583-07BA2092A552)]
    enum {
        xlLegendPositionBottom = 0xffffeff5,
        xlLegendPositionCorner = 2,
        xlLegendPositionLeft = 0xffffefdd,
        xlLegendPositionRight = 0xffffefc8,
        xlLegendPositionTop = 0xffffefc0,
        xlLegendPositionCustom = 0xffffefbf
    } XlLegendPosition;

    typedef [uuid(9B1665EA-5EA9-4D9B-9B61-D6D1E7C087E2)]
    enum {
        xlUnderlineStyleDouble = 0xffffefe9,
        xlUnderlineStyleDoubleAccounting = 5,
        xlUnderlineStyleNone = 0xffffefd2,
        xlUnderlineStyleSingle = 2,
        xlUnderlineStyleSingleAccounting = 4
    } XlUnderlineStyle;

    typedef [uuid(F6BA0ED9-B530-466E-83D5-325653CC1068)]
    enum {
        xlColorIndexAutomatic = 0xffffeff7,
        xlColorIndexNone = 0xffffefd2
    } XlColorIndex;

    typedef [uuid(7CC8C2D6-8F8A-490B-B6F8-3C410554F9E4)]
    enum {
        xlMarkerStyleAutomatic = 0xffffeff7,
        xlMarkerStyleCircle = 8,
        xlMarkerStyleDash = 0xffffefed,
        xlMarkerStyleDiamond = 2,
        xlMarkerStyleDot = 0xffffefea,
        xlMarkerStyleNone = 0xffffefd2,
        xlMarkerStylePicture = 0xffffefcd,
        xlMarkerStylePlus = 9,
        xlMarkerStyleSquare = 1,
        xlMarkerStyleStar = 5,
        xlMarkerStyleTriangle = 3,
        xlMarkerStyleX = 0xffffefb8
    } XlMarkerStyle;

    typedef enum {
        xlColumns = 2,
        xlRows = 1
    } XlRowCol;

    typedef enum {
        xlDataLabelsShowNone = 0xffffefd2,
        xlDataLabelsShowValue = 2,
        xlDataLabelsShowPercent = 3,
        xlDataLabelsShowLabel = 4,
        xlDataLabelsShowLabelAndPercent = 5,
        xlDataLabelsShowBubbleSizes = 6
    } XlDataLabelsType;

    typedef enum {
        xlErrorBarIncludeBoth = 1,
        xlErrorBarIncludeMinusValues = 3,
        xlErrorBarIncludeNone = 0xffffefd2,
        xlErrorBarIncludePlusValues = 2
    } XlErrorBarInclude;

    typedef enum {
        xlErrorBarTypeCustom = 0xffffefee,
        xlErrorBarTypeFixedValue = 1,
        xlErrorBarTypePercent = 2,
        xlErrorBarTypeStDev = 0xffffefc5,
        xlErrorBarTypeStError = 4
    } XlErrorBarType;

    typedef enum {
        xlChartX = 0xffffefb8,
        xlChartY = 1
    } XlErrorBarDirection;

    typedef enum {
        xlStackScale = 3,
        xlStack = 2,
        xlStretch = 1
    } XlChartPictureType;

    typedef enum {
        xlDataLabel = 0,
        xlChartArea = 2,
        xlSeries = 3,
        xlChartTitle = 4,
        xlWalls = 5,
        xlCorners = 6,
        xlDataTable = 7,
        xlTrendline = 8,
        xlErrorBars = 9,
        xlXErrorBars = 10,
        xlYErrorBars = 11,
        xlLegendEntry = 12,
        xlLegendKey = 13,
        xlShape = 14,
        xlMajorGridlines = 15,
        xlMinorGridlines = 16,
        xlAxisTitle = 17,
        xlUpBars = 18,
        xlPlotArea = 19,
        xlDownBars = 20,
        xlAxis = 21,
        xlSeriesLines = 22,
        xlFloor = 23,
        xlLegend = 24,
        xlHiLoLines = 25,
        xlDropLines = 26,
        xlRadarAxisLabels = 27,
        xlNothing = 28,
        xlLeaderLines = 29,
        xlDisplayUnitLabel = 30,
        xlPivotChartFieldButton = 31,
        xlPivotChartDropZone = 32
    } XlChartItem;

    typedef enum {
        xlBox = 0,
        xlPyramidToPoint = 1,
        xlPyramidToMax = 2,
        xlCylinder = 3,
        xlConeToPoint = 4,
        xlConeToMax = 5
    } XlBarShape;

    typedef enum {
        xlCap = 1,
        xlNoCap = 2
    } XlEndStyleCap;

    typedef enum {
        xlExponential = 5,
        xlLinear = 0xffffefdc,
        xlLogarithmic = 0xffffefdb,
        xlMovingAvg = 6,
        xlPolynomial = 3,
        xlPower = 4
    } XlTrendlineType;

    typedef [uuid(23D8FDAA-ABF3-4735-99B8-F234EA2BE64C)]
    enum {
        xlCategory = 1,
        xlSeriesAxis = 3,
        xlValue = 2
    } XlAxisType;

    typedef [uuid(89FF0BFE-5E70-4183-88C8-5EF4B213451F)]
    enum {
        xlAxisCrossesAutomatic = 0xffffeff7,
        xlAxisCrossesCustom = 0xffffefee,
        xlAxisCrossesMaximum = 2,
        xlAxisCrossesMinimum = 4
    } XlAxisCrosses;

    typedef [uuid(E5EAD0BB-3A16-48F3-BECD-5839F6B552CA)]
    enum {
        xlTickMarkCross = 4,
        xlTickMarkInside = 2,
        xlTickMarkNone = 0xffffefd2,
        xlTickMarkOutside = 3
    } XlTickMark;

    typedef [uuid(6A0D7E5C-F9AD-4927-A850-5638891724B2)]
    enum {
        xlScaleLinear = 0xffffefdc,
        xlScaleLogarithmic = 0xffffefdb
    } XlScaleType;

    typedef [uuid(964562FD-22B1-4E15-9931-C555434E6538)]
    enum {
        xlTickLabelPositionHigh = 0xffffefe1,
        xlTickLabelPositionLow = 0xffffefda,
        xlTickLabelPositionNextToAxis = 4,
        xlTickLabelPositionNone = 0xffffefd2
    } XlTickLabelPosition;

    typedef [uuid(14710A1D-071F-4BFF-B1C2-4BEF5E8B2CEA)]
    enum {
        xlDays = 0,
        xlMonths = 1,
        xlYears = 2
    } XlTimeUnit;

    typedef [uuid(78F07E6C-4BC5-41B8-8FE1-F1643184BA3F)]
    enum {
        xlCategoryScale = 2,
        xlTimeScale = 3,
        xlAutomaticScale = 0xffffeff7
    } XlCategoryType;

    typedef [uuid(BF78D790-8DCF-4CF1-9CD4-4FCEB78EBE14)]
    enum {
        xlHundreds = 0xfffffffe,
        xlThousands = 0xfffffffd,
        xlTenThousands = 0xfffffffc,
        xlHundredThousands = 0xfffffffb,
        xlMillions = 0xfffffffa,
        xlTenMillions = 0xfffffff9,
        xlHundredMillions = 0xfffffff8,
        xlThousandMillions = 0xfffffff7,
        xlMillionMillions = 0xfffffff6,
        xlDisplayUnitCustom = 0xffffefee,
        xlDisplayUnitNone = 0xffffefd2
    } XlDisplayUnit;

    typedef [uuid(94E08815-49E8-45BB-9BC2-8972405756CF)]
    enum {
        xlDownward = 0xffffefb6,
        xlHorizontal = 0xffffefe0,
        xlUpward = 0xffffefb5,
        xlVertical = 0xffffefba
    } XlChartOrientation;

    typedef [uuid(3A6700B4-6BC6-4848-AAA4-D360573F448C)]
    enum {
        xlTickLabelOrientationAutomatic = 0xffffeff7,
        xlTickLabelOrientationDownward = 0xffffefb6,
        xlTickLabelOrientationHorizontal = 0xffffefe0,
        xlTickLabelOrientationUpward = 0xffffefb5,
        xlTickLabelOrientationVertical = 0xffffefba
    } XlTickLabelOrientation;

    typedef [uuid(3439EA79-5069-4404-A6E3-8EE3A1B9BD0E)]
    enum {
        xlInterpolated = 3,
        xlNotPlotted = 1,
        xlZero = 2
    } XlDisplayBlanksAs;

    typedef enum {
        xlLabelPositionCenter = 0xffffeff4,
        xlLabelPositionAbove = 0,
        xlLabelPositionBelow = 1,
        xlLabelPositionLeft = 0xffffefdd,
        xlLabelPositionRight = 0xffffefc8,
        xlLabelPositionOutsideEnd = 2,
        xlLabelPositionInsideEnd = 3,
        xlLabelPositionInsideBase = 4,
        xlLabelPositionBestFit = 5,
        xlLabelPositionMixed = 6,
        xlLabelPositionCustom = 7
    } XlDataLabelPosition;

    typedef enum {
        xlColumnField = 2,
        xlDataField = 4,
        xlHidden = 0,
        xlPageField = 3,
        xlRowField = 1
    } XlPivotFieldOrientation;

    typedef enum {
        xlHAlignCenter = 0xffffeff4,
        xlHAlignCenterAcrossSelection = 7,
        xlHAlignDistributed = 0xffffefeb,
        xlHAlignFill = 5,
        xlHAlignGeneral = 1,
        xlHAlignJustify = 0xffffefde,
        xlHAlignLeft = 0xffffefdd,
        xlHAlignRight = 0xffffefc8
    } XlHAlign;

    typedef enum {
        xlVAlignBottom = 0xffffeff5,
        xlVAlignCenter = 0xffffeff4,
        xlVAlignDistributed = 0xffffefeb,
        xlVAlignJustify = 0xffffefde,
        xlVAlignTop = 0xffffefc0
    } XlVAlign;

    typedef [uuid(05B0478C-9CD6-4F60-B113-A55E6A6CB1DC)]
    enum {
        xlChartElementPositionAutomatic = 0xffffeff7,
        xlChartElementPositionCustom = 0xffffefee
    } XlChartElementPosition;

    typedef enum {
        msoElementChartTitleNone = 0,
        msoElementChartTitleCenteredOverlay = 1,
        msoElementChartTitleAboveChart = 2,
        msoElementLegendNone = 100,
        msoElementLegendRight = 101,
        msoElementLegendTop = 102,
        msoElementLegendLeft = 103,
        msoElementLegendBottom = 104,
        msoElementLegendRightOverlay = 105,
        msoElementLegendLeftOverlay = 106,
        msoElementDataLabelNone = 200,
        msoElementDataLabelShow = 201,
        msoElementDataLabelCenter = 202,
        msoElementDataLabelInsideEnd = 203,
        msoElementDataLabelInsideBase = 204,
        msoElementDataLabelOutSideEnd = 205,
        msoElementDataLabelLeft = 206,
        msoElementDataLabelRight = 207,
        msoElementDataLabelTop = 208,
        msoElementDataLabelBottom = 209,
        msoElementDataLabelBestFit = 210,
        msoElementDataLabelCallout = 211,
        msoElementPrimaryCategoryAxisTitleNone = 300,
        msoElementPrimaryCategoryAxisTitleAdjacentToAxis = 301,
        msoElementPrimaryCategoryAxisTitleBelowAxis = 302,
        msoElementPrimaryCategoryAxisTitleRotated = 303,
        msoElementPrimaryCategoryAxisTitleVertical = 304,
        msoElementPrimaryCategoryAxisTitleHorizontal = 305,
        msoElementPrimaryValueAxisTitleNone = 306,
        msoElementPrimaryValueAxisTitleAdjacentToAxis = 306,
        msoElementPrimaryValueAxisTitleBelowAxis = 308,
        msoElementPrimaryValueAxisTitleRotated = 309,
        msoElementPrimaryValueAxisTitleVertical = 310,
        msoElementPrimaryValueAxisTitleHorizontal = 311,
        msoElementSecondaryCategoryAxisTitleNone = 312,
        msoElementSecondaryCategoryAxisTitleAdjacentToAxis = 313,
        msoElementSecondaryCategoryAxisTitleBelowAxis = 314,
        msoElementSecondaryCategoryAxisTitleRotated = 315,
        msoElementSecondaryCategoryAxisTitleVertical = 316,
        msoElementSecondaryCategoryAxisTitleHorizontal = 317,
        msoElementSecondaryValueAxisTitleNone = 318,
        msoElementSecondaryValueAxisTitleAdjacentToAxis = 319,
        msoElementSecondaryValueAxisTitleBelowAxis = 320,
        msoElementSecondaryValueAxisTitleRotated = 321,
        msoElementSecondaryValueAxisTitleVertical = 322,
        msoElementSecondaryValueAxisTitleHorizontal = 323,
        msoElementSeriesAxisTitleNone = 324,
        msoElementSeriesAxisTitleRotated = 325,
        msoElementSeriesAxisTitleVertical = 326,
        msoElementSeriesAxisTitleHorizontal = 327,
        msoElementPrimaryValueGridLinesNone = 328,
        msoElementPrimaryValueGridLinesMinor = 329,
        msoElementPrimaryValueGridLinesMajor = 330,
        msoElementPrimaryValueGridLinesMinorMajor = 331,
        msoElementPrimaryCategoryGridLinesNone = 332,
        msoElementPrimaryCategoryGridLinesMinor = 333,
        msoElementPrimaryCategoryGridLinesMajor = 334,
        msoElementPrimaryCategoryGridLinesMinorMajor = 335,
        msoElementSecondaryValueGridLinesNone = 336,
        msoElementSecondaryValueGridLinesMinor = 337,
        msoElementSecondaryValueGridLinesMajor = 338,
        msoElementSecondaryValueGridLinesMinorMajor = 339,
        msoElementSecondaryCategoryGridLinesNone = 340,
        msoElementSecondaryCategoryGridLinesMinor = 341,
        msoElementSecondaryCategoryGridLinesMajor = 342,
        msoElementSecondaryCategoryGridLinesMinorMajor = 343,
        msoElementSeriesAxisGridLinesNone = 344,
        msoElementSeriesAxisGridLinesMinor = 345,
        msoElementSeriesAxisGridLinesMajor = 346,
        msoElementSeriesAxisGridLinesMinorMajor = 347,
        msoElementPrimaryCategoryAxisNone = 348,
        msoElementPrimaryCategoryAxisShow = 349,
        msoElementPrimaryCategoryAxisWithoutLabels = 350,
        msoElementPrimaryCategoryAxisReverse = 351,
        msoElementPrimaryValueAxisNone = 352,
        msoElementPrimaryValueAxisShow = 353,
        msoElementPrimaryValueAxisThousands = 354,
        msoElementPrimaryValueAxisMillions = 355,
        msoElementPrimaryValueAxisBillions = 356,
        msoElementPrimaryValueAxisLogScale = 357,
        msoElementSecondaryCategoryAxisNone = 358,
        msoElementSecondaryCategoryAxisShow = 359,
        msoElementSecondaryCategoryAxisWithoutLabels = 360,
        msoElementSecondaryCategoryAxisReverse = 361,
        msoElementSecondaryValueAxisNone = 362,
        msoElementSecondaryValueAxisShow = 363,
        msoElementSecondaryValueAxisThousands = 364,
        msoElementSecondaryValueAxisMillions = 365,
        msoElementSecondaryValueAxisBillions = 366,
        msoElementSecondaryValueAxisLogScale = 367,
        msoElementSeriesAxisNone = 368,
        msoElementSeriesAxisShow = 369,
        msoElementSeriesAxisWithoutLabeling = 370,
        msoElementSeriesAxisReverse = 371,
        msoElementPrimaryCategoryAxisThousands = 372,
        msoElementPrimaryCategoryAxisMillions = 373,
        msoElementPrimaryCategoryAxisBillions = 374,
        msoElementPrimaryCategoryAxisLogScale = 375,
        msoElementSecondaryCategoryAxisThousands = 376,
        msoElementSecondaryCategoryAxisMillions = 377,
        msoElementSecondaryCategoryAxisBillions = 378,
        msoElementSecondaryCategoryAxisLogScale = 379,
        msoElementDataTableNone = 500,
        msoElementDataTableShow = 501,
        msoElementDataTableWithLegendKeys = 502,
        msoElementTrendlineNone = 600,
        msoElementTrendlineAddLinear = 601,
        msoElementTrendlineAddExponential = 602,
        msoElementTrendlineAddLinearForecast = 603,
        msoElementTrendlineAddTwoPeriodMovingAverage = 604,
        msoElementErrorBarNone = 700,
        msoElementErrorBarStandardError = 701,
        msoElementErrorBarPercentage = 702,
        msoElementErrorBarStandardDeviation = 703,
        msoElementLineNone = 800,
        msoElementLineDropLine = 801,
        msoElementLineHiLoLine = 802,
        msoElementLineSeriesLine = 803,
        msoElementLineDropHiLoLine = 804,
        msoElementUpDownBarsNone = 900,
        msoElementUpDownBarsShow = 901,
        msoElementPlotAreaNone = 1000,
        msoElementPlotAreaShow = 1001,
        msoElementChartWallNone = 1100,
        msoElementChartWallShow = 1101,
        msoElementChartFloorNone = 1200,
        msoElementChartFloorShow = 1201
    } MsoChartElementType;

	typedef enum {
        msoBulletMixed = 0xfffffffe,
        msoBulletNone = 0,
        msoBulletUnnumbered = 1,
        msoBulletNumbered = 2,
        msoBulletPicture = 3
    } MsoBulletType;

    typedef enum {
        msoBulletStyleMixed = 0xfffffffe,
        msoBulletAlphaLCPeriod = 0,
        msoBulletAlphaUCPeriod = 1,
        msoBulletArabicParenRight = 2,
        msoBulletArabicPeriod = 3,
        msoBulletRomanLCParenBoth = 4,
        msoBulletRomanLCParenRight = 5,
        msoBulletRomanLCPeriod = 6,
        msoBulletRomanUCPeriod = 7,
        msoBulletAlphaLCParenBoth = 8,
        msoBulletAlphaLCParenRight = 9,
        msoBulletAlphaUCParenBoth = 10,
        msoBulletAlphaUCParenRight = 11,
        msoBulletArabicParenBoth = 12,
        msoBulletArabicPlain = 13,
        msoBulletRomanUCParenBoth = 14,
        msoBulletRomanUCParenRight = 15,
        msoBulletSimpChinPlain = 16,
        msoBulletSimpChinPeriod = 17,
        msoBulletCircleNumDBPlain = 18,
        msoBulletCircleNumWDWhitePlain = 19,
        msoBulletCircleNumWDBlackPlain = 20,
        msoBulletTradChinPlain = 21,
        msoBulletTradChinPeriod = 22,
        msoBulletArabicAlphaDash = 23,
        msoBulletArabicAbjadDash = 24,
        msoBulletHebrewAlphaDash = 25,
        msoBulletKanjiKoreanPlain = 26,
        msoBulletKanjiKoreanPeriod = 27,
        msoBulletArabicDBPlain = 28,
        msoBulletArabicDBPeriod = 29,
        msoBulletThaiAlphaPeriod = 30,
        msoBulletThaiAlphaParenRight = 31,
        msoBulletThaiAlphaParenBoth = 32,
        msoBulletThaiNumPeriod = 33,
        msoBulletThaiNumParenRight = 34,
        msoBulletThaiNumParenBoth = 35,
        msoBulletHindiAlphaPeriod = 36,
        msoBulletHindiNumPeriod = 37,
        msoBulletKanjiSimpChinDBPeriod = 38,
        msoBulletHindiNumParenRight = 39,
        msoBulletHindiAlpha1Period = 40
    } MsoNumberedBulletStyle;

	typedef enum {
        msoTabStopMixed = 0xfffffffe,
        msoTabStopLeft = 1,
        msoTabStopCenter = 2,
        msoTabStopRight = 3,
        msoTabStopDecimal = 4
    } MsoTabStopType;

	typedef enum {
        msoBaselineAlignMixed = 0xfffffffe,
        msoBaselineAlignBaseline = 1,
        msoBaselineAlignTop = 2,
        msoBaselineAlignCenter = 3,
        msoBaselineAlignFarEast50 = 4,
        msoBaselineAlignAuto = 5
    } MsoBaselineAlignment;

	typedef enum {
        encprovdetUrl = 0,
        encprovdetAlgorithm = 1,
        encprovdetBlockCipher = 2,
        encprovdetCipherBlockSize = 3,
        encprovdetCipherMode = 4
    } EncryptionProviderDetail;

    typedef enum {
        cipherModeECB = 0,
        cipherModeCBC = 1
    } EncryptionCipherMode;

	typedef enum {
        msoTextureAlignmentMixed = 0xfffffffe,
        msoTextureTopLeft = 0,
        msoTextureTop = 1,
        msoTextureTopRight = 2,
        msoTextureLeft = 3,
        msoTextureCenter = 4,
        msoTextureRight = 5,
        msoTextureBottomLeft = 6,
        msoTextureBottom = 7,
        msoTextureBottomRight = 8
    } MsoTextureAlignment;

	typedef enum {
        msoClipboardFormatMixed = 0xfffffffe,
        msoClipboardFormatNative = 1,
        msoClipboardFormatHTML = 2,
        msoClipboardFormatRTF = 3,
        msoClipboardFormatPlainText = 4
    } MsoClipboardFormat;

    typedef enum {
        msoBlogNoCategories = 0,
        msoBlogOneCategory = 1,
        msoBlogMultipleCategories = 2
    } MsoBlogCategorySupport;

    typedef enum {
        msoblogImageTypeJPEG = 1,
        msoblogImageTypeGIF = 2,
        msoblogImageTypePNG = 3
    } MsoBlogImageType;

	typedef [uuid(B270C821-56A3-4F6D-9274-74E6CDF4D10C)]
    enum {
        xlHorizontalCoordinate = 1,
        xlVerticalCoordinate = 2
    } XlPieSliceLocation;

    typedef [uuid(2B4C8AB7-6E70-422A-B7CC-206452289F16)]
    enum {
        xlOuterCounterClockwisePoint = 1,
        xlOuterCenterPoint = 2,
        xlOuterClockwisePoint = 3,
        xlMidClockwiseRadiusPoint = 4,
        xlCenterPoint = 5,
        xlMidCounterClockwiseRadiusPoint = 6,
        xlInnerClockwisePoint = 7,
        xlInnerCenterPoint = 8,
        xlInnerCounterClockwisePoint = 9
    } XlPieSliceIndex;

    typedef enum {
        msoSmartArtNodeDefault = 1,
        msoSmartArtNodeAfter = 2,
        msoSmartArtNodeBefore = 3,
        msoSmartArtNodeAbove = 4,
        msoSmartArtNodeBelow = 5
    } MsoSmartArtNodePosition;

    typedef enum {
        msoSmartArtNodeTypeDefault = 1,
        msoSmartArtNodeTypeAssistant = 2
    } MsoSmartArtNodeType;

	typedef [uuid(C4B07795-AE88-400C-AF72-6F7F75A3EC0B), helpcontext(0x0001871c)]
    enum {
        msoPickerFieldUnknown = 0,
        msoPickerFieldDateTime = 1,
        msoPickerFieldNumber = 2,
        msoPickerFieldText = 3,
        msoPickerFieldUser = 4,
        msoPickerFieldMax = 5
    } MsoPickerField;

	typedef [uuid(EC67AF3B-F2DF-4A52-9B85-E06A7FF28DB7), helpcontext(0x0001871d)]
    enum {
        msoContactCardAddressTypeUnknown = 0,
        msoContactCardAddressTypeOutlook = 1,
        msoContactCardAddressTypeSMTP = 2,
        msoContactCardAddressTypeIM = 3
    } MsoContactCardAddressType;

    typedef [uuid(310803CD-C69D-4371-98C9-40CE4E9BFD5A), helpcontext(0x0001871e)]
    enum {
        msoContactCardTypeEnterpriseContact = 0,
        msoContactCardTypePersonalContact = 1,
        msoContactCardTypeUnknownContact = 2,
        msoContactCardTypeEnterpriseGroup = 3,
        msoContactCardTypePersonalDistributionList = 4
    } MsoContactCardType;

	typedef enum {
        msoEffectNone = 0,
        msoEffectBackgroundRemoval = 1,
        msoEffectBlur = 2,
        msoEffectBrightnessContrast = 3,
        msoEffectCement = 4,
        msoEffectCrisscrossEtching = 5,
        msoEffectChalkSketch = 6,
        msoEffectColorTemperature = 7,
        msoEffectCutout = 8,
        msoEffectFilmGrain = 9,
        msoEffectGlass = 10,
        msoEffectGlowDiffused = 11,
        msoEffectGlowEdges = 12,
        msoEffectLightScreen = 13,
        msoEffectLineDrawing = 14,
        msoEffectMarker = 15,
        msoEffectMosiaicBubbles = 16,
        msoEffectPaintBrush = 17,
        msoEffectPaintStrokes = 18,
        msoEffectPastelsSmooth = 19,
        msoEffectPencilGrayscale = 20,
        msoEffectPencilSketch = 21,
        msoEffectPhotocopy = 22,
        msoEffectPlasticWrap = 23,
        msoEffectSaturation = 24,
        msoEffectSharpenSoften = 25,
        msoEffectTexturizer = 26,
        msoEffectWatercolorSponge = 27
    } MsoPictureEffectType;

	typedef [uuid(750D0562-9930-40DD-9DA7-887B50F2111F), helpcontext(0x0001871f)]
    enum {
        msoIodGroupPIAs = 0,
        msoIodGroupVSTOR35Mgd = 1,
        msoIodGroupVSTOR40Mgd = 2
    } MsoIodGroup;

    typedef enum {
        BackstageGroupStyleNormal = 0,
        BackstageGroupStyleWarning = 1,
        BackstageGroupStyleError = 2
    } BackstageGroupStyle;

    typedef enum {
        msoFileValidationDefault = 0,
        msoFileValidationSkip = 1
    } MsoFileValidationMode;

    typedef [uuid(0739EEEF-D856-414C-9494-F2F791FD1F22), helpcontext(0x00018722)]
    enum {
        msoContactCardHover = 0,
        msoContactCardFull = 1
    } MsoContactCardStyle;

	typedef enum {
        msoMergeUnion = 1,
        msoMergeCombine = 2,
        msoMergeIntersect = 3,
        msoMergeSubtract = 4,
        msoMergeFragment = 5
    } MsoMergeCmd;

    typedef enum {
        msoLineCapMixed = 0xfffffffe,
        msoLineCapSquare = 1,
        msoLineCapRound = 2,
        msoLineCapFlat = 3
    } MsoLineCapStyle;

    typedef enum {
        msoLineJoinMixed = 0xfffffffe,
        msoLineJoinRound = 1,
        msoLineJoinBevel = 2,
        msoLineJoinMiter = 3
    } MsoLineJoinStyle;

    typedef enum {
        msoLineFillMixed = 0xfffffffe,
        msoLineFillNone = 0,
        msoLineFillSolid = 1,
        msoLineFillPatterned = 2,
        msoLineFillGradient = 3,
        msoLineFillTextured = 4,
        msoLineFillBackground = 5,
        msoLineFillPicture = 6
    } MsoLineFillType;

    typedef enum {
        msoChartFieldBubbleSize = 1,
        msoChartFieldCategoryName = 2,
        msoChartFieldPercentage = 3,
        msoChartFieldSeriesName = 4,
        msoChartFieldValue = 5,
        msoChartFieldFormula = 6,
        msoChartFieldRange = 7
    } MsoChartFieldType;

    typedef enum {
        NoBroadcast = 0,
        BroadcastStarted = 1,
        BroadcastPaused = 2
    } MsoBroadcastState;

    typedef enum {
        BroadcastCapFileSizeLimited = 1,
        BroadcastCapSupportsMeetingNotes = 2,
        BroadcastCapSupportsUpdateDoc = 4
    } MsoBroadcastCapabilities;

    typedef enum {
        msoPictureCompressDocDefault = 0xffffffff,
        msoPictureCompressFalse = 0,
        msoPictureCompressTrue = 1
    } MsoPictureCompress;

	typedef [uuid(BFFE8F80-6A67-4B7A-AEAA-8823E7932C87)]
    enum {
        xlCategoryLabelLevelNone = 0xfffffffd,
        xlCategoryLabelLevelCustom = 0xfffffffe,
        xlCategoryLabelLevelAll = 0xffffffff
    } XlCategoryLabelLevel;

    typedef [uuid(76D9466C-84C2-4355-81FE-CB1B9CB03C19)]
    enum {
        xlSeriesNameLevelNone = 0xfffffffd,
        xlSeriesNameLevelCustom = 0xfffffffe,
        xlSeriesNameLevelAll = 0xffffffff
    } XlSeriesNameLevel;

	typedef enum {
        msoAlertButtonOK = 0,
        msoAlertButtonOKCancel = 1,
        msoAlertButtonAbortRetryIgnore = 2,
        msoAlertButtonYesNoCancel = 3,
        msoAlertButtonYesNo = 4,
        msoAlertButtonRetryCancel = 5,
        msoAlertButtonYesAllNoCancel = 6
    } MsoAlertButtonType;

    typedef enum {
        msoAlertIconNoIcon = 0,
        msoAlertIconCritical = 1,
        msoAlertIconQuery = 2,
        msoAlertIconWarning = 3,
        msoAlertIconInfo = 4
    } MsoAlertIconType;

    typedef enum {
        msoAlertDefaultFirst = 0,
        msoAlertDefaultSecond = 1,
        msoAlertDefaultThird = 2,
        msoAlertDefaultFourth = 3,
        msoAlertDefaultFifth = 4
    } MsoAlertDefaultType;

    typedef enum {
        msoAlertCancelDefault = 0xffffffff,
        msoAlertCancelFirst = 0,
        msoAlertCancelSecond = 1,
        msoAlertCancelThird = 2,
        msoAlertCancelFourth = 3,
        msoAlertCancelFifth = 4
    } MsoAlertCancelType;

    typedef enum {
        msoSearchInMyComputer = 0,
        msoSearchInOutlook = 1,
        msoSearchInMyNetworkPlaces = 2,
        msoSearchInCustom = 3
    } MsoSearchIn;

    typedef enum {
        msoTargetBrowserV3 = 0,
        msoTargetBrowserV4 = 1,
        msoTargetBrowserIE4 = 2,
        msoTargetBrowserIE5 = 3,
        msoTargetBrowserIE6 = 4
    } MsoTargetBrowser;

	typedef enum {
        msoMoveRowFirst = 0xfffffffc,
        msoMoveRowPrev = 0xfffffffd,
        msoMoveRowNext = 0xfffffffe,
        msoMoveRowNbr = 0xffffffff
    } MsoMoveRow;

	typedef enum {
        msoFilterComparisonEqual = 0,
        msoFilterComparisonNotEqual = 1,
        msoFilterComparisonLessThan = 2,
        msoFilterComparisonGreaterThan = 3,
        msoFilterComparisonLessThanEqual = 4,
        msoFilterComparisonGreaterThanEqual = 5,
        msoFilterComparisonIsBlank = 6,
        msoFilterComparisonIsNotBlank = 7,
        msoFilterComparisonContains = 8,
        msoFilterComparisonNotContains = 9
    } MsoFilterComparison;

    typedef enum {
        msoFilterConjunctionAnd = 0,
        msoFilterConjunctionOr = 1
    } MsoFilterConjunction;

	typedef enum {
        msoOpenDocument = 0,
        msoNew = 1,
        msoNewfromExistingFile = 2,
        msoNewfromTemplate = 3,
        msoBottomSection = 4
    } MsoFileNewSection;

    typedef enum {
        msoEditFile = 0,
        msoCreateNewFile = 1,
        msoOpenFile = 2
    } MsoFileNewAction;

	typedef enum {
        msoLanguageIDChineseHongKong = 3076,
        msoLanguageIDChineseMacao = 5124,
        msoLanguageIDEnglishTrinidad = 11273
    } MsoLanguageIDHidden;

	typedef enum {
        msoSharedWorkspaceTaskStatusNotStarted = 1,
        msoSharedWorkspaceTaskStatusInProgress = 2,
        msoSharedWorkspaceTaskStatusCompleted = 3,
        msoSharedWorkspaceTaskStatusDeferred = 4,
        msoSharedWorkspaceTaskStatusWaiting = 5
    } MsoSharedWorkspaceTaskStatus;

    typedef enum {
        msoSharedWorkspaceTaskPriorityHigh = 1,
        msoSharedWorkspaceTaskPriorityNormal = 2,
        msoSharedWorkspaceTaskPriorityLow = 3
    } MsoSharedWorkspaceTaskPriority;

	typedef enum {
        msoSyncVersionLastViewed = 0,
        msoSyncVersionServer = 1
    } MsoSyncVersionType;

    typedef enum {
        msoSyncConflictClientWins = 0,
        msoSyncConflictServerWins = 1,
        msoSyncConflictMerge = 2
    } MsoSyncConflictResolutionType;

	typedef enum {
        msoSyncCompareAndMerge = 0,
        msoSyncCompareSideBySide = 1
    } MsoSyncCompareType;

    typedef enum {
        msoSyncAvailableNone = 0,
        msoSyncAvailableOffline = 1,
        msoSyncAvailableAnywhere = 2
    } MsoSyncAvailableType;

    typedef enum {
        msoSyncEventDownloadInitiated = 0,
        msoSyncEventDownloadSucceeded = 1,
        msoSyncEventDownloadFailed = 2,
        msoSyncEventUploadInitiated = 3,
        msoSyncEventUploadSucceeded = 4,
        msoSyncEventUploadFailed = 5,
        msoSyncEventDownloadNoChange = 6,
        msoSyncEventOffline = 7
    } MsoSyncEventType;

    typedef enum {
        msoSyncErrorNone = 0,
        msoSyncErrorUnauthorizedUser = 1,
        msoSyncErrorCouldNotConnect = 2,
        msoSyncErrorOutOfSpace = 3,
        msoSyncErrorFileNotFound = 4,
        msoSyncErrorFileTooLarge = 5,
        msoSyncErrorFileInUse = 6,
        msoSyncErrorVirusUpload = 7,
        msoSyncErrorVirusDownload = 8,
        msoSyncErrorUnknownUpload = 9,
        msoSyncErrorUnknownDownload = 10,
        msoSyncErrorCouldNotOpen = 11,
        msoSyncErrorCouldNotUpdate = 12,
        msoSyncErrorCouldNotCompare = 13,
        msoSyncErrorCouldNotResolve = 14,
        msoSyncErrorNoNetwork = 15,
        msoSyncErrorUnknown = 16
    } MsoSyncErrorType;

    typedef enum {
        msoSyncStatusNoSharedWorkspace = 0,
        msoSyncStatusNotRoaming = 0,
        msoSyncStatusLatest = 1,
        msoSyncStatusNewerAvailable = 2,
        msoSyncStatusLocalChanges = 3,
        msoSyncStatusConflict = 4,
        msoSyncStatusSuspended = 5,
        msoSyncStatusError = 6
    } MsoSyncStatusType;

	typedef enum {
        msoPermissionView = 1,
        msoPermissionRead = 1,
        msoPermissionEdit = 2,
        msoPermissionSave = 4,
        msoPermissionExtract = 8,
        msoPermissionChange = 15,
        msoPermissionPrint = 16,
        msoPermissionObjModel = 32,
        msoPermissionFullControl = 64,
        msoPermissionAllCommon = 127
    } MsoPermission;

	typedef enum {
        msoMetaPropertyTypeUnknown = 0,
        msoMetaPropertyTypeBoolean = 1,
        msoMetaPropertyTypeChoice = 2,
        msoMetaPropertyTypeCalculated = 3,
        msoMetaPropertyTypeComputed = 4,
        msoMetaPropertyTypeCurrency = 5,
        msoMetaPropertyTypeDateTime = 6,
        msoMetaPropertyTypeFillInChoice = 7,
        msoMetaPropertyTypeGuid = 8,
        msoMetaPropertyTypeInteger = 9,
        msoMetaPropertyTypeLookup = 10,
        msoMetaPropertyTypeMultiChoiceLookup = 11,
        msoMetaPropertyTypeMultiChoice = 12,
        msoMetaPropertyTypeMultiChoiceFillIn = 13,
        msoMetaPropertyTypeNote = 14,
        msoMetaPropertyTypeNumber = 15,
        msoMetaPropertyTypeText = 16,
        msoMetaPropertyTypeUrl = 17,
        msoMetaPropertyTypeUser = 18,
        msoMetaPropertyTypeUserMulti = 19,
        msoMetaPropertyTypeBusinessData = 20,
        msoMetaPropertyTypeBusinessDataSecondary = 21,
        msoMetaPropertyTypeMax = 22
    } MsoMetaPropertyType;

	typedef enum {
        msoSignatureSubsetSignaturesAllSigs = 0,
        msoSignatureSubsetSignaturesNonVisible = 1,
        msoSignatureSubsetSignatureLines = 2,
        msoSignatureSubsetSignatureLinesSigned = 3,
        msoSignatureSubsetSignatureLinesUnsigned = 4,
        msoSignatureSubsetAll = 5
    } MsoSignatureSubset;

	typedef enum {
        msoDocInspectorStatusDocOk = 0,
        msoDocInspectorStatusIssueFound = 1,
        msoDocInspectorStatusError = 2
    } MsoDocInspectorStatus;

	typedef enum {
        sigdetLocalSigningTime = 0,
        sigdetApplicationName = 1,
        sigdetApplicationVersion = 2,
        sigdetOfficeVersion = 3,
        sigdetWindowsVersion = 4,
        sigdetNumberOfMonitors = 5,
        sigdetHorizResolution = 6,
        sigdetVertResolution = 7,
        sigdetColorDepth = 8,
        sigdetSignedData = 9,
        sigdetDocPreviewImg = 10,
        sigdetIPFormHash = 11,
        sigdetIPCurrentView = 12,
        sigdetSignatureType = 13,
        sigdetHashAlgorithm = 14,
        sigdetShouldShowViewWarning = 15,
        sigdetDelSuggSigner = 16,
        sigdetDelSuggSignerSet = 17,
        sigdetDelSuggSignerLine2 = 18,
        sigdetDelSuggSignerLine2Set = 19,
        sigdetDelSuggSignerEmail = 20,
        sigdetDelSuggSignerEmailSet = 21
    } SignatureDetail;

    typedef enum {
        certdetAvailable = 0,
        certdetSubject = 1,
        certdetIssuer = 2,
        certdetExpirationDate = 3,
        certdetThumbprint = 4
    } CertificateDetail;

    typedef enum {
        contverresError = 0,
        contverresVerifying = 1,
        contverresUnverified = 2,
        contverresValid = 3,
        contverresModified = 4
    } ContentVerificationResults;

    typedef enum {
        certverresError = 0,
        certverresVerifying = 1,
        certverresUnverified = 2,
        certverresValid = 3,
        certverresInvalid = 4,
        certverresExpired = 5,
        certverresRevoked = 6,
        certverresUntrusted = 7
    } CertificateVerificationResults;

    typedef enum {
        siglnimgSoftwareRequired = 0,
        siglnimgUnsigned = 1,
        siglnimgSignedValid = 2,
        siglnimgSignedInvalid = 3,
        siglnimgSigned = 4
    } SignatureLineImage;

    typedef enum {
        sigprovdetUrl = 0,
        sigprovdetHashAlgorithm = 1,
        sigprovdetUIOnly = 2,
        sigprovdetUseOfficeUI = 3,
        sigprovdetUseOfficeStampUI = 4
    } SignatureProviderDetail;

    typedef enum {
        sigtypeUnknown = 0,
        sigtypeNonVisible = 1,
        sigtypeSignatureLine = 2,
        sigtypeMax = 3
    } SignatureType;

	typedef enum {
        msoCustomXMLNodeElement = 1,
        msoCustomXMLNodeAttribute = 2,
        msoCustomXMLNodeText = 3,
        msoCustomXMLNodeCData = 4,
        msoCustomXMLNodeProcessingInstruction = 7,
        msoCustomXMLNodeComment = 8,
        msoCustomXMLNodeDocument = 9
    } MsoCustomXMLNodeType;

    typedef enum {
        msoCustomXMLValidationErrorSchemaGenerated = 0,
        msoCustomXMLValidationErrorAutomaticallyCleared = 1,
        msoCustomXMLValidationErrorManual = 2
    } MsoCustomXMLValidationErrorType;

	typedef enum {
        msoSoftEdgeTypeMixed = 0xfffffffe,
        msoSoftEdgeTypeNone = 0,
        msoSoftEdgeType1 = 1,
        msoSoftEdgeType2 = 2,
        msoSoftEdgeType3 = 3,
        msoSoftEdgeType4 = 4,
        msoSoftEdgeType5 = 5,
        msoSoftEdgeType6 = 6
    } MsoSoftEdgeType;

    typedef enum {
        msoReflectionTypeMixed = 0xfffffffe,
        msoReflectionTypeNone = 0,
        msoReflectionType1 = 1,
        msoReflectionType2 = 2,
        msoReflectionType3 = 3,
        msoReflectionType4 = 4,
        msoReflectionType5 = 5,
        msoReflectionType6 = 6,
        msoReflectionType7 = 7,
        msoReflectionType8 = 8,
        msoReflectionType9 = 9
    } MsoReflectionType;



	[
      odl,
      uuid(618736E0-3C3D-11CF-810C-00AA00389B71),
      hidden,
      dual,
      oleautomation
    ]
    interface IAccessible : IDispatch {
        [id(0xffffec78), propget, hidden]
        HRESULT accParent([out, retval] IDispatch** ppdispParent);
        [id(0xffffec77), propget, hidden]
        HRESULT accChildCount([out, retval] long* pcountChildren);
        [id(0xffffec76), propget, hidden]
        HRESULT accChild(
                        [in] VARIANT varChild, 
                        [out, retval] IDispatch** ppdispChild);
        [id(0xffffec75), propget, hidden]
        HRESULT accName(
                        [in, optional] VARIANT varChild, 
                        [out, retval] BSTR* pszName);
        [id(0xffffec74), propget, hidden]
        HRESULT accValue(
                        [in, optional] VARIANT varChild, 
                        [out, retval] BSTR* pszValue);
        [id(0xffffec73), propget, hidden]
        HRESULT accDescription(
                        [in, optional] VARIANT varChild, 
                        [out, retval] BSTR* pszDescription);
        [id(0xffffec72), propget, hidden]
        HRESULT accRole(
                        [in, optional] VARIANT varChild, 
                        [out, retval] VARIANT* pvarRole);
        [id(0xffffec71), propget, hidden]
        HRESULT accState(
                        [in, optional] VARIANT varChild, 
                        [out, retval] VARIANT* pvarState);
        [id(0xffffec70), propget, hidden]
        HRESULT accHelp(
                        [in, optional] VARIANT varChild, 
                        [out, retval] BSTR* pszHelp);
        [id(0xffffec6f), propget, hidden]
        HRESULT accHelpTopic(
                        [out] BSTR* pszHelpFile, 
                        [in, optional] VARIANT varChild, 
                        [out, retval] long* pidTopic);
        [id(0xffffec6e), propget, hidden]
        HRESULT accKeyboardShortcut(
                        [in, optional] VARIANT varChild, 
                        [out, retval] BSTR* pszKeyboardShortcut);
        [id(0xffffec6d), propget, hidden]
        HRESULT accFocus([out, retval] VARIANT* pvarChild);
        [id(0xffffec6c), propget, hidden]
        HRESULT accSelection([out, retval] VARIANT* pvarChildren);
        [id(0xffffec6b), propget, hidden]
        HRESULT accDefaultAction(
                        [in, optional] VARIANT varChild, 
                        [out, retval] BSTR* pszDefaultAction);
        [id(0xffffec6a), hidden]
        HRESULT accSelect(
                        [in] long flagsSelect, 
                        [in, optional] VARIANT varChild);
        [id(0xffffec69), hidden]
        HRESULT accLocation(
                        [out] long* pxLeft, 
                        [out] long* pyTop, 
                        [out] long* pcxWidth, 
                        [out] long* pcyHeight, 
                        [in, optional] VARIANT varChild);
        [id(0xffffec68), hidden]
        HRESULT accNavigate(
                        [in] long navDir, 
                        [in, optional] VARIANT varStart, 
                        [out, retval] VARIANT* pvarEndUpAt);
        [id(0xffffec67), hidden]
        HRESULT accHitTest(
                        [in] long xLeft, 
                        [in] long yTop, 
                        [out, retval] VARIANT* pvarChild);
        [id(0xffffec66), hidden]
        HRESULT accDoDefaultAction([in, optional] VARIANT varChild);
        [id(0xffffec75), propput, hidden]
        HRESULT accName(
                        [in, optional] VARIANT varChild, 
                        [in] BSTR pszName);
        [id(0xffffec74), propput, hidden]
        HRESULT accValue(
                        [in, optional] VARIANT varChild, 
                        [in] BSTR pszValue);
    };

    [
      odl,
      uuid(000C0300-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _IMsoDispObj : IDispatch {
        [id(0x60020000), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x60020001), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
    };

    [
      odl,
      uuid(000C0301-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _IMsoOleAccDispObj : IAccessible {
        [id(0x60030000), propget, helpcontext(0x000003e9)]
        HRESULT Application([out, retval] IDispatch** ppidisp);
        [id(0x60030001), propget, helpcontext(0x000003ea)]
        HRESULT Creator([out, retval] long* plCreator);
    };

    [
      odl,
      uuid(000C0302-0000-0000-C000-000000000046),
      helpcontext(0x000007d0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface _CommandBars : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x000007d1)]
        HRESULT ActionControl([out, retval] CommandBarControl** ppcbc);
        [id(0x60030001), propget, helpcontext(0x000007d2)]
        HRESULT ActiveMenuBar([out, retval] CommandBar** ppcb);
        [id(0x60030002), helpcontext(0x000007d3)]
        HRESULT Add(
                        [in, optional] VARIANT Name, 
                        [in, optional] VARIANT Position, 
                        [in, optional] VARIANT MenuBar, 
                        [in, optional] VARIANT Temporary, 
                        [out, retval] CommandBar** ppcb);
        [id(0x60030003), propget, helpcontext(0x000007d4)]
        HRESULT Count([out, retval] int* pcToolbars);
        [id(0x60030004), propget, helpcontext(0x000007d5)]
        HRESULT DisplayTooltips([out, retval] VARIANT_BOOL* pvarfDisplayTooltips);
        [id(0x60030004), propput, helpcontext(0x000007d5)]
        HRESULT DisplayTooltips([in] VARIANT_BOOL pvarfDisplayTooltips);
        [id(0x60030006), propget, helpcontext(0x000007d6)]
        HRESULT DisplayKeysInTooltips([out, retval] VARIANT_BOOL* pvarfDisplayKeys);
        [id(0x60030006), propput, helpcontext(0x000007d6)]
        HRESULT DisplayKeysInTooltips([in] VARIANT_BOOL pvarfDisplayKeys);
        [id(0x60030008), helpcontext(0x000007d7)]
        HRESULT FindControl(
                        [in, optional] VARIANT Type, 
                        [in, optional] VARIANT Id, 
                        [in, optional] VARIANT Tag, 
                        [in, optional] VARIANT Visible, 
                        [out, retval] CommandBarControl** ppcbc);
        [id(00000000), propget, helpcontext(0x000007d8)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] CommandBar** ppcb);
        [id(0x6003000a), propget, helpcontext(0x000007d9)]
        HRESULT LargeButtons([out, retval] VARIANT_BOOL* pvarfLargeButtons);
        [id(0x6003000a), propput, helpcontext(0x000007d9)]
        HRESULT LargeButtons([in] VARIANT_BOOL pvarfLargeButtons);
        [id(0x6003000c), propget, helpcontext(0x000007da)]
        HRESULT MenuAnimationStyle([out, retval] MsoMenuAnimation* pma);
        [id(0x6003000c), propput, helpcontext(0x000007da)]
        HRESULT MenuAnimationStyle([in] MsoMenuAnimation pma);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
        [id(0x6003000f), propget, helpcontext(0x000007db)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x60030010), helpcontext(0x000007dc)]
        HRESULT ReleaseFocus();
        [id(0x60030011), propget, hidden]
        HRESULT IdsString(
                        [in] int ids, 
                        [out] BSTR* pbstrName, 
                        [out, retval] int* pcch);
        [id(0x60030012), propget, hidden]
        HRESULT TmcGetName(
                        [in] int tmc, 
                        [out] BSTR* pbstrName, 
                        [out, retval] int* pcch);
        [id(0x60030013), propget, helpcontext(0x000007dd)]
        HRESULT AdaptiveMenus([out, retval] VARIANT_BOOL* pvarfAdaptiveMenus);
        [id(0x60030013), propput, helpcontext(0x000007dd)]
        HRESULT AdaptiveMenus([in] VARIANT_BOOL pvarfAdaptiveMenus);
        [id(0x60030015), helpcontext(0x000007de)]
        HRESULT FindControls(
                        [in, optional] VARIANT Type, 
                        [in, optional] VARIANT Id, 
                        [in, optional] VARIANT Tag, 
                        [in, optional] VARIANT Visible, 
                        [out, retval] CommandBarControls** ppcbcs);
        [id(0x60030016), hidden]
        HRESULT AddEx(
                        [in, optional] VARIANT TbidOrName, 
                        [in, optional] VARIANT Position, 
                        [in, optional] VARIANT MenuBar, 
                        [in, optional] VARIANT Temporary, 
                        [in, optional] VARIANT TbtrProtection, 
                        [out, retval] CommandBar** ppcb);
        [id(0x60030017), propget, helpcontext(0x000007df)]
        HRESULT DisplayFonts([out, retval] VARIANT_BOOL* pvarfDisplayFonts);
        [id(0x60030017), propput, helpcontext(0x000007df)]
        HRESULT DisplayFonts([in] VARIANT_BOOL pvarfDisplayFonts);
        [id(0x60030019), propget, helpcontext(0x000007e0)]
        HRESULT DisableCustomize([out, retval] VARIANT_BOOL* pvarfDisableCustomize);
        [id(0x60030019), propput, helpcontext(0x000007e0)]
        HRESULT DisableCustomize([in] VARIANT_BOOL pvarfDisableCustomize);
        [id(0x6003001b), propget, helpcontext(0x000007e1)]
        HRESULT DisableAskAQuestionDropdown([out, retval] VARIANT_BOOL* pvarfDisableAskAQuestionDropdown);
        [id(0x6003001b), propput, helpcontext(0x000007e1)]
        HRESULT DisableAskAQuestionDropdown([in] VARIANT_BOOL pvarfDisableAskAQuestionDropdown);
        [id(0x6003001d), helpcontext(0x000007e2)]
        HRESULT ExecuteMso([in] BSTR idMso);
        [id(0x6003001e), helpcontext(0x000007e3)]
        HRESULT GetEnabledMso(
                        [in] BSTR idMso, 
                        [out, retval] VARIANT_BOOL* Enabled);
        [id(0x6003001f), helpcontext(0x000007e4)]
        HRESULT GetVisibleMso(
                        [in] BSTR idMso, 
                        [out, retval] VARIANT_BOOL* Visible);
        [id(0x60030020), helpcontext(0x000007e5)]
        HRESULT GetPressedMso(
                        [in] BSTR idMso, 
                        [out, retval] VARIANT_BOOL* Pressed);
        [id(0x60030021), helpcontext(0x000007e6)]
        HRESULT GetLabelMso(
                        [in] BSTR idMso, 
                        [out, retval] BSTR* Label);
        [id(0x60030022), helpcontext(0x000007e7)]
        HRESULT GetScreentipMso(
                        [in] BSTR idMso, 
                        [out, retval] BSTR* Screentip);
        [id(0x60030023), helpcontext(0x000007e8)]
        HRESULT GetSupertipMso(
                        [in] BSTR idMso, 
                        [out, retval] BSTR* Supertip);
        [id(0x60030024), helpcontext(0x000007e9)]
        HRESULT GetImageMso(
                        [in] BSTR idMso, 
                        [in] int Width, 
                        [in] int Height, 
                        [out, retval] IPictureDisp** Image);
        [id(0x60030025), helpcontext(0x000007ea)]
        HRESULT CommitRenderingTransaction([in] long hwnd);
    };

    [
      odl,
      uuid(000C0304-0000-0000-C000-000000000046),
      helpcontext(0x00000bb8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CommandBar : _IMsoOleAccDispObj {
        [id(0x60040000), propget, helpcontext(0x00000bb9)]
        HRESULT BuiltIn([out, retval] VARIANT_BOOL* pvarfBuiltIn);
        [id(0x60040001), propget, helpcontext(0x00000bba)]
        HRESULT Context([out, retval] BSTR* pbstrContext);
        [id(0x60040001), propput, helpcontext(0x00000bba)]
        HRESULT Context([in] BSTR pbstrContext);
        [id(0x60040003), propget, helpcontext(0x00000bbb)]
        HRESULT Controls([out, retval] CommandBarControls** ppcbcs);
        [id(0x60040004), helpcontext(0x00000bbc)]
        HRESULT Delete();
        [id(0x60040005), propget, helpcontext(0x00000bbd)]
        HRESULT Enabled([out, retval] VARIANT_BOOL* pvarfEnabled);
        [id(0x60040005), propput, helpcontext(0x00000bbd)]
        HRESULT Enabled([in] VARIANT_BOOL pvarfEnabled);
        [id(0x60040007), helpcontext(0x00000bbe)]
        HRESULT FindControl(
                        [in, optional] VARIANT Type, 
                        [in, optional] VARIANT Id, 
                        [in, optional] VARIANT Tag, 
                        [in, optional] VARIANT Visible, 
                        [in, optional] VARIANT Recursive, 
                        [out, retval] CommandBarControl** ppcbc);
        [id(0x60040008), propget, helpcontext(0x00000bbf)]
        HRESULT Height([out, retval] int* pdy);
        [id(0x60040008), propput, helpcontext(0x00000bbf)]
        HRESULT Height([in] int pdy);
        [id(0x6004000a), propget, helpcontext(0x00000bc0)]
        HRESULT Index([out, retval] int* pi);
        [id(0x6004000b), propget, hidden]
        HRESULT InstanceId([out, retval] long* pid);
        [id(0x6004000c), propget, helpcontext(0x00000bc1)]
        HRESULT Left([out, retval] int* pxpLeft);
        [id(0x6004000c), propput, helpcontext(0x00000bc1)]
        HRESULT Left([in] int pxpLeft);
        [id(0x6004000e), propget, helpcontext(0x00000bc2)]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x6004000e), propput, helpcontext(0x00000bc2)]
        HRESULT Name([in] BSTR pbstrName);
        [id(0x60040010), propget, helpcontext(0x00000bc3)]
        HRESULT NameLocal([out, retval] BSTR* pbstrNameLocal);
        [id(0x60040010), propput, helpcontext(0x00000bc3)]
        HRESULT NameLocal([in] BSTR pbstrNameLocal);
        [id(0x60040012), propget, helpcontext(0x00000bc4)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x60040013), propget, helpcontext(0x00000bc5)]
        HRESULT Position([out, retval] MsoBarPosition* ppos);
        [id(0x60040013), propput, helpcontext(0x00000bc5)]
        HRESULT Position([in] MsoBarPosition ppos);
        [id(0x60040015), propget, helpcontext(0x00000bc6)]
        HRESULT RowIndex([out, retval] int* piRow);
        [id(0x60040015), propput, helpcontext(0x00000bc6)]
        HRESULT RowIndex([in] int piRow);
        [id(0x60040017), propget, helpcontext(0x00000bc7)]
        HRESULT Protection([out, retval] MsoBarProtection* pprot);
        [id(0x60040017), propput, helpcontext(0x00000bc7)]
        HRESULT Protection([in] MsoBarProtection pprot);
        [id(0x60040019), helpcontext(0x00000bc8)]
        HRESULT Reset();
        [id(0x6004001a), helpcontext(0x00000bc9)]
        HRESULT ShowPopup(
                        [in, optional] VARIANT x, 
                        [in, optional] VARIANT y);
        [id(0x6004001b), propget, helpcontext(0x00000bca)]
        HRESULT Top([out, retval] int* pypTop);
        [id(0x6004001b), propput, helpcontext(0x00000bca)]
        HRESULT Top([in] int pypTop);
        [id(0x6004001d), propget, helpcontext(0x00000bcb)]
        HRESULT Type([out, retval] MsoBarType* ptype);
        [id(0x6004001e), propget, helpcontext(0x00000bcc)]
        HRESULT Visible([out, retval] VARIANT_BOOL* pvarfVisible);
        [id(0x6004001e), propput, helpcontext(0x00000bcc)]
        HRESULT Visible([in] VARIANT_BOOL pvarfVisible);
        [id(0x60040020), propget, helpcontext(0x00000bcd)]
        HRESULT Width([out, retval] int* pdx);
        [id(0x60040020), propput, helpcontext(0x00000bcd)]
        HRESULT Width([in] int pdx);
        [id(0x60040022), propget, helpcontext(0x00000bce)]
        HRESULT AdaptiveMenu([out, retval] VARIANT_BOOL* pvarfAdaptiveMenu);
        [id(0x60040022), propput, helpcontext(0x00000bce)]
        HRESULT AdaptiveMenu([in] VARIANT_BOOL pvarfAdaptiveMenu);
        [id(0x60040024), propget, hidden]
        HRESULT Id([out, retval] int* pid);
        [id(0x60040025), propget, hidden]
        HRESULT InstanceIdPtr([out, retval] VARIANT* pvarPitb);
    };

    [
      odl,
      uuid(000C0306-0000-0000-C000-000000000046),
      helpcontext(0x00000fa0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CommandBarControls : _IMsoDispObj {
        [id(0x60030000), helpcontext(0x00000fa1)]
        HRESULT Add(
                        [in, optional] VARIANT Type, 
                        [in, optional] VARIANT Id, 
                        [in, optional] VARIANT Parameter, 
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT Temporary, 
                        [out, retval] CommandBarControl** ppcbc);
        [id(0x60030001), propget, helpcontext(0x00000fa2)]
        HRESULT Count([out, retval] int* pcToolbarControls);
        [id(00000000), propget, helpcontext(0x00000fa3)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] CommandBarControl** ppcbc);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
        [id(0x60030004), propget, helpcontext(0x00000fa4)]
        HRESULT Parent([out, retval] CommandBar** ppcb);
    };

    [
      odl,
      uuid(000C0308-0000-0000-C000-000000000046),
      helpcontext(0x00001388),
      dual,
      oleautomation
    ]
    interface CommandBarControl : _IMsoOleAccDispObj {
        [id(0x60040000), propget, helpcontext(0x00001389)]
        HRESULT BeginGroup([out, retval] VARIANT_BOOL* pvarfBeginGroup);
        [id(0x60040000), propput, helpcontext(0x00001389)]
        HRESULT BeginGroup([in] VARIANT_BOOL pvarfBeginGroup);
        [id(0x60040002), propget, helpcontext(0x0000138a)]
        HRESULT BuiltIn([out, retval] VARIANT_BOOL* pvarfBuiltIn);
        [id(0x60040003), propget, helpcontext(0x0000138b)]
        HRESULT Caption([out, retval] BSTR* pbstrCaption);
        [id(0x60040003), propput, helpcontext(0x0000138b)]
        HRESULT Caption([in] BSTR pbstrCaption);
        [id(0x60040005), propget, hidden]
        HRESULT Control([out, retval] IDispatch** ppidisp);
        [id(0x60040006), helpcontext(0x0000138c)]
        HRESULT Copy(
                        [in, optional] VARIANT Bar, 
                        [in, optional] VARIANT Before, 
                        [out, retval] CommandBarControl** ppcbc);
        [id(0x60040007), helpcontext(0x0000138d)]
        HRESULT Delete([in, optional] VARIANT Temporary);
        [id(0x60040008), propget, helpcontext(0x0000138e)]
        HRESULT DescriptionText([out, retval] BSTR* pbstrText);
        [id(0x60040008), propput, helpcontext(0x0000138e)]
        HRESULT DescriptionText([in] BSTR pbstrText);
        [id(0x6004000a), propget, helpcontext(0x0000138f)]
        HRESULT Enabled([out, retval] VARIANT_BOOL* pvarfEnabled);
        [id(0x6004000a), propput, helpcontext(0x0000138f)]
        HRESULT Enabled([in] VARIANT_BOOL pvarfEnabled);
        [id(0x6004000c), helpcontext(0x00001390)]
        HRESULT Execute();
        [id(0x6004000d), propget, helpcontext(0x00001391)]
        HRESULT Height([out, retval] int* pdy);
        [id(0x6004000d), propput, helpcontext(0x00001391)]
        HRESULT Height([in] int pdy);
        [id(0x6004000f), propget, helpcontext(0x00001392)]
        HRESULT HelpContextId([out, retval] int* pid);
        [id(0x6004000f), propput, helpcontext(0x00001392)]
        HRESULT HelpContextId([in] int pid);
        [id(0x60040011), propget, helpcontext(0x00001393)]
        HRESULT HelpFile([out, retval] BSTR* pbstrFilename);
        [id(0x60040011), propput, helpcontext(0x00001393)]
        HRESULT HelpFile([in] BSTR pbstrFilename);
        [id(0x60040013), propget, helpcontext(0x00001394)]
        HRESULT Id([out, retval] int* pid);
        [id(0x60040014), propget, helpcontext(0x00001395)]
        HRESULT Index([out, retval] int* pi);
        [id(0x60040015), propget, hidden]
        HRESULT InstanceId([out, retval] long* pid);
        [id(0x60040016), helpcontext(0x00001396)]
        HRESULT Move(
                        [in, optional] VARIANT Bar, 
                        [in, optional] VARIANT Before, 
                        [out, retval] CommandBarControl** ppcbc);
        [id(0x60040017), propget, helpcontext(0x00001397)]
        HRESULT Left([out, retval] int* px);
        [id(0x60040018), propget, helpcontext(0x00001398)]
        HRESULT OLEUsage([out, retval] MsoControlOLEUsage* pcou);
        [id(0x60040018), propput, helpcontext(0x00001398)]
        HRESULT OLEUsage([in] MsoControlOLEUsage pcou);
        [id(0x6004001a), propget, helpcontext(0x00001399)]
        HRESULT OnAction([out, retval] BSTR* pbstrOnAction);
        [id(0x6004001a), propput, helpcontext(0x00001399)]
        HRESULT OnAction([in] BSTR pbstrOnAction);
        [id(0x6004001c), propget, helpcontext(0x0000139a)]
        HRESULT Parent([out, retval] CommandBar** ppcb);
        [id(0x6004001d), propget, helpcontext(0x0000139b)]
        HRESULT Parameter([out, retval] BSTR* pbstrParam);
        [id(0x6004001d), propput, helpcontext(0x0000139b)]
        HRESULT Parameter([in] BSTR pbstrParam);
        [id(0x6004001f), propget, helpcontext(0x0000139c)]
        HRESULT Priority([out, retval] int* pnPri);
        [id(0x6004001f), propput, helpcontext(0x0000139c)]
        HRESULT Priority([in] int pnPri);
        [id(0x60040021), helpcontext(0x0000139d)]
        HRESULT Reset();
        [id(0x60040022), helpcontext(0x0000139e)]
        HRESULT SetFocus();
        [id(0x60040023), propget, helpcontext(0x0000139f)]
        HRESULT Tag([out, retval] BSTR* pbstrTag);
        [id(0x60040023), propput, helpcontext(0x0000139f)]
        HRESULT Tag([in] BSTR pbstrTag);
        [id(0x60040025), propget, helpcontext(0x000013a0)]
        HRESULT TooltipText([out, retval] BSTR* pbstrTooltip);
        [id(0x60040025), propput, helpcontext(0x000013a0)]
        HRESULT TooltipText([in] BSTR pbstrTooltip);
        [id(0x60040027), propget, helpcontext(0x000013a1)]
        HRESULT Top([out, retval] int* py);
        [id(0x60040028), propget, helpcontext(0x000013a2)]
        HRESULT Type([out, retval] MsoControlType* ptype);
        [id(0x60040029), propget, helpcontext(0x000013a3)]
        HRESULT Visible([out, retval] VARIANT_BOOL* pvarfVisible);
        [id(0x60040029), propput, helpcontext(0x000013a3)]
        HRESULT Visible([in] VARIANT_BOOL pvarfVisible);
        [id(0x6004002b), propget, helpcontext(0x000013a4)]
        HRESULT Width([out, retval] int* pdx);
        [id(0x6004002b), propput, helpcontext(0x000013a4)]
        HRESULT Width([in] int pdx);
        [id(0x6004002d), propget, helpcontext(0x000013a5)]
        HRESULT IsPriorityDropped([out, retval] VARIANT_BOOL* pvarfDropped);
        [id(0x6004002e), hidden]
        HRESULT Reserved1();
        [id(0x6004002f), hidden]
        HRESULT Reserved2();
        [id(0x60040030), hidden]
        HRESULT Reserved3();
        [id(0x60040031), hidden]
        HRESULT Reserved4();
        [id(0x60040032), hidden]
        HRESULT Reserved5();
        [id(0x60040033), hidden]
        HRESULT Reserved6();
        [id(0x60040034), hidden]
        HRESULT Reserved7();
    };

    [
      odl,
      uuid(000C030E-0000-0000-C000-000000000046),
      helpcontext(0x00001770),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _CommandBarButton : CommandBarControl {
        [id(0x60050000), propget, helpcontext(0x00001771)]
        HRESULT BuiltInFace([out, retval] VARIANT_BOOL* pvarfBuiltIn);
        [id(0x60050000), propput, helpcontext(0x00001771)]
        HRESULT BuiltInFace([in] VARIANT_BOOL pvarfBuiltIn);
        [id(0x60050002), helpcontext(0x00001772)]
        HRESULT CopyFace();
        [id(0x60050003), propget, helpcontext(0x00001773)]
        HRESULT FaceId([out, retval] int* pid);
        [id(0x60050003), propput, helpcontext(0x00001773)]
        HRESULT FaceId([in] int pid);
        [id(0x60050005), helpcontext(0x00001774)]
        HRESULT PasteFace();
        [id(0x60050006), propget, helpcontext(0x00001775)]
        HRESULT ShortcutText([out, retval] BSTR* pbstrText);
        [id(0x60050006), propput, helpcontext(0x00001775)]
        HRESULT ShortcutText([in] BSTR pbstrText);
        [id(0x60050008), propget, helpcontext(0x00001776)]
        HRESULT State([out, retval] MsoButtonState* pstate);
        [id(0x60050008), propput, helpcontext(0x00001776)]
        HRESULT State([in] MsoButtonState pstate);
        [id(0x6005000a), propget, helpcontext(0x00001777)]
        HRESULT Style([out, retval] MsoButtonStyle* pstyle);
        [id(0x6005000a), propput, helpcontext(0x00001777)]
        HRESULT Style([in] MsoButtonStyle pstyle);
        [id(0x6005000c), propget, helpcontext(0x00001778)]
        HRESULT HyperlinkType([out, retval] MsoCommandBarButtonHyperlinkType* phlType);
        [id(0x6005000c), propput, helpcontext(0x00001778)]
        HRESULT HyperlinkType([in] MsoCommandBarButtonHyperlinkType phlType);
        [id(0x6005000e), propget, helpcontext(0x00001779)]
        HRESULT Picture([out, retval] IPictureDisp** ppdispPicture);
        [id(0x6005000e), propput, helpcontext(0x00001779)]
        HRESULT Picture([in] IPictureDisp* ppdispPicture);
        [id(0x60050010), propget, helpcontext(0x0000177a)]
        HRESULT Mask([out, retval] IPictureDisp** ppipictdispMask);
        [id(0x60050010), propput, helpcontext(0x0000177a)]
        HRESULT Mask([in] IPictureDisp* ppipictdispMask);
        [id(0x60050012), propget, hidden]
        HRESULT InstanceIdPtr([out, retval] VARIANT* pvarPic);
    };

    [
      odl,
      uuid(000C030A-0000-0000-C000-000000000046),
      helpcontext(0x00001b58),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CommandBarPopup : CommandBarControl {
        [id(0x60050000), propget, helpcontext(0x00001b59)]
        HRESULT CommandBar([out, retval] CommandBar** ppcb);
        [id(0x60050001), propget, helpcontext(0x00001b5a)]
        HRESULT Controls([out, retval] CommandBarControls** ppcbcs);
        [id(0x60050002), propget, helpcontext(0x00001b5b)]
        HRESULT OLEMenuGroup([out, retval] MsoOLEMenuGroup* pomg);
        [id(0x60050002), propput, helpcontext(0x00001b5b)]
        HRESULT OLEMenuGroup([in] MsoOLEMenuGroup pomg);
        [id(0x60050004), propget, hidden]
        HRESULT InstanceIdPtr([out, retval] VARIANT* pvarPic);
    };

    [
      odl,
      uuid(000C030C-0000-0000-C000-000000000046),
      helpcontext(0x00001f40),
      dual,
      nonextensible,
      oleautomation
    ]
    interface _CommandBarComboBox : CommandBarControl {
        [id(0x60050000), helpcontext(0x00001f41)]
        HRESULT AddItem(
                        [in] BSTR Text, 
                        [in, optional] VARIANT Index);
        [id(0x60050001), helpcontext(0x00001f42)]
        HRESULT Clear();
        [id(0x60050002), propget, helpcontext(0x00001f43)]
        HRESULT DropDownLines([out, retval] int* pcLines);
        [id(0x60050002), propput, helpcontext(0x00001f43)]
        HRESULT DropDownLines([in] int pcLines);
        [id(0x60050004), propget, helpcontext(0x00001f44)]
        HRESULT DropDownWidth([out, retval] int* pdx);
        [id(0x60050004), propput, helpcontext(0x00001f44)]
        HRESULT DropDownWidth([in] int pdx);
        [id(0x60050006), propget, helpcontext(0x00001f45)]
        HRESULT List(
                        [in] int Index, 
                        [out, retval] BSTR* pbstrItem);
        [id(0x60050006), propput, helpcontext(0x00001f45)]
        HRESULT List(
                        [in] int Index, 
                        [in] BSTR pbstrItem);
        [id(0x60050008), propget, helpcontext(0x00001f46)]
        HRESULT ListCount([out, retval] int* pcItems);
        [id(0x60050009), propget, helpcontext(0x00001f47)]
        HRESULT ListHeaderCount([out, retval] int* pcItems);
        [id(0x60050009), propput, helpcontext(0x00001f47)]
        HRESULT ListHeaderCount([in] int pcItems);
        [id(0x6005000b), propget, helpcontext(0x00001f48)]
        HRESULT ListIndex([out, retval] int* pi);
        [id(0x6005000b), propput, helpcontext(0x00001f48)]
        HRESULT ListIndex([in] int pi);
        [id(0x6005000d), helpcontext(0x00001f49)]
        HRESULT RemoveItem([in] int Index);
        [id(0x6005000e), propget, helpcontext(0x00001f4a)]
        HRESULT Style([out, retval] MsoComboStyle* pstyle);
        [id(0x6005000e), propput, helpcontext(0x00001f4a)]
        HRESULT Style([in] MsoComboStyle pstyle);
        [id(0x60050010), propget, helpcontext(0x00001f4b)]
        HRESULT Text([out, retval] BSTR* pbstrText);
        [id(0x60050010), propput, helpcontext(0x00001f4b)]
        HRESULT Text([in] BSTR pbstrText);
        [id(0x60050012), propget, hidden]
        HRESULT InstanceIdPtr([out, retval] VARIANT* pvarPic);
    };

    [
      odl,
      uuid(000C030D-0000-0000-C000-000000000046),
      helpcontext(0x00002328),
      dual,
      nonextensible,
      oleautomation
    ]
    interface _CommandBarActiveX : CommandBarControl {
        [id(0x60050000), propget, helpcontext(0x00002329)]
        HRESULT ControlCLSID([out, retval] BSTR* pbstrClsid);
        [id(0x60050000), propput, helpcontext(0x00002329)]
        HRESULT ControlCLSID([in] BSTR pbstrClsid);
        [id(0x60050002), propget, helpcontext(0x0000232a)]
        HRESULT QueryControlInterface(
                        [in] BSTR bstrIid, 
                        [out, retval] IUnknown** ppUnk);
        [id(0x60050003), helpcontext(0x0000232b)]
        HRESULT SetInnerObjectFactory([in] IUnknown* pUnk);
        [id(0x60050004), helpcontext(0x0000232c)]
        HRESULT EnsureControl();
        [id(0x60050005), propput, helpcontext(0x0000232d)]
        HRESULT InitWith([in] IUnknown* rhs);
        [id(0x60050006), propget, hidden]
        HRESULT InstanceIdPtr([out, retval] VARIANT* pvarPic);
    };

    [
      odl,
      uuid(000C0310-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface Adjustments : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Count([out, retval] int* Count);
        [id(00000000), propget]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] long*  Val);
        [id(00000000), propput]
        HRESULT Item(
                        [in] int Index, 
                        [in] long Val);
    };

    [
      odl,
      uuid(000C0311-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface CalloutFormat : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a)]
        HRESULT AutomaticLength();
        [id(0x0000000b)]
        HRESULT CustomDrop([in] long Drop);
        [id(0x0000000c)]
        HRESULT CustomLength([in] long Length);
        [id(0x0000000d)]
        HRESULT PresetDrop([in] MsoCalloutDropType DropType);
        [id(0x00000064), propget]
        HRESULT Accent([out, retval] MsoTriState* Accent);
        [id(0x00000064), propput]
        HRESULT Accent([in] MsoTriState Accent);
        [id(0x00000065), propget]
        HRESULT Angle([out, retval] MsoCalloutAngleType* Angle);
        [id(0x00000065), propput]
        HRESULT Angle([in] MsoCalloutAngleType Angle);
        [id(0x00000066), propget]
        HRESULT AutoAttach([out, retval] MsoTriState* AutoAttach);
        [id(0x00000066), propput]
        HRESULT AutoAttach([in] MsoTriState AutoAttach);
        [id(0x00000067), propget]
        HRESULT AutoLength([out, retval] MsoTriState* AutoLength);
        [id(0x00000068), propget]
        HRESULT Border([out, retval] MsoTriState* Border);
        [id(0x00000068), propput]
        HRESULT Border([in] MsoTriState Border);
        [id(0x00000069), propget]
        HRESULT Drop([out, retval] long*  Drop);
        [id(0x0000006a), propget]
        HRESULT DropType([out, retval] MsoCalloutDropType* DropType);
        [id(0x0000006b), propget]
        HRESULT Gap([out, retval] long*  Gap);
        [id(0x0000006b), propput]
        HRESULT Gap([in] long Gap);
        [id(0x0000006c), propget]
        HRESULT Length([out, retval] long*  Length);
        [id(0x0000006d), propget]
        HRESULT Type([out, retval] MsoCalloutType* Type);
        [id(0x0000006d), propput]
        HRESULT Type([in] MsoCalloutType Type);
    };

    [
      odl,
      uuid(000C0312-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ColorFormat : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), propget]
        HRESULT RGB([out, retval] MsoRGBType* RGB);
        [id(00000000), propput]
        HRESULT RGB([in] MsoRGBType RGB);
        [id(0x00000064), propget]
        HRESULT SchemeColor([out, retval] int* SchemeColor);
        [id(0x00000064), propput]
        HRESULT SchemeColor([in] int SchemeColor);
        [id(0x00000065), propget]
        HRESULT Type([out, retval] MsoColorType* Type);
        [id(0x00000067), propget]
        HRESULT TintAndShade([out, retval] long*  pValue);
        [id(0x00000067), propput]
        HRESULT TintAndShade([in] long pValue);
        [id(0x00000068), propget]
        HRESULT ObjectThemeColor([out, retval] MsoThemeColorIndex* ObjectThemeColor);
        [id(0x00000068), propput]
        HRESULT ObjectThemeColor([in] MsoThemeColorIndex ObjectThemeColor);
        [id(0x00000069), propget]
        HRESULT Brightness([out, retval] long*  Brightness);
        [id(0x00000069), propput]
        HRESULT Brightness([in] long Brightness);
    };

    [
      odl,
      uuid(000C0313-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ConnectorFormat : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a)]
        HRESULT BeginConnect(
                        [in] Shape* ConnectedShape, 
                        [in] int ConnectionSite);
        [id(0x0000000b)]
        HRESULT BeginDisconnect();
        [id(0x0000000c)]
        HRESULT EndConnect(
                        [in] Shape* ConnectedShape, 
                        [in] int ConnectionSite);
        [id(0x0000000d)]
        HRESULT EndDisconnect();
        [id(0x00000064), propget]
        HRESULT BeginConnected([out, retval] MsoTriState* BeginConnected);
        [id(0x00000065), propget]
        HRESULT BeginConnectedShape([out, retval] Shape** BeginConnectedShape);
        [id(0x00000066), propget]
        HRESULT BeginConnectionSite([out, retval] int* BeginConnectionSite);
        [id(0x00000067), propget]
        HRESULT EndConnected([out, retval] MsoTriState* EndConnected);
        [id(0x00000068), propget]
        HRESULT EndConnectedShape([out, retval] Shape** EndConnectedShape);
        [id(0x00000069), propget]
        HRESULT EndConnectionSite([out, retval] int* EndConnectionSite);
        [id(0x0000006a), propget]
        HRESULT Type([out, retval] MsoConnectorType* Type);
        [id(0x0000006a), propput]
        HRESULT Type([in] MsoConnectorType Type);
    };

    [
      odl,
      uuid(000C0314-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface FillFormat : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a)]
        HRESULT Background();
        [id(0x0000000b)]
        HRESULT OneColorGradient(
                        [in] MsoGradientStyle Style, 
                        [in] int Variant, 
                        [in] long Degree);
        [id(0x0000000c)]
        HRESULT Patterned([in] MsoPatternType Pattern);
        [id(0x0000000d)]
        HRESULT PresetGradient(
                        [in] MsoGradientStyle Style, 
                        [in] int Variant, 
                        [in] MsoPresetGradientType PresetGradientType);
        [id(0x0000000e)]
        HRESULT PresetTextured([in] MsoPresetTexture PresetTexture);
        [id(0x0000000f)]
        HRESULT Solid();
        [id(0x00000010)]
        HRESULT TwoColorGradient(
                        [in] MsoGradientStyle Style, 
                        [in] int Variant);
        [id(0x00000011)]
        HRESULT UserPicture([in] BSTR PictureFile);
        [id(0x00000012)]
        HRESULT UserTextured([in] BSTR TextureFile);
        [id(0x00000064), propget]
        HRESULT BackColor([out, retval] ColorFormat** BackColor);
        [id(0x00000064), propput]
        HRESULT BackColor([in] ColorFormat* BackColor);
        [id(0x00000065), propget]
        HRESULT ForeColor([out, retval] ColorFormat** ForeColor);
        [id(0x00000065), propput]
        HRESULT ForeColor([in] ColorFormat* ForeColor);
        [id(0x00000066), propget]
        HRESULT GradientColorType([out, retval] MsoGradientColorType* GradientColorType);
        [id(0x00000067), propget]
        HRESULT GradientDegree([out, retval] long*  GradientDegree);
        [id(0x00000068), propget]
        HRESULT GradientStyle([out, retval] MsoGradientStyle* GradientStyle);
        [id(0x00000069), propget]
        HRESULT GradientVariant([out, retval] int* GradientVariant);
        [id(0x0000006a), propget]
        HRESULT Pattern([out, retval] MsoPatternType* Pattern);
        [id(0x0000006b), propget]
        HRESULT PresetGradientType([out, retval] MsoPresetGradientType* PresetGradientType);
        [id(0x0000006c), propget]
        HRESULT PresetTexture([out, retval] MsoPresetTexture* PresetTexture);
        [id(0x0000006d), propget]
        HRESULT TextureName([out, retval] BSTR* TextureName);
        [id(0x0000006e), propget]
        HRESULT TextureType([out, retval] MsoTextureType* TextureType);
        [id(0x0000006f), propget]
        HRESULT Transparency([out, retval] long*  Transparency);
        [id(0x0000006f), propput]
        HRESULT Transparency([in] long Transparency);
        [id(0x00000070), propget]
        HRESULT Type([out, retval] MsoFillType* Type);
        [id(0x00000071), propget]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x00000071), propput]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x00000072), propget]
        HRESULT GradientStops([out, retval] GradientStops** GradientStops);
        [id(0x00000073), propget]
        HRESULT TextureOffsetX([out, retval] long*  TextureOffsetX);
        [id(0x00000073), propput]
        HRESULT TextureOffsetX([in] long TextureOffsetX);
        [id(0x00000074), propget]
        HRESULT TextureOffsetY([out, retval] long*  TextureOffsetY);
        [id(0x00000074), propput]
        HRESULT TextureOffsetY([in] long TextureOffsetY);
        [id(0x00000075), propget]
        HRESULT TextureAlignment([out, retval] MsoTextureAlignment* TextureAlignment);
        [id(0x00000075), propput]
        HRESULT TextureAlignment([in] MsoTextureAlignment TextureAlignment);
        [id(0x00000076), propget]
        HRESULT TextureHorizontalScale([out, retval] long*  HorizontalScale);
        [id(0x00000076), propput]
        HRESULT TextureHorizontalScale([in] long HorizontalScale);
        [id(0x00000077), propget]
        HRESULT TextureVerticalScale([out, retval] long*  VerticalScale);
        [id(0x00000077), propput]
        HRESULT TextureVerticalScale([in] long VerticalScale);
        [id(0x00000078), propget]
        HRESULT TextureTile([out, retval] MsoTriState* TextureTile);
        [id(0x00000078), propput]
        HRESULT TextureTile([in] MsoTriState TextureTile);
        [id(0x00000079), propget]
        HRESULT RotateWithObject([out, retval] MsoTriState* RotateWithObject);
        [id(0x00000079), propput]
        HRESULT RotateWithObject([in] MsoTriState RotateWithObject);
        [id(0x0000007a), propget]
        HRESULT PictureEffects([out, retval] PictureEffects** PictureEffects);
        [id(0x0000007b), propget]
        HRESULT GradientAngle([out, retval] long*  GradientAngle);
        [id(0x0000007b), propput]
        HRESULT GradientAngle([in] long GradientAngle);
    };

    [
      odl,
      uuid(000C0315-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface FreeformBuilder : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a)]
        HRESULT AddNodes(
                        [in] MsoSegmentType SegmentType, 
                        [in] MsoEditingType EditingType, 
                        [in] long X1, 
                        [in] long Y1, 
                        [in, optional, defaultvalue(0)] long X2, 
                        [in, optional, defaultvalue(0)] long Y2, 
                        [in, optional, defaultvalue(0)] long X3, 
                        [in, optional, defaultvalue(0)] long Y3);
        [id(0x0000000b)]
        HRESULT ConvertToShape([out, retval] Shape** Freeform);
    };

    [
      odl,
      uuid(000C0316-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface GroupShapes : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x00000002), propget]
        HRESULT Count([out, retval] int* pnShapes);
        [id(00000000)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] Shape** Item);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
        [id(0x0000000a)]
        HRESULT Range(
                        [in] VARIANT Index, 
                        [out, retval] ShapeRange** Range);
    };

    [
      odl,
      uuid(000C0317-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface LineFormat : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000064), propget]
        HRESULT BackColor([out, retval] ColorFormat** BackColor);
        [id(0x00000064), propput]
        HRESULT BackColor([in] ColorFormat* BackColor);
        [id(0x00000065), propget]
        HRESULT BeginArrowheadLength([out, retval] MsoArrowheadLength* BeginArrowheadLength);
        [id(0x00000065), propput]
        HRESULT BeginArrowheadLength([in] MsoArrowheadLength BeginArrowheadLength);
        [id(0x00000066), propget]
        HRESULT BeginArrowheadStyle([out, retval] MsoArrowheadStyle* BeginArrowheadStyle);
        [id(0x00000066), propput]
        HRESULT BeginArrowheadStyle([in] MsoArrowheadStyle BeginArrowheadStyle);
        [id(0x00000067), propget]
        HRESULT BeginArrowheadWidth([out, retval] MsoArrowheadWidth* BeginArrowheadWidth);
        [id(0x00000067), propput]
        HRESULT BeginArrowheadWidth([in] MsoArrowheadWidth BeginArrowheadWidth);
        [id(0x00000068), propget]
        HRESULT DashStyle([out, retval] MsoLineDashStyle* DashStyle);
        [id(0x00000068), propput]
        HRESULT DashStyle([in] MsoLineDashStyle DashStyle);
        [id(0x00000069), propget]
        HRESULT EndArrowheadLength([out, retval] MsoArrowheadLength* EndArrowheadLength);
        [id(0x00000069), propput]
        HRESULT EndArrowheadLength([in] MsoArrowheadLength EndArrowheadLength);
        [id(0x0000006a), propget]
        HRESULT EndArrowheadStyle([out, retval] MsoArrowheadStyle* EndArrowheadStyle);
        [id(0x0000006a), propput]
        HRESULT EndArrowheadStyle([in] MsoArrowheadStyle EndArrowheadStyle);
        [id(0x0000006b), propget]
        HRESULT EndArrowheadWidth([out, retval] MsoArrowheadWidth* EndArrowheadWidth);
        [id(0x0000006b), propput]
        HRESULT EndArrowheadWidth([in] MsoArrowheadWidth EndArrowheadWidth);
        [id(0x0000006c), propget]
        HRESULT ForeColor([out, retval] ColorFormat** ForeColor);
        [id(0x0000006c), propput]
        HRESULT ForeColor([in] ColorFormat* ForeColor);
        [id(0x0000006d), propget]
        HRESULT Pattern([out, retval] MsoPatternType* Pattern);
        [id(0x0000006d), propput]
        HRESULT Pattern([in] MsoPatternType Pattern);
        [id(0x0000006e), propget]
        HRESULT Style([out, retval] MsoLineStyle* Style);
        [id(0x0000006e), propput]
        HRESULT Style([in] MsoLineStyle Style);
        [id(0x0000006f), propget]
        HRESULT Transparency([out, retval] long*  Transparency);
        [id(0x0000006f), propput]
        HRESULT Transparency([in] long Transparency);
        [id(0x00000070), propget]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x00000070), propput]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x00000071), propget]
        HRESULT Weight([out, retval] long*  Weight);
        [id(0x00000071), propput]
        HRESULT Weight([in] long Weight);
        [id(0x00000072), propget]
        HRESULT InsetPen([out, retval] MsoTriState* InsetPen);
        [id(0x00000072), propput]
        HRESULT InsetPen([in] MsoTriState InsetPen);
    };

    [
      odl,
      uuid(000C0318-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShapeNode : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000064), propget]
        HRESULT EditingType([out, retval] MsoEditingType* EditingType);
        [id(0x00000065), propget]
        HRESULT Points([out, retval] VARIANT* Points);
        [id(0x00000066), propget]
        HRESULT SegmentType([out, retval] MsoSegmentType* SegmentType);
    };

    [
      odl,
      uuid(000C0319-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShapeNodes : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Count([out, retval] int* Count);
        [id(00000000)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] ShapeNode** Item);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(0x0000000b)]
        HRESULT Delete([in] int Index);
        [id(0x0000000c)]
        HRESULT Insert(
                        [in] int Index, 
                        [in] MsoSegmentType SegmentType, 
                        [in] MsoEditingType EditingType, 
                        [in] long X1, 
                        [in] long Y1, 
                        [in, optional, defaultvalue(0)] long X2, 
                        [in, optional, defaultvalue(0)] long Y2, 
                        [in, optional, defaultvalue(0)] long X3, 
                        [in, optional, defaultvalue(0)] long Y3);
        [id(0x0000000d)]
        HRESULT SetEditingType(
                        [in] int Index, 
                        [in] MsoEditingType EditingType);
        [id(0x0000000e)]
        HRESULT SetPosition(
                        [in] int Index, 
                        [in] long X1, 
                        [in] long Y1);
        [id(0x0000000f)]
        HRESULT SetSegmentType(
                        [in] int Index, 
                        [in] MsoSegmentType SegmentType);
    };

    [
      odl,
      uuid(000C031A-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface PictureFormat : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a)]
        HRESULT IncrementBrightness([in] long Increment);
        [id(0x0000000b)]
        HRESULT IncrementContrast([in] long Increment);
        [id(0x00000064), propget]
        HRESULT Brightness([out, retval] long*  Brightness);
        [id(0x00000064), propput]
        HRESULT Brightness([in] long Brightness);
        [id(0x00000065), propget]
        HRESULT ColorType([out, retval] MsoPictureColorType* ColorType);
        [id(0x00000065), propput]
        HRESULT ColorType([in] MsoPictureColorType ColorType);
        [id(0x00000066), propget]
        HRESULT Contrast([out, retval] long*  Contrast);
        [id(0x00000066), propput]
        HRESULT Contrast([in] long Contrast);
        [id(0x00000067), propget]
        HRESULT CropBottom([out, retval] long*  CropBottom);
        [id(0x00000067), propput]
        HRESULT CropBottom([in] long CropBottom);
        [id(0x00000068), propget]
        HRESULT CropLeft([out, retval] long*  CropLeft);
        [id(0x00000068), propput]
        HRESULT CropLeft([in] long CropLeft);
        [id(0x00000069), propget]
        HRESULT CropRight([out, retval] long*  CropRight);
        [id(0x00000069), propput]
        HRESULT CropRight([in] long CropRight);
        [id(0x0000006a), propget]
        HRESULT CropTop([out, retval] long*  CropTop);
        [id(0x0000006a), propput]
        HRESULT CropTop([in] long CropTop);
        [id(0x0000006b), propget]
        HRESULT TransparencyColor([out, retval] MsoRGBType* TransparencyColor);
        [id(0x0000006b), propput]
        HRESULT TransparencyColor([in] MsoRGBType TransparencyColor);
        [id(0x0000006c), propget]
        HRESULT TransparentBackground([out, retval] MsoTriState* TransparentBackground);
        [id(0x0000006c), propput]
        HRESULT TransparentBackground([in] MsoTriState TransparentBackground);
        [id(0x0000006d), propget]
        HRESULT Crop([out, retval] Crop** Crop);
    };

    [
      odl,
      uuid(000C031B-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShadowFormat : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a)]
        HRESULT IncrementOffsetX([in] long Increment);
        [id(0x0000000b)]
        HRESULT IncrementOffsetY([in] long Increment);
        [id(0x00000064), propget]
        HRESULT ForeColor([out, retval] ColorFormat** ForeColor);
        [id(0x00000064), propput]
        HRESULT ForeColor([in] ColorFormat* ForeColor);
        [id(0x00000065), propget]
        HRESULT Obscured([out, retval] MsoTriState* Obscured);
        [id(0x00000065), propput]
        HRESULT Obscured([in] MsoTriState Obscured);
        [id(0x00000066), propget]
        HRESULT OffsetX([out, retval] long*  OffsetX);
        [id(0x00000066), propput]
        HRESULT OffsetX([in] long OffsetX);
        [id(0x00000067), propget]
        HRESULT OffsetY([out, retval] long*  OffsetY);
        [id(0x00000067), propput]
        HRESULT OffsetY([in] long OffsetY);
        [id(0x00000068), propget]
        HRESULT Transparency([out, retval] long*  Transparency);
        [id(0x00000068), propput]
        HRESULT Transparency([in] long Transparency);
        [id(0x00000069), propget]
        HRESULT Type([out, retval] MsoShadowType* Type);
        [id(0x00000069), propput]
        HRESULT Type([in] MsoShadowType Type);
        [id(0x0000006a), propget]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x0000006a), propput]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x0000006b), propget]
        HRESULT Style([out, retval] MsoShadowStyle* ShadowStyle);
        [id(0x0000006b), propput]
        HRESULT Style([in] MsoShadowStyle ShadowStyle);
        [id(0x0000006c), propget]
        HRESULT Blur([out, retval] long*  Blur);
        [id(0x0000006c), propput]
        HRESULT Blur([in] long Blur);
        [id(0x0000006d), propget]
        HRESULT Size([out, retval] long*  Size);
        [id(0x0000006d), propput]
        HRESULT Size([in] long Size);
        [id(0x0000006e), propget]
        HRESULT RotateWithShape([out, retval] MsoTriState* RotateWithShape);
        [id(0x0000006e), propput]
        HRESULT RotateWithShape([in] MsoTriState RotateWithShape);
    };

    typedef enum {
        msoScriptLanguageJava = 1,
        msoScriptLanguageVisualBasic = 2,
        msoScriptLanguageASP = 3,
        msoScriptLanguageOther = 4
    } MsoScriptLanguage;

    typedef enum {
        msoScriptLocationInHead = 1,
        msoScriptLocationInBody = 2
    } MsoScriptLocation;

    [
      odl,
      uuid(000C0341-0000-0000-C000-000000000046),
      helpcontext(0x00035390),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface Script : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x00035391)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x60030001), propget, helpcontext(0x00035392)]
        HRESULT Extended([out, retval] BSTR* Extended);
        [id(0x60030001), propput, helpcontext(0x00035392)]
        HRESULT Extended([in] BSTR Extended);
        [id(0x60030003), propget, helpcontext(0x00035394)]
        HRESULT Id([out, retval] BSTR* Id);
        [id(0x60030003), propput, helpcontext(0x00035394)]
        HRESULT Id([in] BSTR Id);
        [id(0x60030005), propget, helpcontext(0x00035396)]
        HRESULT Language([out, retval] MsoScriptLanguage* Language);
        [id(0x60030005), propput, helpcontext(0x00035396)]
        HRESULT Language([in] MsoScriptLanguage Language);
        [id(0x60030007), propget, helpcontext(0x00035398)]
        HRESULT Location([out, retval] MsoScriptLocation* Location);
        [id(0x60030008), helpcontext(0x00035399)]
        HRESULT Delete();
        [id(0x60030009), propget, helpcontext(0x0003539a)]
        HRESULT Shape([out, retval] IDispatch** Object);
        [id(00000000), propget, helpcontext(0x0003539b)]
        HRESULT ScriptText([out, retval] BSTR* Script);
        [id(00000000), propput, helpcontext(0x0003539b)]
        HRESULT ScriptText([in] BSTR Script);
    };

    [
      odl,
      uuid(000C0340-0000-0000-C000-000000000046),
      helpcontext(0x00034fa8),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface Scripts : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x00034fa9)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x60030001), propget, helpcontext(0x00034faa)]
        HRESULT Count([out, retval] long* Count);
        [id(0xfffffffc), propget, helpcontext(0x00034fab)]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(00000000), helpcontext(0x00034fac)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] Script** Item);
        [id(0x60030004), helpcontext(0x00034fad)]
        HRESULT Add(
                        [in, optional, defaultvalue(0)] IDispatch* Anchor, 
                        [in, optional, defaultvalue(2)] MsoScriptLocation Location, 
                        [in, optional, defaultvalue(2)] MsoScriptLanguage Language, 
                        [in, optional, defaultvalue("")] BSTR Id, 
                        [in, optional, defaultvalue("")] BSTR Extended, 
                        [in, optional, defaultvalue("")] BSTR ScriptText, 
                        [out, retval] Script** Add);
        [id(0x60030005), helpcontext(0x00034fae)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(000C031C-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface Shape : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a)]
        HRESULT Apply();
        [id(0x0000000b)]
        HRESULT Delete();
        [id(0x0000000c)]
        HRESULT Duplicate([out, retval] Shape** Duplicate);
        [id(0x0000000d)]
        HRESULT Flip([in] MsoFlipCmd FlipCmd);
        [id(0x0000000e)]
        HRESULT IncrementLeft([in] long Increment);
        [id(0x0000000f)]
        HRESULT IncrementRotation([in] long Increment);
        [id(0x00000010)]
        HRESULT IncrementTop([in] long Increment);
        [id(0x00000011)]
        HRESULT PickUp();
        [id(0x00000012)]
        HRESULT RerouteConnections();
        [id(0x00000013)]
        HRESULT ScaleHeight(
                        [in] long Factor, 
                        [in] MsoTriState RelativeToOriginalSize, 
                        [in, optional, defaultvalue(0)] MsoScaleFrom fScale);
        [id(0x00000014)]
        HRESULT ScaleWidth(
                        [in] long Factor, 
                        [in] MsoTriState RelativeToOriginalSize, 
                        [in, optional, defaultvalue(0)] MsoScaleFrom fScale);
        [id(0x00000015)]
        HRESULT Select([in, optional] VARIANT Replace);
        [id(0x00000016)]
        HRESULT SetShapesDefaultProperties();
        [id(0x00000017)]
        HRESULT Ungroup([out, retval] ShapeRange** Ungroup);
        [id(0x00000018)]
        HRESULT ZOrder([in] MsoZOrderCmd ZOrderCmd);
        [id(0x00000064), propget]
        HRESULT Adjustments([out, retval] Adjustments** Adjustments);
        [id(0x00000065), propget]
        HRESULT AutoShapeType([out, retval] MsoAutoShapeType* AutoShapeType);
        [id(0x00000065), propput]
        HRESULT AutoShapeType([in] MsoAutoShapeType AutoShapeType);
        [id(0x00000066), propget]
        HRESULT BlackWhiteMode([out, retval] MsoBlackWhiteMode* BlackWhiteMode);
        [id(0x00000066), propput]
        HRESULT BlackWhiteMode([in] MsoBlackWhiteMode BlackWhiteMode);
        [id(0x00000067), propget]
        HRESULT Callout([out, retval] CalloutFormat** Callout);
        [id(0x00000068), propget]
        HRESULT ConnectionSiteCount([out, retval] int* ConnectionSiteCount);
        [id(0x00000069), propget]
        HRESULT Connector([out, retval] MsoTriState* Connector);
        [id(0x0000006a), propget]
        HRESULT ConnectorFormat([out, retval] ConnectorFormat** ConnectorFormat);
        [id(0x0000006b), propget]
        HRESULT Fill([out, retval] FillFormat** Fill);
        [id(0x0000006c), propget]
        HRESULT GroupItems([out, retval] GroupShapes** GroupItems);
        [id(0x0000006d), propget]
        HRESULT Height([out, retval] long*  Height);
        [id(0x0000006d), propput]
        HRESULT Height([in] long Height);
        [id(0x0000006e), propget]
        HRESULT HorizontalFlip([out, retval] MsoTriState* HorizontalFlip);
        [id(0x0000006f), propget]
        HRESULT Left([out, retval] long*  Left);
        [id(0x0000006f), propput]
        HRESULT Left([in] long Left);
        [id(0x00000070), propget]
        HRESULT Line([out, retval] LineFormat** Line);
        [id(0x00000071), propget]
        HRESULT LockAspectRatio([out, retval] MsoTriState* LockAspectRatio);
        [id(0x00000071), propput]
        HRESULT LockAspectRatio([in] MsoTriState LockAspectRatio);
        [id(0x00000073), propget]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000073), propput]
        HRESULT Name([in] BSTR Name);
        [id(0x00000074), propget]
        HRESULT Nodes([out, retval] ShapeNodes** Nodes);
        [id(0x00000075), propget]
        HRESULT Rotation([out, retval] long*  Rotation);
        [id(0x00000075), propput]
        HRESULT Rotation([in] long Rotation);
        [id(0x00000076), propget]
        HRESULT PictureFormat([out, retval] PictureFormat** Picture);
        [id(0x00000077), propget]
        HRESULT Shadow([out, retval] ShadowFormat** Shadow);
        [id(0x00000078), propget]
        HRESULT TextEffect([out, retval] TextEffectFormat** TextEffect);
        [id(0x00000079), propget]
        HRESULT TextFrame([out, retval] TextFrame** TextFrame);
        [id(0x0000007a), propget]
        HRESULT ThreeD([out, retval] ThreeDFormat** ThreeD);
        [id(0x0000007b), propget]
        HRESULT Top([out, retval] long*  Top);
        [id(0x0000007b), propput]
        HRESULT Top([in] long Top);
        [id(0x0000007c), propget]
        HRESULT Type([out, retval] MsoShapeType* Type);
        [id(0x0000007d), propget]
        HRESULT VerticalFlip([out, retval] MsoTriState* VerticalFlip);
        [id(0x0000007e), propget]
        HRESULT Vertices([out, retval] VARIANT* Vertices);
        [id(0x0000007f), propget]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x0000007f), propput]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x00000080), propget]
        HRESULT Width([out, retval] long*  Width);
        [id(0x00000080), propput]
        HRESULT Width([in] long Width);
        [id(0x00000081), propget]
        HRESULT ZOrderPosition([out, retval] int* ZOrderPosition);
        [id(0x00000082), propget, hidden]
        HRESULT Script([out, retval] Script** Script);
        [id(0x00000083), propget]
        HRESULT AlternativeText([out, retval] BSTR* AlternativeText);
        [id(0x00000083), propput]
        HRESULT AlternativeText([in] BSTR AlternativeText);
        [id(0x00000084), propget, hidden]
        HRESULT HasDiagram([out, retval] MsoTriState* pHasDiagram);
        [id(0x00000085), propget, hidden]
        HRESULT Diagram([out, retval] IMsoDiagram** Diagram);
        [id(0x00000086), propget, hidden]
        HRESULT HasDiagramNode([out, retval] MsoTriState* pHasDiagram);
        [id(0x00000087), propget, hidden]
        HRESULT DiagramNode([out, retval] DiagramNode** DiagramNode);
        [id(0x00000088), propget]
        HRESULT Child([out, retval] MsoTriState* Child);
        [id(0x00000089), propget]
        HRESULT ParentGroup([out, retval] Shape** Parent);
        [id(0x0000008a), propget, hidden]
        HRESULT CanvasItems([out, retval] CanvasShapes** CanvasShapes);
        [id(0x0000008b), propget]
        HRESULT Id([out, retval] int* pid);
        [id(0x0000008c), hidden]
        HRESULT CanvasCropLeft([in] long Increment);
        [id(0x0000008d), hidden]
        HRESULT CanvasCropTop([in] long Increment);
        [id(0x0000008e), hidden]
        HRESULT CanvasCropRight([in] long Increment);
        [id(0x0000008f), hidden]
        HRESULT CanvasCropBottom([in] long Increment);
        [id(0x00000090), propput, hidden]
        HRESULT RTF([in] BSTR rhs);
        [id(0x00000091), propget]
        HRESULT TextFrame2([out, retval] TextFrame2** Frame);
        [id(0x00000092)]
        HRESULT Cut();
        [id(0x00000093)]
        HRESULT Copy();
        [id(0x00000094), propget]
        HRESULT HasChart([out, retval] MsoTriState* pHasChart);
        [id(0x00000095), propget]
        HRESULT Chart([out, retval] IMsoChart** Chart);
        [id(0x00000096), propget]
        HRESULT ShapeStyle([out, retval] MsoShapeStyleIndex* ShapeStyle);
        [id(0x00000096), propput]
        HRESULT ShapeStyle([in] MsoShapeStyleIndex ShapeStyle);
        [id(0x00000097), propget]
        HRESULT BackgroundStyle([out, retval] MsoBackgroundStyleIndex* BackgroundStyle);
        [id(0x00000097), propput]
        HRESULT BackgroundStyle([in] MsoBackgroundStyleIndex BackgroundStyle);
        [id(0x00000098), propget]
        HRESULT SoftEdge([out, retval] SoftEdgeFormat** SoftEdge);
        [id(0x00000099), propget]
        HRESULT Glow([out, retval] GlowFormat** Glow);
        [id(0x0000009a), propget]
        HRESULT Reflection([out, retval] ReflectionFormat** Reflection);
        [id(0x0000009b), propget]
        HRESULT HasSmartArt([out, retval] MsoTriState* HasSmartArt);
        [id(0x0000009c), propget]
        HRESULT SmartArt([out, retval] SmartArt** SmartArt);
        [id(0x0000009d)]
        HRESULT ConvertTextToSmartArt([in] SmartArtLayout* Layout);
        [id(0x0000009e), propget]
        HRESULT Title([out, retval] BSTR* Title);
        [id(0x0000009e), propput]
        HRESULT Title([in] BSTR Title);
    };

    [
      odl,
      uuid(000C031D-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShapeRange : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Count([out, retval] int* Count);
        [id(00000000)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] Shape** Item);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(0x0000000a)]
        HRESULT Align(
                        [in] MsoAlignCmd AlignCmd, 
                        [in] MsoTriState RelativeTo);
        [id(0x0000000b)]
        HRESULT Apply();
        [id(0x0000000c)]
        HRESULT Delete();
        [id(0x0000000d)]
        HRESULT Distribute(
                        [in] MsoDistributeCmd DistributeCmd, 
                        [in] MsoTriState RelativeTo);
        [id(0x0000000e)]
        HRESULT Duplicate([out, retval] ShapeRange** Duplicate);
        [id(0x0000000f)]
        HRESULT Flip([in] MsoFlipCmd FlipCmd);
        [id(0x00000010)]
        HRESULT IncrementLeft([in] long Increment);
        [id(0x00000011)]
        HRESULT IncrementRotation([in] long Increment);
        [id(0x00000012)]
        HRESULT IncrementTop([in] long Increment);
        [id(0x00000013)]
        HRESULT Group([out, retval] Shape** Group);
        [id(0x00000014)]
        HRESULT PickUp();
        [id(0x00000015)]
        HRESULT Regroup([out, retval] Shape** Regroup);
        [id(0x00000016)]
        HRESULT RerouteConnections();
        [id(0x00000017)]
        HRESULT ScaleHeight(
                        [in] long Factor, 
                        [in] MsoTriState RelativeToOriginalSize, 
                        [in, optional, defaultvalue(0)] MsoScaleFrom fScale);
        [id(0x00000018)]
        HRESULT ScaleWidth(
                        [in] long Factor, 
                        [in] MsoTriState RelativeToOriginalSize, 
                        [in, optional, defaultvalue(0)] MsoScaleFrom fScale);
        [id(0x00000019)]
        HRESULT Select([in, optional] VARIANT Replace);
        [id(0x0000001a)]
        HRESULT SetShapesDefaultProperties();
        [id(0x0000001b)]
        HRESULT Ungroup([out, retval] ShapeRange** Ungroup);
        [id(0x0000001c)]
        HRESULT ZOrder([in] MsoZOrderCmd ZOrderCmd);
        [id(0x00000064), propget]
        HRESULT Adjustments([out, retval] Adjustments** Adjustments);
        [id(0x00000065), propget]
        HRESULT AutoShapeType([out, retval] MsoAutoShapeType* AutoShapeType);
        [id(0x00000065), propput]
        HRESULT AutoShapeType([in] MsoAutoShapeType AutoShapeType);
        [id(0x00000066), propget]
        HRESULT BlackWhiteMode([out, retval] MsoBlackWhiteMode* BlackWhiteMode);
        [id(0x00000066), propput]
        HRESULT BlackWhiteMode([in] MsoBlackWhiteMode BlackWhiteMode);
        [id(0x00000067), propget]
        HRESULT Callout([out, retval] CalloutFormat** Callout);
        [id(0x00000068), propget]
        HRESULT ConnectionSiteCount([out, retval] int* ConnectionSiteCount);
        [id(0x00000069), propget]
        HRESULT Connector([out, retval] MsoTriState* Connector);
        [id(0x0000006a), propget]
        HRESULT ConnectorFormat([out, retval] ConnectorFormat** ConnectorFormat);
        [id(0x0000006b), propget]
        HRESULT Fill([out, retval] FillFormat** Fill);
        [id(0x0000006c), propget]
        HRESULT GroupItems([out, retval] GroupShapes** GroupItems);
        [id(0x0000006d), propget]
        HRESULT Height([out, retval] long*  Height);
        [id(0x0000006d), propput]
        HRESULT Height([in] long Height);
        [id(0x0000006e), propget]
        HRESULT HorizontalFlip([out, retval] MsoTriState* HorizontalFlip);
        [id(0x0000006f), propget]
        HRESULT Left([out, retval] long*  Left);
        [id(0x0000006f), propput]
        HRESULT Left([in] long Left);
        [id(0x00000070), propget]
        HRESULT Line([out, retval] LineFormat** Line);
        [id(0x00000071), propget]
        HRESULT LockAspectRatio([out, retval] MsoTriState* LockAspectRatio);
        [id(0x00000071), propput]
        HRESULT LockAspectRatio([in] MsoTriState LockAspectRatio);
        [id(0x00000073), propget]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000073), propput]
        HRESULT Name([in] BSTR Name);
        [id(0x00000074), propget]
        HRESULT Nodes([out, retval] ShapeNodes** Nodes);
        [id(0x00000075), propget]
        HRESULT Rotation([out, retval] long*  Rotation);
        [id(0x00000075), propput]
        HRESULT Rotation([in] long Rotation);
        [id(0x00000076), propget]
        HRESULT PictureFormat([out, retval] PictureFormat** Picture);
        [id(0x00000077), propget]
        HRESULT Shadow([out, retval] ShadowFormat** Shadow);
        [id(0x00000078), propget]
        HRESULT TextEffect([out, retval] TextEffectFormat** TextEffect);
        [id(0x00000079), propget]
        HRESULT TextFrame([out, retval] TextFrame** TextFrame);
        [id(0x0000007a), propget]
        HRESULT ThreeD([out, retval] ThreeDFormat** ThreeD);
        [id(0x0000007b), propget]
        HRESULT Top([out, retval] long*  Top);
        [id(0x0000007b), propput]
        HRESULT Top([in] long Top);
        [id(0x0000007c), propget]
        HRESULT Type([out, retval] MsoShapeType* Type);
        [id(0x0000007d), propget]
        HRESULT VerticalFlip([out, retval] MsoTriState* VerticalFlip);
        [id(0x0000007e), propget]
        HRESULT Vertices([out, retval] VARIANT* Vertices);
        [id(0x0000007f), propget]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x0000007f), propput]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x00000080), propget]
        HRESULT Width([out, retval] long*  Width);
        [id(0x00000080), propput]
        HRESULT Width([in] long Width);
        [id(0x00000081), propget]
        HRESULT ZOrderPosition([out, retval] int* ZOrderPosition);
        [id(0x00000082), propget]
        HRESULT Script([out, retval] Script** Script);
        [id(0x00000083), propget]
        HRESULT AlternativeText([out, retval] BSTR* AlternativeText);
        [id(0x00000083), propput]
        HRESULT AlternativeText([in] BSTR AlternativeText);
        [id(0x00000084), propget, hidden]
        HRESULT HasDiagram([out, retval] MsoTriState* pHasDiagram);
        [id(0x00000085), propget, hidden]
        HRESULT Diagram([out, retval] IMsoDiagram** Diagram);
        [id(0x00000086), propget, hidden]
        HRESULT HasDiagramNode([out, retval] MsoTriState* pHasDiagram);
        [id(0x00000087), propget, hidden]
        HRESULT DiagramNode([out, retval] DiagramNode** DiagramNode);
        [id(0x00000088), propget]
        HRESULT Child([out, retval] MsoTriState* Child);
        [id(0x00000089), propget]
        HRESULT ParentGroup([out, retval] Shape** Parent);
        [id(0x0000008a), propget, hidden]
        HRESULT CanvasItems([out, retval] CanvasShapes** CanvasShapes);
        [id(0x0000008b), propget]
        HRESULT Id([out, retval] int* pid);
        [id(0x0000008c), hidden]
        HRESULT CanvasCropLeft([in] long Increment);
        [id(0x0000008d), hidden]
        HRESULT CanvasCropTop([in] long Increment);
        [id(0x0000008e), hidden]
        HRESULT CanvasCropRight([in] long Increment);
        [id(0x0000008f), hidden]
        HRESULT CanvasCropBottom([in] long Increment);
        [id(0x00000090), propput, hidden]
        HRESULT RTF([in] BSTR rhs);
        [id(0x00000091), propget]
        HRESULT TextFrame2([out, retval] TextFrame2** Frame);
        [id(0x00000092)]
        HRESULT Cut();
        [id(0x00000093)]
        HRESULT Copy();
        [id(0x00000094), propget]
        HRESULT HasChart([out, retval] MsoTriState* pHasChart);
        [id(0x00000095), propget]
        HRESULT Chart([out, retval] IMsoChart** Chart);
        [id(0x00000096), propget]
        HRESULT ShapeStyle([out, retval] MsoShapeStyleIndex* ShapeStyle);
        [id(0x00000096), propput]
        HRESULT ShapeStyle([in] MsoShapeStyleIndex ShapeStyle);
        [id(0x00000097), propget]
        HRESULT BackgroundStyle([out, retval] MsoBackgroundStyleIndex* BackgroundStyle);
        [id(0x00000097), propput]
        HRESULT BackgroundStyle([in] MsoBackgroundStyleIndex BackgroundStyle);
        [id(0x00000098), propget]
        HRESULT SoftEdge([out, retval] SoftEdgeFormat** SoftEdge);
        [id(0x00000099), propget]
        HRESULT Glow([out, retval] GlowFormat** Glow);
        [id(0x0000009a), propget]
        HRESULT Reflection([out, retval] ReflectionFormat** Reflection);
        [id(0x0000009b), propget]
        HRESULT Title([out, retval] BSTR* Title);
        [id(0x0000009b), propput]
        HRESULT Title([in] BSTR Title);
        [id(0x0000009c)]
        HRESULT MergeShapes(
                        [in] MsoMergeCmd MergeCmd, 
                        [in, optional, defaultvalue(0)] Shape* PrimaryShape);
    };

    [
      odl,
      uuid(000C031E-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface Shapes : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Count([out, retval] int* Count);
        [id(00000000)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] Shape** Item);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(0x0000000a)]
        HRESULT AddCallout(
                        [in] MsoCalloutType Type, 
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Width, 
                        [in] long Height, 
                        [out, retval] Shape** Callout);
        [id(0x0000000b)]
        HRESULT AddConnector(
                        [in] MsoConnectorType Type, 
                        [in] long BeginX, 
                        [in] long BeginY, 
                        [in] long EndX, 
                        [in] long EndY, 
                        [out, retval] Shape** Connector);
        [id(0x0000000c)]
        HRESULT AddCurve(
                        [in] VARIANT SafeArrayOfPoints, 
                        [out, retval] Shape** Curve);
        [id(0x0000000d)]
        HRESULT AddLabel(
                        [in] MsoTextOrientation Orientation, 
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Width, 
                        [in] long Height, 
                        [out, retval] Shape** Label);
        [id(0x0000000e)]
        HRESULT AddLine(
                        [in] long BeginX, 
                        [in] long BeginY, 
                        [in] long EndX, 
                        [in] long EndY, 
                        [out, retval] Shape** Line);
        [id(0x0000000f)]
        HRESULT AddPicture(
                        [in] BSTR FileName, 
                        [in] MsoTriState LinkToFile, 
                        [in] MsoTriState SaveWithDocument, 
                        [in] long Left, 
                        [in] long Top, 
                        [in, optional, defaultvalue(-1)] long Width, 
                        [in, optional, defaultvalue(-1)] long Height, 
                        [out, retval] Shape** Picture);
        [id(0x00000010)]
        HRESULT AddPolyline(
                        [in] VARIANT SafeArrayOfPoints, 
                        [out, retval] Shape** Polyline);
        [id(0x00000011)]
        HRESULT AddShape(
                        [in] MsoAutoShapeType Type, 
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Width, 
                        [in] long Height, 
                        [out, retval] Shape** Shape);
        [id(0x00000012)]
        HRESULT AddTextEffect(
                        [in] MsoPresetTextEffect PresetTextEffect, 
                        [in] BSTR Text, 
                        [in] BSTR FontName, 
                        [in] long FontSize, 
                        [in] MsoTriState FontBold, 
                        [in] MsoTriState FontItalic, 
                        [in] long Left, 
                        [in] long Top, 
                        [out, retval] Shape** TextEffect);
        [id(0x00000013)]
        HRESULT AddTextbox(
                        [in] MsoTextOrientation Orientation, 
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Width, 
                        [in] long Height, 
                        [out, retval] Shape** Textbox);
        [id(0x00000014)]
        HRESULT BuildFreeform(
                        [in] MsoEditingType EditingType, 
                        [in] long X1, 
                        [in] long Y1, 
                        [out, retval] FreeformBuilder** FreeformBuilder);
        [id(0x00000015)]
        HRESULT Range(
                        [in] VARIANT Index, 
                        [out, retval] ShapeRange** Range);
        [id(0x00000016)]
        HRESULT SelectAll();
        [id(0x00000064), propget]
        HRESULT Background([out, retval] Shape** Background);
        [id(0x00000065), propget]
        HRESULT Default([out, retval] Shape** Default);
        [id(0x00000017), hidden]
        HRESULT AddDiagram(
                        [in] MsoDiagramType Type, 
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Width, 
                        [in] long Height, 
                        [out, retval] Shape** Diagram);
        [id(0x00000019), hidden]
        HRESULT AddCanvas(
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Width, 
                        [in] long Height, 
                        [out, retval] Shape** Shape);
        [id(0x0000001a), hidden]
        HRESULT AddChart(
                        [in, optional, defaultvalue(-1)] XlChartType Type, 
                        [in, optional, defaultvalue(-1)] long Left, 
                        [in, optional, defaultvalue(-1)] long Top, 
                        [in, optional, defaultvalue(-1)] long Width, 
                        [in, optional, defaultvalue(-1)] long Height, 
                        [out, retval] Shape** Chart);
        [id(0x0000001b), hidden]
        HRESULT AddTable(
                        [in] int NumRows, 
                        [in] int NumColumns, 
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Width, 
                        [in] long Height, 
                        [out, retval] Shape** Table);
        [id(0x0000001c)]
        HRESULT AddSmartArt(
                        [in] SmartArtLayout* Layout, 
                        [in, optional, defaultvalue(-1)] long Left, 
                        [in, optional, defaultvalue(-1)] long Top, 
                        [in, optional, defaultvalue(-1)] long Width, 
                        [in, optional, defaultvalue(-1)] long Height, 
                        [out, retval] Shape** SmartArt);
        [id(0x0000001d)]
        HRESULT AddChart2(
                        [in, optional, defaultvalue(-1)] int Style, 
                        [in, optional, defaultvalue(-1)] XlChartType Type, 
                        [in, optional, defaultvalue(-1)] long Left, 
                        [in, optional, defaultvalue(-1)] long Top, 
                        [in, optional, defaultvalue(-1)] long Width, 
                        [in, optional, defaultvalue(-1)] long Height, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL NewLayout, 
                        [out, retval] Shape** Chart);
        [id(0x0000001e)]
        HRESULT AddPicture2(
                        [in] BSTR FileName, 
                        [in] MsoTriState LinkToFile, 
                        [in] MsoTriState SaveWithDocument, 
                        [in] long Left, 
                        [in] long Top, 
                        [in, optional, defaultvalue(-1)] long Width, 
                        [in, optional, defaultvalue(-1)] long Height, 
                        [in, optional, defaultvalue(-1)] MsoPictureCompress Compress, 
                        [out, retval] Shape** Picture);
    };

    [
      odl,
      uuid(000C031F-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextEffectFormat : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a)]
        HRESULT ToggleVerticalText();
        [id(0x00000064), propget]
        HRESULT Alignment([out, retval] MsoTextEffectAlignment* Alignment);
        [id(0x00000064), propput]
        HRESULT Alignment([in] MsoTextEffectAlignment Alignment);
        [id(0x00000065), propget]
        HRESULT FontBold([out, retval] MsoTriState* FontBold);
        [id(0x00000065), propput]
        HRESULT FontBold([in] MsoTriState FontBold);
        [id(0x00000066), propget]
        HRESULT FontItalic([out, retval] MsoTriState* FontItalic);
        [id(0x00000066), propput]
        HRESULT FontItalic([in] MsoTriState FontItalic);
        [id(0x00000067), propget]
        HRESULT FontName([out, retval] BSTR* FontName);
        [id(0x00000067), propput]
        HRESULT FontName([in] BSTR FontName);
        [id(0x00000068), propget]
        HRESULT FontSize([out, retval] long*  FontSize);
        [id(0x00000068), propput]
        HRESULT FontSize([in] long FontSize);
        [id(0x00000069), propget]
        HRESULT KernedPairs([out, retval] MsoTriState* KernedPairs);
        [id(0x00000069), propput]
        HRESULT KernedPairs([in] MsoTriState KernedPairs);
        [id(0x0000006a), propget]
        HRESULT NormalizedHeight([out, retval] MsoTriState* NormalizedHeight);
        [id(0x0000006a), propput]
        HRESULT NormalizedHeight([in] MsoTriState NormalizedHeight);
        [id(0x0000006b), propget]
        HRESULT PresetShape([out, retval] MsoPresetTextEffectShape* PresetShape);
        [id(0x0000006b), propput]
        HRESULT PresetShape([in] MsoPresetTextEffectShape PresetShape);
        [id(0x0000006c), propget]
        HRESULT PresetTextEffect([out, retval] MsoPresetTextEffect* Preset);
        [id(0x0000006c), propput]
        HRESULT PresetTextEffect([in] MsoPresetTextEffect Preset);
        [id(0x0000006d), propget]
        HRESULT RotatedChars([out, retval] MsoTriState* RotatedChars);
        [id(0x0000006d), propput]
        HRESULT RotatedChars([in] MsoTriState RotatedChars);
        [id(0x0000006e), propget]
        HRESULT Text([out, retval] BSTR* Text);
        [id(0x0000006e), propput]
        HRESULT Text([in] BSTR Text);
        [id(0x0000006f), propget]
        HRESULT Tracking([out, retval] long*  Tracking);
        [id(0x0000006f), propput]
        HRESULT Tracking([in] long Tracking);
    };

    [
      odl,
      uuid(000C0320-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextFrame : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000064), propget]
        HRESULT MarginBottom([out, retval] long*  MarginBottom);
        [id(0x00000064), propput]
        HRESULT MarginBottom([in] long MarginBottom);
        [id(0x00000065), propget]
        HRESULT MarginLeft([out, retval] long*  MarginLeft);
        [id(0x00000065), propput]
        HRESULT MarginLeft([in] long MarginLeft);
        [id(0x00000066), propget]
        HRESULT MarginRight([out, retval] long*  MarginRight);
        [id(0x00000066), propput]
        HRESULT MarginRight([in] long MarginRight);
        [id(0x00000067), propget]
        HRESULT MarginTop([out, retval] long*  MarginTop);
        [id(0x00000067), propput]
        HRESULT MarginTop([in] long MarginTop);
        [id(0x00000068), propget]
        HRESULT Orientation([out, retval] MsoTextOrientation* Orientation);
        [id(0x00000068), propput]
        HRESULT Orientation([in] MsoTextOrientation Orientation);
    };

    [
      odl,
      uuid(000C0321-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ThreeDFormat : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a)]
        HRESULT IncrementRotationX([in] long Increment);
        [id(0x0000000b)]
        HRESULT IncrementRotationY([in] long Increment);
        [id(0x0000000c)]
        HRESULT ResetRotation();
        [id(0x0000000d)]
        HRESULT SetThreeDFormat([in] MsoPresetThreeDFormat PresetThreeDFormat);
        [id(0x0000000e)]
        HRESULT SetExtrusionDirection([in] MsoPresetExtrusionDirection PresetExtrusionDirection);
        [id(0x00000064), propget]
        HRESULT Depth([out, retval] long*  Depth);
        [id(0x00000064), propput]
        HRESULT Depth([in] long Depth);
        [id(0x00000065), propget]
        HRESULT ExtrusionColor([out, retval] ColorFormat** ExtrusionColor);
        [id(0x00000066), propget]
        HRESULT ExtrusionColorType([out, retval] MsoExtrusionColorType* ExtrusionColorType);
        [id(0x00000066), propput]
        HRESULT ExtrusionColorType([in] MsoExtrusionColorType ExtrusionColorType);
        [id(0x00000067), propget]
        HRESULT Perspective([out, retval] MsoTriState* Perspective);
        [id(0x00000067), propput]
        HRESULT Perspective([in] MsoTriState Perspective);
        [id(0x00000068), propget]
        HRESULT PresetExtrusionDirection([out, retval] MsoPresetExtrusionDirection* PresetExtrusionDirection);
        [id(0x00000069), propget]
        HRESULT PresetLightingDirection([out, retval] MsoPresetLightingDirection* PresetLightingDirection);
        [id(0x00000069), propput]
        HRESULT PresetLightingDirection([in] MsoPresetLightingDirection PresetLightingDirection);
        [id(0x0000006a), propget]
        HRESULT PresetLightingSoftness([out, retval] MsoPresetLightingSoftness* PresetLightingSoftness);
        [id(0x0000006a), propput]
        HRESULT PresetLightingSoftness([in] MsoPresetLightingSoftness PresetLightingSoftness);
        [id(0x0000006b), propget]
        HRESULT PresetMaterial([out, retval] MsoPresetMaterial* PresetMaterial);
        [id(0x0000006b), propput]
        HRESULT PresetMaterial([in] MsoPresetMaterial PresetMaterial);
        [id(0x0000006c), propget]
        HRESULT PresetThreeDFormat([out, retval] MsoPresetThreeDFormat* PresetThreeDFormat);
        [id(0x0000006d), propget]
        HRESULT RotationX([out, retval] long*  RotationX);
        [id(0x0000006d), propput]
        HRESULT RotationX([in] long RotationX);
        [id(0x0000006e), propget]
        HRESULT RotationY([out, retval] long*  RotationY);
        [id(0x0000006e), propput]
        HRESULT RotationY([in] long RotationY);
        [id(0x0000006f), propget]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x0000006f), propput]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x0000000f)]
        HRESULT SetPresetCamera([in] MsoPresetCamera PresetCamera);
        [id(0x00000010)]
        HRESULT IncrementRotationZ([in] long Increment);
        [id(0x00000011)]
        HRESULT IncrementRotationHorizontal([in] long Increment);
        [id(0x00000012)]
        HRESULT IncrementRotationVertical([in] long Increment);
        [id(0x00000070), propget]
        HRESULT PresetLighting([out, retval] MsoLightRigType* PresetLightRigType);
        [id(0x00000070), propput]
        HRESULT PresetLighting([in] MsoLightRigType PresetLightRigType);
        [id(0x00000071), propget]
        HRESULT Z([out, retval] long*  Z);
        [id(0x00000071), propput]
        HRESULT Z([in] long Z);
        [id(0x00000072), propget]
        HRESULT BevelTopType([out, retval] MsoBevelType* BevelTopType);
        [id(0x00000072), propput]
        HRESULT BevelTopType([in] MsoBevelType BevelTopType);
        [id(0x00000073), propget]
        HRESULT BevelTopInset([out, retval] long*  BevelTopInset);
        [id(0x00000073), propput]
        HRESULT BevelTopInset([in] long BevelTopInset);
        [id(0x00000074), propget]
        HRESULT BevelTopDepth([out, retval] long*  BevelTopDepth);
        [id(0x00000074), propput]
        HRESULT BevelTopDepth([in] long BevelTopDepth);
        [id(0x00000075), propget]
        HRESULT BevelBottomType([out, retval] MsoBevelType* BevelBottomType);
        [id(0x00000075), propput]
        HRESULT BevelBottomType([in] MsoBevelType BevelBottomType);
        [id(0x00000076), propget]
        HRESULT BevelBottomInset([out, retval] long*  BevelBottomInset);
        [id(0x00000076), propput]
        HRESULT BevelBottomInset([in] long BevelBottomInset);
        [id(0x00000077), propget]
        HRESULT BevelBottomDepth([out, retval] long*  BevelBottomDepth);
        [id(0x00000077), propput]
        HRESULT BevelBottomDepth([in] long BevelBottomDepth);
        [id(0x00000078), propget]
        HRESULT PresetCamera([out, retval] MsoPresetCamera* PresetCamera);
        [id(0x00000079), propget]
        HRESULT RotationZ([out, retval] long*  RotationZ);
        [id(0x00000079), propput]
        HRESULT RotationZ([in] long RotationZ);
        [id(0x0000007a), propget]
        HRESULT ContourWidth([out, retval] long*  Width);
        [id(0x0000007a), propput]
        HRESULT ContourWidth([in] long Width);
        [id(0x0000007b), propget]
        HRESULT ContourColor([out, retval] ColorFormat** ContourColor);
        [id(0x0000007c), propget]
        HRESULT FieldOfView([out, retval] long*  FOV);
        [id(0x0000007c), propput]
        HRESULT FieldOfView([in] long FOV);
        [id(0x0000007d), propget]
        HRESULT ProjectText([out, retval] MsoTriState* ProjectText);
        [id(0x0000007d), propput]
        HRESULT ProjectText([in] MsoTriState ProjectText);
        [id(0x0000007e), propget]
        HRESULT LightAngle([out, retval] long*  LightAngle);
        [id(0x0000007e), propput]
        HRESULT LightAngle([in] long LightAngle);
    };

    [
      odl,
      uuid(000C0359-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoDispCagNotifySink : IDispatch {
        [id(0x00000001)]
        HRESULT InsertClip(
                        [in] IUnknown* pClipMoniker, 
                        [in] IUnknown* pItemMoniker);
        [id(0x00000002)]
        HRESULT WindowIsClosing();
    };

    [
      odl,
      uuid(000C0324-0000-0000-C000-000000000046),
      helpcontext(0x00031128),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface Balloon : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x00031129)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x60030001), propget, helpcontext(0x0003112a)]
        HRESULT Checkboxes([out, retval] IDispatch** ppidisp);
        [id(0x60030002), propget, helpcontext(0x0003112b)]
        HRESULT Labels([out, retval] IDispatch** ppidisp);
        [id(0x60030003), propput, helpcontext(0x0003112c)]
        HRESULT BalloonType([in] MsoBalloonType pbty);
        [id(0x60030003), propget, helpcontext(0x0003112c)]
        HRESULT BalloonType([out, retval] MsoBalloonType* pbty);
        [id(0x60030005), propput, helpcontext(0x0003112d)]
        HRESULT Icon([in] MsoIconType picn);
        [id(0x60030005), propget, helpcontext(0x0003112d)]
        HRESULT Icon([out, retval] MsoIconType* picn);
        [id(0x60030007), propput, helpcontext(0x0003112e)]
        HRESULT Heading([in] BSTR pbstr);
        [id(0x60030007), propget, helpcontext(0x0003112e)]
        HRESULT Heading([out, retval] BSTR* pbstr);
        [id(0x60030009), propput, helpcontext(0x0003112f)]
        HRESULT Text([in] BSTR pbstr);
        [id(0x60030009), propget, helpcontext(0x0003112f)]
        HRESULT Text([out, retval] BSTR* pbstr);
        [id(0x6003000b), propput, helpcontext(0x00031130)]
        HRESULT Mode([in] MsoModeType pmd);
        [id(0x6003000b), propget, helpcontext(0x00031130)]
        HRESULT Mode([out, retval] MsoModeType* pmd);
        [id(0x6003000d), propput, helpcontext(0x00031131)]
        HRESULT Animation([in] MsoAnimationType pfca);
        [id(0x6003000d), propget, helpcontext(0x00031131)]
        HRESULT Animation([out, retval] MsoAnimationType* pfca);
        [id(0x6003000f), propput, helpcontext(0x00031132)]
        HRESULT Button([in] MsoButtonSetType psbs);
        [id(0x6003000f), propget, helpcontext(0x00031132)]
        HRESULT Button([out, retval] MsoButtonSetType* psbs);
        [id(0x60030011), propput, helpcontext(0x00031133)]
        HRESULT Callback([in] BSTR pbstr);
        [id(0x60030011), propget, helpcontext(0x00031133)]
        HRESULT Callback([out, retval] BSTR* pbstr);
        [id(0x60030013), propput, helpcontext(0x00031134)]
        HRESULT Private([in] long plPrivate);
        [id(0x60030013), propget, helpcontext(0x00031134)]
        HRESULT Private([out, retval] long* plPrivate);
        [id(0x60030015), helpcontext(0x00031135)]
        HRESULT SetAvoidRectangle(
                        [in] int Left, 
                        [in] int Top, 
                        [in] int Right, 
                        [in] int Bottom);
        [id(0x60030016), propget, helpcontext(0x00031136)]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x60030017), helpcontext(0x00031137)]
        HRESULT Show([out, retval] MsoBalloonButtonType* pibtn);
        [id(0x60030018), helpcontext(0x00031138)]
        HRESULT Close();
    };

    [
      odl,
      uuid(000C0326-0000-0000-C000-000000000046),
      helpcontext(0x00031510),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface BalloonCheckboxes : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x00031511)]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x60030001), propget, helpcontext(0x00031512)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(00000000), propget, helpcontext(0x00031513)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] IDispatch** ppidisp);
        [id(0x60030003), propget, helpcontext(0x00031514)]
        HRESULT Count([out, retval] int* pccbx);
        [id(0x60030003), propput, helpcontext(0x00031514)]
        HRESULT Count([in] int pccbx);
        [id(0xfffffffc), propget, helpcontext(0x00031515)]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
    };

    [
      odl,
      uuid(000C0328-0000-0000-C000-000000000046),
      helpcontext(0x000318f8),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface BalloonCheckbox : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x000318f9)]
        HRESULT Item([out, retval] BSTR* pbstrName);
        [id(0x60030001), propget, helpcontext(0x000318fa)]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x60030002), propget, helpcontext(0x000318fb)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x60030003), propput, helpcontext(0x000318fc)]
        HRESULT Checked([in] VARIANT_BOOL pvarfChecked);
        [id(0x60030003), propget, helpcontext(0x000318fc)]
        HRESULT Checked([out, retval] VARIANT_BOOL* pvarfChecked);
        [id(0x60030005), propput, helpcontext(0x000318fd)]
        HRESULT Text([in] BSTR pbstr);
        [id(0x60030005), propget, helpcontext(0x000318fd)]
        HRESULT Text([out, retval] BSTR* pbstr);
    };

    [
      odl,
      uuid(000C032E-0000-0000-C000-000000000046),
      helpcontext(0x00031ce0),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface BalloonLabels : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x00031ce1)]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x60030001), propget, helpcontext(0x00031ce2)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(00000000), propget, helpcontext(0x00031ce3)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] IDispatch** ppidisp);
        [id(0x60030003), propget, helpcontext(0x00031ce4)]
        HRESULT Count([out, retval] int* pcwz);
        [id(0x60030003), propput, helpcontext(0x00031ce4)]
        HRESULT Count([in] int pcwz);
        [id(0xfffffffc), propget, helpcontext(0x00031ce5)]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
    };

    [
      odl,
      uuid(000C0330-0000-0000-C000-000000000046),
      helpcontext(0x000320c8),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface BalloonLabel : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x000320c9)]
        HRESULT Item([out, retval] BSTR* pbstrName);
        [id(0x60030001), propget, helpcontext(0x000320ca)]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x60030002), propget, helpcontext(0x000320cb)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x60030003), propput, helpcontext(0x000320cc)]
        HRESULT Text([in] BSTR pbstr);
        [id(0x60030003), propget, helpcontext(0x000320cc)]
        HRESULT Text([out, retval] BSTR* pbstr);
    };

    [
      odl,
      uuid(000C0361-0000-0000-C000-000000000046),
      helpcontext(0x000372d0),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface AnswerWizardFiles : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x000372d1)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(00000000), propget, helpcontext(0x000372d2)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] BSTR* pbstr);
        [id(0x60030002), propget, helpcontext(0x000372d3)]
        HRESULT Count([out, retval] int* pCount);
        [id(0x60030003), helpcontext(0x000372d4)]
        HRESULT Add([in] BSTR FileName);
        [id(0x60030004), helpcontext(0x000372d5)]
        HRESULT Delete([in] BSTR FileName);
    };

    [
      odl,
      uuid(000C0360-0000-0000-C000-000000000046),
      helpcontext(0x000376b8),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface AnswerWizard : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x000376b9)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x60030001), propget, helpcontext(0x000376ba)]
        HRESULT Files([out, retval] AnswerWizardFiles** Files);
        [id(0x60030002), helpcontext(0x000376bb)]
        HRESULT ClearFileList();
        [id(0x60030003), helpcontext(0x000376bc)]
        HRESULT ResetFileList();
    };

    [
      odl,
      uuid(000C0322-0000-0000-C000-000000000046),
      helpcontext(0x00030d40),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface Assistant : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x00030d41)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x60030001), helpcontext(0x00030d42)]
        HRESULT Move(
                        [in] int xLeft, 
                        [in] int yTop);
        [id(0x60030002), propput, helpcontext(0x00030d43)]
        HRESULT Top([in] int pyTop);
        [id(0x60030002), propget, helpcontext(0x00030d43)]
        HRESULT Top([out, retval] int* pyTop);
        [id(0x60030004), propput, helpcontext(0x00030d44)]
        HRESULT Left([in] int pxLeft);
        [id(0x60030004), propget, helpcontext(0x00030d44)]
        HRESULT Left([out, retval] int* pxLeft);
        [id(0x60030006), helpcontext(0x00030d45)]
        HRESULT Help();
        [id(0x60030007), helpcontext(0x00030d46)]
        HRESULT StartWizard(
                        [in] VARIANT_BOOL On, 
                        [in] BSTR Callback, 
                        [in] long PrivateX, 
                        [in, optional] VARIANT Animation, 
                        [in, optional] VARIANT CustomTeaser, 
                        [in, optional] VARIANT Top, 
                        [in, optional] VARIANT Left, 
                        [in, optional] VARIANT Bottom, 
                        [in, optional] VARIANT Right, 
                        [out, retval] long* plWizID);
        [id(0x60030008), helpcontext(0x00030d47)]
        HRESULT EndWizard(
                        [in] long WizardID, 
                        [in] VARIANT_BOOL varfSuccess, 
                        [in, optional] VARIANT Animation);
        [id(0x60030009), helpcontext(0x00030d48)]
        HRESULT ActivateWizard(
                        [in] long WizardID, 
                        [in] MsoWizardActType act, 
                        [in, optional] VARIANT Animation);
        [id(0x6003000a), helpcontext(0x00030d49)]
        HRESULT ResetTips();
        [id(0x6003000b), propget, helpcontext(0x00030d4a)]
        HRESULT NewBalloon([out, retval] Balloon** ppibal);
        [id(0x6003000c), propget, helpcontext(0x00030d4b)]
        HRESULT BalloonError([out, retval] MsoBalloonErrorType* pbne);
        [id(0x6003000d), propget, helpcontext(0x00030d4c)]
        HRESULT Visible([out, retval] VARIANT_BOOL* pvarfVisible);
        [id(0x6003000d), propput, helpcontext(0x00030d4c)]
        HRESULT Visible([in] VARIANT_BOOL pvarfVisible);
        [id(0x6003000f), propget, helpcontext(0x00030d4d)]
        HRESULT Animation([out, retval] MsoAnimationType* pfca);
        [id(0x6003000f), propput, helpcontext(0x00030d4d)]
        HRESULT Animation([in] MsoAnimationType pfca);
        [id(0x60030011), propget, helpcontext(0x00030d4e)]
        HRESULT Reduced([out, retval] VARIANT_BOOL* pvarfReduced);
        [id(0x60030011), propput, helpcontext(0x00030d4e)]
        HRESULT Reduced([in] VARIANT_BOOL pvarfReduced);
        [id(0x60030013), propput, helpcontext(0x00030d4f)]
        HRESULT AssistWithHelp([in] VARIANT_BOOL pvarfAssistWithHelp);
        [id(0x60030013), propget, helpcontext(0x00030d4f)]
        HRESULT AssistWithHelp([out, retval] VARIANT_BOOL* pvarfAssistWithHelp);
        [id(0x60030015), propput, helpcontext(0x00030d50)]
        HRESULT AssistWithWizards([in] VARIANT_BOOL pvarfAssistWithWizards);
        [id(0x60030015), propget, helpcontext(0x00030d50)]
        HRESULT AssistWithWizards([out, retval] VARIANT_BOOL* pvarfAssistWithWizards);
        [id(0x60030017), propput, helpcontext(0x00030d51)]
        HRESULT AssistWithAlerts([in] VARIANT_BOOL pvarfAssistWithAlerts);
        [id(0x60030017), propget, helpcontext(0x00030d51)]
        HRESULT AssistWithAlerts([out, retval] VARIANT_BOOL* pvarfAssistWithAlerts);
        [id(0x60030019), propput, helpcontext(0x00030d52)]
        HRESULT MoveWhenInTheWay([in] VARIANT_BOOL pvarfMove);
        [id(0x60030019), propget, helpcontext(0x00030d52)]
        HRESULT MoveWhenInTheWay([out, retval] VARIANT_BOOL* pvarfMove);
        [id(0x6003001b), propput, helpcontext(0x00030d53)]
        HRESULT Sounds([in] VARIANT_BOOL pvarfSounds);
        [id(0x6003001b), propget, helpcontext(0x00030d53)]
        HRESULT Sounds([out, retval] VARIANT_BOOL* pvarfSounds);
        [id(0x6003001d), propput, helpcontext(0x00030d54)]
        HRESULT FeatureTips([in] VARIANT_BOOL pvarfFeatures);
        [id(0x6003001d), propget, helpcontext(0x00030d54)]
        HRESULT FeatureTips([out, retval] VARIANT_BOOL* pvarfFeatures);
        [id(0x6003001f), propput, helpcontext(0x00030d55)]
        HRESULT MouseTips([in] VARIANT_BOOL pvarfMouse);
        [id(0x6003001f), propget, helpcontext(0x00030d55)]
        HRESULT MouseTips([out, retval] VARIANT_BOOL* pvarfMouse);
        [id(0x60030021), propput, helpcontext(0x00030d56)]
        HRESULT KeyboardShortcutTips([in] VARIANT_BOOL pvarfKeyboardShortcuts);
        [id(0x60030021), propget, helpcontext(0x00030d56)]
        HRESULT KeyboardShortcutTips([out, retval] VARIANT_BOOL* pvarfKeyboardShortcuts);
        [id(0x60030023), propput, helpcontext(0x00030d57)]
        HRESULT HighPriorityTips([in] VARIANT_BOOL pvarfHighPriorityTips);
        [id(0x60030023), propget, helpcontext(0x00030d57)]
        HRESULT HighPriorityTips([out, retval] VARIANT_BOOL* pvarfHighPriorityTips);
        [id(0x60030025), propput, helpcontext(0x00030d58)]
        HRESULT TipOfDay([in] VARIANT_BOOL pvarfTipOfDay);
        [id(0x60030025), propget, helpcontext(0x00030d58)]
        HRESULT TipOfDay([out, retval] VARIANT_BOOL* pvarfTipOfDay);
        [id(0x60030027), propput, helpcontext(0x00030d59)]
        HRESULT GuessHelp([in] VARIANT_BOOL pvarfGuessHelp);
        [id(0x60030027), propget, helpcontext(0x00030d59)]
        HRESULT GuessHelp([out, retval] VARIANT_BOOL* pvarfGuessHelp);
        [id(0x60030029), propput, helpcontext(0x00030d5a)]
        HRESULT SearchWhenProgramming([in] VARIANT_BOOL pvarfSearchInProgram);
        [id(0x60030029), propget, helpcontext(0x00030d5a)]
        HRESULT SearchWhenProgramming([out, retval] VARIANT_BOOL* pvarfSearchInProgram);
        [id(00000000), propget, helpcontext(0x00030d5b)]
        HRESULT Item([out, retval] BSTR* pbstrName);
        [id(0x6003002c), propget, helpcontext(0x00030d5c)]
        HRESULT FileName([out, retval] BSTR* pbstr);
        [id(0x6003002c), propput, helpcontext(0x00030d5c)]
        HRESULT FileName([in] BSTR pbstr);
        [id(0x6003002e), propget, helpcontext(0x00030d5d)]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x6003002f), propget, helpcontext(0x00030d5e)]
        HRESULT On([out, retval] VARIANT_BOOL* pvarfOn);
        [id(0x6003002f), propput, helpcontext(0x00030d5e)]
        HRESULT On([in] VARIANT_BOOL pvarfOn);
        [id(0x60030031), helpcontext(0x00030d5f)]
        HRESULT DoAlert(
                        [in] BSTR bstrAlertTitle, 
                        [in] BSTR bstrAlertText, 
                        [in] MsoAlertButtonType alb, 
                        [in] MsoAlertIconType alc, 
                        [in] MsoAlertDefaultType ald, 
                        [in] MsoAlertCancelType alq, 
                        [in] VARIANT_BOOL varfSysAlert, 
                        [out, retval] int* pibtn);
    };

    [
      odl,
      uuid(2DF8D04E-5BFA-101B-BDE5-00AA0044DE52),
      helpcontext(0x0003d092)
    ]
    interface DocumentProperty : IDispatch {
        [propget, helpcontext(0x0003d093)]
        IDispatch* _stdcall Parent();
        [helpcontext(0x0003d094)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x0003d095)]
        HRESULT _stdcall Name(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* pbstrRetVal);
        [propput, helpcontext(0x0003d095)]
        HRESULT _stdcall Name(
                        [in, lcid] long lcid, 
                        [in] BSTR pbstrRetVal);
        [propget, helpcontext(0x0003d096)]
        HRESULT _stdcall Value(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* pvargRetVal);
        [propput, helpcontext(0x0003d096)]
        HRESULT _stdcall Value(
                        [in, lcid] long lcid, 
                        [in] VARIANT pvargRetVal);
        [propget, helpcontext(0x0003d097)]
        HRESULT _stdcall Type(
                        [in, lcid] long lcid, 
                        [out, retval] MsoDocProperties* ptypeRetVal);
        [propput, helpcontext(0x0003d097)]
        HRESULT _stdcall Type(
                        [in, lcid] long lcid, 
                        [in] MsoDocProperties ptypeRetVal);
        [propget, helpcontext(0x0003d098)]
        HRESULT _stdcall LinkToContent([out, retval] VARIANT_BOOL* pfLinkRetVal);
        [propput, helpcontext(0x0003d098)]
        HRESULT _stdcall LinkToContent([in] VARIANT_BOOL pfLinkRetVal);
        [propget, helpcontext(0x0003d099)]
        HRESULT _stdcall LinkSource([out, retval] BSTR* pbstrSourceRetVal);
        [propput, helpcontext(0x0003d099)]
        HRESULT _stdcall LinkSource([in] BSTR pbstrSourceRetVal);
        [propget, helpcontext(0x0003d09f)]
        HRESULT _stdcall Application([out, retval] IDispatch** ppidisp);
        [propget, helpcontext(0x0003d0a0)]
        HRESULT _stdcall Creator([out, retval] long* plCreator);
    };

    [
      odl,
      uuid(2DF8D04D-5BFA-101B-BDE5-00AA0044DE52),
      helpcontext(0x0003d09a)
    ]
    interface DocumentProperties : IDispatch {
        [propget, helpcontext(0x0003d09b)]
        IDispatch* _stdcall Parent();
        [propget, helpcontext(0x0003d09c)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] DocumentProperty** ppIDocProp);
        [propget, helpcontext(0x0003d09d)]
        HRESULT _stdcall Count([out, retval] long* pc);
        [helpcontext(0x0003d09e)]
        HRESULT _stdcall Add(
                        [in] BSTR Name, 
                        [in] VARIANT_BOOL LinkToContent, 
                        [in, optional] VARIANT Type, 
                        [in, optional] VARIANT Value, 
                        [in, optional] VARIANT LinkSource, 
                        [in, lcid] long lcid, 
                        [out, retval] DocumentProperty** ppIDocProp);
        [propget]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** ppunkEnum);
        [propget, helpcontext(0x0003d0a1)]
        HRESULT _stdcall Application([out, retval] IDispatch** ppidisp);
        [propget, helpcontext(0x0003d0a2)]
        HRESULT _stdcall Creator([out, retval] long* plCreator);
    };

    typedef enum {
        msoOptionsNew = 1,
        msoOptionsAdd = 2,
        msoOptionsWithin = 3
    } MsoFileFindOptions;

    typedef enum {
        msoViewFileInfo = 1,
        msoViewPreview = 2,
        msoViewSummaryInfo = 3
    } MsoFileFindView;

    typedef enum {
        msoFileFindSortbyAuthor = 1,
        msoFileFindSortbyDateCreated = 2,
        msoFileFindSortbyLastSavedBy = 3,
        msoFileFindSortbyDateSaved = 4,
        msoFileFindSortbyFileName = 5,
        msoFileFindSortbySize = 6,
        msoFileFindSortbyTitle = 7
    } MsoFileFindSortBy;

    typedef enum {
        msoListbyName = 1,
        msoListbyTitle = 2
    } MsoFileFindListBy;

    [
      odl,
      uuid(000C0338-0000-0000-C000-000000000046),
      helpcontext(0x00033838),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IFoundFiles : IDispatch {
        [id(00000000), propget, helpcontext(0x00033839)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] BSTR* pbstr);
        [id(0x60020001), propget, helpcontext(0x0003383a)]
        HRESULT Count([out, retval] int* pCount);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
    };

    [
      odl,
      uuid(000C0337-0000-0000-C000-000000000046),
      helpcontext(0x00033c20),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IFind : IDispatch {
        [id(00000000), propget, helpcontext(0x00033c21)]
        HRESULT SearchPath([out, retval] BSTR* pbstr);
        [id(0x60020001), propget, helpcontext(0x00033c22)]
        HRESULT Name([out, retval] BSTR* pbstr);
        [id(0x60020002), propget, helpcontext(0x00033c23)]
        HRESULT SubDir([out, retval] VARIANT_BOOL* retval);
        [id(0x60020003), propget, helpcontext(0x00033c24)]
        HRESULT Title([out, retval] BSTR* pbstr);
        [id(0x60020004), propget, helpcontext(0x00033c25)]
        HRESULT Author([out, retval] BSTR* pbstr);
        [id(0x60020005), propget, helpcontext(0x00033c26)]
        HRESULT Keywords([out, retval] BSTR* pbstr);
        [id(0x60020006), propget, helpcontext(0x00033c27)]
        HRESULT Subject([out, retval] BSTR* pbstr);
        [id(0x60020007), propget, helpcontext(0x00033c28)]
        HRESULT Options([out, retval] MsoFileFindOptions* penmOptions);
        [id(0x60020008), propget, helpcontext(0x00033c29)]
        HRESULT MatchCase([out, retval] VARIANT_BOOL* retval);
        [id(0x60020009), propget, helpcontext(0x00033c2a)]
        HRESULT Text([out, retval] BSTR* pbstr);
        [id(0x6002000a), propget, helpcontext(0x00033c2b)]
        HRESULT PatternMatch([out, retval] VARIANT_BOOL* retval);
        [id(0x6002000b), propget, helpcontext(0x00033c2c)]
        HRESULT DateSavedFrom([out, retval] VARIANT* pdatSavedFrom);
        [id(0x6002000c), propget, helpcontext(0x00033c2d)]
        HRESULT DateSavedTo([out, retval] VARIANT* pdatSavedTo);
        [id(0x6002000d), propget, helpcontext(0x00033c2e)]
        HRESULT SavedBy([out, retval] BSTR* pbstr);
        [id(0x6002000e), propget, helpcontext(0x00033c2f)]
        HRESULT DateCreatedFrom([out, retval] VARIANT* pdatCreatedFrom);
        [id(0x6002000f), propget, helpcontext(0x00033c30)]
        HRESULT DateCreatedTo([out, retval] VARIANT* pdatCreatedTo);
        [id(0x60020010), propget, helpcontext(0x00033c31)]
        HRESULT View([out, retval] MsoFileFindView* penmView);
        [id(0x60020011), propget, helpcontext(0x00033c32)]
        HRESULT SortBy([out, retval] MsoFileFindSortBy* penmSortBy);
        [id(0x60020012), propget, helpcontext(0x00033c33)]
        HRESULT ListBy([out, retval] MsoFileFindListBy* penmListBy);
        [id(0x60020013), propget, helpcontext(0x00033c34)]
        HRESULT SelectedFile([out, retval] int* pintSelectedFile);
        [id(0x60020014), propget, helpcontext(0x00033c35)]
        HRESULT Results([out, retval] IFoundFiles** pdisp);
        [id(0x60020015), helpcontext(0x00033c36)]
        HRESULT Show([out, retval] int* pRows);
        [id(00000000), propput, helpcontext(0x00033c21)]
        HRESULT SearchPath([in] BSTR pbstr);
        [id(0x60020001), propput, helpcontext(0x00033c22)]
        HRESULT Name([in] BSTR pbstr);
        [id(0x60020002), propput, helpcontext(0x00033c23)]
        HRESULT SubDir([in] VARIANT_BOOL retval);
        [id(0x60020003), propput, helpcontext(0x00033c24)]
        HRESULT Title([in] BSTR pbstr);
        [id(0x60020004), propput, helpcontext(0x00033c25)]
        HRESULT Author([in] BSTR pbstr);
        [id(0x60020005), propput, helpcontext(0x00033c26)]
        HRESULT Keywords([in] BSTR pbstr);
        [id(0x60020006), propput, helpcontext(0x00033c27)]
        HRESULT Subject([in] BSTR pbstr);
        [id(0x60020007), propput, helpcontext(0x00033c28)]
        HRESULT Options([in] MsoFileFindOptions penmOptions);
        [id(0x60020008), propput, helpcontext(0x00033c29)]
        HRESULT MatchCase([in] VARIANT_BOOL retval);
        [id(0x60020009), propput, helpcontext(0x00033c2a)]
        HRESULT Text([in] BSTR pbstr);
        [id(0x6002000a), propput, helpcontext(0x00033c2b)]
        HRESULT PatternMatch([in] VARIANT_BOOL retval);
        [id(0x6002000b), propput, helpcontext(0x00033c2c)]
        HRESULT DateSavedFrom([in] VARIANT pdatSavedFrom);
        [id(0x6002000c), propput, helpcontext(0x00033c2d)]
        HRESULT DateSavedTo([in] VARIANT pdatSavedTo);
        [id(0x6002000d), propput, helpcontext(0x00033c2e)]
        HRESULT SavedBy([in] BSTR pbstr);
        [id(0x6002000e), propput, helpcontext(0x00033c2f)]
        HRESULT DateCreatedFrom([in] VARIANT pdatCreatedFrom);
        [id(0x6002000f), propput, helpcontext(0x00033c30)]
        HRESULT DateCreatedTo([in] VARIANT pdatCreatedTo);
        [id(0x60020010), propput, helpcontext(0x00033c31)]
        HRESULT View([in] MsoFileFindView penmView);
        [id(0x60020011), propput, helpcontext(0x00033c32)]
        HRESULT SortBy([in] MsoFileFindSortBy penmSortBy);
        [id(0x60020012), propput, helpcontext(0x00033c33)]
        HRESULT ListBy([in] MsoFileFindListBy penmListBy);
        [id(0x60020013), propput, helpcontext(0x00033c34)]
        HRESULT SelectedFile([in] int pintSelectedFile);
        [id(0x6002002a), helpcontext(0x00033c37)]
        HRESULT Execute();
        [id(0x6002002b), helpcontext(0x00033c38)]
        HRESULT Load([in] BSTR bstrQueryName);
        [id(0x6002002c), helpcontext(0x00033c39)]
        HRESULT Save([in] BSTR bstrQueryName);
        [id(0x6002002d), helpcontext(0x00033c3a)]
        HRESULT Delete([in] BSTR bstrQueryName);
        [id(0x6002002e), propget, helpcontext(0x00033c3b)]
        HRESULT FileType([out, retval] long* plFileType);
        [id(0x6002002e), propput, helpcontext(0x00033c3b)]
        HRESULT FileType([in] long plFileType);
    };

    typedef enum {
        msoLastModifiedYesterday = 1,
        msoLastModifiedToday = 2,
        msoLastModifiedLastWeek = 3,
        msoLastModifiedThisWeek = 4,
        msoLastModifiedLastMonth = 5,
        msoLastModifiedThisMonth = 6,
        msoLastModifiedAnyTime = 7
    } MsoLastModified;

    typedef enum {
        msoSortByFileName = 1,
        msoSortBySize = 2,
        msoSortByFileType = 3,
        msoSortByLastModified = 4,
        msoSortByNone = 5
    } MsoSortBy;

    typedef enum {
        msoSortOrderAscending = 1,
        msoSortOrderDescending = 2
    } MsoSortOrder;

    typedef enum {
        msoConnectorAnd = 1,
        msoConnectorOr = 2
    } MsoConnector;

    typedef enum {
        msoConditionFileTypeAllFiles = 1,
        msoConditionFileTypeOfficeFiles = 2,
        msoConditionFileTypeWordDocuments = 3,
        msoConditionFileTypeExcelWorkbooks = 4,
        msoConditionFileTypePowerPointPresentations = 5,
        msoConditionFileTypeBinders = 6,
        msoConditionFileTypeDatabases = 7,
        msoConditionFileTypeTemplates = 8,
        msoConditionIncludes = 9,
        msoConditionIncludesPhrase = 10,
        msoConditionBeginsWith = 11,
        msoConditionEndsWith = 12,
        msoConditionIncludesNearEachOther = 13,
        msoConditionIsExactly = 14,
        msoConditionIsNot = 15,
        msoConditionYesterday = 16,
        msoConditionToday = 17,
        msoConditionTomorrow = 18,
        msoConditionLastWeek = 19,
        msoConditionThisWeek = 20,
        msoConditionNextWeek = 21,
        msoConditionLastMonth = 22,
        msoConditionThisMonth = 23,
        msoConditionNextMonth = 24,
        msoConditionAnytime = 25,
        msoConditionAnytimeBetween = 26,
        msoConditionOn = 27,
        msoConditionOnOrAfter = 28,
        msoConditionOnOrBefore = 29,
        msoConditionInTheNext = 30,
        msoConditionInTheLast = 31,
        msoConditionEquals = 32,
        msoConditionDoesNotEqual = 33,
        msoConditionAnyNumberBetween = 34,
        msoConditionAtMost = 35,
        msoConditionAtLeast = 36,
        msoConditionMoreThan = 37,
        msoConditionLessThan = 38,
        msoConditionIsYes = 39,
        msoConditionIsNo = 40,
        msoConditionIncludesFormsOf = 41,
        msoConditionFreeText = 42,
        msoConditionFileTypeOutlookItems = 43,
        msoConditionFileTypeMailItem = 44,
        msoConditionFileTypeCalendarItem = 45,
        msoConditionFileTypeContactItem = 46,
        msoConditionFileTypeNoteItem = 47,
        msoConditionFileTypeJournalItem = 48,
        msoConditionFileTypeTaskItem = 49,
        msoConditionFileTypePhotoDrawFiles = 50,
        msoConditionFileTypeDataConnectionFiles = 51,
        msoConditionFileTypePublisherFiles = 52,
        msoConditionFileTypeProjectFiles = 53,
        msoConditionFileTypeDocumentImagingFiles = 54,
        msoConditionFileTypeVisioFiles = 55,
        msoConditionFileTypeDesignerFiles = 56,
        msoConditionFileTypeWebPages = 57,
        msoConditionEqualsLow = 58,
        msoConditionEqualsNormal = 59,
        msoConditionEqualsHigh = 60,
        msoConditionNotEqualToLow = 61,
        msoConditionNotEqualToNormal = 62,
        msoConditionNotEqualToHigh = 63,
        msoConditionEqualsNotStarted = 64,
        msoConditionEqualsInProgress = 65,
        msoConditionEqualsCompleted = 66,
        msoConditionEqualsWaitingForSomeoneElse = 67,
        msoConditionEqualsDeferred = 68,
        msoConditionNotEqualToNotStarted = 69,
        msoConditionNotEqualToInProgress = 70,
        msoConditionNotEqualToCompleted = 71,
        msoConditionNotEqualToWaitingForSomeoneElse = 72,
        msoConditionNotEqualToDeferred = 73
    } MsoCondition;

    typedef enum {
        msoFileTypeAllFiles = 1,
        msoFileTypeOfficeFiles = 2,
        msoFileTypeWordDocuments = 3,
        msoFileTypeExcelWorkbooks = 4,
        msoFileTypePowerPointPresentations = 5,
        msoFileTypeBinders = 6,
        msoFileTypeDatabases = 7,
        msoFileTypeTemplates = 8,
        msoFileTypeOutlookItems = 9,
        msoFileTypeMailItem = 10,
        msoFileTypeCalendarItem = 11,
        msoFileTypeContactItem = 12,
        msoFileTypeNoteItem = 13,
        msoFileTypeJournalItem = 14,
        msoFileTypeTaskItem = 15,
        msoFileTypePhotoDrawFiles = 16,
        msoFileTypeDataConnectionFiles = 17,
        msoFileTypePublisherFiles = 18,
        msoFileTypeProjectFiles = 19,
        msoFileTypeDocumentImagingFiles = 20,
        msoFileTypeVisioFiles = 21,
        msoFileTypeDesignerFiles = 22,
        msoFileTypeWebPages = 23
    } MsoFileType;

    [
      odl,
      uuid(000C0331-0000-0000-C000-000000000046),
      helpcontext(0x00034008),
      hidden,
      dual,
      oleautomation
    ]
    interface FoundFiles : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00034009)]
        HRESULT Item(
                        [in] int Index, 
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* pbstrFile);
        [id(0x00000004), propget, helpcontext(0x0003400a)]
        HRESULT Count([out, retval] long* pc);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
    };

    [
      odl,
      uuid(000C0333-0000-0000-C000-000000000046),
      helpcontext(0x000343f0),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface PropertyTest : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x000343f1)]
        HRESULT Name([out, retval] BSTR* pbstrRetVal);
        [id(0x00000002), propget, helpcontext(0x000343f2)]
        HRESULT Condition([out, retval] MsoCondition* pConditionRetVal);
        [id(0x00000003), propget, helpcontext(0x000343f3)]
        HRESULT Value([out, retval] VARIANT* pvargRetVal);
        [id(0x00000004), propget, helpcontext(0x000343f4)]
        HRESULT SecondValue([out, retval] VARIANT* pvargRetVal2);
        [id(0x00000005), propget, helpcontext(0x000343f5)]
        HRESULT Connector([out, retval] MsoConnector* pConnector);
    };

    [
      odl,
      uuid(000C0334-0000-0000-C000-000000000046),
      helpcontext(0x000347d8),
      hidden,
      dual,
      oleautomation
    ]
    interface PropertyTests : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x000347d9)]
        HRESULT Item(
                        [in] int Index, 
                        [in, lcid] long lcid, 
                        [out, retval] PropertyTest** ppIDocProp);
        [id(0x00000004), propget, helpcontext(0x000347da)]
        HRESULT Count([out, retval] long* pc);
        [id(0x00000005), helpcontext(0x000347db)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in] MsoCondition Condition, 
                        [in, optional] VARIANT Value, 
                        [in, optional] VARIANT SecondValue, 
                        [in, optional, defaultvalue(1)] MsoConnector Connector);
        [id(0x00000006), helpcontext(0x000347dc)]
        HRESULT Remove([in] int Index);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
    };

    [
      odl,
      uuid(000C0332-0000-0000-C000-000000000046),
      helpcontext(0x00034bc0),
      hidden,
      dual,
      oleautomation
    ]
    interface FileSearch : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x00034bc1)]
        HRESULT SearchSubFolders([out, retval] VARIANT_BOOL* SearchSubFoldersRetVal);
        [id(0x00000001), propput, helpcontext(0x00034bc1)]
        HRESULT SearchSubFolders([in] VARIANT_BOOL SearchSubFoldersRetVal);
        [id(0x00000002), propget, helpcontext(0x00034bc2)]
        HRESULT MatchTextExactly([out, retval] VARIANT_BOOL* MatchTextRetVal);
        [id(0x00000002), propput, helpcontext(0x00034bc2)]
        HRESULT MatchTextExactly([in] VARIANT_BOOL MatchTextRetVal);
        [id(0x00000003), propget, helpcontext(0x00034bc3)]
        HRESULT MatchAllWordForms([out, retval] VARIANT_BOOL* MatchAllWordFormsRetVal);
        [id(0x00000003), propput, helpcontext(0x00034bc3)]
        HRESULT MatchAllWordForms([in] VARIANT_BOOL MatchAllWordFormsRetVal);
        [id(0x00000004), propget, helpcontext(0x00034bc4)]
        HRESULT FileName([out, retval] BSTR* FileNameRetVal);
        [id(0x00000004), propput, helpcontext(0x00034bc4)]
        HRESULT FileName([in] BSTR FileNameRetVal);
        [id(0x00000005), propget, helpcontext(0x00034bc5)]
        HRESULT FileType([out, retval] MsoFileType* FileTypeRetVal);
        [id(0x00000005), propput, helpcontext(0x00034bc5)]
        HRESULT FileType([in] MsoFileType FileTypeRetVal);
        [id(0x00000006), propget, helpcontext(0x00034bc6)]
        HRESULT LastModified([out, retval] MsoLastModified* LastModifiedRetVal);
        [id(0x00000006), propput, helpcontext(0x00034bc6)]
        HRESULT LastModified([in] MsoLastModified LastModifiedRetVal);
        [id(0x00000007), propget, helpcontext(0x00034bc7)]
        HRESULT TextOrProperty([out, retval] BSTR* TextOrProperty);
        [id(0x00000007), propput, helpcontext(0x00034bc7)]
        HRESULT TextOrProperty([in] BSTR TextOrProperty);
        [id(0x00000008), propget, helpcontext(0x00034bc8)]
        HRESULT LookIn([out, retval] BSTR* LookInRetVal);
        [id(0x00000008), propput, helpcontext(0x00034bc8)]
        HRESULT LookIn([in] BSTR LookInRetVal);
        [id(0x00000009), helpcontext(0x00034bc9)]
        HRESULT Execute(
                        [in, optional, defaultvalue(1)] MsoSortBy SortBy, 
                        [in, optional, defaultvalue(1)] MsoSortOrder SortOrder, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL AlwaysAccurate, 
                        [out, retval] int* pRet);
        [id(0x0000000a), helpcontext(0x00034bca)]
        HRESULT NewSearch();
        [id(0x0000000b), propget, helpcontext(0x00034bcb)]
        HRESULT FoundFiles([out, retval] FoundFiles** FoundFilesRet);
        [id(0x0000000c), propget, helpcontext(0x00034bcc)]
        HRESULT PropertyTests([out, retval] PropertyTests** PropTestsRet);
        [id(0x0000000d), propget, helpcontext(0x00034bcd)]
        HRESULT SearchScopes([out, retval] SearchScopes** SearchScopesRet);
        [id(0x0000000e), propget, helpcontext(0x00034bce)]
        HRESULT SearchFolders([out, retval] SearchFolders** SearchFoldersRet);
        [id(0x00000010), propget, helpcontext(0x00034bd0)]
        HRESULT FileTypes([out, retval] FileTypes** FileTypesRet);
        [id(0x00000011), helpcontext(0x00034bd1)]
        HRESULT RefreshScopes();
    };

    [
      odl,
      uuid(000C033A-0000-0000-C000-000000000046),
      helpcontext(0x00035778),
      dual,
      nonextensible,
      oleautomation
    ]
    interface COMAddIn : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00035779)]
        HRESULT Description([out, retval] BSTR* RetValue);
        [id(00000000), propput, helpcontext(0x00035779)]
        HRESULT Description([in] BSTR RetValue);
        [id(0x00000003), propget, helpcontext(0x0003577b)]
        HRESULT ProgId([out, retval] BSTR* RetValue);
        [id(0x00000004), propget, helpcontext(0x0003577c)]
        HRESULT Guid([out, retval] BSTR* RetValue);
        [id(0x00000006), propget, helpcontext(0x0003577d)]
        HRESULT Connect([out, retval] VARIANT_BOOL* RetValue);
        [id(0x00000006), propput, helpcontext(0x0003577d)]
        HRESULT Connect([in] VARIANT_BOOL RetValue);
        [id(0x00000007), propget, helpcontext(0x0003577f)]
        HRESULT Object([out, retval] IDispatch** RetValue);
        [id(0x00000007), propput, helpcontext(0x0003577f)]
        HRESULT Object([in] IDispatch* RetValue);
        [id(0x00000008), propget, helpcontext(0x00035781)]
        HRESULT Parent([out, retval] IDispatch** retval);
    };

    [
      odl,
      uuid(000C0339-0000-0000-C000-000000000046),
      helpcontext(0x00035b60),
      dual,
      nonextensible,
      oleautomation
    ]
    interface COMAddIns : _IMsoDispObj {
        [id(00000000), helpcontext(0x00035b61)]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] COMAddIn** RetValue);
        [id(0x00000001), propget, helpcontext(0x00035b62)]
        HRESULT Count([out, retval] long* RetValue);
        [id(0xfffffffc), propget, restricted, helpcontext(0x00035b63)]
        HRESULT _NewEnum([out, retval] IUnknown** RetValue);
        [id(0x00000002), helpcontext(0x00035b64)]
        HRESULT Update();
        [id(0x00000003), propget, helpcontext(0x00035b65)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x00000004), hidden, helpcontext(0x00035b66)]
        HRESULT SetAppModal([in] VARIANT_BOOL varfModal);
    };

    typedef enum {
        msoLanguageIDMixed = 0xfffffffe,
        msoLanguageIDNone = 0,
        msoLanguageIDNoProofing = 1024,
        msoLanguageIDAfrikaans = 1078,
        msoLanguageIDAlbanian = 1052,
        msoLanguageIDAmharic = 1118,
        msoLanguageIDArabicAlgeria = 5121,
        msoLanguageIDArabicBahrain = 15361,
        msoLanguageIDArabicEgypt = 3073,
        msoLanguageIDArabicIraq = 2049,
        msoLanguageIDArabicJordan = 11265,
        msoLanguageIDArabicKuwait = 13313,
        msoLanguageIDArabicLebanon = 12289,
        msoLanguageIDArabicLibya = 4097,
        msoLanguageIDArabicMorocco = 6145,
        msoLanguageIDArabicOman = 8193,
        msoLanguageIDArabicQatar = 16385,
        msoLanguageIDArabic = 1025,
        msoLanguageIDArabicSyria = 10241,
        msoLanguageIDArabicTunisia = 7169,
        msoLanguageIDArabicUAE = 14337,
        msoLanguageIDArabicYemen = 9217,
        msoLanguageIDArmenian = 1067,
        msoLanguageIDAssamese = 1101,
        msoLanguageIDAzeriCyrillic = 2092,
        msoLanguageIDAzeriLatin = 1068,
        msoLanguageIDBasque = 1069,
        msoLanguageIDByelorussian = 1059,
        msoLanguageIDBengali = 1093,
        msoLanguageIDBosnian = 4122,
        msoLanguageIDBosnianBosniaHerzegovinaCyrillic = 8218,
        msoLanguageIDBosnianBosniaHerzegovinaLatin = 5146,
        msoLanguageIDBulgarian = 1026,
        msoLanguageIDBurmese = 1109,
        msoLanguageIDCatalan = 1027,
        msoLanguageIDChineseHongKongSAR = 3076,
        msoLanguageIDChineseMacaoSAR = 5124,
        msoLanguageIDSimplifiedChinese = 2052,
        msoLanguageIDChineseSingapore = 4100,
        msoLanguageIDTraditionalChinese = 1028,
        msoLanguageIDCherokee = 1116,
        msoLanguageIDCroatian = 1050,
        msoLanguageIDCzech = 1029,
        msoLanguageIDDanish = 1030,
        msoLanguageIDDivehi = 1125,
        msoLanguageIDBelgianDutch = 2067,
        msoLanguageIDDutch = 1043,
        msoLanguageIDDzongkhaBhutan = 2129,
        msoLanguageIDEdo = 1126,
        msoLanguageIDEnglishAUS = 3081,
        msoLanguageIDEnglishBelize = 10249,
        msoLanguageIDEnglishCanadian = 4105,
        msoLanguageIDEnglishCaribbean = 9225,
        msoLanguageIDEnglishIndonesia = 14345,
        msoLanguageIDEnglishIreland = 6153,
        msoLanguageIDEnglishJamaica = 8201,
        msoLanguageIDEnglishNewZealand = 5129,
        msoLanguageIDEnglishPhilippines = 13321,
        msoLanguageIDEnglishSouthAfrica = 7177,
        msoLanguageIDEnglishTrinidadTobago = 11273,
        msoLanguageIDEnglishUK = 2057,
        msoLanguageIDEnglishUS = 1033,
        msoLanguageIDEnglishZimbabwe = 12297,
        msoLanguageIDEstonian = 1061,
        msoLanguageIDFaeroese = 1080,
        msoLanguageIDFarsi = 1065,
        msoLanguageIDFilipino = 1124,
        msoLanguageIDFinnish = 1035,
        msoLanguageIDBelgianFrench = 2060,
        msoLanguageIDFrenchCameroon = 11276,
        msoLanguageIDFrenchCanadian = 3084,
        msoLanguageIDFrenchCotedIvoire = 12300,
        msoLanguageIDFrench = 1036,
        msoLanguageIDFrenchHaiti = 15372,
        msoLanguageIDFrenchLuxembourg = 5132,
        msoLanguageIDFrenchMali = 13324,
        msoLanguageIDFrenchMonaco = 6156,
        msoLanguageIDFrenchMorocco = 14348,
        msoLanguageIDFrenchReunion = 8204,
        msoLanguageIDFrenchSenegal = 10252,
        msoLanguageIDSwissFrench = 4108,
        msoLanguageIDFrenchWestIndies = 7180,
        msoLanguageIDFrenchZaire = 9228,
        msoLanguageIDFrenchCongoDRC = 9228,
        msoLanguageIDFrisianNetherlands = 1122,
        msoLanguageIDFulfulde = 1127,
        msoLanguageIDGaelicIreland = 2108,
        msoLanguageIDGaelicScotland = 1084,
        msoLanguageIDGalician = 1110,
        msoLanguageIDGeorgian = 1079,
        msoLanguageIDGermanAustria = 3079,
        msoLanguageIDGerman = 1031,
        msoLanguageIDGermanLiechtenstein = 5127,
        msoLanguageIDGermanLuxembourg = 4103,
        msoLanguageIDSwissGerman = 2055,
        msoLanguageIDGreek = 1032,
        msoLanguageIDGuarani = 1140,
        msoLanguageIDGujarati = 1095,
        msoLanguageIDHausa = 1128,
        msoLanguageIDHawaiian = 1141,
        msoLanguageIDHebrew = 1037,
        msoLanguageIDHindi = 1081,
        msoLanguageIDHungarian = 1038,
        msoLanguageIDIbibio = 1129,
        msoLanguageIDIcelandic = 1039,
        msoLanguageIDIgbo = 1136,
        msoLanguageIDIndonesian = 1057,
        msoLanguageIDInuktitut = 1117,
        msoLanguageIDItalian = 1040,
        msoLanguageIDSwissItalian = 2064,
        msoLanguageIDJapanese = 1041,
        msoLanguageIDKannada = 1099,
        msoLanguageIDKanuri = 1137,
        msoLanguageIDKashmiri = 1120,
        msoLanguageIDKashmiriDevanagari = 2144,
        msoLanguageIDKazakh = 1087,
        msoLanguageIDKhmer = 1107,
        msoLanguageIDKirghiz = 1088,
        msoLanguageIDKonkani = 1111,
        msoLanguageIDKorean = 1042,
        msoLanguageIDKyrgyz = 1088,
        msoLanguageIDLatin = 1142,
        msoLanguageIDLao = 1108,
        msoLanguageIDLatvian = 1062,
        msoLanguageIDLithuanian = 1063,
        msoLanguageIDMacedonian = 1071,
        msoLanguageIDMacedonianFYROM = 1071,
        msoLanguageIDMalaysian = 1086,
        msoLanguageIDMalayBruneiDarussalam = 2110,
        msoLanguageIDMalayalam = 1100,
        msoLanguageIDMaltese = 1082,
        msoLanguageIDManipuri = 1112,
        msoLanguageIDMaori = 1153,
        msoLanguageIDMarathi = 1102,
        msoLanguageIDMongolian = 1104,
        msoLanguageIDNepali = 1121,
        msoLanguageIDNorwegianBokmol = 1044,
        msoLanguageIDNorwegianNynorsk = 2068,
        msoLanguageIDOriya = 1096,
        msoLanguageIDOromo = 1138,
        msoLanguageIDPashto = 1123,
        msoLanguageIDPolish = 1045,
        msoLanguageIDBrazilianPortuguese = 1046,
        msoLanguageIDPortuguese = 2070,
        msoLanguageIDPunjabi = 1094,
        msoLanguageIDQuechuaBolivia = 1131,
        msoLanguageIDQuechuaEcuador = 2155,
        msoLanguageIDQuechuaPeru = 3179,
        msoLanguageIDRhaetoRomanic = 1047,
        msoLanguageIDRomanianMoldova = 2072,
        msoLanguageIDRomanian = 1048,
        msoLanguageIDRussianMoldova = 2073,
        msoLanguageIDRussian = 1049,
        msoLanguageIDSamiLappish = 1083,
        msoLanguageIDSanskrit = 1103,
        msoLanguageIDSepedi = 1132,
        msoLanguageIDSerbianBosniaHerzegovinaCyrillic = 7194,
        msoLanguageIDSerbianBosniaHerzegovinaLatin = 6170,
        msoLanguageIDSerbianCyrillic = 3098,
        msoLanguageIDSerbianLatin = 2074,
        msoLanguageIDSesotho = 1072,
        msoLanguageIDSindhi = 1113,
        msoLanguageIDSindhiPakistan = 2137,
        msoLanguageIDSinhalese = 1115,
        msoLanguageIDSlovak = 1051,
        msoLanguageIDSlovenian = 1060,
        msoLanguageIDSomali = 1143,
        msoLanguageIDSorbian = 1070,
        msoLanguageIDSpanishArgentina = 11274,
        msoLanguageIDSpanishBolivia = 16394,
        msoLanguageIDSpanishChile = 13322,
        msoLanguageIDSpanishColombia = 9226,
        msoLanguageIDSpanishCostaRica = 5130,
        msoLanguageIDSpanishDominicanRepublic = 7178,
        msoLanguageIDSpanishEcuador = 12298,
        msoLanguageIDSpanishElSalvador = 17418,
        msoLanguageIDSpanishGuatemala = 4106,
        msoLanguageIDSpanishHonduras = 18442,
        msoLanguageIDMexicanSpanish = 2058,
        msoLanguageIDSpanishNicaragua = 19466,
        msoLanguageIDSpanishPanama = 6154,
        msoLanguageIDSpanishParaguay = 15370,
        msoLanguageIDSpanishPeru = 10250,
        msoLanguageIDSpanishPuertoRico = 20490,
        msoLanguageIDSpanishModernSort = 3082,
        msoLanguageIDSpanish = 1034,
        msoLanguageIDSpanishUruguay = 14346,
        msoLanguageIDSpanishVenezuela = 8202,
        msoLanguageIDSutu = 1072,
        msoLanguageIDSwahili = 1089,
        msoLanguageIDSwedishFinland = 2077,
        msoLanguageIDSwedish = 1053,
        msoLanguageIDSyriac = 1114,
        msoLanguageIDTajik = 1064,
        msoLanguageIDTamil = 1097,
        msoLanguageIDTamazight = 1119,
        msoLanguageIDTamazightLatin = 2143,
        msoLanguageIDTatar = 1092,
        msoLanguageIDTelugu = 1098,
        msoLanguageIDThai = 1054,
        msoLanguageIDTibetan = 1105,
        msoLanguageIDTigrignaEthiopic = 1139,
        msoLanguageIDTigrignaEritrea = 2163,
        msoLanguageIDTsonga = 1073,
        msoLanguageIDTswana = 1074,
        msoLanguageIDTurkish = 1055,
        msoLanguageIDTurkmen = 1090,
        msoLanguageIDUkrainian = 1058,
        msoLanguageIDUrdu = 1056,
        msoLanguageIDUzbekCyrillic = 2115,
        msoLanguageIDUzbekLatin = 1091,
        msoLanguageIDVenda = 1075,
        msoLanguageIDVietnamese = 1066,
        msoLanguageIDWelsh = 1106,
        msoLanguageIDXhosa = 1076,
        msoLanguageIDYi = 1144,
        msoLanguageIDYiddish = 1085,
        msoLanguageIDYoruba = 1130,
        msoLanguageIDZulu = 1077
    } MsoLanguageID;

    [
      odl,
      uuid(000C0353-0000-0000-C000-000000000046),
      helpcontext(0x00038658),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LanguageSettings : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x00038659)]
        HRESULT LanguageID(
                        [in] MsoAppLanguageID Id, 
                        [out, retval] int* plid);
        [id(0x00000002), propget, helpcontext(0x0003865a)]
        HRESULT LanguagePreferredForEditing(
                        [in] MsoLanguageID lid, 
                        [out, retval] VARIANT_BOOL* pf);
        [id(0x00000003), propget, helpcontext(0x0003865b)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
    };

    [
      odl,
      uuid(55F88892-7708-11D1-ACEB-006008961DA5),
      helpcontext(0x00037aa0),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ICommandBarsEvents : IDispatch {
        [id(0x00000001), helpcontext(0x00037aa1)]
        void OnUpdate();
    };

    [
      uuid(000C0352-0000-0000-C000-000000000046),
      hidden
    ]
    dispinterface _CommandBarsEvents {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000001), helpcontext(0x00037aa1)]
            void OnUpdate();
    };

    [
      uuid(55F88893-7708-11D1-ACEB-006008961DA5),
      helpcontext(0x0003b150),
      noncreatable
    ]
    coclass CommandBars {
        [default] interface _CommandBars;
        [default, source] dispinterface _CommandBarsEvents;
    };

    [
      odl,
      uuid(55F88896-7708-11D1-ACEB-006008961DA5),
      helpcontext(0x00037e88),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ICommandBarComboBoxEvents : IDispatch {
        [id(0x00000001), helpcontext(0x00037e89)]
        void Change([in] _CommandBarComboBox* Ctrl);
    };

    [
      uuid(000C0354-0000-0000-C000-000000000046),
      hidden
    ]
    dispinterface _CommandBarComboBoxEvents {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000001), helpcontext(0x00037e89)]
            void Change([in] _CommandBarComboBox* Ctrl);
    };

    [
      uuid(55F88897-7708-11D1-ACEB-006008961DA5),
      helpcontext(0x0003b538),
      noncreatable
    ]
    coclass CommandBarComboBox {
        [default] interface _CommandBarComboBox;
        [default, source] dispinterface _CommandBarComboBoxEvents;
    };

    [
      odl,
      uuid(55F88890-7708-11D1-ACEB-006008961DA5),
      helpcontext(0x00038270),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ICommandBarButtonEvents : IDispatch {
        [id(0x00000001), helpcontext(0x00038271)]
        void Click(
                        [in] _CommandBarButton* Ctrl, 
                        [in, out] VARIANT_BOOL* CancelDefault);
    };

    [
      uuid(000C0351-0000-0000-C000-000000000046),
      hidden
    ]
    dispinterface _CommandBarButtonEvents {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000001), helpcontext(0x00038271)]
            void Click(
                            [in] _CommandBarButton* Ctrl, 
                            [in, out] VARIANT_BOOL* CancelDefault);
    };

    [
      uuid(55F88891-7708-11D1-ACEB-006008961DA5),
      helpcontext(0x0003b920),
      noncreatable
    ]
    coclass CommandBarButton {
        [default] interface _CommandBarButton;
        [default, source] dispinterface _CommandBarButtonEvents;
    };

    typedef enum {
        msoScreenSize544x376 = 0,
        msoScreenSize640x480 = 1,
        msoScreenSize720x512 = 2,
        msoScreenSize800x600 = 3,
        msoScreenSize1024x768 = 4,
        msoScreenSize1152x882 = 5,
        msoScreenSize1152x900 = 6,
        msoScreenSize1280x1024 = 7,
        msoScreenSize1600x1200 = 8,
        msoScreenSize1800x1440 = 9,
        msoScreenSize1920x1200 = 10
    } MsoScreenSize;

    typedef enum {
        msoCharacterSetArabic = 1,
        msoCharacterSetCyrillic = 2,
        msoCharacterSetEnglishWesternEuropeanOtherLatinScript = 3,
        msoCharacterSetGreek = 4,
        msoCharacterSetHebrew = 5,
        msoCharacterSetJapanese = 6,
        msoCharacterSetKorean = 7,
        msoCharacterSetMultilingualUnicode = 8,
        msoCharacterSetSimplifiedChinese = 9,
        msoCharacterSetThai = 10,
        msoCharacterSetTraditionalChinese = 11,
        msoCharacterSetVietnamese = 12
    } MsoCharacterSet;

    typedef enum {
        msoEncodingThai = 874,
        msoEncodingJapaneseShiftJIS = 932,
        msoEncodingSimplifiedChineseGBK = 936,
        msoEncodingKorean = 949,
        msoEncodingTraditionalChineseBig5 = 950,
        msoEncodingUnicodeLittleEndian = 1200,
        msoEncodingUnicodeBigEndian = 1201,
        msoEncodingCentralEuropean = 1250,
        msoEncodingCyrillic = 1251,
        msoEncodingWestern = 1252,
        msoEncodingGreek = 1253,
        msoEncodingTurkish = 1254,
        msoEncodingHebrew = 1255,
        msoEncodingArabic = 1256,
        msoEncodingBaltic = 1257,
        msoEncodingVietnamese = 1258,
        msoEncodingAutoDetect = 50001,
        msoEncodingJapaneseAutoDetect = 50932,
        msoEncodingSimplifiedChineseAutoDetect = 50936,
        msoEncodingKoreanAutoDetect = 50949,
        msoEncodingTraditionalChineseAutoDetect = 50950,
        msoEncodingCyrillicAutoDetect = 51251,
        msoEncodingGreekAutoDetect = 51253,
        msoEncodingArabicAutoDetect = 51256,
        msoEncodingISO88591Latin1 = 28591,
        msoEncodingISO88592CentralEurope = 28592,
        msoEncodingISO88593Latin3 = 28593,
        msoEncodingISO88594Baltic = 28594,
        msoEncodingISO88595Cyrillic = 28595,
        msoEncodingISO88596Arabic = 28596,
        msoEncodingISO88597Greek = 28597,
        msoEncodingISO88598Hebrew = 28598,
        msoEncodingISO88599Turkish = 28599,
        msoEncodingISO885915Latin9 = 28605,
        msoEncodingISO88598HebrewLogical = 38598,
        msoEncodingISO2022JPNoHalfwidthKatakana = 50220,
        msoEncodingISO2022JPJISX02021984 = 50221,
        msoEncodingISO2022JPJISX02011989 = 50222,
        msoEncodingISO2022KR = 50225,
        msoEncodingISO2022CNTraditionalChinese = 50227,
        msoEncodingISO2022CNSimplifiedChinese = 50229,
        msoEncodingMacRoman = 10000,
        msoEncodingMacJapanese = 10001,
        msoEncodingMacTraditionalChineseBig5 = 10002,
        msoEncodingMacKorean = 10003,
        msoEncodingMacArabic = 10004,
        msoEncodingMacHebrew = 10005,
        msoEncodingMacGreek1 = 10006,
        msoEncodingMacCyrillic = 10007,
        msoEncodingMacSimplifiedChineseGB2312 = 10008,
        msoEncodingMacRomania = 10010,
        msoEncodingMacUkraine = 10017,
        msoEncodingMacLatin2 = 10029,
        msoEncodingMacIcelandic = 10079,
        msoEncodingMacTurkish = 10081,
        msoEncodingMacCroatia = 10082,
        msoEncodingEBCDICUSCanada = 37,
        msoEncodingEBCDICInternational = 500,
        msoEncodingEBCDICMultilingualROECELatin2 = 870,
        msoEncodingEBCDICGreekModern = 875,
        msoEncodingEBCDICTurkishLatin5 = 1026,
        msoEncodingEBCDICGermany = 20273,
        msoEncodingEBCDICDenmarkNorway = 20277,
        msoEncodingEBCDICFinlandSweden = 20278,
        msoEncodingEBCDICItaly = 20280,
        msoEncodingEBCDICLatinAmericaSpain = 20284,
        msoEncodingEBCDICUnitedKingdom = 20285,
        msoEncodingEBCDICJapaneseKatakanaExtended = 20290,
        msoEncodingEBCDICFrance = 20297,
        msoEncodingEBCDICArabic = 20420,
        msoEncodingEBCDICGreek = 20423,
        msoEncodingEBCDICHebrew = 20424,
        msoEncodingEBCDICKoreanExtended = 20833,
        msoEncodingEBCDICThai = 20838,
        msoEncodingEBCDICIcelandic = 20871,
        msoEncodingEBCDICTurkish = 20905,
        msoEncodingEBCDICRussian = 20880,
        msoEncodingEBCDICSerbianBulgarian = 21025,
        msoEncodingEBCDICJapaneseKatakanaExtendedAndJapanese = 50930,
        msoEncodingEBCDICUSCanadaAndJapanese = 50931,
        msoEncodingEBCDICKoreanExtendedAndKorean = 50933,
        msoEncodingEBCDICSimplifiedChineseExtendedAndSimplifiedChinese = 50935,
        msoEncodingEBCDICUSCanadaAndTraditionalChinese = 50937,
        msoEncodingEBCDICJapaneseLatinExtendedAndJapanese = 50939,
        msoEncodingOEMUnitedStates = 437,
        msoEncodingOEMGreek437G = 737,
        msoEncodingOEMBaltic = 775,
        msoEncodingOEMMultilingualLatinI = 850,
        msoEncodingOEMMultilingualLatinII = 852,
        msoEncodingOEMCyrillic = 855,
        msoEncodingOEMTurkish = 857,
        msoEncodingOEMPortuguese = 860,
        msoEncodingOEMIcelandic = 861,
        msoEncodingOEMHebrew = 862,
        msoEncodingOEMCanadianFrench = 863,
        msoEncodingOEMArabic = 864,
        msoEncodingOEMNordic = 865,
        msoEncodingOEMCyrillicII = 866,
        msoEncodingOEMModernGreek = 869,
        msoEncodingEUCJapanese = 51932,
        msoEncodingEUCChineseSimplifiedChinese = 51936,
        msoEncodingEUCKorean = 51949,
        msoEncodingEUCTaiwaneseTraditionalChinese = 51950,
        msoEncodingISCIIDevanagari = 57002,
        msoEncodingISCIIBengali = 57003,
        msoEncodingISCIITamil = 57004,
        msoEncodingISCIITelugu = 57005,
        msoEncodingISCIIAssamese = 57006,
        msoEncodingISCIIOriya = 57007,
        msoEncodingISCIIKannada = 57008,
        msoEncodingISCIIMalayalam = 57009,
        msoEncodingISCIIGujarati = 57010,
        msoEncodingISCIIPunjabi = 57011,
        msoEncodingArabicASMO = 708,
        msoEncodingArabicTransparentASMO = 720,
        msoEncodingKoreanJohab = 1361,
        msoEncodingTaiwanCNS = 20000,
        msoEncodingTaiwanTCA = 20001,
        msoEncodingTaiwanEten = 20002,
        msoEncodingTaiwanIBM5550 = 20003,
        msoEncodingTaiwanTeleText = 20004,
        msoEncodingTaiwanWang = 20005,
        msoEncodingIA5IRV = 20105,
        msoEncodingIA5German = 20106,
        msoEncodingIA5Swedish = 20107,
        msoEncodingIA5Norwegian = 20108,
        msoEncodingUSASCII = 20127,
        msoEncodingT61 = 20261,
        msoEncodingISO6937NonSpacingAccent = 20269,
        msoEncodingKOI8R = 20866,
        msoEncodingExtAlphaLowercase = 21027,
        msoEncodingKOI8U = 21866,
        msoEncodingEuropa3 = 29001,
        msoEncodingHZGBSimplifiedChinese = 52936,
        msoEncodingSimplifiedChineseGB18030 = 54936,
        msoEncodingUTF7 = 65000,
        msoEncodingUTF8 = 65001
    } MsoEncoding;

    [
      odl,
      uuid(000C0913-0000-0000-C000-000000000046),
      helpcontext(0x00036b00),
      dual,
      nonextensible,
      oleautomation
    ]
    interface WebPageFont : _IMsoDispObj {
        [id(0x0000000a), propget, helpcontext(0x00036b01)]
        HRESULT ProportionalFont([out, retval] BSTR* pstr);
        [id(0x0000000a), propput, helpcontext(0x00036b01)]
        HRESULT ProportionalFont([in] BSTR pstr);
        [id(0x0000000b), propget, helpcontext(0x00036b02)]
        HRESULT ProportionalFontSize([out, retval] long*  pf);
        [id(0x0000000b), propput, helpcontext(0x00036b02)]
        HRESULT ProportionalFontSize([in] long pf);
        [id(0x0000000c), propget, helpcontext(0x00036b03)]
        HRESULT FixedWidthFont([out, retval] BSTR* pstr);
        [id(0x0000000c), propput, helpcontext(0x00036b03)]
        HRESULT FixedWidthFont([in] BSTR pstr);
        [id(0x0000000d), propget, helpcontext(0x00036b04)]
        HRESULT FixedWidthFontSize([out, retval] long*  pf);
        [id(0x0000000d), propput, helpcontext(0x00036b04)]
        HRESULT FixedWidthFontSize([in] long pf);
    };

    [
      odl,
      uuid(000C0914-0000-0000-C000-000000000046),
      helpcontext(0x00036ee8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface WebPageFonts : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x00036ee9)]
        HRESULT Count([out, retval] int* Count);
        [id(00000000), propget, helpcontext(0x00036eea)]
        HRESULT Item(
                        [in] MsoCharacterSet Index, 
                        [out, retval] WebPageFont** Item);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
    };

    typedef enum {
        msoHTMLProjectOpenSourceView = 1,
        msoHTMLProjectOpenTextView = 2
    } MsoHTMLProjectOpen;

    typedef enum {
        msoHTMLProjectStateDocumentLocked = 1,
        msoHTMLProjectStateProjectLocked = 2,
        msoHTMLProjectStateDocumentProjectUnlocked = 3
    } MsoHTMLProjectState;

    [
      odl,
      uuid(000C0358-0000-0000-C000-000000000046),
      helpcontext(0x00035f48),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface HTMLProjectItem : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00035f49)]
        HRESULT Name([out, retval] BSTR* RetValue);
        [id(0x00000004), propget, helpcontext(0x00035f4a)]
        HRESULT IsOpen([out, retval] VARIANT_BOOL* RetValue);
        [id(0x00000005), helpcontext(0x00035f4b)]
        HRESULT LoadFromFile([in] BSTR FileName);
        [id(0x00000006), helpcontext(0x00035f4c)]
        HRESULT Open([in, optional, defaultvalue(0)] MsoHTMLProjectOpen OpenKind);
        [id(0x00000007), helpcontext(0x00035f4d)]
        HRESULT SaveCopyAs([in] BSTR FileName);
        [id(0x00000008), propget, helpcontext(0x00035f4e)]
        HRESULT Text([out, retval] BSTR* Text);
        [id(0x00000008), propput, helpcontext(0x00035f4e)]
        HRESULT Text([in] BSTR Text);
        [id(0x0000000a), propget, helpcontext(0x00035f50)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
    };

    [
      odl,
      uuid(000C0357-0000-0000-C000-000000000046),
      helpcontext(0x00036330),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface HTMLProjectItems : _IMsoDispObj {
        [id(00000000), helpcontext(0x00036331)]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] HTMLProjectItem** RetValue);
        [id(0x00000001), propget, helpcontext(0x00036332)]
        HRESULT Count([out, retval] long* RetValue);
        [id(0xfffffffc), propget, restricted, helpcontext(0x00036333)]
        HRESULT _NewEnum([out, retval] IUnknown** RetValue);
        [id(0x00000002), propget, helpcontext(0x00036334)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
    };

    [
      odl,
      uuid(000C0356-0000-0000-C000-000000000046),
      helpcontext(0x00036718),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface HTMLProject : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00036719)]
        HRESULT State([out, retval] MsoHTMLProjectState* State);
        [id(0x00000001), helpcontext(0x0003671a)]
        HRESULT RefreshProject([in, optional, defaultvalue(-1)] VARIANT_BOOL Refresh);
        [id(0x00000002), helpcontext(0x0003671b)]
        HRESULT RefreshDocument([in, optional, defaultvalue(-1)] VARIANT_BOOL Refresh);
        [id(0x00000003), propget, helpcontext(0x0003671c)]
        HRESULT HTMLProjectItems([out, retval] HTMLProjectItems** HTMLProjectItems);
        [id(0x00000004), propget, helpcontext(0x0003671d)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x00000005), helpcontext(0x0003671e)]
        HRESULT Open([in, optional, defaultvalue(0)] MsoHTMLProjectOpen OpenKind);
    };

    [
      odl,
      uuid(000C035A-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface MsoDebugOptions : _IMsoDispObj {
        [id(0x00000004), propget, hidden]
        HRESULT FeatureReports([out, retval] int* puintFeatureReports);
        [id(0x00000004), propput, hidden]
        HRESULT FeatureReports([in] int puintFeatureReports);
        [id(0x00000005), propget]
        HRESULT OutputToDebugger([out, retval] VARIANT_BOOL* pvarfOutputToDebugger);
        [id(0x00000005), propput]
        HRESULT OutputToDebugger([in] VARIANT_BOOL pvarfOutputToDebugger);
        [id(0x00000006), propget]
        HRESULT OutputToFile([out, retval] VARIANT_BOOL* pvarfOutputToFile);
        [id(0x00000006), propput]
        HRESULT OutputToFile([in] VARIANT_BOOL pvarfOutputToFile);
        [id(0x00000007), propget]
        HRESULT OutputToMessageBox([out, retval] VARIANT_BOOL* pvarfOutputToMessageBox);
        [id(0x00000007), propput]
        HRESULT OutputToMessageBox([in] VARIANT_BOOL pvarfOutputToMessageBox);
        [id(0x00000008), propget]
        HRESULT UnitTestManager([out, retval] IUnknown** ppMsoUnitTestManager);
        [id(0x00000009)]
        HRESULT AddIgnoredAssertTag([in] BSTR bstrTagToIgnore);
        [id(0x0000000a)]
        HRESULT RemoveIgnoredAssertTag([in] BSTR bstrTagToIgnore);
    };

    typedef enum {
        msoFileDialogOpen = 1,
        msoFileDialogSaveAs = 2,
        msoFileDialogFilePicker = 3,
        msoFileDialogFolderPicker = 4
    } MsoFileDialogType;

    typedef enum {
        msoFileDialogViewList = 1,
        msoFileDialogViewDetails = 2,
        msoFileDialogViewProperties = 3,
        msoFileDialogViewPreview = 4,
        msoFileDialogViewThumbnail = 5,
        msoFileDialogViewLargeIcons = 6,
        msoFileDialogViewSmallIcons = 7,
        msoFileDialogViewWebView = 8,
        msoFileDialogViewTiles = 9
    } MsoFileDialogView;

    [
      odl,
      uuid(000C0363-0000-0000-C000-000000000046),
      helpcontext(0x0003dc48),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FileDialogSelectedItems : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x0003dc49)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
        [id(0x60030002), propget, helpcontext(0x0003dc4a)]
        HRESULT Count([out, retval] long* pcFiles);
        [id(00000000), helpcontext(0x0003dc4b)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] BSTR* Item);
    };

    [
      odl,
      uuid(000C0364-0000-0000-C000-000000000046),
      helpcontext(0x0003e030),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FileDialogFilter : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x0003e031)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x60030001), propget, helpcontext(0x0003e032)]
        HRESULT Extensions([out, retval] BSTR* Extensions);
        [id(0x60030002), propget, helpcontext(0x0003e033)]
        HRESULT Description([out, retval] BSTR* Description);
    };

    [
      odl,
      uuid(000C0365-0000-0000-C000-000000000046),
      helpcontext(0x0003e418),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FileDialogFilters : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x0003e419)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
        [id(0x60030002), propget, helpcontext(0x0003e41a)]
        HRESULT Count([out, retval] long* pcFilters);
        [id(00000000), helpcontext(0x0003e41b)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] FileDialogFilter** Item);
        [id(0x60030004), helpcontext(0x0003e41c)]
        HRESULT Delete([in, optional] VARIANT filter);
        [id(0x60030005), helpcontext(0x0003e41d)]
        HRESULT Clear();
        [id(0x60030006), helpcontext(0x0003e41e)]
        HRESULT Add(
                        [in] BSTR Description, 
                        [in] BSTR Extensions, 
                        [in, optional] VARIANT Position, 
                        [out, retval] FileDialogFilter** Add);
    };

    [
      odl,
      uuid(000C0362-0000-0000-C000-000000000046),
      helpcontext(0x0003e800),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FileDialog : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x0003e801)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x60030001), propget, helpcontext(0x0003e802)]
        HRESULT Filters([out, retval] FileDialogFilters** Filters);
        [id(0x60030002), propget, helpcontext(0x0003e803)]
        HRESULT FilterIndex([out, retval] int* FilterIndex);
        [id(0x60030002), propput, helpcontext(0x0003e803)]
        HRESULT FilterIndex([in] int FilterIndex);
        [id(0x60030004), propget, helpcontext(0x0003e804)]
        HRESULT Title([out, retval] BSTR* Title);
        [id(0x60030004), propput, helpcontext(0x0003e804)]
        HRESULT Title([in] BSTR Title);
        [id(0x60030006), propget, helpcontext(0x0003e805)]
        HRESULT ButtonName([out, retval] BSTR* ButtonName);
        [id(0x60030006), propput, helpcontext(0x0003e805)]
        HRESULT ButtonName([in] BSTR ButtonName);
        [id(0x60030008), propget, helpcontext(0x0003e806)]
        HRESULT AllowMultiSelect([out, retval] VARIANT_BOOL* pvarfAllowMultiSelect);
        [id(0x60030008), propput, helpcontext(0x0003e806)]
        HRESULT AllowMultiSelect([in] VARIANT_BOOL pvarfAllowMultiSelect);
        [id(0x6003000a), propget, helpcontext(0x0003e807)]
        HRESULT InitialView([out, retval] MsoFileDialogView* pinitialview);
        [id(0x6003000a), propput, helpcontext(0x0003e807)]
        HRESULT InitialView([in] MsoFileDialogView pinitialview);
        [id(0x6003000c), propget, helpcontext(0x0003e808)]
        HRESULT InitialFileName([out, retval] BSTR* InitialFileName);
        [id(0x6003000c), propput, helpcontext(0x0003e808)]
        HRESULT InitialFileName([in] BSTR InitialFileName);
        [id(0x6003000e), propget, helpcontext(0x0003e809)]
        HRESULT SelectedItems([out, retval] FileDialogSelectedItems** Files);
        [id(0x6003000f), propget, helpcontext(0x0003e80a)]
        HRESULT DialogType([out, retval] MsoFileDialogType* pdialogtype);
        [id(00000000), propget, helpcontext(0x0003e80b)]
        HRESULT Item([out, retval] BSTR* Name);
        [id(0x60030011), helpcontext(0x0003e80c)]
        HRESULT Show([out, retval] int* rval);
        [id(0x60030012), helpcontext(0x0003e80d)]
        HRESULT Execute();
    };

    typedef enum {
        msoAutomationSecurityLow = 1,
        msoAutomationSecurityByUI = 2,
        msoAutomationSecurityForceDisable = 3
    } MsoAutomationSecurity;

    [
      odl,
      uuid(000C0410-0000-0000-C000-000000000046),
      helpcontext(0x0003c4d8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SignatureSet : _IMsoDispObj {
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
        [id(0x60030001), propget, helpcontext(0x0003c4d9)]
        HRESULT Count([out, retval] int* pcSig);
        [id(00000000), propget, helpcontext(0x0003c4da)]
        HRESULT Item(
                        [in] int iSig, 
                        [out, retval] Signature** ppidisp);
        [id(0x60030003), hidden, helpcontext(0x0003c4db)]
        HRESULT Add([out, retval] Signature** ppidisp);
        [id(0x60030004), hidden, helpcontext(0x0003c4dc)]
        HRESULT Commit();
        [id(0x60030005), propget, helpcontext(0x0003c4dd)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x60030006), helpcontext(0x0003c4de)]
        HRESULT AddNonVisibleSignature(
                        [in, optional] VARIANT varSigProv, 
                        [out, retval] Signature** ppidisp);
        [id(0x60030007), propget, helpcontext(0x0003c4df)]
        HRESULT CanAddSignatureLine([out, retval] VARIANT_BOOL* pvarfCanAddSigLine);
        [id(0x60030008), helpcontext(0x0003c4e0)]
        HRESULT AddSignatureLine(
                        [in, optional] VARIANT varSigProv, 
                        [out, retval] Signature** ppidisp);
        [id(0x60030009), propget, helpcontext(0x0003c4e1)]
        HRESULT Subset([out, retval] MsoSignatureSubset* psubset);
        [id(0x60030009), propput, helpcontext(0x0003c4e1)]
        HRESULT Subset([in] MsoSignatureSubset psubset);
        [id(0x6003000b), propput, helpcontext(0x0003c4e2)]
        HRESULT ShowSignaturesPane([in] VARIANT_BOOL rhs);
    };

    [
      odl,
      uuid(000C0411-0000-0000-C000-000000000046),
      helpcontext(0x0003c8c0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Signature : _IMsoDispObj {
        [id(0x60030000), propget, hidden, helpcontext(0x0003c8c1)]
        HRESULT Signer([out, retval] BSTR* pbstr);
        [id(0x60030001), propget, hidden, helpcontext(0x0003c8c2)]
        HRESULT Issuer([out, retval] BSTR* pbstr);
        [id(0x60030002), propget, hidden, helpcontext(0x0003c8c3)]
        HRESULT ExpireDate([out, retval] VARIANT* pvarDate);
        [id(0x60030003), propget, hidden, helpcontext(0x0003c8c4)]
        HRESULT IsValid([out, retval] VARIANT_BOOL* pvarfValid);
        [id(0x60030004), propget, hidden, helpcontext(0x0003c8c5)]
        HRESULT AttachCertificate([out, retval] VARIANT_BOOL* pvarfAttach);
        [id(0x60030004), propput, hidden, helpcontext(0x0003c8c5)]
        HRESULT AttachCertificate([in] VARIANT_BOOL pvarfAttach);
        [id(0x60030006), helpcontext(0x0003c8c6)]
        HRESULT Delete();
        [id(0x60030007), propget, helpcontext(0x0003c8c7)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x60030008), propget, hidden, helpcontext(0x0003c8c8)]
        HRESULT IsCertificateExpired([out, retval] VARIANT_BOOL* pvarfExpired);
        [id(0x60030009), propget, hidden, helpcontext(0x0003c8c9)]
        HRESULT IsCertificateRevoked([out, retval] VARIANT_BOOL* pvarfRevoked);
        [id(0x6003000a), propget, hidden, helpcontext(0x0003c8ca)]
        HRESULT SignDate([out, retval] VARIANT* pvarDate);
        [id(0x6003000b), propget, helpcontext(0x0003c8cb)]
        HRESULT IsSigned([out, retval] VARIANT_BOOL* pvarfSigned);
        [id(0x6003000c), helpcontext(0x0003c8cc)]
        HRESULT Sign(
                        [in, optional] VARIANT varSigImg, 
                        [in, optional] VARIANT varDelSuggSigner, 
                        [in, optional] VARIANT varDelSuggSignerLine2, 
                        [in, optional] VARIANT varDelSuggSignerEmail);
        [id(0x6003000d), propget, helpcontext(0x0003c8cd)]
        HRESULT Details([out, retval] SignatureInfo** ppsiginfo);
        [id(0x6003000e), helpcontext(0x0003c8ce)]
        HRESULT ShowDetails();
        [id(0x6003000f), propget, helpcontext(0x0003c8cf)]
        HRESULT CanSetup([out, retval] VARIANT_BOOL* pvarfCanSetup);
        [id(0x60030010), propget, helpcontext(0x0003c8d0)]
        HRESULT Setup([out, retval] SignatureSetup** ppsigsetup);
        [id(0x60030011), propget, helpcontext(0x0003c8d1)]
        HRESULT IsSignatureLine([out, retval] VARIANT_BOOL* pvarfSignatureLine);
        [id(0x60030012), propget, helpcontext(0x0003c8d2)]
        HRESULT SignatureLineShape([out, retval] IDispatch** ppidispShape);
        [id(0x60030013), propget, helpcontext(0x0003c8d3)]
        HRESULT SortHint([out, retval] long* plSortHint);
    };

    typedef enum {
        mfPlainText = 1,
        mfHTML = 2,
        mfRTF = 3
    } MailFormat;

    [
      odl,
      uuid(000672AC-0000-0000-C000-000000000046),
      helpcontext(0x00002af8),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoEnvelopeVB : IDispatch {
        [id(0x00000001), propget, helpcontext(0x00002af9)]
        HRESULT Introduction([out, retval] BSTR* pbstrIntro);
        [id(0x00000001), propput, helpcontext(0x00002af9)]
        HRESULT Introduction([in] BSTR pbstrIntro);
        [id(0x00000002), propget, helpcontext(0x00002afb)]
        HRESULT Item([out, retval] IDispatch** ppdisp);
        [id(0x00000003), propget, helpcontext(0x00002afc)]
        HRESULT Parent([out, retval] IDispatch** ppdisp);
        [id(0x00000004), propget, helpcontext(0x00002afd)]
        HRESULT CommandBars([out, retval] IDispatch** ppdisp);
    };

    [
      uuid(000672AD-0000-0000-C000-000000000046),
      helpcontext(0x0003c0f0)
    ]
    dispinterface IMsoEnvelopeVBEvents {
        properties:
        methods:
            [id(0x00000001), helpcontext(0x0003c0f1)]
            void EnvelopeShow();
            [id(0x00000002), helpcontext(0x0003c0f2)]
            void EnvelopeHide();
    };

    [
      uuid(0006F01A-0000-0000-C000-000000000046),
      helpcontext(0x0003bd08),
      noncreatable
    ]
    coclass MsoEnvelope {
        [default] interface IMsoEnvelopeVB;
        [default, source] dispinterface IMsoEnvelopeVBEvents;
    };

    

    [
      odl,
      uuid(000C036C-0000-0000-C000-000000000046),
      helpcontext(0x0003ebe8),
      dual,
      oleautomation
    ]
    interface FileTypes : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x0003ebe9)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] MsoFileType* MsoFileTypeRet);
        [id(0x00000002), propget, helpcontext(0x0003ebea)]
        HRESULT Count([out, retval] int* iCountRetVal);
        [id(0x00000003), helpcontext(0x0003ebeb)]
        HRESULT Add([in] MsoFileType FileType);
        [id(0x00000004), helpcontext(0x0003ebec)]
        HRESULT Remove([in] int Index);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
    };

    [
      odl,
      uuid(000C036A-0000-0000-C000-000000000046),
      helpcontext(0x0003efd0),
      dual,
      oleautomation
    ]
    interface SearchFolders : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x0003efd1)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] ScopeFolder** ScopeFolderRet);
        [id(0x00000002), propget, helpcontext(0x0003efd2)]
        HRESULT Count([out, retval] int* iCountRetVal);
        [id(0x00000003), helpcontext(0x0003efd3)]
        HRESULT Add([in] ScopeFolder* ScopeFolder);
        [id(0x00000004), helpcontext(0x0003efd4)]
        HRESULT Remove([in] int Index);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
    };

    [
      odl,
      uuid(000C0369-0000-0000-C000-000000000046),
      helpcontext(0x0003cca8),
      dual,
      oleautomation
    ]
    interface ScopeFolders : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x0003cca9)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] ScopeFolder** ScopeFolderRet);
        [id(0x00000004), propget, helpcontext(0x0003ccaa)]
        HRESULT Count([out, retval] int* iCountRetVal);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
    };

    [
      odl,
      uuid(000C0368-0000-0000-C000-000000000046),
      helpcontext(0x0003f3b8),
      dual,
      oleautomation
    ]
    interface ScopeFolder : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x0003f3b9)]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x00000002), propget, helpcontext(0x0003f3ba)]
        HRESULT Path([out, retval] BSTR* pbstrPath);
        [id(0x00000003), propget, helpcontext(0x0003f3bb)]
        HRESULT ScopeFolders([out, retval] ScopeFolders** ScopeFoldersRet);
        [id(0x00000004), helpcontext(0x0003f3bc)]
        HRESULT AddToSearchFolders();
    };

    [
      odl,
      uuid(000C0367-0000-0000-C000-000000000046),
      helpcontext(0x0003d478),
      dual,
      oleautomation
    ]
    interface SearchScope : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x0003d479)]
        HRESULT Type([out, retval] MsoSearchIn* MsoSearchInRetVal);
        [id(0x00000001), propget, helpcontext(0x0003d47a)]
        HRESULT ScopeFolder([out, retval] ScopeFolder** ScopeFolderRet);
    };

    [
      odl,
      uuid(000C0366-0000-0000-C000-000000000046),
      helpcontext(0x0003d860),
      dual,
      oleautomation
    ]
    interface SearchScopes : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x0003d861)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] SearchScope** SearchScopeRet);
        [id(0x00000004), propget, helpcontext(0x0003d862)]
        HRESULT Count([out, retval] int* iCountRetVal);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
    };

    

    [
      odl,
      uuid(000C036D-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoDiagram : _IMsoDispObj {
        [id(0x00000064), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000065), propget]
        HRESULT Nodes([out, retval] DiagramNodes** Nodes);
        [id(0x00000066), propget]
        HRESULT Type([out, retval] MsoDiagramType* Type);
        [id(0x00000067), propget]
        HRESULT AutoLayout([out, retval] MsoTriState* AutoLayout);
        [id(0x00000067), propput]
        HRESULT AutoLayout([in] MsoTriState AutoLayout);
        [id(0x00000068), propget]
        HRESULT Reverse([out, retval] MsoTriState* Reverse);
        [id(0x00000068), propput]
        HRESULT Reverse([in] MsoTriState Reverse);
        [id(0x00000069), propget]
        HRESULT AutoFormat([out, retval] MsoTriState* AutoFormat);
        [id(0x00000069), propput]
        HRESULT AutoFormat([in] MsoTriState AutoFormat);
        [id(0x0000000a)]
        HRESULT Convert([in] MsoDiagramType Type);
        [id(0x0000000b)]
        HRESULT FitText();
    };

    [
      odl,
      uuid(000C036E-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface DiagramNodes : _IMsoDispObj {
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
        [id(00000000)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] DiagramNode** ppdn);
        [id(0x0000000a)]
        HRESULT SelectAll();
        [id(0x00000064), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000065), propget]
        HRESULT Count([out, retval] int* iDiagramNodes);
    };

    [
      odl,
      uuid(000C036F-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface DiagramNodeChildren : _IMsoDispObj {
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
        [id(00000000)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] DiagramNode** Node);
        [id(0x0000000a)]
        HRESULT AddNode(
                        [in, optional, defaultvalue(-1)] VARIANT Index, 
                        [in, optional, defaultvalue(1)] MsoDiagramNodeType NodeType, 
                        [out, retval] DiagramNode** NewNode);
        [id(0x0000000b)]
        HRESULT SelectAll();
        [id(0x00000064), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000065), propget]
        HRESULT Count([out, retval] int* iDiagramNodes);
        [id(0x00000067), propget]
        HRESULT FirstChild([out, retval] DiagramNode** First);
        [id(0x00000068), propget]
        HRESULT LastChild([out, retval] DiagramNode** Last);
    };

    [
      odl,
      uuid(000C0370-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface DiagramNode : _IMsoDispObj {
        [id(0x0000000a)]
        HRESULT AddNode(
                        [in, optional, defaultvalue(2)] MsoRelativeNodePosition Pos, 
                        [in, optional, defaultvalue(1)] MsoDiagramNodeType NodeType, 
                        [out, retval] DiagramNode** NewNode);
        [id(0x0000000b)]
        HRESULT Delete();
        [id(0x0000000c)]
        HRESULT MoveNode(
                        [in] DiagramNode* TargetNode, 
                        [in] MsoRelativeNodePosition Pos);
        [id(0x0000000d)]
        HRESULT ReplaceNode([in] DiagramNode* TargetNode);
        [id(0x0000000e)]
        HRESULT SwapNode(
                        [in] DiagramNode* TargetNode, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL SwapChildren);
        [id(0x0000000f)]
        HRESULT CloneNode(
                        [in] VARIANT_BOOL CopyChildren, 
                        [in] DiagramNode* TargetNode, 
                        [in, optional, defaultvalue(2)] MsoRelativeNodePosition Pos, 
                        [out, retval] DiagramNode** Node);
        [id(0x00000010)]
        HRESULT TransferChildren([in] DiagramNode* ReceivingNode);
        [id(0x00000011)]
        HRESULT NextNode([out, retval] DiagramNode** NextNode);
        [id(0x00000012)]
        HRESULT PrevNode([out, retval] DiagramNode** PrevNode);
        [id(0x00000064), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000065), propget]
        HRESULT Children([out, retval] DiagramNodeChildren** Children);
        [id(0x00000066), propget]
        HRESULT Shape([out, retval] Shape** Shape);
        [id(0x00000067), propget]
        HRESULT Root([out, retval] DiagramNode** Root);
        [id(0x00000068), propget]
        HRESULT Diagram([out, retval] IMsoDiagram** Diagram);
        [id(0x00000069), propget]
        HRESULT Layout([out, retval] MsoOrgChartLayoutType* Type);
        [id(0x00000069), propput]
        HRESULT Layout([in] MsoOrgChartLayoutType Type);
        [id(0x0000006a), propget]
        HRESULT TextShape([out, retval] Shape** Shape);
    };

    [
      odl,
      uuid(000C0371-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface CanvasShapes : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Count([out, retval] int* Count);
        [id(00000000)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] Shape** Item);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(0x0000000a)]
        HRESULT AddCallout(
                        [in] MsoCalloutType Type, 
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Width, 
                        [in] long Height, 
                        [out, retval] Shape** Callout);
        [id(0x0000000b)]
        HRESULT AddConnector(
                        [in] MsoConnectorType Type, 
                        [in] long BeginX, 
                        [in] long BeginY, 
                        [in] long EndX, 
                        [in] long EndY, 
                        [out, retval] Shape** Connector);
        [id(0x0000000c)]
        HRESULT AddCurve(
                        [in] VARIANT SafeArrayOfPoints, 
                        [out, retval] Shape** Curve);
        [id(0x0000000d)]
        HRESULT AddLabel(
                        [in] MsoTextOrientation Orientation, 
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Width, 
                        [in] long Height, 
                        [out, retval] Shape** Label);
        [id(0x0000000e)]
        HRESULT AddLine(
                        [in] long BeginX, 
                        [in] long BeginY, 
                        [in] long EndX, 
                        [in] long EndY, 
                        [out, retval] Shape** Line);
        [id(0x0000000f)]
        HRESULT AddPicture(
                        [in] BSTR FileName, 
                        [in] MsoTriState LinkToFile, 
                        [in] MsoTriState SaveWithDocument, 
                        [in] long Left, 
                        [in] long Top, 
                        [in, optional, defaultvalue(-1)] long Width, 
                        [in, optional, defaultvalue(-1)] long Height, 
                        [out, retval] Shape** Picture);
        [id(0x00000010)]
        HRESULT AddPolyline(
                        [in] VARIANT SafeArrayOfPoints, 
                        [out, retval] Shape** Polyline);
        [id(0x00000011)]
        HRESULT AddShape(
                        [in] MsoAutoShapeType Type, 
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Width, 
                        [in] long Height, 
                        [out, retval] Shape** Shape);
        [id(0x00000012)]
        HRESULT AddTextEffect(
                        [in] MsoPresetTextEffect PresetTextEffect, 
                        [in] BSTR Text, 
                        [in] BSTR FontName, 
                        [in] long FontSize, 
                        [in] MsoTriState FontBold, 
                        [in] MsoTriState FontItalic, 
                        [in] long Left, 
                        [in] long Top, 
                        [out, retval] Shape** TextEffect);
        [id(0x00000013)]
        HRESULT AddTextbox(
                        [in] MsoTextOrientation Orientation, 
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Width, 
                        [in] long Height, 
                        [out, retval] Shape** Textbox);
        [id(0x00000014)]
        HRESULT BuildFreeform(
                        [in] MsoEditingType EditingType, 
                        [in] long X1, 
                        [in] long Y1, 
                        [out, retval] FreeformBuilder** FreeformBuilder);
        [id(0x00000015)]
        HRESULT Range(
                        [in] VARIANT Index, 
                        [out, retval] ShapeRange** Range);
        [id(0x00000016)]
        HRESULT SelectAll();
        [id(0x00000064), propget]
        HRESULT Background([out, retval] Shape** Background);
    };

    

    [
      odl,
      uuid(000C1530-0000-0000-C000-000000000046),
      helpcontext(0x00038a40),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OfficeDataSourceObject : IDispatch {
        [id(0x00000001), propget, helpcontext(0x00038a41)]
        HRESULT ConnectString([out, retval] BSTR* pbstrConnect);
        [id(0x00000001), propput, helpcontext(0x00038a41)]
        HRESULT ConnectString([in] BSTR pbstrConnect);
        [id(0x00000002), propget, helpcontext(0x00038a42)]
        HRESULT Table([out, retval] BSTR* pbstrTable);
        [id(0x00000002), propput, helpcontext(0x00038a42)]
        HRESULT Table([in] BSTR pbstrTable);
        [id(0x00000003), propget, helpcontext(0x00038a43)]
        HRESULT DataSource([out, retval] BSTR* pbstrSrc);
        [id(0x00000003), propput, helpcontext(0x00038a43)]
        HRESULT DataSource([in] BSTR pbstrSrc);
        [id(0x00000004), propget, helpcontext(0x00038a44)]
        HRESULT Columns([out, retval] IDispatch** ppColumns);
        [id(0x00000005), propget, helpcontext(0x00038a45)]
        HRESULT RowCount([out, retval] long* pcRows);
        [id(0x00000006), propget, helpcontext(0x00038a4a)]
        HRESULT Filters([out, retval] IDispatch** ppFilters);
        [id(0x60020009), helpcontext(0x00038a46)]
        HRESULT Move(
                        [in] MsoMoveRow MsoMoveRow, 
                        [in, optional, defaultvalue(1)] int RowNbr, 
                        [out, retval] int* rval);
        [id(0x6002000a), helpcontext(0x00038a47)]
        HRESULT Open(
                        [in, optional, defaultvalue("")] BSTR bstrSrc, 
                        [in, optional, defaultvalue("")] BSTR bstrConnect, 
                        [in, optional, defaultvalue("")] BSTR bstrTable, 
                        [in, optional, defaultvalue(0)] long fOpenExclusive, 
                        [in, optional, defaultvalue(1)] long fNeverPrompt);
        [id(0x6002000b), helpcontext(0x00038a48)]
        HRESULT SetSortOrder(
                        [in] BSTR SortField1, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL SortAscending1, 
                        [in, optional, defaultvalue("")] BSTR SortField2, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL SortAscending2, 
                        [in, optional, defaultvalue("")] BSTR SortField3, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL SortAscending3);
        [id(0x6002000c), helpcontext(0x00038a49)]
        HRESULT ApplyFilter();
    };

    [
      odl,
      uuid(000C1531-0000-0000-C000-000000000046),
      helpcontext(0x00038e28),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ODSOColumn : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x00038e29)]
        HRESULT Index([out, retval] long* plIndex);
        [id(0x00000002), propget, helpcontext(0x00038e2a)]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x00000003), propget, helpcontext(0x00038e2b)]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0x00000004), propget, helpcontext(0x00038e2c)]
        HRESULT Value([out, retval] BSTR* pbstrValue);
    };

    [
      odl,
      uuid(000C1532-0000-0000-C000-000000000046),
      helpcontext(0x00039210),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ODSOColumns : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x00039211)]
        HRESULT Count([out, retval] long* plCount);
        [id(0x00000002), propget, helpcontext(0x00039212)]
        HRESULT Parent([out, retval] IDispatch** ppParentOdso);
        [id(0x60030002), helpcontext(0x00039213)]
        HRESULT Item(
                        [in] VARIANT varIndex, 
                        [out, retval] IDispatch** ppColumn);
    };

    

    [
      odl,
      uuid(000C1533-0000-0000-C000-000000000046),
      helpcontext(0x0003a980),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ODSOFilter : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x0003a981)]
        HRESULT Index([out, retval] long* plIndex);
        [id(0x00000002), propget, helpcontext(0x0003a982)]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0x00000003), propget, helpcontext(0x0003a983)]
        HRESULT Column([out, retval] BSTR* pbstrCol);
        [id(0x00000003), propput, helpcontext(0x0003a983)]
        HRESULT Column([in] BSTR pbstrCol);
        [id(0x00000004), propget, helpcontext(0x0003a984)]
        HRESULT Comparison([out, retval] MsoFilterComparison* pComparison);
        [id(0x00000004), propput, helpcontext(0x0003a984)]
        HRESULT Comparison([in] MsoFilterComparison pComparison);
        [id(0x00000005), propget, helpcontext(0x0003a985)]
        HRESULT CompareTo([out, retval] BSTR* pbstrCompareTo);
        [id(0x00000005), propput, helpcontext(0x0003a985)]
        HRESULT CompareTo([in] BSTR pbstrCompareTo);
        [id(0x00000006), propget, helpcontext(0x0003a986)]
        HRESULT Conjunction([out, retval] MsoFilterConjunction* pConjunction);
        [id(0x00000006), propput, helpcontext(0x0003a986)]
        HRESULT Conjunction([in] MsoFilterConjunction pConjunction);
    };

    [
      odl,
      uuid(000C1534-0000-0000-C000-000000000046),
      helpcontext(0x0003ad68),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ODSOFilters : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x0003ad69)]
        HRESULT Count([out, retval] long* plCount);
        [id(0x00000002), propget, helpcontext(0x0003ad6a)]
        HRESULT Parent([out, retval] IDispatch** ppParentOdso);
        [id(0x60030002), helpcontext(0x0003ad6b)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] IDispatch** ppColumn);
        [id(0x60030003), helpcontext(0x0003ad6c)]
        HRESULT Add(
                        [in] BSTR Column, 
                        [in] MsoFilterComparison Comparison, 
                        [in] MsoFilterConjunction Conjunction, 
                        [in, optional, defaultvalue("")] BSTR bstrCompareTo, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL DeferUpdate);
        [id(0x60030004), helpcontext(0x0003ad6d)]
        HRESULT Delete(
                        [in] long Index, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL DeferUpdate);
    };

    

    [
      odl,
      uuid(000C0936-0000-0000-C000-000000000046),
      helpcontext(0x000395f8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface NewFile : _IMsoDispObj {
        [id(0x00000001), helpcontext(0x000395f9)]
        HRESULT Add(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT Section, 
                        [in, optional] VARIANT DisplayName, 
                        [in, optional] VARIANT Action, 
                        [out, retval] VARIANT_BOOL* pvarf);
        [id(0x00000002), helpcontext(0x000395fa)]
        HRESULT Remove(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT Section, 
                        [in, optional] VARIANT DisplayName, 
                        [in, optional] VARIANT Action, 
                        [out, retval] VARIANT_BOOL* pvarf);
    };

    [
      odl,
      uuid(000CD100-0000-0000-C000-000000000046),
      helpcontext(0x000399e0),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface WebComponent : IDispatch {
        [id(0x00000001), propget, helpcontext(0x000399e1)]
        HRESULT Shape([out, retval] IDispatch** RetValue);
        [id(0x00000002), propget, helpcontext(0x000399e2)]
        HRESULT URL([out, retval] BSTR* RetValue);
        [id(0x00000002), propput, helpcontext(0x000399e2)]
        HRESULT URL([in] BSTR RetValue);
        [id(0x00000003), propget, helpcontext(0x000399e4)]
        HRESULT HTML([out, retval] BSTR* RetValue);
        [id(0x00000003), propput, helpcontext(0x000399e4)]
        HRESULT HTML([in] BSTR RetValue);
        [id(0x00000004), propget, helpcontext(0x000399e6)]
        HRESULT Name([out, retval] BSTR* RetValue);
        [id(0x00000004), propput, helpcontext(0x000399e6)]
        HRESULT Name([in] BSTR RetValue);
        [id(0x00000005), propget, helpcontext(0x000399e8)]
        HRESULT Width([out, retval] long* RetValue);
        [id(0x00000005), propput, helpcontext(0x000399e8)]
        HRESULT Width([in] long RetValue);
        [id(0x00000006), propget, helpcontext(0x000399ea)]
        HRESULT Height([out, retval] long* RetValue);
        [id(0x00000006), propput, helpcontext(0x000399ea)]
        HRESULT Height([in] long RetValue);
        [id(0x00000007), helpcontext(0x000399ec)]
        HRESULT SetPlaceHolderGraphic([in] BSTR PlaceHolderGraphic);
        [id(0x00000008), helpcontext(0x000399ee)]
        HRESULT Commit();
        [id(0x00000009), helpcontext(0x000399ef)]
        HRESULT Revert();
    };

    [
      odl,
      uuid(000CD101-0000-0000-C000-000000000046),
      helpcontext(0x00039dc8),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface WebComponentWindowExternal : IDispatch {
        [id(0x00000001), propget, helpcontext(0x00039dc9)]
        HRESULT InterfaceVersion([out, retval] long* RetValue);
        [id(0x00000002), propget, helpcontext(0x00039dca)]
        HRESULT ApplicationName([out, retval] BSTR* RetValue);
        [id(0x00000003), propget, helpcontext(0x00039dcb)]
        HRESULT ApplicationVersion([out, retval] long* RetValue);
        [id(0x00000004), propget, helpcontext(0x00039dcc)]
        HRESULT Application([out, retval] IDispatch** RetValue);
        [id(0x00000005), helpcontext(0x00039dcd)]
        HRESULT CloseWindow();
        [id(0x00000006), propget, helpcontext(0x00039dce)]
        HRESULT WebComponent([out, retval] WebComponent** RetValue);
    };

    [
      odl,
      uuid(000CD102-0000-0000-C000-000000000046),
      helpcontext(0x00039dc8),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface WebComponentFormat : IDispatch {
        [id(0x00000001), propget, helpcontext(0x00039dc9)]
        HRESULT Application([out, retval] IDispatch** RetValue);
        [id(0x00000002), propget, helpcontext(0x00039dca)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000003), propget, helpcontext(0x00039dcb)]
        HRESULT URL([out, retval] BSTR* RetValue);
        [id(0x00000003), propput, helpcontext(0x00039dcb)]
        HRESULT URL([in] BSTR RetValue);
        [id(0x00000004), propget, helpcontext(0x00039dcd)]
        HRESULT HTML([out, retval] BSTR* RetValue);
        [id(0x00000004), propput, helpcontext(0x00039dcd)]
        HRESULT HTML([in] BSTR RetValue);
        [id(0x00000005), propget, helpcontext(0x00039dcf)]
        HRESULT Name([out, retval] BSTR* RetValue);
        [id(0x00000005), propput, helpcontext(0x00039dcf)]
        HRESULT Name([in] BSTR RetValue);
        [id(0x00000006), propget, helpcontext(0x00039dd1)]
        HRESULT Width([out, retval] long* RetValue);
        [id(0x00000006), propput, helpcontext(0x00039dd1)]
        HRESULT Width([in] long RetValue);
        [id(0x00000007), propget, helpcontext(0x00039dd3)]
        HRESULT Height([out, retval] long* RetValue);
        [id(0x00000007), propput, helpcontext(0x00039dd3)]
        HRESULT Height([in] long RetValue);
        [id(0x00000008), propget, helpcontext(0x00039dd5)]
        HRESULT PreviewGraphic([out, retval] BSTR* retval);
        [id(0x00000008), propput, helpcontext(0x00039dd5)]
        HRESULT PreviewGraphic([in] BSTR retval);
        [id(0x00000009), helpcontext(0x00039dd7)]
        HRESULT LaunchPropertiesWindow();
    };

    

    [
      odl,
      uuid(4CAC6328-B9B0-11D3-8D59-0050048384E3),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ILicWizExternal : IDispatch {
        [id(0x00000001)]
        HRESULT PrintHtmlDocument([in] IUnknown* punkHtmlDoc);
        [id(0x00000002)]
        HRESULT InvokeDateTimeApplet();
        [id(0x00000003)]
        HRESULT FormatDate(
                        [in] DATE date, 
                        [in, optional, defaultvalue("")] BSTR pFormat, 
                        [out, retval] BSTR* pDateString);
        [id(0x00000004)]
        HRESULT ShowHelp([in, optional] VARIANT* pvarId);
        [id(0x00000005)]
        HRESULT Terminate();
        [id(0x00000006)]
        HRESULT DisableVORWReminder([in] long BPC);
        [id(0x00000007)]
        HRESULT SaveReceipt(
                        [in] BSTR bstrReceipt, 
                        [out, retval] BSTR* pbstrPath);
        [id(0x00000008)]
        HRESULT OpenInDefaultBrowser([in] BSTR bstrUrl);
        [id(0x00000009)]
        HRESULT MsoAlert(
                        [in] BSTR bstrText, 
                        [in] BSTR bstrButtons, 
                        [in] BSTR bstrIcon, 
                        [out, retval] long* plRet);
        [id(0x0000000a)]
        HRESULT DepositPidKey(
                        [in] BSTR bstrKey, 
                        [in] int fMORW, 
                        [out, retval] long* plRet);
        [id(0x0000000b)]
        HRESULT WriteLog([in] BSTR bstrMessage);
        [id(0x0000000c)]
        HRESULT ResignDpc([in] BSTR bstrProductCode);
        [id(0x0000000d)]
        HRESULT ResetPID();
        [id(0x0000000e)]
        HRESULT SetDialogSize(
                        [in] long dx, 
                        [in] long dy);
        [id(0x0000000f)]
        HRESULT VerifyClock(
                        [in] long lMode, 
                        [out, retval] long* plRet);
        [id(0x00000010)]
        HRESULT SortSelectOptions([in] IDispatch* pdispSelect);
        [id(0x00000011)]
        HRESULT InternetDisconnect();
        [id(0x00000012)]
        HRESULT GetConnectedState([out, retval] int* pfConnected);
        [id(0x00000014), propget]
        HRESULT Context([out, retval] long* plwctx);
        [id(0x00000015), propget]
        HRESULT Validator([out, retval] IDispatch** ppdispValidator);
        [id(0x00000016), propget]
        HRESULT LicAgent([out, retval] IDispatch** ppdispLicAgent);
        [id(0x00000017), propget]
        HRESULT CountryInfo([out, retval] BSTR* pbstrUrl);
        [id(0x00000018), propput]
        HRESULT WizardVisible([in] int rhs);
        [id(0x00000019), propput]
        HRESULT WizardTitle([in] BSTR rhs);
        [id(0x0000001a), propget]
        HRESULT AnimationEnabled([out, retval] int* fEnabled);
        [id(0x0000001b), propput]
        HRESULT CurrentHelpId([in] long rhs);
        [id(0x0000001c), propget]
        HRESULT OfficeOnTheWebUrl([out, retval] BSTR* bstrUrl);
    };

    [
      odl,
      uuid(919AA22C-B9AD-11D3-8D59-0050048384E3),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ILicValidator : IDispatch {
        [id(0x00000001), propget]
        HRESULT Products([out, retval] VARIANT* pVariant);
        [id(0x00000002), propget]
        HRESULT Selection([out, retval] int* piSel);
        [id(0x00000002), propput]
        HRESULT Selection([in] int piSel);
    };

    [
      odl,
      uuid(00194002-D9C3-11D3-8D59-0050048384E3),
      helpstring("ILicAgent Interface"),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ILicAgent : IDispatch {
        [id(0x00000001), helpstring("method Initialize")]
        HRESULT Initialize(
                        [in] unsigned long dwBPC, 
                        [in] unsigned long dwMode, 
                        [in] BSTR bstrLicSource, 
                        [out, retval] unsigned long* pdwRetCode);
        [id(0x00000003), helpstring("method GetFirstName")]
        HRESULT GetFirstName([out, retval] BSTR* pbstrVal);
        [id(0x00000004), helpstring("method SetFirstName")]
        HRESULT SetFirstName([in] BSTR bstrNewVal);
        [id(0x00000005), helpstring("method GetLastName")]
        HRESULT GetLastName([out, retval] BSTR* pbstrVal);
        [id(0x00000006), helpstring("method SetLastName")]
        HRESULT SetLastName([in] BSTR bstrNewVal);
        [id(0x00000007), helpstring("method GetOrgName")]
        HRESULT GetOrgName([out, retval] BSTR* pbstrVal);
        [id(0x00000008), helpstring("method SetOrgName")]
        HRESULT SetOrgName([in] BSTR bstrNewVal);
        [id(0x00000009), helpstring("method GetEmail")]
        HRESULT GetEmail([out, retval] BSTR* pbstrVal);
        [id(0x0000000a), helpstring("method SetEmail")]
        HRESULT SetEmail([in] BSTR bstrNewVal);
        [id(0x0000000b), helpstring("method GetPhone")]
        HRESULT GetPhone([out, retval] BSTR* pbstrVal);
        [id(0x0000000c), helpstring("method SetPhone")]
        HRESULT SetPhone([in] BSTR bstrNewVal);
        [id(0x0000000d), helpstring("method GetAddress1")]
        HRESULT GetAddress1([out, retval] BSTR* pbstrVal);
        [id(0x0000000e), helpstring("method SetAddress1")]
        HRESULT SetAddress1([in] BSTR bstrNewVal);
        [id(0x0000000f), helpstring("method GetCity")]
        HRESULT GetCity([out, retval] BSTR* pbstrVal);
        [id(0x00000010), helpstring("method SetCity")]
        HRESULT SetCity([in] BSTR bstrNewVal);
        [id(0x00000011), helpstring("method GetState")]
        HRESULT GetState([out, retval] BSTR* pbstrVal);
        [id(0x00000012), helpstring("method SetState")]
        HRESULT SetState([in] BSTR bstrNewVal);
        [id(0x00000013), helpstring("method GetCountryCode")]
        HRESULT GetCountryCode([out, retval] BSTR* pbstrVal);
        [id(0x00000014), helpstring("method SetCountryCode")]
        HRESULT SetCountryCode([in] BSTR bstrNewVal);
        [id(0x00000015), helpstring("method GetCountryDesc")]
        HRESULT GetCountryDesc([out, retval] BSTR* pbstrVal);
        [id(0x00000016), helpstring("method SetCountryDesc")]
        HRESULT SetCountryDesc([in] BSTR bstrNewVal);
        [id(0x00000017), helpstring("method GetZip")]
        HRESULT GetZip([out, retval] BSTR* pbstrVal);
        [id(0x00000018), helpstring("method SetZip")]
        HRESULT SetZip([in] BSTR bstrNewVal);
        [id(0x00000019), helpstring("method GetIsoLanguage")]
        HRESULT GetIsoLanguage([out, retval] unsigned long* pdwVal);
        [id(0x0000001a), helpstring("method SetIsoLanguage")]
        HRESULT SetIsoLanguage([in] unsigned long dwNewVal);
        [id(0x00000020), helpstring("method GetMSUpdate")]
        HRESULT GetMSUpdate([out, retval] BSTR* pbstrVal);
        [id(0x00000021), helpstring("method SetMSUpdate")]
        HRESULT SetMSUpdate([in] BSTR bstrNewVal);
        [id(0x00000022), helpstring("method GetMSOffer")]
        HRESULT GetMSOffer([out, retval] BSTR* pbstrVal);
        [id(0x00000023), helpstring("method SetMSOffer")]
        HRESULT SetMSOffer([in] BSTR bstrNewVal);
        [id(0x00000024), helpstring("method GetOtherOffer")]
        HRESULT GetOtherOffer([out, retval] BSTR* pbstrVal);
        [id(0x00000025), helpstring("method SetOtherOffer")]
        HRESULT SetOtherOffer([in] BSTR bstrNewVal);
        [id(0x00000026), helpstring("method GetAddress2")]
        HRESULT GetAddress2([out, retval] BSTR* pbstrVal);
        [id(0x00000027), helpstring("method SetAddress2")]
        HRESULT SetAddress2([in] BSTR bstrNewVal);
        [id(0x00000028), helpstring("method CheckSystemClock")]
        HRESULT CheckSystemClock([out, retval] unsigned long* pdwRetCode);
        [id(0x00000029), helpstring("method GetExistingExpiryDate")]
        HRESULT GetExistingExpiryDate([out, retval] DATE* pDateVal);
        [id(0x0000002a), helpstring("method GetNewExpiryDate")]
        HRESULT GetNewExpiryDate([out, retval] DATE* pDateVal);
        [id(0x0000002b), helpstring("method GetBillingFirstName")]
        HRESULT GetBillingFirstName([out, retval] BSTR* pbstrVal);
        [id(0x0000002c), helpstring("method SetBillingFirstName")]
        HRESULT SetBillingFirstName([in] BSTR bstrNewVal);
        [id(0x0000002d), helpstring("method GetBillingLastName")]
        HRESULT GetBillingLastName([out, retval] BSTR* pbstrVal);
        [id(0x0000002e), helpstring("method SetBillingLastName")]
        HRESULT SetBillingLastName([in] BSTR bstrNewVal);
        [id(0x0000002f), helpstring("method GetBillingPhone")]
        HRESULT GetBillingPhone([out, retval] BSTR* pbstrVal);
        [id(0x00000030), helpstring("method SetBillingPhone")]
        HRESULT SetBillingPhone([in] BSTR bstrNewVal);
        [id(0x00000031), helpstring("method GetBillingAddress1")]
        HRESULT GetBillingAddress1([out, retval] BSTR* pbstrVal);
        [id(0x00000032), helpstring("method SetBillingAddress1")]
        HRESULT SetBillingAddress1([in] BSTR bstrNewVal);
        [id(0x00000033), helpstring("method GetBillingAddress2")]
        HRESULT GetBillingAddress2([out, retval] BSTR* pbstrVal);
        [id(0x00000034), helpstring("method SetBillingAddress2")]
        HRESULT SetBillingAddress2([in] BSTR bstrNewVal);
        [id(0x00000035), helpstring("method GetBillingCity")]
        HRESULT GetBillingCity([out, retval] BSTR* pbstrVal);
        [id(0x00000036), helpstring("method SetBillingCity")]
        HRESULT SetBillingCity([in] BSTR bstrNewVal);
        [id(0x00000037), helpstring("method GetBillingState")]
        HRESULT GetBillingState([out, retval] BSTR* pbstrVal);
        [id(0x00000038), helpstring("method SetBillingState")]
        HRESULT SetBillingState([in] BSTR bstrNewVal);
        [id(0x00000039), helpstring("method GetBillingCountryCode")]
        HRESULT GetBillingCountryCode([out, retval] BSTR* pbstrVal);
        [id(0x0000003a), helpstring("method SetBillingCountryCode")]
        HRESULT SetBillingCountryCode([in] BSTR bstrNewVal);
        [id(0x0000003b), helpstring("method GetBillingZip")]
        HRESULT GetBillingZip([out, retval] BSTR* pbstrVal);
        [id(0x0000003c), helpstring("method SetBillingZip")]
        HRESULT SetBillingZip([in] BSTR bstrNewVal);
        [id(0x0000003d), helpstring("method SaveBillingInfo")]
        HRESULT SaveBillingInfo(
                        [in] int bSave, 
                        [out, retval] unsigned long* pdwRetVal);
        [id(0x00000040), helpstring("method IsCCRenewalCountry")]
        HRESULT IsCCRenewalCountry(
                        [in] BSTR bstrCountryCode, 
                        [out, retval] int* pbRetVal);
        [id(0x00000041), helpstring("method GetVATLabel")]
        HRESULT GetVATLabel(
                        [in] BSTR bstrCountryCode, 
                        [out, retval] BSTR* pbstrVATLabel);
        [id(0x00000042), helpstring("method GetCCRenewalExpiryDate")]
        HRESULT GetCCRenewalExpiryDate([out, retval] DATE* pDateVal);
        [id(0x00000043), helpstring("method SetVATNumber")]
        HRESULT SetVATNumber([in] BSTR bstrVATNumber);
        [id(0x00000044), helpstring("method SetCreditCardType")]
        HRESULT SetCreditCardType([in] BSTR bstrCCCode);
        [id(0x00000045), helpstring("method SetCreditCardNumber")]
        HRESULT SetCreditCardNumber([in] BSTR bstrCCNumber);
        [id(0x00000046), helpstring("method SetCreditCardExpiryYear")]
        HRESULT SetCreditCardExpiryYear([in] unsigned long dwCCYear);
        [id(0x00000047), helpstring("method SetCreditCardExpiryMonth")]
        HRESULT SetCreditCardExpiryMonth([in] unsigned long dwCCMonth);
        [id(0x00000048), helpstring("method GetCreditCardCount")]
        HRESULT GetCreditCardCount([out, retval] unsigned long* pdwCount);
        [id(0x00000049), helpstring("method GetCreditCardCode")]
        HRESULT GetCreditCardCode(
                        [in] unsigned long dwIndex, 
                        [out, retval] BSTR* pbstrCode);
        [id(0x0000004a), helpstring("method GetCreditCardName")]
        HRESULT GetCreditCardName(
                        [in] unsigned long dwIndex, 
                        [out, retval] BSTR* pbstrName);
        [id(0x0000004b), helpstring("method GetVATNumber")]
        HRESULT GetVATNumber([out, retval] BSTR* pbstrVATNumber);
        [id(0x0000004c), helpstring("method GetCreditCardType")]
        HRESULT GetCreditCardType([out, retval] BSTR* pbstrCCCode);
        [id(0x0000004d), helpstring("method GetCreditCardNumber")]
        HRESULT GetCreditCardNumber([out, retval] BSTR* pbstrCCNumber);
        [id(0x0000004e), helpstring("method GetCreditCardExpiryYear")]
        HRESULT GetCreditCardExpiryYear([out, retval] unsigned long* pdwCCYear);
        [id(0x0000004f), helpstring("method GetCreditCardExpiryMonth")]
        HRESULT GetCreditCardExpiryMonth([out, retval] unsigned long* pdwCCMonth);
        [id(0x00000050), helpstring("method GetDisconnectOption")]
        HRESULT GetDisconnectOption([out, retval] int* pbRetVal);
        [id(0x00000051), helpstring("method SetDisconnectOption")]
        HRESULT SetDisconnectOption([in] int bNewVal);
        [id(0x00000052), helpstring("method AsyncProcessHandshakeRequest")]
        HRESULT AsyncProcessHandshakeRequest([in] int bReviseCustInfo);
        [id(0x00000053), helpstring("method AsyncProcessNewLicenseRequest")]
        HRESULT AsyncProcessNewLicenseRequest();
        [id(0x00000054), helpstring("method AsyncProcessReissueLicenseRequest")]
        HRESULT AsyncProcessReissueLicenseRequest();
        [id(0x00000055), helpstring("method AsyncProcessRetailRenewalLicenseRequest")]
        HRESULT AsyncProcessRetailRenewalLicenseRequest();
        [id(0x00000056), helpstring("method AsyncProcessReviseCustInfoRequest")]
        HRESULT AsyncProcessReviseCustInfoRequest();
        [id(0x00000057), helpstring("method AsyncProcessCCRenewalPriceRequest")]
        HRESULT AsyncProcessCCRenewalPriceRequest();
        [id(0x00000058), helpstring("method AsyncProcessCCRenewalLicenseRequest")]
        HRESULT AsyncProcessCCRenewalLicenseRequest();
        [id(0x0000005a), helpstring("method GetAsyncProcessReturnCode")]
        HRESULT GetAsyncProcessReturnCode([out, retval] unsigned long* pdwRetCode);
        [id(0x0000005b), helpstring("method IsUpgradeAvailable")]
        HRESULT IsUpgradeAvailable([out, retval] int* pbUpgradeAvailable);
        [id(0x0000005c), helpstring("method WantUpgrade")]
        HRESULT WantUpgrade([in] int bWantUpgrade);
        [id(0x0000005d), helpstring("method AsyncProcessDroppedLicenseRequest")]
        HRESULT AsyncProcessDroppedLicenseRequest();
        [id(0x0000005e), helpstring("method GenerateInstallationId")]
        HRESULT GenerateInstallationId([out, retval] BSTR* pbstrVal);
        [id(0x0000005f), helpstring("method DepositConfirmationId")]
        HRESULT DepositConfirmationId(
                        [in] BSTR bstrVal, 
                        [out, retval] unsigned long* pdwRetCode);
        [id(0x00000060), helpstring("method VerifyCheckDigits")]
        HRESULT VerifyCheckDigits(
                        [in] BSTR bstrCIDIID, 
                        [out, retval] int* pbValue);
        [id(0x00000061), helpstring("method GetCurrentExpiryDate")]
        HRESULT GetCurrentExpiryDate([out, retval] DATE* pDateVal);
        [id(0x00000062), helpstring("method CancelAsyncProcessRequest")]
        HRESULT CancelAsyncProcessRequest([in] int bIsLicenseRequest);
        [id(0x00000064), helpstring("method GetCurrencyDescription")]
        HRESULT GetCurrencyDescription(
                        [in] unsigned long dwCurrencyIndex, 
                        [out, retval] BSTR* pbstrVal);
        [id(0x00000065), helpstring("method GetPriceItemCount")]
        HRESULT GetPriceItemCount([out, retval] unsigned long* pdwCount);
        [id(0x00000066), helpstring("method GetPriceItemLabel")]
        HRESULT GetPriceItemLabel(
                        [in] unsigned long dwIndex, 
                        [out, retval] BSTR* pbstrVal);
        [id(0x00000067), helpstring("method GetPriceItemValue")]
        HRESULT GetPriceItemValue(
                        [in] unsigned long dwCurrencyIndex, 
                        [in] unsigned long dwIndex, 
                        [out, retval] BSTR* pbstrVal);
        [id(0x00000068), helpstring("method GetInvoiceText")]
        HRESULT GetInvoiceText([out, retval] BSTR* pNewVal);
        [id(0x00000069), helpstring("method GetBackendErrorMsg")]
        HRESULT GetBackendErrorMsg([out, retval] BSTR* pbstrErrMsg);
        [id(0x0000006a), helpstring("method GetCurrencyOption")]
        HRESULT GetCurrencyOption([out, retval] unsigned long* dwCurrencyOption);
        [id(0x0000006b), helpstring("method SetCurrencyOption")]
        HRESULT SetCurrencyOption([in] unsigned long dwCurrencyOption);
        [id(0x0000006c), helpstring("method GetEndOfLifeHtmlText")]
        HRESULT GetEndOfLifeHtmlText([out, retval] BSTR* pbstrHtmlText);
        [id(0x0000006d), helpstring("method DisplaySSLCert")]
        HRESULT DisplaySSLCert([out, retval] unsigned long* dwRetCode);
    };

    [
      odl,
      uuid(000C0372-0000-0000-C000-000000000046),
      helpcontext(0x0003a1b0),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoEServicesDialog : IDispatch {
        [id(0x60020000)]
        HRESULT Close([in, optional, defaultvalue(0)] VARIANT_BOOL ApplyWebComponentChanges);
        [id(0x60020001)]
        HRESULT AddTrustedDomain([in] BSTR Domain);
        [id(0x60020002), propget]
        HRESULT ApplicationName([out, retval] BSTR* retval);
        [id(0x60020003), propget]
        HRESULT Application([out, retval] IDispatch** ppdisp);
        [id(0x60020004), propget]
        HRESULT WebComponent([out, retval] IDispatch** ppdisp);
        [id(0x60020005), propget]
        HRESULT ClipArt([out, retval] IDispatch** ppdisp);
    };

    [
      odl,
      uuid(000C0373-0000-0000-C000-000000000046),
      helpcontext(0x0003a598),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface WebComponentProperties : IDispatch {
        [id(0x00000001), propget]
        HRESULT Shape([out, retval] IDispatch** RetValue);
        [id(0x00000002), propget]
        HRESULT Name([out, retval] BSTR* RetValue);
        [id(0x00000002), propput]
        HRESULT Name([in] BSTR RetValue);
        [id(0x00000003), propget]
        HRESULT URL([out, retval] BSTR* RetValue);
        [id(0x00000003), propput]
        HRESULT URL([in] BSTR RetValue);
        [id(0x00000004), propget]
        HRESULT HTML([out, retval] BSTR* RetValue);
        [id(0x00000004), propput]
        HRESULT HTML([in] BSTR RetValue);
        [id(0x00000005), propget]
        HRESULT PreviewGraphic([out, retval] BSTR* RetValue);
        [id(0x00000005), propput]
        HRESULT PreviewGraphic([in] BSTR RetValue);
        [id(0x00000006), propget]
        HRESULT PreviewHTML([out, retval] BSTR* RetValue);
        [id(0x00000006), propput]
        HRESULT PreviewHTML([in] BSTR RetValue);
        [id(0x00000007), propget]
        HRESULT Width([out, retval] long* RetValue);
        [id(0x00000007), propput]
        HRESULT Width([in] long RetValue);
        [id(0x00000008), propget]
        HRESULT Height([out, retval] long* RetValue);
        [id(0x00000008), propput]
        HRESULT Height([in] long RetValue);
        [id(0x00000009), propget]
        HRESULT Tag([out, retval] BSTR* RetValue);
        [id(0x00000009), propput]
        HRESULT Tag([in] BSTR RetValue);
    };

    [
      odl,
      uuid(000C0377-0000-0000-C000-000000000046),
      helpcontext(0x0003ff70),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartDocument : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x0003ff71)]
        HRESULT SolutionID([out, retval] BSTR* pbstrID);
        [id(0x00000001), propput, helpcontext(0x0003ff71)]
        HRESULT SolutionID([in] BSTR pbstrID);
        [id(0x00000002), propget, helpcontext(0x0003ff72)]
        HRESULT SolutionURL([out, retval] BSTR* pbstrUrl);
        [id(0x00000002), propput, helpcontext(0x0003ff72)]
        HRESULT SolutionURL([in] BSTR pbstrUrl);
        [id(0x00000003), helpcontext(0x0003ff73)]
        HRESULT PickSolution([in, optional, defaultvalue(0)] VARIANT_BOOL ConsiderAllSchemas);
        [id(0x00000004), helpcontext(0x0003ff74)]
        HRESULT RefreshPane();
    };

    [
      odl,
      uuid(000C0381-0000-0000-C000-000000000046),
      helpcontext(0x00042680),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SharedWorkspaceMember : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00042681)]
        HRESULT DomainName([out, retval] BSTR* pbstrDomainName);
        [id(0x00000001), propget, helpcontext(0x00042682)]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x00000002), propget, helpcontext(0x00042683)]
        HRESULT Email([out, retval] BSTR* pbstrEmail);
        [id(0x00000003), helpcontext(0x00042684)]
        HRESULT Delete();
        [id(0x00000004), propget, hidden]
        HRESULT Id([out, retval] BSTR* Id);
        [id(0x00000005), propget, helpcontext(0x00042685)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
    };

    [
      odl,
      uuid(000C0382-0000-0000-C000-000000000046),
      helpcontext(0x00042a68),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SharedWorkspaceMembers : _IMsoDispObj {
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
        [id(00000000), propget, helpcontext(0x00042a69)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] SharedWorkspaceMember** ppidisp);
        [id(0x00000001), propget, helpcontext(0x00042a6a)]
        HRESULT Count([out, retval] int* pcItems);
        [id(0x00000002), helpcontext(0x00042a6b)]
        HRESULT Add(
                        [in] BSTR Email, 
                        [in] BSTR DomainName, 
                        [in] BSTR DisplayName, 
                        [in, optional] VARIANT Role, 
                        [out, retval] SharedWorkspaceMember** ppMember);
        [id(0x00000003), propget, helpcontext(0x00042a6c)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x00000004), propget, helpcontext(0x00042a6d)]
        HRESULT ItemCountExceeded([out, retval] VARIANT_BOOL* pf);
    };

    

    [
      odl,
      uuid(000C0379-0000-0000-C000-000000000046),
      helpcontext(0x00040740),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SharedWorkspaceTask : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00040741)]
        HRESULT Title([out, retval] BSTR* Title);
        [id(00000000), propput, helpcontext(0x00040741)]
        HRESULT Title([in] BSTR Title);
        [id(0x00000001), propget, helpcontext(0x00040742)]
        HRESULT AssignedTo([out, retval] BSTR* AssignedTo);
        [id(0x00000001), propput, helpcontext(0x00040742)]
        HRESULT AssignedTo([in] BSTR AssignedTo);
        [id(0x00000002), propget, helpcontext(0x00040743)]
        HRESULT Status([out, retval] MsoSharedWorkspaceTaskStatus* Status);
        [id(0x00000002), propput, helpcontext(0x00040743)]
        HRESULT Status([in] MsoSharedWorkspaceTaskStatus Status);
        [id(0x00000003), propget, helpcontext(0x00040744)]
        HRESULT Priority([out, retval] MsoSharedWorkspaceTaskPriority* Priority);
        [id(0x00000003), propput, helpcontext(0x00040744)]
        HRESULT Priority([in] MsoSharedWorkspaceTaskPriority Priority);
        [id(0x00000004), propget, helpcontext(0x00040745)]
        HRESULT Description([out, retval] BSTR* Description);
        [id(0x00000004), propput, helpcontext(0x00040745)]
        HRESULT Description([in] BSTR Description);
        [id(0x00000005), propget, helpcontext(0x00040746)]
        HRESULT DueDate([out, retval] VARIANT* DueDate);
        [id(0x00000005), propput, helpcontext(0x00040746)]
        HRESULT DueDate([in] VARIANT DueDate);
        [id(0x00000006), propget, helpcontext(0x00040747)]
        HRESULT CreatedBy([out, retval] BSTR* CreatedBy);
        [id(0x00000007), propget, helpcontext(0x00040748)]
        HRESULT CreatedDate([out, retval] VARIANT* CreatedDate);
        [id(0x00000008), propget, helpcontext(0x00040749)]
        HRESULT ModifiedBy([out, retval] BSTR* ModifiedBy);
        [id(0x00000009), propget, helpcontext(0x0004074a)]
        HRESULT ModifiedDate([out, retval] VARIANT* ModifiedDate);
        [id(0x0000000a), helpcontext(0x0028488b)]
        HRESULT Save();
        [id(0x0000000b), helpcontext(0x00040364)]
        HRESULT Delete();
        [id(0x0000000c), propget, helpcontext(0x00040365)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
    };

    [
      odl,
      uuid(000C037A-0000-0000-C000-000000000046),
      helpcontext(0x00040b28),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SharedWorkspaceTasks : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00040b29)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] SharedWorkspaceTask** ppidisp);
        [id(0x00000001), propget, helpcontext(0x00040b2a)]
        HRESULT Count([out, retval] int* pcItems);
        [id(0x00000002), helpcontext(0x00040b2b)]
        HRESULT Add(
                        [in] BSTR Title, 
                        [in, optional] VARIANT Status, 
                        [in, optional] VARIANT Priority, 
                        [in, optional] VARIANT Assignee, 
                        [in, optional] VARIANT Description, 
                        [in, optional] VARIANT DueDate, 
                        [out, retval] SharedWorkspaceTask** ppTask);
        [id(0x00000003), propget, helpcontext(0x00040b2c)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x00000004), propget, helpcontext(0x00040b2d)]
        HRESULT ItemCountExceeded([out, retval] VARIANT_BOOL* pf);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
    };

    [
      odl,
      uuid(000C037B-0000-0000-C000-000000000046),
      helpcontext(0x00040f10),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SharedWorkspaceFile : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00040f11)]
        HRESULT URL([out, retval] BSTR* pbstrFilename);
        [id(0x00000001), propget, helpcontext(0x00040f12)]
        HRESULT CreatedBy([out, retval] BSTR* pbstrCreatedBy);
        [id(0x00000002), propget, helpcontext(0x00040f13)]
        HRESULT CreatedDate([out, retval] VARIANT* CreatedDate);
        [id(0x00000003), propget, helpcontext(0x00040f14)]
        HRESULT ModifiedBy([out, retval] BSTR* pbstrModifiedBy);
        [id(0x00000004), propget, helpcontext(0x00040f15)]
        HRESULT ModifiedDate([out, retval] VARIANT* ModifiedDate);
        [id(0x00000005), helpcontext(0x00040f16)]
        HRESULT Delete();
        [id(0x00000006), propget, helpcontext(0x00040f17)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
    };

    [
      odl,
      uuid(000C037C-0000-0000-C000-000000000046),
      helpcontext(0x000412f8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SharedWorkspaceFiles : _IMsoDispObj {
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
        [id(00000000), propget, helpcontext(0x000412f9)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] SharedWorkspaceFile** ppidisp);
        [id(0x00000001), propget, helpcontext(0x000412fa)]
        HRESULT Count([out, retval] int* pcItems);
        [id(0x00000002), helpcontext(0x000412fb)]
        HRESULT Add(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT ParentFolder, 
                        [in, optional] VARIANT OverwriteIfFileAlreadyExists, 
                        [in, optional] VARIANT KeepInSync, 
                        [out, retval] SharedWorkspaceFile** ppFile);
        [id(0x00000003), propget, helpcontext(0x000412fc)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x00000004), propget, helpcontext(0x000412fd)]
        HRESULT ItemCountExceeded([out, retval] VARIANT_BOOL* pf);
    };

    [
      odl,
      uuid(000C037D-0000-0000-C000-000000000046),
      helpcontext(0x000416e0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SharedWorkspaceFolder : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x000416e1)]
        HRESULT FolderName([out, retval] BSTR* FolderName);
        [id(0x00000001), helpcontext(0x000416e6)]
        HRESULT Delete([in, optional] VARIANT DeleteEventIfFolderContainsFiles);
        [id(0x00000002), propget, helpcontext(0x000416e7)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
    };

    [
      odl,
      uuid(000C037E-0000-0000-C000-000000000046),
      helpcontext(0x00041ac8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SharedWorkspaceFolders : _IMsoDispObj {
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
        [id(00000000), propget, helpcontext(0x00041ac9)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] SharedWorkspaceFolder** ppidisp);
        [id(0x00000001), propget, helpcontext(0x00041aca)]
        HRESULT Count([out, retval] int* pcItems);
        [id(0x00000002), helpcontext(0x00041acb)]
        HRESULT Add(
                        [in] BSTR FolderName, 
                        [in, optional] VARIANT ParentFolder, 
                        [out, retval] SharedWorkspaceFolder** ppFolder);
        [id(0x00000003), propget, helpcontext(0x00041acc)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x00000004), propget, helpcontext(0x00041acd)]
        HRESULT ItemCountExceeded([out, retval] VARIANT_BOOL* pf);
    };

    [
      odl,
      uuid(000C037F-0000-0000-C000-000000000046),
      helpcontext(0x00041eb0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SharedWorkspaceLink : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00041eb1)]
        HRESULT URL([out, retval] BSTR* URL);
        [id(00000000), propput, helpcontext(0x00041eb1)]
        HRESULT URL([in] BSTR URL);
        [id(0x00000001), propget, helpcontext(0x00041eb2)]
        HRESULT Description([out, retval] BSTR* Description);
        [id(0x00000001), propput, helpcontext(0x00041eb2)]
        HRESULT Description([in] BSTR Description);
        [id(0x00000002), propget, helpcontext(0x00041eb3)]
        HRESULT Notes([out, retval] BSTR* Notes);
        [id(0x00000002), propput, helpcontext(0x00041eb3)]
        HRESULT Notes([in] BSTR Notes);
        [id(0x00000003), propget, helpcontext(0x00041eb4)]
        HRESULT CreatedBy([out, retval] BSTR* CreatedBy);
        [id(0x00000004), propget, helpcontext(0x00041eb5)]
        HRESULT CreatedDate([out, retval] VARIANT* CreatedDate);
        [id(0x00000005), propget, helpcontext(0x00041eb6)]
        HRESULT ModifiedBy([out, retval] BSTR* ModifiedBy);
        [id(0x00000006), propget, helpcontext(0x00041eb7)]
        HRESULT ModifiedDate([out, retval] VARIANT* ModifiedDate);
        [id(0x00000007), helpcontext(0x00041eb8)]
        HRESULT Save();
        [id(0x00000008), helpcontext(0x00041eb9)]
        HRESULT Delete();
        [id(0x00000009), propget, helpcontext(0x00041eba)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
    };

    [
      odl,
      uuid(000C0380-0000-0000-C000-000000000046),
      helpcontext(0x00042298),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SharedWorkspaceLinks : _IMsoDispObj {
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
        [id(00000000), propget, helpcontext(0x00042299)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] SharedWorkspaceLink** ppidisp);
        [id(0x00000001), propget, helpcontext(0x0004229a)]
        HRESULT Count([out, retval] int* pcItems);
        [id(0x00000002), helpcontext(0x0004229b)]
        HRESULT Add(
                        [in] BSTR URL, 
                        [in, optional] VARIANT Description, 
                        [in, optional] VARIANT Notes, 
                        [out, retval] SharedWorkspaceLink** ppLink);
        [id(0x00000003), propget, helpcontext(0x0004229c)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x00000004), propget, helpcontext(0x0004229d)]
        HRESULT ItemCountExceeded([out, retval] VARIANT_BOOL* pf);
    };

    [
      odl,
      uuid(000C0385-0000-0000-C000-000000000046),
      helpcontext(0x00043620),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SharedWorkspace : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00043621)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(00000000), propput, helpcontext(0x00043621)]
        HRESULT Name([in] BSTR Name);
        [id(0x00000001), propget, helpcontext(0x00043622)]
        HRESULT Members([out, retval] SharedWorkspaceMembers** ppMembers);
        [id(0x00000002), propget, helpcontext(0x00043623)]
        HRESULT Tasks([out, retval] SharedWorkspaceTasks** ppTasks);
        [id(0x00000003), propget, helpcontext(0x00043624)]
        HRESULT Files([out, retval] SharedWorkspaceFiles** ppFiles);
        [id(0x00000004), propget, helpcontext(0x00043625)]
        HRESULT Folders([out, retval] SharedWorkspaceFolders** ppFolders);
        [id(0x00000005), propget, helpcontext(0x00043626)]
        HRESULT Links([out, retval] SharedWorkspaceLinks** ppLinks);
        [id(0x00000006), helpcontext(0x00043627)]
        HRESULT Refresh();
        [id(0x00000007), helpcontext(0x00043628)]
        HRESULT CreateNew(
                        [in, optional] VARIANT URL, 
                        [in, optional] VARIANT Name);
        [id(0x00000008), helpcontext(0x00043629)]
        HRESULT Delete();
        [id(0x00000009), propget, helpcontext(0x0004362a)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x0000000a), propget, helpcontext(0x0004362b)]
        HRESULT URL([out, retval] BSTR* pbstrUrl);
        [id(0x0000000b), propget, helpcontext(0x0004362c)]
        HRESULT Connected([out, retval] VARIANT_BOOL* pfConnected);
        [id(0x0000000c), propget, helpcontext(0x0004362d)]
        HRESULT LastRefreshed([out, retval] VARIANT* pvarLastRefreshed);
        [id(0x0000000d), propget, helpcontext(0x0004362e)]
        HRESULT SourceURL([out, retval] BSTR* pbstrSourceURL);
        [id(0x0000000d), propput, helpcontext(0x0004362e)]
        HRESULT SourceURL([in] BSTR pbstrSourceURL);
        [id(0x0000000e), helpcontext(0x0004362f)]
        HRESULT RemoveDocument();
        [id(0x0000000f), helpcontext(0x00043630)]
        HRESULT Disconnect();
    };

    

    

    [
      odl,
      uuid(000C0386-0000-0000-C000-000000000046),
      helpcontext(0x00043a08),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Sync : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00043a09)]
        HRESULT Status([out, retval] MsoSyncStatusType* pStatusType);
        [id(0x00000001), propget, helpcontext(0x00043a0a)]
        HRESULT WorkspaceLastChangedBy([out, retval] BSTR* pbstrWorkspaceLastChangedBy);
        [id(0x00000002), propget, helpcontext(0x00043a0b)]
        HRESULT LastSyncTime([out, retval] VARIANT* pdatSavedTo);
        [id(0x00000004), propget, helpcontext(0x00043a0d)]
        HRESULT ErrorType([out, retval] MsoSyncErrorType* pErrorType);
        [id(0x00000006), helpcontext(0x00043a0f)]
        HRESULT GetUpdate();
        [id(0x00000007), helpcontext(0x00043a10)]
        HRESULT PutUpdate();
        [id(0x00000008), helpcontext(0x00043a11)]
        HRESULT OpenVersion([in] MsoSyncVersionType SyncVersionType);
        [id(0x00000009), helpcontext(0x00043a12)]
        HRESULT ResolveConflict([in] MsoSyncConflictResolutionType SyncConflictResolution);
        [id(0x0000000a), helpcontext(0x00043a13)]
        HRESULT Unsuspend();
        [id(0x0000000e), propget, helpcontext(0x00043a17)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
    };

    [
      odl,
      uuid(000C0387-0000-0000-C000-000000000046),
      helpcontext(0x00043a16),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DocumentLibraryVersion : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00043a19)]
        HRESULT Modified([out, retval] VARIANT* pvarDate);
        [id(0x00000001), propget, helpcontext(0x00043a1a)]
        HRESULT Index([out, retval] long* lIndex);
        [id(0x00000002), propget, helpcontext(0x00043a1b)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x00000003), propget, helpcontext(0x00043a1c)]
        HRESULT ModifiedBy([out, retval] BSTR* userName);
        [id(0x00000004), propget, helpcontext(0x00043a1d)]
        HRESULT Comments([out, retval] BSTR* Comments);
        [id(0x00000005), helpcontext(0x00043a1e)]
        HRESULT Delete();
        [id(0x00000006), helpcontext(0x00043a1f)]
        HRESULT Open([out, retval] IDispatch** ppdispOpened);
        [id(0x00000007), helpcontext(0x00043a20)]
        HRESULT Restore([out, retval] IDispatch** ppdispOpened);
    };

    [
      odl,
      uuid(000C0388-0000-0000-C000-000000000046),
      helpcontext(0x00043a22),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DocumentLibraryVersions : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00043a23)]
        HRESULT Item(
                        [in] long lIndex, 
                        [out, retval] DocumentLibraryVersion** ppidisp);
        [id(0x00000001), propget, helpcontext(0x00043a24)]
        HRESULT Count([out, retval] long* lCount);
        [id(0x00000002), propget, helpcontext(0x00043a25)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x00000003), propget, helpcontext(0x00043a26)]
        HRESULT IsVersioningEnabled([out, retval] VARIANT_BOOL* pvarfVersioningOn);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
    };

    

    [
      odl,
      uuid(000C0375-0000-0000-C000-000000000046),
      helpcontext(0x0003f7a0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface UserPermission : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x0003f7a1)]
        HRESULT UserId([out, retval] BSTR* UserId);
        [id(0x00000001), propget, helpcontext(0x0003f7a2)]
        HRESULT Permission([out, retval] long* Permission);
        [id(0x00000001), propput, helpcontext(0x0003f7a2)]
        HRESULT Permission([in] long Permission);
        [id(0x00000002), propget, helpcontext(0x0003f7a3)]
        HRESULT ExpirationDate([out, retval] VARIANT* ExpirationDate);
        [id(0x00000002), propput, helpcontext(0x0003f7a3)]
        HRESULT ExpirationDate([in] VARIANT ExpirationDate);
        [id(0x00000003), propget, helpcontext(0x0003f7a4)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x00000004), helpcontext(0x0003f7a5)]
        HRESULT Remove();
    };

    [
      odl,
      uuid(000C0376-0000-0000-C000-000000000046),
      helpcontext(0x0003fb88),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Permission : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x0003fb89)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] UserPermission** UserPerm);
        [id(0x00000001), propget, helpcontext(0x0003fb8a)]
        HRESULT Count([out, retval] long* Count);
        [id(0x00000002), propget, helpcontext(0x0003fb8b)]
        HRESULT EnableTrustedBrowser([out, retval] VARIANT_BOOL* Enable);
        [id(0x00000002), propput, helpcontext(0x0003fb8b)]
        HRESULT EnableTrustedBrowser([in] VARIANT_BOOL Enable);
        [id(0x00000003), helpcontext(0x0003fb8c)]
        HRESULT Add(
                        [in] BSTR UserId, 
                        [in, optional] VARIANT Permission, 
                        [in, optional] VARIANT ExpirationDate, 
                        [out, retval] UserPermission** UserPerm);
        [id(0x00000004), helpcontext(0x0003fb8d)]
        HRESULT ApplyPolicy([in] BSTR FileName);
        [id(0x00000005), propget, helpcontext(0x0003fb8e)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x00000006), helpcontext(0x0003fb8f)]
        HRESULT RemoveAll();
        [id(0x00000007), propget, helpcontext(0x0003fb90)]
        HRESULT Enabled([out, retval] VARIANT_BOOL* Enabled);
        [id(0x00000007), propput, helpcontext(0x0003fb90)]
        HRESULT Enabled([in] VARIANT_BOOL Enabled);
        [id(0x00000008), propget, helpcontext(0x0003fb91)]
        HRESULT RequestPermissionURL([out, retval] BSTR* Contact);
        [id(0x00000008), propput, helpcontext(0x0003fb91)]
        HRESULT RequestPermissionURL([in] BSTR Contact);
        [id(0x00000009), propget, helpcontext(0x0003fb92)]
        HRESULT PolicyName([out, retval] BSTR* PolicyName);
        [id(0x0000000a), propget, helpcontext(0x0003fb93)]
        HRESULT PolicyDescription([out, retval] BSTR* PolicyDescription);
        [id(0x0000000b), propget, helpcontext(0x0003fb94)]
        HRESULT StoreLicenses([out, retval] VARIANT_BOOL* Enabled);
        [id(0x0000000b), propput, helpcontext(0x0003fb94)]
        HRESULT StoreLicenses([in] VARIANT_BOOL Enabled);
        [id(0x0000000c), propget, helpcontext(0x0003fb95)]
        HRESULT DocumentAuthor([out, retval] BSTR* Author);
        [id(0x0000000c), propput, helpcontext(0x0003fb95)]
        HRESULT DocumentAuthor([in] BSTR Author);
        [id(0x0000000d), propget, helpcontext(0x0003fb96)]
        HRESULT PermissionFromPolicy([out, retval] VARIANT_BOOL* FromPolicy);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
    };

    [
      odl,
      uuid(000C038C-0000-0000-C000-000000000046),
      hidden,
      dual,
      oleautomation
    ]
    interface MsoDebugOptions_UTRunResult : _IMsoDispObj {
        [id(00000000), propget]
        HRESULT Passed([out, retval] VARIANT_BOOL* Passed);
        [id(0x00000001), propget]
        HRESULT ErrorString([out, retval] BSTR* Error);
    };

    [
      odl,
      uuid(000C038B-0000-0000-C000-000000000046),
      hidden,
      dual,
      oleautomation
    ]
    interface MsoDebugOptions_UT : _IMsoDispObj {
        [id(00000000), propget]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x00000001), propget]
        HRESULT CollectionName([out, retval] BSTR* pbstrColName);
        [id(0x00000002)]
        HRESULT Run([out, retval] MsoDebugOptions_UTRunResult** ppRunResult);
    };

    [
      odl,
      uuid(000C038A-0000-0000-C000-000000000046),
      hidden,
      dual,
      oleautomation
    ]
    interface MsoDebugOptions_UTs : _IMsoDispObj {
        [id(00000000), propget]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] MsoDebugOptions_UT** ppUnitTest);
        [id(0x00000001), propget]
        HRESULT Count([out, retval] int* iCountRetVal);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
        [id(0x00000002)]
        HRESULT GetUnitTestsInCollection(
                        [in] BSTR bstrCollectionName, 
                        [out, retval] MsoDebugOptions_UTs** MsoDebugOptions_UTs);
        [id(0x00000003)]
        HRESULT GetUnitTest(
                        [in] BSTR bstrCollectionName, 
                        [in] BSTR bstrUnitTestName, 
                        [out, retval] MsoDebugOptions_UT** MsoDebugOptions_UT);
        [id(0x00000004)]
        HRESULT GetMatchingUnitTestsInCollection(
                        [in] BSTR bstrCollectionName, 
                        [in] BSTR bstrUnitTestNameFilter, 
                        [out, retval] MsoDebugOptions_UTs** MsoDebugOptions_UTs);
    };

    [
      odl,
      uuid(000C0389-0000-0000-C000-000000000046),
      hidden,
      dual,
      oleautomation
    ]
    interface MsoDebugOptions_UTManager : _IMsoDispObj {
        [id(00000000), propget]
        HRESULT UnitTests([out, retval] MsoDebugOptions_UTs** ppMsoUnitTests);
        [id(0x00000001)]
        HRESULT NotifyStartOfTestSuiteRun();
        [id(0x00000002)]
        HRESULT NotifyEndOfTestSuiteRun();
        [id(0x00000003), propget]
        HRESULT ReportErrors([out, retval] VARIANT_BOOL* pfReportErrors);
        [id(0x00000003), propput]
        HRESULT ReportErrors([in] VARIANT_BOOL pfReportErrors);
    };

    

    [
      odl,
      uuid(000C038F-0000-0000-C000-000000000046),
      helpcontext(0x00043238),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MetaProperty : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00043239)]
        HRESULT Value([out, retval] VARIANT* pvarValue);
        [id(00000000), propput, helpcontext(0x00043239)]
        HRESULT Value([in] VARIANT pvarValue);
        [id(0x00000001), propget, helpcontext(0x0004323a)]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x00000002), propget, helpcontext(0x0004323b)]
        HRESULT Id([out, retval] BSTR* pbstrID);
        [id(0x00000003), propget, helpcontext(0x0004323c)]
        HRESULT IsReadOnly([out, retval] VARIANT_BOOL* pfReadOnly);
        [id(0x00000004), propget, helpcontext(0x0004323d)]
        HRESULT IsRequired([out, retval] VARIANT_BOOL* pfRequired);
        [id(0x00000005), propget, helpcontext(0x0004323e)]
        HRESULT Type([out, retval] MsoMetaPropertyType* ptype);
        [id(0x00000006), helpcontext(0x0004323f)]
        HRESULT Validate([out, retval] BSTR* pbstrError);
        [id(0x00000007), propget, hidden, helpcontext(0x00043240)]
        HRESULT ValidationError([out, retval] BSTR* pbstr);
        [id(0x00000008), propget, helpcontext(0x00043241)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
    };

    [
      odl,
      uuid(000C038E-0000-0000-C000-000000000046),
      helpcontext(0x00042e50),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MetaProperties : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00042e51)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] MetaProperty** ppmp);
        [id(0x00000001), helpcontext(0x00042e52)]
        HRESULT GetItemByInternalName(
                        [in] BSTR InternalName, 
                        [out, retval] MetaProperty** ppmp);
        [id(0x00000002), propget, helpcontext(0x00042e53)]
        HRESULT Count([out, retval] long* pc);
        [id(0x00000003), helpcontext(0x00042e54)]
        HRESULT Validate([out, retval] BSTR* pbstrError);
        [id(0x00000004), propget, hidden, helpcontext(0x00042e55)]
        HRESULT ValidationError([out, retval] BSTR* pbstr);
        [id(0x00000005), propget, helpcontext(0x00042e56)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
        [id(0x00000006), propget, helpcontext(0x00042e57)]
        HRESULT SchemaXml([out, retval] BSTR* pbstr);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
    };

    

    [
      odl,
      uuid(000C0391-0000-0000-C000-000000000046),
      helpcontext(0x00043e04),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PolicyItem : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00043e05)]
        HRESULT Id([out, retval] BSTR* pbstrID);
        [id(0x00000001), propget, helpcontext(0x00043e06)]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x00000002), propget, helpcontext(0x00043e07)]
        HRESULT Description([out, retval] BSTR* pbstrDescription);
        [id(0x00000003), propget, helpcontext(0x00043e08)]
        HRESULT Data([out, retval] BSTR* pbstrStatement);
        [id(0x00000004), propget, helpcontext(0x00043e09)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
    };

    [
      odl,
      uuid(000C0390-0000-0000-C000-000000000046),
      helpcontext(0x00043dfa),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ServerPolicy : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00043e00)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] PolicyItem** pppi);
        [id(0x00000001), propget, helpcontext(0x00043dfb)]
        HRESULT Id([out, retval] BSTR* pbstrID);
        [id(0x00000002), propget, helpcontext(0x00043dfc)]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x00000003), propget, helpcontext(0x00043dfd)]
        HRESULT Description([out, retval] BSTR* pbstrDescription);
        [id(0x00000004), propget, helpcontext(0x00043dfe)]
        HRESULT Statement([out, retval] BSTR* pbstrStatement);
        [id(0x00000005), propget, helpcontext(0x00043dff)]
        HRESULT Count([out, retval] long* pc);
        [id(0x00000006), propget, helpcontext(0x00043e01)]
        HRESULT BlockPreview([out, retval] VARIANT_BOOL* pfBlockPreview);
        [id(0x00000007), propget, helpcontext(0x00043e03)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
    };

    

    [
      odl,
      uuid(000C0393-0000-0000-C000-000000000046),
      helpcontext(0x000441d8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DocumentInspector : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x000441d9)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000001), propget, helpcontext(0x000441da)]
        HRESULT Description([out, retval] BSTR* Description);
        [id(0x00000002), helpcontext(0x000441db)]
        HRESULT Inspect(
                        [out] MsoDocInspectorStatus* Status, 
                        [out] BSTR* Results);
        [id(0x00000003), helpcontext(0x000441dc)]
        HRESULT Fix(
                        [out] MsoDocInspectorStatus* Status, 
                        [out] BSTR* Results);
        [id(0x00000004), propget, helpcontext(0x000441dd)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
    };

    [
      odl,
      uuid(000C0392-0000-0000-C000-000000000046),
      helpcontext(0x00043df0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DocumentInspectors : _IMsoDispObj {
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
        [id(00000000), propget, helpcontext(0x00043df1)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] DocumentInspector** ppidisp);
        [id(0x00000001), propget, helpcontext(0x00043df2)]
        HRESULT Count([out, retval] int* pcItems);
        [id(0x00000002), propget, helpcontext(0x00043df3)]
        HRESULT Parent([out, retval] IDispatch** ppidisp);
    };

    [
      odl,
      uuid(000CD900-0000-0000-C000-000000000046),
      helpcontext(0x000445c0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface WorkflowTask : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x000445c1)]
        HRESULT Id([out, retval] BSTR* pbstr);
        [id(0x00000002), propget, helpcontext(0x000445c2)]
        HRESULT ListID([out, retval] BSTR* pbstr);
        [id(0x00000003), propget, helpcontext(0x000445c3)]
        HRESULT WorkflowID([out, retval] BSTR* pbstr);
        [id(0x00000004), propget, helpcontext(0x000445c4)]
        HRESULT Name([out, retval] BSTR* pbstr);
        [id(0x00000005), propget, helpcontext(0x000445c5)]
        HRESULT Description([out, retval] BSTR* pbstr);
        [id(0x00000006), propget, helpcontext(0x000445c6)]
        HRESULT AssignedTo([out, retval] BSTR* pbstr);
        [id(0x00000007), propget, helpcontext(0x000445c7)]
        HRESULT CreatedBy([out, retval] BSTR* pbstr);
        [id(0x00000008), propget, helpcontext(0x000445c8)]
        HRESULT DueDate([out, retval] DATE* pdate);
        [id(0x00000009), propget, helpcontext(0x000445c9)]
        HRESULT CreatedDate([out, retval] DATE* pdate);
        [id(0x0000000a), helpcontext(0x000445ca)]
        HRESULT Show([out, retval] int* pRet);
    };

    [
      odl,
      uuid(000CD901-0000-0000-C000-000000000046),
      helpcontext(0x000449a8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface WorkflowTasks : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x000449a9)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] WorkflowTask** ppret);
        [id(0x00000001), propget, helpcontext(0x000449aa)]
        HRESULT Count([out, retval] long* pCount);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
    };

    [
      odl,
      uuid(000CD902-0000-0000-C000-000000000046),
      helpcontext(0x00044d90),
      dual,
      nonextensible,
      oleautomation
    ]
    interface WorkflowTemplate : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x00044d91)]
        HRESULT Id([out, retval] BSTR* pbstr);
        [id(0x00000002), propget, helpcontext(0x00044d92)]
        HRESULT Name([out, retval] BSTR* pbstr);
        [id(0x00000003), propget, helpcontext(0x00044d93)]
        HRESULT Description([out, retval] BSTR* pbstr);
        [id(0x00000004), propget, helpcontext(0x00044d94)]
        HRESULT DocumentLibraryName([out, retval] BSTR* pbstr);
        [id(0x00000005), propget, helpcontext(0x00044d95)]
        HRESULT DocumentLibraryURL([out, retval] BSTR* pbstr);
        [id(0x00000006), helpcontext(0x00044d96)]
        HRESULT Show([out, retval] int* pRet);
    };

    [
      odl,
      uuid(000CD903-0000-0000-C000-000000000046),
      helpcontext(0x00045178),
      dual,
      nonextensible,
      oleautomation
    ]
    interface WorkflowTemplates : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00045179)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] WorkflowTemplate** ppret);
        [id(0x00000001), propget, helpcontext(0x0004517a)]
        HRESULT Count([out, retval] long* pCount);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
    };

    [
      odl,
      uuid(000CD706-0000-0000-C000-000000000046),
      helpcontext(0x00045560),
      oleautomation
    ]
    interface IDocumentInspector : IUnknown {
        HRESULT _stdcall GetInfo(
                        [out] BSTR* Name, 
                        [out] BSTR* Desc);
        HRESULT _stdcall Inspect(
                        [in] IDispatch* Doc, 
                        [out] MsoDocInspectorStatus* Status, 
                        [out] BSTR* Result, 
                        [out] BSTR* Action);
        HRESULT _stdcall Fix(
                        [in] IDispatch* Doc, 
                        [in] long hwnd, 
                        [out] MsoDocInspectorStatus* Status, 
                        [out] BSTR* Result);
    };

    

    [
      odl,
      uuid(000CD6A1-0000-0000-C000-000000000046),
      helpcontext(0x00045948),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SignatureSetup : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x00045949)]
        HRESULT ReadOnly([out, retval] VARIANT_BOOL* pvarf);
        [id(0x00000002), propget, helpcontext(0x0004594a)]
        HRESULT Id([out, retval] BSTR* pbstr);
        [id(0x00000003), propget, helpcontext(0x0004594b)]
        HRESULT SignatureProvider([out, retval] BSTR* pbstrSigProv);
        [id(0x00000004), propget, helpcontext(0x0004594c)]
        HRESULT SuggestedSigner([out, retval] BSTR* pbstr);
        [id(0x00000004), propput, helpcontext(0x0004594c)]
        HRESULT SuggestedSigner([in] BSTR pbstr);
        [id(0x00000005), propget, helpcontext(0x0004594d)]
        HRESULT SuggestedSignerLine2([out, retval] BSTR* pbstr);
        [id(0x00000005), propput, helpcontext(0x0004594d)]
        HRESULT SuggestedSignerLine2([in] BSTR pbstr);
        [id(0x00000006), propget, helpcontext(0x0004594e)]
        HRESULT SuggestedSignerEmail([out, retval] BSTR* pbstr);
        [id(0x00000006), propput, helpcontext(0x0004594e)]
        HRESULT SuggestedSignerEmail([in] BSTR pbstr);
        [id(0x00000007), propget, helpcontext(0x0004594f)]
        HRESULT SigningInstructions([out, retval] BSTR* pbstr);
        [id(0x00000007), propput, helpcontext(0x0004594f)]
        HRESULT SigningInstructions([in] BSTR pbstr);
        [id(0x00000008), propget, helpcontext(0x00045950)]
        HRESULT AllowComments([out, retval] VARIANT_BOOL* pvarf);
        [id(0x00000008), propput, helpcontext(0x00045950)]
        HRESULT AllowComments([in] VARIANT_BOOL pvarf);
        [id(0x00000009), propget, helpcontext(0x00045951)]
        HRESULT ShowSignDate([out, retval] VARIANT_BOOL* pvarf);
        [id(0x00000009), propput, helpcontext(0x00045951)]
        HRESULT ShowSignDate([in] VARIANT_BOOL pvarf);
        [id(0x0000000a), propget, helpcontext(0x00045952)]
        HRESULT AdditionalXml([out, retval] BSTR* pbstr);
        [id(0x0000000a), propput, helpcontext(0x00045952)]
        HRESULT AdditionalXml([in] BSTR pbstr);
    };

    [
      odl,
      uuid(000CD6A2-0000-0000-C000-000000000046),
      helpcontext(0x00045d30),
      dual,
      oleautomation
    ]
    interface SignatureInfo : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x00045d31)]
        HRESULT ReadOnly([out, retval] VARIANT_BOOL* pvarf);
        [id(0x00000002), propget, helpcontext(0x0004594a)]
        HRESULT SignatureProvider([out, retval] BSTR* pbstrSigProv);
        [id(0x00000003), propget, helpcontext(0x00045d33)]
        HRESULT SignatureText([out, retval] BSTR* pbstr);
        [id(0x00000003), propput, helpcontext(0x00045d33)]
        HRESULT SignatureText([in] BSTR pbstr);
        [id(0x00000004), propget, helpcontext(0x00045d34)]
        HRESULT SignatureImage([out, retval] IPictureDisp** ppipictdisp);
        [id(0x00000004), propput, helpcontext(0x00045d34)]
        HRESULT SignatureImage([in] IPictureDisp* ppipictdisp);
        [id(0x00000005), propget, helpcontext(0x00045d35)]
        HRESULT SignatureComment([out, retval] BSTR* pbstr);
        [id(0x00000005), propput, helpcontext(0x00045d35)]
        HRESULT SignatureComment([in] BSTR pbstr);
        [id(0x00000006), helpcontext(0x00045d36)]
        HRESULT GetSignatureDetail(
                        [in] SignatureDetail sigdet, 
                        [out, retval] VARIANT* pvar);
        [id(0x00000007), helpcontext(0x00045d37)]
        HRESULT GetCertificateDetail(
                        [in] CertificateDetail certdet, 
                        [out, retval] VARIANT* pvar);
        [id(0x00000008), propget, helpcontext(0x00045d38)]
        HRESULT ContentVerificationResults([out, retval] ContentVerificationResults* pcontverres);
        [id(0x00000009), propget, helpcontext(0x00045d39)]
        HRESULT CertificateVerificationResults([out, retval] CertificateVerificationResults* pcertverres);
        [id(0x0000000a), propget, helpcontext(0x00045d3a)]
        HRESULT IsValid([out, retval] VARIANT_BOOL* pvarfValid);
        [id(0x0000000b), propget, helpcontext(0x00045d3b)]
        HRESULT IsCertificateExpired([out, retval] VARIANT_BOOL* pvarfExpired);
        [id(0x0000000c), propget, helpcontext(0x00045d3c)]
        HRESULT IsCertificateRevoked([out, retval] VARIANT_BOOL* pvarfRevoked);
        [id(0x0000000d), propget, helpcontext(0x00045d3d)]
        HRESULT IsCertificateUntrusted([out, retval] VARIANT_BOOL* pvarfUntrusted);
        [id(0x0000000e), helpcontext(0x00045d3e)]
        HRESULT ShowSignatureCertificate([in] IUnknown* ParentWindow);
        [id(0x0000000f), helpcontext(0x00045d3f)]
        HRESULT SelectSignatureCertificate([in] IUnknown* ParentWindow);
        [id(0x00000010), helpcontext(0x00045d40)]
        HRESULT SelectCertificateDetailByThumbprint([in] BSTR bstrThumbprint);
    };

    [
      odl,
      uuid(000CD6A3-0000-0000-C000-000000000046),
      helpcontext(0x00046118),
      dual,
      oleautomation
    ]
    interface SignatureProvider : IDispatch {
        [id(0x60020000), helpcontext(0x00046119)]
        HRESULT GenerateSignatureLineImage(
                        [in] SignatureLineImage siglnimg, 
                        [in] SignatureSetup* psigsetup, 
                        [in] SignatureInfo* psiginfo, 
                        [in] IUnknown* XmlDsigStream, 
                        [out, retval] IPictureDisp** ppipictdisp);
        [id(0x60020001), helpcontext(0x0004611a)]
        HRESULT ShowSignatureSetup(
                        [in] IUnknown* ParentWindow, 
                        [in] SignatureSetup* psigsetup);
        [id(0x60020002), helpcontext(0x0004611b)]
        HRESULT ShowSigningCeremony(
                        [in] IUnknown* ParentWindow, 
                        [in] SignatureSetup* psigsetup, 
                        [in] SignatureInfo* psiginfo);
        [id(0x60020003), helpcontext(0x0004611c)]
        HRESULT SignXmlDsig(
                        [in] IUnknown* QueryContinue, 
                        [in] SignatureSetup* psigsetup, 
                        [in] SignatureInfo* psiginfo, 
                        [in] IUnknown* XmlDsigStream);
        [id(0x60020004), helpcontext(0x0004611d)]
        HRESULT NotifySignatureAdded(
                        [in] IUnknown* ParentWindow, 
                        [in] SignatureSetup* psigsetup, 
                        [in] SignatureInfo* psiginfo);
        [id(0x60020005), helpcontext(0x0004611e)]
        HRESULT VerifyXmlDsig(
                        [in] IUnknown* QueryContinue, 
                        [in] SignatureSetup* psigsetup, 
                        [in] SignatureInfo* psiginfo, 
                        [in] IUnknown* XmlDsigStream, 
                        [in, out] ContentVerificationResults* pcontverres, 
                        [in, out] CertificateVerificationResults* pcertverres);
        [id(0x60020006), helpcontext(0x0004611f)]
        HRESULT ShowSignatureDetails(
                        [in] IUnknown* ParentWindow, 
                        [in] SignatureSetup* psigsetup, 
                        [in] SignatureInfo* psiginfo, 
                        [in] IUnknown* XmlDsigStream, 
                        [in, out] ContentVerificationResults* pcontverres, 
                        [in, out] CertificateVerificationResults* pcertverres);
        [id(0x60020007), helpcontext(0x00046120)]
        HRESULT GetProviderDetail(
                        [in] SignatureProviderDetail sigprovdet, 
                        [out, retval] VARIANT* pvar);
        [id(0x60020008), helpcontext(0x00046121)]
        HRESULT HashStream(
                        [in] IUnknown* QueryContinue, 
                        [in] IUnknown* Stream, 
                        [out, retval] SAFEARRAY(unsigned char)* ppsargb);
    };

    

    [
      odl,
      uuid(000CDB10-0000-0000-C000-000000000046),
      helpcontext(0x0004f970),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomXMLPrefixMapping : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x0004f971)]
        HRESULT Parent([out, retval] IDispatch** ppdispParent);
        [id(0x60030001), propget, helpcontext(0x0004f972)]
        HRESULT Prefix([out, retval] BSTR* pbstrPrefix);
        [id(0x60030002), propget, helpcontext(0x0004f973)]
        HRESULT NamespaceURI([out, retval] BSTR* pbstrNamespaceURI);
    };

    [
      odl,
      uuid(000CDB00-0000-0000-C000-000000000046),
      helpcontext(0x00046cd0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomXMLPrefixMappings : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x00046cd1)]
        HRESULT Parent([out, retval] IDispatch** ppdispParent);
        [id(0x60030001), propget, helpcontext(0x00046cd2)]
        HRESULT Count([out, retval] long* plCount);
        [id(00000000), propget, helpcontext(0x00046cd3)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] CustomXMLPrefixMapping** ppPrefixMapping);
        [id(0x60030003), helpcontext(0x00046cd4)]
        HRESULT AddNamespace(
                        [in] BSTR Prefix, 
                        [in] BSTR NamespaceURI);
        [id(0x60030004), helpcontext(0x00046cd5)]
        HRESULT LookupNamespace(
                        [in] BSTR Prefix, 
                        [out, retval] BSTR* pbstrNamespaceURI);
        [id(0x60030005), helpcontext(0x00046cd6)]
        HRESULT LookupPrefix(
                        [in] BSTR NamespaceURI, 
                        [out, retval] BSTR* pbstrPrefix);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
    };

    [
      odl,
      uuid(000CDB01-0000-0000-C000-000000000046),
      helpcontext(0x000470b8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomXMLSchema : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x000470b9)]
        HRESULT Parent([out, retval] IDispatch** ppdispParent);
        [id(0x60030001), propget, helpcontext(0x000470ba)]
        HRESULT Location([out, retval] BSTR* pbstrLocation);
        [id(0x60030002), propget, helpcontext(0x000470bb)]
        HRESULT NamespaceURI([out, retval] BSTR* pbstrNamespaceURI);
        [id(0x60030003), helpcontext(0x000470bc)]
        HRESULT Delete();
        [id(0x60030004), helpcontext(0x000470bd)]
        HRESULT Reload();
    };

    [
      odl,
      uuid(000CDB02-0000-0000-C000-000000000046),
      helpcontext(0x000474a0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface _CustomXMLSchemaCollection : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x000474a1)]
        HRESULT Parent([out, retval] IDispatch** ppdispParent);
        [id(0x60030001), propget, helpcontext(0x000474a2)]
        HRESULT Count([out, retval] long* plCount);
        [id(00000000), propget, helpcontext(0x000474a3)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] CustomXMLSchema** ppSchema);
        [id(0x60030003), propget, helpcontext(0x000474a4)]
        HRESULT NamespaceURI(
                        [in] long Index, 
                        [out, retval] BSTR* pbstrNamespaceURI);
        [id(0x60030004), helpcontext(0x000474a5)]
        HRESULT Add(
                        [in, optional, defaultvalue("")] BSTR NamespaceURI, 
                        [in, optional, defaultvalue("")] BSTR Alias, 
                        [in, optional, defaultvalue("")] BSTR FileName, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL InstallForAllUsers, 
                        [out, retval] CustomXMLSchema** ppSchema);
        [id(0x60030005), helpcontext(0x000474a6)]
        HRESULT AddCollection([in] _CustomXMLSchemaCollection* SchemaCollection);
        [id(0x60030006), helpcontext(0x000474a7)]
        HRESULT Validate([out, retval] VARIANT_BOOL* pfResult);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
    };

    [
      uuid(000CDB0D-0000-0000-C000-000000000046),
      helpcontext(0x0004ab50)
    ]
    coclass CustomXMLSchemaCollection {
        [default] interface _CustomXMLSchemaCollection;
    };

    [
      odl,
      uuid(000CDB03-0000-0000-C000-000000000046),
      helpcontext(0x00047888),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomXMLNodes : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x00047889)]
        HRESULT Parent([out, retval] IDispatch** ppdispParent);
        [id(0x60030001), propget, helpcontext(0x0004788a)]
        HRESULT Count([out, retval] long* plCount);
        [id(00000000), propget, helpcontext(0x0004788b)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] CustomXMLNode** ppNode);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
    };

    [
      odl,
      uuid(000CDB04-0000-0000-C000-000000000046),
      helpcontext(0x00047c70),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomXMLNode : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x00047c71)]
        HRESULT Parent([out, retval] IDispatch** ppdispParent);
        [id(0x60030001), propget, helpcontext(0x00047c72)]
        HRESULT Attributes([out, retval] CustomXMLNodes** ppAttributes);
        [id(0x60030002), propget, helpcontext(0x00047c73)]
        HRESULT BaseName([out, retval] BSTR* pbstrBaseName);
        [id(0x60030003), propget, helpcontext(0x00047c74)]
        HRESULT ChildNodes([out, retval] CustomXMLNodes** ppChildNodes);
        [id(0x60030004), propget, helpcontext(0x00047c75)]
        HRESULT FirstChild([out, retval] CustomXMLNode** ppFirstChild);
        [id(0x60030005), propget, helpcontext(0x00047c76)]
        HRESULT LastChild([out, retval] CustomXMLNode** ppLastChild);
        [id(0x60030006), propget, helpcontext(0x00047c77)]
        HRESULT NamespaceURI([out, retval] BSTR* pbstrNamespaceURI);
        [id(0x60030007), propget, helpcontext(0x00047c78)]
        HRESULT NextSibling([out, retval] CustomXMLNode** ppNextSibling);
        [id(0x60030008), propget, helpcontext(0x00047c79)]
        HRESULT NodeType([out, retval] MsoCustomXMLNodeType* pNodeType);
        [id(0x60030009), propget, helpcontext(0x00047c7a)]
        HRESULT NodeValue([out, retval] BSTR* pbstrNodeValue);
        [id(0x60030009), propput, helpcontext(0x00047c7a)]
        HRESULT NodeValue([in] BSTR pbstrNodeValue);
        [id(0x6003000b), propget, helpcontext(0x00047c7b)]
        HRESULT OwnerDocument([out, retval] IDispatch** ppdispDoc);
        [id(0x6003000c), propget, helpcontext(0x00047c7c)]
        HRESULT OwnerPart([out, retval] _CustomXMLPart** ppOwnerPart);
        [id(0x6003000d), propget, helpcontext(0x00047c7d)]
        HRESULT PreviousSibling([out, retval] CustomXMLNode** ppPreviousSibling);
        [id(0x6003000e), propget, helpcontext(0x00047c7e)]
        HRESULT ParentNode([out, retval] CustomXMLNode** ppParentNode);
        [id(0x6003000f), propget, helpcontext(0x00047c7f)]
        HRESULT Text([out, retval] BSTR* pbstrText);
        [id(0x6003000f), propput, helpcontext(0x00047c7f)]
        HRESULT Text([in] BSTR pbstrText);
        [id(0x60030011), propget, helpcontext(0x00047c80)]
        HRESULT XPath([out, retval] BSTR* pbstrXPath);
        [id(0x60030012), propget, helpcontext(0x00047c82)]
        HRESULT XML([out, retval] BSTR* pbstrXML);
        [id(0x60030013), helpcontext(0x00047c83)]
        HRESULT AppendChildNode(
                        [in, optional, defaultvalue("")] BSTR Name, 
                        [in, optional, defaultvalue("")] BSTR NamespaceURI, 
                        [in, optional, defaultvalue(1)] MsoCustomXMLNodeType NodeType, 
                        [in, optional, defaultvalue("")] BSTR NodeValue);
        [id(0x60030014), helpcontext(0x00047c84)]
        HRESULT AppendChildSubtree([in] BSTR XML);
        [id(0x60030015), helpcontext(0x00047c85)]
        HRESULT Delete();
        [id(0x60030016), helpcontext(0x00047c86)]
        HRESULT HasChildNodes([out, retval] VARIANT_BOOL* pfHasChildNodes);
        [id(0x60030017), helpcontext(0x00047c87)]
        HRESULT InsertNodeBefore(
                        [in, optional, defaultvalue("")] BSTR Name, 
                        [in, optional, defaultvalue("")] BSTR NamespaceURI, 
                        [in, optional, defaultvalue(1)] MsoCustomXMLNodeType NodeType, 
                        [in, optional, defaultvalue("")] BSTR NodeValue, 
                        [in, optional, defaultvalue(0)] CustomXMLNode* NextSibling);
        [id(0x60030018), helpcontext(0x00047c88)]
        HRESULT InsertSubtreeBefore(
                        [in] BSTR XML, 
                        [in, optional, defaultvalue(0)] CustomXMLNode* NextSibling);
        [id(0x60030019), helpcontext(0x00047c89)]
        HRESULT RemoveChild([in] CustomXMLNode* Child);
        [id(0x6003001a), helpcontext(0x00047c8a)]
        HRESULT ReplaceChildNode(
                        [in] CustomXMLNode* OldNode, 
                        [in, optional, defaultvalue("")] BSTR Name, 
                        [in, optional, defaultvalue("")] BSTR NamespaceURI, 
                        [in, optional, defaultvalue(1)] MsoCustomXMLNodeType NodeType, 
                        [in, optional, defaultvalue("")] BSTR NodeValue);
        [id(0x6003001b), helpcontext(0x00047c8b)]
        HRESULT ReplaceChildSubtree(
                        [in] BSTR XML, 
                        [in] CustomXMLNode* OldNode);
        [id(0x6003001c), helpcontext(0x00047c8c)]
        HRESULT SelectNodes(
                        [in] BSTR XPath, 
                        [out, retval] CustomXMLNodes** ppNodes);
        [id(0x6003001d), helpcontext(0x00047c8d)]
        HRESULT SelectSingleNode(
                        [in] BSTR XPath, 
                        [out, retval] CustomXMLNode** ppNode);
    };

    [
      odl,
      uuid(000CDB0E-0000-0000-C000-000000000046),
      helpcontext(0x0004af38),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomXMLValidationError : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x0004af39)]
        HRESULT Parent([out, retval] IDispatch** ppdispParent);
        [id(0x60030001), propget, helpcontext(0x0004af3a)]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x60030002), propget, helpcontext(0x0004af3b)]
        HRESULT Node([out, retval] CustomXMLNode** ppNode);
        [id(0x60030003), propget, helpcontext(0x0004af3c)]
        HRESULT Text([out, retval] BSTR* pbstrText);
        [id(0x60030004), propget, helpcontext(0x0004af3d)]
        HRESULT Type([out, retval] MsoCustomXMLValidationErrorType* pErrorType);
        [id(0x60030005), helpcontext(0x0004af3e)]
        HRESULT Delete();
        [id(0x60030006), propget, helpcontext(0x0004af3f)]
        HRESULT ErrorCode([out, retval] long* plErrorCode);
    };

    [
      odl,
      uuid(000CDB0F-0000-0000-C000-000000000046),
      helpcontext(0x0004b320),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomXMLValidationErrors : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x0004b321)]
        HRESULT Parent([out, retval] IDispatch** ppdispParent);
        [id(0x60030001), propget, helpcontext(0x0004b322)]
        HRESULT Count([out, retval] long* plCount);
        [id(00000000), propget, helpcontext(0x0004b323)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] CustomXMLValidationError** ppError);
        [id(0x60030003), helpcontext(0x0004b324)]
        HRESULT Add(
                        [in] CustomXMLNode* Node, 
                        [in] BSTR ErrorName, 
                        [in, optional, defaultvalue("")] BSTR ErrorText, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL ClearedOnUpdate);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
    };

    [
      odl,
      uuid(000CDB05-0000-0000-C000-000000000046),
      helpcontext(0x00048058),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _CustomXMLPart : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x00048059)]
        HRESULT Parent([out, retval] IDispatch** ppdispParent);
        [id(0x60030001), propget, helpcontext(0x0004805a)]
        HRESULT DocumentElement([out, retval] CustomXMLNode** ppDocumentElement);
        [id(0x60030002), propget, helpcontext(0x0004805b)]
        HRESULT Id([out, retval] BSTR* pbstrID);
        [id(0x60030003), propget, helpcontext(0x0004805c)]
        HRESULT NamespaceURI([out, retval] BSTR* pbstrNamespaceURI);
        [id(0x60030004), propget, helpcontext(0x0004805d)]
        HRESULT SchemaCollection([out, retval] _CustomXMLSchemaCollection** ppSchemaCollection);
        [id(0x60030004), propput, helpcontext(0x0004805d)]
        HRESULT SchemaCollection([in] _CustomXMLSchemaCollection* ppSchemaCollection);
        [id(0x60030006), propget, helpcontext(0x0004805e)]
        HRESULT NamespaceManager([out, retval] CustomXMLPrefixMappings** ppPrefixMappings);
        [id(0x60030007), propget, helpcontext(0x0004805f)]
        HRESULT XML([out, retval] BSTR* pbstrXML);
        [id(0x60030008), helpcontext(0x00048060)]
        HRESULT AddNode(
                        [in] CustomXMLNode* Parent, 
                        [in, optional, defaultvalue("")] BSTR Name, 
                        [in, optional, defaultvalue("")] BSTR NamespaceURI, 
                        [in, optional, defaultvalue(0)] CustomXMLNode* NextSibling, 
                        [in, optional, defaultvalue(1)] MsoCustomXMLNodeType NodeType, 
                        [in, optional, defaultvalue("")] BSTR NodeValue);
        [id(0x60030009), helpcontext(0x00048061)]
        HRESULT Delete();
        [id(0x6003000a), helpcontext(0x00048062)]
        HRESULT Load(
                        [in] BSTR FilePath, 
                        [out, retval] VARIANT_BOOL* pfRet);
        [id(0x6003000b), helpcontext(0x00048063)]
        HRESULT LoadXML(
                        [in] BSTR XML, 
                        [out, retval] VARIANT_BOOL* pfRet);
        [id(0x6003000c), helpcontext(0x00048064)]
        HRESULT SelectNodes(
                        [in] BSTR XPath, 
                        [out, retval] CustomXMLNodes** ppNodes);
        [id(0x6003000d), helpcontext(0x00048065)]
        HRESULT SelectSingleNode(
                        [in] BSTR XPath, 
                        [out, retval] CustomXMLNode** ppNode);
        [id(0x6003000e), propget, helpcontext(0x00048066)]
        HRESULT Errors([out, retval] CustomXMLValidationErrors** ppErrors);
        [id(0x6003000f), propget, helpcontext(0x00048067)]
        HRESULT BuiltIn([out, retval] VARIANT_BOOL* pfRet);
    };

    [
      odl,
      uuid(000CDB06-0000-0000-C000-000000000046),
      helpcontext(0x00048440),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ICustomXMLPartEvents : IDispatch {
        [id(0x00000001), helpcontext(0x00048441)]
        void NodeAfterInsert(
                        [in] CustomXMLNode* NewNode, 
                        [in] VARIANT_BOOL InUndoRedo);
        [id(0x00000002), helpcontext(0x00048442)]
        void NodeAfterDelete(
                        [in] CustomXMLNode* OldNode, 
                        [in] CustomXMLNode* OldParentNode, 
                        [in] CustomXMLNode* OldNextSibling, 
                        [in] VARIANT_BOOL InUndoRedo);
        [id(0x00000003), helpcontext(0x00048443)]
        void NodeAfterReplace(
                        [in] CustomXMLNode* OldNode, 
                        [in] CustomXMLNode* NewNode, 
                        [in] VARIANT_BOOL InUndoRedo);
    };

    [
      uuid(000CDB07-0000-0000-C000-000000000046),
      hidden
    ]
    dispinterface _CustomXMLPartEvents {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000001), helpcontext(0x00048441)]
            void NodeAfterInsert(
                            [in] CustomXMLNode* NewNode, 
                            [in] VARIANT_BOOL InUndoRedo);
            [id(0x00000002), helpcontext(0x00048442)]
            void NodeAfterDelete(
                            [in] CustomXMLNode* OldNode, 
                            [in] CustomXMLNode* OldParentNode, 
                            [in] CustomXMLNode* OldNextSibling, 
                            [in] VARIANT_BOOL InUndoRedo);
            [id(0x00000003), helpcontext(0x00048443)]
            void NodeAfterReplace(
                            [in] CustomXMLNode* OldNode, 
                            [in] CustomXMLNode* NewNode, 
                            [in] VARIANT_BOOL InUndoRedo);
    };

    [
      uuid(000CDB08-0000-0000-C000-000000000046),
      helpcontext(0x00048828),
      noncreatable
    ]
    coclass CustomXMLPart {
        [default] interface _CustomXMLPart;
        [default, source] dispinterface _CustomXMLPartEvents;
    };

    [
      odl,
      uuid(000CDB09-0000-0000-C000-000000000046),
      helpcontext(0x00048c10),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _CustomXMLParts : _IMsoDispObj {
        [id(0x60030000), propget, helpcontext(0x00048c11)]
        HRESULT Parent([out, retval] IDispatch** ppdispParent);
        [id(0x60030001), propget, helpcontext(0x00048c12)]
        HRESULT Count([out, retval] long* plCount);
        [id(00000000), propget, helpcontext(0x00048c13)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] _CustomXMLPart** ppPart);
        [id(0x60030003), helpcontext(0x00048c14)]
        HRESULT Add(
                        [in, optional, defaultvalue("")] BSTR XML, 
                        [in, optional] VARIANT SchemaCollection, 
                        [out, retval] _CustomXMLPart** ppPart);
        [id(0x60030004), helpcontext(0x00048c15)]
        HRESULT SelectByID(
                        [in] BSTR Id, 
                        [out, retval] _CustomXMLPart** ppPart);
        [id(0x60030005), helpcontext(0x00048c16)]
        HRESULT SelectByNamespace(
                        [in] BSTR NamespaceURI, 
                        [out, retval] _CustomXMLParts** ppParts);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
    };

    [
      odl,
      uuid(000CDB0A-0000-0000-C000-000000000046),
      helpcontext(0x00048ff8),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ICustomXMLPartsEvents : IDispatch {
        [id(0x00000001), helpcontext(0x00048ff9)]
        void PartAfterAdd([in] _CustomXMLPart* NewPart);
        [id(0x00000002), helpcontext(0x00048ffa)]
        void PartBeforeDelete([in] _CustomXMLPart* OldPart);
        [id(0x00000003), helpcontext(0x00048ffb)]
        void PartAfterLoad([in] _CustomXMLPart* Part);
    };

    [
      uuid(000CDB0B-0000-0000-C000-000000000046),
      hidden
    ]
    dispinterface _CustomXMLPartsEvents {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000001), helpcontext(0x00048ff9)]
            void PartAfterAdd([in] _CustomXMLPart* NewPart);
            [id(0x00000002), helpcontext(0x00048ffa)]
            void PartBeforeDelete([in] _CustomXMLPart* OldPart);
            [id(0x00000003), helpcontext(0x00048ffb)]
            void PartAfterLoad([in] _CustomXMLPart* Part);
    };

    [
      uuid(000CDB0C-0000-0000-C000-000000000046),
      helpcontext(0x000493e0),
      noncreatable
    ]
    coclass CustomXMLParts {
        [default] interface _CustomXMLParts;
        [default, source] dispinterface _CustomXMLPartsEvents;
    };

    

    [
      odl,
      uuid(000C03BF-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface GradientStop : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Color([out, retval] ColorFormat** Color);
        [id(0x00000002), propget]
        HRESULT Position([out, retval] long*  Position);
        [id(0x00000002), propput]
        HRESULT Position([in] long Position);
        [id(0x00000003), propget]
        HRESULT Transparency([out, retval] long*  Transparency);
        [id(0x00000003), propput]
        HRESULT Transparency([in] long Transparency);
    };

    [
      odl,
      uuid(000C03C0-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface GradientStops : _IMsoDispObj {
        [id(00000000), propget]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] GradientStop** Item);
        [id(0x00000002), propget]
        HRESULT Count([out, retval] int* Count);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(0x0000000a)]
        HRESULT Delete([in, optional, defaultvalue(-1)] int Index);
        [id(0x0000000b)]
        HRESULT Insert(
                        [in] MsoRGBType RGB, 
                        [in] long Position, 
                        [in, optional, defaultvalue(0)] long Transparency, 
                        [in, optional, defaultvalue(-1)] int Index);
        [id(0x0000000c)]
        HRESULT Insert2(
                        [in] MsoRGBType RGB, 
                        [in] long Position, 
                        [in, optional, defaultvalue(0)] long Transparency, 
                        [in, optional, defaultvalue(-1)] int Index, 
                        [in, optional, defaultvalue(0)] long Brightness);
    };

    

    [
      odl,
      uuid(000C03BC-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SoftEdgeFormat : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Type([out, retval] MsoSoftEdgeType* Type);
        [id(0x00000001), propput]
        HRESULT Type([in] MsoSoftEdgeType Type);
        [id(0x00000002), propget]
        HRESULT Radius([out, retval] long*  Radius);
        [id(0x00000002), propput]
        HRESULT Radius([in] long Radius);
    };

    [
      odl,
      uuid(000C03BD-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface GlowFormat : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Radius([out, retval] long*  Radius);
        [id(0x00000001), propput]
        HRESULT Radius([in] long Radius);
        [id(0x00000002), propget]
        HRESULT Color([out, retval] ColorFormat** Color);
        [id(0x00000003), propget]
        HRESULT Transparency([out, retval] long*  Transparency);
        [id(0x00000003), propput]
        HRESULT Transparency([in] long Transparency);
    };

    [
      odl,
      uuid(000C03BE-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ReflectionFormat : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Type([out, retval] MsoReflectionType* Type);
        [id(0x00000001), propput]
        HRESULT Type([in] MsoReflectionType Type);
        [id(0x00000002), propget]
        HRESULT Transparency([out, retval] long*  Transparency);
        [id(0x00000002), propput]
        HRESULT Transparency([in] long Transparency);
        [id(0x00000003), propget]
        HRESULT Size([out, retval] long*  Size);
        [id(0x00000003), propput]
        HRESULT Size([in] long Size);
        [id(0x00000004), propget]
        HRESULT Offset([out, retval] long*  Offset);
        [id(0x00000004), propput]
        HRESULT Offset([in] long Offset);
        [id(0x00000005), propget]
        HRESULT Blur([out, retval] long*  Blur);
        [id(0x00000005), propput]
        HRESULT Blur([in] long Blur);
    };

    [
      odl,
      uuid(000C0399-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ParagraphFormat2 : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Alignment([out, retval] MsoParagraphAlignment* Alignment);
        [id(0x00000002), propput]
        HRESULT Alignment([in] MsoParagraphAlignment Alignment);
        [id(0x00000003), propget]
        HRESULT BaselineAlignment([out, retval] MsoBaselineAlignment* BaselineAlignment);
        [id(0x00000003), propput]
        HRESULT BaselineAlignment([in] MsoBaselineAlignment BaselineAlignment);
        [id(0x00000004), propget]
        HRESULT Bullet([out, retval] BulletFormat2** Bullet);
        [id(0x00000005), propget]
        HRESULT FarEastLineBreakLevel([out, retval] MsoTriState* Break);
        [id(0x00000005), propput]
        HRESULT FarEastLineBreakLevel([in] MsoTriState Break);
        [id(0x00000006), propget]
        HRESULT FirstLineIndent([out, retval] long*  Indent);
        [id(0x00000006), propput]
        HRESULT FirstLineIndent([in] long Indent);
        [id(0x00000007), propget]
        HRESULT HangingPunctuation([out, retval] MsoTriState* Hanging);
        [id(0x00000007), propput]
        HRESULT HangingPunctuation([in] MsoTriState Hanging);
        [id(0x00000008), propget]
        HRESULT IndentLevel([out, retval] int* Level);
        [id(0x00000008), propput]
        HRESULT IndentLevel([in] int Level);
        [id(0x00000009), propget]
        HRESULT LeftIndent([out, retval] long*  Indent);
        [id(0x00000009), propput]
        HRESULT LeftIndent([in] long Indent);
        [id(0x0000000a), propget]
        HRESULT LineRuleAfter([out, retval] MsoTriState* LineRule);
        [id(0x0000000a), propput]
        HRESULT LineRuleAfter([in] MsoTriState LineRule);
        [id(0x0000000b), propget]
        HRESULT LineRuleBefore([out, retval] MsoTriState* LineRule);
        [id(0x0000000b), propput]
        HRESULT LineRuleBefore([in] MsoTriState LineRule);
        [id(0x0000000c), propget]
        HRESULT LineRuleWithin([out, retval] MsoTriState* LineRule);
        [id(0x0000000c), propput]
        HRESULT LineRuleWithin([in] MsoTriState LineRule);
        [id(0x0000000d), propget]
        HRESULT RightIndent([out, retval] long*  Indent);
        [id(0x0000000d), propput]
        HRESULT RightIndent([in] long Indent);
        [id(0x0000000e), propget]
        HRESULT SpaceAfter([out, retval] long*  Space);
        [id(0x0000000e), propput]
        HRESULT SpaceAfter([in] long Space);
        [id(0x0000000f), propget]
        HRESULT SpaceBefore([out, retval] long*  Space);
        [id(0x0000000f), propput]
        HRESULT SpaceBefore([in] long Space);
        [id(0x00000010), propget]
        HRESULT SpaceWithin([out, retval] long*  Space);
        [id(0x00000010), propput]
        HRESULT SpaceWithin([in] long Space);
        [id(0x00000011), propget]
        HRESULT TabStops([out, retval] TabStops2** TabStops);
        [id(0x00000012), propget]
        HRESULT TextDirection([out, retval] MsoTextDirection* Direction);
        [id(0x00000012), propput]
        HRESULT TextDirection([in] MsoTextDirection Direction);
        [id(0x00000013), propget]
        HRESULT WordWrap([out, retval] MsoTriState* WordWrap);
        [id(0x00000013), propput]
        HRESULT WordWrap([in] MsoTriState WordWrap);
    };

    [
      odl,
      uuid(000C039A-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Font2 : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Bold([out, retval] MsoTriState* Bold);
        [id(0x00000002), propput]
        HRESULT Bold([in] MsoTriState Bold);
        [id(0x00000003), propget]
        HRESULT Italic([out, retval] MsoTriState* Italic);
        [id(0x00000003), propput]
        HRESULT Italic([in] MsoTriState Italic);
        [id(0x00000004), propget]
        HRESULT Strike([out, retval] MsoTextStrike* Strike);
        [id(0x00000004), propput]
        HRESULT Strike([in] MsoTextStrike Strike);
        [id(0x00000005), propget]
        HRESULT Caps([out, retval] MsoTextCaps* Caps);
        [id(0x00000005), propput]
        HRESULT Caps([in] MsoTextCaps Caps);
        [id(0x00000006), propget]
        HRESULT AutorotateNumbers([out, retval] MsoTriState* RotateNumbers);
        [id(0x00000006), propput]
        HRESULT AutorotateNumbers([in] MsoTriState RotateNumbers);
        [id(0x00000007), propget]
        HRESULT BaselineOffset([out, retval] long*  Offset);
        [id(0x00000007), propput]
        HRESULT BaselineOffset([in] long Offset);
        [id(0x00000008), propget]
        HRESULT Kerning([out, retval] long*  KerningSize);
        [id(0x00000008), propput]
        HRESULT Kerning([in] long KerningSize);
        [id(0x00000009), propget]
        HRESULT Size([out, retval] long*  Size);
        [id(0x00000009), propput]
        HRESULT Size([in] long Size);
        [id(0x0000000a), propget]
        HRESULT Spacing([out, retval] long*  Spacing);
        [id(0x0000000a), propput]
        HRESULT Spacing([in] long Spacing);
        [id(0x0000000b), propget]
        HRESULT UnderlineStyle([out, retval] MsoTextUnderlineType* Style);
        [id(0x0000000b), propput]
        HRESULT UnderlineStyle([in] MsoTextUnderlineType Style);
        [id(0x0000000c), propget]
        HRESULT Allcaps([out, retval] MsoTriState* Allcaps);
        [id(0x0000000c), propput]
        HRESULT Allcaps([in] MsoTriState Allcaps);
        [id(0x0000000d), propget]
        HRESULT DoubleStrikeThrough([out, retval] MsoTriState* DoubleStrikeThrough);
        [id(0x0000000d), propput]
        HRESULT DoubleStrikeThrough([in] MsoTriState DoubleStrikeThrough);
        [id(0x0000000e), propget]
        HRESULT Equalize([out, retval] MsoTriState* Equalize);
        [id(0x0000000e), propput]
        HRESULT Equalize([in] MsoTriState Equalize);
        [id(0x0000000f), propget]
        HRESULT Fill([out, retval] FillFormat** Fill);
        [id(0x00000010), propget]
        HRESULT Glow([out, retval] GlowFormat** Glow);
        [id(0x00000011), propget]
        HRESULT Reflection([out, retval] ReflectionFormat** Reflection);
        [id(0x00000012), propget]
        HRESULT Line([out, retval] LineFormat** Line);
        [id(0x00000013), propget]
        HRESULT Shadow([out, retval] ShadowFormat** Shadow);
        [id(0x00000014), propget]
        HRESULT Highlight([out, retval] ColorFormat** Highlight);
        [id(0x00000015), propget]
        HRESULT UnderlineColor([out, retval] ColorFormat** UnderlineColor);
        [id(0x00000016), propget]
        HRESULT Smallcaps([out, retval] MsoTriState* Smallcaps);
        [id(0x00000016), propput]
        HRESULT Smallcaps([in] MsoTriState Smallcaps);
        [id(0x00000017), propget]
        HRESULT SoftEdgeFormat([out, retval] MsoSoftEdgeType* SoftEdgeFormat);
        [id(0x00000017), propput]
        HRESULT SoftEdgeFormat([in] MsoSoftEdgeType SoftEdgeFormat);
        [id(0x00000018), propget]
        HRESULT StrikeThrough([out, retval] MsoTriState* StrikeThrough);
        [id(0x00000018), propput]
        HRESULT StrikeThrough([in] MsoTriState StrikeThrough);
        [id(0x00000019), propget]
        HRESULT Subscript([out, retval] MsoTriState* Subscript);
        [id(0x00000019), propput]
        HRESULT Subscript([in] MsoTriState Subscript);
        [id(0x0000001a), propget]
        HRESULT Superscript([out, retval] MsoTriState* Superscript);
        [id(0x0000001a), propput]
        HRESULT Superscript([in] MsoTriState Superscript);
        [id(0x0000001b), propget]
        HRESULT WordArtformat([out, retval] MsoPresetTextEffect* WordArtformat);
        [id(0x0000001b), propput]
        HRESULT WordArtformat([in] MsoPresetTextEffect WordArtformat);
        [id(0x0000001c), propget]
        HRESULT Embeddable([out, retval] MsoTriState* Embeddable);
        [id(0x0000001d), propget]
        HRESULT Embedded([out, retval] MsoTriState* Embedded);
        [id(0x0000001e), propget]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x0000001e), propput]
        HRESULT Name([in] BSTR Name);
        [id(0x0000001f), propget]
        HRESULT NameAscii([out, retval] BSTR* NameAscii);
        [id(0x0000001f), propput]
        HRESULT NameAscii([in] BSTR NameAscii);
        [id(0x00000020), propget]
        HRESULT NameComplexScript([out, retval] BSTR* NameComplexScript);
        [id(0x00000020), propput]
        HRESULT NameComplexScript([in] BSTR NameComplexScript);
        [id(0x00000021), propget]
        HRESULT NameFarEast([out, retval] BSTR* NameFarEast);
        [id(0x00000021), propput]
        HRESULT NameFarEast([in] BSTR NameFarEast);
        [id(0x00000022), propget]
        HRESULT NameOther([out, retval] BSTR* NameOther);
        [id(0x00000022), propput]
        HRESULT NameOther([in] BSTR NameOther);
    };

    [
      odl,
      uuid(000C03B2-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextColumn2 : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Number([out, retval] int* Number);
        [id(0x00000001), propput]
        HRESULT Number([in] int Number);
        [id(0x00000002), propget]
        HRESULT Spacing([out, retval] long*  Spacing);
        [id(0x00000002), propput]
        HRESULT Spacing([in] long Spacing);
        [id(0x00000003), propget]
        HRESULT TextDirection([out, retval] MsoTextDirection* Direction);
        [id(0x00000003), propput]
        HRESULT TextDirection([in] MsoTextDirection Direction);
    };

    [
      odl,
      uuid(000C0397-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextRange2 : _IMsoDispObj {
        [id(00000000), propget]
        HRESULT Text([out, retval] BSTR* pbstrText);
        [id(00000000), propput]
        HRESULT Text([in] BSTR pbstrText);
        [id(0x00000001), propget]
        HRESULT Count([out, retval] int* Count);
        [id(0x00000002)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] TextRange2** Item);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(0x00000003), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000004), propget]
        HRESULT Paragraphs(
                        [in, optional, defaultvalue(-1)] int Start, 
                        [in, optional, defaultvalue(-1)] int Length, 
                        [out, retval] TextRange2** Range);
        [id(0x00000005), propget]
        HRESULT Sentences(
                        [in, optional, defaultvalue(-1)] int Start, 
                        [in, optional, defaultvalue(-1)] int Length, 
                        [out, retval] TextRange2** Range);
        [id(0x00000006), propget]
        HRESULT Words(
                        [in, optional, defaultvalue(-1)] int Start, 
                        [in, optional, defaultvalue(-1)] int Length, 
                        [out, retval] TextRange2** Range);
        [id(0x00000007), propget]
        HRESULT Characters(
                        [in, optional, defaultvalue(-1)] int Start, 
                        [in, optional, defaultvalue(-1)] int Length, 
                        [out, retval] TextRange2** Range);
        [id(0x00000008), propget]
        HRESULT Lines(
                        [in, optional, defaultvalue(-1)] int Start, 
                        [in, optional, defaultvalue(-1)] int Length, 
                        [out, retval] TextRange2** Range);
        [id(0x00000009), propget]
        HRESULT Runs(
                        [in, optional, defaultvalue(-1)] int Start, 
                        [in, optional, defaultvalue(-1)] int Length, 
                        [out, retval] TextRange2** Range);
        [id(0x0000000a), propget]
        HRESULT ParagraphFormat([out, retval] ParagraphFormat2** Format);
        [id(0x0000000b), propget]
        HRESULT Font([out, retval] Font2** Font);
        [id(0x0000000c), propget]
        HRESULT Length([out, retval] int* Length);
        [id(0x0000000d), propget]
        HRESULT Start([out, retval] int* Start);
        [id(0x0000000e), propget]
        HRESULT BoundLeft([out, retval] long*  BoundLeft);
        [id(0x0000000f), propget]
        HRESULT BoundTop([out, retval] long*  BoundTop);
        [id(0x00000010), propget]
        HRESULT BoundWidth([out, retval] long*  BoundWidth);
        [id(0x00000011), propget]
        HRESULT BoundHeight([out, retval] long*  BoundHeight);
        [id(0x00000012)]
        HRESULT TrimText([out, retval] TextRange2** TrimText);
        [id(0x00000013)]
        HRESULT InsertAfter(
                        [in, optional, defaultvalue("")] BSTR NewText, 
                        [out, retval] TextRange2** TextRange);
        [id(0x00000014)]
        HRESULT InsertBefore(
                        [in, optional, defaultvalue("")] BSTR NewText, 
                        [out, retval] TextRange2** TextRange);
        [id(0x00000015)]
        HRESULT InsertSymbol(
                        [in] BSTR FontName, 
                        [in] int CharNumber, 
                        [in, optional, defaultvalue(0)] MsoTriState Unicode, 
                        [out, retval] TextRange2** TextRange);
        [id(0x00000016)]
        HRESULT Select();
        [id(0x00000017)]
        HRESULT Cut();
        [id(0x00000018)]
        HRESULT Copy();
        [id(0x00000019)]
        HRESULT Delete();
        [id(0x0000001a)]
        HRESULT Paste([out, retval] TextRange2** TextRange);
        [id(0x0000001b)]
        HRESULT PasteSpecial(
                        [in] MsoClipboardFormat Format, 
                        [out, retval] TextRange2** TextRange);
        [id(0x0000001c)]
        HRESULT ChangeCase([in] MsoTextChangeCase Type);
        [id(0x0000001d)]
        HRESULT AddPeriods();
        [id(0x0000001e)]
        HRESULT RemovePeriods();
        [id(0x0000001f)]
        HRESULT Find(
                        [in] BSTR FindWhat, 
                        [in, optional, defaultvalue(0)] int After, 
                        [in, optional, defaultvalue(0)] MsoTriState MatchCase, 
                        [in, optional, defaultvalue(0)] MsoTriState WholeWords, 
                        [out, retval] TextRange2** TextRange);
        [id(0x00000020)]
        HRESULT Replace(
                        [in] BSTR FindWhat, 
                        [in] BSTR ReplaceWhat, 
                        [in, optional, defaultvalue(0)] int After, 
                        [in, optional, defaultvalue(0)] MsoTriState MatchCase, 
                        [in, optional, defaultvalue(0)] MsoTriState WholeWords, 
                        [out, retval] TextRange2** TextRange);
        [id(0x00000021)]
        HRESULT RotatedBounds(
                        [out] long*  X1, 
                        [out] long*  Y1, 
                        [out] long*  X2, 
                        [out] long*  Y2, 
                        [out] long*  X3, 
                        [out] long*  Y3, 
                        [out] long*  x4, 
                        [out] long*  y4);
        [id(0x00000022), propget]
        HRESULT LanguageID([out, retval] MsoLanguageID* LanguageID);
        [id(0x00000022), propput]
        HRESULT LanguageID([in] MsoLanguageID LanguageID);
        [id(0x00000023)]
        HRESULT RtlRun();
        [id(0x00000024)]
        HRESULT LtrRun();
        [id(0x00000025), propget]
        HRESULT MathZones(
                        [in, optional, defaultvalue(-1)] int Start, 
                        [in, optional, defaultvalue(-1)] int Length, 
                        [out, retval] TextRange2** Range);
        [id(0x00000026)]
        HRESULT InsertChartField(
                        [in] MsoChartFieldType ChartFieldType, 
                        [in, optional, defaultvalue("")] BSTR Formula, 
                        [in, optional, defaultvalue(-1)] int Position, 
                        [out, retval] TextRange2** Range);
    };

    [
      odl,
      uuid(000C0398-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextFrame2 : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000064), propget]
        HRESULT MarginBottom([out, retval] long*  MarginBottom);
        [id(0x00000064), propput]
        HRESULT MarginBottom([in] long MarginBottom);
        [id(0x00000065), propget]
        HRESULT MarginLeft([out, retval] long*  MarginLeft);
        [id(0x00000065), propput]
        HRESULT MarginLeft([in] long MarginLeft);
        [id(0x00000066), propget]
        HRESULT MarginRight([out, retval] long*  MarginRight);
        [id(0x00000066), propput]
        HRESULT MarginRight([in] long MarginRight);
        [id(0x00000067), propget]
        HRESULT MarginTop([out, retval] long*  MarginTop);
        [id(0x00000067), propput]
        HRESULT MarginTop([in] long MarginTop);
        [id(0x00000068), propget]
        HRESULT Orientation([out, retval] MsoTextOrientation* Orientation);
        [id(0x00000068), propput]
        HRESULT Orientation([in] MsoTextOrientation Orientation);
        [id(0x00000069), propget]
        HRESULT HorizontalAnchor([out, retval] MsoHorizontalAnchor* HorizontalAnchor);
        [id(0x00000069), propput]
        HRESULT HorizontalAnchor([in] MsoHorizontalAnchor HorizontalAnchor);
        [id(0x0000006a), propget]
        HRESULT VerticalAnchor([out, retval] MsoVerticalAnchor* VerticalAnchor);
        [id(0x0000006a), propput]
        HRESULT VerticalAnchor([in] MsoVerticalAnchor VerticalAnchor);
        [id(0x0000006b), propget]
        HRESULT PathFormat([out, retval] MsoPathFormat* PathFormat);
        [id(0x0000006b), propput]
        HRESULT PathFormat([in] MsoPathFormat PathFormat);
        [id(0x0000006c), propget]
        HRESULT WarpFormat([out, retval] MsoWarpFormat* WarpFormat);
        [id(0x0000006c), propput]
        HRESULT WarpFormat([in] MsoWarpFormat WarpFormat);
        [id(0x0000006d), propget]
        HRESULT WordArtformat([out, retval] MsoPresetTextEffect* WordArtformat);
        [id(0x0000006d), propput]
        HRESULT WordArtformat([in] MsoPresetTextEffect WordArtformat);
        [id(0x0000006e), propget]
        HRESULT WordWrap([out, retval] MsoTriState* WordWrap);
        [id(0x0000006e), propput]
        HRESULT WordWrap([in] MsoTriState WordWrap);
        [id(0x0000006f), propget]
        HRESULT AutoSize([out, retval] MsoAutoSize* AutoSize);
        [id(0x0000006f), propput]
        HRESULT AutoSize([in] MsoAutoSize AutoSize);
        [id(0x00000070), propget]
        HRESULT ThreeD([out, retval] ThreeDFormat** ThreeD);
        [id(0x00000071), propget]
        HRESULT HasText([out, retval] MsoTriState* pHasText);
        [id(0x00000072), propget]
        HRESULT TextRange([out, retval] TextRange2** Range);
        [id(0x00000073), propget]
        HRESULT Column([out, retval] TextColumn2** Column);
        [id(0x00000074), propget]
        HRESULT Ruler([out, retval] Ruler2** Ruler);
        [id(0x00000075)]
        HRESULT DeleteText();
        [id(0x00000076), propget]
        HRESULT NoTextRotation([out, retval] MsoTriState* NoTextRotation);
        [id(0x00000076), propput]
        HRESULT NoTextRotation([in] MsoTriState NoTextRotation);
    };

    

    [
      odl,
      uuid(000C03A1-0000-0000-C000-000000000046),
      dual,
      oleautomation
    ]
    interface ThemeColor : _IMsoDispObj {
        [id(00000000), propget]
        HRESULT RGB([out, retval] MsoRGBType* RGB);
        [id(00000000), propput]
        HRESULT RGB([in] MsoRGBType RGB);
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x60030003), propget]
        HRESULT ThemeColorSchemeIndex([out, retval] MsoThemeColorSchemeIndex* pValue);
    };

    [
      odl,
      uuid(000C03A2-0000-0000-C000-000000000046),
      dual,
      oleautomation
    ]
    interface ThemeColorScheme : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Count([out, retval] int* Count);
        [id(00000000)]
        HRESULT Colors(
                        [in] MsoThemeColorSchemeIndex Index, 
                        [out, retval] ThemeColor** Color);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
        [id(0x00000003)]
        HRESULT Load([in] BSTR FileName);
        [id(0x00000004)]
        HRESULT Save([in] BSTR FileName);
        [id(0x00000005)]
        HRESULT GetCustomColor(
                        [in] BSTR Name, 
                        [out, retval] MsoRGBType* CustomColor);
    };

    [
      odl,
      uuid(000C03A3-0000-0000-C000-000000000046),
      dual,
      oleautomation
    ]
    interface ThemeFont : _IMsoDispObj {
        [id(00000000), propget]
        HRESULT Name([out, retval] BSTR* Val);
        [id(00000000), propput]
        HRESULT Name([in] BSTR Val);
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
    };

    [
      odl,
      uuid(000C03A4-0000-0000-C000-000000000046),
      dual,
      oleautomation
    ]
    interface ThemeFonts : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Count([out, retval] int* Count);
        [id(00000000)]
        HRESULT Item(
                        [in] MsoFontLanguageIndex Index, 
                        [out, retval] ThemeFont** Val);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** ppienum);
    };

    [
      odl,
      uuid(000C03A5-0000-0000-C000-000000000046),
      dual,
      oleautomation
    ]
    interface ThemeFontScheme : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002)]
        HRESULT Load([in] BSTR FileName);
        [id(0x00000003)]
        HRESULT Save([in] BSTR FileName);
        [id(0x00000004), propget]
        HRESULT MinorFont([out, retval] ThemeFonts** MinorFont);
        [id(0x00000005), propget]
        HRESULT MajorFont([out, retval] ThemeFonts** MajorFont);
    };

    [
      odl,
      uuid(000C03A6-0000-0000-C000-000000000046),
      dual,
      oleautomation
    ]
    interface ThemeEffectScheme : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002)]
        HRESULT Load([in] BSTR FileName);
    };

    [
      odl,
      uuid(000C03A0-0000-0000-C000-000000000046),
      dual,
      oleautomation
    ]
    interface OfficeTheme : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT ThemeColorScheme([out, retval] ThemeColorScheme** ThemeColorScheme);
        [id(0x00000003), propget]
        HRESULT ThemeFontScheme([out, retval] ThemeFontScheme** ThemeFontScheme);
        [id(0x00000004), propget]
        HRESULT ThemeEffectScheme([out, retval] ThemeEffectScheme** ThemeEffectScheme);
    };

    

    [
      odl,
      uuid(000C033B-0000-0000-C000-000000000046),
      helpcontext(0x000497c8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface _CustomTaskPane : IDispatch {
        [id(00000000), propget, helpcontext(0x000497c9)]
        HRESULT Title([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x000497ca)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x000497cb)]
        HRESULT Window([out, retval] IDispatch** prop);
        [id(0x00000003), propget, helpcontext(0x000497cc)]
        HRESULT Visible([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x000497cc)]
        HRESULT Visible([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x000497cd)]
        HRESULT ContentControl([out, retval] IDispatch** prop);
        [id(0x00000005), propget, helpcontext(0x000497ce)]
        HRESULT Height([out, retval] int* prop);
        [id(0x00000005), propput, helpcontext(0x000497ce)]
        HRESULT Height([in] int prop);
        [id(0x00000006), propget, helpcontext(0x000497cf)]
        HRESULT Width([out, retval] int* prop);
        [id(0x00000006), propput, helpcontext(0x000497cf)]
        HRESULT Width([in] int prop);
        [id(0x00000007), propget, helpcontext(0x000497d0)]
        HRESULT DockPosition([out, retval] MsoCTPDockPosition* prop);
        [id(0x00000007), propput, helpcontext(0x000497d0)]
        HRESULT DockPosition([in] MsoCTPDockPosition prop);
        [id(0x00000008), propget, helpcontext(0x000497d1)]
        HRESULT DockPositionRestrict([out, retval] MsoCTPDockPositionRestrict* prop);
        [id(0x00000008), propput, helpcontext(0x000497d1)]
        HRESULT DockPositionRestrict([in] MsoCTPDockPositionRestrict prop);
        [id(0x00000009), helpcontext(0x000497d2)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(8A64A872-FC6B-4D4A-926E-3A3689562C1C),
      helpcontext(0x00049bb0),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomTaskPaneEvents : IDispatch {
        [id(0x00000001), helpcontext(0x00049bb1)]
        void VisibleStateChange([in] _CustomTaskPane* CustomTaskPaneInst);
        [id(0x00000002), helpcontext(0x00049bb2)]
        void DockPositionStateChange([in] _CustomTaskPane* CustomTaskPaneInst);
    };

    [
      uuid(000C033C-0000-0000-C000-000000000046),
      hidden
    ]
    dispinterface _CustomTaskPaneEvents {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000001), helpcontext(0x00049bb1)]
            void VisibleStateChange([in] _CustomTaskPane* CustomTaskPaneInst);
            [id(0x00000002), helpcontext(0x00049bb2)]
            void DockPositionStateChange([in] _CustomTaskPane* CustomTaskPaneInst);
    };

    [
      uuid(C5771BE5-A188-466B-AB31-00A6A32B1B1C),
      helpcontext(0x00049f98),
      noncreatable
    ]
    coclass CustomTaskPane {
        [default] interface _CustomTaskPane;
        [default, source] dispinterface _CustomTaskPaneEvents;
    };

    [
      odl,
      uuid(000C033D-0000-0000-C000-000000000046),
      helpcontext(0x0004a380),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ICTPFactory : IDispatch {
        [id(0x00000001), helpcontext(0x0004a381)]
        HRESULT CreateCTP(
                        [in] BSTR CTPAxID, 
                        [in] BSTR CTPTitle, 
                        [in, optional] VARIANT CTPParentWindow, 
                        [out, retval] _CustomTaskPane** CTPInst);
    };

    [
      odl,
      uuid(000C033E-0000-0000-C000-000000000046),
      helpcontext(0x0004a768),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ICustomTaskPaneConsumer : IDispatch {
        [id(0x00000001), helpcontext(0x0004a769)]
        HRESULT CTPFactoryAvailable([in] ICTPFactory* CTPFactoryInst);
    };

    [
      odl,
      uuid(000C03A7-0000-0000-C000-000000000046),
      helpcontext(0x0004e200),
      dual,
      oleautomation
    ]
    interface IRibbonUI : IDispatch {
        [id(0x00000001), helpcontext(0x0004e201)]
        HRESULT Invalidate();
        [id(0x00000002), helpcontext(0x0004e202)]
        HRESULT InvalidateControl([in] BSTR ControlID);
        [id(0x00000003), helpcontext(0x0004e203)]
        HRESULT InvalidateControlMso([in] BSTR ControlID);
        [id(0x00000004), helpcontext(0x0004e204)]
        HRESULT ActivateTab([in] BSTR ControlID);
        [id(0x00000005), helpcontext(0x0004e205)]
        HRESULT ActivateTabMso([in] BSTR ControlID);
        [id(0x00000006), helpcontext(0x0004e206)]
        HRESULT ActivateTabQ(
                        [in] BSTR ControlID, 
                        [in] BSTR Namespace);
    };

    [
      odl,
      uuid(000C0395-0000-0000-C000-000000000046),
      helpcontext(0x00046500),
      dual,
      oleautomation
    ]
    interface IRibbonControl : IDispatch {
        [id(0x00000001), propget, helpcontext(0x00046501)]
        HRESULT Id([out, retval] BSTR* Id);
        [id(0x00000002), propget, helpcontext(0x00046502)]
        HRESULT Context([out, retval] IDispatch** Context);
        [id(0x00000003), propget, helpcontext(0x00046503)]
        HRESULT Tag([out, retval] BSTR* Tag);
    };

    [
      odl,
      uuid(000C0396-0000-0000-C000-000000000046),
      helpcontext(0x000468e8),
      dual,
      oleautomation
    ]
    interface IRibbonExtensibility : IDispatch {
        [id(0x00000001), helpcontext(0x000468e9)]
        HRESULT GetCustomUI(
                        [in] BSTR RibbonID, 
                        [out, retval] BSTR* RibbonXml);
    };

    

    [
      odl,
      uuid(4291224C-DEFE-485B-8E69-6CF8AA85CB76),
      helpcontext(0x0004f970),
      dual,
      nonextensible,
      oleautomation
    ]
    interface IAssistance : IDispatch {
        [id(0x60020000), helpstring("ShowHelp Method"), helpcontext(0x0004f971)]
        HRESULT ShowHelp(
                        [in, optional, defaultvalue("")] BSTR HelpId, 
                        [in, optional, defaultvalue("")] BSTR Scope);
        [id(0x60020001), helpstring("SearchHelp Method"), helpcontext(0x0004f972)]
        HRESULT SearchHelp(
                        [in] BSTR Query, 
                        [in, optional, defaultvalue("")] BSTR Scope);
        [id(0x60020002), helpstring("SetDefaultContext Method"), helpcontext(0x0004f973)]
        HRESULT SetDefaultContext([in] BSTR HelpId);
        [id(0x60020003), helpstring("ClearDefaultContext Method"), helpcontext(0x0004f974)]
        HRESULT ClearDefaultContext([in] BSTR HelpId);
    };

    

    [
      odl,
      uuid(000C172F-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoChartData : IDispatch {
        [id(0x60020000), propget]
        HRESULT Workbook([out, retval] IDispatch** ppdispWorkbook);
        [id(0x60020001)]
        HRESULT Activate();
        [id(0x60020002), propget]
        HRESULT IsLinked([out, retval] VARIANT_BOOL* pfIsLinked);
        [id(0x60020003)]
        HRESULT BreakLink();
        [id(0x60020004)]
        HRESULT ActivateChartDataWindow();
    };

    [
      odl,
      uuid(000C1709-0000-0000-C000-000000000046),
      helpcontext(0x00020007),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoChart : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x60020001), propput]
        HRESULT HasTitle([in] VARIANT_BOOL fTitle);
        [id(0x60020001), propget]
        HRESULT HasTitle([out, retval] VARIANT_BOOL* fTitle);
        [id(0x60020003), propget]
        HRESULT ChartTitle([out, retval] IMsoChartTitle** pval);
        [id(0x60020004), propget]
        HRESULT DepthPercent([out, retval] int* pwDepthPercent);
        [id(0x60020004), propput]
        HRESULT DepthPercent([in] int pwDepthPercent);
        [id(0x60020006), propget]
        HRESULT Elevation([out, retval] int* pwElevation);
        [id(0x60020006), propput]
        HRESULT Elevation([in] int pwElevation);
        [id(0x60020008), propget]
        HRESULT GapDepth([out, retval] int* pwGapDepth);
        [id(0x60020008), propput]
        HRESULT GapDepth([in] int pwGapDepth);
        [id(0x6002000a), propget]
        HRESULT HeightPercent([out, retval] int* pwHeightPercent);
        [id(0x6002000a), propput]
        HRESULT HeightPercent([in] int pwHeightPercent);
        [id(0x6002000c), propget]
        HRESULT Perspective([out, retval] int* pwPerspective);
        [id(0x6002000c), propput]
        HRESULT Perspective([in] int pwPerspective);
        [id(0x6002000e), propget]
        HRESULT RightAngleAxes([out, retval] VARIANT* pvarRightAngleAxes);
        [id(0x6002000e), propput]
        HRESULT RightAngleAxes([in] VARIANT pvarRightAngleAxes);
        [id(0x60020010), propget]
        HRESULT Rotation([out, retval] VARIANT* pvarRotation);
        [id(0x60020010), propput]
        HRESULT Rotation([in] VARIANT pvarRotation);
        [id(0x60020012), propput]
        HRESULT DisplayBlanksAs([in] XlDisplayBlanksAs pres);
        [id(0x60020012), propget]
        HRESULT DisplayBlanksAs([out, retval] XlDisplayBlanksAs* pres);
        [id(0x60020014), propput, restricted]
        HRESULT ProtectData([in] VARIANT_BOOL pres);
        [id(0x60020014), propget, restricted]
        HRESULT ProtectData([out, retval] VARIANT_BOOL* pres);
        [id(0x60020016), propput, restricted]
        HRESULT ProtectFormatting([in] VARIANT_BOOL pres);
        [id(0x60020016), propget, restricted]
        HRESULT ProtectFormatting([out, retval] VARIANT_BOOL* pres);
        [id(0x60020018), propput, restricted]
        HRESULT ProtectGoalSeek([in] VARIANT_BOOL pres);
        [id(0x60020018), propget, restricted]
        HRESULT ProtectGoalSeek([out, retval] VARIANT_BOOL* pres);
        [id(0x6002001a), propput, restricted]
        HRESULT ProtectSelection([in] VARIANT_BOOL pres);
        [id(0x6002001a), propget, restricted]
        HRESULT ProtectSelection([out, retval] VARIANT_BOOL* pres);
        [id(0x6002001c), propput, restricted]
        HRESULT ProtectChartObjects([in] VARIANT_BOOL pres);
        [id(0x6002001c), propget, restricted]
        HRESULT ProtectChartObjects([out, retval] VARIANT_BOOL* pres);
        [id(0x6002001e), restricted]
        HRESULT UnProtect([in, optional] VARIANT Password);
        [id(0x6002001f), restricted]
        HRESULT Protect(
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT DrawingObjects, 
                        [in, optional] VARIANT Contents, 
                        [in, optional] VARIANT Scenarios, 
                        [in, optional] VARIANT UserInterfaceOnly);
        [id(0x00000008), propget, helpcontext(0x00010008)]
        HRESULT ChartGroups(
                        [in, optional] VARIANT* pvarIndex, 
                        [in, optional] VARIANT varIgallery, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000044), helpcontext(0x00010044)]
        HRESULT SeriesCollection(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000097), hidden, helpcontext(0x00010097)]
        HRESULT _ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                        [in, optional] VARIANT IMsoLegendKey, 
                        [in, optional] VARIANT AutoText, 
                        [in, optional] VARIANT HasLeaderLines);
        [id(0x0000006d), propget, hidden, helpcontext(0x0001006d)]
        HRESULT SubType([out, retval] long* RHS);
        [id(0x0000006d), propput, hidden, helpcontext(0x0001006d)]
        HRESULT SubType([in] long RHS);
        [id(0x0000006c), propget, hidden, helpcontext(0x0001006c)]
        HRESULT Type([out, retval] long* RHS);
        [id(0x0000006c), propput, hidden, helpcontext(0x0001006c)]
        HRESULT Type([in] long RHS);
        [id(0x0000004f), propget, hidden, helpcontext(0x0001004f)]
        HRESULT Corners([out, retval] IMsoCorners** RHS);
        [id(0x00000782), helpcontext(0x00010782)]
        HRESULT ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                        [in, optional] VARIANT IMsoLegendKey, 
                        [in, optional] VARIANT AutoText, 
                        [in, optional] VARIANT HasLeaderLines, 
                        [in, optional] VARIANT ShowSeriesName, 
                        [in, optional] VARIANT ShowCategoryName, 
                        [in, optional] VARIANT ShowValue, 
                        [in, optional] VARIANT ShowPercentage, 
                        [in, optional] VARIANT ShowBubbleSize, 
                        [in, optional] VARIANT Separator);
        [id(0x00000578), propget, helpcontext(0x00010578)]
        HRESULT ChartType([out, retval] XlChartType* RHS);
        [id(0x00000578), propput, helpcontext(0x00010578)]
        HRESULT ChartType([in] XlChartType RHS);
        [id(0x00000574), propget, helpcontext(0x00010574)]
        HRESULT HasDataTable([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000574), propput, helpcontext(0x00010574)]
        HRESULT HasDataTable([in] VARIANT_BOOL RHS);
        [id(0x00000579), helpcontext(0x00010579)]
        HRESULT ApplyCustomType(
                        [in] XlChartType ChartType, 
                        [in, optional] VARIANT TypeName);
        [id(0x00000581), helpcontext(0x00010581)]
        HRESULT GetChartElement(
                        [in] long x, 
                        [in] long y, 
                        [in, out] long* ElementID, 
                        [in, out] long* Arg1, 
                        [in, out] long* Arg2);
        [id(0x00000585), helpcontext(0x00010585)]
        HRESULT SetSourceData(
                        [in] BSTR Source, 
                        [in, optional] VARIANT PlotBy);
        [id(0x000000ca), propget, helpcontext(0x000100ca)]
        HRESULT PlotBy([out, retval] XlRowCol* PlotBy);
        [id(0x000000ca), propput, helpcontext(0x000100ca)]
        HRESULT PlotBy([in] XlRowCol PlotBy);
        [id(0x00000035), propget, helpcontext(0x00010035)]
        HRESULT HasLegend([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000035), propput, helpcontext(0x00010035)]
        HRESULT HasLegend([in] VARIANT_BOOL RHS);
        [id(0x00000054), propget, helpcontext(0x00010054)]
        HRESULT Legend([out, retval] IMsoLegend** RHS);
        [id(0x60020035)]
        HRESULT Axes(
                        [in, optional] VARIANT Type, 
                        [in, optional, defaultvalue(1)] XlAxisGroup AxisGroup, 
                        [out, retval] IDispatch** ppAxes);
        [id(0x60020036), propput]
        HRESULT HasAxis(
                        [in, optional] VARIANT axisType, 
                        [in, optional] VARIANT AxisGroup, 
                        [in] VARIANT pval);
        [id(0x60020036), propget]
        HRESULT HasAxis(
                        [in, optional] VARIANT axisType, 
                        [in, optional] VARIANT AxisGroup, 
                        [out, retval] VARIANT* pval);
        [id(0x60020038), propget]
        HRESULT Walls(
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL fBackWall, 
                        [out, retval] IMsoWalls** ppwalls);
        [id(0x60020039), propget]
        HRESULT Floor([out, retval] IMsoFloor** ppfloor);
        [id(0x6002003a), propget]
        HRESULT PlotArea([out, retval] IMsoPlotArea** ppplotarea);
        [id(0x0000005c), propget, helpcontext(0x0001005c)]
        HRESULT PlotVisibleOnly([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000005c), propput, helpcontext(0x0001005c)]
        HRESULT PlotVisibleOnly([in] VARIANT_BOOL RHS);
        [id(0x6002003d), propget]
        HRESULT ChartArea([out, retval] IMsoChartArea** ppchartarea);
        [id(0x6002003e)]
        HRESULT AutoFormat(
                        [in] long rGallery, 
                        [in, optional] VARIANT varFormat);
        [id(0x6002003f), propget]
        HRESULT AutoScaling([out, retval] VARIANT_BOOL* f);
        [id(0x6002003f), propput]
        HRESULT AutoScaling([in] VARIANT_BOOL f);
        [id(0x60020041), restricted]
        HRESULT SetBackgroundPicture([in] BSTR bstr);
        [id(0x60020042)]
        HRESULT ChartWizard(
                        [in, optional] VARIANT varSource, 
                        [in, optional] VARIANT varGallery, 
                        [in, optional] VARIANT varFormat, 
                        [in, optional] VARIANT varPlotBy, 
                        [in, optional] VARIANT varCategoryLabels, 
                        [in, optional] VARIANT varSeriesLabels, 
                        [in, optional] VARIANT varHasLegend, 
                        [in, optional] VARIANT varTitle, 
                        [in, optional] VARIANT varCategoryTitle, 
                        [in, optional] VARIANT varValueTitle, 
                        [in, optional] VARIANT varExtraTitle, 
                        [in, lcid] long LocaleID);
        [id(0x60020043)]
        HRESULT CopyPicture(
                        [in, optional, defaultvalue(1)] int Appearance, 
                        [in, optional, defaultvalue(-4147)] int Format, 
                        [in, optional, defaultvalue(2)] int Size, 
                        [in, lcid] long LocaleID);
        [id(0x60020044), propget]
        HRESULT DataTable([out, retval] IMsoDataTable** RHS);
        [id(0x60020045), restricted]
        HRESULT Evaluate(
                        [in] VARIANT varName, 
                        [in] long LocaleID, 
                        [out] long* ObjType, 
                        [out, retval] VARIANT* pvar);
        [id(0x60020046), restricted]
        HRESULT _Evaluate(
                        [in] VARIANT varName, 
                        [in] long LocaleID, 
                        [out, retval] VARIANT* pvar);
        [id(0x60020047), restricted]
        HRESULT Paste(
                        [in, optional] VARIANT varType, 
                        [in, lcid] long LocaleID);
        [id(0x60020048), propget]
        HRESULT BarShape([out, retval] XlBarShape* pShape);
        [id(0x60020048), propput]
        HRESULT BarShape([in] XlBarShape pShape);
        [id(0x6002004a)]
        HRESULT Export(
                        [in] BSTR bstr, 
                        [in, optional] VARIANT varFilterName, 
                        [in, optional] VARIANT varInteractive, 
                        [out, retval] VARIANT_BOOL* f);
        [id(0x6002004b)]
        HRESULT SetDefaultChart([in] VARIANT varName);
        [id(0x6002004c)]
        HRESULT ApplyChartTemplate([in] BSTR bstrFileName);
        [id(0x6002004d)]
        HRESULT SaveChartTemplate([in] BSTR bstrFileName);
        [id(0x00000949), propget, helpcontext(0x00010949)]
        HRESULT SideWall([out, retval] IMsoWalls** RHS);
        [id(0x0000094a), propget, helpcontext(0x0001094a)]
        HRESULT BackWall([out, retval] IMsoWalls** RHS);
        [id(0x000009a1), propget, helpcontext(0x000109a1)]
        HRESULT ChartStyle([out, retval] VARIANT* RHS);
        [id(0x000009a1), propput, helpcontext(0x000109a1)]
        HRESULT ChartStyle([in] VARIANT RHS);
        [id(0x000009a2), helpcontext(0x000109a2)]
        HRESULT ClearToMatchStyle();
        [id(0x00000716), propget, helpcontext(0x00010716)]
        HRESULT PivotLayout([out, retval] IDispatch** RHS);
        [id(0x00000717), propget, hidden, helpcontext(0x00010717)]
        HRESULT HasPivotFields([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000717), propput, hidden, helpcontext(0x00010717)]
        HRESULT HasPivotFields([in] VARIANT_BOOL RHS);
        [id(0x60020056)]
        HRESULT RefreshPivotTable();
        [id(0x60020057), propput]
        HRESULT ShowDataLabelsOverMaximum([in] VARIANT_BOOL pRHS);
        [id(0x60020057), propget]
        HRESULT ShowDataLabelsOverMaximum([out, retval] VARIANT_BOOL* pRHS);
        [id(0x000009a4), helpcontext(0x000109a4)]
        HRESULT ApplyLayout(
                        [in] long Layout, 
                        [in, optional] VARIANT varChartType);
        [id(0x6002005a), propget, restricted]
        HRESULT Selection([out, retval] IDispatch** RHS);
        [id(0x6002005b)]
        HRESULT Refresh();
        [id(0x6002005c)]
        HRESULT SetElement([in] MsoChartElementType RHS);
        [id(0x6002005d), propget]
        HRESULT ChartData([out, retval] IMsoChartData** ppchartdata);
        [id(0x6002005e), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppChartFormat);
        [id(0x6002005f), propget]
        HRESULT Shapes([out, retval] Shapes** ppShapes);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x00000011), propget, hidden, helpcontext(0x00010011)]
        HRESULT Area3DGroup(
                        [in, lcid] long lcid, 
                        [out, retval] IMsoChartGroup** RHS);
        [id(0x00000009), hidden, helpcontext(0x00010009)]
        HRESULT AreaGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000012), propget, hidden, helpcontext(0x00010012)]
        HRESULT Bar3DGroup(
                        [in, lcid] long lcid, 
                        [out, retval] IMsoChartGroup** RHS);
        [id(0x0000000a), hidden, helpcontext(0x0001000a)]
        HRESULT BarGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000013), propget, hidden, helpcontext(0x00010013)]
        HRESULT Column3DGroup(
                        [in, lcid] long lcid, 
                        [out, retval] IMsoChartGroup** RHS);
        [id(0x0000000b), hidden, helpcontext(0x0001000b)]
        HRESULT ColumnGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000014), propget, hidden, helpcontext(0x00010014)]
        HRESULT Line3DGroup(
                        [in, lcid] long lcid, 
                        [out, retval] IMsoChartGroup** RHS);
        [id(0x0000000c), hidden, helpcontext(0x0001000c)]
        HRESULT LineGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000015), propget, hidden, helpcontext(0x00010015)]
        HRESULT Pie3DGroup(
                        [in, lcid] long lcid, 
                        [out, retval] IMsoChartGroup** RHS);
        [id(0x0000000d), hidden, helpcontext(0x0001000d)]
        HRESULT PieGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x0000000e), hidden, helpcontext(0x0001000e)]
        HRESULT DoughnutGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x0000000f), hidden, helpcontext(0x0001000f)]
        HRESULT RadarGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000016), propget, hidden, helpcontext(0x00010016)]
        HRESULT SurfaceGroup(
                        [in, lcid] long lcid, 
                        [out, retval] IMsoChartGroup** RHS);
        [id(0x00000010), hidden, helpcontext(0x00010010)]
        HRESULT XYGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x00000227), helpcontext(0x00010227)]
        HRESULT Copy([out, retval] VARIANT* RHS);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [id(0x60020073), propget]
        HRESULT ShowReportFilterFieldButtons([out, retval] VARIANT_BOOL* res);
        [id(0x60020073), propput]
        HRESULT ShowReportFilterFieldButtons([in] VARIANT_BOOL res);
        [id(0x60020075), propget]
        HRESULT ShowLegendFieldButtons([out, retval] VARIANT_BOOL* res);
        [id(0x60020075), propput]
        HRESULT ShowLegendFieldButtons([in] VARIANT_BOOL res);
        [id(0x60020077), propget]
        HRESULT ShowAxisFieldButtons([out, retval] VARIANT_BOOL* res);
        [id(0x60020077), propput]
        HRESULT ShowAxisFieldButtons([in] VARIANT_BOOL res);
        [id(0x60020079), propget]
        HRESULT ShowValueFieldButtons([out, retval] VARIANT_BOOL* res);
        [id(0x60020079), propput]
        HRESULT ShowValueFieldButtons([in] VARIANT_BOOL res);
        [id(0x6002007b), propget]
        HRESULT ShowAllFieldButtons([out, retval] VARIANT_BOOL* res);
        [id(0x6002007b), propput]
        HRESULT ShowAllFieldButtons([in] VARIANT_BOOL res);
        [id(0x6002007d), propput, restricted]
        HRESULT ProtectChartSheetFormatting([in] VARIANT_BOOL rhs);
        [id(0x000000ec)]
        HRESULT FullSeriesCollection(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [id(0x000000ed), propput]
        HRESULT CategoryLabelLevel([in] XlCategoryLabelLevel plevel);
        [id(0x000000ed), propget]
        HRESULT CategoryLabelLevel([out, retval] XlCategoryLabelLevel* plevel);
        [id(0x000000ee), propput]
        HRESULT SeriesNameLevel([in] XlSeriesNameLevel plevel);
        [id(0x000000ee), propget]
        HRESULT SeriesNameLevel([out, retval] XlSeriesNameLevel* plevel);
        [id(0x000000ef), propget, hidden]
        HRESULT HasHiddenContent([out, retval] VARIANT_BOOL* res);
        [id(0x000000f0), hidden]
        HRESULT DeleteHiddenContent();
        [id(0x000009a3), propget, helpcontext(0x000109a3)]
        HRESULT ChartColor([out, retval] VARIANT* RHS);
        [id(0x000009a3), propput, helpcontext(0x000109a3)]
        HRESULT ChartColor([in] VARIANT RHS);
        [id(0x000009a5), helpcontext(0x000109a5)]
        HRESULT ClearToMatchColorStyle();
    };

    [
      odl,
      uuid(000C1714-0000-0000-C000-000000000046),
      helpcontext(0x00020080),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoCorners : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C1710-0000-0000-C000-000000000046),
      helpcontext(0x0002008c),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoLegend : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* RHS);
        [id(0x00000080), propget, helpcontext(0x00010080)]
        HRESULT Border([out, retval] IMsoBorder** RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x00000092), propget, helpcontext(0x00010092)]
        HRESULT Font([out, retval] ChartFont** RHS);
        [id(0x000000ad), helpcontext(0x000100ad)]
        HRESULT LegendEntries(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000085), propget, helpcontext(0x00010085)]
        HRESULT Position([out, retval] XlLegendPosition* RHS);
        [id(0x00000085), propput, helpcontext(0x00010085)]
        HRESULT Position([in] XlLegendPosition RHS);
        [id(0x00000067), propget, helpcontext(0x00010067)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000067), propput, helpcontext(0x00010067)]
        HRESULT Shadow([in] VARIANT_BOOL RHS);
        [id(0x0000006f), helpcontext(0x0001006f)]
        HRESULT Clear([out, retval] VARIANT* RHS);
        [id(0x0000007b), propget, helpcontext(0x0001007b)]
        HRESULT Height([out, retval] double* RHS);
        [id(0x0000007b), propput, helpcontext(0x0001007b)]
        HRESULT Height([in] double RHS);
        [id(0x00000081), propget, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] IMsoInterior** RHS);
        [id(0x0000067f), propget, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** RHS);
        [id(0x0000007f), propget, helpcontext(0x0001007f)]
        HRESULT Left([out, retval] double* RHS);
        [id(0x0000007f), propput, helpcontext(0x0001007f)]
        HRESULT Left([in] double RHS);
        [id(0x0000007e), propget, helpcontext(0x0001007e)]
        HRESULT Top([out, retval] double* RHS);
        [id(0x0000007e), propput, helpcontext(0x0001007e)]
        HRESULT Top([in] double RHS);
        [id(0x0000007a), propget, helpcontext(0x0001007a)]
        HRESULT Width([out, retval] double* RHS);
        [id(0x0000007a), propput, helpcontext(0x0001007a)]
        HRESULT Width([in] double RHS);
        [id(0x000005f5), propget, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([out, retval] VARIANT* RHS);
        [id(0x000005f5), propput, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([in] VARIANT RHS);
        [id(0x00000972), propget, helpcontext(0x00010972)]
        HRESULT IncludeInLayout([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000972), propput, helpcontext(0x00010972)]
        HRESULT IncludeInLayout([in] VARIANT_BOOL RHS);
        [id(0x6002001a), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppChartFormat);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C1717-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoBorder : IDispatch {
        [id(0x60020000), propput]
        HRESULT Color([in] VARIANT pval);
        [id(0x60020000), propget]
        HRESULT Color([out, retval] VARIANT* pval);
        [id(0x60020002), propput]
        HRESULT ColorIndex([in] VARIANT pval);
        [id(0x60020002), propget]
        HRESULT ColorIndex([out, retval] VARIANT* pval);
        [id(0x60020004), propput]
        HRESULT LineStyle([in] VARIANT pval);
        [id(0x60020004), propget]
        HRESULT LineStyle([out, retval] VARIANT* pval);
        [id(0x60020006), propput]
        HRESULT Weight([in] VARIANT pval);
        [id(0x60020006), propget]
        HRESULT Weight([out, retval] VARIANT* pval);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(000C1715-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoWalls : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* bstr);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* pvar);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0x00000080), propget, helpcontext(0x00010080)]
        HRESULT Border([out, retval] IMsoBorder** ppborder);
        [id(0x00000070), helpcontext(0x00010070)]
        HRESULT ClearFormats([out, retval] VARIANT* pvar);
        [id(0x00000081), propget, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] IMsoInterior** ppinterior);
        [id(0x0000067f), propget, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** ppfill);
        [id(0x000000a1), propget, helpcontext(0x000100a1)]
        HRESULT PictureType([out, retval] VARIANT* pvar);
        [id(0x000000a1), propput, helpcontext(0x000100a1)]
        HRESULT PictureType([in] VARIANT pvar);
        [id(0x000000d3), helpcontext(0x000100d3)]
        HRESULT Paste();
        [id(0x000000a2), propget, helpcontext(0x000100a2)]
        HRESULT PictureUnit([out, retval] VARIANT* pvar);
        [id(0x000000a2), propput, helpcontext(0x000100a2)]
        HRESULT PictureUnit([in] VARIANT pvar);
        [id(0x00000973), propget, helpcontext(0x00010973)]
        HRESULT Thickness([out, retval] long* RHS);
        [id(0x00000973), propput, helpcontext(0x00010973)]
        HRESULT Thickness([in] long RHS);
        [id(0x6002000e), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppChartFormat);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C1716-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoFloor : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* bstr);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* pvar);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0x00000080), propget, helpcontext(0x00010080)]
        HRESULT Border([out, retval] IMsoBorder** ppborder);
        [id(0x00000070), helpcontext(0x00010070)]
        HRESULT ClearFormats([out, retval] VARIANT* pvar);
        [id(0x00000081), propget, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] IMsoInterior** ppinterior);
        [id(0x0000067f), propget, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** ppfill);
        [id(0x000000a1), propget, helpcontext(0x000100a1)]
        HRESULT PictureType([out, retval] VARIANT* pvar);
        [id(0x000000a1), propput, helpcontext(0x000100a1)]
        HRESULT PictureType([in] VARIANT pvar);
        [id(0x000000d3), helpcontext(0x000100d3)]
        HRESULT Paste();
        [id(0x00000973), propget, helpcontext(0x00010973)]
        HRESULT Thickness([out, retval] long* RHS);
        [id(0x00000973), propput, helpcontext(0x00010973)]
        HRESULT Thickness([in] long RHS);
        [id(0x6002000c), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppChartFormat);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C1724-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoPlotArea : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* bstr);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* pvar);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0x00000080), propget, helpcontext(0x00010080)]
        HRESULT Border([out, retval] IMsoBorder** ppborder);
        [id(0x00000070), helpcontext(0x00010070)]
        HRESULT ClearFormats([out, retval] VARIANT* pvar);
        [id(0x0000007b), propget, helpcontext(0x0001007b)]
        HRESULT Height([out, retval] double* pd);
        [id(0x0000007b), propput, helpcontext(0x0001007b)]
        HRESULT Height([in] double pd);
        [id(0x00000081), propget, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] IMsoInterior** ppinterior);
        [id(0x0000067f), propget, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** ppfill);
        [id(0x0000007f), propget, helpcontext(0x0001007f)]
        HRESULT Left([out, retval] double* pd);
        [id(0x0000007f), propput, helpcontext(0x0001007f)]
        HRESULT Left([in] double pd);
        [id(0x0000007e), propget, helpcontext(0x0001007e)]
        HRESULT Top([out, retval] double* pd);
        [id(0x0000007e), propput, helpcontext(0x0001007e)]
        HRESULT Top([in] double pd);
        [id(0x0000007a), propget, helpcontext(0x0001007a)]
        HRESULT Width([out, retval] double* pd);
        [id(0x0000007a), propput, helpcontext(0x0001007a)]
        HRESULT Width([in] double pd);
        [id(0x00000683), propget, helpcontext(0x00010683)]
        HRESULT InsideLeft([out, retval] double* pd);
        [id(0x00000683), propput, helpcontext(0x00010683)]
        HRESULT InsideLeft([in] double pd);
        [id(0x00000684), propget, helpcontext(0x00010684)]
        HRESULT InsideTop([out, retval] double* pd);
        [id(0x00000684), propput, helpcontext(0x00010684)]
        HRESULT InsideTop([in] double pd);
        [id(0x00000685), propget, helpcontext(0x00010685)]
        HRESULT InsideWidth([out, retval] double* pd);
        [id(0x00000685), propput, helpcontext(0x00010685)]
        HRESULT InsideWidth([in] double pd);
        [id(0x00000686), propget, helpcontext(0x00010686)]
        HRESULT InsideHeight([out, retval] double* pd);
        [id(0x00000686), propput, helpcontext(0x00010686)]
        HRESULT InsideHeight([in] double pd);
        [id(0x00000687), propget, helpcontext(0x00010687)]
        HRESULT Position([out, retval] XlChartElementPosition* pval);
        [id(0x00000687), propput, helpcontext(0x00010687)]
        HRESULT Position([in] XlChartElementPosition pval);
        [id(0x60020019), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppChartFormat);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C1728-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoChartArea : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* bstr);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* pvar);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0x00000080), propget, helpcontext(0x00010080)]
        HRESULT Border([out, retval] IMsoBorder** ppborder);
        [id(0x0000006f), helpcontext(0x0001006f)]
        HRESULT Clear([out, retval] VARIANT* pvar);
        [id(0x00000071), helpcontext(0x00010071)]
        HRESULT ClearContents([out, retval] VARIANT* pvar);
        [id(0x00000227), helpcontext(0x00010227)]
        HRESULT Copy([out, retval] VARIANT* pvar);
        [id(0x00000092), propget, helpcontext(0x00010092)]
        HRESULT Font([out, retval] ChartFont** ppfont);
        [id(0x00000067), propget, helpcontext(0x00010067)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* pf);
        [id(0x00000067), propput, helpcontext(0x00010067)]
        HRESULT Shadow([in] VARIANT_BOOL pf);
        [id(0x00000070), helpcontext(0x00010070)]
        HRESULT ClearFormats([out, retval] VARIANT* pvar);
        [id(0x0000007b), propget, helpcontext(0x0001007b)]
        HRESULT Height([out, retval] double* pd);
        [id(0x0000007b), propput, helpcontext(0x0001007b)]
        HRESULT Height([in] double pd);
        [id(0x00000081), propget, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] IMsoInterior** ppinterior);
        [id(0x0000067f), propget, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** ppfill);
        [id(0x0000007f), propget, helpcontext(0x0001007f)]
        HRESULT Left([out, retval] double* pd);
        [id(0x0000007f), propput, helpcontext(0x0001007f)]
        HRESULT Left([in] double pd);
        [id(0x0000007e), propget, helpcontext(0x0001007e)]
        HRESULT Top([out, retval] double* pd);
        [id(0x0000007e), propput, helpcontext(0x0001007e)]
        HRESULT Top([in] double pd);
        [id(0x0000007a), propget, helpcontext(0x0001007a)]
        HRESULT Width([out, retval] double* pd);
        [id(0x0000007a), propput, helpcontext(0x0001007a)]
        HRESULT Width([in] double pd);
        [id(0x000005f5), propget, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([out, retval] VARIANT* pvar);
        [id(0x000005f5), propput, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([in] VARIANT pvar);
        [id(0x60020017), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppChartFormat);
        [id(0x60020018), propget]
        HRESULT RoundedCorners([out, retval] VARIANT_BOOL* pval);
        [id(0x60020018), propput]
        HRESULT RoundedCorners([in] VARIANT_BOOL pval);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C1729-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoSeriesLines : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* bstr);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* pvar);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0x00000080), propget, helpcontext(0x00010080)]
        HRESULT Border([out, retval] IMsoBorder** ppborder);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* pvar);
        [id(0x60020005), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppChartFormat);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C1723-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoLeaderLines : IDispatch {
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select();
        [id(0x00000080), propget, helpcontext(0x00010080)]
        HRESULT Border([out, retval] IMsoBorder** ppborder);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete();
        [id(0x60020003), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppChartFormat);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(000C1725-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface GridLines : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* bstr);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* pvar);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0x00000080), propget, helpcontext(0x00010080)]
        HRESULT Border([out, retval] IMsoBorder** ppborder);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* pvar);
        [id(0x60020005), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppChartFormat);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C172A-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoUpBars : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* bstr);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* pvar);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0x00000080), propget, helpcontext(0x00010080)]
        HRESULT Border([out, retval] IMsoBorder** ppborder);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* pvar);
        [id(0x00000081), propget, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] IMsoInterior** ppinterior);
        [id(0x0000067f), propget, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** ppfill);
        [id(0x60020007), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppChartFormat);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C172D-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoDownBars : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* bstr);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select([out, retval] VARIANT* pvar);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0x00000080), propget, helpcontext(0x00010080)]
        HRESULT Border([out, retval] IMsoBorder** ppborder);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* pvar);
        [id(0x00000081), propget, helpcontext(0x00010081)]
        HRESULT Interior([out, retval] IMsoInterior** ppinterior);
        [id(0x0000067f), propget, helpcontext(0x0001067f)]
        HRESULT Fill([out, retval] ChartFillFormat** ppfill);
        [id(0x60020007), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppChartFormat);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C171B-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoInterior : IDispatch {
        [id(0x60020000), propput]
        HRESULT Color([in] VARIANT pval);
        [id(0x60020000), propget]
        HRESULT Color([out, retval] VARIANT* pval);
        [id(0x60020002), propput]
        HRESULT ColorIndex([in] VARIANT pval);
        [id(0x60020002), propget]
        HRESULT ColorIndex([out, retval] VARIANT* pval);
        [id(0x60020004), propput]
        HRESULT InvertIfNegative([in] VARIANT pval);
        [id(0x60020004), propget]
        HRESULT InvertIfNegative([out, retval] VARIANT* pval);
        [id(0x60020006), propput]
        HRESULT Pattern([in] VARIANT pval);
        [id(0x60020006), propget]
        HRESULT Pattern([out, retval] VARIANT* pval);
        [id(0x60020008), propput]
        HRESULT PatternColor([in] VARIANT pval);
        [id(0x60020008), propget]
        HRESULT PatternColor([out, retval] VARIANT* pval);
        [id(0x6002000a), propput]
        HRESULT PatternColorIndex([in] VARIANT pval);
        [id(0x6002000a), propget]
        HRESULT PatternColorIndex([out, retval] VARIANT* pval);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(000C171C-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartFillFormat : IDispatch {
        [id(0x60020000)]
        HRESULT OneColorGradient(
                        [in] int Style, 
                        [in] int Variant, 
                        [in] long Degree);
        [id(0x60020001)]
        HRESULT TwoColorGradient(
                        [in] int Style, 
                        [in] int Variant);
        [id(0x60020002)]
        HRESULT PresetTextured([in] int PresetTexture);
        [id(0x60020003)]
        HRESULT Solid();
        [id(0x60020004)]
        HRESULT Patterned([in] int Pattern);
        [id(0x60020005)]
        HRESULT UserPicture(
                        [in] VARIANT PictureFile, 
                        [in] VARIANT PictureFormat, 
                        [in] VARIANT PictureStackUnit, 
                        [in] VARIANT PicturePlacement);
        [id(0x60020006)]
        HRESULT UserTextured([in] BSTR TextureFile);
        [id(0x60020007)]
        HRESULT PresetGradient(
                        [in] int Style, 
                        [in] int Variant, 
                        [in] int PresetGradientType);
        [id(0x60020008), propget]
        HRESULT BackColor([out, retval] ChartColorFormat** pval);
        [id(0x60020009), propget]
        HRESULT ForeColor([out, retval] ChartColorFormat** pval);
        [id(0x6002000a), propget]
        HRESULT GradientColorType([out, retval] int* pval);
        [id(0x6002000b), propget]
        HRESULT GradientDegree([out, retval] long*  pval);
        [id(0x6002000c), propget]
        HRESULT GradientStyle([out, retval] int* pval);
        [id(0x6002000d), propget]
        HRESULT GradientVariant([out, retval] int* pval);
        [id(0x6002000e), propget]
        HRESULT Pattern([out, retval] int* pval);
        [id(0x6002000f), propget]
        HRESULT PresetGradientType([out, retval] int* pval);
        [id(0x60020010), propget]
        HRESULT PresetTexture([out, retval] int* pval);
        [id(0x60020011), propget]
        HRESULT TextureName([out, retval] BSTR* pval);
        [id(0x60020012), propget]
        HRESULT TextureType([out, retval] int* pval);
        [id(0x60020013), propget]
        HRESULT Type([out, retval] int* pval);
        [id(0x60020014), propput]
        HRESULT Visible([in] int pval);
        [id(0x60020014), propget]
        HRESULT Visible([out, retval] int* pval);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(000C1719-0000-0000-C000-000000000046),
      helpcontext(0x0002007b),
      hidden
    ]
    interface LegendEntries : IDispatch {
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] LegendEntry** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] IDispatch** ppval);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] long* pval);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] LegendEntry** RHS);
    };

    [
      odl,
      uuid(000C1718-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartFont : IDispatch {
        [id(0x60020000), propput]
        HRESULT Background([in] VARIANT pval);
        [id(0x60020000), propget]
        HRESULT Background([out, retval] VARIANT* pval);
        [id(0x60020002), propput]
        HRESULT Bold([in] VARIANT pval);
        [id(0x60020002), propget]
        HRESULT Bold([out, retval] VARIANT* pval);
        [id(0x60020004), propput]
        HRESULT Color([in] VARIANT pval);
        [id(0x60020004), propget]
        HRESULT Color([out, retval] VARIANT* pval);
        [id(0x60020006), propput]
        HRESULT ColorIndex([in] VARIANT pval);
        [id(0x60020006), propget]
        HRESULT ColorIndex([out, retval] VARIANT* pval);
        [id(0x60020008), propput]
        HRESULT FontStyle([in] VARIANT pval);
        [id(0x60020008), propget]
        HRESULT FontStyle([out, retval] VARIANT* pval);
        [id(0x6002000a), propput]
        HRESULT Italic([in] VARIANT pval);
        [id(0x6002000a), propget]
        HRESULT Italic([out, retval] VARIANT* pval);
        [id(0x6002000c), propput]
        HRESULT Name([in] VARIANT pval);
        [id(0x6002000c), propget]
        HRESULT Name([out, retval] VARIANT* pval);
        [id(0x6002000e), propput]
        HRESULT OutlineFont([in] VARIANT pval);
        [id(0x6002000e), propget]
        HRESULT OutlineFont([out, retval] VARIANT* pval);
        [id(0x60020010), propput]
        HRESULT Shadow([in] VARIANT pval);
        [id(0x60020010), propget]
        HRESULT Shadow([out, retval] VARIANT* pval);
        [id(0x60020012), propput]
        HRESULT Size([in] VARIANT pval);
        [id(0x60020012), propget]
        HRESULT Size([out, retval] VARIANT* pval);
        [id(0x60020014), propput]
        HRESULT StrikeThrough([in] VARIANT pval);
        [id(0x60020014), propget]
        HRESULT StrikeThrough([out, retval] VARIANT* pval);
        [id(0x60020016), propput]
        HRESULT Subscript([in] VARIANT pval);
        [id(0x60020016), propget]
        HRESULT Subscript([out, retval] VARIANT* pval);
        [id(0x60020018), propput]
        HRESULT Superscript([in] VARIANT pval);
        [id(0x60020018), propget]
        HRESULT Superscript([out, retval] VARIANT* pval);
        [id(0x6002001a), propput]
        HRESULT Underline([in] VARIANT pval);
        [id(0x6002001a), propget]
        HRESULT Underline([out, retval] VARIANT* pval);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(000C171D-0000-0000-C000-000000000046),
      helpcontext(0x000200cc),
      hidden
    ]
    interface ChartColorFormat : IDispatch {
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001066e)]
        HRESULT _stdcall SchemeColor([out, retval] long* RHS);
        [propput, helpcontext(0x0001066e)]
        HRESULT _stdcall SchemeColor([in] long RHS);
        [propget, helpcontext(0x0001041f)]
        HRESULT _stdcall RGB([out, retval] long* RHS);
        [propput, helpcontext(0x0001041f)]
        HRESULT _stdcall RGB([in] long RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] long* RHS);
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] IDispatch** ppval);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C171A-0000-0000-C000-000000000046),
      helpcontext(0x0002007a),
      hidden
    ]
    interface LegendEntry : IDispatch {
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] ChartFont** RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x000100ae)]
        HRESULT _stdcall LegendKey([out, retval] IMsoLegendKey** RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propget]
        HRESULT _stdcall Format([out, retval] IMsoChartFormat** ppChartFormat);
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] IDispatch** ppval);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C171E-0000-0000-C000-000000000046),
      helpcontext(0x0002007c),
      hidden
    ]
    interface IMsoLegendKey : IDispatch {
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] IMsoBorder** RHS);
        [helpcontext(0x00010070)]
        HRESULT _stdcall ClearFormats([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] IMsoInterior** RHS);
        [propget, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget, helpcontext(0x00010084)]
        HRESULT _stdcall InvertIfNegative([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010084)]
        HRESULT _stdcall InvertIfNegative([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010049)]
        HRESULT _stdcall MarkerBackgroundColor([out, retval] long* RHS);
        [propput, helpcontext(0x00010049)]
        HRESULT _stdcall MarkerBackgroundColor([in] long RHS);
        [propget, helpcontext(0x0001004a)]
        HRESULT _stdcall MarkerBackgroundColorIndex([out, retval] XlColorIndex* RHS);
        [propput, helpcontext(0x0001004a)]
        HRESULT _stdcall MarkerBackgroundColorIndex([in] XlColorIndex RHS);
        [propget, helpcontext(0x0001004b)]
        HRESULT _stdcall MarkerForegroundColor([out, retval] long* RHS);
        [propput, helpcontext(0x0001004b)]
        HRESULT _stdcall MarkerForegroundColor([in] long RHS);
        [propget, helpcontext(0x0001004c)]
        HRESULT _stdcall MarkerForegroundColorIndex([out, retval] XlColorIndex* RHS);
        [propput, helpcontext(0x0001004c)]
        HRESULT _stdcall MarkerForegroundColorIndex([in] XlColorIndex RHS);
        [propget, helpcontext(0x000100e7)]
        HRESULT _stdcall MarkerSize([out, retval] long* RHS);
        [propput, helpcontext(0x000100e7)]
        HRESULT _stdcall MarkerSize([in] long RHS);
        [propget, helpcontext(0x00010048)]
        HRESULT _stdcall MarkerStyle([out, retval] XlMarkerStyle* RHS);
        [propput, helpcontext(0x00010048)]
        HRESULT _stdcall MarkerStyle([in] XlMarkerStyle RHS);
        [propget, helpcontext(0x000100a1)]
        HRESULT _stdcall PictureType([out, retval] long* RHS);
        [propput, helpcontext(0x000100a1)]
        HRESULT _stdcall PictureType([in] long RHS);
        [propget, helpcontext(0x000100a2)]
        HRESULT _stdcall PictureUnit([out, retval] double* RHS);
        [propput, helpcontext(0x000100a2)]
        HRESULT _stdcall PictureUnit([in] double RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100a3)]
        HRESULT _stdcall Smooth([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100a3)]
        HRESULT _stdcall Smooth([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget]
        HRESULT _stdcall Format([out, retval] IMsoChartFormat** ppChartFormat);
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] IDispatch** ppval);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] long* pval);
        [propget, helpcontext(0x00010a59)]
        HRESULT _stdcall PictureUnit2([out, retval] double* RHS);
        [propput, helpcontext(0x00010a59)]
        HRESULT _stdcall PictureUnit2([in] double RHS);
    };

    [
      odl,
      uuid(000C170A-0000-0000-C000-000000000046),
      helpcontext(0x0002002c),
      hidden
    ]
    interface SeriesCollection : IDispatch {
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] VARIANT Source, 
                        [in, optional, defaultvalue(2)] XlRowCol Rowcol, 
                        [in, optional] VARIANT SeriesLabels, 
                        [in, optional] VARIANT CategoryLabels, 
                        [in, optional] VARIANT Replace, 
                        [out, retval] IMsoSeries** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100e3)]
        HRESULT _stdcall Extend(
                        [in] VARIANT Source, 
                        [in, optional] VARIANT Rowcol, 
                        [in, optional] VARIANT CategoryLabels, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IMsoSeries** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x000100d3)]
        HRESULT _stdcall Paste(
                        [in, optional, defaultvalue(2)] XlRowCol Rowcol, 
                        [in, optional] VARIANT SeriesLabels, 
                        [in, optional] VARIANT CategoryLabels, 
                        [in, optional] VARIANT Replace, 
                        [in, optional] VARIANT NewSeries, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001045d)]
        HRESULT _stdcall NewSeries([out, retval] IMsoSeries** RHS);
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] IDispatch** ppval);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] long* pval);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IMsoSeries** RHS);
    };

    [
      odl,
      uuid(000C170B-0000-0000-C000-000000000046),
      helpcontext(0x0002002b),
      hidden,
      oleautomation
    ]
    interface IMsoSeries : IDispatch {
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x00010097)]
        HRESULT _stdcall _ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                        [in, optional] VARIANT IMsoLegendKey, 
                        [in, optional] VARIANT AutoText, 
                        [in, optional] VARIANT HasLeaderLines, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001002f)]
        HRESULT _stdcall AxisGroup([out, retval] XlAxisGroup* RHS);
        [propput, helpcontext(0x0001002f)]
        HRESULT _stdcall AxisGroup([in] XlAxisGroup RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] IMsoBorder** RHS);
        [helpcontext(0x00010070)]
        HRESULT _stdcall ClearFormats([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x0001009d)]
        HRESULT _stdcall DataLabels(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x00010098)]
        HRESULT _stdcall ErrorBar(
                        [in] XlErrorBarDirection Direction, 
                        [in] XlErrorBarInclude Include, 
                        [in] XlErrorBarType Type, 
                        [in, optional] VARIANT Amount, 
                        [in, optional] VARIANT MinusValues, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001009f)]
        HRESULT _stdcall ErrorBars([out, retval] IMsoErrorBars** RHS);
        [propget, helpcontext(0x000100b6)]
        HRESULT _stdcall Explosion([out, retval] long* RHS);
        [propput, helpcontext(0x000100b6)]
        HRESULT _stdcall Explosion([in] long RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x00010107)]
        HRESULT _stdcall FormulaLocal([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010107)]
        HRESULT _stdcall FormulaLocal([in] BSTR RHS);
        [propget, helpcontext(0x00010108)]
        HRESULT _stdcall FormulaR1C1([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010108)]
        HRESULT _stdcall FormulaR1C1([in] BSTR RHS);
        [propget, helpcontext(0x00010109)]
        HRESULT _stdcall FormulaR1C1Local([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010109)]
        HRESULT _stdcall FormulaR1C1Local([in] BSTR RHS);
        [propget, helpcontext(0x0001004e)]
        HRESULT _stdcall HasDataLabels([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001004e)]
        HRESULT _stdcall HasDataLabels([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000100a0)]
        HRESULT _stdcall HasErrorBars([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100a0)]
        HRESULT _stdcall HasErrorBars([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] IMsoInterior** RHS);
        [propget, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget, helpcontext(0x00010084)]
        HRESULT _stdcall InvertIfNegative([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010084)]
        HRESULT _stdcall InvertIfNegative([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010049)]
        HRESULT _stdcall MarkerBackgroundColor([out, retval] long* RHS);
        [propput, helpcontext(0x00010049)]
        HRESULT _stdcall MarkerBackgroundColor([in] long RHS);
        [propget, helpcontext(0x0001004a)]
        HRESULT _stdcall MarkerBackgroundColorIndex([out, retval] XlColorIndex* RHS);
        [propput, helpcontext(0x0001004a)]
        HRESULT _stdcall MarkerBackgroundColorIndex([in] XlColorIndex RHS);
        [propget, helpcontext(0x0001004b)]
        HRESULT _stdcall MarkerForegroundColor([out, retval] long* RHS);
        [propput, helpcontext(0x0001004b)]
        HRESULT _stdcall MarkerForegroundColor([in] long RHS);
        [propget, helpcontext(0x0001004c)]
        HRESULT _stdcall MarkerForegroundColorIndex([out, retval] XlColorIndex* RHS);
        [propput, helpcontext(0x0001004c)]
        HRESULT _stdcall MarkerForegroundColorIndex([in] XlColorIndex RHS);
        [propget, helpcontext(0x000100e7)]
        HRESULT _stdcall MarkerSize([out, retval] long* RHS);
        [propput, helpcontext(0x000100e7)]
        HRESULT _stdcall MarkerSize([in] long RHS);
        [propget, helpcontext(0x00010048)]
        HRESULT _stdcall MarkerStyle([out, retval] XlMarkerStyle* RHS);
        [propput, helpcontext(0x00010048)]
        HRESULT _stdcall MarkerStyle([in] XlMarkerStyle RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [helpcontext(0x000100d3)]
        HRESULT _stdcall Paste([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100a1)]
        HRESULT _stdcall PictureType([out, retval] XlChartPictureType* RHS);
        [propput, helpcontext(0x000100a1)]
        HRESULT _stdcall PictureType([in] XlChartPictureType RHS);
        [propget, helpcontext(0x000100a2)]
        HRESULT _stdcall PictureUnit([out, retval] double* RHS);
        [propput, helpcontext(0x000100a2)]
        HRESULT _stdcall PictureUnit([in] double RHS);
        [propget, helpcontext(0x000100e4)]
        HRESULT _stdcall PlotOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000100e4)]
        HRESULT _stdcall PlotOrder([in] long RHS);
        [helpcontext(0x00010046)]
        HRESULT _stdcall Points(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100a3)]
        HRESULT _stdcall Smooth([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100a3)]
        HRESULT _stdcall Smooth([in] VARIANT_BOOL RHS);
        [helpcontext(0x0001009a)]
        HRESULT _stdcall Trendlines(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] long* RHS);
        [propput, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([in] long RHS);
        [propget, helpcontext(0x00010578)]
        HRESULT _stdcall ChartType([out, retval] XlChartType* RHS);
        [propput, helpcontext(0x00010578)]
        HRESULT _stdcall ChartType([in] XlChartType RHS);
        [helpcontext(0x00010579)]
        HRESULT _stdcall ApplyCustomType([in] XlChartType ChartType);
        [propget, helpcontext(0x000100a4)]
        HRESULT _stdcall Values([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100a4)]
        HRESULT _stdcall Values([in] VARIANT RHS);
        [propget, helpcontext(0x00010457)]
        HRESULT _stdcall XValues([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010457)]
        HRESULT _stdcall XValues([in] VARIANT RHS);
        [propget, helpcontext(0x00010680)]
        HRESULT _stdcall BubbleSizes([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010680)]
        HRESULT _stdcall BubbleSizes([in] VARIANT RHS);
        [propget, helpcontext(0x0001057b)]
        HRESULT _stdcall BarShape([out, retval] XlBarShape* RHS);
        [propput, helpcontext(0x0001057b)]
        HRESULT _stdcall BarShape([in] XlBarShape RHS);
        [propget, helpcontext(0x0001067b)]
        HRESULT _stdcall ApplyPictToSides([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001067b)]
        HRESULT _stdcall ApplyPictToSides([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001067c)]
        HRESULT _stdcall ApplyPictToFront([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001067c)]
        HRESULT _stdcall ApplyPictToFront([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001067d)]
        HRESULT _stdcall ApplyPictToEnd([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001067d)]
        HRESULT _stdcall ApplyPictToEnd([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010681)]
        HRESULT _stdcall Has3DEffect([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010681)]
        HRESULT _stdcall Has3DEffect([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010572)]
        HRESULT _stdcall HasLeaderLines([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010572)]
        HRESULT _stdcall HasLeaderLines([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010682)]
        HRESULT _stdcall LeaderLines([out, retval] IMsoLeaderLines** RHS);
        [helpcontext(0x00010782)]
        HRESULT _stdcall ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                        [in, optional] VARIANT IMsoLegendKey, 
                        [in, optional] VARIANT AutoText, 
                        [in, optional] VARIANT HasLeaderLines, 
                        [in, optional] VARIANT ShowSeriesName, 
                        [in, optional] VARIANT ShowCategoryName, 
                        [in, optional] VARIANT ShowValue, 
                        [in, optional] VARIANT ShowPercentage, 
                        [in, optional] VARIANT ShowBubbleSize, 
                        [in, optional] VARIANT Separator, 
                        [out, retval] VARIANT* RHS);
        [propget]
        HRESULT _stdcall Format([out, retval] IMsoChartFormat** ppChartFormat);
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] IDispatch** ppval);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] long* pval);
        [propget, helpcontext(0x00010a59)]
        HRESULT _stdcall PictureUnit2([out, retval] double* RHS);
        [propput, helpcontext(0x00010a59)]
        HRESULT _stdcall PictureUnit2([in] double RHS);
        [propget]
        HRESULT _stdcall PlotColorIndex([out, retval] long* RHS);
        [propget]
        HRESULT _stdcall InvertColor([out, retval] long* RHS);
        [propput]
        HRESULT _stdcall InvertColor([in] long RHS);
        [propget]
        HRESULT _stdcall InvertColorIndex([out, retval] XlColorIndex* RHS);
        [propput]
        HRESULT _stdcall InvertColorIndex([in] XlColorIndex RHS);
        [propget]
        HRESULT _stdcall IsFiltered([out, retval] VARIANT_BOOL* RHS);
        [propput]
        HRESULT _stdcall IsFiltered([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(000C1721-0000-0000-C000-000000000046),
      helpcontext(0x0002008d),
      hidden
    ]
    interface IMsoErrorBars : IDispatch {
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] IMsoBorder** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x00010070)]
        HRESULT _stdcall ClearFormats([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010464)]
        HRESULT _stdcall EndStyle([out, retval] XlEndStyleCap* RHS);
        [propput, helpcontext(0x00010464)]
        HRESULT _stdcall EndStyle([in] XlEndStyleCap RHS);
        [propget]
        HRESULT _stdcall Format([out, retval] IMsoChartFormat** ppChartFormat);
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] IDispatch** ppval);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C170E-0000-0000-C000-000000000046),
      helpcontext(0x0002007e),
      hidden
    ]
    interface IMsoTrendline : IDispatch {
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000100b9)]
        HRESULT _stdcall Backward([out, retval] double* RHS);
        [propput, helpcontext(0x000100b9)]
        HRESULT _stdcall Backward([in] double RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] IMsoBorder** RHS);
        [helpcontext(0x00010070)]
        HRESULT _stdcall ClearFormats([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001009e)]
        HRESULT _stdcall DataLabel([out, retval] IMsoDataLabel** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100be)]
        HRESULT _stdcall DisplayEquation([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100be)]
        HRESULT _stdcall DisplayEquation([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000100bd)]
        HRESULT _stdcall DisplayRSquared([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100bd)]
        HRESULT _stdcall DisplayRSquared([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000100bf)]
        HRESULT _stdcall Forward([out, retval] double* RHS);
        [propput, helpcontext(0x000100bf)]
        HRESULT _stdcall Forward([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x000100ba)]
        HRESULT _stdcall Intercept([out, retval] double* RHS);
        [propput, helpcontext(0x000100ba)]
        HRESULT _stdcall Intercept([in] double RHS);
        [propget, helpcontext(0x000100bb)]
        HRESULT _stdcall InterceptIsAuto([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100bb)]
        HRESULT _stdcall InterceptIsAuto([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, helpcontext(0x000100bc)]
        HRESULT _stdcall NameIsAuto([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100bc)]
        HRESULT _stdcall NameIsAuto([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000100c0)]
        HRESULT _stdcall Order([out, retval] long* RHS);
        [propput, helpcontext(0x000100c0)]
        HRESULT _stdcall Order([in] long RHS);
        [propget, helpcontext(0x000100b8)]
        HRESULT _stdcall Period([out, retval] long* RHS);
        [propput, helpcontext(0x000100b8)]
        HRESULT _stdcall Period([in] long RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] XlTrendlineType* RHS);
        [propput, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([in] XlTrendlineType RHS);
        [propget]
        HRESULT _stdcall Format([out, retval] IMsoChartFormat** ppChartFormat);
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] IDispatch** ppval);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] long* pval);
        [propget, helpcontext(0x00010a5a)]
        HRESULT _stdcall Backward2([out, retval] double* RHS);
        [propput, helpcontext(0x00010a5a)]
        HRESULT _stdcall Backward2([in] double RHS);
        [propget, helpcontext(0x00010a5b)]
        HRESULT _stdcall Forward2([out, retval] double* RHS);
        [propput, helpcontext(0x00010a5b)]
        HRESULT _stdcall Forward2([in] double RHS);
    };

    [
      odl,
      uuid(000C1722-0000-0000-C000-000000000046),
      helpcontext(0x0002007d),
      hidden
    ]
    interface Trendlines : IDispatch {
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in, optional, defaultvalue(-4132)] XlTrendlineType Type, 
                        [in, optional] VARIANT Order, 
                        [in, optional] VARIANT Period, 
                        [in, optional] VARIANT Forward, 
                        [in, optional] VARIANT Backward, 
                        [in, optional] VARIANT Intercept, 
                        [in, optional] VARIANT DisplayEquation, 
                        [in, optional] VARIANT DisplayRSquared, 
                        [in, optional] VARIANT Name, 
                        [out, retval] IMsoTrendline** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in, optional] VARIANT Index, 
                        [out, retval] IMsoTrendline** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] IDispatch** ppval);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] long* pval);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in, optional] VARIANT Index, 
                        [out, retval] IMsoTrendline** RHS);
    };

    [
      odl,
      uuid(000C171F-0000-0000-C000-000000000046),
      helpcontext(0x00020073),
      hidden
    ]
    interface IMsoDataLabels : IDispatch {
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] IMsoBorder** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] IMsoInterior** RHS);
        [propget, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] IMsoCharacters** RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] ChartFont** RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010087)]
        HRESULT _stdcall AutoText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010087)]
        HRESULT _stdcall AutoText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([in] BSTR RHS);
        [propget, helpcontext(0x000100c2)]
        HRESULT _stdcall NumberFormatLinked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100c2)]
        HRESULT _stdcall NumberFormatLinked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([in] VARIANT RHS);
        [propget, helpcontext(0x000100ab)]
        HRESULT _stdcall ShowLegendKey([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100ab)]
        HRESULT _stdcall ShowLegendKey([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([in] VARIANT RHS);
        [propget, helpcontext(0x00010085)]
        HRESULT _stdcall Position([out, retval] XlDataLabelPosition* RHS);
        [propput, helpcontext(0x00010085)]
        HRESULT _stdcall Position([in] XlDataLabelPosition RHS);
        [propget, helpcontext(0x000107e6)]
        HRESULT _stdcall ShowSeriesName([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e6)]
        HRESULT _stdcall ShowSeriesName([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107e7)]
        HRESULT _stdcall ShowCategoryName([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e7)]
        HRESULT _stdcall ShowCategoryName([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107e8)]
        HRESULT _stdcall ShowValue([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e8)]
        HRESULT _stdcall ShowValue([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107e9)]
        HRESULT _stdcall ShowPercentage([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e9)]
        HRESULT _stdcall ShowPercentage([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107ea)]
        HRESULT _stdcall ShowBubbleSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107ea)]
        HRESULT _stdcall ShowBubbleSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107eb)]
        HRESULT _stdcall Separator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000107eb)]
        HRESULT _stdcall Separator([in] VARIANT RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IMsoDataLabel** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget]
        HRESULT _stdcall Format([out, retval] IMsoChartFormat** ppChartFormat);
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] IDispatch** ppval);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] long* pval);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IMsoDataLabel** RHS);
        HRESULT _stdcall Propagate([in] VARIANT Index);
        [propget]
        HRESULT _stdcall ShowRange([out, retval] VARIANT_BOOL* RHS);
        [propput]
        HRESULT _stdcall ShowRange([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(000C1720-0000-0000-C000-000000000046),
      helpcontext(0x00020072),
      hidden
    ]
    interface IMsoDataLabel : IDispatch {
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] IMsoBorder** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] IMsoInterior** RHS);
        [propget, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] IMsoCharacters** RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] ChartFont** RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010087)]
        HRESULT _stdcall AutoText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010087)]
        HRESULT _stdcall AutoText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([in] BSTR RHS);
        [propget, helpcontext(0x000100c2)]
        HRESULT _stdcall NumberFormatLinked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100c2)]
        HRESULT _stdcall NumberFormatLinked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([in] VARIANT RHS);
        [propget, helpcontext(0x000100ab)]
        HRESULT _stdcall ShowLegendKey([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100ab)]
        HRESULT _stdcall ShowLegendKey([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([in] VARIANT RHS);
        [propget, helpcontext(0x00010085)]
        HRESULT _stdcall Position([out, retval] XlDataLabelPosition* RHS);
        [propput, helpcontext(0x00010085)]
        HRESULT _stdcall Position([in] XlDataLabelPosition RHS);
        [propget, helpcontext(0x000107e6)]
        HRESULT _stdcall ShowSeriesName([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e6)]
        HRESULT _stdcall ShowSeriesName([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107e7)]
        HRESULT _stdcall ShowCategoryName([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e7)]
        HRESULT _stdcall ShowCategoryName([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107e8)]
        HRESULT _stdcall ShowValue([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e8)]
        HRESULT _stdcall ShowValue([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107e9)]
        HRESULT _stdcall ShowPercentage([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e9)]
        HRESULT _stdcall ShowPercentage([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107ea)]
        HRESULT _stdcall ShowBubbleSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107ea)]
        HRESULT _stdcall ShowBubbleSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107eb)]
        HRESULT _stdcall Separator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000107eb)]
        HRESULT _stdcall Separator([in] VARIANT RHS);
        [propget]
        HRESULT _stdcall Format([out, retval] IMsoChartFormat** ppChartFormat);
        [propget, hidden]
        HRESULT _stdcall _Height([out, retval] double* pval);
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] IDispatch** ppval);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] long* pval);
        [propget, hidden]
        HRESULT _stdcall _Width([out, retval] double* pval);
        [propput]
        HRESULT _stdcall Formula([in] BSTR pbstr);
        [propget]
        HRESULT _stdcall Formula([out, retval] BSTR* pbstr);
        [propput]
        HRESULT _stdcall FormulaR1C1([in] BSTR pbstr);
        [propget]
        HRESULT _stdcall FormulaR1C1([out, retval] BSTR* pbstr);
        [propput]
        HRESULT _stdcall FormulaLocal([in] BSTR pbstr);
        [propget]
        HRESULT _stdcall FormulaLocal([out, retval] BSTR* pbstr);
        [propput]
        HRESULT _stdcall FormulaR1C1Local([in] BSTR pbstr);
        [propget]
        HRESULT _stdcall FormulaR1C1Local([out, retval] BSTR* pbstr);
        [propget]
        HRESULT _stdcall ShowRange([out, retval] VARIANT_BOOL* RHS);
        [propput]
        HRESULT _stdcall ShowRange([in] VARIANT_BOOL RHS);
        [propget]
        HRESULT _stdcall Height([out, retval] double* pHeight);
        [propput]
        HRESULT _stdcall Height([in] double pHeight);
        [propget]
        HRESULT _stdcall Width([out, retval] double* pWidth);
        [propput]
        HRESULT _stdcall Width([in] double pWidth);
    };

    [
      odl,
      uuid(000C170D-0000-0000-C000-000000000046),
      helpcontext(0x00020029),
      hidden
    ]
    interface Points : IDispatch {
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] long Index, 
                        [out, retval] ChartPoint** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] IDispatch** ppval);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] long* pval);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] long Index, 
                        [out, retval] ChartPoint** RHS);
    };

    [
      odl,
      uuid(000C170C-0000-0000-C000-000000000046),
      helpcontext(0x0002002a),
      hidden
    ]
    interface ChartPoint : IDispatch {
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x00010097)]
        HRESULT _stdcall _ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                        [in, optional] VARIANT IMsoLegendKey, 
                        [in, optional] VARIANT AutoText, 
                        [in, optional] VARIANT HasLeaderLines, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] IMsoBorder** RHS);
        [helpcontext(0x00010070)]
        HRESULT _stdcall ClearFormats([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001009e)]
        HRESULT _stdcall DataLabel([out, retval] IMsoDataLabel** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100b6)]
        HRESULT _stdcall Explosion([out, retval] long* RHS);
        [propput, helpcontext(0x000100b6)]
        HRESULT _stdcall Explosion([in] long RHS);
        [propget, helpcontext(0x0001004d)]
        HRESULT _stdcall HasDataLabel([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001004d)]
        HRESULT _stdcall HasDataLabel([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] IMsoInterior** RHS);
        [propget, helpcontext(0x00010084)]
        HRESULT _stdcall InvertIfNegative([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010084)]
        HRESULT _stdcall InvertIfNegative([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010049)]
        HRESULT _stdcall MarkerBackgroundColor([out, retval] long* RHS);
        [propput, helpcontext(0x00010049)]
        HRESULT _stdcall MarkerBackgroundColor([in] long RHS);
        [propget, helpcontext(0x0001004a)]
        HRESULT _stdcall MarkerBackgroundColorIndex([out, retval] XlColorIndex* RHS);
        [propput, helpcontext(0x0001004a)]
        HRESULT _stdcall MarkerBackgroundColorIndex([in] XlColorIndex RHS);
        [propget, helpcontext(0x0001004b)]
        HRESULT _stdcall MarkerForegroundColor([out, retval] long* RHS);
        [propput, helpcontext(0x0001004b)]
        HRESULT _stdcall MarkerForegroundColor([in] long RHS);
        [propget, helpcontext(0x0001004c)]
        HRESULT _stdcall MarkerForegroundColorIndex([out, retval] XlColorIndex* RHS);
        [propput, helpcontext(0x0001004c)]
        HRESULT _stdcall MarkerForegroundColorIndex([in] XlColorIndex RHS);
        [propget, helpcontext(0x000100e7)]
        HRESULT _stdcall MarkerSize([out, retval] long* RHS);
        [propput, helpcontext(0x000100e7)]
        HRESULT _stdcall MarkerSize([in] long RHS);
        [propget, helpcontext(0x00010048)]
        HRESULT _stdcall MarkerStyle([out, retval] XlMarkerStyle* RHS);
        [propput, helpcontext(0x00010048)]
        HRESULT _stdcall MarkerStyle([in] XlMarkerStyle RHS);
        [helpcontext(0x000100d3)]
        HRESULT _stdcall Paste([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100a1)]
        HRESULT _stdcall PictureType([out, retval] XlChartPictureType* RHS);
        [propput, helpcontext(0x000100a1)]
        HRESULT _stdcall PictureType([in] XlChartPictureType RHS);
        [propget, helpcontext(0x000100a2)]
        HRESULT _stdcall PictureUnit([out, retval] double* RHS);
        [propput, helpcontext(0x000100a2)]
        HRESULT _stdcall PictureUnit([in] double RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001067b)]
        HRESULT _stdcall ApplyPictToSides([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001067b)]
        HRESULT _stdcall ApplyPictToSides([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001067c)]
        HRESULT _stdcall ApplyPictToFront([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001067c)]
        HRESULT _stdcall ApplyPictToFront([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001067d)]
        HRESULT _stdcall ApplyPictToEnd([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001067d)]
        HRESULT _stdcall ApplyPictToEnd([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001067e)]
        HRESULT _stdcall SecondaryPlot([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001067e)]
        HRESULT _stdcall SecondaryPlot([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [helpcontext(0x00010782)]
        HRESULT _stdcall ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                        [in, optional] VARIANT IMsoLegendKey, 
                        [in, optional] VARIANT AutoText, 
                        [in, optional] VARIANT HasLeaderLines, 
                        [in, optional] VARIANT ShowSeriesName, 
                        [in, optional] VARIANT ShowCategoryName, 
                        [in, optional] VARIANT ShowValue, 
                        [in, optional] VARIANT ShowPercentage, 
                        [in, optional] VARIANT ShowBubbleSize, 
                        [in, optional] VARIANT Separator, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010681)]
        HRESULT _stdcall Has3DEffect([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010681)]
        HRESULT _stdcall Has3DEffect([in] VARIANT_BOOL RHS);
        [propget]
        HRESULT _stdcall Format([out, retval] IMsoChartFormat** ppChartFormat);
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] IDispatch** ppval);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] long* pval);
        [propget, helpcontext(0x00010a59)]
        HRESULT _stdcall PictureUnit2([out, retval] double* RHS);
        [propput, helpcontext(0x00010a59)]
        HRESULT _stdcall PictureUnit2([in] double RHS);
        [propget]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propget]
        HRESULT _stdcall Height([out, retval] double* pval);
        [propget]
        HRESULT _stdcall Width([out, retval] double* pval);
        [propget]
        HRESULT _stdcall Left([out, retval] double* pval);
        [propget]
        HRESULT _stdcall Top([out, retval] double* pval);
        HRESULT _stdcall PieSliceLocation(
                        [in] XlPieSliceLocation loc, 
                        [in, optional, defaultvalue(2)] XlPieSliceIndex Index, 
                        [out, retval] double* pval);
    };

    [
      odl,
      uuid(000C1712-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface Axes : IDispatch {
        [id(0x60020000), propget]
        HRESULT Count([out, retval] long* pval);
        [id(0x60020001), propget]
        HRESULT Item(
                        [in] XlAxisType Type, 
                        [in, optional, defaultvalue(1)] XlAxisGroup AxisGroup, 
                        [out, retval] IMsoAxis** RHS);
        [id(0x60020002), propget]
        HRESULT _NewEnum([out, retval] IUnknown** pval);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(00000000), propget, helpcontext(0x00010000)]
        HRESULT _Default(
                        [in] XlAxisType Type, 
                        [in, optional, defaultvalue(1)] XlAxisGroup AxisGroup, 
                        [out, retval] IMsoAxis** RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(000C1713-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoAxis : IDispatch {
        [id(0x60020000), propget]
        HRESULT AxisBetweenCategories([out, retval] VARIANT_BOOL* pval);
        [id(0x60020000), propput]
        HRESULT AxisBetweenCategories([in] VARIANT_BOOL pval);
        [id(0x60020002), propget]
        HRESULT AxisGroup([out, retval] XlAxisGroup* pval);
        [id(0x60020003), propget]
        HRESULT AxisTitle([out, retval] IMsoAxisTitle** pval);
        [id(0x60020004), propget]
        HRESULT CategoryNames([out, retval] VARIANT* pval);
        [id(0x60020004), propput]
        HRESULT CategoryNames([in] VARIANT pval);
        [id(0x60020006), propget]
        HRESULT Crosses([out, retval] XlAxisCrosses* pval);
        [id(0x60020006), propput]
        HRESULT Crosses([in] XlAxisCrosses pval);
        [id(0x60020008), propget]
        HRESULT CrossesAt([out, retval] double* pval);
        [id(0x60020008), propput]
        HRESULT CrossesAt([in] double pval);
        [id(0x6002000a)]
        HRESULT Delete([out, retval] VARIANT* pval);
        [id(0x6002000b), propget]
        HRESULT HasMajorGridlines([out, retval] VARIANT_BOOL* pval);
        [id(0x6002000b), propput]
        HRESULT HasMajorGridlines([in] VARIANT_BOOL pval);
        [id(0x6002000d), propget]
        HRESULT HasMinorGridlines([out, retval] VARIANT_BOOL* pval);
        [id(0x6002000d), propput]
        HRESULT HasMinorGridlines([in] VARIANT_BOOL pval);
        [id(0x6002000f), propget]
        HRESULT HasTitle([out, retval] VARIANT_BOOL* pval);
        [id(0x6002000f), propput]
        HRESULT HasTitle([in] VARIANT_BOOL pval);
        [id(0x60020011), propget]
        HRESULT MajorGridlines([out, retval] GridLines** ppval);
        [id(0x60020012), propget]
        HRESULT MajorTickMark([out, retval] XlTickMark* pval);
        [id(0x60020012), propput]
        HRESULT MajorTickMark([in] XlTickMark pval);
        [id(0x60020014), propget]
        HRESULT MajorUnit([out, retval] double* pval);
        [id(0x60020014), propput]
        HRESULT MajorUnit([in] double pval);
        [id(0x60020016), propget]
        HRESULT LogBase([out, retval] double* pval);
        [id(0x60020016), propput]
        HRESULT LogBase([in] double pval);
        [id(0x60020018), propget]
        HRESULT TickLabelSpacingIsAuto([out, retval] VARIANT_BOOL* pval);
        [id(0x60020018), propput]
        HRESULT TickLabelSpacingIsAuto([in] VARIANT_BOOL pval);
        [id(0x6002001a), propget]
        HRESULT MajorUnitIsAuto([out, retval] VARIANT_BOOL* pval);
        [id(0x6002001a), propput]
        HRESULT MajorUnitIsAuto([in] VARIANT_BOOL pval);
        [id(0x6002001c), propget]
        HRESULT MaximumScale([out, retval] double* pval);
        [id(0x6002001c), propput]
        HRESULT MaximumScale([in] double pval);
        [id(0x6002001e), propget]
        HRESULT MaximumScaleIsAuto([out, retval] VARIANT_BOOL* pval);
        [id(0x6002001e), propput]
        HRESULT MaximumScaleIsAuto([in] VARIANT_BOOL pval);
        [id(0x60020020), propget]
        HRESULT MinimumScale([out, retval] double* pval);
        [id(0x60020020), propput]
        HRESULT MinimumScale([in] double pval);
        [id(0x60020022), propget]
        HRESULT MinimumScaleIsAuto([out, retval] VARIANT_BOOL* pval);
        [id(0x60020022), propput]
        HRESULT MinimumScaleIsAuto([in] VARIANT_BOOL pval);
        [id(0x60020024), propget]
        HRESULT MinorGridlines([out, retval] GridLines** ppval);
        [id(0x60020025), propget]
        HRESULT MinorTickMark([out, retval] XlTickMark* pval);
        [id(0x60020025), propput]
        HRESULT MinorTickMark([in] XlTickMark pval);
        [id(0x60020027), propget]
        HRESULT MinorUnit([out, retval] double* pval);
        [id(0x60020027), propput]
        HRESULT MinorUnit([in] double pval);
        [id(0x60020029), propget]
        HRESULT MinorUnitIsAuto([out, retval] VARIANT_BOOL* pval);
        [id(0x60020029), propput]
        HRESULT MinorUnitIsAuto([in] VARIANT_BOOL pval);
        [id(0x6002002b), propget]
        HRESULT ReversePlotOrder([out, retval] VARIANT_BOOL* pval);
        [id(0x6002002b), propput]
        HRESULT ReversePlotOrder([in] VARIANT_BOOL pval);
        [id(0x6002002d), propget]
        HRESULT ScaleType([out, retval] XlScaleType* pval);
        [id(0x6002002d), propput]
        HRESULT ScaleType([in] XlScaleType pval);
        [id(0x6002002f)]
        HRESULT Select([out, retval] VARIANT* pval);
        [id(0x60020030), propget]
        HRESULT TickLabelPosition([out, retval] XlTickLabelPosition* pval);
        [id(0x60020030), propput]
        HRESULT TickLabelPosition([in] XlTickLabelPosition pval);
        [id(0x60020032), propget]
        HRESULT TickLabels([out, retval] IMsoTickLabels** pval);
        [id(0x60020033), propget]
        HRESULT TickLabelSpacing([out, retval] int* pval);
        [id(0x60020033), propput]
        HRESULT TickLabelSpacing([in] int pval);
        [id(0x60020035), propget]
        HRESULT TickMarkSpacing([out, retval] int* pval);
        [id(0x60020035), propput]
        HRESULT TickMarkSpacing([in] int pval);
        [id(0x60020037), propget]
        HRESULT Type([out, retval] XlAxisType* pval);
        [id(0x60020037), propput]
        HRESULT Type([in] XlAxisType pval);
        [id(0x60020039), propget]
        HRESULT BaseUnit([out, retval] XlTimeUnit* pval);
        [id(0x60020039), propput]
        HRESULT BaseUnit([in] XlTimeUnit pval);
        [id(0x6002003b), propget]
        HRESULT BaseUnitIsAuto([out, retval] VARIANT_BOOL* pval);
        [id(0x6002003b), propput]
        HRESULT BaseUnitIsAuto([in] VARIANT_BOOL pval);
        [id(0x6002003d), propget]
        HRESULT MajorUnitScale([out, retval] XlTimeUnit* pval);
        [id(0x6002003d), propput]
        HRESULT MajorUnitScale([in] XlTimeUnit pval);
        [id(0x6002003f), propget]
        HRESULT MinorUnitScale([out, retval] XlTimeUnit* pval);
        [id(0x6002003f), propput]
        HRESULT MinorUnitScale([in] XlTimeUnit pval);
        [id(0x60020041), propget]
        HRESULT CategoryType([out, retval] XlCategoryType* pval);
        [id(0x60020041), propput]
        HRESULT CategoryType([in] XlCategoryType pval);
        [id(0x60020043), propget]
        HRESULT Left([out, retval] double* pval);
        [id(0x60020044), propget]
        HRESULT Top([out, retval] double* pval);
        [id(0x60020045), propget]
        HRESULT Width([out, retval] double* pval);
        [id(0x60020046), propget]
        HRESULT Height([out, retval] double* pval);
        [id(0x60020047), propget]
        HRESULT DisplayUnit([out, retval] XlDisplayUnit* pval);
        [id(0x60020047), propput]
        HRESULT DisplayUnit([in] XlDisplayUnit pval);
        [id(0x60020049), propget]
        HRESULT DisplayUnitCustom([out, retval] double* pval);
        [id(0x60020049), propput]
        HRESULT DisplayUnitCustom([in] double pval);
        [id(0x6002004b), propget]
        HRESULT HasDisplayUnitLabel([out, retval] VARIANT_BOOL* pval);
        [id(0x6002004b), propput]
        HRESULT HasDisplayUnitLabel([in] VARIANT_BOOL pval);
        [id(0x6002004d), propget]
        HRESULT DisplayUnitLabel([out, retval] IMsoDisplayUnitLabel** pval);
        [id(0x6002004e), propget]
        HRESULT Border([out, retval] IMsoBorder** ppborder);
        [id(0x6002004f), propget]
        HRESULT Name([out, retval] BSTR* pbstr);
        [id(0x60020050), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppChartFormat);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(000C1711-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoDataTable : IDispatch {
        [id(0x60020000), propput]
        HRESULT ShowLegendKey([in] VARIANT_BOOL pfVisible);
        [id(0x60020000), propget]
        HRESULT ShowLegendKey([out, retval] VARIANT_BOOL* pfVisible);
        [id(0x60020002), propput]
        HRESULT HasBorderHorizontal([in] VARIANT_BOOL pfVisible);
        [id(0x60020002), propget]
        HRESULT HasBorderHorizontal([out, retval] VARIANT_BOOL* pfVisible);
        [id(0x60020004), propput]
        HRESULT HasBorderVertical([in] VARIANT_BOOL pfVisible);
        [id(0x60020004), propget]
        HRESULT HasBorderVertical([out, retval] VARIANT_BOOL* pfVisible);
        [id(0x60020006), propput]
        HRESULT HasBorderOutline([in] VARIANT_BOOL pfVisible);
        [id(0x60020006), propget]
        HRESULT HasBorderOutline([out, retval] VARIANT_BOOL* pfVisible);
        [id(0x60020008), propget]
        HRESULT Border([out, retval] IMsoBorder** ppline);
        [id(0x60020009), propget]
        HRESULT Font([out, retval] ChartFont** pfont);
        [id(0x6002000a)]
        HRESULT Select();
        [id(0x6002000b)]
        HRESULT Delete();
        [id(0x6002000c), propget]
        HRESULT Parent([out, retval] IDispatch** ppval);
        [id(0x6002000d), propget, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([out, retval] VARIANT* RHS);
        [id(0x6002000d), propput, helpcontext(0x000105f5)]
        HRESULT AutoScaleFont([in] VARIANT RHS);
        [id(0x6002000f), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppChartFormat);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C170F-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoChartTitle : IDispatch {
        [id(0x60020000), propput]
        HRESULT Caption([in] BSTR pbstr);
        [id(0x60020000), propget]
        HRESULT Caption([out, retval] BSTR* pbstr);
        [id(0x60020002), propget]
        HRESULT Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] IMsoCharacters** RHS);
        [id(0x60020003), propget]
        HRESULT Font([out, retval] ChartFont** ppfont);
        [id(0x60020004), propput]
        HRESULT HorizontalAlignment([in] VARIANT Val);
        [id(0x60020004), propget]
        HRESULT HorizontalAlignment([out, retval] VARIANT* Val);
        [id(0x60020006), propget]
        HRESULT Left([out, retval] double* pval);
        [id(0x60020006), propput]
        HRESULT Left([in] double pval);
        [id(0x60020008), propput]
        HRESULT Orientation([in] VARIANT Val);
        [id(0x60020008), propget]
        HRESULT Orientation([out, retval] VARIANT* Val);
        [id(0x6002000a), propget]
        HRESULT Shadow([out, retval] VARIANT_BOOL* pval);
        [id(0x6002000a), propput]
        HRESULT Shadow([in] VARIANT_BOOL pval);
        [id(0x6002000c), propput]
        HRESULT Text([in] BSTR pbstr);
        [id(0x6002000c), propget]
        HRESULT Text([out, retval] BSTR* pbstr);
        [id(0x6002000e), propget]
        HRESULT Top([out, retval] double* pval);
        [id(0x6002000e), propput]
        HRESULT Top([in] double pval);
        [id(0x60020010), propput]
        HRESULT VerticalAlignment([in] VARIANT Val);
        [id(0x60020010), propget]
        HRESULT VerticalAlignment([out, retval] VARIANT* Val);
        [id(0x60020012), propget]
        HRESULT ReadingOrder([out, retval] int* pval);
        [id(0x60020012), propput]
        HRESULT ReadingOrder([in] int pval);
        [id(0x60020014), propput]
        HRESULT AutoScaleFont([in] VARIANT Val);
        [id(0x60020014), propget]
        HRESULT AutoScaleFont([out, retval] VARIANT* Val);
        [id(0x60020016), propget]
        HRESULT Interior([out, retval] IMsoInterior** ppinterior);
        [id(0x60020017), propget]
        HRESULT Fill([out, retval] ChartFillFormat** ppinterior);
        [id(0x60020018)]
        HRESULT Delete([out, retval] VARIANT* pval);
        [id(0x60020019), propget]
        HRESULT Border([out, retval] IMsoBorder** ppborder);
        [id(0x6002001a), propget]
        HRESULT Name([out, retval] BSTR* pval);
        [id(0x6002001b), propget]
        HRESULT Parent([out, retval] IDispatch** ppval);
        [id(0x6002001c)]
        HRESULT Select([out, retval] VARIANT* pval);
        [id(0x00000972), propget, helpcontext(0x00010972)]
        HRESULT IncludeInLayout([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000972), propput, helpcontext(0x00010972)]
        HRESULT IncludeInLayout([in] VARIANT_BOOL RHS);
        [id(0x00000687), propget, helpcontext(0x00010687)]
        HRESULT Position([out, retval] XlChartElementPosition* pval);
        [id(0x00000687), propput, helpcontext(0x00010687)]
        HRESULT Position([in] XlChartElementPosition pval);
        [id(0x60020021), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppval);
        [id(0x60020022), propget]
        HRESULT Height([out, retval] double* pval);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x60020025), propget]
        HRESULT Width([out, retval] double* pval);
        [id(0x60020026), propput]
        HRESULT Formula([in] BSTR pbstr);
        [id(0x60020026), propget]
        HRESULT Formula([out, retval] BSTR* pbstr);
        [id(0x60020028), propput]
        HRESULT FormulaR1C1([in] BSTR pbstr);
        [id(0x60020028), propget]
        HRESULT FormulaR1C1([out, retval] BSTR* pbstr);
        [id(0x6002002a), propput]
        HRESULT FormulaLocal([in] BSTR pbstr);
        [id(0x6002002a), propget]
        HRESULT FormulaLocal([out, retval] BSTR* pbstr);
        [id(0x6002002c), propput]
        HRESULT FormulaR1C1Local([in] BSTR pbstr);
        [id(0x6002002c), propget]
        HRESULT FormulaR1C1Local([out, retval] BSTR* pbstr);
    };

    [
      odl,
      uuid(ABFA087C-F703-4D53-946E-37FF82B2C994),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoAxisTitle : IMsoChartTitle {
    };

    [
      odl,
      uuid(6EA00553-9439-4D5A-B1E6-DC15A54DA8B2),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoDisplayUnitLabel : IMsoChartTitle {
    };

    [
      odl,
      uuid(000C1726-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoTickLabels : IDispatch {
        [id(0x60020000), propget]
        HRESULT Parent([out, retval] IDispatch** ppval);
        [id(0x60020001)]
        HRESULT Delete([out, retval] VARIANT* pval);
        [id(0x60020002), propget]
        HRESULT Font([out, retval] ChartFont** ppval);
        [id(0x60020003), propget]
        HRESULT Name([out, retval] BSTR* pval);
        [id(0x60020004), propget]
        HRESULT NumberFormat([out, retval] BSTR* pval);
        [id(0x60020004), propput]
        HRESULT NumberFormat([in] BSTR pval);
        [id(0x60020006), propget]
        HRESULT NumberFormatLinked([out, retval] VARIANT_BOOL* pval);
        [id(0x60020006), propput]
        HRESULT NumberFormatLinked([in] VARIANT_BOOL pval);
        [id(0x60020008), propget]
        HRESULT NumberFormatLocal([out, retval] VARIANT* pval);
        [id(0x60020008), propput]
        HRESULT NumberFormatLocal([in] VARIANT pval);
        [id(0x6002000a), propget]
        HRESULT Orientation([out, retval] XlTickLabelOrientation* pval);
        [id(0x6002000a), propput]
        HRESULT Orientation([in] XlTickLabelOrientation pval);
        [id(0x6002000c)]
        HRESULT Select([out, retval] VARIANT* pval);
        [id(0x6002000d), propget]
        HRESULT ReadingOrder([out, retval] int* pval);
        [id(0x6002000d), propput]
        HRESULT ReadingOrder([in] int pval);
        [id(0x6002000f), propget]
        HRESULT AutoScaleFont([out, retval] VARIANT* pval);
        [id(0x6002000f), propput]
        HRESULT AutoScaleFont([in] VARIANT pval);
        [id(0x60020011), propget]
        HRESULT Depth([out, retval] int* pval);
        [id(0x60020012), propget]
        HRESULT Offset([out, retval] int* pval);
        [id(0x60020012), propput]
        HRESULT Offset([in] int pval);
        [id(0x60020014), propget]
        HRESULT Alignment([out, retval] int* pval);
        [id(0x60020014), propput]
        HRESULT Alignment([in] int pval);
        [id(0x60020016), propget]
        HRESULT MultiLevel([out, retval] VARIANT_BOOL* pval);
        [id(0x60020016), propput]
        HRESULT MultiLevel([in] VARIANT_BOOL pval);
        [id(0x60020018), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppChartFormat);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(A98639A1-CB0C-4A5C-A511-96547F752ACD),
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoHyperlinks : IDispatch {
    };

    [
      odl,
      uuid(000C172C-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoDropLines : IDispatch {
        [id(0x60020000), propget]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x60020001)]
        HRESULT Select();
        [id(0x60020002), propget]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x60020003), propget]
        HRESULT Border([out, retval] IMsoBorder** RHS);
        [id(0x60020004)]
        HRESULT Delete();
        [id(0x60020005), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppChartFormat);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C172E-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoHiLoLines : IDispatch {
        [id(0x60020000), propget]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x60020001), propget]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x60020002)]
        HRESULT Select();
        [id(0x60020003), propget]
        HRESULT Border([out, retval] IMsoBorder** RHS);
        [id(0x60020004)]
        HRESULT Delete();
        [id(0x60020005), propget]
        HRESULT Format([out, retval] IMsoChartFormat** ppChartFormat);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C1727-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoChartGroup : IDispatch {
        [id(0x60020000), propput]
        HRESULT AxisGroup([in] int piGroup);
        [id(0x60020000), propget]
        HRESULT AxisGroup([out, retval] int* piGroup);
        [id(0x60020002), propput]
        HRESULT DoughnutHoleSize([in] int pDoughnutHoleSize);
        [id(0x60020002), propget]
        HRESULT DoughnutHoleSize([out, retval] int* pDoughnutHoleSize);
        [id(0x60020004), propget]
        HRESULT DownBars([out, retval] IMsoDownBars** ppdownbars);
        [id(0x60020005), propget]
        HRESULT DropLines([out, retval] IMsoDropLines** ppdroplines);
        [id(0x60020006), propput]
        HRESULT FirstSliceAngle([in] int pFirstSliceAngle);
        [id(0x60020006), propget]
        HRESULT FirstSliceAngle([out, retval] int* pFirstSliceAngle);
        [id(0x60020008), propput]
        HRESULT GapWidth([in] int pGapWidth);
        [id(0x60020008), propget]
        HRESULT GapWidth([out, retval] int* pGapWidth);
        [id(0x6002000a), propput]
        HRESULT HasDropLines([in] VARIANT_BOOL pfHasDropLines);
        [id(0x6002000a), propget]
        HRESULT HasDropLines([out, retval] VARIANT_BOOL* pfHasDropLines);
        [id(0x6002000c), propput]
        HRESULT HasHiLoLines([in] VARIANT_BOOL pfHasHiLoLines);
        [id(0x6002000c), propget]
        HRESULT HasHiLoLines([out, retval] VARIANT_BOOL* pfHasHiLoLines);
        [id(0x6002000e), propput]
        HRESULT HasRadarAxisLabels([in] VARIANT_BOOL pfHasRadarAxisLabels);
        [id(0x6002000e), propget]
        HRESULT HasRadarAxisLabels([out, retval] VARIANT_BOOL* pfHasRadarAxisLabels);
        [id(0x60020010), propput]
        HRESULT HasSeriesLines([in] VARIANT_BOOL pfHasSeriesLines);
        [id(0x60020010), propget]
        HRESULT HasSeriesLines([out, retval] VARIANT_BOOL* pfHasSeriesLines);
        [id(0x60020012), propput]
        HRESULT HasUpDownBars([in] VARIANT_BOOL pfHasUpDownBars);
        [id(0x60020012), propget]
        HRESULT HasUpDownBars([out, retval] VARIANT_BOOL* pfHasUpDownBars);
        [id(0x60020014), propget]
        HRESULT HiLoLines([out, retval] IMsoHiLoLines** ppHiLoLines);
        [id(0x60020015), propget]
        HRESULT Index([out, retval] int* pIndex);
        [id(0x60020016), propput]
        HRESULT Overlap([in] int pOverlap);
        [id(0x60020016), propget]
        HRESULT Overlap([out, retval] int* pOverlap);
        [id(0x60020018), propget]
        HRESULT RadarAxisLabels([out, retval] IDispatch** ppRadarAxisLabels);
        [id(0x60020019)]
        HRESULT SeriesCollection(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** ppSeriesCollection);
        [id(0x6002001a), propget]
        HRESULT SeriesLines([out, retval] IMsoSeriesLines** ppSeriesLines);
        [id(0x6002001b), propput, hidden]
        HRESULT SubType([in] int pSubType);
        [id(0x6002001b), propget, hidden]
        HRESULT SubType([out, retval] int* pSubType);
        [id(0x6002001d), propput, hidden]
        HRESULT Type([in] int ptype);
        [id(0x6002001d), propget, hidden]
        HRESULT Type([out, retval] int* ptype);
        [id(0x6002001f), propget]
        HRESULT UpBars([out, retval] IMsoUpBars** ppUpBars);
        [id(0x60020020), propput]
        HRESULT VaryByCategories([in] VARIANT_BOOL pfVaryByCategories);
        [id(0x60020020), propget]
        HRESULT VaryByCategories([out, retval] VARIANT_BOOL* pfVaryByCategories);
        [id(0x60020022), propget]
        HRESULT SizeRepresents([out, retval] XlSizeRepresents* pXlSizeRepresents);
        [id(0x60020022), propput]
        HRESULT SizeRepresents([in] XlSizeRepresents pXlSizeRepresents);
        [id(0x60020024), propput]
        HRESULT BubbleScale([in] int pbubblescale);
        [id(0x60020024), propget]
        HRESULT BubbleScale([out, retval] int* pbubblescale);
        [id(0x60020026), propput]
        HRESULT ShowNegativeBubbles([in] VARIANT_BOOL pfShowNegativeBubbles);
        [id(0x60020026), propget]
        HRESULT ShowNegativeBubbles([out, retval] VARIANT_BOOL* pfShowNegativeBubbles);
        [id(0x60020028), propput]
        HRESULT SplitType([in] XlChartSplitType pChartSplitType);
        [id(0x60020028), propget]
        HRESULT SplitType([out, retval] XlChartSplitType* pChartSplitType);
        [id(0x6002002a), propget]
        HRESULT SplitValue([out, retval] VARIANT* pSplitValue);
        [id(0x6002002a), propput]
        HRESULT SplitValue([in] VARIANT pSplitValue);
        [id(0x6002002c), propget]
        HRESULT SecondPlotSize([out, retval] int* pSecondPlotSize);
        [id(0x6002002c), propput]
        HRESULT SecondPlotSize([in] int pSecondPlotSize);
        [id(0x6002002e), propget]
        HRESULT Has3DShading([out, retval] VARIANT_BOOL* RHS);
        [id(0x6002002e), propput]
        HRESULT Has3DShading([in] VARIANT_BOOL RHS);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000097)]
        HRESULT CategoryCollection(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** ppcatcollection);
        [id(0x00000098)]
        HRESULT FullCategoryCollection(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** ppcatcollection);
    };

    [
      odl,
      uuid(000C172B-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartGroups : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000076), propget, helpcontext(0x00010076)]
        HRESULT Count([out, retval] long* RHS);
        [id(0x000000aa), helpcontext(0x000100aa)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IMsoChartGroup** RHS);
        [id(0xfffffffc), helpcontext(0x0000fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** RHS);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C1731-0000-0000-C000-000000000046),
      helpcontext(0x00020038),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoCharacters : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x0000008b), propget, helpcontext(0x0001008b)]
        HRESULT Caption([out, retval] BSTR* RHS);
        [id(0x0000008b), propput, helpcontext(0x0001008b)]
        HRESULT Caption([in] BSTR RHS);
        [id(0x00000076), propget, helpcontext(0x00010076)]
        HRESULT Count([out, retval] long* RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([out, retval] VARIANT* RHS);
        [id(0x00000092), propget, helpcontext(0x00010092)]
        HRESULT Font([out, retval] ChartFont** RHS);
        [id(0x000000fc), helpcontext(0x000100fc)]
        HRESULT Insert(
                        [in] BSTR bstr, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000008a), propget, helpcontext(0x0001008a)]
        HRESULT Text([out, retval] BSTR* RHS);
        [id(0x0000008a), propput, helpcontext(0x0001008a)]
        HRESULT Text([in] BSTR RHS);
        [id(0x000005f2), propget, helpcontext(0x000105f2)]
        HRESULT PhoneticCharacters([out, retval] BSTR* RHS);
        [id(0x000005f2), propput, helpcontext(0x000105f2)]
        HRESULT PhoneticCharacters([in] BSTR RHS);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
    };

    [
      odl,
      uuid(000C1730-0000-0000-C000-000000000046),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoChartFormat : IDispatch {
        [id(0x60020000), propget]
        HRESULT Fill([out, retval] FillFormat** ppfill);
        [id(0x60020001), propget]
        HRESULT Glow([out, retval] GlowFormat** ppGlow);
        [id(0x60020002), propget]
        HRESULT Line([out, retval] LineFormat** ppline);
        [id(0x60020003), propget]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0x60020004), propget]
        HRESULT PictureFormat([out, retval] PictureFormat** ppPictureFormat);
        [id(0x60020005), propget]
        HRESULT Shadow([out, retval] ShadowFormat** ppShadow);
        [id(0x60020006), propget]
        HRESULT SoftEdge([out, retval] SoftEdgeFormat** ppSoftEdge);
        [id(0x60020007), propget]
        HRESULT TextFrame2([out, retval] TextFrame2** ppTextFrame);
        [id(0x60020008), propget]
        HRESULT ThreeD([out, retval] ThreeDFormat** ppThreeD);
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] IDispatch** ppval);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] long* pval);
        [id(0x000000c8), propget]
        HRESULT Adjustments([out, retval] Adjustments** ppAdjustments);
        [id(0x000000c9), propget]
        HRESULT AutoShapeType([out, retval] MsoAutoShapeType* AutoShapeType);
        [id(0x000000c9), propput]
        HRESULT AutoShapeType([in] MsoAutoShapeType AutoShapeType);
    };

    

    [
      odl,
      uuid(000C03B9-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface BulletFormat2 : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Character([out, retval] int* Character);
        [id(0x00000002), propput]
        HRESULT Character([in] int Character);
        [id(0x00000003), propget]
        HRESULT Font([out, retval] Font2** Font);
        [id(0x00000004), propget]
        HRESULT Number([out, retval] int* Number);
        [id(0x00000005)]
        HRESULT Picture([in] BSTR FileName);
        [id(0x00000006), propget]
        HRESULT RelativeSize([out, retval] long*  Size);
        [id(0x00000006), propput]
        HRESULT RelativeSize([in] long Size);
        [id(0x00000007), propget]
        HRESULT StartValue([out, retval] int* Start);
        [id(0x00000007), propput]
        HRESULT StartValue([in] int Start);
        [id(0x00000008), propget]
        HRESULT Style([out, retval] MsoNumberedBulletStyle* Style);
        [id(0x00000008), propput]
        HRESULT Style([in] MsoNumberedBulletStyle Style);
        [id(0x00000009), propget]
        HRESULT Type([out, retval] MsoBulletType* Type);
        [id(0x00000009), propput]
        HRESULT Type([in] MsoBulletType Type);
        [id(0x0000000a), propget]
        HRESULT UseTextColor([out, retval] MsoTriState* UseTextColor);
        [id(0x0000000a), propput]
        HRESULT UseTextColor([in] MsoTriState UseTextColor);
        [id(0x0000000b), propget]
        HRESULT UseTextFont([out, retval] MsoTriState* UseTextFont);
        [id(0x0000000b), propput]
        HRESULT UseTextFont([in] MsoTriState UseTextFont);
        [id(0x0000000c), propget]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x0000000c), propput]
        HRESULT Visible([in] MsoTriState Visible);
    };

    

    [
      odl,
      uuid(000C03BA-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TabStops2 : _IMsoDispObj {
        [id(00000000)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] TabStop2** TabStop);
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002)]
        HRESULT Add(
                        [in] MsoTabStopType Type, 
                        [in] long Position, 
                        [out, retval] TabStop2** TabStop);
        [id(0x00000003), propget]
        HRESULT Count([out, retval] int* Count);
        [id(0x00000004), propget]
        HRESULT DefaultSpacing([out, retval] long*  Spacing);
        [id(0x00000004), propput]
        HRESULT DefaultSpacing([in] long Spacing);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
    };

    [
      odl,
      uuid(000C03BB-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TabStop2 : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002)]
        HRESULT Clear();
        [id(0x00000003), propget]
        HRESULT Position([out, retval] long*  Position);
        [id(0x00000003), propput]
        HRESULT Position([in] long Position);
        [id(0x00000004), propget]
        HRESULT Type([out, retval] MsoTabStopType* Type);
        [id(0x00000004), propput]
        HRESULT Type([in] MsoTabStopType Type);
    };

    

    [
      odl,
      uuid(000C03C1-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Ruler2 : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Levels([out, retval] RulerLevels2** RulerLevels);
        [id(0x00000003), propget]
        HRESULT TabStops([out, retval] TabStops2** TabStops);
    };

    [
      odl,
      uuid(000C03C2-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface RulerLevels2 : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Count([out, retval] int* Count);
        [id(00000000)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] RulerLevel2** RulerLevel);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
    };

    [
      odl,
      uuid(000C03C3-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface RulerLevel2 : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT FirstMargin([out, retval] long*  FirstMargin);
        [id(0x00000002), propput]
        HRESULT FirstMargin([in] long FirstMargin);
        [id(0x00000003), propget]
        HRESULT LeftMargin([out, retval] long*  LeftMargin);
        [id(0x00000003), propput]
        HRESULT LeftMargin([in] long LeftMargin);
    };

    

    [
      odl,
      uuid(000CD809-0000-0000-C000-000000000046),
      helpcontext(0x0004fd58),
      dual,
      oleautomation
    ]
    interface EncryptionProvider : IDispatch {
        [id(0x60020000), helpcontext(0x0004fd59)]
        HRESULT GetProviderDetail(
                        [in] EncryptionProviderDetail encprovdet, 
                        [out, retval] VARIANT* pvar);
        [id(0x60020001), helpcontext(0x0004fd5a)]
        HRESULT NewSession(
                        [in] IUnknown* ParentWindow, 
                        [out, retval] int* SessionHandle);
        [id(0x60020002), helpcontext(0x0004fd5b)]
        HRESULT Authenticate(
                        [in] IUnknown* ParentWindow, 
                        [in] IUnknown* EncryptionData, 
                        [out] unsigned int* PermissionsMask, 
                        [out, retval] int* SessionHandle);
        [id(0x60020003), helpcontext(0x0004fd5c)]
        HRESULT CloneSession(
                        [in] int SessionHandle, 
                        [out, retval] int* SessionHandleClone);
        [id(0x60020004), helpcontext(0x0004fd5d)]
        HRESULT EndSession([in] int SessionHandle);
        [id(0x60020005), helpcontext(0x0004fd5e)]
        HRESULT Save(
                        [in] int SessionHandle, 
                        [in] IUnknown* EncryptionData, 
                        [out, retval] int* EncryptionDataSize);
        [id(0x60020006), helpcontext(0x0004fd5f)]
        HRESULT EncryptStream(
                        [in] int SessionHandle, 
                        [in] BSTR StreamName, 
                        [in] IUnknown* UnencryptedStream, 
                        [in] IUnknown* EncryptedStream);
        [id(0x60020007), helpcontext(0x0004fd60)]
        HRESULT DecryptStream(
                        [in] int SessionHandle, 
                        [in] BSTR StreamName, 
                        [in] IUnknown* EncryptedStream, 
                        [in] IUnknown* UnencryptedStream);
        [id(0x60020008), helpcontext(0x0004fd61)]
        HRESULT ShowSettings(
                        [in] int SessionHandle, 
                        [in] IUnknown* ParentWindow, 
                        [in] VARIANT_BOOL ReadOnly, 
                        [out] VARIANT_BOOL* Remove);
    };

    

    [
      odl,
      uuid(000C03C4-0000-0000-C000-000000000046),
      helpcontext(0x00050140),
      dual,
      nonextensible,
      oleautomation
    ]
    interface IBlogExtensibility : IDispatch {
        [id(0x00000001), helpcontext(0x00050141)]
        HRESULT BlogProviderProperties(
                        [out] BSTR* BlogProvider, 
                        [out] BSTR* FriendlyName, 
                        [out] MsoBlogCategorySupport* CategorySupport, 
                        [out] VARIANT_BOOL* Padding);
        [id(0x00000002), helpcontext(0x00050142)]
        HRESULT SetupBlogAccount(
                        [in] BSTR Account, 
                        [in] long ParentWindow, 
                        [in] IDispatch* Document, 
                        [in] VARIANT_BOOL NewAccount, 
                        [out] VARIANT_BOOL* ShowPictureUI);
        [id(0x00000003), helpcontext(0x00050143)]
        HRESULT GetUserBlogs(
                        [in] BSTR Account, 
                        [in] long ParentWindow, 
                        [in] IDispatch* Document, 
                        [out] SAFEARRAY(BSTR)* BlogNames, 
                        [out] SAFEARRAY(BSTR)* BlogIDs, 
                        [out] SAFEARRAY(BSTR)* BlogURLs);
        [id(0x00000004), helpcontext(0x00050144)]
        HRESULT GetRecentPosts(
                        [in] BSTR Account, 
                        [in] long ParentWindow, 
                        [in] IDispatch* Document, 
                        [out] SAFEARRAY(BSTR)* PostTitles, 
                        [out] SAFEARRAY(BSTR)* PostDates, 
                        [out] SAFEARRAY(BSTR)* PostIDs);
        [id(0x00000005), helpcontext(0x00050145)]
        HRESULT Open(
                        [in] BSTR Account, 
                        [in] BSTR PostID, 
                        [in] long ParentWindow, 
                        [out] BSTR* xHTML, 
                        [out] BSTR* Title, 
                        [out] BSTR* DatePosted, 
                        [out] SAFEARRAY(BSTR)* Categories);
        [id(0x00000006), helpcontext(0x00050146)]
        HRESULT PublishPost(
                        [in] BSTR Account, 
                        [in] long ParentWindow, 
                        [in] IDispatch* Document, 
                        [in] BSTR xHTML, 
                        [in] BSTR Title, 
                        [in] BSTR DateTime, 
                        [in] SAFEARRAY(BSTR) Categories, 
                        [in] VARIANT_BOOL Draft, 
                        [out] BSTR* PostID, 
                        [out] BSTR* PublishMessage);
        [id(0x00000007), helpcontext(0x00050147)]
        HRESULT RepublishPost(
                        [in] BSTR Account, 
                        [in] long ParentWindow, 
                        [in] IDispatch* Document, 
                        [in] BSTR PostID, 
                        [in] BSTR xHTML, 
                        [in] BSTR Title, 
                        [in] BSTR DateTime, 
                        [in] SAFEARRAY(BSTR) Categories, 
                        [in] VARIANT_BOOL Draft, 
                        [out] BSTR* PublishMessage);
        [id(0x00000008), helpcontext(0x00050148)]
        HRESULT GetCategories(
                        [in] BSTR Account, 
                        [in] long ParentWindow, 
                        [in] IDispatch* Document, 
                        [out] SAFEARRAY(BSTR)* Categories);
    };

    [
      odl,
      uuid(000C03C5-0000-0000-C000-000000000046),
      helpcontext(0x00050528),
      dual,
      nonextensible,
      oleautomation
    ]
    interface IBlogPictureExtensibility : IDispatch {
        [id(0x00000001), helpcontext(0x00050529)]
        HRESULT BlogPictureProviderProperties(
                        [out] BSTR* BlogPictureProvider, 
                        [out] BSTR* FriendlyName);
        [id(0x00000002), helpcontext(0x0005052a)]
        HRESULT CreatePictureAccount(
                        [in] BSTR Account, 
                        [in] BSTR BlogProvider, 
                        [in] long ParentWindow, 
                        [in] IDispatch* Document);
        [id(0x00000003), helpcontext(0x0005052b)]
        HRESULT PublishPicture(
                        [in] BSTR Account, 
                        [in] long ParentWindow, 
                        [in] IDispatch* Document, 
                        [in] IUnknown* Image, 
                        [out] BSTR* PictureURI, 
                        [in] long ImageType);
    };

    [
      odl,
      uuid(000C03D4-0000-0000-C000-000000000046),
      helpcontext(0x00050910),
      oleautomation
    ]
    interface IConverterPreferences : IUnknown {
        [helpcontext(0x00050911)]
        HRESULT _stdcall HrGetMacroEnabled([out] int* pfMacroEnabled);
        [helpcontext(0x00050912)]
        HRESULT _stdcall HrCheckFormat([out] int* pFormat);
        [helpcontext(0x00050913)]
        HRESULT _stdcall HrGetLossySave([out] int* pfLossySave);
    };

    [
      odl,
      uuid(000C03D5-0000-0000-C000-000000000046),
      helpcontext(0x00050cf8),
      oleautomation
    ]
    interface IConverterApplicationPreferences : IUnknown {
        [helpcontext(0x00050cf9)]
        HRESULT _stdcall HrGetLcid([out] unsigned long* plcid);
        [helpcontext(0x00050cfa)]
        HRESULT _stdcall HrGetHwnd([out] long* phwnd);
        [helpcontext(0x00050cfb)]
        HRESULT _stdcall HrGetApplication([out] BSTR* pbstrApplication);
        [helpcontext(0x00050cfc)]
        HRESULT _stdcall HrCheckFormat([out] int* pFormat);
    };

    [
      odl,
      uuid(000C03D6-0000-0000-C000-000000000046),
      helpcontext(0x000510e0),
      oleautomation
    ]
    interface IConverterUICallback : IUnknown {
        [helpcontext(0x000510e1)]
        HRESULT _stdcall HrReportProgress([in] unsigned int uPercentComplete);
        [helpcontext(0x000510e2)]
        HRESULT _stdcall HrMessageBox(
                        [in] BSTR bstrText, 
                        [in] BSTR bstrCaption, 
                        [in] unsigned int uType, 
                        [out] int* pidResult);
        [helpcontext(0x000510e3)]
        HRESULT _stdcall HrInputBox(
                        [in] BSTR bstrText, 
                        [in] BSTR bstrCaption, 
                        [out] BSTR* pbstrInput, 
                        [in] int fPassword);
    };

    [
      odl,
      uuid(000C03D7-0000-0000-C000-000000000046),
      helpcontext(0x000514c8),
      oleautomation
    ]
    interface IConverter : IUnknown {
        [helpcontext(0x000514c9)]
        HRESULT _stdcall HrInitConverter(
                        [in] IConverterApplicationPreferences* pcap, 
                        [out] IConverterPreferences** ppcp, 
                        [in] IConverterUICallback* pcuic);
        [helpcontext(0x000514ca)]
        HRESULT _stdcall HrUninitConverter([in] IConverterUICallback* pcuic);
        [helpcontext(0x000514cb)]
        HRESULT _stdcall HrImport(
                        [in] BSTR bstrSourcePath, 
                        [in] BSTR bstrDestPath, 
                        [in] IConverterApplicationPreferences* pcap, 
                        [out] IConverterPreferences** ppcp, 
                        [in] IConverterUICallback* pcuic);
        [helpcontext(0x000514cc)]
        HRESULT _stdcall HrExport(
                        [in] BSTR bstrSourcePath, 
                        [in] BSTR bstrDestPath, 
                        [in] BSTR bstrClass, 
                        [in] IConverterApplicationPreferences* pcap, 
                        [out] IConverterPreferences** ppcp, 
                        [in] IConverterUICallback* pcuic);
        [helpcontext(0x000514cd)]
        HRESULT _stdcall HrGetFormat(
                        [in] BSTR bstrPath, 
                        [out] BSTR* pbstrClass, 
                        [in] IConverterApplicationPreferences* pcap, 
                        [out] IConverterPreferences** ppcp, 
                        [in] IConverterUICallback* pcuic);
        [helpcontext(0x000514ce)]
        HRESULT _stdcall HrGetErrorString(
                        [in] long hrErr, 
                        [out] BSTR* pbstrErrorMsg, 
                        [in] IConverterApplicationPreferences* pcap);
    };

    

    [
      odl,
      uuid(000C03C6-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartArt : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT AllNodes([out, retval] SmartArtNodes** Nodes);
        [id(0x00000003), propget]
        HRESULT Nodes([out, retval] SmartArtNodes** Nodes);
        [id(0x00000004), propget]
        HRESULT Layout([out, retval] SmartArtLayout** Layout);
        [id(0x00000004), propput]
        HRESULT Layout([in] SmartArtLayout* Layout);
        [id(0x00000005), propget]
        HRESULT QuickStyle([out, retval] SmartArtQuickStyle** Style);
        [id(0x00000005), propput]
        HRESULT QuickStyle([in] SmartArtQuickStyle* Style);
        [id(0x00000006), propget]
        HRESULT Color([out, retval] SmartArtColor** ColorStyle);
        [id(0x00000006), propput]
        HRESULT Color([in] SmartArtColor* ColorStyle);
        [id(0x00000007), propget]
        HRESULT Reverse([out, retval] MsoTriState* Reverse);
        [id(0x00000007), propput]
        HRESULT Reverse([in] MsoTriState Reverse);
        [id(0x00000008)]
        HRESULT Reset();
    };

    [
      odl,
      uuid(000C03C7-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartArtNodes : _IMsoDispObj {
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(00000000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] SmartArtNode** SmartArtNode);
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Count([out, retval] int* Count);
        [id(0x00000003)]
        HRESULT Add([out, retval] SmartArtNode** NewNode);
    };

    [
      odl,
      uuid(000C03C8-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartArtNode : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002)]
        HRESULT AddNode(
                        [in, optional, defaultvalue(1)] MsoSmartArtNodePosition Position, 
                        [in, optional, defaultvalue(1)] MsoSmartArtNodeType Type, 
                        [out, retval] SmartArtNode** NewNode);
        [id(0x00000003)]
        HRESULT Delete();
        [id(0x00000004)]
        HRESULT Promote();
        [id(0x00000005)]
        HRESULT Demote();
        [id(0x00000006), propget]
        HRESULT OrgChartLayout([out, retval] MsoOrgChartLayoutType* Type);
        [id(0x00000006), propput]
        HRESULT OrgChartLayout([in] MsoOrgChartLayoutType Type);
        [id(0x00000007), propget]
        HRESULT Shapes([out, retval] ShapeRange** Shape);
        [id(0x00000008), propget]
        HRESULT TextFrame2([out, retval] TextFrame2** Frame);
        [id(0x00000009)]
        HRESULT Larger();
        [id(0x0000000a)]
        HRESULT Smaller();
        [id(0x0000000b), propget]
        HRESULT Level([out, retval] int* Level);
        [id(0x0000000c), propget]
        HRESULT Hidden([out, retval] MsoTriState* Hidden);
        [id(0x0000000d), propget]
        HRESULT Nodes([out, retval] SmartArtNodes** Nodes);
        [id(0x0000000e), propget]
        HRESULT ParentNode([out, retval] SmartArtNode** Node);
        [id(0x0000000f), propget]
        HRESULT Type([out, retval] MsoSmartArtNodeType* Type);
        [id(0x00000010)]
        HRESULT ReorderUp();
        [id(0x00000011)]
        HRESULT ReorderDown();
    };

    [
      odl,
      uuid(000C03C9-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartArtLayouts : _IMsoDispObj {
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(00000000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] SmartArtLayout** SmartArtLayout);
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Count([out, retval] int* Count);
    };

    [
      odl,
      uuid(000C03CA-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartArtLayout : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Id([out, retval] BSTR* LayoutId);
        [id(0x00000003), propget]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000004), propget]
        HRESULT Description([out, retval] BSTR* Description);
        [id(0x00000005), propget]
        HRESULT Category([out, retval] BSTR* Category);
    };

    [
      odl,
      uuid(000C03CB-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartArtQuickStyles : _IMsoDispObj {
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(00000000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] SmartArtQuickStyle** Style);
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Count([out, retval] int* Count);
    };

    [
      odl,
      uuid(000C03CC-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartArtQuickStyle : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Id([out, retval] BSTR* StyleId);
        [id(0x00000003), propget]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000004), propget]
        HRESULT Description([out, retval] BSTR* Description);
        [id(0x00000005), propget]
        HRESULT Category([out, retval] BSTR* Category);
    };

    [
      odl,
      uuid(000C03CD-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartArtColors : _IMsoDispObj {
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(00000000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] SmartArtColor** SmartArtColor);
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Count([out, retval] int* Count);
    };

    [
      odl,
      uuid(000C03CE-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartArtColor : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget]
        HRESULT Id([out, retval] BSTR* ColorStyleId);
        [id(0x00000003), propget]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000004), propget]
        HRESULT Description([out, retval] BSTR* Description);
        [id(0x00000005), propget]
        HRESULT Category([out, retval] BSTR* Category);
    };

    

    [
      odl,
      uuid(000C03E0-0000-0000-C000-000000000046),
      helpcontext(0x000518b0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PickerField : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x00051c99)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000002), propget, helpcontext(0x00051c9a)]
        HRESULT Type([out, retval] MsoPickerField* Type);
        [id(0x00000003), propget, helpcontext(0x00051c9b)]
        HRESULT IsHidden([out, retval] VARIANT_BOOL* IsHidden);
    };

    [
      odl,
      uuid(000C03E1-0000-0000-C000-000000000046),
      helpcontext(0x00051c98),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PickerFields : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00051c99)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] PickerField** Field);
        [id(0x00000001), propget, helpcontext(0x00051c9a)]
        HRESULT Count([out, retval] long* Count);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
    };

    [
      odl,
      uuid(000C03E2-0000-0000-C000-000000000046),
      helpcontext(0x00052080),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PickerProperty : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x00052081)]
        HRESULT Id([out, retval] BSTR* Id);
        [id(0x00000002), propget, helpcontext(0x00052082)]
        HRESULT Value([out, retval] VARIANT* Value);
        [id(0x00000003), propget, helpcontext(0x00052083)]
        HRESULT Type([out, retval] MsoPickerField* Type);
    };

    [
      odl,
      uuid(000C03E3-0000-0000-C000-000000000046),
      helpcontext(0x00052468),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PickerProperties : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00052469)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] PickerProperty** prop);
        [id(0x00000001), propget, helpcontext(0x0005246a)]
        HRESULT Count([out, retval] long* Count);
        [id(0x00000002), helpcontext(0x0005246b)]
        HRESULT Add(
                        [in] BSTR Id, 
                        [in] BSTR Value, 
                        [in] MsoPickerField Type, 
                        [out, retval] PickerProperty** prop);
        [id(0x00000003), helpcontext(0x0005246c)]
        HRESULT Remove([in] BSTR Id);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
    };

    [
      odl,
      uuid(000C03E4-0000-0000-C000-000000000046),
      helpcontext(0x00052850),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PickerResult : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x00052851)]
        HRESULT Id([out, retval] BSTR* Id);
        [id(0x00000002), propget, helpcontext(0x00052852)]
        HRESULT DisplayName([out, retval] BSTR* DisplayName);
        [id(0x00000002), propput, helpcontext(0x00052852)]
        HRESULT DisplayName([in] BSTR DisplayName);
        [id(0x00000003), propget, helpcontext(0x00052853)]
        HRESULT Type([out, retval] BSTR* Type);
        [id(0x00000003), propput, helpcontext(0x00052853)]
        HRESULT Type([in] BSTR Type);
        [id(0x00000004), propget, helpcontext(0x00052854)]
        HRESULT SIPId([out, retval] BSTR* SIPId);
        [id(0x00000004), propput, helpcontext(0x00052854)]
        HRESULT SIPId([in] BSTR SIPId);
        [id(0x00000005), propget, helpcontext(0x00052855)]
        HRESULT ItemData([out, retval] VARIANT* ItemData);
        [id(0x00000005), propput, helpcontext(0x00052855)]
        HRESULT ItemData([in] VARIANT ItemData);
        [id(0x00000006), propget, helpcontext(0x00052856)]
        HRESULT SubItems([out, retval] VARIANT* SubItems);
        [id(0x00000006), propput, helpcontext(0x00052856)]
        HRESULT SubItems([in] VARIANT SubItems);
        [id(0x00000007), propget, helpcontext(0x00052857)]
        HRESULT DuplicateResults([out, retval] VARIANT* DuplicateResults);
        [id(0x00000008), propget, helpcontext(0x00052858)]
        HRESULT Fields([out, retval] PickerFields** Fields);
        [id(0x00000008), propput, helpcontext(0x00052858)]
        HRESULT Fields([in] PickerFields* Fields);
    };

    [
      odl,
      uuid(000C03E5-0000-0000-C000-000000000046),
      helpcontext(0x00052c38),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PickerResults : _IMsoDispObj {
        [id(00000000), propget, helpcontext(0x00052c39)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] PickerResult** Result);
        [id(0x00000001), propget, helpcontext(0x00052c3a)]
        HRESULT Count([out, retval] long* Count);
        [id(0x00000002), helpcontext(0x00052c3b)]
        HRESULT Add(
                        [in] BSTR Id, 
                        [in] BSTR DisplayName, 
                        [in] BSTR Type, 
                        [in, optional, defaultvalue("")] BSTR SIPId, 
                        [in, optional] VARIANT ItemData, 
                        [in, optional] VARIANT SubItems, 
                        [out, retval] PickerResult** Result);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
    };

    [
      odl,
      uuid(000C03E6-0000-0000-C000-000000000046),
      helpcontext(0x00053020),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PickerDialog : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x00053021)]
        HRESULT DataHandlerId([out, retval] BSTR* Id);
        [id(0x00000001), propput, helpcontext(0x00053021)]
        HRESULT DataHandlerId([in] BSTR Id);
        [id(0x00000002), propget, helpcontext(0x00053022)]
        HRESULT Title([out, retval] BSTR* Title);
        [id(0x00000002), propput, helpcontext(0x00053022)]
        HRESULT Title([in] BSTR Title);
        [id(0x00000003), propget, helpcontext(0x00053023)]
        HRESULT Properties([out, retval] PickerProperties** Props);
        [id(0x00000004), helpcontext(0x00053024)]
        HRESULT CreatePickerResults([out, retval] PickerResults** Results);
        [id(0x00000005), helpcontext(0x00053025)]
        HRESULT Show(
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL IsMultiSelect, 
                        [in, optional, defaultvalue(0)] PickerResults* ExistingResults, 
                        [out, retval] PickerResults** Results);
        [id(0x00000006), helpcontext(0x00053026)]
        HRESULT Resolve(
                        [in] BSTR TokenText, 
                        [in] int duplicateDlgMode, 
                        [out, retval] PickerResults** Results);
    };

    

    [
      odl,
      uuid(000C03F0-0000-0000-C000-000000000046),
      helpcontext(0x00053408),
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMsoContactCard : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x00053409)]
        HRESULT Address([out, retval] BSTR* pAddress);
        [id(0x00000002), propget, helpcontext(0x0005340a)]
        HRESULT AddressType([out, retval] MsoContactCardAddressType* pAddressType);
        [id(0x00000003), propget, helpcontext(0x0005340b)]
        HRESULT CardType([out, retval] MsoContactCardType* pCardType);
        [id(0x00000004), propget, helpcontext(0x0005340c)]
        HRESULT Parent([out, retval] IDispatch** ppdispParent);
    };

    [
      odl,
      uuid(000C03CF-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface EffectParameter : _IMsoDispObj {
        [id(00000000), propget]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000001), propget]
        HRESULT Value([out, retval] VARIANT* Value);
        [id(0x00000001), propput]
        HRESULT Value([in] VARIANT Value);
    };

    [
      odl,
      uuid(000C03D0-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface EffectParameters : _IMsoDispObj {
        [id(00000000), propget]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] EffectParameter** EffectParameter);
        [id(0x00000001), propget]
        HRESULT Count([out, retval] int* Count);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
    };

    

    [
      odl,
      uuid(000C03D1-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PictureEffect : _IMsoDispObj {
        [id(00000000), propget]
        HRESULT Type([out, retval] MsoPictureEffectType* EffectType);
        [id(0x00000001), propput]
        HRESULT Position([in] int Position);
        [id(0x00000001), propget]
        HRESULT Position([out, retval] int* Position);
        [id(0x00000002)]
        HRESULT Delete();
        [id(0x00000003), propget]
        HRESULT EffectParameters([out, retval] EffectParameters** EffectParameters);
        [id(0x00000004), propput]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x00000004), propget]
        HRESULT Visible([out, retval] MsoTriState* Visible);
    };

    [
      odl,
      uuid(000C03D2-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PictureEffects : _IMsoDispObj {
        [id(00000000), propget]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] PictureEffect** Item);
        [id(0x00000001), propget]
        HRESULT Count([out, retval] int* Count);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(0x00000002)]
        HRESULT Insert(
                        [in] MsoPictureEffectType EffectType, 
                        [in, optional, defaultvalue(-1)] int Position, 
                        [out, retval] PictureEffect** Effect);
        [id(0x00000003)]
        HRESULT Delete([in, optional, defaultvalue(-1)] int Index);
    };

    [
      odl,
      uuid(000C03D3-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Crop : _IMsoDispObj {
        [id(00000000), propget]
        HRESULT PictureOffsetX([out, retval] long*  PictureOffsetX);
        [id(00000000), propput]
        HRESULT PictureOffsetX([in] long PictureOffsetX);
        [id(0x00000001), propget]
        HRESULT PictureOffsetY([out, retval] long*  PictureOffsetY);
        [id(0x00000001), propput]
        HRESULT PictureOffsetY([in] long PictureOffsetY);
        [id(0x00000002), propget]
        HRESULT PictureWidth([out, retval] long*  PictureWidth);
        [id(0x00000002), propput]
        HRESULT PictureWidth([in] long PictureWidth);
        [id(0x00000003), propget]
        HRESULT PictureHeight([out, retval] long*  PictureHeight);
        [id(0x00000003), propput]
        HRESULT PictureHeight([in] long PictureHeight);
        [id(0x00000005), propget]
        HRESULT ShapeLeft([out, retval] long*  ShapeLeft);
        [id(0x00000005), propput]
        HRESULT ShapeLeft([in] long ShapeLeft);
        [id(0x00000006), propget]
        HRESULT ShapeTop([out, retval] long*  ShapeTop);
        [id(0x00000006), propput]
        HRESULT ShapeTop([in] long ShapeTop);
        [id(0x00000007), propget]
        HRESULT ShapeWidth([out, retval] long*  ShapeWidth);
        [id(0x00000007), propput]
        HRESULT ShapeWidth([in] long ShapeWidth);
        [id(0x00000008), propget]
        HRESULT ShapeHeight([out, retval] long*  ShapeHeight);
        [id(0x00000008), propput]
        HRESULT ShapeHeight([in] long ShapeHeight);
    };

    

    [
      odl,
      uuid(000C03F1-0000-0000-C000-000000000046),
      helpcontext(0x000537f0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ContactCard : _IMsoDispObj {
        [id(0x00000001)]
        HRESULT Close();
        [id(0x00000002)]
        HRESULT Show(
                        [in] MsoContactCardStyle CardStyle, 
                        [in] long RectangleLeft, 
                        [in] long RectangleRight, 
                        [in] long RectangleTop, 
                        [in] long RectangleBottom, 
                        [in] long HorizontalPosition, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL ShowWithDelay);
    };

    

    [
      odl,
      uuid(000C1732-0000-0000-C000-000000000046),
      helpcontext(0x00053bd8),
      hidden
    ]
    interface FullSeriesCollection : IDispatch {
        [propget, helpcontext(0x00053bd9)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00053bda)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x00053bdb)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IMsoSeries** RHS);
        [helpcontext(0x00053bdc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x00053bdd)]
        HRESULT _stdcall Application([out, retval] IDispatch** ppval);
        [propget, helpcontext(0x00053bde)]
        HRESULT _stdcall Creator([out, retval] long* pval);
        [propget, helpcontext(0x00053bdf)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IMsoSeries** RHS);
    };

    [
      odl,
      uuid(000C1733-0000-0000-C000-000000000046),
      helpcontext(0x00053fc0),
      hidden
    ]
    interface IMsoCategory : IDispatch {
        [propget]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget]
        HRESULT _stdcall Name([out, retval] BSTR* pbstr);
        [propget]
        HRESULT _stdcall IsFiltered([out, retval] VARIANT_BOOL* pfIsFiltered);
        [propput]
        HRESULT _stdcall IsFiltered([in] VARIANT_BOOL pfIsFiltered);
    };

    [
      odl,
      uuid(000C1734-0000-0000-C000-000000000046),
      helpcontext(0x000543a8),
      hidden
    ]
    interface CategoryCollection : IDispatch {
        [propget]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget]
        HRESULT _stdcall Count([out, retval] long* cCategory);
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IMsoCategory** ppcategory);
        [propget]
        HRESULT _stdcall Application([out, retval] IDispatch** ppval);
        [propget]
        HRESULT _stdcall Creator([out, retval] long* pval);
        [propget]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IMsoCategory** RHS);
    };

    
};