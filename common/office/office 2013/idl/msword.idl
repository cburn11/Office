// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: MSWORD.OLB

[
  uuid(00020905-0000-0000-C000-000000000046),
  version(8.6),
  helpstring("Microsoft Word 15.0 Object Library"),
  helpfile("VBAWD10.CHM"),
  helpcontext(00000000),
  custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, "Microsoft.Office.Interop.Word.dll")

]
library Word
{
    // TLib :     // TLib : Microsoft Visual Basic for Applications Extensibility 5.3 : {0002E157-0000-0000-C000-000000000046}
    importlib("D:\Program Files (x86)\Common Files\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB");
    // TLib : Microsoft Office 15.0 Object Library : {2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}
    importlib("..\tlb\mso.tlb");
    // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

#define single float

    // Forward declare all types defined in this typelib
    interface _Application;
    interface _Global;
    interface FontNames;
    interface Languages;
    interface Language;
    interface Documents;
    interface _Document;
    interface Template;
    interface Templates;
    interface RoutingSlip;
    interface Bookmark;
    interface Bookmarks;
    interface Variable;
    interface Variables;
    interface RecentFile;
    interface RecentFiles;
    interface Window;
    interface Windows;
    interface Pane;
    interface Panes;
    interface Range;
    interface ListFormat;
    interface Find;
    interface Replacement;
    interface Characters;
    interface Words;
    interface Sentences;
    interface Sections;
    interface Section;
    interface Paragraphs;
    interface Paragraph;
    interface DropCap;
    interface TabStops;
    interface TabStop;
    interface _ParagraphFormat;
    interface _Font;
    interface Table;
    interface Row;
    interface Column;
    interface Cell;
    interface Tables;
    interface Rows;
    interface Columns;
    interface Cells;
    interface AutoCorrect;
    interface AutoCorrectEntries;
    interface AutoCorrectEntry;
    interface FirstLetterExceptions;
    interface FirstLetterException;
    interface TwoInitialCapsExceptions;
    interface TwoInitialCapsException;
    interface Footnotes;
    interface Endnotes;
    interface Comments;
    interface Footnote;
    interface Endnote;
    interface Comment;
    interface Borders;
    interface Border;
    interface Shading;
    interface TextRetrievalMode;
    interface AutoTextEntries;
    interface AutoTextEntry;
    interface System;
    interface OLEFormat;
    interface LinkFormat;
    interface _OLEControl;
    interface Fields;
    interface Field;
    interface Browser;
    interface Styles;
    interface Style;
    interface Frames;
    interface Frame;
    interface FormFields;
    interface FormField;
    interface TextInput;
    interface CheckBox;
    interface DropDown;
    interface ListEntries;
    interface ListEntry;
    interface TablesOfFigures;
    interface TableOfFigures;
    interface MailMerge;
    interface MailMergeFields;
    interface MailMergeField;
    interface MailMergeDataSource;
    interface MailMergeFieldNames;
    interface MailMergeFieldName;
    interface MailMergeDataFields;
    interface MailMergeDataField;
    interface Envelope;
    interface MailingLabel;
    interface CustomLabels;
    interface CustomLabel;
    interface TablesOfContents;
    interface TableOfContents;
    interface TablesOfAuthorities;
    interface TableOfAuthorities;
    interface Dialogs;
    interface Dialog;
    interface PageSetup;
    interface LineNumbering;
    interface TextColumns;
    interface TextColumn;
    interface Selection;
    interface TablesOfAuthoritiesCategories;
    interface TableOfAuthoritiesCategory;
    interface CaptionLabels;
    interface CaptionLabel;
    interface AutoCaptions;
    interface AutoCaption;
    interface Indexes;
    interface Index;
    interface AddIn;
    interface AddIns;
    interface Revisions;
    interface Revision;
    interface Task;
    interface Tasks;
    interface HeadersFooters;
    interface HeaderFooter;
    interface PageNumbers;
    interface PageNumber;
    interface Subdocuments;
    interface Subdocument;
    interface HeadingStyles;
    interface HeadingStyle;
    interface StoryRanges;
    interface ListLevel;
    interface ListLevels;
    interface ListTemplate;
    interface ListTemplates;
    interface ListParagraphs;
    interface List;
    interface Lists;
    interface ListGallery;
    interface ListGalleries;
    interface KeyBindings;
    interface KeysBoundTo;
    interface KeyBinding;
    interface FileConverter;
    interface FileConverters;
    interface SynonymInfo;
    interface Hyperlinks;
    interface Hyperlink;
    interface Shapes;
    interface ShapeRange;
    interface GroupShapes;
    interface Shape;
    interface TextFrame;
    interface _LetterContent;
    interface View;
    interface Zoom;
    interface Zooms;
    interface InlineShape;
    interface InlineShapes;
    interface SpellingSuggestions;
    interface SpellingSuggestion;
    interface Dictionaries;
    interface HangulHanjaConversionDictionaries;
    interface Dictionary;
    interface ReadabilityStatistics;
    interface ReadabilityStatistic;
    interface Versions;
    interface Version;
    interface Options;
    interface MailMessage;
    interface ProofreadingErrors;
    interface Mailer;
    interface WrapFormat;
    interface HangulAndAlphabetExceptions;
    interface HangulAndAlphabetException;
    interface Adjustments;
    interface CalloutFormat;
    interface ColorFormat;
    interface ConnectorFormat;
    interface FillFormat;
    interface FreeformBuilder;
    interface LineFormat;
    interface PictureFormat;
    interface ShadowFormat;
    interface ShapeNode;
    interface ShapeNodes;
    interface TextEffectFormat;
    interface ThreeDFormat;
    dispinterface ApplicationEvents;
    dispinterface DocumentEvents;
    dispinterface OCXEvents;
    interface IApplicationEvents;
    interface IApplicationEvents2;
    dispinterface ApplicationEvents2;
    interface EmailAuthor;
    interface EmailOptions;
    interface EmailSignature;
    interface Email;
    interface HorizontalLineFormat;
    interface Frameset;
    interface DefaultWebOptions;
    interface WebOptions;
    interface OtherCorrectionsExceptions;
    interface OtherCorrectionsException;
    interface EmailSignatureEntries;
    interface EmailSignatureEntry;
    interface HTMLDivision;
    interface HTMLDivisions;
    interface DiagramNode;
    interface DiagramNodeChildren;
    interface DiagramNodes;
    interface Diagram;
    interface CustomProperty;
    interface CustomProperties;
    interface SmartTag;
    interface SmartTags;
    interface StyleSheet;
    interface StyleSheets;
    interface MappedDataField;
    interface MappedDataFields;
    interface CanvasShapes;
    interface TableStyle;
    interface ConditionalStyle;
    interface FootnoteOptions;
    interface EndnoteOptions;
    interface Reviewers;
    interface Reviewer;
    interface TaskPane;
    interface TaskPanes;
    interface IApplicationEvents3;
    dispinterface ApplicationEvents3;
    interface SmartTagAction;
    interface SmartTagActions;
    interface SmartTagRecognizer;
    interface SmartTagRecognizers;
    interface SmartTagType;
    interface SmartTagTypes;
    interface Line;
    interface Lines;
    interface Rectangle;
    interface Rectangles;
    interface Break;
    interface Breaks;
    interface Page;
    interface Pages;
    interface XMLNode;
    interface XMLNodes;
    interface XMLSchemaReference;
    interface XMLSchemaReferences;
    interface XMLChildNodeSuggestion;
    interface XMLChildNodeSuggestions;
    interface XMLNamespace;
    interface XMLNamespaces;
    interface XSLTransform;
    interface XSLTransforms;
    interface Editors;
    interface Editor;
    interface IApplicationEvents4;
    dispinterface ApplicationEvents4;
    dispinterface DocumentEvents2;
    interface Source;
    interface Sources;
    interface Bibliography;
    interface OMaths;
    interface OMath;
    interface OMathFunctions;
    interface OMathArgs;
    interface OMathFunction;
    interface OMathAcc;
    interface OMathBar;
    interface OMathBox;
    interface OMathBorderBox;
    interface OMathDelim;
    interface OMathEqArray;
    interface OMathFrac;
    interface OMathFunc;
    interface OMathGroupChar;
    interface OMathLimLow;
    interface OMathLimUpp;
    interface OMathMat;
    interface OMathMatRows;
    interface OMathMatCols;
    interface OMathMatRow;
    interface OMathMatCol;
    interface OMathNary;
    interface OMathPhantom;
    interface OMathScrPre;
    interface OMathRad;
    interface OMathScrSub;
    interface OMathScrSubSup;
    interface OMathScrSup;
    interface OMathAutoCorrect;
    interface OMathAutoCorrectEntries;
    interface OMathAutoCorrectEntry;
    interface OMathRecognizedFunctions;
    interface OMathRecognizedFunction;
    interface ContentControls;
    interface ContentControl;
    interface XMLMapping;
    interface ContentControlListEntries;
    interface ContentControlListEntry;
    interface BuildingBlockTypes;
    interface BuildingBlockType;
    interface Categories;
    interface Category;
    interface BuildingBlocks;
    interface BuildingBlock;
    interface BuildingBlockEntries;
    interface OMathBreaks;
    interface OMathBreak;
    interface Research;
    interface SoftEdgeFormat;
    interface GlowFormat;
    interface ReflectionFormat;
    interface ChartData;
    interface Chart;
    interface Corners;
    interface Legend;
    interface ChartBorder;
    interface Walls;
    interface Floor;
    interface PlotArea;
    interface ChartArea;
    interface SeriesLines;
    interface LeaderLines;
    interface Gridlines;
    interface UpBars;
    interface DownBars;
    interface Interior;
    interface ChartFillFormat;
    interface LegendEntries;
    interface ChartFont;
    interface ChartColorFormat;
    interface LegendEntry;
    interface LegendKey;
    interface SeriesCollection;
    interface Series;
    interface ErrorBars;
    interface Trendline;
    interface Trendlines;
    interface DataLabels;
    interface DataLabel;
    interface Points;
    interface Point;
    interface Axes;
    interface Axis;
    interface DataTable;
    interface ChartTitle;
    interface AxisTitle;
    interface DisplayUnitLabel;
    interface TickLabels;
    interface DropLines;
    interface HiLoLines;
    interface ChartGroup;
    interface ChartGroups;
    interface ChartCharacters;
    interface ChartFormat;
    interface UndoRecord;
    interface CoAuthLock;
    interface CoAuthLocks;
    interface CoAuthUpdate;
    interface CoAuthUpdates;
    interface CoAuthor;
    interface CoAuthors;
    interface CoAuthoring;
    interface Conflicts;
    interface Conflict;
    interface ProtectedViewWindows;
    interface ProtectedViewWindow;
    interface RepeatingSectionItemColl;
    interface RepeatingSectionItem;
    interface FullSeriesCollection;
    interface ChartCategory;
    interface CategoryCollection;
    interface Broadcast;
    interface RevisionsFilter;

    


    

typedef [uuid(67AC5FF1-FD6C-31ED-A7ED-A11543D2D4FE)]
    enum {
        wdNoMailSystem = 0,
        wdMAPI = 1,
        wdPowerTalk = 2,
        wdMAPIandPowerTalk = 3
    } WdMailSystem;


typedef [uuid(06F6494C-22D0-33D8-83F3-F466584578A8)]
    enum {
        wdNormalTemplate = 0,
        wdGlobalTemplate = 1,
        wdAttachedTemplate = 2
    } WdTemplateType;


typedef [uuid(737849E0-892D-320B-A3FD-9121557D4C3C)]
    enum {
        wdContinueDisabled = 0,
        wdResetList = 1,
        wdContinueList = 2
    } WdContinue;


typedef [uuid(8BE9FF6B-231C-32F4-8F21-FD47474070BA)]
    enum {
        wdIMEModeNoControl = 0,
        wdIMEModeOn = 1,
        wdIMEModeOff = 2,
        wdIMEModeHiragana = 4,
        wdIMEModeKatakana = 5,
        wdIMEModeKatakanaHalf = 6,
        wdIMEModeAlphaFull = 7,
        wdIMEModeAlpha = 8,
        wdIMEModeHangulFull = 9,
        wdIMEModeHangul = 10
    } WdIMEMode;


typedef [uuid(D1F7D404-FE34-32EA-8235-0FB8CAA2E73B)]
    enum {
        wdBaselineAlignTop = 0,
        wdBaselineAlignCenter = 1,
        wdBaselineAlignBaseline = 2,
        wdBaselineAlignFarEast50 = 3,
        wdBaselineAlignAuto = 4
    } WdBaselineAlignment;


typedef [uuid(FB2904FB-ACC0-36C0-8D06-AEE924D88A08)]
    enum {
        wdIndexFilterNone = 0,
        wdIndexFilterAiueo = 1,
        wdIndexFilterAkasatana = 2,
        wdIndexFilterChosung = 3,
        wdIndexFilterLow = 4,
        wdIndexFilterMedium = 5,
        wdIndexFilterFull = 6
    } WdIndexFilter;


typedef [uuid(30F5093A-00F9-3458-981B-0B1993B64BBB)]
    enum {
        wdIndexSortByStroke = 0,
        wdIndexSortBySyllable = 1
    } WdIndexSortBy;


typedef [uuid(8F1C83EA-C44E-332C-96CB-AA583DE5FA82)]
    enum {
        wdJustificationModeExpand = 0,
        wdJustificationModeCompress = 1,
        wdJustificationModeCompressKana = 2
    } WdJustificationMode;


typedef [uuid(25E17C0C-411C-325C-8596-29DF87921D53)]
    enum {
        wdFarEastLineBreakLevelNormal = 0,
        wdFarEastLineBreakLevelStrict = 1,
        wdFarEastLineBreakLevelCustom = 2
    } WdFarEastLineBreakLevel;


typedef [uuid(B0174301-3877-3296-9551-0D01D6CAD020)]
    enum {
        wdHangulToHanja = 0,
        wdHanjaToHangul = 1
    } WdMultipleWordConversionsMode;


typedef [uuid(B1F5A6AB-437D-319F-8B38-0E087D112FEA)]
    enum {
        wdAuto = 0,
        wdBlack = 1,
        wdBlue = 2,
        wdTurquoise = 3,
        wdBrightGreen = 4,
        wdPink = 5,
        wdRed = 6,
        wdYellow = 7,
        wdWhite = 8,
        wdDarkBlue = 9,
        wdTeal = 10,
        wdGreen = 11,
        wdViolet = 12,
        wdDarkRed = 13,
        wdDarkYellow = 14,
        wdGray50 = 15,
        wdGray25 = 16,
        wdByAuthor = 0xffffffff,
        wdNoHighlight = 0
    } WdColorIndex;


typedef [uuid(0213F5F4-E991-3060-A73F-79E85BA560C1)]
    enum {
        wdTextureNone = 0,
        wdTexture2Pt5Percent = 25,
        wdTexture5Percent = 50,
        wdTexture7Pt5Percent = 75,
        wdTexture10Percent = 100,
        wdTexture12Pt5Percent = 125,
        wdTexture15Percent = 150,
        wdTexture17Pt5Percent = 175,
        wdTexture20Percent = 200,
        wdTexture22Pt5Percent = 225,
        wdTexture25Percent = 250,
        wdTexture27Pt5Percent = 275,
        wdTexture30Percent = 300,
        wdTexture32Pt5Percent = 325,
        wdTexture35Percent = 350,
        wdTexture37Pt5Percent = 375,
        wdTexture40Percent = 400,
        wdTexture42Pt5Percent = 425,
        wdTexture45Percent = 450,
        wdTexture47Pt5Percent = 475,
        wdTexture50Percent = 500,
        wdTexture52Pt5Percent = 525,
        wdTexture55Percent = 550,
        wdTexture57Pt5Percent = 575,
        wdTexture60Percent = 600,
        wdTexture62Pt5Percent = 625,
        wdTexture65Percent = 650,
        wdTexture67Pt5Percent = 675,
        wdTexture70Percent = 700,
        wdTexture72Pt5Percent = 725,
        wdTexture75Percent = 750,
        wdTexture77Pt5Percent = 775,
        wdTexture80Percent = 800,
        wdTexture82Pt5Percent = 825,
        wdTexture85Percent = 850,
        wdTexture87Pt5Percent = 875,
        wdTexture90Percent = 900,
        wdTexture92Pt5Percent = 925,
        wdTexture95Percent = 950,
        wdTexture97Pt5Percent = 975,
        wdTextureSolid = 1000,
        wdTextureDarkHorizontal = 0xffffffff,
        wdTextureDarkVertical = 0xfffffffe,
        wdTextureDarkDiagonalDown = 0xfffffffd,
        wdTextureDarkDiagonalUp = 0xfffffffc,
        wdTextureDarkCross = 0xfffffffb,
        wdTextureDarkDiagonalCross = 0xfffffffa,
        wdTextureHorizontal = 0xfffffff9,
        wdTextureVertical = 0xfffffff8,
        wdTextureDiagonalDown = 0xfffffff7,
        wdTextureDiagonalUp = 0xfffffff6,
        wdTextureCross = 0xfffffff5,
        wdTextureDiagonalCross = 0xfffffff4
    } WdTextureIndex;


typedef [uuid(DA77B198-31E3-312B-83EB-A0CFD52B0085)]
    enum {
        wdUnderlineNone = 0,
        wdUnderlineSingle = 1,
        wdUnderlineWords = 2,
        wdUnderlineDouble = 3,
        wdUnderlineDotted = 4,
        wdUnderlineThick = 6,
        wdUnderlineDash = 7,
        wdUnderlineDotDash = 9,
        wdUnderlineDotDotDash = 10,
        wdUnderlineWavy = 11,
        wdUnderlineWavyHeavy = 27,
        wdUnderlineDottedHeavy = 20,
        wdUnderlineDashHeavy = 23,
        wdUnderlineDotDashHeavy = 25,
        wdUnderlineDotDotDashHeavy = 26,
        wdUnderlineDashLong = 39,
        wdUnderlineDashLongHeavy = 55,
        wdUnderlineWavyDouble = 43
    } WdUnderline;


typedef [uuid(9F76AA71-557E-3BF3-AC54-72E6D099B16B)]
    enum {
        wdEmphasisMarkNone = 0,
        wdEmphasisMarkOverSolidCircle = 1,
        wdEmphasisMarkOverComma = 2,
        wdEmphasisMarkOverWhiteCircle = 3,
        wdEmphasisMarkUnderSolidCircle = 4
    } WdEmphasisMark;


typedef [uuid(5077203F-7859-39B5-BF08-8308BDE14529)]
    enum {
        wdListSeparator = 17,
        wdDecimalSeparator = 18,
        wdThousandsSeparator = 19,
        wdCurrencyCode = 20,
        wd24HourClock = 21,
        wdInternationalAM = 22,
        wdInternationalPM = 23,
        wdTimeSeparator = 24,
        wdDateSeparator = 25,
        wdProductLanguageID = 26
    } WdInternationalIndex;


typedef [uuid(9A947B78-450D-3757-B619-68CECCE5BCF5)]
    enum {
        wdAutoExec = 0,
        wdAutoNew = 1,
        wdAutoOpen = 2,
        wdAutoClose = 3,
        wdAutoExit = 4,
        wdAutoSync = 5
    } WdAutoMacros;


typedef [uuid(946DB172-20CF-313F-961C-76112797145C)]
    enum {
        wdCaptionPositionAbove = 0,
        wdCaptionPositionBelow = 1
    } WdCaptionPosition;


typedef [uuid(5A6A6EF1-8165-3EFA-8982-536C7977A79D)]
    enum {
        wdUS = 1,
        wdCanada = 2,
        wdLatinAmerica = 3,
        wdNetherlands = 31,
        wdFrance = 33,
        wdSpain = 34,
        wdItaly = 39,
        wdUK = 44,
        wdDenmark = 45,
        wdSweden = 46,
        wdNorway = 47,
        wdGermany = 49,
        wdPeru = 51,
        wdMexico = 52,
        wdArgentina = 54,
        wdBrazil = 55,
        wdChile = 56,
        wdVenezuela = 58,
        wdJapan = 81,
        wdTaiwan = 886,
        wdChina = 86,
        wdKorea = 82,
        wdFinland = 358,
        wdIceland = 354
    } WdCountry;


typedef [uuid(9B5F3357-A13F-3EE2-8123-33E385D2FD51)]
    enum {
        wdHeadingSeparatorNone = 0,
        wdHeadingSeparatorBlankLine = 1,
        wdHeadingSeparatorLetter = 2,
        wdHeadingSeparatorLetterLow = 3,
        wdHeadingSeparatorLetterFull = 4
    } WdHeadingSeparator;


typedef [uuid(6840CE86-6CE5-3724-8961-31802690E713)]
    enum {
        wdSeparatorHyphen = 0,
        wdSeparatorPeriod = 1,
        wdSeparatorColon = 2,
        wdSeparatorEmDash = 3,
        wdSeparatorEnDash = 4
    } WdSeparatorType;


typedef [uuid(062752C8-C44D-3CBD-A146-0DCD9544BA52)]
    enum {
        wdAlignPageNumberLeft = 0,
        wdAlignPageNumberCenter = 1,
        wdAlignPageNumberRight = 2,
        wdAlignPageNumberInside = 3,
        wdAlignPageNumberOutside = 4
    } WdPageNumberAlignment;


typedef [uuid(C2BF1CFD-253F-35BF-90B4-74AC41756A39)]
    enum {
        wdBorderTop = 0xffffffff,
        wdBorderLeft = 0xfffffffe,
        wdBorderBottom = 0xfffffffd,
        wdBorderRight = 0xfffffffc,
        wdBorderHorizontal = 0xfffffffb,
        wdBorderVertical = 0xfffffffa,
        wdBorderDiagonalDown = 0xfffffff9,
        wdBorderDiagonalUp = 0xfffffff8
    } WdBorderType;


typedef enum {
        emptyenum = 0
    } WdBorderTypeHID;


typedef [uuid(96C35218-1F30-3B6B-B8E9-1955DDFD52C3)]
    enum {
        wdFrameTop = 0xfff0bdc1,
        wdFrameLeft = 0xfff0bdc2,
        wdFrameBottom = 0xfff0bdc3,
        wdFrameRight = 0xfff0bdc4,
        wdFrameCenter = 0xfff0bdc5,
        wdFrameInside = 0xfff0bdc6,
        wdFrameOutside = 0xfff0bdc7
    } WdFramePosition;


typedef [uuid(FCFEF17F-A1D7-396E-907E-C822026DE484)]
    enum {
        wdAnimationNone = 0,
        wdAnimationLasVegasLights = 1,
        wdAnimationBlinkingBackground = 2,
        wdAnimationSparkleText = 3,
        wdAnimationMarchingBlackAnts = 4,
        wdAnimationMarchingRedAnts = 5,
        wdAnimationShimmer = 6
    } WdAnimation;


typedef [uuid(DB686EA6-1A50-3146-B8A0-868BC3C6F451)]
    enum {
        wdNextCase = 0xffffffff,
        wdLowerCase = 0,
        wdUpperCase = 1,
        wdTitleWord = 2,
        wdTitleSentence = 4,
        wdToggleCase = 5,
        wdHalfWidth = 6,
        wdFullWidth = 7,
        wdKatakana = 8,
        wdHiragana = 9
    } WdCharacterCase;


typedef enum {
        emptyenum1 = 0
    } WdCharacterCaseHID;


typedef [uuid(4F925449-10C2-34BA-81AB-6EB5C8F82F3E)]
    enum {
        wdSummaryModeHighlight = 0,
        wdSummaryModeHideAllButSummary = 1,
        wdSummaryModeInsert = 2,
        wdSummaryModeCreateNew = 3
    } WdSummaryMode;


typedef [uuid(E4E5B4E7-B80E-3791-A642-F574F355AE9A)]
    enum {
        wd10Sentences = 0xfffffffe,
        wd20Sentences = 0xfffffffd,
        wd100Words = 0xfffffffc,
        wd500Words = 0xfffffffb,
        wd10Percent = 0xfffffffa,
        wd25Percent = 0xfffffff9,
        wd50Percent = 0xfffffff8,
        wd75Percent = 0xfffffff7
    } WdSummaryLength;


typedef [uuid(1E795768-6E5C-3CF7-AACB-4CDE284B7B04)]
    enum {
        wdStyleTypeParagraph = 1,
        wdStyleTypeCharacter = 2,
        wdStyleTypeTable = 3,
        wdStyleTypeList = 4,
        wdStyleTypeParagraphOnly = 5,
        wdStyleTypeLinked = 6
    } WdStyleType;


typedef [uuid(D66B392B-BDA5-3778-A812-F6EEA5A96C2F)]
    enum {
        wdCharacter = 1,
        wdWord = 2,
        wdSentence = 3,
        wdParagraph = 4,
        wdLine = 5,
        wdStory = 6,
        wdScreen = 7,
        wdSection = 8,
        wdColumn = 9,
        wdRow = 10,
        wdWindow = 11,
        wdCell = 12,
        wdCharacterFormatting = 13,
        wdParagraphFormatting = 14,
        wdTable = 15,
        wdItem = 16
    } WdUnits;


typedef [uuid(3568EE18-032C-39F9-A32B-179BC05CB782)]
    enum {
        wdGoToBookmark = 0xffffffff,
        wdGoToSection = 0,
        wdGoToPage = 1,
        wdGoToTable = 2,
        wdGoToLine = 3,
        wdGoToFootnote = 4,
        wdGoToEndnote = 5,
        wdGoToComment = 6,
        wdGoToField = 7,
        wdGoToGraphic = 8,
        wdGoToObject = 9,
        wdGoToEquation = 10,
        wdGoToHeading = 11,
        wdGoToPercent = 12,
        wdGoToSpellingError = 13,
        wdGoToGrammaticalError = 14,
        wdGoToProofreadingError = 15
    } WdGoToItem;


typedef [uuid(A1D2A478-67C7-3491-9E7E-64C6E8D43738)]
    enum {
        wdGoToFirst = 1,
        wdGoToLast = 0xffffffff,
        wdGoToNext = 2,
        wdGoToRelative = 2,
        wdGoToPrevious = 3,
        wdGoToAbsolute = 1
    } WdGoToDirection;


typedef [uuid(2DEF3465-D4C4-369B-B91E-68C9711F3A6C)]
    enum {
        wdCollapseStart = 1,
        wdCollapseEnd = 0
    } WdCollapseDirection;


typedef [uuid(AD022562-7990-3B64-BA65-8C3A19B7D173)]
    enum {
        wdRowHeightAuto = 0,
        wdRowHeightAtLeast = 1,
        wdRowHeightExactly = 2
    } WdRowHeightRule;


typedef [uuid(929F28B1-D115-39D0-BA39-2EA8425002F5)]
    enum {
        wdFrameAuto = 0,
        wdFrameAtLeast = 1,
        wdFrameExact = 2
    } WdFrameSizeRule;


typedef [uuid(887C8129-94D1-3466-957E-664470F13D3F)]
    enum {
        wdInsertCellsShiftRight = 0,
        wdInsertCellsShiftDown = 1,
        wdInsertCellsEntireRow = 2,
        wdInsertCellsEntireColumn = 3
    } WdInsertCells;


typedef [uuid(01F6710A-249D-3A35-A3B4-FCBF42BF72FA)]
    enum {
        wdDeleteCellsShiftLeft = 0,
        wdDeleteCellsShiftUp = 1,
        wdDeleteCellsEntireRow = 2,
        wdDeleteCellsEntireColumn = 3
    } WdDeleteCells;


typedef [uuid(54679592-3E68-3EC3-93E5-22564D0388E7)]
    enum {
        wdListApplyToWholeList = 0,
        wdListApplyToThisPointForward = 1,
        wdListApplyToSelection = 2
    } WdListApplyTo;


typedef [uuid(DB697253-EFC0-3AE8-818D-308F530CD32F)]
    enum {
        wdAlertsNone = 0,
        wdAlertsMessageBox = 0xfffffffe,
        wdAlertsAll = 0xffffffff
    } WdAlertLevel;


typedef [uuid(149777A8-D40C-3468-B27C-D7AEA2CAA817)]
    enum {
        wdCursorWait = 0,
        wdCursorIBeam = 1,
        wdCursorNormal = 2,
        wdCursorNorthwestArrow = 3
    } WdCursorType;


typedef [uuid(A8E563F3-4ACB-3B98-9507-13D0C7421517)]
    enum {
        wdCancelDisabled = 0,
        wdCancelInterrupt = 1
    } WdEnableCancelKey;


typedef [uuid(B8749705-255F-370D-B1DD-4B027F6DE5B6)]
    enum {
        wdAdjustNone = 0,
        wdAdjustProportional = 1,
        wdAdjustFirstColumn = 2,
        wdAdjustSameWidth = 3
    } WdRulerStyle;


typedef [uuid(B46D9062-1DB3-34C7-93D1-5E575E00B829)]
    enum {
        wdAlignParagraphLeft = 0,
        wdAlignParagraphCenter = 1,
        wdAlignParagraphRight = 2,
        wdAlignParagraphJustify = 3,
        wdAlignParagraphDistribute = 4,
        wdAlignParagraphJustifyMed = 5,
        wdAlignParagraphJustifyHi = 7,
        wdAlignParagraphJustifyLow = 8,
        wdAlignParagraphThaiJustify = 9
    } WdParagraphAlignment;


typedef enum {
        emptyenum2 = 0
    } WdParagraphAlignmentHID;


typedef [uuid(73849DC1-4ECB-31BD-824C-BBDAB04CF830)]
    enum {
        wdListLevelAlignLeft = 0,
        wdListLevelAlignCenter = 1,
        wdListLevelAlignRight = 2
    } WdListLevelAlignment;


typedef [uuid(EC986BD6-35C2-368D-94D8-AC3850019ABA)]
    enum {
        wdAlignRowLeft = 0,
        wdAlignRowCenter = 1,
        wdAlignRowRight = 2
    } WdRowAlignment;


typedef [uuid(87364574-CAD0-36FF-AFE6-6106A232443B)]
    enum {
        wdAlignTabLeft = 0,
        wdAlignTabCenter = 1,
        wdAlignTabRight = 2,
        wdAlignTabDecimal = 3,
        wdAlignTabBar = 4,
        wdAlignTabList = 6
    } WdTabAlignment;


typedef [uuid(750E1523-2AB0-3E82-9C10-65EE8ED77692)]
    enum {
        wdAlignVerticalTop = 0,
        wdAlignVerticalCenter = 1,
        wdAlignVerticalJustify = 2,
        wdAlignVerticalBottom = 3
    } WdVerticalAlignment;


typedef [uuid(3A818B51-713A-3E63-91A4-287C06E75F3C)]
    enum {
        wdCellAlignVerticalTop = 0,
        wdCellAlignVerticalCenter = 1,
        wdCellAlignVerticalBottom = 3
    } WdCellVerticalAlignment;


typedef [uuid(6A35E992-C575-318D-90C2-8F54B40236D6)]
    enum {
        wdTrailingTab = 0,
        wdTrailingSpace = 1,
        wdTrailingNone = 2
    } WdTrailingCharacter;


typedef [uuid(49EC47C3-4535-3DFE-9A5C-D01F1C1BF4A4)]
    enum {
        wdBulletGallery = 1,
        wdNumberGallery = 2,
        wdOutlineNumberGallery = 3
    } WdListGalleryType;


typedef [uuid(9C1DBE08-4499-311E-B83E-27B844624F91)]
    enum {
        wdListNumberStyleArabic = 0,
        wdListNumberStyleUppercaseRoman = 1,
        wdListNumberStyleLowercaseRoman = 2,
        wdListNumberStyleUppercaseLetter = 3,
        wdListNumberStyleLowercaseLetter = 4,
        wdListNumberStyleOrdinal = 5,
        wdListNumberStyleCardinalText = 6,
        wdListNumberStyleOrdinalText = 7,
        wdListNumberStyleKanji = 10,
        wdListNumberStyleKanjiDigit = 11,
        wdListNumberStyleAiueoHalfWidth = 12,
        wdListNumberStyleIrohaHalfWidth = 13,
        wdListNumberStyleArabicFullWidth = 14,
        wdListNumberStyleKanjiTraditional = 16,
        wdListNumberStyleKanjiTraditional2 = 17,
        wdListNumberStyleNumberInCircle = 18,
        wdListNumberStyleAiueo = 20,
        wdListNumberStyleIroha = 21,
        wdListNumberStyleArabicLZ = 22,
        wdListNumberStyleBullet = 23,
        wdListNumberStyleGanada = 24,
        wdListNumberStyleChosung = 25,
        wdListNumberStyleGBNum1 = 26,
        wdListNumberStyleGBNum2 = 27,
        wdListNumberStyleGBNum3 = 28,
        wdListNumberStyleGBNum4 = 29,
        wdListNumberStyleZodiac1 = 30,
        wdListNumberStyleZodiac2 = 31,
        wdListNumberStyleZodiac3 = 32,
        wdListNumberStyleTradChinNum1 = 33,
        wdListNumberStyleTradChinNum2 = 34,
        wdListNumberStyleTradChinNum3 = 35,
        wdListNumberStyleTradChinNum4 = 36,
        wdListNumberStyleSimpChinNum1 = 37,
        wdListNumberStyleSimpChinNum2 = 38,
        wdListNumberStyleSimpChinNum3 = 39,
        wdListNumberStyleSimpChinNum4 = 40,
        wdListNumberStyleHanjaRead = 41,
        wdListNumberStyleHanjaReadDigit = 42,
        wdListNumberStyleHangul = 43,
        wdListNumberStyleHanja = 44,
        wdListNumberStyleHebrew1 = 45,
        wdListNumberStyleArabic1 = 46,
        wdListNumberStyleHebrew2 = 47,
        wdListNumberStyleArabic2 = 48,
        wdListNumberStyleHindiLetter1 = 49,
        wdListNumberStyleHindiLetter2 = 50,
        wdListNumberStyleHindiArabic = 51,
        wdListNumberStyleHindiCardinalText = 52,
        wdListNumberStyleThaiLetter = 53,
        wdListNumberStyleThaiArabic = 54,
        wdListNumberStyleThaiCardinalText = 55,
        wdListNumberStyleVietCardinalText = 56,
        wdListNumberStyleLowercaseRussian = 58,
        wdListNumberStyleUppercaseRussian = 59,
        wdListNumberStyleLowercaseGreek = 60,
        wdListNumberStyleUppercaseGreek = 61,
        wdListNumberStyleArabicLZ2 = 62,
        wdListNumberStyleArabicLZ3 = 63,
        wdListNumberStyleArabicLZ4 = 64,
        wdListNumberStyleLowercaseTurkish = 65,
        wdListNumberStyleUppercaseTurkish = 66,
        wdListNumberStyleLowercaseBulgarian = 67,
        wdListNumberStyleUppercaseBulgarian = 68,
        wdListNumberStylePictureBullet = 249,
        wdListNumberStyleLegal = 253,
        wdListNumberStyleLegalLZ = 254,
        wdListNumberStyleNone = 255
    } WdListNumberStyle;


typedef enum {
        emptyenum3 = 0
    } WdListNumberStyleHID;


typedef [uuid(ACA7717A-16C6-370B-80DD-55F440008A67)]
    enum {
        wdNoteNumberStyleArabic = 0,
        wdNoteNumberStyleUppercaseRoman = 1,
        wdNoteNumberStyleLowercaseRoman = 2,
        wdNoteNumberStyleUppercaseLetter = 3,
        wdNoteNumberStyleLowercaseLetter = 4,
        wdNoteNumberStyleSymbol = 9,
        wdNoteNumberStyleArabicFullWidth = 14,
        wdNoteNumberStyleKanji = 10,
        wdNoteNumberStyleKanjiDigit = 11,
        wdNoteNumberStyleKanjiTraditional = 16,
        wdNoteNumberStyleNumberInCircle = 18,
        wdNoteNumberStyleHanjaRead = 41,
        wdNoteNumberStyleHanjaReadDigit = 42,
        wdNoteNumberStyleTradChinNum1 = 33,
        wdNoteNumberStyleTradChinNum2 = 34,
        wdNoteNumberStyleSimpChinNum1 = 37,
        wdNoteNumberStyleSimpChinNum2 = 38,
        wdNoteNumberStyleHebrewLetter1 = 45,
        wdNoteNumberStyleArabicLetter1 = 46,
        wdNoteNumberStyleHebrewLetter2 = 47,
        wdNoteNumberStyleArabicLetter2 = 48,
        wdNoteNumberStyleHindiLetter1 = 49,
        wdNoteNumberStyleHindiLetter2 = 50,
        wdNoteNumberStyleHindiArabic = 51,
        wdNoteNumberStyleHindiCardinalText = 52,
        wdNoteNumberStyleThaiLetter = 53,
        wdNoteNumberStyleThaiArabic = 54,
        wdNoteNumberStyleThaiCardinalText = 55,
        wdNoteNumberStyleVietCardinalText = 56
    } WdNoteNumberStyle;


typedef enum {
        emptyenum4 = 0
    } WdNoteNumberStyleHID;


typedef [uuid(D6F59885-2962-305C-AA83-BBAB24CDB85E)]
    enum {
        wdCaptionNumberStyleArabic = 0,
        wdCaptionNumberStyleUppercaseRoman = 1,
        wdCaptionNumberStyleLowercaseRoman = 2,
        wdCaptionNumberStyleUppercaseLetter = 3,
        wdCaptionNumberStyleLowercaseLetter = 4,
        wdCaptionNumberStyleArabicFullWidth = 14,
        wdCaptionNumberStyleKanji = 10,
        wdCaptionNumberStyleKanjiDigit = 11,
        wdCaptionNumberStyleKanjiTraditional = 16,
        wdCaptionNumberStyleNumberInCircle = 18,
        wdCaptionNumberStyleGanada = 24,
        wdCaptionNumberStyleChosung = 25,
        wdCaptionNumberStyleZodiac1 = 30,
        wdCaptionNumberStyleZodiac2 = 31,
        wdCaptionNumberStyleHanjaRead = 41,
        wdCaptionNumberStyleHanjaReadDigit = 42,
        wdCaptionNumberStyleTradChinNum2 = 34,
        wdCaptionNumberStyleTradChinNum3 = 35,
        wdCaptionNumberStyleSimpChinNum2 = 38,
        wdCaptionNumberStyleSimpChinNum3 = 39,
        wdCaptionNumberStyleHebrewLetter1 = 45,
        wdCaptionNumberStyleArabicLetter1 = 46,
        wdCaptionNumberStyleHebrewLetter2 = 47,
        wdCaptionNumberStyleArabicLetter2 = 48,
        wdCaptionNumberStyleHindiLetter1 = 49,
        wdCaptionNumberStyleHindiLetter2 = 50,
        wdCaptionNumberStyleHindiArabic = 51,
        wdCaptionNumberStyleHindiCardinalText = 52,
        wdCaptionNumberStyleThaiLetter = 53,
        wdCaptionNumberStyleThaiArabic = 54,
        wdCaptionNumberStyleThaiCardinalText = 55,
        wdCaptionNumberStyleVietCardinalText = 56
    } WdCaptionNumberStyle;


typedef enum {
        emptyenum5 = 0
    } WdCaptionNumberStyleHID;


typedef [uuid(E9A67A18-2AF6-3495-93A9-82262F18C4E5)]
    enum {
        wdPageNumberStyleArabic = 0,
        wdPageNumberStyleUppercaseRoman = 1,
        wdPageNumberStyleLowercaseRoman = 2,
        wdPageNumberStyleUppercaseLetter = 3,
        wdPageNumberStyleLowercaseLetter = 4,
        wdPageNumberStyleArabicFullWidth = 14,
        wdPageNumberStyleKanji = 10,
        wdPageNumberStyleKanjiDigit = 11,
        wdPageNumberStyleKanjiTraditional = 16,
        wdPageNumberStyleNumberInCircle = 18,
        wdPageNumberStyleHanjaRead = 41,
        wdPageNumberStyleHanjaReadDigit = 42,
        wdPageNumberStyleTradChinNum1 = 33,
        wdPageNumberStyleTradChinNum2 = 34,
        wdPageNumberStyleSimpChinNum1 = 37,
        wdPageNumberStyleSimpChinNum2 = 38,
        wdPageNumberStyleHebrewLetter1 = 45,
        wdPageNumberStyleArabicLetter1 = 46,
        wdPageNumberStyleHebrewLetter2 = 47,
        wdPageNumberStyleArabicLetter2 = 48,
        wdPageNumberStyleHindiLetter1 = 49,
        wdPageNumberStyleHindiLetter2 = 50,
        wdPageNumberStyleHindiArabic = 51,
        wdPageNumberStyleHindiCardinalText = 52,
        wdPageNumberStyleThaiLetter = 53,
        wdPageNumberStyleThaiArabic = 54,
        wdPageNumberStyleThaiCardinalText = 55,
        wdPageNumberStyleVietCardinalText = 56,
        wdPageNumberStyleNumberInDash = 57
    } WdPageNumberStyle;


typedef enum {
        emptyenum6 = 0
    } WdPageNumberStyleHID;


typedef [uuid(315154AD-F287-33EE-AEDE-8781545C713F)]
    enum {
        wdStatisticWords = 0,
        wdStatisticLines = 1,
        wdStatisticPages = 2,
        wdStatisticCharacters = 3,
        wdStatisticParagraphs = 4,
        wdStatisticCharactersWithSpaces = 5,
        wdStatisticFarEastCharacters = 6
    } WdStatistic;


typedef enum {
        emptyenum7 = 0
    } WdStatisticHID;


typedef [uuid(B9EDE5B0-50FA-3327-B624-B21F9391AD5B)]
    enum {
        wdPropertyTitle = 1,
        wdPropertySubject = 2,
        wdPropertyAuthor = 3,
        wdPropertyKeywords = 4,
        wdPropertyComments = 5,
        wdPropertyTemplate = 6,
        wdPropertyLastAuthor = 7,
        wdPropertyRevision = 8,
        wdPropertyAppName = 9,
        wdPropertyTimeLastPrinted = 10,
        wdPropertyTimeCreated = 11,
        wdPropertyTimeLastSaved = 12,
        wdPropertyVBATotalEdit = 13,
        wdPropertyPages = 14,
        wdPropertyWords = 15,
        wdPropertyCharacters = 16,
        wdPropertySecurity = 17,
        wdPropertyCategory = 18,
        wdPropertyFormat = 19,
        wdPropertyManager = 20,
        wdPropertyCompany = 21,
        wdPropertyBytes = 22,
        wdPropertyLines = 23,
        wdPropertyParas = 24,
        wdPropertySlides = 25,
        wdPropertyNotes = 26,
        wdPropertyHiddenSlides = 27,
        wdPropertyMMClips = 28,
        wdPropertyHyperlinkBase = 29,
        wdPropertyCharsWSpaces = 30
    } WdBuiltInProperty;


typedef [uuid(296716CF-7239-3CD0-B338-23B6BDDC1BCE)]
    enum {
        wdLineSpaceSingle = 0,
        wdLineSpace1pt5 = 1,
        wdLineSpaceDouble = 2,
        wdLineSpaceAtLeast = 3,
        wdLineSpaceExactly = 4,
        wdLineSpaceMultiple = 5
    } WdLineSpacing;


typedef [uuid(E185D7DA-3CBF-3644-806E-5F683669AF8E)]
    enum {
        wdNumberParagraph = 1,
        wdNumberListNum = 2,
        wdNumberAllNumbers = 3
    } WdNumberType;


typedef [uuid(BFB32608-3F71-3941-964A-959AD6D57A8A)]
    enum {
        wdListNoNumbering = 0,
        wdListListNumOnly = 1,
        wdListBullet = 2,
        wdListSimpleNumbering = 3,
        wdListOutlineNumbering = 4,
        wdListMixedNumbering = 5,
        wdListPictureBullet = 6
    } WdListType;


typedef [uuid(28594D1A-A83A-3372-A275-C1700CFB7D42)]
    enum {
        wdMainTextStory = 1,
        wdFootnotesStory = 2,
        wdEndnotesStory = 3,
        wdCommentsStory = 4,
        wdTextFrameStory = 5,
        wdEvenPagesHeaderStory = 6,
        wdPrimaryHeaderStory = 7,
        wdEvenPagesFooterStory = 8,
        wdPrimaryFooterStory = 9,
        wdFirstPageHeaderStory = 10,
        wdFirstPageFooterStory = 11,
        wdFootnoteSeparatorStory = 12,
        wdFootnoteContinuationSeparatorStory = 13,
        wdFootnoteContinuationNoticeStory = 14,
        wdEndnoteSeparatorStory = 15,
        wdEndnoteContinuationSeparatorStory = 16,
        wdEndnoteContinuationNoticeStory = 17
    } WdStoryType;


typedef [uuid(6AEEBC10-0420-3FB1-8A04-5F2053C4DAE9)]
    enum {
        wdFormatDocument = 0,
        wdFormatDocument97 = 0,
        wdFormatTemplate = 1,
        wdFormatTemplate97 = 1,
        wdFormatText = 2,
        wdFormatTextLineBreaks = 3,
        wdFormatDOSText = 4,
        wdFormatDOSTextLineBreaks = 5,
        wdFormatRTF = 6,
        wdFormatUnicodeText = 7,
        wdFormatEncodedText = 7,
        wdFormatHTML = 8,
        wdFormatWebArchive = 9,
        wdFormatFilteredHTML = 10,
        wdFormatXML = 11,
        wdFormatXMLDocument = 12,
        wdFormatXMLDocumentMacroEnabled = 13,
        wdFormatXMLTemplate = 14,
        wdFormatXMLTemplateMacroEnabled = 15,
        wdFormatDocumentDefault = 16,
        wdFormatPDF = 17,
        wdFormatXPS = 18,
        wdFormatFlatXML = 19,
        wdFormatFlatXMLMacroEnabled = 20,
        wdFormatFlatXMLTemplate = 21,
        wdFormatFlatXMLTemplateMacroEnabled = 22,
        wdFormatOpenDocumentText = 23,
        wdFormatStrictOpenXMLDocument = 24
    } WdSaveFormat;


typedef [uuid(9C1B95DA-5F16-303B-8B1C-9C846D96DE8E)]
    enum {
        wdOpenFormatAuto = 0,
        wdOpenFormatDocument = 1,
        wdOpenFormatTemplate = 2,
        wdOpenFormatRTF = 3,
        wdOpenFormatText = 4,
        wdOpenFormatUnicodeText = 5,
        wdOpenFormatEncodedText = 5,
        wdOpenFormatAllWord = 6,
        wdOpenFormatWebPages = 7,
        wdOpenFormatXML = 8,
        wdOpenFormatXMLDocument = 9,
        wdOpenFormatXMLDocumentMacroEnabled = 10,
        wdOpenFormatXMLTemplate = 11,
        wdOpenFormatXMLTemplateMacroEnabled = 12,
        wdOpenFormatDocument97 = 1,
        wdOpenFormatTemplate97 = 2,
        wdOpenFormatAllWordTemplates = 13,
        wdOpenFormatXMLDocumentSerialized = 14,
        wdOpenFormatXMLDocumentMacroEnabledSerialized = 15,
        wdOpenFormatXMLTemplateSerialized = 16,
        wdOpenFormatXMLTemplateMacroEnabledSerialized = 17,
        wdOpenFormatOpenDocumentText = 18
    } WdOpenFormat;


typedef [uuid(98E477B0-5AC3-3A32-8B67-108CCA2440E2)]
    enum {
        wdHeaderFooterPrimary = 1,
        wdHeaderFooterFirstPage = 2,
        wdHeaderFooterEvenPages = 3
    } WdHeaderFooterIndex;


typedef [uuid(381BE070-999B-3575-ADC6-68FC392AF3D3)]
    enum {
        wdTOCTemplate = 0,
        wdTOCClassic = 1,
        wdTOCDistinctive = 2,
        wdTOCFancy = 3,
        wdTOCModern = 4,
        wdTOCFormal = 5,
        wdTOCSimple = 6
    } WdTocFormat;


typedef [uuid(53781DD1-52EC-3C5F-8219-49F320AAB5D6)]
    enum {
        wdTOFTemplate = 0,
        wdTOFClassic = 1,
        wdTOFDistinctive = 2,
        wdTOFCentered = 3,
        wdTOFFormal = 4,
        wdTOFSimple = 5
    } WdTofFormat;


typedef [uuid(B12AC10C-DAC9-3348-BD2B-29A0A270196B)]
    enum {
        wdTOATemplate = 0,
        wdTOAClassic = 1,
        wdTOADistinctive = 2,
        wdTOAFormal = 3,
        wdTOASimple = 4
    } WdToaFormat;


typedef [uuid(54AFDECB-0EC4-397D-96AB-8E2A64FD7C3A)]
    enum {
        wdLineStyleNone = 0,
        wdLineStyleSingle = 1,
        wdLineStyleDot = 2,
        wdLineStyleDashSmallGap = 3,
        wdLineStyleDashLargeGap = 4,
        wdLineStyleDashDot = 5,
        wdLineStyleDashDotDot = 6,
        wdLineStyleDouble = 7,
        wdLineStyleTriple = 8,
        wdLineStyleThinThickSmallGap = 9,
        wdLineStyleThickThinSmallGap = 10,
        wdLineStyleThinThickThinSmallGap = 11,
        wdLineStyleThinThickMedGap = 12,
        wdLineStyleThickThinMedGap = 13,
        wdLineStyleThinThickThinMedGap = 14,
        wdLineStyleThinThickLargeGap = 15,
        wdLineStyleThickThinLargeGap = 16,
        wdLineStyleThinThickThinLargeGap = 17,
        wdLineStyleSingleWavy = 18,
        wdLineStyleDoubleWavy = 19,
        wdLineStyleDashDotStroked = 20,
        wdLineStyleEmboss3D = 21,
        wdLineStyleEngrave3D = 22,
        wdLineStyleOutset = 23,
        wdLineStyleInset = 24
    } WdLineStyle;


typedef [uuid(A33A1A8C-A17C-31FF-B651-1E748E509DE2)]
    enum {
        wdLineWidth025pt = 2,
        wdLineWidth050pt = 4,
        wdLineWidth075pt = 6,
        wdLineWidth100pt = 8,
        wdLineWidth150pt = 12,
        wdLineWidth225pt = 18,
        wdLineWidth300pt = 24,
        wdLineWidth450pt = 36,
        wdLineWidth600pt = 48
    } WdLineWidth;


typedef [uuid(58B14C6F-0FE6-3BCA-880E-E3A9C039E588)]
    enum {
        wdSectionBreakNextPage = 2,
        wdSectionBreakContinuous = 3,
        wdSectionBreakEvenPage = 4,
        wdSectionBreakOddPage = 5,
        wdLineBreak = 6,
        wdPageBreak = 7,
        wdColumnBreak = 8,
        wdLineBreakClearLeft = 9,
        wdLineBreakClearRight = 10,
        wdTextWrappingBreak = 11
    } WdBreakType;


typedef [uuid(2865FA06-2E76-3355-A5BC-60F362370C60)]
    enum {
        wdTabLeaderSpaces = 0,
        wdTabLeaderDots = 1,
        wdTabLeaderDashes = 2,
        wdTabLeaderLines = 3,
        wdTabLeaderHeavy = 4,
        wdTabLeaderMiddleDot = 5
    } WdTabLeader;


typedef enum {
        emptyenum8 = 0
    } WdTabLeaderHID;


typedef [uuid(8793E9D7-BF93-3E72-AEF2-566795531B56)]
    enum {
        wdInches = 0,
        wdCentimeters = 1,
        wdMillimeters = 2,
        wdPoints = 3,
        wdPicas = 4
    } WdMeasurementUnits;


typedef enum {
        emptyenum9 = 0
    } WdMeasurementUnitsHID;


typedef [uuid(B7E0677C-2BE6-3C25-8F71-A38E34A4E8BA)]
    enum {
        wdDropNone = 0,
        wdDropNormal = 1,
        wdDropMargin = 2
    } WdDropPosition;


typedef [uuid(0A4D5556-FEDB-329E-8EEE-04AB37C53B94)]
    enum {
        wdRestartContinuous = 0,
        wdRestartSection = 1,
        wdRestartPage = 2
    } WdNumberingRule;


typedef [uuid(7F3F2ED2-0B48-3FA1-8072-2F9923016ADF)]
    enum {
        wdBottomOfPage = 0,
        wdBeneathText = 1
    } WdFootnoteLocation;


typedef [uuid(183804E4-7307-32E8-8D48-2493383DC46D)]
    enum {
        wdEndOfSection = 0,
        wdEndOfDocument = 1
    } WdEndnoteLocation;


typedef [uuid(2FDDCDF6-144E-3F5C-AB71-5F689C31A753)]
    enum {
        wdSortSeparateByTabs = 0,
        wdSortSeparateByCommas = 1,
        wdSortSeparateByDefaultTableSeparator = 2
    } WdSortSeparator;


typedef [uuid(5489D1D3-5B21-36BE-AA09-34FB4AB52058)]
    enum {
        wdSeparateByParagraphs = 0,
        wdSeparateByTabs = 1,
        wdSeparateByCommas = 2,
        wdSeparateByDefaultListSeparator = 3
    } WdTableFieldSeparator;


typedef [uuid(80EB5D8F-AF97-3E3F-9EBD-1B1C645CBCC4)]
    enum {
        wdSortFieldAlphanumeric = 0,
        wdSortFieldNumeric = 1,
        wdSortFieldDate = 2,
        wdSortFieldSyllable = 3,
        wdSortFieldJapanJIS = 4,
        wdSortFieldStroke = 5,
        wdSortFieldKoreaKS = 6
    } WdSortFieldType;


typedef enum {
        emptyenum10 = 0
    } WdSortFieldTypeHID;


typedef [uuid(B0CA07BD-9184-32B2-B361-D1D839787D06)]
    enum {
        wdSortOrderAscending = 0,
        wdSortOrderDescending = 1
    } WdSortOrder;


typedef [uuid(6EEDBBA4-BD98-3F0A-A7E4-F4E97C8A6AA0)]
    enum {
        wdTableFormatNone = 0,
        wdTableFormatSimple1 = 1,
        wdTableFormatSimple2 = 2,
        wdTableFormatSimple3 = 3,
        wdTableFormatClassic1 = 4,
        wdTableFormatClassic2 = 5,
        wdTableFormatClassic3 = 6,
        wdTableFormatClassic4 = 7,
        wdTableFormatColorful1 = 8,
        wdTableFormatColorful2 = 9,
        wdTableFormatColorful3 = 10,
        wdTableFormatColumns1 = 11,
        wdTableFormatColumns2 = 12,
        wdTableFormatColumns3 = 13,
        wdTableFormatColumns4 = 14,
        wdTableFormatColumns5 = 15,
        wdTableFormatGrid1 = 16,
        wdTableFormatGrid2 = 17,
        wdTableFormatGrid3 = 18,
        wdTableFormatGrid4 = 19,
        wdTableFormatGrid5 = 20,
        wdTableFormatGrid6 = 21,
        wdTableFormatGrid7 = 22,
        wdTableFormatGrid8 = 23,
        wdTableFormatList1 = 24,
        wdTableFormatList2 = 25,
        wdTableFormatList3 = 26,
        wdTableFormatList4 = 27,
        wdTableFormatList5 = 28,
        wdTableFormatList6 = 29,
        wdTableFormatList7 = 30,
        wdTableFormatList8 = 31,
        wdTableFormat3DEffects1 = 32,
        wdTableFormat3DEffects2 = 33,
        wdTableFormat3DEffects3 = 34,
        wdTableFormatContemporary = 35,
        wdTableFormatElegant = 36,
        wdTableFormatProfessional = 37,
        wdTableFormatSubtle1 = 38,
        wdTableFormatSubtle2 = 39,
        wdTableFormatWeb1 = 40,
        wdTableFormatWeb2 = 41,
        wdTableFormatWeb3 = 42
    } WdTableFormat;


typedef [uuid(397C8DF3-B689-3DB6-BEC0-2525B93DF811)]
    enum {
        wdTableFormatApplyBorders = 1,
        wdTableFormatApplyShading = 2,
        wdTableFormatApplyFont = 4,
        wdTableFormatApplyColor = 8,
        wdTableFormatApplyAutoFit = 16,
        wdTableFormatApplyHeadingRows = 32,
        wdTableFormatApplyLastRow = 64,
        wdTableFormatApplyFirstColumn = 128,
        wdTableFormatApplyLastColumn = 256
    } WdTableFormatApply;


typedef [uuid(1614FDAC-2173-3FB1-ADD3-1A35B81F8897)]
    enum {
        wdLanguageNone = 0,
        wdNoProofing = 1024,
        wdAfrikaans = 1078,
        wdAlbanian = 1052,
        wdAmharic = 1118,
        wdArabicAlgeria = 5121,
        wdArabicBahrain = 15361,
        wdArabicEgypt = 3073,
        wdArabicIraq = 2049,
        wdArabicJordan = 11265,
        wdArabicKuwait = 13313,
        wdArabicLebanon = 12289,
        wdArabicLibya = 4097,
        wdArabicMorocco = 6145,
        wdArabicOman = 8193,
        wdArabicQatar = 16385,
        wdArabic = 1025,
        wdArabicSyria = 10241,
        wdArabicTunisia = 7169,
        wdArabicUAE = 14337,
        wdArabicYemen = 9217,
        wdArmenian = 1067,
        wdAssamese = 1101,
        wdAzeriCyrillic = 2092,
        wdAzeriLatin = 1068,
        wdBasque = 1069,
        wdByelorussian = 1059,
        wdBengali = 1093,
        wdBulgarian = 1026,
        wdBurmese = 1109,
        wdCatalan = 1027,
        wdCherokee = 1116,
        wdChineseHongKongSAR = 3076,
        wdChineseMacaoSAR = 5124,
        wdSimplifiedChinese = 2052,
        wdChineseSingapore = 4100,
        wdTraditionalChinese = 1028,
        wdCroatian = 1050,
        wdCzech = 1029,
        wdDanish = 1030,
        wdDivehi = 1125,
        wdBelgianDutch = 2067,
        wdDutch = 1043,
        wdEdo = 1126,
        wdEnglishAUS = 3081,
        wdEnglishBelize = 10249,
        wdEnglishCanadian = 4105,
        wdEnglishCaribbean = 9225,
        wdEnglishIreland = 6153,
        wdEnglishJamaica = 8201,
        wdEnglishNewZealand = 5129,
        wdEnglishPhilippines = 13321,
        wdEnglishSouthAfrica = 7177,
        wdEnglishTrinidadTobago = 11273,
        wdEnglishUK = 2057,
        wdEnglishUS = 1033,
        wdEnglishZimbabwe = 12297,
        wdEnglishIndonesia = 14345,
        wdEstonian = 1061,
        wdFaeroese = 1080,
        wdPersian = 1065,
        wdFilipino = 1124,
        wdFinnish = 1035,
        wdFulfulde = 1127,
        wdBelgianFrench = 2060,
        wdFrenchCameroon = 11276,
        wdFrenchCanadian = 3084,
        wdFrenchCotedIvoire = 12300,
        wdFrench = 1036,
        wdFrenchLuxembourg = 5132,
        wdFrenchMali = 13324,
        wdFrenchMonaco = 6156,
        wdFrenchReunion = 8204,
        wdFrenchSenegal = 10252,
        wdFrenchMorocco = 14348,
        wdFrenchHaiti = 15372,
        wdSwissFrench = 4108,
        wdFrenchWestIndies = 7180,
        wdFrenchCongoDRC = 9228,
        wdFrisianNetherlands = 1122,
        wdGaelicIreland = 2108,
        wdGaelicScotland = 1084,
        wdGalician = 1110,
        wdGeorgian = 1079,
        wdGermanAustria = 3079,
        wdGerman = 1031,
        wdGermanLiechtenstein = 5127,
        wdGermanLuxembourg = 4103,
        wdSwissGerman = 2055,
        wdGreek = 1032,
        wdGuarani = 1140,
        wdGujarati = 1095,
        wdHausa = 1128,
        wdHawaiian = 1141,
        wdHebrew = 1037,
        wdHindi = 1081,
        wdHungarian = 1038,
        wdIbibio = 1129,
        wdIcelandic = 1039,
        wdIgbo = 1136,
        wdIndonesian = 1057,
        wdInuktitut = 1117,
        wdItalian = 1040,
        wdSwissItalian = 2064,
        wdJapanese = 1041,
        wdKannada = 1099,
        wdKanuri = 1137,
        wdKashmiri = 1120,
        wdKazakh = 1087,
        wdKhmer = 1107,
        wdKirghiz = 1088,
        wdKonkani = 1111,
        wdKorean = 1042,
        wdKyrgyz = 1088,
        wdLao = 1108,
        wdLatin = 1142,
        wdLatvian = 1062,
        wdLithuanian = 1063,
        wdMacedonianFYROM = 1071,
        wdMalaysian = 1086,
        wdMalayBruneiDarussalam = 2110,
        wdMalayalam = 1100,
        wdMaltese = 1082,
        wdManipuri = 1112,
        wdMarathi = 1102,
        wdMongolian = 1104,
        wdNepali = 1121,
        wdNorwegianBokmol = 1044,
        wdNorwegianNynorsk = 2068,
        wdOriya = 1096,
        wdOromo = 1138,
        wdPashto = 1123,
        wdPolish = 1045,
        wdPortugueseBrazil = 1046,
        wdPortuguese = 2070,
        wdPunjabi = 1094,
        wdRhaetoRomanic = 1047,
        wdRomanianMoldova = 2072,
        wdRomanian = 1048,
        wdRussianMoldova = 2073,
        wdRussian = 1049,
        wdSamiLappish = 1083,
        wdSanskrit = 1103,
        wdSerbianCyrillic = 3098,
        wdSerbianLatin = 2074,
        wdSinhalese = 1115,
        wdSindhi = 1113,
        wdSindhiPakistan = 2137,
        wdSlovak = 1051,
        wdSlovenian = 1060,
        wdSomali = 1143,
        wdSorbian = 1070,
        wdSpanishArgentina = 11274,
        wdSpanishBolivia = 16394,
        wdSpanishChile = 13322,
        wdSpanishColombia = 9226,
        wdSpanishCostaRica = 5130,
        wdSpanishDominicanRepublic = 7178,
        wdSpanishEcuador = 12298,
        wdSpanishElSalvador = 17418,
        wdSpanishGuatemala = 4106,
        wdSpanishHonduras = 18442,
        wdMexicanSpanish = 2058,
        wdSpanishNicaragua = 19466,
        wdSpanishPanama = 6154,
        wdSpanishParaguay = 15370,
        wdSpanishPeru = 10250,
        wdSpanishPuertoRico = 20490,
        wdSpanishModernSort = 3082,
        wdSpanish = 1034,
        wdSpanishUruguay = 14346,
        wdSpanishVenezuela = 8202,
        wdSesotho = 1072,
        wdSutu = 1072,
        wdSwahili = 1089,
        wdSwedishFinland = 2077,
        wdSwedish = 1053,
        wdSyriac = 1114,
        wdTajik = 1064,
        wdTamazight = 1119,
        wdTamazightLatin = 2143,
        wdTamil = 1097,
        wdTatar = 1092,
        wdTelugu = 1098,
        wdThai = 1054,
        wdTibetan = 1105,
        wdTigrignaEthiopic = 1139,
        wdTigrignaEritrea = 2163,
        wdTsonga = 1073,
        wdTswana = 1074,
        wdTurkish = 1055,
        wdTurkmen = 1090,
        wdUkrainian = 1058,
        wdUrdu = 1056,
        wdUzbekCyrillic = 2115,
        wdUzbekLatin = 1091,
        wdVenda = 1075,
        wdVietnamese = 1066,
        wdWelsh = 1106,
        wdXhosa = 1076,
        wdYi = 1144,
        wdYiddish = 1085,
        wdYoruba = 1130,
        wdZulu = 1077
    } WdLanguageID;


typedef [uuid(AB7EDE63-D9C9-3D21-98B0-8DCC19D5BD63)]
    enum {
        wdFieldEmpty = 0xffffffff,
        wdFieldRef = 3,
        wdFieldIndexEntry = 4,
        wdFieldFootnoteRef = 5,
        wdFieldSet = 6,
        wdFieldIf = 7,
        wdFieldIndex = 8,
        wdFieldTOCEntry = 9,
        wdFieldStyleRef = 10,
        wdFieldRefDoc = 11,
        wdFieldSequence = 12,
        wdFieldTOC = 13,
        wdFieldInfo = 14,
        wdFieldTitle = 15,
        wdFieldSubject = 16,
        wdFieldAuthor = 17,
        wdFieldKeyWord = 18,
        wdFieldComments = 19,
        wdFieldLastSavedBy = 20,
        wdFieldCreateDate = 21,
        wdFieldSaveDate = 22,
        wdFieldPrintDate = 23,
        wdFieldRevisionNum = 24,
        wdFieldEditTime = 25,
        wdFieldNumPages = 26,
        wdFieldNumWords = 27,
        wdFieldNumChars = 28,
        wdFieldFileName = 29,
        wdFieldTemplate = 30,
        wdFieldDate = 31,
        wdFieldTime = 32,
        wdFieldPage = 33,
        wdFieldExpression = 34,
        wdFieldQuote = 35,
        wdFieldInclude = 36,
        wdFieldPageRef = 37,
        wdFieldAsk = 38,
        wdFieldFillIn = 39,
        wdFieldData = 40,
        wdFieldNext = 41,
        wdFieldNextIf = 42,
        wdFieldSkipIf = 43,
        wdFieldMergeRec = 44,
        wdFieldDDE = 45,
        wdFieldDDEAuto = 46,
        wdFieldGlossary = 47,
        wdFieldPrint = 48,
        wdFieldFormula = 49,
        wdFieldGoToButton = 50,
        wdFieldMacroButton = 51,
        wdFieldAutoNumOutline = 52,
        wdFieldAutoNumLegal = 53,
        wdFieldAutoNum = 54,
        wdFieldImport = 55,
        wdFieldLink = 56,
        wdFieldSymbol = 57,
        wdFieldEmbed = 58,
        wdFieldMergeField = 59,
        wdFieldUserName = 60,
        wdFieldUserInitials = 61,
        wdFieldUserAddress = 62,
        wdFieldBarCode = 63,
        wdFieldDocVariable = 64,
        wdFieldSection = 65,
        wdFieldSectionPages = 66,
        wdFieldIncludePicture = 67,
        wdFieldIncludeText = 68,
        wdFieldFileSize = 69,
        wdFieldFormTextInput = 70,
        wdFieldFormCheckBox = 71,
        wdFieldNoteRef = 72,
        wdFieldTOA = 73,
        wdFieldTOAEntry = 74,
        wdFieldMergeSeq = 75,
        wdFieldPrivate = 77,
        wdFieldDatabase = 78,
        wdFieldAutoText = 79,
        wdFieldCompare = 80,
        wdFieldAddin = 81,
        wdFieldSubscriber = 82,
        wdFieldFormDropDown = 83,
        wdFieldAdvance = 84,
        wdFieldDocProperty = 85,
        wdFieldOCX = 87,
        wdFieldHyperlink = 88,
        wdFieldAutoTextList = 89,
        wdFieldListNum = 90,
        wdFieldHTMLActiveX = 91,
        wdFieldBidiOutline = 92,
        wdFieldAddressBlock = 93,
        wdFieldGreetingLine = 94,
        wdFieldShape = 95,
        wdFieldCitation = 96,
        wdFieldBibliography = 97,
        wdFieldMergeBarcode = 98,
        wdFieldDisplayBarcode = 99
    } WdFieldType;


typedef [uuid(200A1EF2-18FB-3BAB-92AE-E3A78B2E1108)]
    enum {
        wdStyleNormal = 0xffffffff,
        wdStyleEnvelopeAddress = 0xffffffdb,
        wdStyleEnvelopeReturn = 0xffffffda,
        wdStyleBodyText = 0xffffffbd,
        wdStyleHeading1 = 0xfffffffe,
        wdStyleHeading2 = 0xfffffffd,
        wdStyleHeading3 = 0xfffffffc,
        wdStyleHeading4 = 0xfffffffb,
        wdStyleHeading5 = 0xfffffffa,
        wdStyleHeading6 = 0xfffffff9,
        wdStyleHeading7 = 0xfffffff8,
        wdStyleHeading8 = 0xfffffff7,
        wdStyleHeading9 = 0xfffffff6,
        wdStyleIndex1 = 0xfffffff5,
        wdStyleIndex2 = 0xfffffff4,
        wdStyleIndex3 = 0xfffffff3,
        wdStyleIndex4 = 0xfffffff2,
        wdStyleIndex5 = 0xfffffff1,
        wdStyleIndex6 = 0xfffffff0,
        wdStyleIndex7 = 0xffffffef,
        wdStyleIndex8 = 0xffffffee,
        wdStyleIndex9 = 0xffffffed,
        wdStyleTOC1 = 0xffffffec,
        wdStyleTOC2 = 0xffffffeb,
        wdStyleTOC3 = 0xffffffea,
        wdStyleTOC4 = 0xffffffe9,
        wdStyleTOC5 = 0xffffffe8,
        wdStyleTOC6 = 0xffffffe7,
        wdStyleTOC7 = 0xffffffe6,
        wdStyleTOC8 = 0xffffffe5,
        wdStyleTOC9 = 0xffffffe4,
        wdStyleNormalIndent = 0xffffffe3,
        wdStyleFootnoteText = 0xffffffe2,
        wdStyleCommentText = 0xffffffe1,
        wdStyleHeader = 0xffffffe0,
        wdStyleFooter = 0xffffffdf,
        wdStyleIndexHeading = 0xffffffde,
        wdStyleCaption = 0xffffffdd,
        wdStyleTableOfFigures = 0xffffffdc,
        wdStyleFootnoteReference = 0xffffffd9,
        wdStyleCommentReference = 0xffffffd8,
        wdStyleLineNumber = 0xffffffd7,
        wdStylePageNumber = 0xffffffd6,
        wdStyleEndnoteReference = 0xffffffd5,
        wdStyleEndnoteText = 0xffffffd4,
        wdStyleTableOfAuthorities = 0xffffffd3,
        wdStyleMacroText = 0xffffffd2,
        wdStyleTOAHeading = 0xffffffd1,
        wdStyleList = 0xffffffd0,
        wdStyleListBullet = 0xffffffcf,
        wdStyleListNumber = 0xffffffce,
        wdStyleList2 = 0xffffffcd,
        wdStyleList3 = 0xffffffcc,
        wdStyleList4 = 0xffffffcb,
        wdStyleList5 = 0xffffffca,
        wdStyleListBullet2 = 0xffffffc9,
        wdStyleListBullet3 = 0xffffffc8,
        wdStyleListBullet4 = 0xffffffc7,
        wdStyleListBullet5 = 0xffffffc6,
        wdStyleListNumber2 = 0xffffffc5,
        wdStyleListNumber3 = 0xffffffc4,
        wdStyleListNumber4 = 0xffffffc3,
        wdStyleListNumber5 = 0xffffffc2,
        wdStyleTitle = 0xffffffc1,
        wdStyleClosing = 0xffffffc0,
        wdStyleSignature = 0xffffffbf,
        wdStyleDefaultParagraphFont = 0xffffffbe,
        wdStyleBodyTextIndent = 0xffffffbc,
        wdStyleListContinue = 0xffffffbb,
        wdStyleListContinue2 = 0xffffffba,
        wdStyleListContinue3 = 0xffffffb9,
        wdStyleListContinue4 = 0xffffffb8,
        wdStyleListContinue5 = 0xffffffb7,
        wdStyleMessageHeader = 0xffffffb6,
        wdStyleSubtitle = 0xffffffb5,
        wdStyleSalutation = 0xffffffb4,
        wdStyleDate = 0xffffffb3,
        wdStyleBodyTextFirstIndent = 0xffffffb2,
        wdStyleBodyTextFirstIndent2 = 0xffffffb1,
        wdStyleNoteHeading = 0xffffffb0,
        wdStyleBodyText2 = 0xffffffaf,
        wdStyleBodyText3 = 0xffffffae,
        wdStyleBodyTextIndent2 = 0xffffffad,
        wdStyleBodyTextIndent3 = 0xffffffac,
        wdStyleBlockQuotation = 0xffffffab,
        wdStyleHyperlink = 0xffffffaa,
        wdStyleHyperlinkFollowed = 0xffffffa9,
        wdStyleStrong = 0xffffffa8,
        wdStyleEmphasis = 0xffffffa7,
        wdStyleNavPane = 0xffffffa6,
        wdStylePlainText = 0xffffffa5,
        wdStyleHtmlNormal = 0xffffffa1,
        wdStyleHtmlAcronym = 0xffffffa0,
        wdStyleHtmlAddress = 0xffffff9f,
        wdStyleHtmlCite = 0xffffff9e,
        wdStyleHtmlCode = 0xffffff9d,
        wdStyleHtmlDfn = 0xffffff9c,
        wdStyleHtmlKbd = 0xffffff9b,
        wdStyleHtmlPre = 0xffffff9a,
        wdStyleHtmlSamp = 0xffffff99,
        wdStyleHtmlTt = 0xffffff98,
        wdStyleHtmlVar = 0xffffff97,
        wdStyleNormalTable = 0xffffff96,
        wdStyleNormalObject = 0xffffff62,
        wdStyleTableLightShading = 0xffffff61,
        wdStyleTableLightList = 0xffffff60,
        wdStyleTableLightGrid = 0xffffff5f,
        wdStyleTableMediumShading1 = 0xffffff5e,
        wdStyleTableMediumShading2 = 0xffffff5d,
        wdStyleTableMediumList1 = 0xffffff5c,
        wdStyleTableMediumList2 = 0xffffff5b,
        wdStyleTableMediumGrid1 = 0xffffff5a,
        wdStyleTableMediumGrid2 = 0xffffff59,
        wdStyleTableMediumGrid3 = 0xffffff58,
        wdStyleTableDarkList = 0xffffff57,
        wdStyleTableColorfulShading = 0xffffff56,
        wdStyleTableColorfulList = 0xffffff55,
        wdStyleTableColorfulGrid = 0xffffff54,
        wdStyleTableLightShadingAccent1 = 0xffffff53,
        wdStyleTableLightListAccent1 = 0xffffff52,
        wdStyleTableLightGridAccent1 = 0xffffff51,
        wdStyleTableMediumShading1Accent1 = 0xffffff50,
        wdStyleTableMediumShading2Accent1 = 0xffffff4f,
        wdStyleTableMediumList1Accent1 = 0xffffff4e,
        wdStyleListParagraph = 0xffffff4c,
        wdStyleQuote = 0xffffff4b,
        wdStyleIntenseQuote = 0xffffff4a,
        wdStyleSubtleEmphasis = 0xfffffefb,
        wdStyleIntenseEmphasis = 0xfffffefa,
        wdStyleSubtleReference = 0xfffffef9,
        wdStyleIntenseReference = 0xfffffef8,
        wdStyleBookTitle = 0xfffffef7,
        wdStyleBibliography = 0xfffffef6,
        wdStyleTocHeading = 0xfffffef5
    } WdBuiltinStyle;


typedef [uuid(5A240536-0B1F-3599-BF96-3FD550690EF3)]
    enum {
        wdDialogToolsOptionsTabView = 204,
        wdDialogToolsOptionsTabGeneral = 203,
        wdDialogToolsOptionsTabEdit = 224,
        wdDialogToolsOptionsTabPrint = 208,
        wdDialogToolsOptionsTabSave = 209,
        wdDialogToolsOptionsTabProofread = 211,
        wdDialogToolsOptionsTabTrackChanges = 386,
        wdDialogToolsOptionsTabUserInfo = 213,
        wdDialogToolsOptionsTabCompatibility = 525,
        wdDialogToolsOptionsTabTypography = 739,
        wdDialogToolsOptionsTabFileLocations = 225,
        wdDialogToolsOptionsTabFuzzy = 790,
        wdDialogToolsOptionsTabHangulHanjaConversion = 786,
        wdDialogToolsOptionsTabBidi = 1029,
        wdDialogToolsOptionsTabSecurity = 1361,
        wdDialogFilePageSetupTabMargins = 0x000249f0,
        wdDialogFilePageSetupTabPaper = 0x000249f1,
        wdDialogFilePageSetupTabLayout = 0x000249f3,
        wdDialogFilePageSetupTabCharsLines = 0x000249f4,
        wdDialogInsertSymbolTabSymbols = 0x00030d40,
        wdDialogInsertSymbolTabSpecialCharacters = 0x00030d41,
        wdDialogNoteOptionsTabAllFootnotes = 0x000493e0,
        wdDialogNoteOptionsTabAllEndnotes = 0x000493e1,
        wdDialogInsertIndexAndTablesTabIndex = 0x00061a80,
        wdDialogInsertIndexAndTablesTabTableOfContents = 0x00061a81,
        wdDialogInsertIndexAndTablesTabTableOfFigures = 0x00061a82,
        wdDialogInsertIndexAndTablesTabTableOfAuthorities = 0x00061a83,
        wdDialogOrganizerTabStyles = 0x0007a120,
        wdDialogOrganizerTabAutoText = 0x0007a121,
        wdDialogOrganizerTabCommandBars = 0x0007a122,
        wdDialogOrganizerTabMacros = 0x0007a123,
        wdDialogFormatFontTabFont = 0x000927c0,
        wdDialogFormatFontTabCharacterSpacing = 0x000927c1,
        wdDialogFormatFontTabAnimation = 0x000927c2,
        wdDialogFormatBordersAndShadingTabBorders = 0x000aae60,
        wdDialogFormatBordersAndShadingTabPageBorder = 0x000aae61,
        wdDialogFormatBordersAndShadingTabShading = 0x000aae62,
        wdDialogToolsEnvelopesAndLabelsTabEnvelopes = 0x000c3500,
        wdDialogToolsEnvelopesAndLabelsTabLabels = 0x000c3501,
        wdDialogFormatParagraphTabIndentsAndSpacing = 0x000f4240,
        wdDialogFormatParagraphTabTextFlow = 0x000f4241,
        wdDialogFormatParagraphTabTeisai = 0x000f4242,
        wdDialogFormatDrawingObjectTabColorsAndLines = 0x00124f80,

        wdDialogFormatDrawingObjectTabSize = 0x00124f81,
        wdDialogFormatDrawingObjectTabPosition = 0x00124f82,
        wdDialogFormatDrawingObjectTabWrapping = 0x00124f83,
        wdDialogFormatDrawingObjectTabPicture = 0x00124f84,
        wdDialogFormatDrawingObjectTabTextbox = 0x00124f85,
        wdDialogFormatDrawingObjectTabWeb = 0x00124f86,
        wdDialogFormatDrawingObjectTabHR = 0x00124f87,
        wdDialogToolsAutoCorrectExceptionsTabFirstLetter = 0x00155cc0,
        wdDialogToolsAutoCorrectExceptionsTabInitialCaps = 0x00155cc1,
        wdDialogToolsAutoCorrectExceptionsTabHangulAndAlphabet = 0x00155cc2,
        wdDialogToolsAutoCorrectExceptionsTabIac = 0x00155cc3,
        wdDialogFormatBulletsAndNumberingTabBulleted = 0x0016e360,
        wdDialogFormatBulletsAndNumberingTabNumbered = 0x0016e361,
        wdDialogFormatBulletsAndNumberingTabOutlineNumbered = 0x0016e362,
        wdDialogLetterWizardTabLetterFormat = 0x00186a00,
        wdDialogLetterWizardTabRecipientInfo = 0x00186a01,
        wdDialogLetterWizardTabOtherElements = 0x00186a02,
        wdDialogLetterWizardTabSenderInfo = 0x00186a03,
        wdDialogToolsAutoManagerTabAutoCorrect = 0x0019f0a0,
        wdDialogToolsAutoManagerTabAutoFormatAsYouType = 0x0019f0a1,
        wdDialogToolsAutoManagerTabAutoText = 0x0019f0a2,
        wdDialogToolsAutoManagerTabAutoFormat = 0x0019f0a3,
        wdDialogToolsAutoManagerTabSmartTags = 0x0019f0a4,
        wdDialogTablePropertiesTabTable = 0x001b7740,
        wdDialogTablePropertiesTabRow = 0x001b7741,
        wdDialogTablePropertiesTabColumn = 0x001b7742,
        wdDialogTablePropertiesTabCell = 0x001b7743,
        wdDialogEmailOptionsTabSignature = 0x001cfde0,
        wdDialogEmailOptionsTabStationary = 0x001cfde1,
        wdDialogEmailOptionsTabQuoting = 0x001cfde2,
        wdDialogWebOptionsBrowsers = 0x001e8480,
        wdDialogWebOptionsGeneral = 0x001e8480,
        wdDialogWebOptionsFiles = 0x001e8481,
        wdDialogWebOptionsPictures = 0x001e8482,
        wdDialogWebOptionsEncoding = 0x001e8483,
        wdDialogWebOptionsFonts = 0x001e8484,
        wdDialogToolsOptionsTabAcetate = 1266,
        wdDialogTemplates = 0x00200b20,
        wdDialogTemplatesXMLSchema = 0x00200b21,
        wdDialogTemplatesXMLExpansionPacks = 0x00200b22,
        wdDialogTemplatesLinkedCSS = 0x00200b23,
        wdDialogStyleManagementTabEdit = 0x002191c0,
        wdDialogStyleManagementTabRecommend = 0x002191c1,
        wdDialogStyleManagementTabRestrict = 0x002191c2
    } WdWordDialogTab;


typedef [uuid(14A3993D-4639-3665-B2DF-68D5C76E407B)]
    enum {
        wdDialogFilePageSetupTabPaperSize = 0x000249f1,
        wdDialogFilePageSetupTabPaperSource = 0x000249f2
    } WdWordDialogTabHID;


typedef [uuid(6EC6B31B-AA8E-31A3-8211-3ADB9601AC42)]
    enum {
        wdDialogHelpAbout = 9,
        wdDialogHelpWordPerfectHelp = 10,
        wdDialogDocumentStatistics = 78,
        wdDialogFileNew = 79,
        wdDialogFileOpen = 80,
        wdDialogMailMergeOpenDataSource = 81,
        wdDialogMailMergeOpenHeaderSource = 82,
        wdDialogFileSaveAs = 84,
        wdDialogFileSummaryInfo = 86,
        wdDialogToolsTemplates = 87,
        wdDialogFilePrint = 88,
        wdDialogFilePrintSetup = 97,
        wdDialogFileFind = 99,
        wdDialogFormatAddrFonts = 103,
        wdDialogEditPasteSpecial = 111,
        wdDialogEditFind = 112,
        wdDialogEditReplace = 117,
        wdDialogEditStyle = 120,
        wdDialogEditLinks = 124,
        wdDialogEditObject = 125,
        wdDialogTableToText = 128,
        wdDialogTextToTable = 127,
        wdDialogTableInsertTable = 129,
        wdDialogTableInsertCells = 130,
        wdDialogTableInsertRow = 131,
        wdDialogTableDeleteCells = 133,
        wdDialogTableSplitCells = 137,
        wdDialogTableRowHeight = 142,
        wdDialogTableColumnWidth = 143,
        wdDialogToolsCustomize = 152,
        wdDialogInsertBreak = 159,
        wdDialogInsertSymbol = 162,
        wdDialogInsertPicture = 163,
        wdDialogInsertFile = 164,
        wdDialogInsertDateTime = 165,
        wdDialogInsertField = 166,
        wdDialogInsertMergeField = 167,
        wdDialogInsertBookmark = 168,
        wdDialogMarkIndexEntry = 169,
        wdDialogInsertIndex = 170,
        wdDialogInsertTableOfContents = 171,
        wdDialogInsertObject = 172,
        wdDialogToolsCreateEnvelope = 173,
        wdDialogFormatFont = 174,
        wdDialogFormatParagraph = 175,
        wdDialogFormatSectionLayout = 176,
        wdDialogFormatColumns = 177,
        wdDialogFileDocumentLayout = 178,
        wdDialogFilePageSetup = 178,
        wdDialogFormatTabs = 179,
        wdDialogFormatStyle = 180,
        wdDialogFormatDefineStyleFont = 181,
        wdDialogFormatDefineStylePara = 182,
        wdDialogFormatDefineStyleTabs = 183,
        wdDialogFormatDefineStyleFrame = 184,
        wdDialogFormatDefineStyleBorders = 185,
        wdDialogFormatDefineStyleLang = 186,
        wdDialogFormatPicture = 187,
        wdDialogToolsLanguage = 188,
        wdDialogFormatBordersAndShading = 189,
        wdDialogFormatFrame = 190,
        wdDialogToolsThesaurus = 194,
        wdDialogToolsHyphenation = 195,
        wdDialogToolsBulletsNumbers = 196,
        wdDialogToolsHighlightChanges = 197,
        wdDialogToolsRevisions = 197,
        wdDialogToolsCompareDocuments = 198,
        wdDialogTableSort = 199,
        wdDialogToolsOptionsGeneral = 203,
        wdDialogToolsOptionsView = 204,
        wdDialogToolsAdvancedSettings = 206,
        wdDialogToolsOptionsPrint = 208,
        wdDialogToolsOptionsSave = 209,
        wdDialogToolsOptionsSpellingAndGrammar = 211,
        wdDialogToolsOptionsUserInfo = 213,
        wdDialogToolsMacroRecord = 214,
        wdDialogToolsMacro = 215,
        wdDialogWindowActivate = 220,
        wdDialogFormatRetAddrFonts = 221,
        wdDialogOrganizer = 222,
        wdDialogToolsOptionsEdit = 224,
        wdDialogToolsOptionsFileLocations = 225,
        wdDialogToolsWordCount = 228,
        wdDialogControlRun = 235,
        wdDialogInsertPageNumbers = 294,
        wdDialogFormatPageNumber = 298,
        wdDialogCopyFile = 300,
        wdDialogFormatChangeCase = 322,
        wdDialogUpdateTOC = 331,
        wdDialogInsertDatabase = 341,
        wdDialogTableFormula = 348,
        wdDialogFormFieldOptions = 353,
        wdDialogInsertCaption = 357,
        wdDialogInsertCaptionNumbering = 358,
        wdDialogInsertAutoCaption = 359,
        wdDialogFormFieldHelp = 361,
        wdDialogInsertCrossReference = 367,
        wdDialogInsertFootnote = 370,
        wdDialogNoteOptions = 373,
        wdDialogToolsAutoCorrect = 378,
        wdDialogToolsOptionsTrackChanges = 386,
        wdDialogConvertObject = 392,
        wdDialogInsertAddCaption = 402,
        wdDialogConnect = 420,
        wdDialogToolsCustomizeKeyboard = 432,
        wdDialogToolsCustomizeMenus = 433,
        wdDialogToolsMergeDocuments = 435,
        wdDialogMarkTableOfContentsEntry = 442,
        wdDialogFileMacPageSetupGX = 444,
        wdDialogFilePrintOneCopy = 445,
        wdDialogEditFrame = 458,
        wdDialogMarkCitation = 463,
        wdDialogTableOfContentsOptions = 470,
        wdDialogInsertTableOfAuthorities = 471,
        wdDialogInsertTableOfFigures = 472,
        wdDialogInsertIndexAndTables = 473,
        wdDialogInsertFormField = 483,
        wdDialogFormatDropCap = 488,
        wdDialogToolsCreateLabels = 489,
        wdDialogToolsProtectDocument = 503,
        wdDialogFormatStyleGallery = 505,
        wdDialogToolsAcceptRejectChanges = 506,
        wdDialogHelpWordPerfectHelpOptions = 511,
        wdDialogToolsUnprotectDocument = 521,
        wdDialogToolsOptionsCompatibility = 525,
        wdDialogTableOfCaptionsOptions = 551,
        wdDialogTableAutoFormat = 563,
        wdDialogMailMergeFindRecord = 569,
        wdDialogReviewAfmtRevisions = 570,
        wdDialogViewZoom = 577,
        wdDialogToolsProtectSection = 578,
        wdDialogFontSubstitution = 581,
        wdDialogInsertSubdocument = 583,
        wdDialogNewToolbar = 586,
        wdDialogToolsEnvelopesAndLabels = 607,
        wdDialogFormatCallout = 610,
        wdDialogTableFormatCell = 612,
        wdDialogToolsCustomizeMenuBar = 615,
        wdDialogFileRoutingSlip = 624,
        wdDialogEditTOACategory = 625,
        wdDialogToolsManageFields = 631,
        wdDialogDrawSnapToGrid = 633,
        wdDialogDrawAlign = 634,
        wdDialogMailMergeCreateDataSource = 642,
        wdDialogMailMergeCreateHeaderSource = 643,
        wdDialogMailMerge = 676,
        wdDialogMailMergeCheck = 677,
        wdDialogMailMergeHelper = 680,
        wdDialogMailMergeQueryOptions = 681,
        wdDialogFileMacPageSetup = 685,
        wdDialogListCommands = 723,
        wdDialogEditCreatePublisher = 732,
        wdDialogEditSubscribeTo = 733,
        wdDialogEditPublishOptions = 735,
        wdDialogEditSubscribeOptions = 736,
        wdDialogFileMacCustomPageSetupGX = 737,
        wdDialogToolsOptionsTypography = 739,
        wdDialogToolsAutoCorrectExceptions = 762,
        wdDialogToolsOptionsAutoFormatAsYouType = 778,
        wdDialogMailMergeUseAddressBook = 779,
        wdDialogToolsHangulHanjaConversion = 784,
        wdDialogToolsOptionsFuzzy = 790,
        wdDialogEditGoToOld = 811,
        wdDialogInsertNumber = 812,
        wdDialogLetterWizard = 821,
        wdDialogFormatBulletsAndNumbering = 824,
        wdDialogToolsSpellingAndGrammar = 828,
        wdDialogToolsCreateDirectory = 833,
        wdDialogTableWrapping = 854,
        wdDialogFormatTheme = 855,
        wdDialogTableProperties = 861,
        wdDialogEmailOptions = 863,
        wdDialogCreateAutoText = 872,
        wdDialogToolsAutoSummarize = 874,
        wdDialogToolsGrammarSettings = 885,
        wdDialogEditGoTo = 896,
        wdDialogWebOptions = 898,
        wdDialogInsertHyperlink = 925,
        wdDialogToolsAutoManager = 915,
        wdDialogFileVersions = 945,
        wdDialogToolsOptionsAutoFormat = 959,
        wdDialogFormatDrawingObject = 960,
        wdDialogToolsOptions = 974,
        wdDialogFitText = 983,
        wdDialogEditAutoText = 985,
        wdDialogPhoneticGuide = 986,
        wdDialogToolsDictionary = 989,
        wdDialogFileSaveVersion = 1007,
        wdDialogToolsOptionsBidi = 1029,
        wdDialogFrameSetProperties = 1074,
        wdDialogTableTableOptions = 1080,
        wdDialogTableCellOptions = 1081,
        wdDialogIMESetDefault = 1094,
        wdDialogTCSCTranslator = 1156,
        wdDialogHorizontalInVertical = 1160,
        wdDialogTwoLinesInOne = 1161,
        wdDialogFormatEncloseCharacters = 1162,
        wdDialogConsistencyChecker = 1121,
        wdDialogToolsOptionsSmartTag = 1395,
        wdDialogFormatStylesCustom = 1248,
        wdDialogCSSLinks = 1261,
        wdDialogInsertWebComponent = 1324,
        wdDialogToolsOptionsEditCopyPaste = 1356,
        wdDialogToolsOptionsSecurity = 1361,
        wdDialogSearch = 1363,
        wdDialogShowRepairs = 1381,
        wdDialogMailMergeInsertAsk = 4047,
        wdDialogMailMergeInsertFillIn = 4048,
        wdDialogMailMergeInsertIf = 4049,
        wdDialogMailMergeInsertNextIf = 4053,
        wdDialogMailMergeInsertSet = 4054,
        wdDialogMailMergeInsertSkipIf = 4055,
        wdDialogMailMergeFieldMapping = 1304,
        wdDialogMailMergeInsertAddressBlock = 1305,
        wdDialogMailMergeInsertGreetingLine = 1306,
        wdDialogMailMergeInsertFields = 1307,
        wdDialogMailMergeRecipients = 1308,
        wdDialogMailMergeFindRecipient = 1326,
        wdDialogMailMergeSetDocumentType = 1339,
        wdDialogLabelOptions = 1367,
        wdDialogXMLElementAttributes = 1460,
        wdDialogSchemaLibrary = 1417,
        wdDialogPermission = 1469,
        wdDialogMyPermission = 1437,
        wdDialogXMLOptions = 1425,
        wdDialogFormattingRestrictions = 1427,
        wdDialogSourceManager = 1920,
        wdDialogCreateSource = 1922,
        wdDialogDocumentInspector = 1482,
        wdDialogStyleManagement = 1948,
        wdDialogInsertSource = 2120,
        wdDialogOMathRecognizedFunctions = 2165,
        wdDialogInsertPlaceholder = 2348,
        wdDialogBuildingBlockOrganizer = 2067,
        wdDialogContentControlProperties = 2394,
        wdDialogCompatibilityChecker = 2439,
        wdDialogExportAsFixedFormat = 2349,
        wdDialogFileNew2007 = 1116
    } WdWordDialog;


typedef enum {
        emptyenum11 = 0
    } WdWordDialogHID;


typedef [uuid(7EB9A8BD-3300-3492-A540-5F3AAF2F55C6)]
    enum {
        wdFieldKindNone = 0,
        wdFieldKindHot = 1,
        wdFieldKindWarm = 2,
        wdFieldKindCold = 3
    } WdFieldKind;


typedef [uuid(79490EA3-7A77-3A2D-8D1A-A15E6B216CBE)]
    enum {
        wdRegularText = 0,
        wdNumberText = 1,
        wdDateText = 2,
        wdCurrentDateText = 3,
        wdCurrentTimeText = 4,
        wdCalculationText = 5
    } WdTextFormFieldType;


typedef [uuid(7B607C60-CFFC-318E-BDB6-60B025B19545)]
    enum {
        wdNeverConvert = 0,
        wdAlwaysConvert = 1,
        wdAskToNotConvert = 2,
        wdAskToConvert = 3
    } WdChevronConvertRule;


typedef [uuid(49730545-588C-3E74-9C40-988F149B01CC)]
    enum {
        wdNotAMergeDocument = 0xffffffff,
        wdFormLetters = 0,
        wdMailingLabels = 1,
        wdEnvelopes = 2,
        wdCatalog = 3,
        wdEMail = 4,
        wdFax = 5,
        wdDirectory = 3
    } WdMailMergeMainDocType;


typedef [uuid(07E8576F-FD92-3F44-8DCE-00C46F71A56C)]
    enum {
        wdNormalDocument = 0,
        wdMainDocumentOnly = 1,
        wdMainAndDataSource = 2,
        wdMainAndHeader = 3,
        wdMainAndSourceAndHeader = 4,
        wdDataSource = 5
    } WdMailMergeState;


typedef [uuid(EF1C5FC6-1180-3B71-B879-33355000E318)]
    enum {
        wdSendToNewDocument = 0,
        wdSendToPrinter = 1,
        wdSendToEmail = 2,
        wdSendToFax = 3
    } WdMailMergeDestination;


typedef [uuid(1D68A9D2-DC27-300F-8758-AC235B356B05)]
    enum {
        wdNoActiveRecord = 0xffffffff,
        wdNextRecord = 0xfffffffe,
        wdPreviousRecord = 0xfffffffd,
        wdFirstRecord = 0xfffffffc,
        wdLastRecord = 0xfffffffb,
        wdFirstDataSourceRecord = 0xfffffffa,
        wdLastDataSourceRecord = 0xfffffff9,
        wdNextDataSourceRecord = 0xfffffff8,
        wdPreviousDataSourceRecord = 0xfffffff7
    } WdMailMergeActiveRecord;


typedef [uuid(928E425A-4170-3FAC-BACF-D7BD27641BAC)]
    enum {
        wdDefaultFirstRecord = 1,
        wdDefaultLastRecord = 0xfffffff0
    } WdMailMergeDefaultRecord;


typedef [uuid(D0323CE3-E503-3E8E-815F-17E83F2EFF60)]
    enum {
        wdNoMergeInfo = 0xffffffff,
        wdMergeInfoFromWord = 0,
        wdMergeInfoFromAccessDDE = 1,
        wdMergeInfoFromExcelDDE = 2,
        wdMergeInfoFromMSQueryDDE = 3,
        wdMergeInfoFromODBC = 4,
        wdMergeInfoFromODSO = 5
    } WdMailMergeDataSource;


typedef [uuid(296798C9-94F4-30FF-BAE0-D5B892E9E5C0)]
    enum {
        wdMergeIfEqual = 0,
        wdMergeIfNotEqual = 1,
        wdMergeIfLessThan = 2,
        wdMergeIfGreaterThan = 3,
        wdMergeIfLessThanOrEqual = 4,
        wdMergeIfGreaterThanOrEqual = 5,
        wdMergeIfIsBlank = 6,
        wdMergeIfIsNotBlank = 7
    } WdMailMergeComparison;


typedef [uuid(EAF7129E-2874-33F2-9E44-7A0FE3E94992)]
    enum {
        wdSortByName = 0,
        wdSortByLocation = 1
    } WdBookmarkSortBy;


typedef [uuid(458C4ACC-B973-3A1A-8E72-F3361D5D9F55)]
    enum {
        wdWindowStateNormal = 0,
        wdWindowStateMaximize = 1,
        wdWindowStateMinimize = 2
    } WdWindowState;


typedef [uuid(8DC4FED3-F278-383D-AC02-46478C0B4076)]
    enum {
        wdLinkNone = 0,
        wdLinkDataInDoc = 1,
        wdLinkDataOnDisk = 2
    } WdPictureLinkType;


typedef [uuid(4179EEDA-0598-3CC3-85A8-2FC201D18FC6)]
    enum {
        wdLinkTypeOLE = 0,
        wdLinkTypePicture = 1,
        wdLinkTypeText = 2,
        wdLinkTypeReference = 3,
        wdLinkTypeInclude = 4,
        wdLinkTypeImport = 5,
        wdLinkTypeDDE = 6,
        wdLinkTypeDDEAuto = 7,
        wdLinkTypeChart = 8
    } WdLinkType;


typedef [uuid(A7DA9C5F-296D-3269-AAD9-8127DE331A0A)]
    enum {
        wdWindowDocument = 0,
        wdWindowTemplate = 1
    } WdWindowType;


typedef [uuid(32FB36EF-2E57-345C-98BA-051FB07F8F6C)]
    enum {
        wdNormalView = 1,
        wdOutlineView = 2,
        wdPrintView = 3,
        wdPrintPreview = 4,
        wdMasterView = 5,
        wdWebView = 6,
        wdReadingView = 7,
        wdConflictView = 8
    } WdViewType;


typedef [uuid(8472D0A9-03EA-3253-8BC8-F66718CF09A6)]
    enum {
        wdSeekMainDocument = 0,
        wdSeekPrimaryHeader = 1,
        wdSeekFirstPageHeader = 2,
        wdSeekEvenPagesHeader = 3,
        wdSeekPrimaryFooter = 4,
        wdSeekFirstPageFooter = 5,
        wdSeekEvenPagesFooter = 6,
        wdSeekFootnotes = 7,
        wdSeekEndnotes = 8,
        wdSeekCurrentPageHeader = 9,
        wdSeekCurrentPageFooter = 10
    } WdSeekView;


typedef [uuid(167B59A9-DBBD-34AF-AFDB-57AC30C2CE58)]
    enum {
        wdPaneNone = 0,
        wdPanePrimaryHeader = 1,
        wdPaneFirstPageHeader = 2,
        wdPaneEvenPagesHeader = 3,
        wdPanePrimaryFooter = 4,
        wdPaneFirstPageFooter = 5,
        wdPaneEvenPagesFooter = 6,
        wdPaneFootnotes = 7,
        wdPaneEndnotes = 8,
        wdPaneFootnoteContinuationNotice = 9,
        wdPaneFootnoteContinuationSeparator = 10,
        wdPaneFootnoteSeparator = 11,
        wdPaneEndnoteContinuationNotice = 12,
        wdPaneEndnoteContinuationSeparator = 13,
        wdPaneEndnoteSeparator = 14,
        wdPaneComments = 15,
        wdPaneCurrentPageHeader = 16,
        wdPaneCurrentPageFooter = 17,
        wdPaneRevisions = 18,
        wdPaneRevisionsHoriz = 19,
        wdPaneRevisionsVert = 20
    } WdSpecialPane;


typedef [uuid(A761B997-6F90-3C4E-9677-EA06329D5926)]
    enum {
        wdPageFitNone = 0,
        wdPageFitFullPage = 1,
        wdPageFitBestFit = 2,
        wdPageFitTextFit = 3
    } WdPageFit;


typedef [uuid(D82B33F8-1B6D-3829-BBCA-57D150E4C00D)]
    enum {
        wdBrowsePage = 1,
        wdBrowseSection = 2,
        wdBrowseComment = 3,
        wdBrowseFootnote = 4,
        wdBrowseEndnote = 5,
        wdBrowseField = 6,
        wdBrowseTable = 7,
        wdBrowseGraphic = 8,
        wdBrowseHeading = 9,
        wdBrowseEdit = 10,
        wdBrowseFind = 11,
        wdBrowseGoTo = 12
    } WdBrowseTarget;


typedef [uuid(57D6BF95-896D-30E5-B0F0-B97327E7C71D)]
    enum {
        wdPrinterDefaultBin = 0,
        wdPrinterUpperBin = 1,
        wdPrinterOnlyBin = 1,
        wdPrinterLowerBin = 2,
        wdPrinterMiddleBin = 3,
        wdPrinterManualFeed = 4,
        wdPrinterEnvelopeFeed = 5,
        wdPrinterManualEnvelopeFeed = 6,
        wdPrinterAutomaticSheetFeed = 7,
        wdPrinterTractorFeed = 8,
        wdPrinterSmallFormatBin = 9,
        wdPrinterLargeFormatBin = 10,
        wdPrinterLargeCapacityBin = 11,
        wdPrinterPaperCassette = 14,
        wdPrinterFormSource = 15
    } WdPaperTray;


typedef [uuid(35023E17-F1A4-3D19-A3C9-B28D30158769)]
    enum {
        wdOrientPortrait = 0,
        wdOrientLandscape = 1
    } WdOrientation;


typedef [uuid(475FDD97-B63F-3209-8EB6-7250FE13BCDF)]
    enum {
        wdNoSelection = 0,
        wdSelectionIP = 1,
        wdSelectionNormal = 2,
        wdSelectionFrame = 3,
        wdSelectionColumn = 4,
        wdSelectionRow = 5,
        wdSelectionBlock = 6,
        wdSelectionInlineShape = 7,
        wdSelectionShape = 8
    } WdSelectionType;


typedef [uuid(FCCB82A4-40EF-3DE0-B972-4A14EBDC2B08)]
    enum {
        wdCaptionFigure = 0xffffffff,
        wdCaptionTable = 0xfffffffe,
        wdCaptionEquation = 0xfffffffd
    } WdCaptionLabelID;


typedef [uuid(BD0E5FD4-BCC4-3913-82EF-19EE05B56F04)]
    enum {
        wdRefTypeNumberedItem = 0,
        wdRefTypeHeading = 1,
        wdRefTypeBookmark = 2,
        wdRefTypeFootnote = 3,
        wdRefTypeEndnote = 4
    } WdReferenceType;


typedef [uuid(394033AF-E0BA-30E7-B099-A79873E55634)]
    enum {
        wdContentText = 0xffffffff,
        wdNumberRelativeContext = 0xfffffffe,
        wdNumberNoContext = 0xfffffffd,
        wdNumberFullContext = 0xfffffffc,
        wdEntireCaption = 2,
        wdOnlyLabelAndNumber = 3,
        wdOnlyCaptionText = 4,
        wdFootnoteNumber = 5,
        wdEndnoteNumber = 6,
        wdPageNumber = 7,
        wdPosition = 15,
        wdFootnoteNumberFormatted = 16,
        wdEndnoteNumberFormatted = 17
    } WdReferenceKind;


typedef [uuid(B81E5359-6200-3CCB-9B49-8BE46F9A9FEA)]
    enum {
        wdIndexTemplate = 0,
        wdIndexClassic = 1,
        wdIndexFancy = 2,
        wdIndexModern = 3,
        wdIndexBulleted = 4,
        wdIndexFormal = 5,
        wdIndexSimple = 6
    } WdIndexFormat;


typedef [uuid(80954786-7FCB-3BFD-9F88-94F39D2C7385)]
    enum {
        wdIndexIndent = 0,
        wdIndexRunin = 1
    } WdIndexType;


typedef [uuid(E8408DCB-9426-3394-B017-F49092A37E32)]
    enum {
        wdWrapNever = 0,
        wdWrapAlways = 1,
        wdWrapAsk = 2
    } WdRevisionsWrap;


typedef [uuid(22EE5D98-3D02-3761-AD43-435C8CF763B0)]
    enum {
        wdNoRevision = 0,
        wdRevisionInsert = 1,
        wdRevisionDelete = 2,
        wdRevisionProperty = 3,
        wdRevisionParagraphNumber = 4,
        wdRevisionDisplayField = 5,
        wdRevisionReconcile = 6,
        wdRevisionConflict = 7,
        wdRevisionStyle = 8,
        wdRevisionReplace = 9,
        wdRevisionParagraphProperty = 10,
        wdRevisionTableProperty = 11,
        wdRevisionSectionProperty = 12,
        wdRevisionStyleDefinition = 13,
        wdRevisionMovedFrom = 14,
        wdRevisionMovedTo = 15,
        wdRevisionCellInsertion = 16,
        wdRevisionCellDeletion = 17,
        wdRevisionCellMerge = 18,
        wdRevisionCellSplit = 19,
        wdRevisionConflictInsert = 20,
        wdRevisionConflictDelete = 21
    } WdRevisionType;


typedef [uuid(37F5F8CF-B92C-34D1-90CC-30ACB9334AB5)]
    enum {
        wdOneAfterAnother = 0,
        wdAllAtOnce = 1
    } WdRoutingSlipDelivery;


typedef [uuid(FAB5FFAC-8DCB-3EC9-8554-51DCECAE5C3C)]
    enum {
        wdNotYetRouted = 0,
        wdRouteInProgress = 1,
        wdRouteComplete = 2
    } WdRoutingSlipStatus;


typedef [uuid(A04EAECD-6433-3994-8B86-4E4D973C4630)]
    enum {
        wdSectionContinuous = 0,
        wdSectionNewColumn = 1,
        wdSectionNewPage = 2,
        wdSectionEvenPage = 3,
        wdSectionOddPage = 4
    } WdSectionStart;


typedef [uuid(E1B4A968-3072-3060-B6B7-1A1356D45CA2)]
    enum {
        wdDoNotSaveChanges = 0,
        wdSaveChanges = 0xffffffff,
        wdPromptToSaveChanges = 0xfffffffe
    } WdSaveOptions;


typedef [uuid(FCC2234D-E8C2-3676-AF72-8589E043FB64)]
    enum {
        wdDocumentNotSpecified = 0,
        wdDocumentLetter = 1,
        wdDocumentEmail = 2
    } WdDocumentKind;


typedef [uuid(BFA3BC72-BCD9-31CC-9F78-1AE867DF9840)]
    enum {
        wdTypeDocument = 0,
        wdTypeTemplate = 1,
        wdTypeFrameset = 2
    } WdDocumentType;


typedef [uuid(62694D53-8F38-33E2-8753-E19D97489C30)]
    enum {
        wdWordDocument = 0,
        wdOriginalDocumentFormat = 1,
        wdPromptUser = 2
    } WdOriginalFormat;


typedef [uuid(867B8394-0450-32AE-80A9-8861CB6AC618)]
    enum {
        wdRelocateUp = 0,
        wdRelocateDown = 1
    } WdRelocate;


typedef [uuid(1A98AA4F-A0F3-3980-9A55-0B958B6C8158)]
    enum {
        wdInsertedTextMarkNone = 0,
        wdInsertedTextMarkBold = 1,
        wdInsertedTextMarkItalic = 2,
        wdInsertedTextMarkUnderline = 3,
        wdInsertedTextMarkDoubleUnderline = 4,
        wdInsertedTextMarkColorOnly = 5,
        wdInsertedTextMarkStrikeThrough = 6,
        wdInsertedTextMarkDoubleStrikeThrough = 7
    } WdInsertedTextMark;


typedef [uuid(44D14FEA-48E8-37D1-8446-AF942183D346)]
    enum {
        wdRevisedLinesMarkNone = 0,
        wdRevisedLinesMarkLeftBorder = 1,
        wdRevisedLinesMarkRightBorder = 2,
        wdRevisedLinesMarkOutsideBorder = 3
    } WdRevisedLinesMark;


typedef [uuid(002686EA-BC17-3B7C-BE4E-ECA572100016)]
    enum {
        wdDeletedTextMarkHidden = 0,
        wdDeletedTextMarkStrikeThrough = 1,
        wdDeletedTextMarkCaret = 2,
        wdDeletedTextMarkPound = 3,
        wdDeletedTextMarkNone = 4,
        wdDeletedTextMarkBold = 5,
        wdDeletedTextMarkItalic = 6,
        wdDeletedTextMarkUnderline = 7,
        wdDeletedTextMarkDoubleUnderline = 8,
        wdDeletedTextMarkColorOnly = 9,
        wdDeletedTextMarkDoubleStrikeThrough = 10
    } WdDeletedTextMark;


typedef [uuid(9E20280E-224E-3492-B547-0055D8DB19E8)]
    enum {
        wdRevisedPropertiesMarkNone = 0,
        wdRevisedPropertiesMarkBold = 1,
        wdRevisedPropertiesMarkItalic = 2,
        wdRevisedPropertiesMarkUnderline = 3,
        wdRevisedPropertiesMarkDoubleUnderline = 4,
        wdRevisedPropertiesMarkColorOnly = 5,
        wdRevisedPropertiesMarkStrikeThrough = 6,
        wdRevisedPropertiesMarkDoubleStrikeThrough = 7
    } WdRevisedPropertiesMark;


typedef [uuid(4165CD13-DD2A-354B-9992-F5B446F34D40)]
    enum {
        wdFieldShadingNever = 0,
        wdFieldShadingAlways = 1,
        wdFieldShadingWhenSelected = 2
    } WdFieldShading;


typedef [uuid(41700B9A-149A-3173-9324-E651080B9918)]
    enum {
        wdDocumentsPath = 0,
        wdPicturesPath = 1,
        wdUserTemplatesPath = 2,
        wdWorkgroupTemplatesPath = 3,
        wdUserOptionsPath = 4,
        wdAutoRecoverPath = 5,
        wdToolsPath = 6,
        wdTutorialPath = 7,
        wdStartupPath = 8,
        wdProgramPath = 9,
        wdGraphicsFiltersPath = 10,
        wdTextConvertersPath = 11,
        wdProofingToolsPath = 12,
        wdTempFilePath = 13,
        wdCurrentFolderPath = 14,
        wdStyleGalleryPath = 15,
        wdBorderArtPath = 19
    } WdDefaultFilePath;


typedef [uuid(8B0DD4CD-D15D-3290-81BA-A73BC181E06F)]
    enum {
        wdNoTabHangIndent = 1,
        wdNoSpaceRaiseLower = 2,
        wdPrintColBlack = 3,
        wdWrapTrailSpaces = 4,
        wdNoColumnBalance = 5,
        wdConvMailMergeEsc = 6,
        wdSuppressSpBfAfterPgBrk = 7,
        wdSuppressTopSpacing = 8,
        wdOrigWordTableRules = 9,
        wdTransparentMetafiles = 10,
        wdShowBreaksInFrames = 11,
        wdSwapBordersFacingPages = 12,
        wdLeaveBackslashAlone = 13,
        wdExpandShiftReturn = 14,
        wdDontULTrailSpace = 15,
        wdDontBalanceSingleByteDoubleByteWidth = 16,
        wdSuppressTopSpacingMac5 = 17,
        wdSpacingInWholePoints = 18,
        wdPrintBodyTextBeforeHeader = 19,
        wdNoLeading = 20,
        wdNoSpaceForUL = 21,
        wdMWSmallCaps = 22,
        wdNoExtraLineSpacing = 23,
        wdTruncateFontHeight = 24,
        wdSubFontBySize = 25,
        wdUsePrinterMetrics = 26,
        wdWW6BorderRules = 27,
        wdExactOnTop = 28,
        wdSuppressBottomSpacing = 29,
        wdWPSpaceWidth = 30,
        wdWPJustification = 31,
        wdLineWrapLikeWord6 = 32,
        wdShapeLayoutLikeWW8 = 33,
        wdFootnoteLayoutLikeWW8 = 34,
        wdDontUseHTMLParagraphAutoSpacing = 35,
        wdDontAdjustLineHeightInTable = 36,
        wdForgetLastTabAlignment = 37,
        wdAutospaceLikeWW7 = 38,
        wdAlignTablesRowByRow = 39,
        wdLayoutRawTableWidth = 40,
        wdLayoutTableRowsApart = 41,
        wdUseWord97LineBreakingRules = 42,
        wdDontBreakWrappedTables = 43,
        wdDontSnapTextToGridInTableWithObjects = 44,
        wdSelectFieldWithFirstOrLastCharacter = 45,
        wdApplyBreakingRules = 46,
        wdDontWrapTextWithPunctuation = 47,
        wdDontUseAsianBreakRulesInGrid = 48,
        wdUseWord2002TableStyleRules = 49,
        wdGrowAutofit = 50,
        wdUseNormalStyleForList = 51,
        wdDontUseIndentAsNumberingTabStop = 52,
        wdFELineBreak11 = 53,
        wdAllowSpaceOfSameStyleInTable = 54,
        wdWW11IndentRules = 55,
        wdDontAutofitConstrainedTables = 56,
        wdAutofitLikeWW11 = 57,
        wdUnderlineTabInNumList = 58,
        wdHangulWidthLikeWW11 = 59,
        wdSplitPgBreakAndParaMark = 60,
        wdDontVertAlignCellWithShape = 61,
        wdDontBreakConstrainedForcedTables = 62,
        wdDontVertAlignInTextbox = 63,
        wdWord11KerningPairs = 64,
        wdCachedColBalance = 65,
        wdDisableOTKerning = 66,
        wdFlipMirrorIndents = 67,
        wdDontOverrideTableStyleFontSzAndJustification = 68,
        wdUseWord2010TableStyleRules = 69
    } WdCompatibility;


typedef [uuid(8540D1F6-D74A-3FAD-8BE2-03F9CADC2B1E)]
    enum {
        wdPaper10x14 = 0,
        wdPaper11x17 = 1,
        wdPaperLetter = 2,
        wdPaperLetterSmall = 3,
        wdPaperLegal = 4,
        wdPaperExecutive = 5,
        wdPaperA3 = 6,
        wdPaperA4 = 7,
        wdPaperA4Small = 8,
        wdPaperA5 = 9,
        wdPaperB4 = 10,
        wdPaperB5 = 11,
        wdPaperCSheet = 12,
        wdPaperDSheet = 13,
        wdPaperESheet = 14,
        wdPaperFanfoldLegalGerman = 15,
        wdPaperFanfoldStdGerman = 16,
        wdPaperFanfoldUS = 17,
        wdPaperFolio = 18,
        wdPaperLedger = 19,
        wdPaperNote = 20,
        wdPaperQuarto = 21,
        wdPaperStatement = 22,
        wdPaperTabloid = 23,
        wdPaperEnvelope9 = 24,
        wdPaperEnvelope10 = 25,
        wdPaperEnvelope11 = 26,
        wdPaperEnvelope12 = 27,
        wdPaperEnvelope14 = 28,
        wdPaperEnvelopeB4 = 29,
        wdPaperEnvelopeB5 = 30,
        wdPaperEnvelopeB6 = 31,
        wdPaperEnvelopeC3 = 32,
        wdPaperEnvelopeC4 = 33,
        wdPaperEnvelopeC5 = 34,
        wdPaperEnvelopeC6 = 35,
        wdPaperEnvelopeC65 = 36,
        wdPaperEnvelopeDL = 37,
        wdPaperEnvelopeItaly = 38,
        wdPaperEnvelopeMonarch = 39,
        wdPaperEnvelopePersonal = 40,
        wdPaperCustom = 41
    } WdPaperSize;


typedef [uuid(B116B479-488C-3D69-BFBE-A64DD14F3BB9)]
    enum {
        wdCustomLabelLetter = 0,
        wdCustomLabelLetterLS = 1,
        wdCustomLabelA4 = 2,
        wdCustomLabelA4LS = 3,
        wdCustomLabelA5 = 4,
        wdCustomLabelA5LS = 5,
        wdCustomLabelB5 = 6,
        wdCustomLabelMini = 7,
        wdCustomLabelFanfold = 8,
        wdCustomLabelVertHalfSheet = 9,
        wdCustomLabelVertHalfSheetLS = 10,
        wdCustomLabelHigaki = 11,
        wdCustomLabelHigakiLS = 12,
        wdCustomLabelB4JIS = 13
    } WdCustomLabelPageSize;


typedef [uuid(992D8289-31EF-3821-87EE-F4994C1C6F55)]
    enum {
        wdNoProtection = 0xffffffff,
        wdAllowOnlyRevisions = 0,
        wdAllowOnlyComments = 1,
        wdAllowOnlyFormFields = 2,
        wdAllowOnlyReading = 3
    } WdProtectionType;


typedef [uuid(6AF6E882-A139-3B8E-9B1C-3315A1AF366D)]
    enum {
        wdAdjective = 0,
        wdNoun = 1,
        wdAdverb = 2,
        wdVerb = 3,
        wdPronoun = 4,
        wdConjunction = 5,
        wdPreposition = 6,
        wdInterjection = 7,
        wdIdiom = 8,
        wdOther = 9
    } WdPartOfSpeech;


typedef [uuid(2AA0788C-78E4-39B9-AE23-B2A18849B924)]
    enum {
        wdSubscriberBestFormat = 0,
        wdSubscriberRTF = 1,
        wdSubscriberText = 2,
        wdSubscriberPict = 4
    } WdSubscriberFormats;


typedef [uuid(8D0DC233-B993-3557-8702-0B855D6ECB56)]
    enum {
        wdPublisher = 0,
        wdSubscriber = 1
    } WdEditionType;


typedef [uuid(409FCE29-2640-3D59-90C8-8A808092DE16)]
    enum {
        wdCancelPublisher = 0,
        wdSendPublisher = 1,
        wdSelectPublisher = 2,
        wdAutomaticUpdate = 3,
        wdManualUpdate = 4,
        wdChangeAttributes = 5,
        wdUpdateSubscriber = 6,
        wdOpenSource = 7
    } WdEditionOption;


typedef [uuid(EC64ADD2-4DB2-36C1-8915-2E9C64F9F57B)]
    enum {
        wdRelativeHorizontalPositionMargin = 0,
        wdRelativeHorizontalPositionPage = 1,
        wdRelativeHorizontalPositionColumn = 2,
        wdRelativeHorizontalPositionCharacter = 3,
        wdRelativeHorizontalPositionLeftMarginArea = 4,
        wdRelativeHorizontalPositionRightMarginArea = 5,
        wdRelativeHorizontalPositionInnerMarginArea = 6,
        wdRelativeHorizontalPositionOuterMarginArea = 7
    } WdRelativeHorizontalPosition;


typedef [uuid(01DABBC6-BBF7-3830-A252-E88AD0CB5678)]
    enum {
        wdRelativeVerticalPositionMargin = 0,
        wdRelativeVerticalPositionPage = 1,
        wdRelativeVerticalPositionParagraph = 2,
        wdRelativeVerticalPositionLine = 3,
        wdRelativeVerticalPositionTopMarginArea = 4,
        wdRelativeVerticalPositionBottomMarginArea = 5,
        wdRelativeVerticalPositionInnerMarginArea = 6,
        wdRelativeVerticalPositionOuterMarginArea = 7
    } WdRelativeVerticalPosition;


typedef [uuid(2253A7C8-C563-386D-BDC6-B55E72015C02)]
    enum {
        wdHelp = 0,
        wdHelpAbout = 1,
        wdHelpActiveWindow = 2,
        wdHelpContents = 3,
        wdHelpExamplesAndDemos = 4,
        wdHelpIndex = 5,
        wdHelpKeyboard = 6,
        wdHelpPSSHelp = 7,
        wdHelpQuickPreview = 8,
        wdHelpSearch = 9,
        wdHelpUsingHelp = 10,
        wdHelpIchitaro = 11,
        wdHelpPE2 = 12,
        wdHelpHWP = 13
    } WdHelpType;


typedef enum {
        emptyenum12 = 0
    } WdHelpTypeHID;


typedef [uuid(13125B67-CC0F-313B-A28D-E4C74F81E126)]
    enum {
        wdKeyCategoryNil = 0xffffffff,
        wdKeyCategoryDisable = 0,
        wdKeyCategoryCommand = 1,
        wdKeyCategoryMacro = 2,
        wdKeyCategoryFont = 3,
        wdKeyCategoryAutoText = 4,
        wdKeyCategoryStyle = 5,
        wdKeyCategorySymbol = 6,
        wdKeyCategoryPrefix = 7
    } WdKeyCategory;


typedef [uuid(0641128D-0872-3E67-9991-E962AB36BAF2)]
    enum {
        wdNoKey = 255,
        wdKeyShift = 256,
        wdKeyControl = 512,
        wdKeyCommand = 512,
        wdKeyAlt = 1024,
        wdKeyOption = 1024,
        wdKeyA = 65,
        wdKeyB = 66,
        wdKeyC = 67,
        wdKeyD = 68,
        wdKeyE = 69,
        wdKeyF = 70,
        wdKeyG = 71,
        wdKeyH = 72,
        wdKeyI = 73,
        wdKeyJ = 74,
        wdKeyK = 75,
        wdKeyL = 76,
        wdKeyM = 77,
        wdKeyN = 78,
        wdKeyO = 79,
        wdKeyP = 80,
        wdKeyQ = 81,
        wdKeyR = 82,
        wdKeyS = 83,
        wdKeyT = 84,
        wdKeyU = 85,
        wdKeyV = 86,
        wdKeyW = 87,
        wdKeyX = 88,
        wdKeyY = 89,
        wdKeyZ = 90,
        wdKey0 = 48,
        wdKey1 = 49,
        wdKey2 = 50,
        wdKey3 = 51,
        wdKey4 = 52,
        wdKey5 = 53,
        wdKey6 = 54,
        wdKey7 = 55,
        wdKey8 = 56,
        wdKey9 = 57,
        wdKeyBackspace = 8,
        wdKeyTab = 9,
        wdKeyNumeric5Special = 12,
        wdKeyReturn = 13,
        wdKeyPause = 19,
        wdKeyEsc = 27,
        wdKeySpacebar = 32,
        wdKeyPageUp = 33,
        wdKeyPageDown = 34,
        wdKeyEnd = 35,
        wdKeyHome = 36,
        wdKeyInsert = 45,
        wdKeyDelete = 46,
        wdKeyNumeric0 = 96,
        wdKeyNumeric1 = 97,
        wdKeyNumeric2 = 98,
        wdKeyNumeric3 = 99,
        wdKeyNumeric4 = 100,
        wdKeyNumeric5 = 101,
        wdKeyNumeric6 = 102,
        wdKeyNumeric7 = 103,
        wdKeyNumeric8 = 104,
        wdKeyNumeric9 = 105,
        wdKeyNumericMultiply = 106,
        wdKeyNumericAdd = 107,
        wdKeyNumericSubtract = 109,
        wdKeyNumericDecimal = 110,
        wdKeyNumericDivide = 111,
        wdKeyF1 = 112,
        wdKeyF2 = 113,
        wdKeyF3 = 114,
        wdKeyF4 = 115,
        wdKeyF5 = 116,
        wdKeyF6 = 117,
        wdKeyF7 = 118,
        wdKeyF8 = 119,
        wdKeyF9 = 120,
        wdKeyF10 = 121,
        wdKeyF11 = 122,
        wdKeyF12 = 123,
        wdKeyF13 = 124,
        wdKeyF14 = 125,
        wdKeyF15 = 126,
        wdKeyF16 = 127,
        wdKeyScrollLock = 145,
        wdKeySemiColon = 186,
        wdKeyEquals = 187,
        wdKeyComma = 188,
        wdKeyHyphen = 189,
        wdKeyPeriod = 190,
        wdKeySlash = 191,
        wdKeyBackSingleQuote = 192,
        wdKeyOpenSquareBrace = 219,
        wdKeyBackSlash = 220,
        wdKeyCloseSquareBrace = 221,
        wdKeySingleQuote = 222
    } WdKey;


typedef [uuid(7FBA9601-95D8-3525-8834-A1BB7BB5BB0D)]
    enum {
        wdOLELink = 0,
        wdOLEEmbed = 1,
        wdOLEControl = 2
    } WdOLEType;


typedef [uuid(B1E1E568-A954-370D-BDDE-1DEE3FE965D7)]
    enum {
        wdOLEVerbPrimary = 0,
        wdOLEVerbShow = 0xffffffff,
        wdOLEVerbOpen = 0xfffffffe,
        wdOLEVerbHide = 0xfffffffd,
        wdOLEVerbUIActivate = 0xfffffffc,
        wdOLEVerbInPlaceActivate = 0xfffffffb,
        wdOLEVerbDiscardUndoState = 0xfffffffa
    } WdOLEVerb;


typedef [uuid(2F972E43-BB76-3DBB-969F-665D859F3D52)]
    enum {
        wdInLine = 0,
        wdFloatOverText = 1
    } WdOLEPlacement;


typedef [uuid(07D962DD-B8BD-3B64-93B5-804E4692204E)]
    enum {
        wdLeftPortrait = 0,
        wdCenterPortrait = 1,
        wdRightPortrait = 2,
        wdLeftLandscape = 3,
        wdCenterLandscape = 4,
        wdRightLandscape = 5,
        wdLeftClockwise = 6,
        wdCenterClockwise = 7,
        wdRightClockwise = 8
    } WdEnvelopeOrientation;


typedef [uuid(589E54F8-90C3-3C76-910B-4E6CBF21068D)]
    enum {
        wdFullBlock = 0,
        wdModifiedBlock = 1,
        wdSemiBlock = 2
    } WdLetterStyle;


typedef [uuid(AC8A429B-81FF-3CA5-910E-A03F96533295)]
    enum {
        wdLetterTop = 0,
        wdLetterBottom = 1,
        wdLetterLeft = 2,
        wdLetterRight = 3
    } WdLetterheadLocation;


typedef [uuid(760A1DA4-732F-3807-9348-F1523975D7CB)]
    enum {
        wdSalutationInformal = 0,
        wdSalutationFormal = 1,
        wdSalutationBusiness = 2,
        wdSalutationOther = 3
    } WdSalutationType;


typedef [uuid(B4DDD66F-48BF-33C4-B074-F0D61992E186)]
    enum {
        wdGenderFemale = 0,
        wdGenderMale = 1,
        wdGenderNeutral = 2,
        wdGenderUnknown = 3
    } WdSalutationGender;


typedef [uuid(4EDBFF52-62D3-38CC-99D1-0FFEF9BCAD4A)]
    enum {
        wdMove = 0,
        wdExtend = 1
    } WdMovementType;


typedef enum {
        wdUndefined = 0x0098967f,
        wdToggle = 0x0098967e,
        wdForward = 0x3fffffff,
        wdBackward = 0xc0000001,
        wdAutoPosition = 0,
        wdFirst = 1,
        wdCreatorCode = 0x4d535744
    } WdConstants;


typedef [uuid(773B6CF3-4435-343F-BA19-8F0B7D78CC67)]
    enum {
        wdPasteOLEObject = 0,
        wdPasteRTF = 1,
        wdPasteText = 2,
        wdPasteMetafilePicture = 3,
        wdPasteBitmap = 4,
        wdPasteDeviceIndependentBitmap = 5,
        wdPasteHyperlink = 7,
        wdPasteShape = 8,
        wdPasteEnhancedMetafile = 9,
        wdPasteHTML = 10
    } WdPasteDataType;


typedef [uuid(96E15CCE-75AA-3E47-9B68-410E9A544CD6)]
    enum {
        wdPrintDocumentContent = 0,
        wdPrintProperties = 1,
        wdPrintComments = 2,
        wdPrintMarkup = 2,
        wdPrintStyles = 3,
        wdPrintAutoTextEntries = 4,
        wdPrintKeyAssignments = 5,
        wdPrintEnvelope = 6,
        wdPrintDocumentWithMarkup = 7
    } WdPrintOutItem;


typedef [uuid(359EAB69-7EA9-3179-B5D8-808A3CA74365)]
    enum {
        wdPrintAllPages = 0,
        wdPrintOddPagesOnly = 1,
        wdPrintEvenPagesOnly = 2
    } WdPrintOutPages;


typedef [uuid(64DC8298-B347-32EE-BB16-96C885822088)]
    enum {
        wdPrintAllDocument = 0,
        wdPrintSelection = 1,
        wdPrintCurrentPage = 2,
        wdPrintFromTo = 3,
        wdPrintRangeOfPages = 4
    } WdPrintOutRange;


typedef [uuid(6AA9DBAF-EDDB-31DA-88C3-FFF0FBA0FC96)]
    enum {
        wdSpelling = 0,
        wdGrammar = 1,
        wdThesaurus = 2,
        wdHyphenation = 3,
        wdSpellingComplete = 4,
        wdSpellingCustom = 5,
        wdSpellingLegal = 6,
        wdSpellingMedical = 7,
        wdHangulHanjaConversion = 8,
        wdHangulHanjaConversionCustom = 9
    } WdDictionaryType;


typedef enum {
        emptyenum13 = 0
    } WdDictionaryTypeHID;


typedef [uuid(38D365EE-71C2-3B51-9BD2-EC09E5875C59)]
    enum {
        wdSpellword = 0,
        wdWildcard = 1,
        wdAnagram = 2
    } WdSpellingWordType;


typedef [uuid(3F83F6C0-D880-32CE-97A9-D13517AA8F3F)]
    enum {
        wdSpellingCorrect = 0,
        wdSpellingNotInDictionary = 1,
        wdSpellingCapitalization = 2
    } WdSpellingErrorType;


typedef [uuid(CA88E198-7D52-30F9-B8F9-F2CBC7A83370)]
    enum {
        wdSpellingError = 0,
        wdGrammaticalError = 1
    } WdProofreadingErrorType;


typedef [uuid(EEEC37A7-495B-30F5-8404-37644FC0358F)]
    enum {
        wdInlineShapeEmbeddedOLEObject = 1,
        wdInlineShapeLinkedOLEObject = 2,
        wdInlineShapePicture = 3,
        wdInlineShapeLinkedPicture = 4,
        wdInlineShapeOLEControlObject = 5,
        wdInlineShapeHorizontalLine = 6,
        wdInlineShapePictureHorizontalLine = 7,
        wdInlineShapeLinkedPictureHorizontalLine = 8,
        wdInlineShapePictureBullet = 9,
        wdInlineShapeScriptAnchor = 10,
        wdInlineShapeOWSAnchor = 11,
        wdInlineShapeChart = 12,
        wdInlineShapeDiagram = 13,
        wdInlineShapeLockedCanvas = 14,
        wdInlineShapeSmartArt = 15,
        wdInlineShapeWebVideo = 16
    } WdInlineShapeType;


typedef [uuid(670A5813-DB2F-3ACE-874D-C5BB2053D1EA)]
    enum {
        wdTiled = 0,
        wdIcons = 1
    } WdArrangeStyle;


typedef [uuid(83857847-1A45-3BD4-8ECB-576D355911EE)]
    enum {
        wdSelStartActive = 1,
        wdSelAtEOL = 2,
        wdSelOvertype = 4,
        wdSelActive = 8,
        wdSelReplace = 16
    } WdSelectionFlags;


typedef [uuid(2745DBFE-9993-3DAF-96CD-AA9827F23217)]
    enum {
        wdAutoVersionOff = 0,
        wdAutoVersionOnClose = 1
    } WdAutoVersions;


typedef [uuid(7DFA7A62-26A0-3CCE-ADFA-F12E721FB229)]
    enum {
        wdOrganizerObjectStyles = 0,
        wdOrganizerObjectAutoText = 1,
        wdOrganizerObjectCommandBars = 2,
        wdOrganizerObjectProjectItems = 3
    } WdOrganizerObject;


typedef [uuid(858EB926-41E4-3509-B9D9-0B62C364228A)]
    enum {
        wdMatchParagraphMark = 0x0001000f,
        wdMatchTabCharacter = 9,
        wdMatchCommentMark = 5,
        wdMatchAnyCharacter = 0x0001003f,
        wdMatchAnyDigit = 0x0001001f,
        wdMatchAnyLetter = 0x0001002f,
        wdMatchCaretCharacter = 11,
        wdMatchColumnBreak = 14,
        wdMatchEmDash = 8212,
        wdMatchEnDash = 8211,
        wdMatchEndnoteMark = 0x00010013,
        wdMatchField = 19,
        wdMatchFootnoteMark = 0x00010012,
        wdMatchGraphic = 1,
        wdMatchManualLineBreak = 0x0001000f,
        wdMatchManualPageBreak = 0x0001001c,
        wdMatchNonbreakingHyphen = 30,
        wdMatchNonbreakingSpace = 160,
        wdMatchOptionalHyphen = 31,
        wdMatchSectionBreak = 0x0001002c,
        wdMatchWhiteSpace = 0x00010077
    } WdFindMatch;


typedef [uuid(AF00A39F-BCAC-333A-9A95-32724B7057C3)]
    enum {
        wdFindStop = 0,
        wdFindContinue = 1,
        wdFindAsk = 2
    } WdFindWrap;


typedef [uuid(26E3C1D3-6937-3EFA-8859-7FFC81869CE5)]
    enum {
        wdActiveEndAdjustedPageNumber = 1,
        wdActiveEndSectionNumber = 2,
        wdActiveEndPageNumber = 3,
        wdNumberOfPagesInDocument = 4,
        wdHorizontalPositionRelativeToPage = 5,
        wdVerticalPositionRelativeToPage = 6,
        wdHorizontalPositionRelativeToTextBoundary = 7,
        wdVerticalPositionRelativeToTextBoundary = 8,
        wdFirstCharacterColumnNumber = 9,
        wdFirstCharacterLineNumber = 10,
        wdFrameIsSelected = 11,
        wdWithInTable = 12,
        wdStartOfRangeRowNumber = 13,
        wdEndOfRangeRowNumber = 14,
        wdMaximumNumberOfRows = 15,
        wdStartOfRangeColumnNumber = 16,
        wdEndOfRangeColumnNumber = 17,
        wdMaximumNumberOfColumns = 18,
        wdZoomPercentage = 19,
        wdSelectionMode = 20,
        wdCapsLock = 21,
        wdNumLock = 22,
        wdOverType = 23,
        wdRevisionMarking = 24,
        wdInFootnoteEndnotePane = 25,
        wdInCommentPane = 26,
        wdInHeaderFooter = 28,
        wdAtEndOfRowMarker = 31,
        wdReferenceOfType = 32,
        wdHeaderFooterType = 33,
        wdInMasterDocument = 34,
        wdInFootnote = 35,
        wdInEndnote = 36,
        wdInWordMail = 37,
        wdInClipboard = 38,
        wdInCoverPage = 41,
        wdInBibliography = 42,
        wdInCitation = 43,
        wdInFieldCode = 44,
        wdInFieldResult = 45,
        wdInContentControl = 46
    } WdInformation;


typedef [uuid(C500DDD8-DC7F-30B8-8816-5D28D9F1DED1)]
    enum {
        wdWrapSquare = 0,
        wdWrapTight = 1,
        wdWrapThrough = 2,
        wdWrapNone = 3,
        wdWrapTopBottom = 4,
        wdWrapBehind = 5,
        wdWrapFront = 3,
        wdWrapInline = 7
    } WdWrapType;


typedef [uuid(9C46779B-5D34-399B-8F02-1FD193FDE323)]
    enum {
        wdWrapBoth = 0,
        wdWrapLeft = 1,
        wdWrapRight = 2,
        wdWrapLargest = 3
    } WdWrapSideType;


typedef [uuid(0621016A-022C-3A7E-B017-F4589F97BA4E)]
    enum {
        wdOutlineLevel1 = 1,
        wdOutlineLevel2 = 2,
        wdOutlineLevel3 = 3,
        wdOutlineLevel4 = 4,
        wdOutlineLevel5 = 5,
        wdOutlineLevel6 = 6,
        wdOutlineLevel7 = 7,
        wdOutlineLevel8 = 8,
        wdOutlineLevel9 = 9,
        wdOutlineLevelBodyText = 10
    } WdOutlineLevel;


typedef [uuid(C1432471-5CCA-3C20-88BE-740332643664)]
    enum {
        wdTextOrientationHorizontal = 0,
        wdTextOrientationUpward = 2,
        wdTextOrientationDownward = 3,
        wdTextOrientationVerticalFarEast = 1,
        wdTextOrientationHorizontalRotatedFarEast = 4,
        wdTextOrientationVertical = 5
    } WdTextOrientation;


typedef enum {
        emptyenum14 = 0
    } WdTextOrientationHID;


typedef [uuid(921913F8-9206-362B-9C9D-E12B20FA517B)]
    enum {
        wdArtApples = 1,
        wdArtMapleMuffins = 2,
        wdArtCakeSlice = 3,
        wdArtCandyCorn = 4,
        wdArtIceCreamCones = 5,
        wdArtChampagneBottle = 6,
        wdArtPartyGlass = 7,
        wdArtChristmasTree = 8,
        wdArtTrees = 9,
        wdArtPalmsColor = 10,
        wdArtBalloons3Colors = 11,
        wdArtBalloonsHotAir = 12,
        wdArtPartyFavor = 13,
        wdArtConfettiStreamers = 14,
        wdArtHearts = 15,
        wdArtHeartBalloon = 16,
        wdArtStars3D = 17,
        wdArtStarsShadowed = 18,
        wdArtStars = 19,
        wdArtSun = 20,
        wdArtEarth2 = 21,
        wdArtEarth1 = 22,
        wdArtPeopleHats = 23,
        wdArtSombrero = 24,
        wdArtPencils = 25,
        wdArtPackages = 26,
        wdArtClocks = 27,
        wdArtFirecrackers = 28,
        wdArtRings = 29,
        wdArtMapPins = 30,
        wdArtConfetti = 31,
        wdArtCreaturesButterfly = 32,
        wdArtCreaturesLadyBug = 33,
        wdArtCreaturesFish = 34,
        wdArtBirdsFlight = 35,
        wdArtScaredCat = 36,
        wdArtBats = 37,
        wdArtFlowersRoses = 38,
        wdArtFlowersRedRose = 39,
        wdArtPoinsettias = 40,
        wdArtHolly = 41,
        wdArtFlowersTiny = 42,
        wdArtFlowersPansy = 43,
        wdArtFlowersModern2 = 44,
        wdArtFlowersModern1 = 45,
        wdArtWhiteFlowers = 46,
        wdArtVine = 47,
        wdArtFlowersDaisies = 48,
        wdArtFlowersBlockPrint = 49,
        wdArtDecoArchColor = 50,
        wdArtFans = 51,
        wdArtFilm = 52,
        wdArtLightning1 = 53,
        wdArtCompass = 54,
        wdArtDoubleD = 55,
        wdArtClassicalWave = 56,
        wdArtShadowedSquares = 57,
        wdArtTwistedLines1 = 58,
        wdArtWaveline = 59,
        wdArtQuadrants = 60,
        wdArtCheckedBarColor = 61,
        wdArtSwirligig = 62,
        wdArtPushPinNote1 = 63,
        wdArtPushPinNote2 = 64,
        wdArtPumpkin1 = 65,
        wdArtEggsBlack = 66,
        wdArtCup = 67,
        wdArtHeartGray = 68,
        wdArtGingerbreadMan = 69,
        wdArtBabyPacifier = 70,
        wdArtBabyRattle = 71,
        wdArtCabins = 72,
        wdArtHouseFunky = 73,
        wdArtStarsBlack = 74,
        wdArtSnowflakes = 75,
        wdArtSnowflakeFancy = 76,
        wdArtSkyrocket = 77,
        wdArtSeattle = 78,
        wdArtMusicNotes = 79,
        wdArtPalmsBlack = 80,
        wdArtMapleLeaf = 81,
        wdArtPaperClips = 82,
        wdArtShorebirdTracks = 83,
        wdArtPeople = 84,
        wdArtPeopleWaving = 85,
        wdArtEclipsingSquares2 = 86,
        wdArtHypnotic = 87,
        wdArtDiamondsGray = 88,
        wdArtDecoArch = 89,
        wdArtDecoBlocks = 90,
        wdArtCirclesLines = 91,
        wdArtPapyrus = 92,
        wdArtWoodwork = 93,
        wdArtWeavingBraid = 94,
        wdArtWeavingRibbon = 95,
        wdArtWeavingAngles = 96,
        wdArtArchedScallops = 97,
        wdArtSafari = 98,
        wdArtCelticKnotwork = 99,
        wdArtCrazyMaze = 100,
        wdArtEclipsingSquares1 = 101,
        wdArtBirds = 102,
        wdArtFlowersTeacup = 103,
        wdArtNorthwest = 104,
        wdArtSouthwest = 105,
        wdArtTribal6 = 106,
        wdArtTribal4 = 107,
        wdArtTribal3 = 108,
        wdArtTribal2 = 109,
        wdArtTribal5 = 110,
        wdArtXIllusions = 111,
        wdArtZanyTriangles = 112,
        wdArtPyramids = 113,
        wdArtPyramidsAbove = 114,
        wdArtConfettiGrays = 115,
        wdArtConfettiOutline = 116,
        wdArtConfettiWhite = 117,
        wdArtMosaic = 118,
        wdArtLightning2 = 119,
        wdArtHeebieJeebies = 120,
        wdArtLightBulb = 121,
        wdArtGradient = 122,
        wdArtTriangleParty = 123,
        wdArtTwistedLines2 = 124,
        wdArtMoons = 125,
        wdArtOvals = 126,
        wdArtDoubleDiamonds = 127,
        wdArtChainLink = 128,
        wdArtTriangles = 129,
        wdArtTribal1 = 130,
        wdArtMarqueeToothed = 131,
        wdArtSharksTeeth = 132,
        wdArtSawtooth = 133,
        wdArtSawtoothGray = 134,
        wdArtPostageStamp = 135,
        wdArtWeavingStrips = 136,
        wdArtZigZag = 137,
        wdArtCrossStitch = 138,
        wdArtGems = 139,
        wdArtCirclesRectangles = 140,
        wdArtCornerTriangles = 141,
        wdArtCreaturesInsects = 142,
        wdArtZigZagStitch = 143,
        wdArtCheckered = 144,
        wdArtCheckedBarBlack = 145,
        wdArtMarquee = 146,
        wdArtBasicWhiteDots = 147,
        wdArtBasicWideMidline = 148,
        wdArtBasicWideOutline = 149,
        wdArtBasicWideInline = 150,
        wdArtBasicThinLines = 151,
        wdArtBasicWhiteDashes = 152,
        wdArtBasicWhiteSquares = 153,
        wdArtBasicBlackSquares = 154,
        wdArtBasicBlackDashes = 155,
        wdArtBasicBlackDots = 156,
        wdArtStarsTop = 157,
        wdArtCertificateBanner = 158,
        wdArtHandmade1 = 159,
        wdArtHandmade2 = 160,
        wdArtTornPaper = 161,
        wdArtTornPaperBlack = 162,
        wdArtCouponCutoutDashes = 163,
        wdArtCouponCutoutDots = 164
    } WdPageBorderArt;


typedef [uuid(B7721110-1D37-39DE-9890-E292845D2A25)]
    enum {
        wdBorderDistanceFromText = 0,
        wdBorderDistanceFromPageEdge = 1
    } WdBorderDistanceFrom;


typedef [uuid(739A8B0A-D71D-3C99-84FF-1E3440263312)]
    enum {
        wdReplaceNone = 0,
        wdReplaceOne = 1,
        wdReplaceAll = 2
    } WdReplace;


typedef [uuid(A2D97AD7-404A-3459-870D-F8B99B52382F)]
    enum {
        wdFontBiasDontCare = 255,
        wdFontBiasDefault = 0,
        wdFontBiasFareast = 1
    } WdFontBias;


typedef [uuid(417EC967-ACF1-3B68-9743-D9D104681FB3)]
    enum {
        wdBrowserLevelV4 = 0,
        wdBrowserLevelMicrosoftInternetExplorer5 = 1,
        wdBrowserLevelMicrosoftInternetExplorer6 = 2
    } WdBrowserLevel;


typedef [uuid(F5505753-856C-33A5-9129-291F3E9F441D)]
    enum {
        wdEnclosureCircle = 0,
        wdEnclosureSquare = 1,
        wdEnclosureTriangle = 2,
        wdEnclosureDiamond = 3
    } WdEnclosureType;


typedef [uuid(0F05520A-75C5-378A-A3B8-E7B89539F932)]
    enum {
        wdEncloseStyleNone = 0,
        wdEncloseStyleSmall = 1,
        wdEncloseStyleLarge = 2
    } WdEncloseStyle;


typedef [uuid(4C4F593A-9757-3A01-AC2D-D155B45AB080)]
    enum {
        wdHighAnsiIsFarEast = 0,
        wdHighAnsiIsHighAnsi = 1,
        wdAutoDetectHighAnsiFarEast = 2
    } WdHighAnsiText;


typedef [uuid(B9D5B662-C047-3EF3-97EC-B6BED7499BC9)]
    enum {
        wdLayoutModeDefault = 0,
        wdLayoutModeGrid = 1,
        wdLayoutModeLineGrid = 2,
        wdLayoutModeGenko = 3
    } WdLayoutMode;


typedef [uuid(1DC9A70E-A0EB-34AF-8A29-FE9C2032FC79)]
    enum {
        wdEmailMessage = 0,
        wdDocument = 1,
        wdWebPage = 2
    } WdDocumentMedium;


typedef [uuid(27D51657-6EA9-3956-A11C-C6303EC9A3AD)]
    enum {
        wdPriorityNormal = 1,
        wdPriorityLow = 2,
        wdPriorityHigh = 3
    } WdMailerPriority;


typedef [uuid(79C569A5-0A9F-3922-BC4D-908835FFED05)]
    enum {
        wdDocumentViewRtl = 0,
        wdDocumentViewLtr = 1
    } WdDocumentViewDirection;


typedef [uuid(E6AB5A96-2FF7-37FA-B555-65573AF645BC)]
    enum {
        wdNumeralArabic = 0,
        wdNumeralHindi = 1,
        wdNumeralContext = 2,
        wdNumeralSystem = 3
    } WdArabicNumeral;


typedef [uuid(D08FA7EE-D986-3539-AA28-10DBAB03E863)]
    enum {
        wdMonthNamesArabic = 0,
        wdMonthNamesEnglish = 1,
        wdMonthNamesFrench = 2
    } WdMonthNames;


typedef [uuid(707EF034-24E7-3EDE-BB67-748FB000CC52)]
    enum {
        wdCursorMovementLogical = 0,
        wdCursorMovementVisual = 1
    } WdCursorMovement;


typedef [uuid(9A004EB1-0626-3809-B753-FAE554E3721B)]
    enum {
        wdVisualSelectionBlock = 0,
        wdVisualSelectionContinuous = 1
    } WdVisualSelection;


typedef [uuid(5D6DAAA5-69B8-33EC-B902-21218FFC16C1)]
    enum {
        wdTableDirectionRtl = 0,
        wdTableDirectionLtr = 1
    } WdTableDirection;


typedef [uuid(C2ADF35B-D18A-351B-B61F-79D9E874DE1D)]
    enum {
        wdFlowLtr = 0,
        wdFlowRtl = 1
    } WdFlowDirection;


typedef [uuid(5C417FBE-DCBA-3E9B-811D-42D0C974E938)]
    enum {
        wdDiacriticColorBidi = 0,
        wdDiacriticColorLatin = 1
    } WdDiacriticColor;


typedef [uuid(28B55FC9-4A35-3F42-99FA-923EC633B8F1)]
    enum {
        wdGutterPosLeft = 0,
        wdGutterPosTop = 1,
        wdGutterPosRight = 2
    } WdGutterStyle;


typedef [uuid(A952AF67-0B87-3F27-8647-F0D2BCE47722)]
    enum {
        wdGutterStyleLatin = 0xfffffff6,
        wdGutterStyleBidi = 2
    } WdGutterStyleOld;


typedef [uuid(0C0568FC-FA89-3ACC-B9CD-B046D85723B6)]
    enum {
        wdSectionDirectionRtl = 0,
        wdSectionDirectionLtr = 1
    } WdSectionDirection;


typedef [uuid(78AABE7B-69ED-3039-A665-AAFD53268F74)]
    enum {
        wdDateLanguageBidi = 10,
        wdDateLanguageLatin = 1033
    } WdDateLanguage;


typedef [uuid(E99F6EC3-9FC0-370C-AE31-1A0452AC413A)]
    enum {
        wdCalendarTypeBidi = 99,
        wdCalendarTypeGregorian = 100
    } WdCalendarTypeBi;


typedef [uuid(2F1B54DB-4A60-3B71-9EB6-7AE77033B5B5)]
    enum {
        wdCalendarWestern = 0,
        wdCalendarArabic = 1,
        wdCalendarHebrew = 2,
        wdCalendarTaiwan = 3,
        wdCalendarJapan = 4,
        wdCalendarThai = 5,
        wdCalendarKorean = 6,
        wdCalendarSakaEra = 7,
        wdCalendarTranslitEnglish = 8,
        wdCalendarTranslitFrench = 9,
        wdCalendarUmalqura = 13
    } WdCalendarType;


typedef [uuid(1A41F606-6AEF-37E5-A4AA-799EBE04CFA2)]
    enum {
        wdReadingOrderRtl = 0,
        wdReadingOrderLtr = 1
    } WdReadingOrder;


typedef [uuid(7BAF6C5F-E7D6-37DA-95F4-0864D1128E54)]
    enum {
        wdFullScript = 0,
        wdPartialScript = 1,
        wdMixedScript = 2,
        wdMixedAuthorizedScript = 3
    } WdHebSpellStart;


typedef [uuid(93914D16-797F-3747-8421-54B51590CEF1)]
    enum {
        wdNone = 0,
        wdInitialAlef = 1,
        wdFinalYaa = 2,
        wdBoth = 3
    } WdAraSpeller;


typedef [uuid(B95C2C1C-FA2F-319B-A6DA-8D560FD44553)]
    enum {
        wdColorAutomatic = 0xff000000,
        wdColorBlack = 0,
        wdColorBlue = 0x00ff0000,
        wdColorTurquoise = 0x00ffff00,
        wdColorBrightGreen = 65280,
        wdColorPink = 0x00ff00ff,
        wdColorRed = 255,
        wdColorYellow = 65535,
        wdColorWhite = 0x00ffffff,
        wdColorDarkBlue = 0x00800000,
        wdColorTeal = 0x00808000,
        wdColorGreen = 32768,
        wdColorViolet = 0x00800080,
        wdColorDarkRed = 128,
        wdColorDarkYellow = 32896,
        wdColorBrown = 13209,
        wdColorOliveGreen = 13107,
        wdColorDarkGreen = 13056,
        wdColorDarkTeal = 0x00663300,
        wdColorIndigo = 0x00993333,
        wdColorOrange = 26367,
        wdColorBlueGray = 0x00996666,
        wdColorLightOrange = 39423,
        wdColorLime = 52377,
        wdColorSeaGreen = 0x00669933,
        wdColorAqua = 0x00cccc33,
        wdColorLightBlue = 0x00ff6633,
        wdColorGold = 52479,
        wdColorSkyBlue = 0x00ffcc00,
        wdColorPlum = 0x00663399,
        wdColorRose = 0x00cc99ff,
        wdColorTan = 0x0099ccff,
        wdColorLightYellow = 0x0099ffff,
        wdColorLightGreen = 0x00ccffcc,
        wdColorLightTurquoise = 0x00ffffcc,
        wdColorPaleBlue = 0x00ffcc99,
        wdColorLavender = 0x00ff99cc,
        wdColorGray05 = 0x00f3f3f3,
        wdColorGray10 = 0x00e6e6e6,
        wdColorGray125 = 0x00e0e0e0,
        wdColorGray15 = 0x00d9d9d9,
        wdColorGray20 = 0x00cccccc,
        wdColorGray25 = 0x00c0c0c0,
        wdColorGray30 = 0x00b3b3b3,
        wdColorGray35 = 0x00a6a6a6,
        wdColorGray375 = 0x00a0a0a0,
        wdColorGray40 = 0x00999999,
        wdColorGray45 = 0x008c8c8c,
        wdColorGray50 = 0x00808080,
        wdColorGray55 = 0x00737373,
        wdColorGray60 = 0x00666666,
        wdColorGray625 = 0x00606060,
        wdColorGray65 = 0x00595959,
        wdColorGray70 = 0x004c4c4c,
        wdColorGray75 = 0x00404040,
        wdColorGray80 = 0x00333333,
        wdColorGray85 = 0x00262626,
        wdColorGray875 = 0x00202020,
        wdColorGray90 = 0x00191919,
        wdColorGray95 = 0x000c0c0c
    } WdColor;


typedef [uuid(21E8E5B2-DCF5-3825-9F43-1DA651E79C64)]
    enum {
        wdShapeTop = 0xfff0bdc1,
        wdShapeLeft = 0xfff0bdc2,
        wdShapeBottom = 0xfff0bdc3,
        wdShapeRight = 0xfff0bdc4,
        wdShapeCenter = 0xfff0bdc5,
        wdShapeInside = 0xfff0bdc6,
        wdShapeOutside = 0xfff0bdc7
    } WdShapePosition;


typedef [uuid(AF2102B9-8C24-358E-B851-05D1803A4356)]
    enum {
        wdTableTop = 0xfff0bdc1,
        wdTableLeft = 0xfff0bdc2,
        wdTableBottom = 0xfff0bdc3,
        wdTableRight = 0xfff0bdc4,
        wdTableCenter = 0xfff0bdc5,
        wdTableInside = 0xfff0bdc6,
        wdTableOutside = 0xfff0bdc7
    } WdTablePosition;


typedef [uuid(D73D319D-BB39-3BFC-BC01-509855F4C15F)]
    enum {
        wdWord8ListBehavior = 0,
        wdWord9ListBehavior = 1,
        wdWord10ListBehavior = 2
    } WdDefaultListBehavior;


typedef [uuid(D69495AF-8F32-39EE-BD96-D683D87D6A8E)]
    enum {
        wdWord8TableBehavior = 0,
        wdWord9TableBehavior = 1
    } WdDefaultTableBehavior;


typedef [uuid(7A27760C-FFDD-35D3-B12A-85CBEC20AFC8)]
    enum {
        wdAutoFitFixed = 0,
        wdAutoFitContent = 1,
        wdAutoFitWindow = 2
    } WdAutoFitBehavior;


typedef [uuid(6502B78D-944A-36EE-BF60-F6B45716C4ED)]
    enum {
        wdPreferredWidthAuto = 1,
        wdPreferredWidthPercent = 2,
        wdPreferredWidthPoints = 3
    } WdPreferredWidthType;


typedef [uuid(B5F5A962-1BC9-35A4-AC91-C40B9D33ACB9)]
    enum {
        wdLineBreakJapanese = 1041,
        wdLineBreakKorean = 1042,
        wdLineBreakSimplifiedChinese = 2052,
        wdLineBreakTraditionalChinese = 1028
    } WdFarEastLineBreakLanguageID;


typedef [uuid(858C6BC5-2351-363F-9177-BBFFA86CCB78)]
    enum {
        wdPageView = 3,
        wdOnlineView = 6
    } WdViewTypeOld;


typedef [uuid(B14E1D94-EAC6-37D5-80D3-40CF2FC44C22)]
    enum {
        wdFramesetTypeFrameset = 0,
        wdFramesetTypeFrame = 1
    } WdFramesetType;


typedef [uuid(BC173C05-2DF7-314F-8087-7CF97F5BE921)]
    enum {
        wdFramesetSizeTypePercent = 0,
        wdFramesetSizeTypeFixed = 1,
        wdFramesetSizeTypeRelative = 2
    } WdFramesetSizeType;


typedef [uuid(B2762291-75F1-39D6-9297-6B8F6DD6A271)]
    enum {
        wdFramesetNewFrameAbove = 0,
        wdFramesetNewFrameBelow = 1,
        wdFramesetNewFrameRight = 2,
        wdFramesetNewFrameLeft = 3
    } WdFramesetNewFrameLocation;


typedef [uuid(0E37EEFA-84BD-300E-8AB4-7CFC2C8C3F38)]
    enum {
        wdScrollbarTypeAuto = 0,
        wdScrollbarTypeYes = 1,
        wdScrollbarTypeNo = 2
    } WdScrollbarType;


typedef [uuid(A6872888-D8A9-3BFA-9EAD-0998D01E37D1)]
    enum {
        wdTwoLinesInOneNone = 0,
        wdTwoLinesInOneNoBrackets = 1,
        wdTwoLinesInOneParentheses = 2,
        wdTwoLinesInOneSquareBrackets = 3,
        wdTwoLinesInOneAngleBrackets = 4,
        wdTwoLinesInOneCurlyBrackets = 5
    } WdTwoLinesInOneType;


typedef [uuid(23EE5CED-FE35-3D2E-A069-8D44CD012D99)]
    enum {
        wdHorizontalInVerticalNone = 0,
        wdHorizontalInVerticalFitInLine = 1,
        wdHorizontalInVerticalResizeLine = 2
    } WdHorizontalInVerticalType;


typedef [uuid(6CF7A114-A67B-3B17-AE17-03564598740D)]
    enum {
        wdHorizontalLineAlignLeft = 0,
        wdHorizontalLineAlignCenter = 1,
        wdHorizontalLineAlignRight = 2
    } WdHorizontalLineAlignment;


typedef [uuid(6BE99866-55FF-336C-9719-681E7E04E74E)]
    enum {
        wdHorizontalLinePercentWidth = 0xffffffff,
        wdHorizontalLineFixedWidth = 0xfffffffe
    } WdHorizontalLineWidthType;


typedef [uuid(452A1AEC-5665-36CB-8E14-9C39286E8216)]
    enum {
        wdPhoneticGuideAlignmentCenter = 0,
        wdPhoneticGuideAlignmentZeroOneZero = 1,
        wdPhoneticGuideAlignmentOneTwoOne = 2,
        wdPhoneticGuideAlignmentLeft = 3,
        wdPhoneticGuideAlignmentRight = 4,
        wdPhoneticGuideAlignmentRightVertical = 5
    } WdPhoneticGuideAlignmentType;


typedef [uuid(A921AF37-36D9-30D1-9ABB-FE255AAA60AE)]
    enum {
        wdNewBlankDocument = 0,
        wdNewWebPage = 1,
        wdNewEmailMessage = 2,
        wdNewFrameset = 3,
        wdNewXMLDocument = 4
    } WdNewDocumentType;


typedef [uuid(1410BEF9-CE35-3B3A-8830-B9D445CD0905)]
    enum {
        wdKanaKatakana = 8,
        wdKanaHiragana = 9
    } WdKana;


typedef [uuid(CA59C2ED-82CC-31EB-9817-0158DCD475E4)]
    enum {
        wdWidthHalfWidth = 6,
        wdWidthFullWidth = 7
    } WdCharacterWidth;


typedef [uuid(E3D0438D-D284-31C5-A2BF-A4AF6A1BD014)]
    enum {
        wdListNumberStyleBidi1 = 49,
        wdListNumberStyleBidi2 = 50,
        wdCaptionNumberStyleBidiLetter1 = 49,
        wdCaptionNumberStyleBidiLetter2 = 50,
        wdNoteNumberStyleBidiLetter1 = 49,
        wdNoteNumberStyleBidiLetter2 = 50,
        wdPageNumberStyleBidiLetter1 = 49,
        wdPageNumberStyleBidiLetter2 = 50
    } WdNumberStyleWordBasicBiDi;


typedef [uuid(047ED75F-BCE6-33AF-834D-611873724A72)]
    enum {
        wdTCSCConverterDirectionSCTC = 0,
        wdTCSCConverterDirectionTCSC = 1,
        wdTCSCConverterDirectionAuto = 2
    } WdTCSCConverterDirection;


typedef [uuid(71DD90C6-1BC0-3963-89F6-CB8AF3F73610)]
    enum {
        wd70 = 0,
        wd70FE = 1,
        wd80 = 2
    } WdDisableFeaturesIntroducedAfter;


typedef [uuid(A1A8CFC6-7D77-3CA4-98EF-A456D50B540D)]
    enum {
        wdWrapMergeInline = 0,
        wdWrapMergeSquare = 1,
        wdWrapMergeTight = 2,
        wdWrapMergeBehind = 3,
        wdWrapMergeFront = 4,
        wdWrapMergeThrough = 5,
        wdWrapMergeTopBottom = 6
    } WdWrapTypeMerged;


typedef [uuid(CD2C303A-F5BB-3414-A740-57FB0618169A)]
    enum {
        wdPasteDefault = 0,
        wdSingleCellText = 5,
        wdSingleCellTable = 6,
        wdListContinueNumbering = 7,
        wdListRestartNumbering = 8,
        wdTableInsertAsRows = 11,
        wdTableAppendTable = 10,
        wdTableOriginalFormatting = 12,
        wdChartPicture = 13,
        wdChart = 14,
        wdChartLinked = 15,
        wdFormatOriginalFormatting = 16,
        wdFormatSurroundingFormattingWithEmphasis = 20,
        wdFormatPlainText = 22,
        wdTableOverwriteCells = 23,
        wdListCombineWithExistingList = 24,
        wdListDontMerge = 25,
        wdUseDestinationStylesRecovery = 19
    } WdRecoveryType;


typedef [uuid(2C1156B5-27D4-329B-B946-C3C66207AE75)]
    enum {
        wdCRLF = 0,
        wdCROnly = 1,
        wdLFOnly = 2,
        wdLFCR = 3,
        wdLSPS = 4
    } WdLineEndingType;


typedef [uuid(238432DC-D657-37E7-886E-5A155E5FF117)]
    enum {
        wdStyleSheetLinkTypeLinked = 0,
        wdStyleSheetLinkTypeImported = 1
    } WdStyleSheetLinkType;


typedef [uuid(A51000B6-7B41-3E7A-813E-DB7BE56C71B8)]
    enum {
        wdStyleSheetPrecedenceHigher = 0xffffffff,
        wdStyleSheetPrecedenceLower = 0xfffffffe,
        wdStyleSheetPrecedenceHighest = 1,
        wdStyleSheetPrecedenceLowest = 0
    } WdStyleSheetPrecedence;


typedef [uuid(35793B96-E562-3051-AB25-0AFCBCC95492)]
    enum {
        wdEmailHTMLFidelityLow = 1,
        wdEmailHTMLFidelityMedium = 2,
        wdEmailHTMLFidelityHigh = 3
    } WdEmailHTMLFidelity;


typedef [uuid(E8606DE9-00F1-3086-BA72-CCDE4F6D93E2)]
    enum {
        wdMailFormatPlainText = 0,
        wdMailFormatHTML = 1
    } WdMailMergeMailFormat;


typedef [uuid(0785E3D2-6965-3DD2-A870-81BBA8A8547F)]
    enum {
        wdUniqueIdentifier = 1,
        wdCourtesyTitle = 2,
        wdFirstName = 3,
        wdMiddleName = 4,
        wdLastName = 5,
        wdSuffix = 6,
        wdNickname = 7,
        wdJobTitle = 8,
        wdCompany = 9,
        wdAddress1 = 10,
        wdAddress2 = 11,
        wdCity = 12,
        wdState = 13,
        wdPostalCode = 14,
        wdCountryRegion = 15,
        wdBusinessPhone = 16,
        wdBusinessFax = 17,
        wdHomePhone = 18,
        wdHomeFax = 19,
        wdEmailAddress = 20,
        wdWebPageURL = 21,
        wdSpouseCourtesyTitle = 22,
        wdSpouseFirstName = 23,
        wdSpouseMiddleName = 24,
        wdSpouseLastName = 25,
        wdSpouseNickname = 26,
        wdRubyFirstName = 27,
        wdRubyLastName = 28,
        wdAddress3 = 29,
        wdDepartment = 30
    } WdMappedDataFields;


typedef [uuid(1D415254-6D7E-315C-86CC-90A641A57703)]
    enum {
        wdFirstRow = 0,
        wdLastRow = 1,
        wdOddRowBanding = 2,
        wdEvenRowBanding = 3,
        wdFirstColumn = 4,
        wdLastColumn = 5,
        wdOddColumnBanding = 6,
        wdEvenColumnBanding = 7,
        wdNECell = 8,
        wdNWCell = 9,
        wdSECell = 10,
        wdSWCell = 11
    } WdConditionCode;


typedef [uuid(86A89091-D6FC-3A6F-A172-7776C718E362)]
    enum {
        wdCompareTargetSelected = 0,
        wdCompareTargetCurrent = 1,
        wdCompareTargetNew = 2
    } WdCompareTarget;


typedef [uuid(577F8B82-4D9C-3461-9045-C379319A9185)]
    enum {
        wdMergeTargetSelected = 0,
        wdMergeTargetCurrent = 1,
        wdMergeTargetNew = 2
    } WdMergeTarget;


typedef [uuid(1CCEE46E-16CC-3685-80A3-B19C6006398C)]
    enum {
        wdFormattingFromCurrent = 0,
        wdFormattingFromSelected = 1,
        wdFormattingFromPrompt = 2
    } WdUseFormattingFrom;


typedef [uuid(42CE0331-0571-3322-AEB3-2309B4794847)]
    enum {
        wdRevisionsViewFinal = 0,
        wdRevisionsViewOriginal = 1
    } WdRevisionsView;


typedef [uuid(9C68240F-079D-3FB0-ADA8-09D8F318B022)]
    enum {
        wdBalloonRevisions = 0,
        wdInLineRevisions = 1,
        wdMixedRevisions = 2
    } WdRevisionsMode;


typedef [uuid(F9AC6CAA-EAA0-3A0A-A87E-1CC2A60AA19F)]
    enum {
        wdBalloonWidthPercent = 0,
        wdBalloonWidthPoints = 1
    } WdRevisionsBalloonWidthType;


typedef [uuid(6BF1F6C4-9D73-3BF1-A9AF-16E3BA44D471)]
    enum {
        wdBalloonPrintOrientationAuto = 0,
        wdBalloonPrintOrientationPreserve = 1,
        wdBalloonPrintOrientationForceLandscape = 2
    } WdRevisionsBalloonPrintOrientation;


typedef [uuid(04B3C697-9F96-361C-A490-1D381C325429)]
    enum {
        wdLeftMargin = 0,
        wdRightMargin = 1
    } WdRevisionsBalloonMargin;


typedef [uuid(A92A72D9-6D30-3581-B297-64A4732A6BD3)]
    enum {
        wdTaskPaneFormatting = 0,
        wdTaskPaneRevealFormatting = 1,
        wdTaskPaneMailMerge = 2,
        wdTaskPaneTranslate = 3,
        wdTaskPaneSearch = 4,
        wdTaskPaneXMLStructure = 5,
        wdTaskPaneDocumentProtection = 6,
        wdTaskPaneDocumentActions = 7,
        wdTaskPaneSharedWorkspace = 8,
        wdTaskPaneHelp = 9,
        wdTaskPaneResearch = 10,
        wdTaskPaneFaxService = 11,
        wdTaskPaneXMLDocument = 12,
        wdTaskPaneDocumentUpdates = 13,
        wdTaskPaneSignature = 14,
        wdTaskPaneStyleInspector = 15,
        wdTaskPaneDocumentManagement = 16,
        wdTaskPaneApplyStyles = 17,
        wdTaskPaneNav = 18,
        wdTaskPaneSelection = 19,
        wdTaskPaneProofing = 20,
        wdTaskPaneXMLMapping = 21,
        wdTaskPaneRevPaneFlex = 22,
        wdTaskPaneThesaurus = 23
    } WdTaskPanes;


typedef [uuid(7D94A0AD-E266-362E-B1A3-2A69D3DBD7D2)]
    enum {
        wdShowFilterStylesAvailable = 0,
        wdShowFilterStylesInUse = 1,
        wdShowFilterStylesAll = 2,
        wdShowFilterFormattingInUse = 3,
        wdShowFilterFormattingAvailable = 4,
        wdShowFilterFormattingRecommended = 5
    } WdShowFilter;


typedef [uuid(1316B834-201F-39AA-B4C8-7F63A3431A33)]
    enum {
        wdMergeSubTypeOther = 0,
        wdMergeSubTypeAccess = 1,
        wdMergeSubTypeOAL = 2,
        wdMergeSubTypeOLEDBWord = 3,
        wdMergeSubTypeWorks = 4,
        wdMergeSubTypeOLEDBText = 5,
        wdMergeSubTypeOutlook = 6,
        wdMergeSubTypeWord = 7,
        wdMergeSubTypeWord2000 = 8
    } WdMergeSubType;


typedef [uuid(F59BB1C3-B1CA-33C4-AA64-F411DD654E19)]
    enum {
        wdLeftToRight = 0,
        wdRightToLeft = 1
    } WdDocumentDirection;


typedef [uuid(B47743D0-B1EC-3BFE-944D-183B51D50FB5)]
    enum {
        wdChineseHongKong = 3076,
        wdChineseMacao = 5124,
        wdEnglishTrinidad = 11273
    } WdLanguageID2000;


typedef [uuid(2C21A8CF-AB68-3F7E-92F9-B745177DF535)]
    enum {
        wdTextRectangle = 0,
        wdShapeRectangle = 1,
        wdMarkupRectangle = 2,
        wdMarkupRectangleButton = 3,
        wdPageBorderRectangle = 4,
        wdLineBetweenColumnRectangle = 5,
        wdSelection = 6,
        wdSystem = 7,
        wdMarkupRectangleArea = 8,
        wdReadingModeNavigation = 9,
        wdMarkupRectangleMoveMatch = 10,
        wdReadingModePanningArea = 11,
        wdMailNavArea = 12,
        wdDocumentControlRectangle = 13
    } WdRectangleType;


typedef [uuid(3D416AF9-AA8F-3864-89B8-6C2082744F95)]
    enum {
        wdTextLine = 0,
        wdTableRow = 1
    } WdLineType;


typedef [uuid(09F8044D-E368-3787-A29E-3A82026CE73F)]
    enum {
        wdXMLNodeElement = 1,
        wdXMLNodeAttribute = 2
    } WdXMLNodeType;


typedef [uuid(2921EC67-F28A-3ED8-932E-8B5512310330)]
    enum {
        wdXMLSelectionChangeReasonMove = 0,
        wdXMLSelectionChangeReasonInsert = 1,
        wdXMLSelectionChangeReasonDelete = 2
    } WdXMLSelectionChangeReason;


typedef [uuid(B1A148D3-3D83-38E9-A278-1631D204F8B3)]
    enum {
        wdXMLNodeLevelInline = 0,
        wdXMLNodeLevelParagraph = 1,
        wdXMLNodeLevelRow = 2,
        wdXMLNodeLevelCell = 3
    } WdXMLNodeLevel;


typedef [uuid(5BE83446-698C-3E28-A887-023C64E9DC57)]
    enum {
        wdControlSmartTag = 1,
        wdControlLink = 2,
        wdControlHelp = 3,
        wdControlHelpURL = 4,
        wdControlSeparator = 5,
        wdControlButton = 6,
        wdControlLabel = 7,
        wdControlImage = 8,
        wdControlCheckbox = 9,
        wdControlTextbox = 10,
        wdControlListbox = 11,
        wdControlCombo = 12,
        wdControlActiveX = 13,
        wdControlDocumentFragment = 14,
        wdControlDocumentFragmentURL = 15,
        wdControlRadioGroup = 16
    } WdSmartTagControlType;


typedef [uuid(3BD9B6CC-D6CF-34C9-A032-B9131B8081D4)]
    enum {
        wdEditorEveryone = 0xffffffff,
        wdEditorOwners = 0xfffffffc,
        wdEditorEditors = 0xfffffffb,
        wdEditorCurrent = 0xfffffffa
    } WdEditorType;


typedef [uuid(7330A015-09E0-3785-8822-6B47D821FA7E)]
    enum {
        wdXMLValidationStatusOK = 0,
        wdXMLValidationStatusCustom = 0xc00ce000
    } WdXMLValidationStatus;


typedef [uuid(AEFC2198-0064-3CD7-9C78-EB0F67229F4A)]
    enum {
        wdStyleSortByName = 0,
        wdStyleSortRecommended = 1,
        wdStyleSortByFont = 2,
        wdStyleSortByBasedOn = 3,
        wdStyleSortByType = 4
    } WdStyleSort;


typedef [uuid(F52DEE7F-8295-3A23-9DB3-37609770B6B2)]
    enum {
        wdRDIComments = 1,
        wdRDIRevisions = 2,
        wdRDIVersions = 3,
        wdRDIRemovePersonalInformation = 4,
        wdRDIEmailHeader = 5,
        wdRDIRoutingSlip = 6,
        wdRDISendForReview = 7,
        wdRDIDocumentProperties = 8,
        wdRDITemplate = 9,
        wdRDIDocumentWorkspace = 10,
        wdRDIInkAnnotations = 11,
        wdRDIDocumentServerProperties = 14,
        wdRDIDocumentManagementPolicy = 15,
        wdRDIContentType = 16,
        wdRDITaskpaneWebExtensions = 17,
        wdRDIAll = 99
    } WdRemoveDocInfoType;


typedef [uuid(33DAFB9D-0D41-3FC4-9553-2A17994D3E14)]
    enum {
        wdCheckInMinorVersion = 0,
        wdCheckInMajorVersion = 1,
        wdCheckInOverwriteVersion = 2
    } WdCheckInVersionType;


typedef [uuid(F3AE6A1B-BB9F-3258-AAB9-87D6BAF4C3A3)]
    enum {
        wdMoveToTextMarkNone = 0,
        wdMoveToTextMarkBold = 1,
        wdMoveToTextMarkItalic = 2,
        wdMoveToTextMarkUnderline = 3,
        wdMoveToTextMarkDoubleUnderline = 4,
        wdMoveToTextMarkColorOnly = 5,
        wdMoveToTextMarkStrikeThrough = 6,
        wdMoveToTextMarkDoubleStrikeThrough = 7
    } WdMoveToTextMark;


typedef [uuid(AF2FC7DB-2E3E-3BF2-B1D0-6426945B15E0)]
    enum {
        wdMoveFromTextMarkHidden = 0,
        wdMoveFromTextMarkDoubleStrikeThrough = 1,
        wdMoveFromTextMarkStrikeThrough = 2,
        wdMoveFromTextMarkCaret = 3,
        wdMoveFromTextMarkPound = 4,
        wdMoveFromTextMarkNone = 5,
        wdMoveFromTextMarkBold = 6,
        wdMoveFromTextMarkItalic = 7,
        wdMoveFromTextMarkUnderline = 8,
        wdMoveFromTextMarkDoubleUnderline = 9,
        wdMoveFromTextMarkColorOnly = 10
    } WdMoveFromTextMark;


typedef [uuid(74779721-3C00-363D-BED4-B0AF3595EB05)]
    enum {
        wdOMathFunctionAcc = 1,
        wdOMathFunctionBar = 2,
        wdOMathFunctionBox = 3,
        wdOMathFunctionBorderBox = 4,
        wdOMathFunctionDelim = 5,
        wdOMathFunctionEqArray = 6,
        wdOMathFunctionFrac = 7,
        wdOMathFunctionFunc = 8,
        wdOMathFunctionGroupChar = 9,
        wdOMathFunctionLimLow = 10,
        wdOMathFunctionLimUpp = 11,
        wdOMathFunctionMat = 12,
        wdOMathFunctionNary = 13,
        wdOMathFunctionPhantom = 14,
        wdOMathFunctionScrPre = 15,
        wdOMathFunctionRad = 16,
        wdOMathFunctionScrSub = 17,
        wdOMathFunctionScrSubSup = 18,
        wdOMathFunctionScrSup = 19,
        wdOMathFunctionText = 20,
        wdOMathFunctionNormalText = 21,
        wdOMathFunctionLiteralText = 22
    } WdOMathFunctionType;


typedef [uuid(AFB1EEB5-369E-3C8D-BEE1-0CFF86414481)]
    enum {
        wdOMathHorizAlignCenter = 0,
        wdOMathHorizAlignLeft = 1,
        wdOMathHorizAlignRight = 2
    } WdOMathHorizAlignType;


typedef [uuid(8180C4A6-20CC-3CD4-9DE0-A1D1384513E5)]
    enum {
        wdOMathVertAlignCenter = 0,
        wdOMathVertAlignTop = 1,
        wdOMathVertAlignBottom = 2
    } WdOMathVertAlignType;


typedef [uuid(2811B866-578B-37F2-B7FB-927DD993AB19)]
    enum {
        wdOMathFracBar = 0,
        wdOMathFracNoBar = 1,
        wdOMathFracSkw = 2,
        wdOMathFracLin = 3
    } WdOMathFracType;


typedef [uuid(8DBAA8CB-E1D0-3531-AD9E-9E8F08E651CA)]
    enum {
        wdOMathSpacingSingle = 0,
        wdOMathSpacing1pt5 = 1,
        wdOMathSpacingDouble = 2,
        wdOMathSpacingExactly = 3,
        wdOMathSpacingMultiple = 4
    } WdOMathSpacingRule;


typedef [uuid(63917A75-8674-34FC-A80B-988B0D019B25)]
    enum {
        wdOMathDisplay = 0,
        wdOMathInline = 1
    } WdOMathType;


typedef [uuid(3F179DBA-7622-3837-B18E-E295477260CC)]
    enum {
        wdOMathShapeCentered = 0,
        wdOMathShapeMatch = 1
    } WdOMathShapeType;


typedef [uuid(C7E4EAD4-16DE-3902-9330-5475CF1039D7)]
    enum {
        wdOMathJcCenterGroup = 1,
        wdOMathJcCenter = 2,
        wdOMathJcLeft = 3,
        wdOMathJcRight = 4,
        wdOMathJcInline = 7
    } WdOMathJc;


typedef [uuid(8105E2B5-53C4-31C9-9EBD-75706288B16A)]
    enum {
        wdOMathBreakBinBefore = 0,
        wdOMathBreakBinAfter = 1,
        wdOMathBreakBinRepeat = 2
    } WdOMathBreakBin;


typedef [uuid(C9C18CC3-9DA7-3869-9B10-283F57937F60)]
    enum {
        wdOMathBreakSubMinusMinus = 0,
        wdOMathBreakSubPlusMinus = 1,
        wdOMathBreakSubMinusPlus = 2
    } WdOMathBreakSub;


typedef [uuid(1C4E96C0-3BEB-37A7-8B5B-ED303F90F6EA)]
    enum {
        wdAutomaticMargin = 0,
        wdSuppressMargin = 1,
        wdFullMargin = 2
    } WdReadingLayoutMargin;


typedef [uuid(D837E0A6-EB0E-3F7F-B8BE-9C0F05401CCD)]
    enum {
        wdContentControlRichText = 0,
        wdContentControlText = 1,
        wdContentControlPicture = 2,
        wdContentControlComboBox = 3,
        wdContentControlDropdownList = 4,
        wdContentControlBuildingBlockGallery = 5,
        wdContentControlDate = 6,
        wdContentControlGroup = 7,
        wdContentControlCheckBox = 8,
        wdContentControlRepeatingSection = 9
    } WdContentControlType;


typedef [uuid(020F399E-EFC7-372F-A323-679C84CAEFCE)]
    enum {
        wdCompareDestinationOriginal = 0,
        wdCompareDestinationRevised = 1,
        wdCompareDestinationNew = 2
    } WdCompareDestination;


typedef [uuid(AAAF85A7-31AF-3EE3-B5AA-99ECEDEEBAFF)]
    enum {
        wdGranularityCharLevel = 0,
        wdGranularityWordLevel = 1
    } WdGranularity;


typedef [uuid(56E5F138-CFE9-30D3-BC8D-6556D487360D)]
    enum {
        wdMergeFormatFromOriginal = 0,
        wdMergeFormatFromRevised = 1,
        wdMergeFormatFromPrompt = 2
    } WdMergeFormatFrom;


typedef [uuid(57AB7683-4274-37C0-944C-6F14A1980B4D)]
    enum {
        wdShowSourceDocumentsNone = 0,
        wdShowSourceDocumentsOriginal = 1,
        wdShowSourceDocumentsRevised = 2,
        wdShowSourceDocumentsBoth = 3
    } WdShowSourceDocuments;


typedef [uuid(A34C1A4A-9468-39DD-B46C-C3A6ABD67DFB)]
    enum {
        wdKeepSourceFormatting = 0,
        wdMatchDestinationFormatting = 1,
        wdKeepTextOnly = 2,
        wdUseDestinationStyles = 3
    } WdPasteOptions;


typedef [uuid(E1DBA742-1E0E-3633-B1C2-168561C6F0B0)]
    enum {
        wdTypeQuickParts = 1,
        wdTypeCoverPage = 2,
        wdTypeEquations = 3,
        wdTypeFooters = 4,
        wdTypeHeaders = 5,
        wdTypePageNumber = 6,
        wdTypeTables = 7,
        wdTypeWatermarks = 8,
        wdTypeAutoText = 9,
        wdTypeTextBox = 10,
        wdTypePageNumberTop = 11,
        wdTypePageNumberBottom = 12,
        wdTypePageNumberPage = 13,
        wdTypeTableOfContents = 14,
        wdTypeCustomQuickParts = 15,
        wdTypeCustomCoverPage = 16,
        wdTypeCustomEquations = 17,
        wdTypeCustomFooters = 18,
        wdTypeCustomHeaders = 19,
        wdTypeCustomPageNumber = 20,
        wdTypeCustomTables = 21,
        wdTypeCustomWatermarks = 22,
        wdTypeCustomAutoText = 23,
        wdTypeCustomTextBox = 24,
        wdTypeCustomPageNumberTop = 25,
        wdTypeCustomPageNumberBottom = 26,
        wdTypeCustomPageNumberPage = 27,
        wdTypeCustomTableOfContents = 28,
        wdTypeCustom1 = 29,
        wdTypeCustom2 = 30,
        wdTypeCustom3 = 31,
        wdTypeCustom4 = 32,
        wdTypeCustom5 = 33,
        wdTypeBibliography = 34,
        wdTypeCustomBibliography = 35
    } WdBuildingBlockTypes;


typedef [uuid(F789D0A8-3325-3E36-B6CE-87657A7F4E4E)]
    enum {
        wdMargin = 0,
        wdIndent = 1
    } WdAlignmentTabRelative;


typedef [uuid(89A572CD-0865-35D2-B6BA-4D43B64E123E)]
    enum {
        wdLeft = 0,
        wdCenter = 1,
        wdRight = 2
    } WdAlignmentTabAlignment;


typedef [uuid(347CDE09-0CE2-3FBB-9BB8-7C9ECF5B750E)]
    enum {
        wdCellColorByAuthor = 0xffffffff,
        wdCellColorNoHighlight = 0,
        wdCellColorPink = 1,
        wdCellColorLightBlue = 2,
        wdCellColorLightYellow = 3,
        wdCellColorLightPurple = 4,
        wdCellColorLightOrange = 5,
        wdCellColorLightGreen = 6,
        wdCellColorLightGray = 7
    } WdCellColor;


typedef [uuid(D05EB81F-37A2-3F3E-AE25-A672C0D2D502)]
    enum {
        wdTightNone = 0,
        wdTightAll = 1,
        wdTightFirstAndLastLines = 2,
        wdTightFirstLineOnly = 3,
        wdTightLastLineOnly = 4
    } WdTextboxTightWrap;


typedef [uuid(069470C7-2FC7-3561-8F3F-B4A4510D2A53)]
    enum {
        wdShapePositionRelativeNone = 0xfff0bdc1
    } WdShapePositionRelative;


typedef [uuid(A7F03ADF-2249-3554-ABA1-BDE806AD5EFE)]
    enum {
        wdShapeSizeRelativeNone = 0xfff0bdc1
    } WdShapeSizeRelative;


typedef [uuid(C7D9681C-4F5C-3840-BFCE-C91510B56181)]
    enum {
        wdRelativeHorizontalSizeMargin = 0,
        wdRelativeHorizontalSizePage = 1,
        wdRelativeHorizontalSizeLeftMarginArea = 2,
        wdRelativeHorizontalSizeRightMarginArea = 3,
        wdRelativeHorizontalSizeInnerMarginArea = 4,
        wdRelativeHorizontalSizeOuterMarginArea = 5
    } WdRelativeHorizontalSize;


typedef [uuid(A478B3F3-3885-3C52-B12F-AAF22E58D380)]
    enum {
        wdRelativeVerticalSizeMargin = 0,
        wdRelativeVerticalSizePage = 1,
        wdRelativeVerticalSizeTopMarginArea = 2,
        wdRelativeVerticalSizeBottomMarginArea = 3,
        wdRelativeVerticalSizeInnerMarginArea = 4,
        wdRelativeVerticalSizeOuterMarginArea = 5
    } WdRelativeVerticalSize;


typedef [uuid(803E4880-EECA-3830-9186-32B36FA120AB)]
    enum {
        wdNotThemeColor = 0xffffffff,
        wdThemeColorMainDark1 = 0,
        wdThemeColorMainLight1 = 1,
        wdThemeColorMainDark2 = 2,
        wdThemeColorMainLight2 = 3,
        wdThemeColorAccent1 = 4,
        wdThemeColorAccent2 = 5,
        wdThemeColorAccent3 = 6,
        wdThemeColorAccent4 = 7,
        wdThemeColorAccent5 = 8,
        wdThemeColorAccent6 = 9,
        wdThemeColorHyperlink = 10,
        wdThemeColorHyperlinkFollowed = 11,
        wdThemeColorBackground1 = 12,
        wdThemeColorText1 = 13,
        wdThemeColorBackground2 = 14,
        wdThemeColorText2 = 15
    } WdThemeColorIndex;


typedef [uuid(5D7E6F43-3E57-353C-95E1-52E9783BE2BE)]
    enum {
        wdExportFormatPDF = 17,
        wdExportFormatXPS = 18
    } WdExportFormat;


typedef [uuid(147553BC-4DC5-3681-A445-D1C4BEA414AD)]
    enum {
        wdExportOptimizeForPrint = 0,
        wdExportOptimizeForOnScreen = 1
    } WdExportOptimizeFor;


typedef [uuid(42A64EC8-BC68-3DBC-8BF0-58A8CBA4AB3E)]
    enum {
        wdExportCreateNoBookmarks = 0,
        wdExportCreateHeadingBookmarks = 1,
        wdExportCreateWordBookmarks = 2
    } WdExportCreateBookmarks;


typedef [uuid(D67854FC-9A45-33F6-A4D3-DC0002A53CE9)]
    enum {
        wdExportDocumentContent = 0,
        wdExportDocumentWithMarkup = 7
    } WdExportItem;


typedef [uuid(20D65698-7CDC-3A68-A83D-D52A76FEA1A4)]
    enum {
        wdExportAllDocument = 0,
        wdExportSelection = 1,
        wdExportCurrentPage = 2,
        wdExportFromTo = 3
    } WdExportRange;


typedef [uuid(EBFB6414-51CD-374A-9A96-5C2B0BB128CC)]
    enum {
        wdFrenchBoth = 0,
        wdFrenchPreReform = 1,
        wdFrenchPostReform = 2
    } WdFrenchSpeller;


typedef [uuid(D81E8221-7427-3223-8220-0022778B7C3E)]
    enum {
        wdInsertContent = 0,
        wdInsertParagraph = 1,
        wdInsertPage = 2
    } WdDocPartInsertOptions;


typedef [uuid(97F81678-ACCD-3F4C-A9F2-52653F4431DE)]
    enum {
        wdContentControlDateStorageText = 0,
        wdContentControlDateStorageDate = 1,
        wdContentControlDateStorageDateTime = 2
    } WdContentControlDateStorageFormat;


typedef enum {
        xlSplitByPosition = 1,
        xlSplitByPercentValue = 3,
        xlSplitByCustomSplit = 4,
        xlSplitByValue = 2
    } XlChartSplitType;


typedef enum {
        xlSizeIsWidth = 2,
        xlSizeIsArea = 1
    } XlSizeRepresents;


typedef enum {
        xlPrimary = 1,
        xlSecondary = 2
    } XlAxisGroup;


typedef enum {
        xlBackgroundAutomatic = 0xffffeff7,
        xlBackgroundOpaque = 3,
        xlBackgroundTransparent = 2
    } XlBackground;


typedef enum {
        xlBuiltIn = 21,
        xlUserDefined = 22,
        xlAnyGallery = 23
    } XlChartGallery;


typedef enum {
        xlSides = 1,
        xlEnd = 2,
        xlEndSides = 3,
        xlFront = 4,
        xlFrontSides = 5,
        xlFrontEnd = 6,
        xlAllFaces = 7
    } XlChartPicturePlacement;


typedef enum {
        xlDataLabelSeparatorDefault = 1
    } XlDataLabelSeparator;


typedef enum {
        xlPatternAutomatic = 0xffffeff7,
        xlPatternChecker = 9,
        xlPatternCrissCross = 16,
        xlPatternDown = 0xffffefe7,
        xlPatternGray16 = 17,
        xlPatternGray25 = 0xffffefe4,
        xlPatternGray50 = 0xffffefe3,
        xlPatternGray75 = 0xffffefe2,
        xlPatternGray8 = 18,
        xlPatternGrid = 15,
        xlPatternHorizontal = 0xffffefe0,
        xlPatternLightDown = 13,
        xlPatternLightHorizontal = 11,
        xlPatternLightUp = 14,
        xlPatternLightVertical = 12,
        xlPatternNone = 0xffffefd2,
        xlPatternSemiGray75 = 10,
        xlPatternSolid = 1,
        xlPatternUp = 0xffffefbe,
        xlPatternVertical = 0xffffefba,
        xlPatternLinearGradient = 4000,
        xlPatternRectangularGradient = 4001
    } XlPattern;


typedef enum {
        xlPrinter = 2,
        xlScreen = 1
    } XlPictureAppearance;


typedef enum {
        xlBitmap = 2,
        xlPicture = 0xffffefcd
    } XlCopyPictureFormat;


typedef enum {
        xlAliceBlue = 0x00fff8f0,
        xlAntiqueWhite = 0x00d7ebfa,
        xlAqua = 0x00ffff00,
        xlAquamarine = 0x00d4ff7f,
        xlAzure = 0x00fffff0,
        xlBeige = 0x00dcf5f5,
        xlBisque = 0x00c4e4ff,
        xlBlack = 0,
        xlBlanchedAlmond = 0x00cdebff,
        xlBlue = 0x00ff0000,
        xlBlueViolet = 0x00e22b8a,
        xlBrown = 0x002a2aa5,
        xlBurlyWood = 0x0087b8de,
        xlCadetBlue = 0x00a09e5f,
        xlChartreuse = 65407,
        xlCoral = 0x00507fff,
        xlCornflowerBlue = 0x00ed9564,
        xlCornsilk = 0x00dcf8ff,
        xlCrimson = 0x003c14dc,
        xlDarkBlue = 0x008b0000,
        xlDarkCyan = 0x008b8b00,
        xlDarkGoldenrod = 0x000b86b8,
        xlDarkGreen = 25600,
        xlDarkGray = 0x00a9a9a9,
        xlDarkGrey = 0x00a9a9a9,
        xlDarkKhaki = 0x006bb7bd,
        xlDarkMagenta = 0x008b008b,
        xlDarkOliveGreen = 0x002f6b55,
        xlDarkOrange = 36095,
        xlDarkOrchid = 0x00cc3299,
        xlDarkRed = 139,
        xlDarkSalmon = 0x007a96e9,
        xlDarkSeaGreen = 0x008fbc8f,
        xlDarkSlateBlue = 0x008b3d48,
        xlDarkSlateGray = 0x004f4f2f,
        xlDarkSlateGrey = 0x004f4f2f,
        xlDarkTurquoise = 0x00d1ce00,
        xlDarkViolet = 0x00d30094,
        xlDeepPink = 0x009314ff,
        xlDeepSkyBlue = 0x00ffbf00,
        xlDimGray = 0x00696969,
        xlDimGrey = 0x00696969,
        xlDodgerBlue = 0x00ff901e,
        xlFireBrick = 0x002222b2,
        xlFloralWhite = 0x00f0faff,
        xlForestGreen = 0x00228b22,
        xlFuchsia = 0x00ff00ff,
        xlGainsboro = 0x00dcdcdc,
        xlGhostWhite = 0x00fff8f8,
        xlGold = 55295,
        xlGoldenrod = 0x0020a5da,
        xlGray = 0x00808080,
        xlGreen = 32768,
        xlGrey = 0x00808080,
        xlGreenYellow = 0x002fffad,
        xlHoneydew = 0x00f0fff0,
        xlHotPink = 0x00b469ff,
        xlIndianRed = 0x005c5ccd,
        xlIndigo = 0x0082004b,
        xlIvory = 0x00f0ffff,
        xlKhaki = 0x008ce6f0,
        xlLavender = 0x00fae6e6,
        xlLavenderBlush = 0x00f5f0ff,
        xlLawnGreen = 64636,
        xlLemonChiffon = 0x00cdfaff,
        xlLightBlue = 0x00e6d8ad,
        xlLightCoral = 0x008080f0,
        xlLightCyan = 0x008b8b00,
        xlLightGoldenrodYellow = 0x00d2fafa,
        xlLightGray = 0x00d3d3d3,
        xlLightGreen = 0x0090ee90,
        xlLightGrey = 0x00d3d3d3,
        xlLightPink = 0x00c1b6ff,
        xlLightSalmon = 0x007aa0ff,
        xlLightSeaGreen = 0x00aab220,
        xlLightSkyBlue = 0x00face87,
        xlLightSlateGray = 0x00998877,
        xlLightSlateGrey = 0x00998877,
        xlLightSteelBlue = 0x00dec4b0,
        xlLightYellow = 0x00e0ffff,
        xlLime = 65280,
        xlLimeGreen = 0x0032cd32,
        xlLinen = 0x00e6f0fa,
        xlMaroon = 128,
        xlMediumAquamarine = 0x00aaff66,
        xlMediumBlue = 0x00cd0000,
        xlMediumOrchid = 0x00d355ba,
        xlMediumPurple = 0x00db7093,
        xlMediumSeaGreen = 0x0071b33c,
        xlMediumSlateBlue = 0x00ee687b,
        xlMediumSpringGreen = 0x009afa00,
        xlMediumTurquoise = 0x00ccd148,
        xlMediumVioletRed = 0x008515c7,
        xlMidnightBlue = 0x00701919,
        xlMintCream = 0x00fafff5,
        xlMistyRose = 0x00e1e4ff,
        xlMoccasin = 0x00b5e4ff,
        xlNavajoWhite = 0x00addeff,
        xlNavy = 0x00800000,
        xlNavyBlue = 0x00800000,
        xlOldLace = 0x00e6f5fd,
        xlOlive = 32896,
        xlOliveDrab = 0x00238e6b,
        xlOrange = 42495,
        xlOrangeRed = 17919,
        xlOrchid = 0x00d670da,
        xlPaleGoldenrod = 0x006be8ee,
        xlPaleGreen = 0x0098fb98,
        xlPaleTurquoise = 0x00eeeeaf,
        xlPaleVioletRed = 0x009370db,
        xlPapayaWhip = 0x00d5efff,
        xlPeachPuff = 0x00b9daff,
        xlPeru = 0x003f85cd,
        xlPink = 0x00cbc0ff,
        xlPlum = 0x00dda0dd,
        xlPowderBlue = 0x00e6e0b0,
        xlPurple = 0x00800080,
        xlRed = 255,
        xlRosyBrown = 0x008f8fbc,
        xlRoyalBlue = 0x00e16941,
        xlSalmon = 0x007280fa,
        xlSandyBrown = 0x0060a4f4,
        xlSeaGreen = 0x00578b2e,
        xlSeashell = 0x00eef5ff,
        xlSienna = 0x002d52a0,
        xlSilver = 0x00c0c0c0,
        xlSkyBlue = 0x00ebce87,
        xlSlateBlue = 0x00cd5a6a,
        xlSlateGray = 0x00908070,
        xlSlateGrey = 0x00908070,
        xlSnow = 0x00fafaff,
        xlSpringGreen = 0x007fff00,
        xlSteelBlue = 0x00b48246,
        xlTan = 0x008cb4d2,
        xlTeal = 0x00808000,
        xlThistle = 0x00d8bfd8,
        xlTomato = 0x004763ff,
        xlTurquoise = 0x00d0e040,
        xlYellow = 65535,
        xlYellowGreen = 0x0032cd9a,
        xlViolet = 0x00ee82ee,
        xlWheat = 0x00b3def5,
        xlWhite = 0x00ffffff,
        xlWhiteSmoke = 0x00f5f5f5
    } XlRgbColor;


typedef enum {
        xlAutomatic = 0xffffeff7,
        xlCombination = 0xffffeff1,
        xlCustom = 0xffffefee,
        xlBar = 2,
        xlColumn = 3,
        xl3DBar = 0xffffeffd,
        xl3DSurface = 0xffffeff9,
        xlDefaultAutoFormat = 0xffffffff,
        xlNone = 0xffffefd2,
        xlAbove = 0,
        xlBelow = 1,
        xlBoth = 1,
        xlBottom = 0xffffeff5,
        xlCenter = 0xffffeff4,
        xlChecker = 9,
        xlCircle = 8,
        xlCorner = 2,
        xlCrissCross = 16,
        xlCross = 4,
        xlDiamond = 2,
        xlDistributed = 0xffffefeb,
        xlFill = 5,
        xlFixedValue = 1,
        xlGeneral = 1,
        xlGray16 = 17,
        xlGray25 = 0xffffefe4,
        xlGray50 = 0xffffefe3,
        xlGray75 = 0xffffefe2,
        xlGray8 = 18,
        xlGrid = 15,
        xlHigh = 0xffffefe1,
        xlInside = 2,
        xlJustify = 0xffffefde,
        xlLeft = 0xffffefdd,
        xlLightDown = 13,
        xlLightHorizontal = 11,
        xlLightUp = 14,
        xlLightVertical = 12,
        xlLow = 0xffffefda,
        xlMaximum = 2,
        xlMinimum = 4,
        xlMinusValues = 3,
        xlNextToAxis = 4,
        xlOpaque = 3,
        xlOutside = 3,
        xlPercent = 2,
        xlPlus = 9,
        xlPlusValues = 2,
        xlRight = 0xffffefc8,
        xlScale = 3,
        xlSemiGray75 = 10,
        xlShowLabel = 4,
        xlShowLabelAndPercent = 5,
        xlShowPercent = 3,
        xlShowValue = 2,
        xlSingle = 2,
        xlSolid = 1,
        xlSquare = 1,
        xlStar = 5,
        xlStError = 4,
        xlTop = 0xffffefc0,
        xlTransparent = 2,
        xlTriangle = 3
    } XlConstants;


typedef enum {
        xlContext = 0xffffec76,
        xlLTR = 0xffffec75,
        xlRTL = 0xffffec74
    } XlReadingOrder;


typedef enum {
        xlHairline = 1,
        xlMedium = 0xffffefd6,
        xlThick = 4,
        xlThin = 2
    } XlBorderWeight;


typedef enum {
        xlLegendPositionBottom = 0xffffeff5,
        xlLegendPositionCorner = 2,
        xlLegendPositionLeft = 0xffffefdd,
        xlLegendPositionRight = 0xffffefc8,
        xlLegendPositionTop = 0xffffefc0,
        xlLegendPositionCustom = 0xffffefbf
    } XlLegendPosition;


typedef enum {
        xlUnderlineStyleDouble = 0xffffefe9,
        xlUnderlineStyleDoubleAccounting = 5,
        xlUnderlineStyleNone = 0xffffefd2,
        xlUnderlineStyleSingle = 2,
        xlUnderlineStyleSingleAccounting = 4
    } XlUnderlineStyle;


typedef enum {
        xlColorIndexAutomatic = 0xffffeff7,
        xlColorIndexNone = 0xffffefd2
    } XlColorIndex;


typedef enum {
        xlMarkerStyleAutomatic = 0xffffeff7,
        xlMarkerStyleCircle = 8,
        xlMarkerStyleDash = 0xffffefed,
        xlMarkerStyleDiamond = 2,
        xlMarkerStyleDot = 0xffffefea,
        xlMarkerStyleNone = 0xffffefd2,
        xlMarkerStylePicture = 0xffffefcd,
        xlMarkerStylePlus = 9,
        xlMarkerStyleSquare = 1,
        xlMarkerStyleStar = 5,
        xlMarkerStyleTriangle = 3,
        xlMarkerStyleX = 0xffffefb8
    } XlMarkerStyle;


typedef enum {
        xlColumns = 2,
        xlRows = 1
    } XlRowCol;


typedef enum {
        xlDataLabelsShowNone = 0xffffefd2,
        xlDataLabelsShowValue = 2,
        xlDataLabelsShowPercent = 3,
        xlDataLabelsShowLabel = 4,
        xlDataLabelsShowLabelAndPercent = 5,
        xlDataLabelsShowBubbleSizes = 6
    } XlDataLabelsType;


typedef enum {
        xlErrorBarIncludeBoth = 1,
        xlErrorBarIncludeMinusValues = 3,
        xlErrorBarIncludeNone = 0xffffefd2,
        xlErrorBarIncludePlusValues = 2
    } XlErrorBarInclude;


typedef enum {
        xlErrorBarTypeCustom = 0xffffefee,
        xlErrorBarTypeFixedValue = 1,
        xlErrorBarTypePercent = 2,
        xlErrorBarTypeStDev = 0xffffefc5,
        xlErrorBarTypeStError = 4
    } XlErrorBarType;


typedef enum {
        xlChartX = 0xffffefb8,
        xlChartY = 1
    } XlErrorBarDirection;


typedef enum {
        xlStackScale = 3,
        xlStack = 2,
        xlStretch = 1
    } XlChartPictureType;


typedef enum {
        xlDataLabel = 0,
        xlChartArea = 2,
        xlSeries = 3,
        xlChartTitle = 4,
        xlWalls = 5,
        xlCorners = 6,
        xlDataTable = 7,
        xlTrendline = 8,
        xlErrorBars = 9,
        xlXErrorBars = 10,
        xlYErrorBars = 11,
        xlLegendEntry = 12,
        xlLegendKey = 13,
        xlShape = 14,
        xlMajorGridlines = 15,
        xlMinorGridlines = 16,
        xlAxisTitle = 17,
        xlUpBars = 18,
        xlPlotArea = 19,
        xlDownBars = 20,
        xlAxis = 21,
        xlSeriesLines = 22,
        xlFloor = 23,
        xlLegend = 24,
        xlHiLoLines = 25,
        xlDropLines = 26,
        xlRadarAxisLabels = 27,
        xlNothing = 28,
        xlLeaderLines = 29,
        xlDisplayUnitLabel = 30,
        xlPivotChartFieldButton = 31,
        xlPivotChartDropZone = 32
    } XlChartItem;


typedef enum {
        xlBox = 0,
        xlPyramidToPoint = 1,
        xlPyramidToMax = 2,
        xlCylinder = 3,
        xlConeToPoint = 4,
        xlConeToMax = 5
    } XlBarShape;


typedef enum {
        xlCap = 1,
        xlNoCap = 2
    } XlEndStyleCap;


typedef enum {
        xlExponential = 5,
        xlLinear = 0xffffefdc,
        xlLogarithmic = 0xffffefdb,
        xlMovingAvg = 6,
        xlPolynomial = 3,
        xlPower = 4
    } XlTrendlineType;


typedef enum {
        xlCategory = 1,
        xlSeriesAxis = 3,
        xlValue = 2
    } XlAxisType;


typedef enum {
        xlAxisCrossesAutomatic = 0xffffeff7,
        xlAxisCrossesCustom = 0xffffefee,
        xlAxisCrossesMaximum = 2,
        xlAxisCrossesMinimum = 4
    } XlAxisCrosses;


typedef enum {
        xlTickMarkCross = 4,
        xlTickMarkInside = 2,
        xlTickMarkNone = 0xffffefd2,
        xlTickMarkOutside = 3
    } XlTickMark;


typedef enum {
        xlScaleLinear = 0xffffefdc,
        xlScaleLogarithmic = 0xffffefdb
    } XlScaleType;


typedef enum {
        xlTickLabelPositionHigh = 0xffffefe1,
        xlTickLabelPositionLow = 0xffffefda,
        xlTickLabelPositionNextToAxis = 4,
        xlTickLabelPositionNone = 0xffffefd2
    } XlTickLabelPosition;


typedef enum {
        xlDays = 0,
        xlMonths = 1,
        xlYears = 2
    } XlTimeUnit;


typedef enum {
        xlCategoryScale = 2,
        xlTimeScale = 3,
        xlAutomaticScale = 0xffffeff7
    } XlCategoryType;


typedef enum {
        xlHundreds = 0xfffffffe,
        xlThousands = 0xfffffffd,
        xlTenThousands = 0xfffffffc,
        xlHundredThousands = 0xfffffffb,
        xlMillions = 0xfffffffa,
        xlTenMillions = 0xfffffff9,
        xlHundredMillions = 0xfffffff8,
        xlThousandMillions = 0xfffffff7,
        xlMillionMillions = 0xfffffff6
    } XlDisplayUnit;


typedef enum {
        xlDownward = 0xffffefb6,
        xlHorizontal = 0xffffefe0,
        xlUpward = 0xffffefb5,
        xlVertical = 0xffffefba
    } XlOrientation;


typedef enum {
        xlTickLabelOrientationAutomatic = 0xffffeff7,
        xlTickLabelOrientationDownward = 0xffffefb6,
        xlTickLabelOrientationHorizontal = 0xffffefe0,
        xlTickLabelOrientationUpward = 0xffffefb5,
        xlTickLabelOrientationVertical = 0xffffefba
    } XlTickLabelOrientation;


typedef enum {
        xlInterpolated = 3,
        xlNotPlotted = 1,
        xlZero = 2
    } XlDisplayBlanksAs;


typedef enum {
        xlLabelPositionCenter = 0xffffeff4,
        xlLabelPositionAbove = 0,
        xlLabelPositionBelow = 1,
        xlLabelPositionLeft = 0xffffefdd,
        xlLabelPositionRight = 0xffffefc8,
        xlLabelPositionOutsideEnd = 2,
        xlLabelPositionInsideEnd = 3,
        xlLabelPositionInsideBase = 4,
        xlLabelPositionBestFit = 5,
        xlLabelPositionMixed = 6,
        xlLabelPositionCustom = 7
    } XlDataLabelPosition;


typedef enum {
        xlColumnField = 2,
        xlDataField = 4,
        xlHidden = 0,
        xlPageField = 3,
        xlRowField = 1
    } XlPivotFieldOrientation;


typedef enum {
        xlHAlignCenter = 0xffffeff4,
        xlHAlignCenterAcrossSelection = 7,
        xlHAlignDistributed = 0xffffefeb,
        xlHAlignFill = 5,
        xlHAlignGeneral = 1,
        xlHAlignJustify = 0xffffefde,
        xlHAlignLeft = 0xffffefdd,
        xlHAlignRight = 0xffffefc8
    } XlHAlign;


typedef enum {
        xlVAlignBottom = 0xffffeff5,
        xlVAlignCenter = 0xffffeff4,
        xlVAlignDistributed = 0xffffefeb,
        xlVAlignJustify = 0xffffefde,
        xlVAlignTop = 0xffffefc0
    } XlVAlign;


typedef enum {
        xlContinuous = 1,
        xlDash = 0xffffefed,
        xlDashDot = 4,
        xlDashDotDot = 5,
        xlDot = 0xffffefea,
        xlDouble = 0xffffefe9,
        xlSlantDashDot = 13,
        xlLineStyleNone = 0xffffefd2
    } XlLineStyle;


typedef enum {
        xlChartElementPositionAutomatic = 0xffffeff7,
        xlChartElementPositionCustom = 0xffffefee
    } XlChartElementPosition;


typedef [uuid(E9F1477D-EBE4-3E52-8171-6D2E3AEF58CD)]
    enum {
        wdListBehaviorKeepPreviousPattern = 0,
        wdListBehaviorAddBulletsNumbering = 1
    } WdUpdateStyleListBehavior;


typedef [uuid(5A7BBEA6-5356-39AB-A10C-F86DB4214C3F)]
    enum {
        wdSessionStartSet = 1,
        wdTemplateSet = 2
    } WdApplyQuickStyleSets;


typedef enum {
        wdLigaturesNone = 0,
        wdLigaturesStandard = 1,
        wdLigaturesContextual = 2,
        wdLigaturesHistorical = 4,
        wdLigaturesDiscretional = 8,
        wdLigaturesStandardContextual = 3,
        wdLigaturesStandardHistorical = 5,
        wdLigaturesContextualHistorical = 6,
        wdLigaturesStandardDiscretional = 9,
        wdLigaturesContextualDiscretional = 10,
        wdLigaturesHistoricalDiscretional = 12,
        wdLigaturesStandardContextualHistorical = 7,
        wdLigaturesStandardContextualDiscretional = 11,
        wdLigaturesStandardHistoricalDiscretional = 13,
        wdLigaturesContextualHistoricalDiscretional = 14,
        wdLigaturesAll = 15
    } WdLigatures;


typedef enum {
        wdNumberFormDefault = 0,
        wdNumberFormLining = 1,
        wdNumberFormOldStyle = 2
    } WdNumberForm;


typedef enum {
        wdNumberSpacingDefault = 0,
        wdNumberSpacingProportional = 1,
        wdNumberSpacingTabular = 2
    } WdNumberSpacing;


typedef enum {
        wdStylisticSetDefault = 0,
        wdStylisticSet01 = 1,
        wdStylisticSet02 = 2,
        wdStylisticSet03 = 4,
        wdStylisticSet04 = 8,
        wdStylisticSet05 = 16,
        wdStylisticSet06 = 32,
        wdStylisticSet07 = 64,
        wdStylisticSet08 = 128,
        wdStylisticSet09 = 256,
        wdStylisticSet10 = 512,
        wdStylisticSet11 = 1024,
        wdStylisticSet12 = 2048,
        wdStylisticSet13 = 4096,
        wdStylisticSet14 = 8192,
        wdStylisticSet15 = 16384,
        wdStylisticSet16 = 32768,
        wdStylisticSet17 = 0x00010000,
        wdStylisticSet18 = 0x00020000,
        wdStylisticSet19 = 0x00040000,
        wdStylisticSet20 = 0x00080000
    } WdStylisticSet;


typedef enum {
        wdSpanishTuteoOnly = 0,
        wdSpanishTuteoAndVoseo = 1,
        wdSpanishVoseoOnly = 2
    } WdSpanishSpeller;


typedef enum {
        wdLockNone = 0,
        wdLockReservation = 1,
        wdLockEphemeral = 2,
        wdLockChanged = 3
    } WdLockType;


typedef enum {
        xlHorizontalCoordinate = 1,
        xlVerticalCoordinate = 2
    } XlPieSliceLocation;


typedef enum {
        xlOuterCounterClockwisePoint = 1,
        xlOuterCenterPoint = 2,
        xlOuterClockwisePoint = 3,
        xlMidClockwiseRadiusPoint = 4,
        xlCenterPoint = 5,
        xlMidCounterClockwiseRadiusPoint = 6,
        xlInnerClockwisePoint = 7,
        xlInnerCenterPoint = 8,
        xlInnerCounterClockwisePoint = 9
    } XlPieSliceIndex;


typedef enum {
        wdWord2003 = 11,
        wdWord2007 = 12,
        wdWord2010 = 14,
        wdWord2013 = 15,
        wdCurrent = 65535
    } WdCompatibilityMode;


typedef enum {
        wdProtectedViewCloseNormal = 0,
        wdProtectedViewCloseEdit = 1,
        wdProtectedViewCloseForced = 2
    } WdProtectedViewCloseReason;


typedef enum {
        wdPortuguesePreReform = 1,
        wdPortuguesePostReform = 2,
        wdPortugueseBoth = 3
    } WdPortugueseReform;


typedef [uuid(1D81C8D5-149B-481D-B4AF-7605E0942FAF)]
    enum {
        wdContentControlBoundingBox = 0,
        wdContentControlTags = 1,
        wdContentControlHidden = 2
    } WdContentControlAppearance;


typedef [uuid(38B309AF-090C-47BB-8CFA-8CF758ECA76F)]
    enum {
        wdContentControlLevelInline = 0,
        wdContentControlLevelParagraph = 1,
        wdContentControlLevelRow = 2,
        wdContentControlLevelCell = 3
    } WdContentControlLevel;


typedef [uuid(7F9993CC-8BD9-4FA0-ABEF-D1AAD3429A14)]
    enum {
        xlCategoryLabelLevelNone = 0xfffffffd,
        xlCategoryLabelLevelCustom = 0xfffffffe,
        xlCategoryLabelLevelAll = 0xffffffff
    } XlCategoryLabelLevel;


typedef [uuid(336C75F2-4E4C-47C7-B4A9-D99AA7F81591)]
    enum {
        xlSeriesNameLevelNone = 0xfffffffd,
        xlSeriesNameLevelCustom = 0xfffffffe,
        xlSeriesNameLevelAll = 0xffffffff
    } XlSeriesNameLevel;


typedef [uuid(D30C2DB8-0EE9-40F9-AB5A-5DF15F3CF2EB)]
    enum {
        wdPageColorNone = 0,
        wdPageColorSepia = 1,
        wdPageColorInverse = 2
    } WdPageColor;


typedef [uuid(898E892B-FEAA-4C75-AB24-CCE8E6F123ED)]
    enum {
        wdColumnWidthNarrow = 1,
        wdColumnWidthDefault = 2,
        wdColumnWidthWide = 3
    } WdColumnWidth;


typedef [uuid(E775B5AE-2434-4F43-8F25-A9A4BBB2243D)]
    enum {
        wdRevisionsMarkupNone = 0,
        wdRevisionsMarkupSimple = 1,
        wdRevisionsMarkupAll = 2
    } WdRevisionsMarkup;



    


    


    


    


    


    [
      odl,
      uuid(00020970-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000970),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _Application : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09700000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000006), propget, helpcontext(0x09700006)]
        HRESULT Documents([out, retval] Documents** prop);
        [id(0x00000002), propget, helpcontext(0x09700002)]
        HRESULT Windows([out, retval] Windows** prop);
        [id(0x00000003), propget, helpcontext(0x09700003)]
        HRESULT ActiveDocument([out, retval] _Document** prop);
        [id(0x00000004), propget, helpcontext(0x09700004)]
        HRESULT ActiveWindow([out, retval] Window** prop);
        [id(0x00000005), propget, helpcontext(0x09700005)]
        HRESULT Selection([out, retval] Selection** prop);
        [id(0x00000001), propget, helpcontext(0x09700001)]
        HRESULT WordBasic([out, retval] IDispatch** prop);
        [id(0x00000007), propget, helpcontext(0x09700007)]
        HRESULT RecentFiles([out, retval] RecentFiles** prop);
        [id(0x00000008), propget, helpcontext(0x09700008)]
        HRESULT NormalTemplate([out, retval] Template** prop);
        [id(0x00000009), propget, helpcontext(0x09700009)]
        HRESULT System([out, retval] System** prop);
        [id(0x0000000a), propget, helpcontext(0x0970000a)]
        HRESULT AutoCorrect([out, retval] AutoCorrect** prop);
        [id(0x0000000b), propget, helpcontext(0x0970000b)]
        HRESULT FontNames([out, retval] FontNames** prop);
        [id(0x0000000c), propget, helpcontext(0x0970000c)]
        HRESULT LandscapeFontNames([out, retval] FontNames** prop);
        [id(0x0000000d), propget, helpcontext(0x0970000d)]
        HRESULT PortraitFontNames([out, retval] FontNames** prop);
        [id(0x0000000e), propget, helpcontext(0x0970000e)]
        HRESULT Languages([out, retval] Languages** prop);
        [id(0x0000000f), propget, hidden, helpcontext(0x0970000f)]
        HRESULT Assistant([out, retval] Assistant** prop);
        [id(0x00000010), propget, helpcontext(0x09700010)]
        HRESULT Browser([out, retval] Browser** prop);
        [id(0x00000011), propget, helpcontext(0x09700011)]
        HRESULT FileConverters([out, retval] FileConverters** prop);
        [id(0x00000012), propget, helpcontext(0x09700012)]
        HRESULT MailingLabel([out, retval] MailingLabel** prop);
        [id(0x00000013), propget, helpcontext(0x09700013)]
        HRESULT Dialogs([out, retval] Dialogs** prop);
        [id(0x00000014), propget, helpcontext(0x09700014)]
        HRESULT CaptionLabels([out, retval] CaptionLabels** prop);
        [id(0x00000015), propget, helpcontext(0x09700015)]
        HRESULT AutoCaptions([out, retval] AutoCaptions** prop);
        [id(0x00000016), propget, helpcontext(0x09700016)]
        HRESULT AddIns([out, retval] AddIns** prop);
        [id(0x00000017), propget, helpcontext(0x09700017)]
        HRESULT Visible([out, retval] VARIANT_BOOL* prop);
        [id(0x00000017), propput, helpcontext(0x09700017)]
        HRESULT Visible([in] VARIANT_BOOL prop);
        [id(0x00000018), propget, helpcontext(0x09700018)]
        HRESULT Version([out, retval] BSTR* prop);
        [id(0x0000001a), propget, helpcontext(0x0970001a)]
        HRESULT ScreenUpdating([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001a), propput, helpcontext(0x0970001a)]
        HRESULT ScreenUpdating([in] VARIANT_BOOL prop);
        [id(0x0000001b), propget, helpcontext(0x0970001b)]
        HRESULT PrintPreview([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001b), propput, helpcontext(0x0970001b)]
        HRESULT PrintPreview([in] VARIANT_BOOL prop);
        [id(0x0000001c), propget, helpcontext(0x0970001c)]
        HRESULT Tasks([out, retval] Tasks** prop);
        [id(0x0000001d), propget, hidden, helpcontext(0x0970001d)]
        HRESULT DisplayStatusBar([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001d), propput, hidden, helpcontext(0x0970001d)]
        HRESULT DisplayStatusBar([in] VARIANT_BOOL prop);
        [id(0x0000001e), propget, helpcontext(0x0970001e)]
        HRESULT SpecialMode([out, retval] VARIANT_BOOL* prop);
        [id(0x00000021), propget, helpcontext(0x09700021)]
        HRESULT UsableWidth([out, retval] long* prop);
        [id(0x00000022), propget, helpcontext(0x09700022)]
        HRESULT UsableHeight([out, retval] long* prop);
        [id(0x00000024), propget, helpcontext(0x09700024)]
        HRESULT MathCoprocessorAvailable([out, retval] VARIANT_BOOL* prop);
        [id(0x00000025), propget, helpcontext(0x09700025)]
        HRESULT MouseAvailable([out, retval] VARIANT_BOOL* prop);
        [id(0x0000002e), propget, helpcontext(0x0970002e)]
        HRESULT International(
                        [in] WdInternationalIndex Index, 
                        [out, retval] VARIANT* prop);
        [id(0x0000002f), propget, helpcontext(0x0970002f)]
        HRESULT Build([out, retval] BSTR* prop);
        [id(0x00000030), propget, helpcontext(0x09700030)]
        HRESULT CapsLock([out, retval] VARIANT_BOOL* prop);
        [id(0x00000031), propget, helpcontext(0x09700031)]
        HRESULT NumLock([out, retval] VARIANT_BOOL* prop);
        [id(0x00000034), propget, helpcontext(0x09700034)]
        HRESULT UserName([out, retval] BSTR* prop);
        [id(0x00000034), propput, helpcontext(0x09700034)]
        HRESULT UserName([in] BSTR prop);
        [id(0x00000035), propget, helpcontext(0x09700035)]
        HRESULT UserInitials([out, retval] BSTR* prop);
        [id(0x00000035), propput, helpcontext(0x09700035)]
        HRESULT UserInitials([in] BSTR prop);
        [id(0x00000036), propget, helpcontext(0x09700036)]
        HRESULT UserAddress([out, retval] BSTR* prop);
        [id(0x00000036), propput, helpcontext(0x09700036)]
        HRESULT UserAddress([in] BSTR prop);
        [id(0x00000037), propget, helpcontext(0x09700037)]
        HRESULT MacroContainer([out, retval] IDispatch** prop);
        [id(0x00000038), propget, helpcontext(0x09700038)]
        HRESULT DisplayRecentFiles([out, retval] VARIANT_BOOL* prop);
        [id(0x00000038), propput, helpcontext(0x09700038)]
        HRESULT DisplayRecentFiles([in] VARIANT_BOOL prop);
        [id(0x00000039), propget, helpcontext(0x09700039)]
        HRESULT CommandBars([out, retval] CommandBars** prop);
        [id(0x0000003b), propget, helpcontext(0x0970003b)]
        HRESULT SynonymInfo(
                        [in] BSTR Word, 
                        [in, optional] VARIANT* LanguageID, 
                        [out, retval] SynonymInfo** prop);
        [id(0x0000003d), propget, helpcontext(0x0970003d)]
        HRESULT VBE([out, retval] VBE** prop);
        [id(0x00000040), propget, helpcontext(0x09700040)]
        HRESULT DefaultSaveFormat([out, retval] BSTR* prop);
        [id(0x00000040), propput, helpcontext(0x09700040)]
        HRESULT DefaultSaveFormat([in] BSTR prop);
        [id(0x00000041), propget, helpcontext(0x09700041)]
        HRESULT ListGalleries([out, retval] ListGalleries** prop);
        [id(0x00000042), propget, helpcontext(0x09700042)]
        HRESULT ActivePrinter([out, retval] BSTR* prop);
        [id(0x00000042), propput, helpcontext(0x09700042)]
        HRESULT ActivePrinter([in] BSTR prop);
        [id(0x00000043), propget, helpcontext(0x09700043)]
        HRESULT Templates([out, retval] Templates** prop);
        [id(0x00000044), propget, helpcontext(0x09700044)]
        HRESULT CustomizationContext([out, retval] IDispatch** prop);
        [id(0x00000044), propput, helpcontext(0x09700044)]
        HRESULT CustomizationContext([in] IDispatch* prop);
        [id(0x00000045), propget, helpcontext(0x09700045)]
        HRESULT KeyBindings([out, retval] KeyBindings** prop);
        [id(0x00000046), propget, helpcontext(0x09700046)]
        HRESULT KeysBoundTo(
                        [in] WdKeyCategory KeyCategory, 
                        [in] BSTR Command, 
                        [in, optional] VARIANT* CommandParameter, 
                        [out, retval] KeysBoundTo** prop);
        [id(0x00000047), propget, helpcontext(0x09700047)]
        HRESULT FindKey(
                        [in] long KeyCode, 
                        [in, optional] VARIANT* KeyCode2, 
                        [out, retval] KeyBinding** prop);
        [id(0x00000050), propget, helpcontext(0x09700050)]
        HRESULT Caption([out, retval] BSTR* prop);
        [id(0x00000050), propput, helpcontext(0x09700050)]
        HRESULT Caption([in] BSTR prop);
        [id(0x00000051), propget, helpcontext(0x09700051)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000052), propget, helpcontext(0x09700052)]
        HRESULT DisplayScrollBars([out, retval] VARIANT_BOOL* prop);
        [id(0x00000052), propput, helpcontext(0x09700052)]
        HRESULT DisplayScrollBars([in] VARIANT_BOOL prop);
        [id(0x00000053), propget, helpcontext(0x09700053)]
        HRESULT StartupPath([out, retval] BSTR* prop);
        [id(0x00000053), propput, helpcontext(0x09700053)]
        HRESULT StartupPath([in] BSTR prop);
        [id(0x00000055), propget, helpcontext(0x09700055)]
        HRESULT BackgroundSavingStatus([out, retval] long* prop);
        [id(0x00000056), propget, helpcontext(0x09700056)]
        HRESULT BackgroundPrintingStatus([out, retval] long* prop);
        [id(0x00000057), propget, helpcontext(0x09700057)]
        HRESULT Left([out, retval] long* prop);
        [id(0x00000057), propput, helpcontext(0x09700057)]
        HRESULT Left([in] long prop);
        [id(0x00000058), propget, helpcontext(0x09700058)]
        HRESULT Top([out, retval] long* prop);
        [id(0x00000058), propput, helpcontext(0x09700058)]
        HRESULT Top([in] long prop);
        [id(0x00000059), propget, helpcontext(0x09700059)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000059), propput, helpcontext(0x09700059)]
        HRESULT Width([in] long prop);
        [id(0x0000005a), propget, helpcontext(0x0970005a)]
        HRESULT Height([out, retval] long* prop);
        [id(0x0000005a), propput, helpcontext(0x0970005a)]
        HRESULT Height([in] long prop);
        [id(0x0000005b), propget, helpcontext(0x0970005b)]
        HRESULT WindowState([out, retval] WdWindowState* prop);
        [id(0x0000005b), propput, helpcontext(0x0970005b)]
        HRESULT WindowState([in] WdWindowState prop);
        [id(0x0000005c), propget, helpcontext(0x0970005c)]
        HRESULT DisplayAutoCompleteTips([out, retval] VARIANT_BOOL* prop);
        [id(0x0000005c), propput, helpcontext(0x0970005c)]
        HRESULT DisplayAutoCompleteTips([in] VARIANT_BOOL prop);
        [id(0x0000005d), propget, helpcontext(0x0970005d)]
        HRESULT Options([out, retval] Options** prop);
        [id(0x0000005e), propget, helpcontext(0x0970005e)]
        HRESULT DisplayAlerts([out, retval] WdAlertLevel* prop);
        [id(0x0000005e), propput, helpcontext(0x0970005e)]
        HRESULT DisplayAlerts([in] WdAlertLevel prop);
        [id(0x0000005f), propget, helpcontext(0x0970005f)]
        HRESULT CustomDictionaries([out, retval] Dictionaries** prop);
        [id(0x00000060), propget, helpcontext(0x09700060)]
        HRESULT PathSeparator([out, retval] BSTR* prop);
        [id(0x00000061), propput, helpcontext(0x09700061)]
        HRESULT StatusBar([in] BSTR rhs);
        [id(0x00000062), propget, helpcontext(0x09700062)]
        HRESULT MAPIAvailable([out, retval] VARIANT_BOOL* prop);
        [id(0x00000063), propget, helpcontext(0x09700063)]
        HRESULT DisplayScreenTips([out, retval] VARIANT_BOOL* prop);
        [id(0x00000063), propput, helpcontext(0x09700063)]
        HRESULT DisplayScreenTips([in] VARIANT_BOOL prop);
        [id(0x00000064), propget, helpcontext(0x09700064)]
        HRESULT EnableCancelKey([out, retval] WdEnableCancelKey* prop);
        [id(0x00000064), propput, helpcontext(0x09700064)]
        HRESULT EnableCancelKey([in] WdEnableCancelKey prop);
        [id(0x00000065), propget, helpcontext(0x09700065)]
        HRESULT UserControl([out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), propget, hidden, helpcontext(0x09700067)]
        HRESULT FileSearch([out, retval] FileSearch** prop);
        [id(0x00000068), propget, helpcontext(0x09700068)]
        HRESULT MailSystem([out, retval] WdMailSystem* prop);
        [id(0x00000069), propget, helpcontext(0x09700069)]
        HRESULT DefaultTableSeparator([out, retval] BSTR* prop);
        [id(0x00000069), propput, helpcontext(0x09700069)]
        HRESULT DefaultTableSeparator([in] BSTR prop);
        [id(0x0000006a), propget, helpcontext(0x0970006a)]
        HRESULT ShowVisualBasicEditor([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006a), propput, helpcontext(0x0970006a)]
        HRESULT ShowVisualBasicEditor([in] VARIANT_BOOL prop);
        [id(0x0000006c), propget, helpcontext(0x0970006c)]
        HRESULT BrowseExtraFileTypes([out, retval] BSTR* prop);
        [id(0x0000006c), propput, helpcontext(0x0970006c)]
        HRESULT BrowseExtraFileTypes([in] BSTR prop);
        [id(0x0000006d), propget, helpcontext(0x0970006d)]
        HRESULT IsObjectValid(
                        [in] IDispatch* Object, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000006e), propget, helpcontext(0x0970006e)]
        HRESULT HangulHanjaDictionaries([out, retval] HangulHanjaConversionDictionaries** prop);
        [id(0x0000015c), propget, helpcontext(0x0970015c)]
        HRESULT MailMessage([out, retval] MailMessage** prop);
        [id(0x00000182), propget, helpcontext(0x09700182)]
        HRESULT FocusInMailHeader([out, retval] VARIANT_BOOL* prop);
        [id(0x00000451), helpcontext(0x09700451)]
        HRESULT Quit(
                        [in, optional] VARIANT* SaveChanges, 
                        [in, optional] VARIANT* OriginalFormat, 
                        [in, optional] VARIANT* RouteDocument);
        [id(0x0000012d), helpcontext(0x0970012d)]
        HRESULT ScreenRefresh();
        [id(0x0000012e), hidden, helpcontext(0x0970012e)]
        HRESULT PrintOutOld(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* FileName, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint);
        [id(0x0000012f), helpcontext(0x0970012f)]
        HRESULT LookupNameProperties([in] BSTR Name);
        [id(0x00000130), helpcontext(0x09700130)]
        HRESULT SubstituteFont(
                        [in] BSTR UnavailableFont, 
                        [in] BSTR SubstituteFont);
        [id(0x00000131), helpcontext(0x09700131)]
        HRESULT Repeat(
                        [in, optional] VARIANT* Times, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000136), helpcontext(0x09700136)]
        HRESULT DDEExecute(
                        [in] long Channel, 
                        [in] BSTR Command);
        [id(0x00000137), helpcontext(0x09700137)]
        HRESULT DDEInitiate(
                        [in] BSTR App, 
                        [in] BSTR Topic, 
                        [out, retval] long* prop);
        [id(0x00000138), helpcontext(0x09700138)]
        HRESULT DDEPoke(
                        [in] long Channel, 
                        [in] BSTR Item, 
                        [in] BSTR Data);
        [id(0x00000139), helpcontext(0x09700139)]
        HRESULT DDERequest(
                        [in] long Channel, 
                        [in] BSTR Item, 
                        [out, retval] BSTR* prop);
        [id(0x0000013a), helpcontext(0x0970013a)]
        HRESULT DDETerminate([in] long Channel);
        [id(0x0000013b), helpcontext(0x0970013b)]
        HRESULT DDETerminateAll();
        [id(0x0000013c), helpcontext(0x0970013c)]
        HRESULT BuildKeyCode(
                        [in] WdKey Arg1, 
                        [in, optional] VARIANT* Arg2, 
                        [in, optional] VARIANT* Arg3, 
                        [in, optional] VARIANT* Arg4, 
                        [out, retval] long* prop);
        [id(0x0000013d), helpcontext(0x0970013d)]
        HRESULT KeyString(
                        [in] long KeyCode, 
                        [in, optional] VARIANT* KeyCode2, 
                        [out, retval] BSTR* prop);
        [id(0x0000013e), helpcontext(0x0970013e)]
        HRESULT OrganizerCopy(
                        [in] BSTR Source, 
                        [in] BSTR Destination, 
                        [in] BSTR Name, 
                        [in] WdOrganizerObject Object);
        [id(0x0000013f), helpcontext(0x0970013f)]
        HRESULT OrganizerDelete(
                        [in] BSTR Source, 
                        [in] BSTR Name, 
                        [in] WdOrganizerObject Object);
        [id(0x00000140), helpcontext(0x09700140)]
        HRESULT OrganizerRename(
                        [in] BSTR Source, 
                        [in] BSTR Name, 
                        [in] BSTR NewName, 
                        [in] WdOrganizerObject Object);
        [id(0x00000141), helpcontext(0x09700141)]
        HRESULT AddAddress(
                        [in] SAFEARRAY(BSTR)* TagID, 
                        [in] SAFEARRAY(BSTR)* Value);
        [id(0x00000142), helpcontext(0x09700142)]
        HRESULT GetAddress(
                        [in, optional] VARIANT* Name, 
                        [in, optional] VARIANT* AddressProperties, 
                        [in, optional] VARIANT* UseAutoText, 
                        [in, optional] VARIANT* DisplaySelectDialog, 
                        [in, optional] VARIANT* SelectDialog, 
                        [in, optional] VARIANT* CheckNamesDialog, 
                        [in, optional] VARIANT* RecentAddressesChoice, 
                        [in, optional] VARIANT* UpdateRecentAddresses, 
                        [out, retval] BSTR* prop);
        [id(0x00000143), helpcontext(0x09700143)]
        HRESULT CheckGrammar(
                        [in] BSTR String, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000144), helpcontext(0x09700144)]
        HRESULT CheckSpelling(
                        [in] BSTR Word, 
                        [in, optional] VARIANT* CustomDictionary, 
                        [in, optional] VARIANT* IgnoreUppercase, 
                        [in, optional] VARIANT* MainDictionary, 
                        [in, optional] VARIANT* CustomDictionary2, 
                        [in, optional] VARIANT* CustomDictionary3, 
                        [in, optional] VARIANT* CustomDictionary4, 
                        [in, optional] VARIANT* CustomDictionary5, 
                        [in, optional] VARIANT* CustomDictionary6, 
                        [in, optional] VARIANT* CustomDictionary7, 
                        [in, optional] VARIANT* CustomDictionary8, 
                        [in, optional] VARIANT* CustomDictionary9, 
                        [in, optional] VARIANT* CustomDictionary10, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000146), helpcontext(0x09700146)]
        HRESULT ResetIgnoreAll();
        [id(0x00000147), helpcontext(0x09700147)]
        HRESULT GetSpellingSuggestions(
                        [in] BSTR Word, 
                        [in, optional] VARIANT* CustomDictionary, 
                        [in, optional] VARIANT* IgnoreUppercase, 
                        [in, optional] VARIANT* MainDictionary, 
                        [in, optional] VARIANT* SuggestionMode, 
                        [in, optional] VARIANT* CustomDictionary2, 
                        [in, optional] VARIANT* CustomDictionary3, 
                        [in, optional] VARIANT* CustomDictionary4, 
                        [in, optional] VARIANT* CustomDictionary5, 
                        [in, optional] VARIANT* CustomDictionary6, 
                        [in, optional] VARIANT* CustomDictionary7, 
                        [in, optional] VARIANT* CustomDictionary8, 
                        [in, optional] VARIANT* CustomDictionary9, 
                        [in, optional] VARIANT* CustomDictionary10, 
                        [out, retval] SpellingSuggestions** prop);
        [id(0x00000148), helpcontext(0x09700148)]
        HRESULT GoBack();
        [id(0x00000149), helpcontext(0x09700149)]
        HRESULT Help([in] VARIANT* HelpType);
        [id(0x0000014a), helpcontext(0x0970014a)]
        HRESULT AutomaticChange();
        [id(0x0000014b), helpcontext(0x0970014b)]
        HRESULT ShowMe();
        [id(0x0000014c), helpcontext(0x0970014c)]
        HRESULT HelpTool();
        [id(0x00000159), helpcontext(0x09700159)]
        HRESULT NewWindow([out, retval] Window** prop);
        [id(0x0000015a), helpcontext(0x0970015a)]
        HRESULT ListCommands([in] VARIANT_BOOL ListAllCommands);
        [id(0x0000015d), helpcontext(0x0970015d)]
        HRESULT ShowClipboard();
        [id(0x0000015e), helpcontext(0x0970015e)]
        HRESULT OnTime(
                        [in] VARIANT* When, 
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Tolerance);
        [id(0x0000015f), helpcontext(0x0970015f)]
        HRESULT NextLetter();
        [id(0x00000161), hidden, helpcontext(0x09700161)]
        HRESULT MountVolume(
                        [in] BSTR Zone, 
                        [in] BSTR Server, 
                        [in] BSTR Volume, 
                        [in, optional] VARIANT* User, 
                        [in, optional] VARIANT* UserPassword, 
                        [in, optional] VARIANT* VolumePassword, 
                        [out, retval] short* prop);
        [id(0x00000162), helpcontext(0x09700162)]
        HRESULT CleanString(
                        [in] BSTR String, 
                        [out, retval] BSTR* prop);
        [id(0x00000164), hidden, helpcontext(0x09700164)]
        HRESULT SendFax();
        [id(0x00000165), helpcontext(0x09700165)]
        HRESULT ChangeFileOpenDirectory([in] BSTR Path);
        [id(0x00000166), hidden, helpcontext(0x09700166)]
        HRESULT RunOld([in] BSTR MacroName);
        [id(0x00000167), helpcontext(0x09700167)]
        HRESULT GoForward();
        [id(0x00000168), helpcontext(0x09700168)]
        HRESULT Move(
                        [in] long Left, 
                        [in] long Top);
        [id(0x00000169), helpcontext(0x09700169)]
        HRESULT Resize(
                        [in] long Width, 
                        [in] long Height);
        [id(0x00000172), helpcontext(0x09700172)]
        HRESULT InchesToPoints(
                        [in] single Inches, 
                        [out, retval] single* prop);
        [id(0x00000173), helpcontext(0x09700173)]
        HRESULT CentimetersToPoints(
                        [in] single Centimeters, 
                        [out, retval] single* prop);
        [id(0x00000174), helpcontext(0x09700174)]
        HRESULT MillimetersToPoints(
                        [in] single Millimeters, 
                        [out, retval] single* prop);
        [id(0x00000175), helpcontext(0x09700175)]
        HRESULT PicasToPoints(
                        [in] single Picas, 
                        [out, retval] single* prop);
        [id(0x00000176), helpcontext(0x09700176)]
        HRESULT LinesToPoints(
                        [in] single Lines, 
                        [out, retval] single* prop);
        [id(0x0000017c), helpcontext(0x0970017c)]
        HRESULT PointsToInches(
                        [in] single Points, 
                        [out, retval] single* prop);
        [id(0x0000017d), helpcontext(0x0970017d)]
        HRESULT PointsToCentimeters(
                        [in] single Points, 
                        [out, retval] single* prop);
        [id(0x0000017e), helpcontext(0x0970017e)]
        HRESULT PointsToMillimeters(
                        [in] single Points, 
                        [out, retval] single* prop);
        [id(0x0000017f), helpcontext(0x0970017f)]
        HRESULT PointsToPicas(
                        [in] single Points, 
                        [out, retval] single* prop);
        [id(0x00000180), helpcontext(0x09700180)]
        HRESULT PointsToLines(
                        [in] single Points, 
                        [out, retval] single* prop);
        [id(0x00000181), helpcontext(0x09700181)]
        HRESULT Activate();
        [id(0x00000183), helpcontext(0x09700183)]
        HRESULT PointsToPixels(
                        [in] single Points, 
                        [in, optional] VARIANT* fVertical, 
                        [out, retval] single* prop);
        [id(0x00000184), helpcontext(0x09700184)]
        HRESULT PixelsToPoints(
                        [in] single Pixels, 
                        [in, optional] VARIANT* fVertical, 
                        [out, retval] single* prop);
        [id(0x00000190), helpcontext(0x09700190)]
        HRESULT KeyboardLatin();
        [id(0x00000191), helpcontext(0x09700191)]
        HRESULT KeyboardBidi();
        [id(0x00000192), helpcontext(0x09700192)]
        HRESULT ToggleKeyboard();
        [id(0x000001be), helpcontext(0x097001be)]
        HRESULT Keyboard(
                        [in, optional, defaultvalue(0)] long LangId, 
                        [out, retval] long* prop);
        [id(0x00000194), helpcontext(0x09700194)]
        HRESULT ProductCode([out, retval] BSTR* prop);
        [id(0x00000195), helpcontext(0x09700195)]
        HRESULT DefaultWebOptions([out, retval] DefaultWebOptions** prop);
        [id(0x00000197), hidden, helpcontext(0x09700197)]
        HRESULT DiscussionSupport(
                        [in] VARIANT* Range, 
                        [in] VARIANT* cid, 
                        [in] VARIANT* piCSE);
        [id(0x0000019e), helpcontext(0x0970019e)]
        HRESULT SetDefaultTheme(
                        [in] BSTR Name, 
                        [in] WdDocumentMedium DocumentType);
        [id(0x000001a0), helpcontext(0x097001a0)]
        HRESULT GetDefaultTheme(
                        [in] WdDocumentMedium DocumentType, 
                        [out, retval] BSTR* prop);
        [id(0x00000185), propget, helpcontext(0x09700185)]
        HRESULT EmailOptions([out, retval] EmailOptions** prop);
        [id(0x00000187), propget, helpcontext(0x09700187)]
        HRESULT Language([out, retval] MsoLanguageID* prop);
        [id(0x0000006f), propget, helpcontext(0x0970006f)]
        HRESULT COMAddIns([out, retval] COMAddIns** prop);
        [id(0x00000070), propget, helpcontext(0x09700070)]
        HRESULT CheckLanguage([out, retval] VARIANT_BOOL* prop);
        [id(0x00000070), propput, helpcontext(0x09700070)]
        HRESULT CheckLanguage([in] VARIANT_BOOL prop);
        [id(0x00000193), propget, helpcontext(0x09700193)]
        HRESULT LanguageSettings([out, retval] LanguageSettings** prop);
        [id(0x00000196), propget, hidden, helpcontext(0x09700196)]
        HRESULT Dummy1([out, retval] VARIANT_BOOL* prop);
        [id(0x00000199), propget, hidden, helpcontext(0x09700199)]
        HRESULT AnswerWizard([out, retval] AnswerWizard** prop);
        [id(0x000001bf), propget, helpcontext(0x097001bf)]
        HRESULT FeatureInstall([out, retval] MsoFeatureInstall* prop);
        [id(0x000001bf), propput, helpcontext(0x097001bf)]
        HRESULT FeatureInstall([in] MsoFeatureInstall prop);
        [id(0x000001bc), hidden, helpcontext(0x097001bc)]
        HRESULT PrintOut2000(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* FileName, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint, 
                        [in, optional] VARIANT* PrintZoomColumn, 
                        [in, optional] VARIANT* PrintZoomRow, 
                        [in, optional] VARIANT* PrintZoomPaperWidth, 
                        [in, optional] VARIANT* PrintZoomPaperHeight);
        [id(0x000001bd), helpcontext(0x097001bd)]
        HRESULT Run(
                        [in] BSTR MacroName, 
                        [in, optional] VARIANT* varg1, 
                        [in, optional] VARIANT* varg2, 
                        [in, optional] VARIANT* varg3, 
                        [in, optional] VARIANT* varg4, 
                        [in, optional] VARIANT* varg5, 
                        [in, optional] VARIANT* varg6, 
                        [in, optional] VARIANT* varg7, 
                        [in, optional] VARIANT* varg8, 
                        [in, optional] VARIANT* varg9, 
                        [in, optional] VARIANT* varg10, 
                        [in, optional] VARIANT* varg11, 
                        [in, optional] VARIANT* varg12, 
                        [in, optional] VARIANT* varg13, 
                        [in, optional] VARIANT* varg14, 
                        [in, optional] VARIANT* varg15, 
                        [in, optional] VARIANT* varg16, 
                        [in, optional] VARIANT* varg17, 
                        [in, optional] VARIANT* varg18, 
                        [in, optional] VARIANT* varg19, 
                        [in, optional] VARIANT* varg20, 
                        [in, optional] VARIANT* varg21, 
                        [in, optional] VARIANT* varg22, 
                        [in, optional] VARIANT* varg23, 
                        [in, optional] VARIANT* varg24, 
                        [in, optional] VARIANT* varg25, 
                        [in, optional] VARIANT* varg26, 
                        [in, optional] VARIANT* varg27, 
                        [in, optional] VARIANT* varg28, 
                        [in, optional] VARIANT* varg29, 
                        [in, optional] VARIANT* varg30, 
                        [out, retval] VARIANT* prop);
        [id(0x000001c0), helpcontext(0x097001c0)]
        HRESULT PrintOut(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* FileName, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint, 
                        [in, optional] VARIANT* PrintZoomColumn, 
                        [in, optional] VARIANT* PrintZoomRow, 
                        [in, optional] VARIANT* PrintZoomPaperWidth, 
                        [in, optional] VARIANT* PrintZoomPaperHeight);
        [id(0x000001c1), propget, helpcontext(0x097001c1)]
        HRESULT AutomationSecurity([out, retval] MsoAutomationSecurity* prop);
        [id(0x000001c1), propput, helpcontext(0x097001c1)]
        HRESULT AutomationSecurity([in] MsoAutomationSecurity prop);
        [id(0x000001c2), propget, helpcontext(0x097001c2)]
        HRESULT FileDialog(
                        [in] MsoFileDialogType FileDialogType, 
                        [out, retval] FileDialog** prop);
        [id(0x000001c3), propget, helpcontext(0x097001c3)]
        HRESULT EmailTemplate([out, retval] BSTR* prop);
        [id(0x000001c3), propput, helpcontext(0x097001c3)]
        HRESULT EmailTemplate([in] BSTR prop);
        [id(0x000001c4), propget, hidden, helpcontext(0x097001c4)]
        HRESULT ShowWindowsInTaskbar([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c4), propput, hidden, helpcontext(0x097001c4)]
        HRESULT ShowWindowsInTaskbar([in] VARIANT_BOOL prop);
        [id(0x000001c6), propget, helpcontext(0x097001c6)]
        HRESULT NewDocument([out, retval] NewFile** prop);
        [id(0x000001c7), propget, helpcontext(0x097001c7)]
        HRESULT ShowStartupDialog([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c7), propput, helpcontext(0x097001c7)]
        HRESULT ShowStartupDialog([in] VARIANT_BOOL prop);
        [id(0x000001c8), propget, helpcontext(0x097001c8)]
        HRESULT AutoCorrectEmail([out, retval] AutoCorrect** prop);
        [id(0x000001c9), propget, helpcontext(0x097001c9)]
        HRESULT TaskPanes([out, retval] TaskPanes** prop);
        [id(0x000001cb), propget, helpcontext(0x097001cb)]
        HRESULT DefaultLegalBlackline([out, retval] VARIANT_BOOL* prop);
        [id(0x000001cb), propput, helpcontext(0x097001cb)]
        HRESULT DefaultLegalBlackline([in] VARIANT_BOOL prop);
        [id(0x000001ca), hidden, helpcontext(0x097001ca)]
        HRESULT Dummy2([out, retval] VARIANT_BOOL* prop);
        [id(0x000001cc), propget, hidden, helpcontext(0x097001cc)]
        HRESULT SmartTagRecognizers([out, retval] SmartTagRecognizers** prop);
        [id(0x000001cd), propget, hidden, helpcontext(0x097001cd)]
        HRESULT SmartTagTypes([out, retval] SmartTagTypes** prop);
        [id(0x000001cf), propget, helpcontext(0x097001cf)]
        HRESULT XMLNamespaces([out, retval] XMLNamespaces** prop);
        [id(0x000001d0), helpcontext(0x097001d0)]
        HRESULT PutFocusInMailHeader();
        [id(0x000001d1), propget, helpcontext(0x097001d1)]
        HRESULT ArbitraryXMLSupportAvailable([out, retval] VARIANT_BOOL* prop);
        [id(0x000001d2), propget, hidden, helpcontext(0x097001d2)]
        HRESULT BuildFull([out, retval] BSTR* prop);
        [id(0x000001d3), propget, hidden, helpcontext(0x097001d3)]
        HRESULT BuildFeatureCrew([out, retval] BSTR* prop);
        [id(0x000001d5), helpcontext(0x097001d5)]
        HRESULT LoadMasterList([in] BSTR FileName);
        [id(0x000001d6), helpcontext(0x097001d6)]
        HRESULT CompareDocuments(
                        [in] _Document* OriginalDocument, 
                        [in] _Document* RevisedDocument, 
                        [in, optional, defaultvalue(2)] WdCompareDestination Destination, 
                        [in, optional, defaultvalue(1)] WdGranularity Granularity, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareFormatting, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareCaseChanges, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareWhitespace, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareTables, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareHeaders, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareFootnotes, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareTextboxes, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareFields, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareComments, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareMoves, 
                        [in, optional, defaultvalue("")] BSTR RevisedAuthor, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL IgnoreAllComparisonWarnings, 
                        [out, retval] _Document** prop);
        [id(0x000001d7), helpcontext(0x097001d7)]
        HRESULT MergeDocuments(
                        [in] _Document* OriginalDocument, 
                        [in] _Document* RevisedDocument, 
                        [in, optional, defaultvalue(2)] WdCompareDestination Destination, 
                        [in, optional, defaultvalue(1)] WdGranularity Granularity, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareFormatting, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareCaseChanges, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareWhitespace, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareTables, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareHeaders, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareFootnotes, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareTextboxes, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareFields, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareComments, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL CompareMoves, 
                        [in, optional, defaultvalue("")] BSTR OriginalAuthor, 
                        [in, optional, defaultvalue("")] BSTR RevisedAuthor, 
                        [in, optional, defaultvalue(2)] WdMergeFormatFrom FormatFrom, 
                        [out, retval] _Document** prop);
        [id(0x000001d8), propget, helpcontext(0x097001d8)]
        HRESULT Bibliography([out, retval] Bibliography** prop);
        [id(0x000001d9), propget, helpcontext(0x097001d9)]
        HRESULT ShowStylePreviews([out, retval] VARIANT_BOOL* prop);
        [id(0x000001d9), propput, helpcontext(0x097001d9)]
        HRESULT ShowStylePreviews([in] VARIANT_BOOL prop);
        [id(0x000001da), propget, helpcontext(0x097001da)]
        HRESULT RestrictLinkedStyles([out, retval] VARIANT_BOOL* prop);
        [id(0x000001da), propput, helpcontext(0x097001da)]
        HRESULT RestrictLinkedStyles([in] VARIANT_BOOL prop);
        [id(0x000001db), propget, helpcontext(0x097001db)]
        HRESULT OMathAutoCorrect([out, retval] OMathAutoCorrect** prop);
        [id(0x000001dc), propget, helpcontext(0x097001dc)]
        HRESULT DisplayDocumentInformationPanel([out, retval] VARIANT_BOOL* prop);
        [id(0x000001dc), propput, helpcontext(0x097001dc)]
        HRESULT DisplayDocumentInformationPanel([in] VARIANT_BOOL prop);
        [id(0x000001dd), propget, helpcontext(0x097001dd)]
        HRESULT Assistance([out, retval] IAssistance** prop);
        [id(0x000001de), propget, helpcontext(0x097001de)]
        HRESULT OpenAttachmentsInFullScreen([out, retval] VARIANT_BOOL* prop);
        [id(0x000001de), propput, helpcontext(0x097001de)]
        HRESULT OpenAttachmentsInFullScreen([in] VARIANT_BOOL prop);
        [id(0x000001df), propget, helpcontext(0x097001df)]
        HRESULT ActiveEncryptionSession([out, retval] long* prop);
        [id(0x000001e0), propget, helpcontext(0x097001e0)]
        HRESULT DontResetInsertionPointProperties([out, retval] VARIANT_BOOL* prop);
        [id(0x000001e0), propput, helpcontext(0x097001e0)]
        HRESULT DontResetInsertionPointProperties([in] VARIANT_BOOL prop);
        [id(0x000001e1), propget, helpcontext(0x097001e1)]
        HRESULT SmartArtLayouts([out, retval] SmartArtLayouts** prop);
        [id(0x000001e2), propget, helpcontext(0x097001e2)]
        HRESULT SmartArtQuickStyles([out, retval] SmartArtQuickStyles** prop);
        [id(0x000001e3), propget, helpcontext(0x097001e3)]
        HRESULT SmartArtColors([out, retval] SmartArtColors** prop);
        [id(0x000001e4), hidden, helpcontext(0x097001e4)]
        HRESULT ThreeWayMerge(
                        [in] _Document* LocalDocument, 
                        [in] _Document* ServerDocument, 
                        [in] _Document* BaseDocument, 
                        [in] VARIANT_BOOL FavorSource);
        [id(0x000001e5), hidden, helpcontext(0x097001e5)]
        HRESULT Dummy4();
        [id(0x000001e6), propget, helpcontext(0x097001e6)]
        HRESULT UndoRecord([out, retval] UndoRecord** prop);
        [id(0x000001e9), propget, helpcontext(0x097001e9)]
        HRESULT PickerDialog([out, retval] PickerDialog** prop);
        [id(0x000001ea), propget, helpcontext(0x097001ea)]
        HRESULT ProtectedViewWindows([out, retval] ProtectedViewWindows** prop);
        [id(0x000001eb), propget, helpcontext(0x097001eb)]
        HRESULT ActiveProtectedViewWindow([out, retval] ProtectedViewWindow** prop);
        [id(0x000001ec), propget, helpcontext(0x097001ec)]
        HRESULT IsSandboxed([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ed), propget, helpcontext(0x097001ed)]
        HRESULT FileValidation([out, retval] MsoFileValidationMode* prop);
        [id(0x000001ed), propput, helpcontext(0x097001ed)]
        HRESULT FileValidation([in] MsoFileValidationMode prop);
        [id(0x000001ee), propget, helpcontext(0x097001ee)]
        HRESULT ChartDataPointTrack([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ee), propput, helpcontext(0x097001ee)]
        HRESULT ChartDataPointTrack([in] VARIANT_BOOL prop);
        [id(0x000001ef), propget, helpcontext(0x097001ef)]
        HRESULT ShowAnimation([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ef), propput, helpcontext(0x097001ef)]
        HRESULT ShowAnimation([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(000209B9-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009b9),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _Global : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09b903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09b903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09b903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09b90000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09b90001)]
        HRESULT Documents([out, retval] Documents** prop);
        [id(0x00000002), propget, helpcontext(0x09b90002)]
        HRESULT Windows([out, retval] Windows** prop);
        [id(0x00000003), propget, helpcontext(0x09b90003)]
        HRESULT ActiveDocument([out, retval] _Document** prop);
        [id(0x00000004), propget, helpcontext(0x09b90004)]
        HRESULT ActiveWindow([out, retval] Window** prop);
        [id(0x00000005), propget, helpcontext(0x09b90005)]
        HRESULT Selection([out, retval] Selection** prop);
        [id(0x00000006), propget, helpcontext(0x09b90006)]
        HRESULT WordBasic([out, retval] IDispatch** prop);
        [id(0x0000001b), propget, helpcontext(0x09b9001b)]
        HRESULT PrintPreview([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001b), propput, helpcontext(0x09b9001b)]
        HRESULT PrintPreview([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09b90007)]
        HRESULT RecentFiles([out, retval] RecentFiles** prop);
        [id(0x00000008), propget, helpcontext(0x09b90008)]
        HRESULT NormalTemplate([out, retval] Template** prop);
        [id(0x00000009), propget, helpcontext(0x09b90009)]
        HRESULT System([out, retval] System** prop);
        [id(0x0000000a), propget, helpcontext(0x09b9000a)]
        HRESULT AutoCorrect([out, retval] AutoCorrect** prop);
        [id(0x0000000b), propget, helpcontext(0x09b9000b)]
        HRESULT FontNames([out, retval] FontNames** prop);
        [id(0x0000000c), propget, helpcontext(0x09b9000c)]
        HRESULT LandscapeFontNames([out, retval] FontNames** prop);
        [id(0x0000000d), propget, helpcontext(0x09b9000d)]
        HRESULT PortraitFontNames([out, retval] FontNames** prop);
        [id(0x0000000e), propget, helpcontext(0x09b9000e)]
        HRESULT Languages([out, retval] Languages** prop);
        [id(0x0000000f), propget, hidden, helpcontext(0x09b9000f)]
        HRESULT Assistant([out, retval] Assistant** prop);
        [id(0x00000011), propget, helpcontext(0x09b90011)]
        HRESULT FileConverters([out, retval] FileConverters** prop);
        [id(0x00000013), propget, helpcontext(0x09b90013)]
        HRESULT Dialogs([out, retval] Dialogs** prop);
        [id(0x00000014), propget, helpcontext(0x09b90014)]
        HRESULT CaptionLabels([out, retval] CaptionLabels** prop);
        [id(0x00000015), propget, helpcontext(0x09b90015)]
        HRESULT AutoCaptions([out, retval] AutoCaptions** prop);
        [id(0x00000016), propget, helpcontext(0x09b90016)]
        HRESULT AddIns([out, retval] AddIns** prop);
        [id(0x0000001c), propget, helpcontext(0x09b9001c)]
        HRESULT Tasks([out, retval] Tasks** prop);
        [id(0x00000037), propget, helpcontext(0x09b90037)]
        HRESULT MacroContainer([out, retval] IDispatch** prop);
        [id(0x00000039), propget, helpcontext(0x09b90039)]
        HRESULT CommandBars([out, retval] CommandBars** prop);
        [id(0x0000003b), propget, helpcontext(0x09b9003b)]
        HRESULT SynonymInfo(
                        [in] BSTR Word, 
                        [in, optional] VARIANT* LanguageID, 
                        [out, retval] SynonymInfo** prop);
        [id(0x0000003d), propget, helpcontext(0x09b9003d)]
        HRESULT VBE([out, retval] VBE** prop);
        [id(0x00000041), propget, helpcontext(0x09b90041)]
        HRESULT ListGalleries([out, retval] ListGalleries** prop);
        [id(0x00000042), propget, helpcontext(0x09b90042)]
        HRESULT ActivePrinter([out, retval] BSTR* prop);
        [id(0x00000042), propput, helpcontext(0x09b90042)]
        HRESULT ActivePrinter([in] BSTR prop);
        [id(0x00000043), propget, helpcontext(0x09b90043)]
        HRESULT Templates([out, retval] Templates** prop);
        [id(0x00000044), propget, helpcontext(0x09b90044)]
        HRESULT CustomizationContext([out, retval] IDispatch** prop);
        [id(0x00000044), propput, helpcontext(0x09b90044)]
        HRESULT CustomizationContext([in] IDispatch* prop);
        [id(0x00000045), propget, helpcontext(0x09b90045)]
        HRESULT KeyBindings([out, retval] KeyBindings** prop);
        [id(0x00000046), propget, helpcontext(0x09b90046)]
        HRESULT KeysBoundTo(
                        [in] WdKeyCategory KeyCategory, 
                        [in] BSTR Command, 
                        [in, optional] VARIANT* CommandParameter, 
                        [out, retval] KeysBoundTo** prop);
        [id(0x00000047), propget, helpcontext(0x09b90047)]
        HRESULT FindKey(
                        [in] long KeyCode, 
                        [in, optional] VARIANT* KeyCode2, 
                        [out, retval] KeyBinding** prop);
        [id(0x0000005d), propget, helpcontext(0x09b9005d)]
        HRESULT Options([out, retval] Options** prop);
        [id(0x0000005f), propget, helpcontext(0x09b9005f)]
        HRESULT CustomDictionaries([out, retval] Dictionaries** prop);
        [id(0x00000061), propput, helpcontext(0x09b90061)]
        HRESULT StatusBar([in] BSTR rhs);
        [id(0x00000068), propget, helpcontext(0x09b90068)]
        HRESULT ShowVisualBasicEditor([out, retval] VARIANT_BOOL* prop);
        [id(0x00000068), propput, helpcontext(0x09b90068)]
        HRESULT ShowVisualBasicEditor([in] VARIANT_BOOL prop);
        [id(0x0000006d), propget, helpcontext(0x09b9006d)]
        HRESULT IsObjectValid(
                        [in] IDispatch* Object, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000006e), propget, helpcontext(0x09b9006e)]
        HRESULT HangulHanjaDictionaries([out, retval] HangulHanjaConversionDictionaries** prop);
        [id(0x00000131), helpcontext(0x09b90131)]
        HRESULT Repeat(
                        [in, optional] VARIANT* Times, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000136), helpcontext(0x09b90136)]
        HRESULT DDEExecute(
                        [in] long Channel, 
                        [in] BSTR Command);
        [id(0x00000137), helpcontext(0x09b90137)]
        HRESULT DDEInitiate(
                        [in] BSTR App, 
                        [in] BSTR Topic, 
                        [out, retval] long* prop);
        [id(0x00000138), helpcontext(0x09b90138)]
        HRESULT DDEPoke(
                        [in] long Channel, 
                        [in] BSTR Item, 
                        [in] BSTR Data);
        [id(0x00000139), helpcontext(0x09b90139)]
        HRESULT DDERequest(
                        [in] long Channel, 
                        [in] BSTR Item, 
                        [out, retval] BSTR* prop);
        [id(0x0000013a), helpcontext(0x09b9013a)]
        HRESULT DDETerminate([in] long Channel);
        [id(0x0000013b), helpcontext(0x09b9013b)]
        HRESULT DDETerminateAll();
        [id(0x0000013c), helpcontext(0x09b9013c)]
        HRESULT BuildKeyCode(
                        [in] WdKey Arg1, 
                        [in, optional] VARIANT* Arg2, 
                        [in, optional] VARIANT* Arg3, 
                        [in, optional] VARIANT* Arg4, 
                        [out, retval] long* prop);
        [id(0x0000013d), helpcontext(0x09b9013d)]
        HRESULT KeyString(
                        [in] long KeyCode, 
                        [in, optional] VARIANT* KeyCode2, 
                        [out, retval] BSTR* prop);
        [id(0x00000144), helpcontext(0x09b90144)]
        HRESULT CheckSpelling(
                        [in] BSTR Word, 
                        [in, optional] VARIANT* CustomDictionary, 
                        [in, optional] VARIANT* IgnoreUppercase, 
                        [in, optional] VARIANT* MainDictionary, 
                        [in, optional] VARIANT* CustomDictionary2, 
                        [in, optional] VARIANT* CustomDictionary3, 
                        [in, optional] VARIANT* CustomDictionary4, 
                        [in, optional] VARIANT* CustomDictionary5, 
                        [in, optional] VARIANT* CustomDictionary6, 
                        [in, optional] VARIANT* CustomDictionary7, 
                        [in, optional] VARIANT* CustomDictionary8, 
                        [in, optional] VARIANT* CustomDictionary9, 
                        [in, optional] VARIANT* CustomDictionary10, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000147), helpcontext(0x09b90147)]
        HRESULT GetSpellingSuggestions(
                        [in] BSTR Word, 
                        [in, optional] VARIANT* CustomDictionary, 
                        [in, optional] VARIANT* IgnoreUppercase, 
                        [in, optional] VARIANT* MainDictionary, 
                        [in, optional] VARIANT* SuggestionMode, 
                        [in, optional] VARIANT* CustomDictionary2, 
                        [in, optional] VARIANT* CustomDictionary3, 
                        [in, optional] VARIANT* CustomDictionary4, 
                        [in, optional] VARIANT* CustomDictionary5, 
                        [in, optional] VARIANT* CustomDictionary6, 
                        [in, optional] VARIANT* CustomDictionary7, 
                        [in, optional] VARIANT* CustomDictionary8, 
                        [in, optional] VARIANT* CustomDictionary9, 
                        [in, optional] VARIANT* CustomDictionary10, 
                        [out, retval] SpellingSuggestions** prop);
        [id(0x00000149), helpcontext(0x09b90149)]
        HRESULT Help([in] VARIANT* HelpType);
        [id(0x00000159), helpcontext(0x09b90159)]
        HRESULT NewWindow([out, retval] Window** prop);
        [id(0x00000162), helpcontext(0x09b90162)]
        HRESULT CleanString(
                        [in] BSTR String, 
                        [out, retval] BSTR* prop);
        [id(0x00000163), helpcontext(0x09b90163)]
        HRESULT ChangeFileOpenDirectory([in] BSTR Path);
        [id(0x00000172), helpcontext(0x09b90172)]
        HRESULT InchesToPoints(
                        [in] single Inches, 
                        [out, retval] single* prop);
        [id(0x00000173), helpcontext(0x09b90173)]
        HRESULT CentimetersToPoints(
                        [in] single Centimeters, 
                        [out, retval] single* prop);
        [id(0x00000174), helpcontext(0x09b90174)]
        HRESULT MillimetersToPoints(
                        [in] single Millimeters, 
                        [out, retval] single* prop);
        [id(0x00000175), helpcontext(0x09b90175)]
        HRESULT PicasToPoints(
                        [in] single Picas, 
                        [out, retval] single* prop);
        [id(0x00000176), helpcontext(0x09b90176)]
        HRESULT LinesToPoints(
                        [in] single Lines, 
                        [out, retval] single* prop);
        [id(0x0000017c), helpcontext(0x09b9017c)]
        HRESULT PointsToInches(
                        [in] single Points, 
                        [out, retval] single* prop);
        [id(0x0000017d), helpcontext(0x09b9017d)]
        HRESULT PointsToCentimeters(
                        [in] single Points, 
                        [out, retval] single* prop);
        [id(0x0000017e), helpcontext(0x09b9017e)]
        HRESULT PointsToMillimeters(
                        [in] single Points, 
                        [out, retval] single* prop);
        [id(0x0000017f), helpcontext(0x09b9017f)]
        HRESULT PointsToPicas(
                        [in] single Points, 
                        [out, retval] single* prop);
        [id(0x00000180), helpcontext(0x09b90180)]
        HRESULT PointsToLines(
                        [in] single Points, 
                        [out, retval] single* prop);
        [id(0x00000181), helpcontext(0x09b90181)]
        HRESULT PointsToPixels(
                        [in] single Points, 
                        [in, optional] VARIANT* fVertical, 
                        [out, retval] single* prop);
        [id(0x00000182), helpcontext(0x09b90182)]
        HRESULT PixelsToPoints(
                        [in] single Pixels, 
                        [in, optional] VARIANT* fVertical, 
                        [out, retval] single* prop);
        [id(0x0000006f), propget, helpcontext(0x09b9006f)]
        HRESULT LanguageSettings([out, retval] LanguageSettings** prop);
        [id(0x00000070), propget, hidden, helpcontext(0x09b90070)]
        HRESULT AnswerWizard([out, retval] AnswerWizard** prop);
        [id(0x00000071), propget, helpcontext(0x09b90071)]
        HRESULT AutoCorrectEmail([out, retval] AutoCorrect** prop);
        [id(0x00000072), propget, helpcontext(0x09b90072)]
        HRESULT ProtectedViewWindows([out, retval] ProtectedViewWindows** prop);
        [id(0x00000073), propget, helpcontext(0x09b90073)]
        HRESULT ActiveProtectedViewWindow([out, retval] ProtectedViewWindow** prop);
        [id(0x00000074), propget, helpcontext(0x09b90074)]
        HRESULT IsSandboxed([out, retval] VARIANT_BOOL* prop);
    };

    [
      odl,
      uuid(0002096F-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000096f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FontNames : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x096ffffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x096f0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x096f03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096f03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096f03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x096f0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(0002096E-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000096e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Languages : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x096efffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x096e0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x096e03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x096e0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Language** prop);
    };

    [
      odl,
      uuid(0002096D-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000096d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Language : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x096d03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000a), propget, helpcontext(0x096d000a)]
        HRESULT ID([out, retval] WdLanguageID* prop);
        [id(00000000), propget, helpcontext(0x096d0000)]
        HRESULT NameLocal([out, retval] BSTR* prop);
        [id(0x0000000c), propget, helpcontext(0x096d000c)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x0000000d), propget, helpcontext(0x096d000d)]
        HRESULT ActiveGrammarDictionary([out, retval] Dictionary** prop);
        [id(0x0000000e), propget, helpcontext(0x096d000e)]
        HRESULT ActiveHyphenationDictionary([out, retval] Dictionary** prop);
        [id(0x0000000f), propget, helpcontext(0x096d000f)]
        HRESULT ActiveSpellingDictionary([out, retval] Dictionary** prop);
        [id(0x00000010), propget, helpcontext(0x096d0010)]
        HRESULT ActiveThesaurusDictionary([out, retval] Dictionary** prop);
        [id(0x00000011), propget, helpcontext(0x096d0011)]
        HRESULT DefaultWritingStyle([out, retval] BSTR* prop);
        [id(0x00000011), propput, helpcontext(0x096d0011)]
        HRESULT DefaultWritingStyle([in] BSTR prop);
        [id(0x00000012), propget, helpcontext(0x096d0012)]
        HRESULT WritingStyleList([out, retval] VARIANT* prop);
        [id(0x00000013), propget, helpcontext(0x096d0013)]
        HRESULT SpellingDictionaryType([out, retval] WdDictionaryType* prop);
        [id(0x00000013), propput, helpcontext(0x096d0013)]
        HRESULT SpellingDictionaryType([in] WdDictionaryType prop);
    };

    [
      odl,
      uuid(0002096C-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000096c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Documents : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x096cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x096c0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x096c03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x096c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] _Document** prop);
        [id(0x00000451), helpcontext(0x096c0451)]
        HRESULT Close(
                        [in, optional] VARIANT* SaveChanges, 
                        [in, optional] VARIANT* OriginalFormat, 
                        [in, optional] VARIANT* RouteDocument);
        [id(0x0000000b), hidden, helpcontext(0x096c000b)]
        HRESULT AddOld(
                        [in, optional] VARIANT* Template, 
                        [in, optional] VARIANT* NewTemplate, 
                        [out, retval] _Document** prop);
        [id(0x0000000c), hidden, helpcontext(0x096c000c)]
        HRESULT OpenOld(
                        [in] VARIANT* FileName, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* Format, 
                        [out, retval] _Document** prop);
        [id(0x0000000d), helpcontext(0x096c000d)]
        HRESULT Save(
                        [in, optional] VARIANT* NoPrompt, 
                        [in, optional] VARIANT* OriginalFormat);
        [id(0x0000000e), helpcontext(0x096c000e)]
        HRESULT Add(
                        [in, optional] VARIANT* Template, 
                        [in, optional] VARIANT* NewTemplate, 
                        [in, optional] VARIANT* DocumentType, 
                        [in, optional] VARIANT* Visible, 
                        [out, retval] _Document** prop);
        [id(0x0000000f), hidden, helpcontext(0x096c000f)]
        HRESULT Open2000(
                        [in] VARIANT* FileName, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 

                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* Encoding, 
                        [in, optional] VARIANT* Visible, 
                        [out, retval] _Document** prop);
        [id(0x00000010), helpcontext(0x096c0010)]
        HRESULT CheckOut([in] BSTR FileName);
        [id(0x00000011), helpcontext(0x096c0011)]
        HRESULT CanCheckOut(
                        [in] BSTR FileName, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000012), hidden, helpcontext(0x096c0012)]
        HRESULT Open2002(
                        [in] VARIANT* FileName, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* Encoding, 
                        [in, optional] VARIANT* Visible, 
                        [in, optional] VARIANT* OpenAndRepair, 
                        [in, optional] VARIANT* DocumentDirection, 
                        [in, optional] VARIANT* NoEncodingDialog, 
                        [out, retval] _Document** prop);
        [id(0x00000013), helpcontext(0x096c0013)]
        HRESULT Open(
                        [in] VARIANT* FileName, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* Encoding, 
                        [in, optional] VARIANT* Visible, 
                        [in, optional] VARIANT* OpenAndRepair, 
                        [in, optional] VARIANT* DocumentDirection, 
                        [in, optional] VARIANT* NoEncodingDialog, 
                        [in, optional] VARIANT* XMLTransform, 
                        [out, retval] _Document** prop);
        [id(0x00000014), helpcontext(0x096c0014)]
        HRESULT OpenNoRepairDialog(
                        [in] VARIANT* FileName, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* Encoding, 
                        [in, optional] VARIANT* Visible, 
                        [in, optional] VARIANT* OpenAndRepair, 
                        [in, optional] VARIANT* DocumentDirection, 
                        [in, optional] VARIANT* NoEncodingDialog, 
                        [in, optional] VARIANT* XMLTransform, 
                        [out, retval] _Document** prop);
        [id(0x00000015), helpcontext(0x096c0015)]
        HRESULT AddBlogDocument(
                        [in] BSTR ProviderID, 
                        [in] BSTR PostURL, 
                        [in] BSTR BlogName, 
                        [in, optional, defaultvalue("")] BSTR PostID, 
                        [out, retval] _Document** prop);
    };

    [
      odl,
      uuid(0002096B-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000096b),
      hidden,
      dual,
      oleautomation
    ]
    interface _Document : IDispatch {
        [id(00000000), propget, helpcontext(0x096b0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x096b0001)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003e8), propget, helpcontext(0x096b03e8)]
        HRESULT BuiltInDocumentProperties([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x096b0002)]
        HRESULT CustomDocumentProperties([out, retval] IDispatch** prop);
        [id(0x00000003), propget, helpcontext(0x096b0003)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000004), propget, helpcontext(0x096b0004)]
        HRESULT Bookmarks([out, retval] Bookmarks** prop);
        [id(0x00000006), propget, helpcontext(0x096b0006)]
        HRESULT Tables([out, retval] Tables** prop);
        [id(0x00000007), propget, helpcontext(0x096b0007)]
        HRESULT Footnotes([out, retval] Footnotes** prop);
        [id(0x00000008), propget, helpcontext(0x096b0008)]
        HRESULT Endnotes([out, retval] Endnotes** prop);
        [id(0x00000009), propget, helpcontext(0x096b0009)]
        HRESULT Comments([out, retval] Comments** prop);
        [id(0x0000000a), propget, helpcontext(0x096b000a)]
        HRESULT Type([out, retval] WdDocumentType* prop);
        [id(0x0000000b), propget, helpcontext(0x096b000b)]
        HRESULT AutoHyphenation([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000b), propput, helpcontext(0x096b000b)]
        HRESULT AutoHyphenation([in] VARIANT_BOOL prop);
        [id(0x0000000c), propget, helpcontext(0x096b000c)]
        HRESULT HyphenateCaps([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propput, helpcontext(0x096b000c)]
        HRESULT HyphenateCaps([in] VARIANT_BOOL prop);
        [id(0x0000000d), propget, helpcontext(0x096b000d)]
        HRESULT HyphenationZone([out, retval] long* prop);
        [id(0x0000000d), propput, helpcontext(0x096b000d)]
        HRESULT HyphenationZone([in] long prop);
        [id(0x0000000e), propget, helpcontext(0x096b000e)]
        HRESULT ConsecutiveHyphensLimit([out, retval] long* prop);
        [id(0x0000000e), propput, helpcontext(0x096b000e)]
        HRESULT ConsecutiveHyphensLimit([in] long prop);
        [id(0x0000000f), propget, helpcontext(0x096b000f)]
        HRESULT Sections([out, retval] Sections** prop);
        [id(0x00000010), propget, helpcontext(0x096b0010)]
        HRESULT Paragraphs([out, retval] Paragraphs** prop);
        [id(0x00000011), propget, helpcontext(0x096b0011)]
        HRESULT Words([out, retval] Words** prop);
        [id(0x00000012), propget, helpcontext(0x096b0012)]
        HRESULT Sentences([out, retval] Sentences** prop);
        [id(0x00000013), propget, helpcontext(0x096b0013)]
        HRESULT Characters([out, retval] Characters** prop);
        [id(0x00000014), propget, helpcontext(0x096b0014)]
        HRESULT Fields([out, retval] Fields** prop);
        [id(0x00000015), propget, helpcontext(0x096b0015)]
        HRESULT FormFields([out, retval] FormFields** prop);
        [id(0x00000016), propget, helpcontext(0x096b0016)]
        HRESULT Styles([out, retval] Styles** prop);
        [id(0x00000017), propget, helpcontext(0x096b0017)]
        HRESULT Frames([out, retval] Frames** prop);
        [id(0x00000019), propget, helpcontext(0x096b0019)]
        HRESULT TablesOfFigures([out, retval] TablesOfFigures** prop);
        [id(0x0000001a), propget, helpcontext(0x096b001a)]
        HRESULT Variables([out, retval] Variables** prop);
        [id(0x0000001b), propget, helpcontext(0x096b001b)]
        HRESULT MailMerge([out, retval] MailMerge** prop);
        [id(0x0000001c), propget, helpcontext(0x096b001c)]
        HRESULT Envelope([out, retval] Envelope** prop);
        [id(0x0000001d), propget, helpcontext(0x096b001d)]
        HRESULT FullName([out, retval] BSTR* prop);
        [id(0x0000001e), propget, helpcontext(0x096b001e)]
        HRESULT Revisions([out, retval] Revisions** prop);
        [id(0x0000001f), propget, helpcontext(0x096b001f)]
        HRESULT TablesOfContents([out, retval] TablesOfContents** prop);
        [id(0x00000020), propget, helpcontext(0x096b0020)]
        HRESULT TablesOfAuthorities([out, retval] TablesOfAuthorities** prop);
        [id(0x0000044d), propget, helpcontext(0x096b044d)]
        HRESULT PageSetup([out, retval] PageSetup** prop);
        [id(0x0000044d), propput, helpcontext(0x096b044d)]
        HRESULT PageSetup([in] PageSetup* prop);
        [id(0x00000022), propget, helpcontext(0x096b0022)]
        HRESULT Windows([out, retval] Windows** prop);
        [id(0x00000023), propget, hidden, helpcontext(0x096b0023)]
        HRESULT HasRoutingSlip([out, retval] VARIANT_BOOL* prop);
        [id(0x00000023), propput, hidden, helpcontext(0x096b0023)]
        HRESULT HasRoutingSlip([in] VARIANT_BOOL prop);
        [id(0x00000024), propget, hidden, helpcontext(0x096b0024)]
        HRESULT RoutingSlip([out, retval] RoutingSlip** prop);
        [id(0x00000025), propget, hidden, helpcontext(0x096b0025)]
        HRESULT Routed([out, retval] VARIANT_BOOL* prop);
        [id(0x00000026), propget, helpcontext(0x096b0026)]
        HRESULT TablesOfAuthoritiesCategories([out, retval] TablesOfAuthoritiesCategories** prop);
        [id(0x00000027), propget, helpcontext(0x096b0027)]
        HRESULT Indexes([out, retval] Indexes** prop);
        [id(0x00000028), propget, helpcontext(0x096b0028)]
        HRESULT Saved([out, retval] VARIANT_BOOL* prop);
        [id(0x00000028), propput, helpcontext(0x096b0028)]
        HRESULT Saved([in] VARIANT_BOOL prop);
        [id(0x00000029), propget, helpcontext(0x096b0029)]
        HRESULT Content([out, retval] Range** prop);
        [id(0x0000002a), propget, helpcontext(0x096b002a)]
        HRESULT ActiveWindow([out, retval] Window** prop);
        [id(0x0000002b), propget, helpcontext(0x096b002b)]
        HRESULT Kind([out, retval] WdDocumentKind* prop);
        [id(0x0000002b), propput, helpcontext(0x096b002b)]
        HRESULT Kind([in] WdDocumentKind prop);
        [id(0x0000002c), propget, helpcontext(0x096b002c)]
        HRESULT ReadOnly([out, retval] VARIANT_BOOL* prop);
        [id(0x0000002d), propget, helpcontext(0x096b002d)]
        HRESULT Subdocuments([out, retval] Subdocuments** prop);
        [id(0x0000002e), propget, helpcontext(0x096b002e)]
        HRESULT IsMasterDocument([out, retval] VARIANT_BOOL* prop);
        [id(0x00000030), propget, helpcontext(0x096b0030)]
        HRESULT DefaultTabStop([out, retval] single* prop);
        [id(0x00000030), propput, helpcontext(0x096b0030)]
        HRESULT DefaultTabStop([in] single prop);
        [id(0x00000032), propget, helpcontext(0x096b0032)]
        HRESULT EmbedTrueTypeFonts([out, retval] VARIANT_BOOL* prop);
        [id(0x00000032), propput, helpcontext(0x096b0032)]
        HRESULT EmbedTrueTypeFonts([in] VARIANT_BOOL prop);
        [id(0x00000033), propget, helpcontext(0x096b0033)]
        HRESULT SaveFormsData([out, retval] VARIANT_BOOL* prop);
        [id(0x00000033), propput, helpcontext(0x096b0033)]
        HRESULT SaveFormsData([in] VARIANT_BOOL prop);
        [id(0x00000034), propget, helpcontext(0x096b0034)]
        HRESULT ReadOnlyRecommended([out, retval] VARIANT_BOOL* prop);
        [id(0x00000034), propput, helpcontext(0x096b0034)]
        HRESULT ReadOnlyRecommended([in] VARIANT_BOOL prop);
        [id(0x00000035), propget, helpcontext(0x096b0035)]
        HRESULT SaveSubsetFonts([out, retval] VARIANT_BOOL* prop);
        [id(0x00000035), propput, helpcontext(0x096b0035)]
        HRESULT SaveSubsetFonts([in] VARIANT_BOOL prop);
        [id(0x00000037), propget, helpcontext(0x096b0037)]
        HRESULT Compatibility(
                        [in] WdCompatibility Type, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000037), propput, helpcontext(0x096b0037)]
        HRESULT Compatibility(
                        [in] WdCompatibility Type, 
                        [in] VARIANT_BOOL prop);
        [id(0x00000038), propget, helpcontext(0x096b0038)]
        HRESULT StoryRanges([out, retval] StoryRanges** prop);
        [id(0x00000039), propget, helpcontext(0x096b0039)]
        HRESULT CommandBars([out, retval] CommandBars** prop);
        [id(0x0000003a), propget, helpcontext(0x096b003a)]
        HRESULT IsSubdocument([out, retval] VARIANT_BOOL* prop);
        [id(0x0000003b), propget, helpcontext(0x096b003b)]
        HRESULT SaveFormat([out, retval] long* prop);
        [id(0x0000003c), propget, helpcontext(0x096b003c)]
        HRESULT ProtectionType([out, retval] WdProtectionType* prop);
        [id(0x0000003d), propget, helpcontext(0x096b003d)]
        HRESULT Hyperlinks([out, retval] Hyperlinks** prop);
        [id(0x0000003e), propget, helpcontext(0x096b003e)]
        HRESULT Shapes([out, retval] Shapes** prop);
        [id(0x0000003f), propget, helpcontext(0x096b003f)]
        HRESULT ListTemplates([out, retval] ListTemplates** prop);
        [id(0x00000040), propget, helpcontext(0x096b0040)]
        HRESULT Lists([out, retval] Lists** prop);
        [id(0x00000042), propget, helpcontext(0x096b0042)]
        HRESULT UpdateStylesOnOpen([out, retval] VARIANT_BOOL* prop);
        [id(0x00000042), propput, helpcontext(0x096b0042)]
        HRESULT UpdateStylesOnOpen([in] VARIANT_BOOL prop);
        [id(0x00000043), propget, helpcontext(0x096b0043)]
        HRESULT AttachedTemplate([out, retval] VARIANT* prop);
        [id(0x00000043), propput, helpcontext(0x096b0043)]
        HRESULT AttachedTemplate([in] VARIANT* prop);
        [id(0x00000044), propget, helpcontext(0x096b0044)]
        HRESULT InlineShapes([out, retval] InlineShapes** prop);
        [id(0x00000045), propget, helpcontext(0x096b0045)]
        HRESULT Background([out, retval] Shape** prop);
        [id(0x00000045), propput, helpcontext(0x096b0045)]
        HRESULT Background([in] Shape* prop);
        [id(0x00000046), propget, helpcontext(0x096b0046)]
        HRESULT GrammarChecked([out, retval] VARIANT_BOOL* prop);
        [id(0x00000046), propput, helpcontext(0x096b0046)]
        HRESULT GrammarChecked([in] VARIANT_BOOL prop);
        [id(0x00000047), propget, helpcontext(0x096b0047)]
        HRESULT SpellingChecked([out, retval] VARIANT_BOOL* prop);
        [id(0x00000047), propput, helpcontext(0x096b0047)]
        HRESULT SpellingChecked([in] VARIANT_BOOL prop);
        [id(0x00000048), propget, helpcontext(0x096b0048)]
        HRESULT ShowGrammaticalErrors([out, retval] VARIANT_BOOL* prop);
        [id(0x00000048), propput, helpcontext(0x096b0048)]
        HRESULT ShowGrammaticalErrors([in] VARIANT_BOOL prop);
        [id(0x00000049), propget, helpcontext(0x096b0049)]
        HRESULT ShowSpellingErrors([out, retval] VARIANT_BOOL* prop);
        [id(0x00000049), propput, helpcontext(0x096b0049)]
        HRESULT ShowSpellingErrors([in] VARIANT_BOOL prop);
        [id(0x0000004b), propget, hidden, helpcontext(0x096b004b)]
        HRESULT Versions([out, retval] Versions** prop);
        [id(0x0000004c), propget, hidden, helpcontext(0x096b004c)]
        HRESULT ShowSummary([out, retval] VARIANT_BOOL* prop);
        [id(0x0000004c), propput, hidden, helpcontext(0x096b004c)]
        HRESULT ShowSummary([in] VARIANT_BOOL prop);
        [id(0x0000004d), propget, hidden, helpcontext(0x096b004d)]
        HRESULT SummaryViewMode([out, retval] WdSummaryMode* prop);
        [id(0x0000004d), propput, hidden, helpcontext(0x096b004d)]
        HRESULT SummaryViewMode([in] WdSummaryMode prop);
        [id(0x0000004e), propget, hidden, helpcontext(0x096b004e)]
        HRESULT SummaryLength([out, retval] long* prop);
        [id(0x0000004e), propput, hidden, helpcontext(0x096b004e)]
        HRESULT SummaryLength([in] long prop);
        [id(0x0000004f), propget, hidden, helpcontext(0x096b004f)]
        HRESULT PrintFractionalWidths([out, retval] VARIANT_BOOL* prop);
        [id(0x0000004f), propput, hidden, helpcontext(0x096b004f)]
        HRESULT PrintFractionalWidths([in] VARIANT_BOOL prop);
        [id(0x00000050), propget, helpcontext(0x096b0050)]
        HRESULT PrintPostScriptOverText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000050), propput, helpcontext(0x096b0050)]
        HRESULT PrintPostScriptOverText([in] VARIANT_BOOL prop);
        [id(0x00000052), propget, helpcontext(0x096b0052)]
        HRESULT Container([out, retval] IDispatch** prop);
        [id(0x00000053), propget, helpcontext(0x096b0053)]
        HRESULT PrintFormsData([out, retval] VARIANT_BOOL* prop);
        [id(0x00000053), propput, helpcontext(0x096b0053)]
        HRESULT PrintFormsData([in] VARIANT_BOOL prop);
        [id(0x00000054), propget, helpcontext(0x096b0054)]
        HRESULT ListParagraphs([out, retval] ListParagraphs** prop);
        [id(0x00000055), propput, helpcontext(0x096b0055)]
        HRESULT Password([in] BSTR rhs);
        [id(0x00000056), propput, helpcontext(0x096b0056)]
        HRESULT WritePassword([in] BSTR rhs);
        [id(0x00000057), propget, helpcontext(0x096b0057)]
        HRESULT HasPassword([out, retval] VARIANT_BOOL* prop);
        [id(0x00000058), propget, helpcontext(0x096b0058)]
        HRESULT WriteReserved([out, retval] VARIANT_BOOL* prop);
        [id(0x0000005a), propget, helpcontext(0x096b005a)]
        HRESULT ActiveWritingStyle(
                        [in] VARIANT* LanguageID, 
                        [out, retval] BSTR* prop);
        [id(0x0000005a), propput, helpcontext(0x096b005a)]
        HRESULT ActiveWritingStyle(
                        [in] VARIANT* LanguageID, 
                        [in] BSTR prop);
        [id(0x0000005c), propget, helpcontext(0x096b005c)]
        HRESULT UserControl([out, retval] VARIANT_BOOL* prop);
        [id(0x0000005c), propput, helpcontext(0x096b005c)]
        HRESULT UserControl([in] VARIANT_BOOL prop);
        [id(0x0000005d), propget, hidden, helpcontext(0x096b005d)]
        HRESULT HasMailer([out, retval] VARIANT_BOOL* prop);
        [id(0x0000005d), propput, hidden, helpcontext(0x096b005d)]
        HRESULT HasMailer([in] VARIANT_BOOL prop);
        [id(0x0000005e), propget, hidden, helpcontext(0x096b005e)]
        HRESULT Mailer([out, retval] Mailer** prop);
        [id(0x00000060), propget, helpcontext(0x096b0060)]
        HRESULT ReadabilityStatistics([out, retval] ReadabilityStatistics** prop);
        [id(0x00000061), propget, helpcontext(0x096b0061)]
        HRESULT GrammaticalErrors([out, retval] ProofreadingErrors** prop);
        [id(0x00000062), propget, helpcontext(0x096b0062)]
        HRESULT SpellingErrors([out, retval] ProofreadingErrors** prop);
        [id(0x00000063), propget, helpcontext(0x096b0063)]
        HRESULT VBProject([out, retval] VBProject** prop);
        [id(0x00000064), propget, helpcontext(0x096b0064)]
        HRESULT FormsDesign([out, retval] VARIANT_BOOL* prop);
        [id(0x80010000), propget, helpcontext(0x096b0000)]
        HRESULT _CodeName([out, retval] BSTR* prop);
        [id(0x80010000), propput, helpcontext(0x096b0000)]
        HRESULT _CodeName([in] BSTR prop);
        [id(0x00000106), propget, helpcontext(0x096b0106)]
        HRESULT CodeName([out, retval] BSTR* prop);
        [id(0x0000012c), propget, helpcontext(0x096b012c)]
        HRESULT SnapToGrid([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012c), propput, helpcontext(0x096b012c)]
        HRESULT SnapToGrid([in] VARIANT_BOOL prop);
        [id(0x0000012d), propget, helpcontext(0x096b012d)]
        HRESULT SnapToShapes([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012d), propput, helpcontext(0x096b012d)]
        HRESULT SnapToShapes([in] VARIANT_BOOL prop);
        [id(0x0000012e), propget, helpcontext(0x096b012e)]
        HRESULT GridDistanceHorizontal([out, retval] single* prop);
        [id(0x0000012e), propput, helpcontext(0x096b012e)]
        HRESULT GridDistanceHorizontal([in] single prop);
        [id(0x0000012f), propget, helpcontext(0x096b012f)]
        HRESULT GridDistanceVertical([out, retval] single* prop);
        [id(0x0000012f), propput, helpcontext(0x096b012f)]
        HRESULT GridDistanceVertical([in] single prop);
        [id(0x00000130), propget, helpcontext(0x096b0130)]
        HRESULT GridOriginHorizontal([out, retval] single* prop);
        [id(0x00000130), propput, helpcontext(0x096b0130)]
        HRESULT GridOriginHorizontal([in] single prop);
        [id(0x00000131), propget, helpcontext(0x096b0131)]
        HRESULT GridOriginVertical([out, retval] single* prop);
        [id(0x00000131), propput, helpcontext(0x096b0131)]
        HRESULT GridOriginVertical([in] single prop);
        [id(0x00000132), propget, helpcontext(0x096b0132)]
        HRESULT GridSpaceBetweenHorizontalLines([out, retval] long* prop);
        [id(0x00000132), propput, helpcontext(0x096b0132)]
        HRESULT GridSpaceBetweenHorizontalLines([in] long prop);
        [id(0x00000133), propget, helpcontext(0x096b0133)]
        HRESULT GridSpaceBetweenVerticalLines([out, retval] long* prop);
        [id(0x00000133), propput, helpcontext(0x096b0133)]
        HRESULT GridSpaceBetweenVerticalLines([in] long prop);
        [id(0x00000134), propget, helpcontext(0x096b0134)]
        HRESULT GridOriginFromMargin([out, retval] VARIANT_BOOL* prop);
        [id(0x00000134), propput, helpcontext(0x096b0134)]
        HRESULT GridOriginFromMargin([in] VARIANT_BOOL prop);
        [id(0x00000135), propget, helpcontext(0x096b0135)]
        HRESULT KerningByAlgorithm([out, retval] VARIANT_BOOL* prop);
        [id(0x00000135), propput, helpcontext(0x096b0135)]
        HRESULT KerningByAlgorithm([in] VARIANT_BOOL prop);
        [id(0x00000136), propget, helpcontext(0x096b0136)]
        HRESULT JustificationMode([out, retval] WdJustificationMode* prop);
        [id(0x00000136), propput, helpcontext(0x096b0136)]
        HRESULT JustificationMode([in] WdJustificationMode prop);
        [id(0x00000137), propget, helpcontext(0x096b0137)]
        HRESULT FarEastLineBreakLevel([out, retval] WdFarEastLineBreakLevel* prop);
        [id(0x00000137), propput, helpcontext(0x096b0137)]
        HRESULT FarEastLineBreakLevel([in] WdFarEastLineBreakLevel prop);
        [id(0x00000138), propget, helpcontext(0x096b0138)]
        HRESULT NoLineBreakBefore([out, retval] BSTR* prop);
        [id(0x00000138), propput, helpcontext(0x096b0138)]
        HRESULT NoLineBreakBefore([in] BSTR prop);
        [id(0x00000139), propget, helpcontext(0x096b0139)]
        HRESULT NoLineBreakAfter([out, retval] BSTR* prop);
        [id(0x00000139), propput, helpcontext(0x096b0139)]
        HRESULT NoLineBreakAfter([in] BSTR prop);
        [id(0x0000013a), propget, helpcontext(0x096b013a)]
        HRESULT TrackRevisions([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013a), propput, helpcontext(0x096b013a)]
        HRESULT TrackRevisions([in] VARIANT_BOOL prop);
        [id(0x0000013b), propget, helpcontext(0x096b013b)]
        HRESULT PrintRevisions([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013b), propput, helpcontext(0x096b013b)]
        HRESULT PrintRevisions([in] VARIANT_BOOL prop);
        [id(0x0000013c), propget, hidden, helpcontext(0x096b013c)]
        HRESULT ShowRevisions([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013c), propput, hidden, helpcontext(0x096b013c)]
        HRESULT ShowRevisions([in] VARIANT_BOOL prop);
        [id(0x00000451), helpcontext(0x096b0451)]
        HRESULT Close(
                        [in, optional] VARIANT* SaveChanges, 
                        [in, optional] VARIANT* OriginalFormat, 
                        [in, optional] VARIANT* RouteDocument);
        [id(0x00000066), hidden, helpcontext(0x096b0066)]
        HRESULT SaveAs2000(
                        [in, optional] VARIANT* FileName, 
                        [in, optional] VARIANT* FileFormat, 
                        [in, optional] VARIANT* LockComments, 
                        [in, optional] VARIANT* Password, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* WritePassword, 
                        [in, optional] VARIANT* ReadOnlyRecommended, 
                        [in, optional] VARIANT* EmbedTrueTypeFonts, 
                        [in, optional] VARIANT* SaveNativePictureFormat, 
                        [in, optional] VARIANT* SaveFormsData, 
                        [in, optional] VARIANT* SaveAsAOCELetter);
        [id(0x00000067), helpcontext(0x096b0067)]
        HRESULT Repaginate();
        [id(0x00000068), helpcontext(0x096b0068)]
        HRESULT FitToPages();
        [id(0x00000069), helpcontext(0x096b0069)]
        HRESULT ManualHyphenation();
        [id(0x0000ffff), helpcontext(0x096bffff)]
        HRESULT Select();
        [id(0x0000006a), helpcontext(0x096b006a)]
        HRESULT DataForm();
        [id(0x0000006b), hidden, helpcontext(0x096b006b)]
        HRESULT Route();
        [id(0x0000006c), helpcontext(0x096b006c)]
        HRESULT Save();
        [id(0x0000006d), hidden, helpcontext(0x096b006d)]
        HRESULT PrintOutOld(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint);
        [id(0x0000006e), helpcontext(0x096b006e)]
        HRESULT SendMail();
        [id(0x000007d0), helpcontext(0x096b07d0)]
        HRESULT Range(
                        [in, optional] VARIANT* Start, 
                        [in, optional] VARIANT* End, 
                        [out, retval] Range** prop);
        [id(0x00000070), helpcontext(0x096b0070)]
        HRESULT RunAutoMacro([in] WdAutoMacros Which);
        [id(0x00000071), helpcontext(0x096b0071)]
        HRESULT Activate();
        [id(0x00000072), helpcontext(0x096b0072)]
        HRESULT PrintPreview();
        [id(0x00000073), helpcontext(0x096b0073)]
        HRESULT GoTo(
                        [in, optional] VARIANT* What, 
                        [in, optional] VARIANT* Which, 
                        [in, optional] VARIANT* Count, 
                        [in, optional] VARIANT* Name, 
                        [out, retval] Range** prop);
        [id(0x00000074), helpcontext(0x096b0074)]
        HRESULT Undo(
                        [in, optional] VARIANT* Times, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000075), helpcontext(0x096b0075)]
        HRESULT Redo(
                        [in, optional] VARIANT* Times, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000076), helpcontext(0x096b0076)]
        HRESULT ComputeStatistics(
                        [in] WdStatistic Statistic, 
                        [in, optional] VARIANT* IncludeFootnotesAndEndnotes, 
                        [out, retval] long* prop);
        [id(0x00000077), helpcontext(0x096b0077)]
        HRESULT MakeCompatibilityDefault();
        [id(0x00000078), hidden, helpcontext(0x096b0078)]
        HRESULT Protect2002(
                        [in] WdProtectionType Type, 
                        [in, optional] VARIANT* NoReset, 
                        [in, optional] VARIANT* Password);
        [id(0x00000079), helpcontext(0x096b0079)]
        HRESULT Unprotect([in, optional] VARIANT* Password);
        [id(0x0000007a), hidden, helpcontext(0x096b007a)]
        HRESULT EditionOptions(
                        [in] WdEditionType Type, 
                        [in] WdEditionOption Option, 
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Format);
        [id(0x0000007b), helpcontext(0x096b007b)]
        HRESULT RunLetterWizard(
                        [in, optional] VARIANT* LetterContent, 
                        [in, optional] VARIANT* WizardMode);
        [id(0x0000007c), helpcontext(0x096b007c)]
        HRESULT GetLetterContent([out, retval] _LetterContent** prop);
        [id(0x0000007d), helpcontext(0x096b007d)]
        HRESULT SetLetterContent([in] VARIANT* LetterContent);
        [id(0x0000007e), helpcontext(0x096b007e)]
        HRESULT CopyStylesFromTemplate([in] BSTR Template);
        [id(0x0000007f), helpcontext(0x096b007f)]
        HRESULT UpdateStyles();
        [id(0x00000083), helpcontext(0x096b0083)]
        HRESULT CheckGrammar();
        [id(0x00000084), helpcontext(0x096b0084)]
        HRESULT CheckSpelling(
                        [in, optional] VARIANT* CustomDictionary, 
                        [in, optional] VARIANT* IgnoreUppercase, 
                        [in, optional] VARIANT* AlwaysSuggest, 
                        [in, optional] VARIANT* CustomDictionary2, 
                        [in, optional] VARIANT* CustomDictionary3, 
                        [in, optional] VARIANT* CustomDictionary4, 
                        [in, optional] VARIANT* CustomDictionary5, 
                        [in, optional] VARIANT* CustomDictionary6, 
                        [in, optional] VARIANT* CustomDictionary7, 
                        [in, optional] VARIANT* CustomDictionary8, 
                        [in, optional] VARIANT* CustomDictionary9, 
                        [in, optional] VARIANT* CustomDictionary10);
        [id(0x00000087), helpcontext(0x096b0087)]
        HRESULT FollowHyperlink(
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* SubAddress, 
                        [in, optional] VARIANT* NewWindow, 
                        [in, optional] VARIANT* AddHistory, 
                        [in, optional] VARIANT* ExtraInfo, 
                        [in, optional] VARIANT* Method, 
                        [in, optional] VARIANT* HeaderInfo);
        [id(0x00000088), helpcontext(0x096b0088)]
        HRESULT AddToFavorites();
        [id(0x00000089), helpcontext(0x096b0089)]
        HRESULT Reload();
        [id(0x0000008a), hidden, helpcontext(0x096b008a)]
        HRESULT AutoSummarize(
                        [in, optional] VARIANT* Length, 
                        [in, optional] VARIANT* Mode, 
                        [in, optional] VARIANT* UpdateProperties, 
                        [out, retval] Range** prop);
        [id(0x0000008c), helpcontext(0x096b008c)]
        HRESULT RemoveNumbers([in, optional] VARIANT* NumberType);
        [id(0x0000008d), helpcontext(0x096b008d)]
        HRESULT ConvertNumbersToText([in, optional] VARIANT* NumberType);
        [id(0x0000008e), helpcontext(0x096b008e)]
        HRESULT CountNumberedItems(
                        [in, optional] VARIANT* NumberType, 
                        [in, optional] VARIANT* Level, 
                        [out, retval] long* prop);
        [id(0x0000008f), helpcontext(0x096b008f)]
        HRESULT Post();
        [id(0x00000090), helpcontext(0x096b0090)]
        HRESULT ToggleFormsDesign();
        [id(0x00000091), hidden, helpcontext(0x096b0091)]
        HRESULT Compare2000([in] BSTR Name);
        [id(0x00000092), hidden, helpcontext(0x096b0092)]
        HRESULT UpdateSummaryProperties();
        [id(0x00000093), helpcontext(0x096b0093)]
        HRESULT GetCrossReferenceItems(
                        [in] VARIANT* ReferenceType, 
                        [out, retval] VARIANT* prop);
        [id(0x00000094), helpcontext(0x096b0094)]
        HRESULT AutoFormat();
        [id(0x00000095), helpcontext(0x096b0095)]
        HRESULT ViewCode();
        [id(0x00000096), helpcontext(0x096b0096)]
        HRESULT ViewPropertyBrowser();
        [id(0x000000fa), hidden, helpcontext(0x096b00fa)]
        HRESULT ForwardMailer();
        [id(0x000000fb), hidden, helpcontext(0x096b00fb)]
        HRESULT Reply();
        [id(0x000000fc), hidden, helpcontext(0x096b00fc)]
        HRESULT ReplyAll();
        [id(0x000000fd), hidden, helpcontext(0x096b00fd)]
        HRESULT SendMailer(
                        [in, optional] VARIANT* FileFormat, 
                        [in, optional] VARIANT* Priority);
        [id(0x000000fe), helpcontext(0x096b00fe)]
        HRESULT UndoClear();
        [id(0x000000ff), helpcontext(0x096b00ff)]
        HRESULT PresentIt();
        [id(0x00000100), helpcontext(0x096b0100)]
        HRESULT SendFax(
                        [in] BSTR Address, 
                        [in, optional] VARIANT* Subject);
        [id(0x00000101), hidden, helpcontext(0x096b0101)]
        HRESULT Merge2000([in] BSTR FileName);
        [id(0x00000102), helpcontext(0x096b0102)]
        HRESULT ClosePrintPreview();
        [id(0x00000103), helpcontext(0x096b0103)]
        HRESULT CheckConsistency();
        [id(0x00000104), helpcontext(0x096b0104)]
        HRESULT CreateLetterContent(
                        [in] BSTR DateFormat, 
                        [in] VARIANT_BOOL IncludeHeaderFooter, 
                        [in] BSTR PageDesign, 
                        [in] WdLetterStyle LetterStyle, 
                        [in] VARIANT_BOOL Letterhead, 
                        [in] WdLetterheadLocation LetterheadLocation, 
                        [in] single LetterheadSize, 
                        [in] BSTR RecipientName, 
                        [in] BSTR RecipientAddress, 
                        [in] BSTR Salutation, 
                        [in] WdSalutationType SalutationType, 
                        [in] BSTR RecipientReference, 
                        [in] BSTR MailingInstructions, 
                        [in] BSTR AttentionLine, 
                        [in] BSTR Subject, 
                        [in] BSTR CCList, 
                        [in] BSTR ReturnAddress, 
                        [in] BSTR SenderName, 
                        [in] BSTR Closing, 
                        [in] BSTR SenderCompany, 
                        [in] BSTR SenderJobTitle, 
                        [in] BSTR SenderInitials, 
                        [in] long EnclosureNumber, 
                        [in, optional] VARIANT* InfoBlock, 
                        [in, optional] VARIANT* RecipientCode, 
                        [in, optional] VARIANT* RecipientGender, 
                        [in, optional] VARIANT* ReturnAddressShortForm, 
                        [in, optional] VARIANT* SenderCity, 
                        [in, optional] VARIANT* SenderCode, 
                        [in, optional] VARIANT* SenderGender, 
                        [in, optional] VARIANT* SenderReference, 
                        [out, retval] _LetterContent** prop);
        [id(0x0000013d), helpcontext(0x096b013d)]
        HRESULT AcceptAllRevisions();
        [id(0x0000013e), helpcontext(0x096b013e)]
        HRESULT RejectAllRevisions();
        [id(0x00000097), helpcontext(0x096b0097)]
        HRESULT DetectLanguage();
        [id(0x00000142), helpcontext(0x096b0142)]
        HRESULT ApplyTheme([in] BSTR Name);
        [id(0x00000143), helpcontext(0x096b0143)]
        HRESULT RemoveTheme();
        [id(0x00000145), helpcontext(0x096b0145)]
        HRESULT WebPagePreview();
        [id(0x0000014b), helpcontext(0x096b014b)]
        HRESULT ReloadAs([in] MsoEncoding Encoding);
        [id(0x0000021c), propget, helpcontext(0x096b021c)]
        HRESULT ActiveTheme([out, retval] BSTR* prop);
        [id(0x0000021d), propget, helpcontext(0x096b021d)]
        HRESULT ActiveThemeDisplayName([out, retval] BSTR* prop);
        [id(0x0000013f), propget, helpcontext(0x096b013f)]
        HRESULT Email([out, retval] Email** prop);
        [id(0x00000140), propget, helpcontext(0x096b0140)]
        HRESULT Scripts([out, retval] Scripts** prop);
        [id(0x00000141), propget, helpcontext(0x096b0141)]
        HRESULT LanguageDetected([out, retval] VARIANT_BOOL* prop);
        [id(0x00000141), propput, helpcontext(0x096b0141)]
        HRESULT LanguageDetected([in] VARIANT_BOOL prop);
        [id(0x00000146), propget, helpcontext(0x096b0146)]
        HRESULT FarEastLineBreakLanguage([out, retval] WdFarEastLineBreakLanguageID* prop);
        [id(0x00000146), propput, helpcontext(0x096b0146)]
        HRESULT FarEastLineBreakLanguage([in] WdFarEastLineBreakLanguageID prop);
        [id(0x00000147), propget, helpcontext(0x096b0147)]
        HRESULT Frameset([out, retval] Frameset** prop);
        [id(0x00000148), propget, helpcontext(0x096b0148)]
        HRESULT ClickAndTypeParagraphStyle([out, retval] VARIANT* prop);
        [id(0x00000148), propput, helpcontext(0x096b0148)]
        HRESULT ClickAndTypeParagraphStyle([in] VARIANT* prop);
        [id(0x00000149), propget, hidden, helpcontext(0x096b0149)]
        HRESULT HTMLProject([out, retval] HTMLProject** prop);
        [id(0x0000014a), propget, helpcontext(0x096b014a)]
        HRESULT WebOptions([out, retval] WebOptions** prop);
        [id(0x0000014c), propget, helpcontext(0x096b014c)]
        HRESULT OpenEncoding([out, retval] MsoEncoding* prop);
        [id(0x0000014d), propget, helpcontext(0x096b014d)]
        HRESULT SaveEncoding([out, retval] MsoEncoding* prop);
        [id(0x0000014d), propput, helpcontext(0x096b014d)]
        HRESULT SaveEncoding([in] MsoEncoding prop);
        [id(0x0000014e), propget, helpcontext(0x096b014e)]
        HRESULT OptimizeForWord97([out, retval] VARIANT_BOOL* prop);
        [id(0x0000014e), propput, helpcontext(0x096b014e)]
        HRESULT OptimizeForWord97([in] VARIANT_BOOL prop);
        [id(0x0000014f), propget, helpcontext(0x096b014f)]
        HRESULT VBASigned([out, retval] VARIANT_BOOL* prop);
        [id(0x000001bc), hidden, helpcontext(0x096b01bc)]
        HRESULT PrintOut2000(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint, 
                        [in, optional] VARIANT* PrintZoomColumn, 
                        [in, optional] VARIANT* PrintZoomRow, 
                        [in, optional] VARIANT* PrintZoomPaperWidth, 
                        [in, optional] VARIANT* PrintZoomPaperHeight);
        [id(0x000001bd), hidden, helpcontext(0x096b01bd)]
        HRESULT sblt([in] BSTR s);
        [id(0x000001bf), helpcontext(0x096b01bf)]
        HRESULT ConvertVietDoc([in] long CodePageOrigin);
        [id(0x000001be), helpcontext(0x096b01be)]
        HRESULT PrintOut(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint, 
                        [in, optional] VARIANT* PrintZoomColumn, 
                        [in, optional] VARIANT* PrintZoomRow, 
                        [in, optional] VARIANT* PrintZoomPaperWidth, 
                        [in, optional] VARIANT* PrintZoomPaperHeight);
        [id(0x00000150), propget, helpcontext(0x096b0150)]
        HRESULT MailEnvelope([out, retval] MsoEnvelope** prop);
        [id(0x00000151), propget, helpcontext(0x096b0151)]
        HRESULT DisableFeatures([out, retval] VARIANT_BOOL* prop);
        [id(0x00000151), propput, helpcontext(0x096b0151)]
        HRESULT DisableFeatures([in] VARIANT_BOOL prop);
        [id(0x00000152), propget, helpcontext(0x096b0152)]
        HRESULT DoNotEmbedSystemFonts([out, retval] VARIANT_BOOL* prop);
        [id(0x00000152), propput, helpcontext(0x096b0152)]
        HRESULT DoNotEmbedSystemFonts([in] VARIANT_BOOL prop);
        [id(0x00000153), propget, helpcontext(0x096b0153)]
        HRESULT Signatures([out, retval] SignatureSet** prop);
        [id(0x00000154), propget, helpcontext(0x096b0154)]
        HRESULT DefaultTargetFrame([out, retval] BSTR* prop);
        [id(0x00000154), propput, helpcontext(0x096b0154)]
        HRESULT DefaultTargetFrame([in] BSTR prop);
        [id(0x00000156), propget, helpcontext(0x096b0156)]
        HRESULT HTMLDivisions([out, retval] HTMLDivisions** prop);
        [id(0x00000157), propget, helpcontext(0x096b0157)]
        HRESULT DisableFeaturesIntroducedAfter([out, retval] WdDisableFeaturesIntroducedAfter* prop);
        [id(0x00000157), propput, helpcontext(0x096b0157)]
        HRESULT DisableFeaturesIntroducedAfter([in] WdDisableFeaturesIntroducedAfter prop);
        [id(0x00000158), propget, helpcontext(0x096b0158)]
        HRESULT RemovePersonalInformation([out, retval] VARIANT_BOOL* prop);
        [id(0x00000158), propput, helpcontext(0x096b0158)]
        HRESULT RemovePersonalInformation([in] VARIANT_BOOL prop);
        [id(0x0000015a), propget, hidden, helpcontext(0x096b015a)]
        HRESULT SmartTags([out, retval] SmartTags** prop);
        [id(0x00000159), hidden, helpcontext(0x096b0159)]
        HRESULT Compare2002(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* AuthorName, 
                        [in, optional] VARIANT* CompareTarget, 
                        [in, optional] VARIANT* DetectFormatChanges, 
                        [in, optional] VARIANT* IgnoreAllComparisonWarnings, 
                        [in, optional] VARIANT* AddToRecentFiles);
        [id(0x0000015d), helpcontext(0x096b015d)]
        HRESULT CheckIn(
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL SaveChanges, 
                        [in, optional] VARIANT* Comments, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL MakePublic);

        [id(0x0000015f), helpcontext(0x096b015f)]
        HRESULT CanCheckin([out, retval] VARIANT_BOOL* prop);
        [id(0x0000016a), helpcontext(0x096b016a)]
        HRESULT Merge(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* MergeTarget, 
                        [in, optional] VARIANT* DetectFormatChanges, 
                        [in, optional] VARIANT* UseFormattingFrom, 
                        [in, optional] VARIANT* AddToRecentFiles);
        [id(0x0000015b), propget, hidden, helpcontext(0x096b015b)]
        HRESULT EmbedSmartTags([out, retval] VARIANT_BOOL* prop);
        [id(0x0000015b), propput, hidden, helpcontext(0x096b015b)]
        HRESULT EmbedSmartTags([in] VARIANT_BOOL prop);
        [id(0x0000015c), propget, hidden, helpcontext(0x096b015c)]
        HRESULT SmartTagsAsXMLProps([out, retval] VARIANT_BOOL* prop);
        [id(0x0000015c), propput, hidden, helpcontext(0x096b015c)]
        HRESULT SmartTagsAsXMLProps([in] VARIANT_BOOL prop);
        [id(0x00000165), propget, helpcontext(0x096b0165)]
        HRESULT TextEncoding([out, retval] MsoEncoding* prop);
        [id(0x00000165), propput, helpcontext(0x096b0165)]
        HRESULT TextEncoding([in] MsoEncoding prop);
        [id(0x00000166), propget, helpcontext(0x096b0166)]
        HRESULT TextLineEnding([out, retval] WdLineEndingType* prop);
        [id(0x00000166), propput, helpcontext(0x096b0166)]
        HRESULT TextLineEnding([in] WdLineEndingType prop);
        [id(0x00000161), helpcontext(0x096b0161)]
        HRESULT SendForReview(
                        [in, optional] VARIANT* Recipients, 
                        [in, optional] VARIANT* Subject, 
                        [in, optional] VARIANT* ShowMessage, 
                        [in, optional] VARIANT* IncludeAttachment);
        [id(0x00000162), helpcontext(0x096b0162)]
        HRESULT ReplyWithChanges([in, optional] VARIANT* ShowMessage);
        [id(0x00000164), helpcontext(0x096b0164)]
        HRESULT EndReview();
        [id(0x00000168), propget, helpcontext(0x096b0168)]
        HRESULT StyleSheets([out, retval] StyleSheets** prop);
        [id(0x0000016d), propget, helpcontext(0x096b016d)]
        HRESULT DefaultTableStyle([out, retval] VARIANT* prop);
        [id(0x0000016f), propget, helpcontext(0x096b016f)]
        HRESULT PasswordEncryptionProvider([out, retval] BSTR* prop);
        [id(0x00000170), propget, helpcontext(0x096b0170)]
        HRESULT PasswordEncryptionAlgorithm([out, retval] BSTR* prop);
        [id(0x00000171), propget, helpcontext(0x096b0171)]
        HRESULT PasswordEncryptionKeyLength([out, retval] long* prop);
        [id(0x00000172), propget, helpcontext(0x096b0172)]
        HRESULT PasswordEncryptionFileProperties([out, retval] VARIANT_BOOL* prop);
        [id(0x00000169), helpcontext(0x096b0169)]
        HRESULT SetPasswordEncryptionOptions(
                        [in] BSTR PasswordEncryptionProvider, 
                        [in] BSTR PasswordEncryptionAlgorithm, 
                        [in] long PasswordEncryptionKeyLength, 
                        [in, optional] VARIANT* PasswordEncryptionFileProperties);
        [id(0x0000016b), hidden, helpcontext(0x096b016b)]
        HRESULT RecheckSmartTags();
        [id(0x0000016c), hidden, helpcontext(0x096b016c)]
        HRESULT RemoveSmartTags();
        [id(0x0000016e), helpcontext(0x096b016e)]
        HRESULT SetDefaultTableStyle(
                        [in] VARIANT* Style, 
                        [in] VARIANT_BOOL SetInTemplate);
        [id(0x00000173), helpcontext(0x096b0173)]
        HRESULT DeleteAllComments();
        [id(0x00000174), helpcontext(0x096b0174)]
        HRESULT AcceptAllRevisionsShown();
        [id(0x00000175), helpcontext(0x096b0175)]
        HRESULT RejectAllRevisionsShown();
        [id(0x00000176), helpcontext(0x096b0176)]
        HRESULT DeleteAllCommentsShown();
        [id(0x00000177), helpcontext(0x096b0177)]
        HRESULT ResetFormFields();
        [id(0x00000178), hidden, helpcontext(0x096b0178)]
        HRESULT SaveAs(
                        [in, optional] VARIANT* FileName, 
                        [in, optional] VARIANT* FileFormat, 
                        [in, optional] VARIANT* LockComments, 
                        [in, optional] VARIANT* Password, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* WritePassword, 
                        [in, optional] VARIANT* ReadOnlyRecommended, 
                        [in, optional] VARIANT* EmbedTrueTypeFonts, 
                        [in, optional] VARIANT* SaveNativePictureFormat, 
                        [in, optional] VARIANT* SaveFormsData, 
                        [in, optional] VARIANT* SaveAsAOCELetter, 
                        [in, optional] VARIANT* Encoding, 
                        [in, optional] VARIANT* InsertLineBreaks, 
                        [in, optional] VARIANT* AllowSubstitutions, 
                        [in, optional] VARIANT* LineEnding, 
                        [in, optional] VARIANT* AddBiDiMarks);
        [id(0x00000179), propget, helpcontext(0x096b0179)]
        HRESULT EmbedLinguisticData([out, retval] VARIANT_BOOL* prop);
        [id(0x00000179), propput, helpcontext(0x096b0179)]
        HRESULT EmbedLinguisticData([in] VARIANT_BOOL prop);
        [id(0x000001c0), propget, helpcontext(0x096b01c0)]
        HRESULT FormattingShowFont([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c0), propput, helpcontext(0x096b01c0)]
        HRESULT FormattingShowFont([in] VARIANT_BOOL prop);
        [id(0x000001c1), propget, helpcontext(0x096b01c1)]
        HRESULT FormattingShowClear([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c1), propput, helpcontext(0x096b01c1)]
        HRESULT FormattingShowClear([in] VARIANT_BOOL prop);
        [id(0x000001c2), propget, helpcontext(0x096b01c2)]
        HRESULT FormattingShowParagraph([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c2), propput, helpcontext(0x096b01c2)]
        HRESULT FormattingShowParagraph([in] VARIANT_BOOL prop);
        [id(0x000001c3), propget, helpcontext(0x096b01c3)]
        HRESULT FormattingShowNumbering([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c3), propput, helpcontext(0x096b01c3)]
        HRESULT FormattingShowNumbering([in] VARIANT_BOOL prop);
        [id(0x000001c4), propget, helpcontext(0x096b01c4)]
        HRESULT FormattingShowFilter([out, retval] WdShowFilter* prop);
        [id(0x000001c4), propput, helpcontext(0x096b01c4)]
        HRESULT FormattingShowFilter([in] WdShowFilter prop);
        [id(0x0000017a), hidden, helpcontext(0x096b017a)]
        HRESULT CheckNewSmartTags();
        [id(0x000001c5), propget, helpcontext(0x096b01c5)]
        HRESULT Permission([out, retval] Permission** prop);
        [id(0x000001cc), propget, hidden, helpcontext(0x096b01cc)]
        HRESULT XMLNodes([out, retval] XMLNodes** prop);
        [id(0x000001cd), propget, helpcontext(0x096b01cd)]
        HRESULT XMLSchemaReferences([out, retval] XMLSchemaReferences** prop);
        [id(0x000001ce), propget, helpcontext(0x096b01ce)]
        HRESULT SmartDocument([out, retval] SmartDocument** prop);
        [id(0x000001cf), propget, hidden, helpcontext(0x096b01cf)]
        HRESULT SharedWorkspace([out, retval] SharedWorkspace** prop);
        [id(0x000001d2), propget, helpcontext(0x096b01d2)]
        HRESULT Sync([out, retval] Sync** prop);
        [id(0x000001d7), propget, helpcontext(0x096b01d7)]
        HRESULT EnforceStyle([out, retval] VARIANT_BOOL* prop);
        [id(0x000001d7), propput, helpcontext(0x096b01d7)]
        HRESULT EnforceStyle([in] VARIANT_BOOL prop);
        [id(0x000001d8), propget, helpcontext(0x096b01d8)]
        HRESULT AutoFormatOverride([out, retval] VARIANT_BOOL* prop);
        [id(0x000001d8), propput, helpcontext(0x096b01d8)]
        HRESULT AutoFormatOverride([in] VARIANT_BOOL prop);
        [id(0x000001d9), propget, hidden, helpcontext(0x096b01d9)]
        HRESULT XMLSaveDataOnly([out, retval] VARIANT_BOOL* prop);
        [id(0x000001d9), propput, hidden, helpcontext(0x096b01d9)]
        HRESULT XMLSaveDataOnly([in] VARIANT_BOOL prop);
        [id(0x000001dd), propget, hidden, helpcontext(0x096b01dd)]
        HRESULT XMLHideNamespaces([out, retval] VARIANT_BOOL* prop);
        [id(0x000001dd), propput, hidden, helpcontext(0x096b01dd)]
        HRESULT XMLHideNamespaces([in] VARIANT_BOOL prop);
        [id(0x000001de), propget, helpcontext(0x096b01de)]
        HRESULT XMLShowAdvancedErrors([out, retval] VARIANT_BOOL* prop);
        [id(0x000001de), propput, helpcontext(0x096b01de)]
        HRESULT XMLShowAdvancedErrors([in] VARIANT_BOOL prop);
        [id(0x000001da), propget, helpcontext(0x096b01da)]
        HRESULT XMLUseXSLTWhenSaving([out, retval] VARIANT_BOOL* prop);
        [id(0x000001da), propput, helpcontext(0x096b01da)]
        HRESULT XMLUseXSLTWhenSaving([in] VARIANT_BOOL prop);
        [id(0x000001db), propget, helpcontext(0x096b01db)]
        HRESULT XMLSaveThroughXSLT([out, retval] BSTR* prop);
        [id(0x000001db), propput, helpcontext(0x096b01db)]
        HRESULT XMLSaveThroughXSLT([in] BSTR prop);
        [id(0x000001dc), propget, helpcontext(0x096b01dc)]
        HRESULT DocumentLibraryVersions([out, retval] DocumentLibraryVersions** prop);
        [id(0x000001e1), propget, helpcontext(0x096b01e1)]
        HRESULT ReadingModeLayoutFrozen([out, retval] VARIANT_BOOL* prop);
        [id(0x000001e1), propput, helpcontext(0x096b01e1)]
        HRESULT ReadingModeLayoutFrozen([in] VARIANT_BOOL prop);
        [id(0x000001e4), propget, helpcontext(0x096b01e4)]
        HRESULT RemoveDateAndTime([out, retval] VARIANT_BOOL* prop);
        [id(0x000001e4), propput, helpcontext(0x096b01e4)]
        HRESULT RemoveDateAndTime([in] VARIANT_BOOL prop);
        [id(0x000001d0), helpcontext(0x096b01d0)]
        HRESULT SendFaxOverInternet(
                        [in, optional] VARIANT* Recipients, 
                        [in, optional] VARIANT* Subject, 
                        [in, optional] VARIANT* ShowMessage);
        [id(0x000001f4), helpcontext(0x096b01f4)]
        HRESULT TransformDocument(
                        [in] BSTR Path, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL DataOnly);
        [id(0x000001d3), helpcontext(0x096b01d3)]
        HRESULT Protect(
                        [in] WdProtectionType Type, 
                        [in, optional] VARIANT* NoReset, 
                        [in, optional] VARIANT* Password, 
                        [in, optional] VARIANT* UseIRM, 
                        [in, optional] VARIANT* EnforceStyleLock);
        [id(0x000001d4), helpcontext(0x096b01d4)]
        HRESULT SelectAllEditableRanges([in, optional] VARIANT* EditorID);
        [id(0x000001d5), helpcontext(0x096b01d5)]
        HRESULT DeleteAllEditableRanges([in, optional] VARIANT* EditorID);
        [id(0x000001df), helpcontext(0x096b01df)]
        HRESULT DeleteAllInkAnnotations();
        [id(0x000001e2), hidden, helpcontext(0x096b01e2)]
        HRESULT AddDocumentWorkspaceHeader(
                        [in] VARIANT_BOOL RichFormat, 
                        [in] BSTR Url, 
                        [in] BSTR Title, 
                        [in] BSTR Description, 
                        [in] BSTR ID);
        [id(0x000001e3), hidden, helpcontext(0x096b01e3)]
        HRESULT RemoveDocumentWorkspaceHeader([in] BSTR ID);
        [id(0x000001e5), helpcontext(0x096b01e5)]
        HRESULT Compare(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* AuthorName, 
                        [in, optional] VARIANT* CompareTarget, 
                        [in, optional] VARIANT* DetectFormatChanges, 
                        [in, optional] VARIANT* IgnoreAllComparisonWarnings, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* RemovePersonalInformation, 
                        [in, optional] VARIANT* RemoveDateAndTime);
        [id(0x000001e7), helpcontext(0x096b01e7)]
        HRESULT RemoveLockedStyles();
        [id(0x000001e6), propget, hidden, helpcontext(0x096b01e6)]
        HRESULT ChildNodeSuggestions([out, retval] XMLChildNodeSuggestions** prop);
        [id(0x000001e8), helpcontext(0x096b01e8)]
        HRESULT SelectSingleNode(
                        [in] BSTR XPath, 
                        [in, optional, defaultvalue("")] BSTR PrefixMapping, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL FastSearchSkippingTextNodes, 
                        [out, retval] XMLNode** prop);
        [id(0x000001e9), helpcontext(0x096b01e9)]
        HRESULT SelectNodes(
                        [in] BSTR XPath, 
                        [in, optional, defaultvalue("")] BSTR PrefixMapping, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL FastSearchSkippingTextNodes, 
                        [out, retval] XMLNodes** prop);
        [id(0x000001ea), propget, hidden, helpcontext(0x096b01ea)]
        HRESULT XMLSchemaViolations([out, retval] XMLNodes** prop);
        [id(0x000001eb), propget, helpcontext(0x096b01eb)]
        HRESULT ReadingLayoutSizeX([out, retval] long* prop);
        [id(0x000001eb), propput, helpcontext(0x096b01eb)]
        HRESULT ReadingLayoutSizeX([in] long prop);
        [id(0x000001ec), propget, helpcontext(0x096b01ec)]
        HRESULT ReadingLayoutSizeY([out, retval] long* prop);
        [id(0x000001ec), propput, helpcontext(0x096b01ec)]
        HRESULT ReadingLayoutSizeY([in] long prop);
        [id(0x000001ed), propget, helpcontext(0x096b01ed)]
        HRESULT StyleSortMethod([out, retval] WdStyleSort* prop);
        [id(0x000001ed), propput, helpcontext(0x096b01ed)]
        HRESULT StyleSortMethod([in] WdStyleSort prop);
        [id(0x000001f0), propget, helpcontext(0x096b01f0)]
        HRESULT ContentTypeProperties([out, retval] MetaProperties** prop);
        [id(0x000001f3), propget, helpcontext(0x096b01f3)]
        HRESULT TrackMoves([out, retval] VARIANT_BOOL* prop);
        [id(0x000001f3), propput, helpcontext(0x096b01f3)]
        HRESULT TrackMoves([in] VARIANT_BOOL prop);
        [id(0x000001f6), propget, helpcontext(0x096b01f6)]
        HRESULT TrackFormatting([out, retval] VARIANT_BOOL* prop);
        [id(0x000001f6), propput, helpcontext(0x096b01f6)]
        HRESULT TrackFormatting([in] VARIANT_BOOL prop);
        [id(0x000001f7), propget, hidden, helpcontext(0x096b01f7)]
        HRESULT Dummy1();
        [id(0x000001f8), propget, helpcontext(0x096b01f8)]
        HRESULT OMaths([out, retval] OMaths** prop);
        [id(0x000001ef), helpcontext(0x096b01ef)]
        HRESULT RemoveDocumentInformation([in] WdRemoveDocInfoType RemoveDocInfoType);
        [id(0x000001f5), helpcontext(0x096b01f5)]
        HRESULT CheckInWithVersion(
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL SaveChanges, 
                        [in, optional] VARIANT* Comments, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL MakePublic, 
                        [in, optional] VARIANT* VersionType);
        [id(0x000001f9), hidden, helpcontext(0x096b01f9)]
        HRESULT Dummy2();
        [id(0x000001fa), propget, hidden, helpcontext(0x096b01fa)]
        HRESULT Dummy3();
        [id(0x000001fb), propget, helpcontext(0x096b01fb)]
        HRESULT ServerPolicy([out, retval] ServerPolicy** prop);
        [id(0x000001fc), propget, helpcontext(0x096b01fc)]
        HRESULT ContentControls([out, retval] ContentControls** prop);
        [id(0x000001fe), propget, helpcontext(0x096b01fe)]
        HRESULT DocumentInspectors([out, retval] DocumentInspectors** prop);
        [id(0x000001fd), helpcontext(0x096b01fd)]
        HRESULT LockServerFile();
        [id(0x000001ff), helpcontext(0x096b01ff)]
        HRESULT GetWorkflowTasks([out, retval] WorkflowTasks** prop);
        [id(0x00000200), helpcontext(0x096b0200)]
        HRESULT GetWorkflowTemplates([out, retval] WorkflowTemplates** prop);
        [id(0x00000202), hidden, helpcontext(0x096b0202)]
        HRESULT Dummy4();
        [id(0x00000203), hidden, helpcontext(0x096b0203)]
        HRESULT AddMeetingWorkspaceHeader(
                        [in] VARIANT_BOOL SkipIfAbsent, 
                        [in] BSTR Url, 
                        [in] BSTR Title, 
                        [in] BSTR Description, 
                        [in] BSTR ID);
        [id(0x00000204), propget, helpcontext(0x096b0204)]
        HRESULT Bibliography([out, retval] Bibliography** prop);
        [id(0x00000205), propget, helpcontext(0x096b0205)]
        HRESULT LockTheme([out, retval] VARIANT_BOOL* prop);
        [id(0x00000205), propput, helpcontext(0x096b0205)]
        HRESULT LockTheme([in] VARIANT_BOOL prop);
        [id(0x00000206), propget, helpcontext(0x096b0206)]
        HRESULT LockQuickStyleSet([out, retval] VARIANT_BOOL* prop);
        [id(0x00000206), propput, helpcontext(0x096b0206)]
        HRESULT LockQuickStyleSet([in] VARIANT_BOOL prop);
        [id(0x00000207), propget, helpcontext(0x096b0207)]
        HRESULT OriginalDocumentTitle([out, retval] BSTR* prop);
        [id(0x00000208), propget, helpcontext(0x096b0208)]
        HRESULT RevisedDocumentTitle([out, retval] BSTR* prop);
        [id(0x00000209), propget, helpcontext(0x096b0209)]
        HRESULT CustomXMLParts([out, retval] CustomXMLParts** prop);
        [id(0x0000020a), propget, helpcontext(0x096b020a)]
        HRESULT FormattingShowNextLevel([out, retval] VARIANT_BOOL* prop);
        [id(0x0000020a), propput, helpcontext(0x096b020a)]
        HRESULT FormattingShowNextLevel([in] VARIANT_BOOL prop);
        [id(0x0000020b), propget, helpcontext(0x096b020b)]
        HRESULT FormattingShowUserStyleName([out, retval] VARIANT_BOOL* prop);
        [id(0x0000020b), propput, helpcontext(0x096b020b)]
        HRESULT FormattingShowUserStyleName([in] VARIANT_BOOL prop);
        [id(0x0000020c), helpcontext(0x096b020c)]
        HRESULT SaveAsQuickStyleSet([in] BSTR FileName);
        [id(0x0000020d), hidden, helpcontext(0x096b020d)]
        HRESULT ApplyQuickStyleSet([in] BSTR Name);
        [id(0x0000020e), propget, helpcontext(0x096b020e)]
        HRESULT Research([out, retval] Research** prop);
        [id(0x0000020f), propget, helpcontext(0x096b020f)]
        HRESULT Final([out, retval] VARIANT_BOOL* prop);
        [id(0x0000020f), propput, helpcontext(0x096b020f)]
        HRESULT Final([in] VARIANT_BOOL prop);
        [id(0x00000210), propget, helpcontext(0x096b0210)]
        HRESULT OMathBreakBin([out, retval] WdOMathBreakBin* prop);
        [id(0x00000210), propput, helpcontext(0x096b0210)]
        HRESULT OMathBreakBin([in] WdOMathBreakBin prop);
        [id(0x00000211), propget, helpcontext(0x096b0211)]
        HRESULT OMathBreakSub([out, retval] WdOMathBreakSub* prop);
        [id(0x00000211), propput, helpcontext(0x096b0211)]
        HRESULT OMathBreakSub([in] WdOMathBreakSub prop);
        [id(0x00000212), propget, helpcontext(0x096b0212)]
        HRESULT OMathJc([out, retval] WdOMathJc* prop);
        [id(0x00000212), propput, helpcontext(0x096b0212)]
        HRESULT OMathJc([in] WdOMathJc prop);
        [id(0x00000213), propget, helpcontext(0x096b0213)]
        HRESULT OMathLeftMargin([out, retval] single* prop);
        [id(0x00000213), propput, helpcontext(0x096b0213)]
        HRESULT OMathLeftMargin([in] single prop);
        [id(0x00000214), propget, helpcontext(0x096b0214)]
        HRESULT OMathRightMargin([out, retval] single* prop);
        [id(0x00000214), propput, helpcontext(0x096b0214)]
        HRESULT OMathRightMargin([in] single prop);
        [id(0x00000217), propget, helpcontext(0x096b0217)]
        HRESULT OMathWrap([out, retval] single* prop);
        [id(0x00000217), propput, helpcontext(0x096b0217)]
        HRESULT OMathWrap([in] single prop);
        [id(0x00000218), propget, helpcontext(0x096b0218)]
        HRESULT OMathIntSubSupLim([out, retval] VARIANT_BOOL* prop);
        [id(0x00000218), propput, helpcontext(0x096b0218)]
        HRESULT OMathIntSubSupLim([in] VARIANT_BOOL prop);
        [id(0x00000219), propget, helpcontext(0x096b0219)]
        HRESULT OMathNarySupSubLim([out, retval] VARIANT_BOOL* prop);
        [id(0x00000219), propput, helpcontext(0x096b0219)]
        HRESULT OMathNarySupSubLim([in] VARIANT_BOOL prop);
        [id(0x0000021b), propget, helpcontext(0x096b021b)]
        HRESULT OMathSmallFrac([out, retval] VARIANT_BOOL* prop);
        [id(0x0000021b), propput, helpcontext(0x096b021b)]
        HRESULT OMathSmallFrac([in] VARIANT_BOOL prop);
        [id(0x0000021e), propget, helpcontext(0x096b021e)]
        HRESULT WordOpenXML([out, retval] BSTR* prop);
        [id(0x00000221), propget, helpcontext(0x096b0221)]
        HRESULT DocumentTheme([out, retval] OfficeTheme** prop);
        [id(0x00000222), helpcontext(0x096b0222)]
        HRESULT ApplyDocumentTheme([in] BSTR FileName);
        [id(0x00000224), propget, helpcontext(0x096b0224)]
        HRESULT HasVBProject([out, retval] VARIANT_BOOL* prop);
        [id(0x00000225), helpcontext(0x096b0225)]
        HRESULT SelectLinkedControls(
                        [in] CustomXMLNode* Node, 
                        [out, retval] ContentControls** prop);
        [id(0x00000226), helpcontext(0x096b0226)]
        HRESULT SelectUnlinkedControls(
                        [in, optional, defaultvalue(0)] CustomXMLPart* Stream, 
                        [out, retval] ContentControls** prop);
        [id(0x00000227), helpcontext(0x096b0227)]
        HRESULT SelectContentControlsByTitle(
                        [in] BSTR Title, 
                        [out, retval] ContentControls** prop);
        [id(0x00000228), helpcontext(0x096b0228)]
        HRESULT ExportAsFixedFormat(
                        [in] BSTR OutputFileName, 
                        [in] WdExportFormat ExportFormat, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL OpenAfterExport, 
                        [in, optional, defaultvalue(0)] WdExportOptimizeFor OptimizeFor, 
                        [in, optional, defaultvalue(0)] WdExportRange Range, 
                        [in, optional, defaultvalue(1)] long From, 
                        [in, optional, defaultvalue(1)] long To, 
                        [in, optional, defaultvalue(0)] WdExportItem Item, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL IncludeDocProps, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL KeepIRM, 
                        [in, optional, defaultvalue(0)] WdExportCreateBookmarks CreateBookmarks, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL DocStructureTags, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL BitmapMissingFonts, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL UseISO19005_1, 
                        [in, optional] VARIANT* FixedFormatExtClassPtr);
        [id(0x00000229), helpcontext(0x096b0229)]
        HRESULT FreezeLayout();
        [id(0x0000022a), hidden, helpcontext(0x096b022a)]
        HRESULT UnfreezeLayout();
        [id(0x0000022b), propget, helpcontext(0x096b022b)]
        HRESULT OMathFontName([out, retval] BSTR* prop);
        [id(0x0000022b), propput, helpcontext(0x096b022b)]
        HRESULT OMathFontName([in] BSTR prop);
        [id(0x0000022e), helpcontext(0x096b022e)]
        HRESULT DowngradeDocument();
        [id(0x0000022f), propget, helpcontext(0x096b022f)]
        HRESULT EncryptionProvider([out, retval] BSTR* prop);
        [id(0x0000022f), propput, helpcontext(0x096b022f)]
        HRESULT EncryptionProvider([in] BSTR prop);
        [id(0x00000230), propget, helpcontext(0x096b0230)]
        HRESULT UseMathDefaults([out, retval] VARIANT_BOOL* prop);
        [id(0x00000230), propput, helpcontext(0x096b0230)]
        HRESULT UseMathDefaults([in] VARIANT_BOOL prop);
        [id(0x00000233), propget, helpcontext(0x096b0233)]
        HRESULT CurrentRsid([out, retval] long* prop);
        [id(0x00000231), helpcontext(0x096b0231)]
        HRESULT Convert();
        [id(0x00000232), helpcontext(0x096b0232)]
        HRESULT SelectContentControlsByTag(
                        [in] BSTR Tag, 
                        [out, retval] ContentControls** prop);
        [id(0x0000028a), helpcontext(0x096b028a)]
        HRESULT ConvertAutoHyphens();
        [id(0x00000234), propget, hidden, helpcontext(0x096b0234)]
        HRESULT DocID([out, retval] long* prop);
        [id(0x00000236), helpcontext(0x096b0236)]
        HRESULT ApplyQuickStyleSet2([in] VARIANT* Style);
        [id(0x00000237), propget, helpcontext(0x096b0237)]
        HRESULT CompatibilityMode([out, retval] long* prop);
        [id(0x00000238), helpcontext(0x096b0238)]
        HRESULT SaveAs2(
                        [in, optional] VARIANT* FileName, 
                        [in, optional] VARIANT* FileFormat, 
                        [in, optional] VARIANT* LockComments, 
                        [in, optional] VARIANT* Password, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* WritePassword, 
                        [in, optional] VARIANT* ReadOnlyRecommended, 
                        [in, optional] VARIANT* EmbedTrueTypeFonts, 
                        [in, optional] VARIANT* SaveNativePictureFormat, 
                        [in, optional] VARIANT* SaveFormsData, 
                        [in, optional] VARIANT* SaveAsAOCELetter, 
                        [in, optional] VARIANT* Encoding, 
                        [in, optional] VARIANT* InsertLineBreaks, 
                        [in, optional] VARIANT* AllowSubstitutions, 
                        [in, optional] VARIANT* LineEnding, 
                        [in, optional] VARIANT* AddBiDiMarks, 
                        [in, optional] VARIANT* CompatibilityMode);
        [id(0x00000258), propget, helpcontext(0x096b0258)]
        HRESULT CoAuthoring([out, retval] CoAuthoring** prop);
        [id(0x0000023b), helpcontext(0x096b023b)]
        HRESULT SetCompatibilityMode([in] long Mode);
        [id(0x00000262), propget, helpcontext(0x096b0262)]
        HRESULT Broadcast([out, retval] Broadcast** prop);
        [id(0x0000023c), helpcontext(0x096b023c)]
        HRESULT ReturnToLastReadPosition([out, retval] long* prop);
        [id(0x0000026a), propget, helpcontext(0x096b026a)]
        HRESULT ChartDataPointTrack([out, retval] VARIANT_BOOL* prop);
        [id(0x0000026a), propput, helpcontext(0x096b026a)]
        HRESULT ChartDataPointTrack([in] VARIANT_BOOL prop);
        [id(0x0000026b), propget, helpcontext(0x096b026b)]
        HRESULT IsInAutosave([out, retval] VARIANT_BOOL* prop);
        [id(0x0000026d), hidden, helpcontext(0x096b026d)]
        HRESULT SaveCopyAs(
                        [in, optional] VARIANT* FileName, 
                        [in, optional] VARIANT* FileFormat, 
                        [in, optional] VARIANT* LockComments, 
                        [in, optional] VARIANT* Password, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* WritePassword, 
                        [in, optional] VARIANT* ReadOnlyRecommended, 
                        [in, optional] VARIANT* EmbedTrueTypeFonts, 
                        [in, optional] VARIANT* SaveNativePictureFormat, 
                        [in, optional] VARIANT* SaveFormsData, 
                        [in, optional] VARIANT* SaveAsAOCELetter, 
                        [in, optional] VARIANT* Encoding, 
                        [in, optional] VARIANT* InsertLineBreaks, 
                        [in, optional] VARIANT* AllowSubstitutions, 
                        [in, optional] VARIANT* LineEnding, 
                        [in, optional] VARIANT* AddBiDiMarks, 
                        [in, optional] VARIANT* CompatibilityMode);
    };

    [
      odl,
      uuid(0002096A-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000096a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Template : IDispatch {
        [id(00000000), propget, helpcontext(0x096a0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000003e8), propget, helpcontext(0x096a03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x096a0001)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000002), propget, hidden, helpcontext(0x096a0002)]
        HRESULT AutoTextEntries([out, retval] AutoTextEntries** prop);
        [id(0x00000004), propget, helpcontext(0x096a0004)]
        HRESULT LanguageID([out, retval] WdLanguageID* prop);
        [id(0x00000004), propput, helpcontext(0x096a0004)]
        HRESULT LanguageID([in] WdLanguageID prop);
        [id(0x00000005), propget, helpcontext(0x096a0005)]
        HRESULT Saved([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x096a0005)]
        HRESULT Saved([in] VARIANT_BOOL prop);
        [id(0x00000006), propget, helpcontext(0x096a0006)]
        HRESULT Type([out, retval] WdTemplateType* prop);
        [id(0x00000007), propget, helpcontext(0x096a0007)]
        HRESULT FullName([out, retval] BSTR* prop);
        [id(0x00000008), propget, helpcontext(0x096a0008)]
        HRESULT BuiltInDocumentProperties([out, retval] IDispatch** prop);
        [id(0x00000009), propget, helpcontext(0x096a0009)]
        HRESULT CustomDocumentProperties([out, retval] IDispatch** prop);
        [id(0x0000000a), propget, helpcontext(0x096a000a)]
        HRESULT ListTemplates([out, retval] ListTemplates** prop);
        [id(0x0000000b), propget, helpcontext(0x096a000b)]
        HRESULT LanguageIDFarEast([out, retval] WdLanguageID* prop);
        [id(0x0000000b), propput, helpcontext(0x096a000b)]
        HRESULT LanguageIDFarEast([in] WdLanguageID prop);
        [id(0x00000063), propget, helpcontext(0x096a0063)]
        HRESULT VBProject([out, retval] VBProject** prop);
        [id(0x0000000c), propget, helpcontext(0x096a000c)]
        HRESULT KerningByAlgorithm([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propput, helpcontext(0x096a000c)]
        HRESULT KerningByAlgorithm([in] VARIANT_BOOL prop);
        [id(0x0000000d), propget, helpcontext(0x096a000d)]
        HRESULT JustificationMode([out, retval] WdJustificationMode* prop);
        [id(0x0000000d), propput, helpcontext(0x096a000d)]
        HRESULT JustificationMode([in] WdJustificationMode prop);
        [id(0x0000000e), propget, helpcontext(0x096a000e)]
        HRESULT FarEastLineBreakLevel([out, retval] WdFarEastLineBreakLevel* prop);
        [id(0x0000000e), propput, helpcontext(0x096a000e)]
        HRESULT FarEastLineBreakLevel([in] WdFarEastLineBreakLevel prop);
        [id(0x0000000f), propget, helpcontext(0x096a000f)]
        HRESULT NoLineBreakBefore([out, retval] BSTR* prop);
        [id(0x0000000f), propput, helpcontext(0x096a000f)]
        HRESULT NoLineBreakBefore([in] BSTR prop);
        [id(0x00000010), propget, helpcontext(0x096a0010)]
        HRESULT NoLineBreakAfter([out, retval] BSTR* prop);
        [id(0x00000010), propput, helpcontext(0x096a0010)]
        HRESULT NoLineBreakAfter([in] BSTR prop);
        [id(0x00000064), helpcontext(0x096a0064)]
        HRESULT OpenAsDocument([out, retval] _Document** prop);
        [id(0x00000065), helpcontext(0x096a0065)]
        HRESULT Save();
        [id(0x00000011), propget, helpcontext(0x096a0011)]
        HRESULT NoProofing([out, retval] long* prop);
        [id(0x00000011), propput, helpcontext(0x096a0011)]
        HRESULT NoProofing([in] long prop);
        [id(0x00000012), propget, helpcontext(0x096a0012)]
        HRESULT FarEastLineBreakLanguage([out, retval] WdFarEastLineBreakLanguageID* prop);
        [id(0x00000012), propput, helpcontext(0x096a0012)]
        HRESULT FarEastLineBreakLanguage([in] WdFarEastLineBreakLanguageID prop);
        [id(0x00000013), propget, helpcontext(0x096a0013)]
        HRESULT BuildingBlockEntries([out, retval] BuildingBlockEntries** prop);
        [id(0x00000014), propget, helpcontext(0x096a0014)]
        HRESULT BuildingBlockTypes([out, retval] BuildingBlockTypes** prop);
    };

    [
      odl,
      uuid(000209A2-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009a2),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Templates : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09a203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09a203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09a203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09a20001)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x09a2fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x09a20000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Template** prop);
        [id(0x00000064), helpcontext(0x09a20064)]
        HRESULT LoadBuildingBlocks();
    };

    [
      odl,
      uuid(00020969-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000969),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface RoutingSlip : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x096903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09690001)]
        HRESULT Subject([out, retval] BSTR* prop);
        [id(0x00000001), propput, helpcontext(0x09690001)]
        HRESULT Subject([in] BSTR prop);
        [id(0x00000002), propget, helpcontext(0x09690002)]
        HRESULT Message([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x09690002)]
        HRESULT Message([in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x09690003)]
        HRESULT Delivery([out, retval] WdRoutingSlipDelivery* prop);
        [id(0x00000003), propput, helpcontext(0x09690003)]
        HRESULT Delivery([in] WdRoutingSlipDelivery prop);
        [id(0x00000004), propget, helpcontext(0x09690004)]
        HRESULT TrackStatus([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09690004)]
        HRESULT TrackStatus([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x09690005)]
        HRESULT Protect([out, retval] WdProtectionType* prop);
        [id(0x00000005), propput, helpcontext(0x09690005)]
        HRESULT Protect([in] WdProtectionType prop);
        [id(0x00000006), propget, helpcontext(0x09690006)]
        HRESULT ReturnWhenDone([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x09690006)]
        HRESULT ReturnWhenDone([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09690007)]
        HRESULT Status([out, retval] WdRoutingSlipStatus* prop);
        [id(0x00000009), propget, helpcontext(0x09690009)]
        HRESULT Recipients(
                        [in, optional] VARIANT* Index, 
                        [out, retval] VARIANT* prop);
        [id(0x00000065), helpcontext(0x09690065)]
        HRESULT Reset();
        [id(0x00000066), helpcontext(0x09690066)]
        HRESULT AddRecipient([in] BSTR Recipient);
    };


    [
      odl,
      uuid(00020968-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000968),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Bookmark : IDispatch {
        [id(00000000), propget, helpcontext(0x09680000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09680001)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000002), propget, helpcontext(0x09680002)]
        HRESULT Empty([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propget, helpcontext(0x09680003)]
        HRESULT Start([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x09680003)]
        HRESULT Start([in] long prop);
        [id(0x00000004), propget, helpcontext(0x09680004)]
        HRESULT End([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x09680004)]
        HRESULT End([in] long prop);
        [id(0x00000005), propget, helpcontext(0x09680005)]
        HRESULT Column([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propget, helpcontext(0x09680006)]
        HRESULT StoryType([out, retval] WdStoryType* prop);
        [id(0x000003e8), propget, helpcontext(0x096803e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000ffff), helpcontext(0x0968ffff)]
        HRESULT Select();
        [id(0x0000000b), helpcontext(0x0968000b)]
        HRESULT Delete();
        [id(0x0000000c), helpcontext(0x0968000c)]
        HRESULT Copy(
                        [in] BSTR Name, 
                        [out, retval] Bookmark** prop);
    };

    [
      odl,
      uuid(00020967-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000967),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Bookmarks : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0967fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09670002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09670003)]
        HRESULT DefaultSorting([out, retval] WdBookmarkSortBy* prop);
        [id(0x00000003), propput, helpcontext(0x09670003)]
        HRESULT DefaultSorting([in] WdBookmarkSortBy prop);
        [id(0x00000004), propget, helpcontext(0x09670004)]
        HRESULT ShowHidden([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09670004)]
        HRESULT ShowHidden([in] VARIANT_BOOL prop);
        [id(0x000003e8), propget, helpcontext(0x096703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09670000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Bookmark** prop);
        [id(0x00000005), helpcontext(0x09670005)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] Bookmark** prop);
        [id(0x00000006), helpcontext(0x09670006)]
        HRESULT Exists(
                        [in] BSTR Name, 
                        [out, retval] VARIANT_BOOL* prop);
    };

    [
      odl,
      uuid(00020966-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000966),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Variable : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x096603e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09660001)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(00000000), propget, helpcontext(0x09660000)]
        HRESULT Value([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x09660000)]
        HRESULT Value([in] BSTR prop);
        [id(0x00000002), propget, helpcontext(0x09660002)]
        HRESULT Index([out, retval] long* prop);
        [id(0x0000000b), helpcontext(0x0966000b)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(00020965-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000965),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Variables : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0965fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09650002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x096503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09650000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Variable** prop);
        [id(0x00000007), helpcontext(0x09650007)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Value, 
                        [out, retval] Variable** prop);
    };

    [
      odl,
      uuid(00020964-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000964),
      dual,
      nonextensible,
      oleautomation
    ]
    interface RecentFile : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x096403e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09640000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09640001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09640002)]
        HRESULT ReadOnly([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09640002)]
        HRESULT ReadOnly([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x09640003)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000004), helpcontext(0x09640004)]
        HRESULT Open([out, retval] _Document** prop);
        [id(0x00000005), helpcontext(0x09640005)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(00020963-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000963),
      dual,
      nonextensible,
      oleautomation
    ]
    interface RecentFiles : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x096303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0963fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09630001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09630002)]
        HRESULT Maximum([out, retval] long* prop);
        [id(0x00000002), propput, helpcontext(0x09630002)]
        HRESULT Maximum([in] long prop);
        [id(00000000), helpcontext(0x09630000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] RecentFile** prop);
        [id(0x00000003), helpcontext(0x09630003)]
        HRESULT Add(
                        [in] VARIANT* Document, 
                        [in, optional] VARIANT* ReadOnly, 
                        [out, retval] RecentFile** prop);
    };

    [
      odl,
      uuid(00020962-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000962),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Window : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x096203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09620001)]
        HRESULT ActivePane([out, retval] Pane** prop);
        [id(0x00000002), propget, helpcontext(0x09620002)]
        HRESULT Document([out, retval] _Document** prop);
        [id(0x00000003), propget, helpcontext(0x09620003)]
        HRESULT Panes([out, retval] Panes** prop);
        [id(0x00000004), propget, helpcontext(0x09620004)]
        HRESULT Selection([out, retval] Selection** prop);
        [id(0x00000005), propget, helpcontext(0x09620005)]
        HRESULT Left([out, retval] long* prop);
        [id(0x00000005), propput, helpcontext(0x09620005)]
        HRESULT Left([in] long prop);
        [id(0x00000006), propget, helpcontext(0x09620006)]
        HRESULT Top([out, retval] long* prop);
        [id(0x00000006), propput, helpcontext(0x09620006)]
        HRESULT Top([in] long prop);
        [id(0x00000007), propget, helpcontext(0x09620007)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000007), propput, helpcontext(0x09620007)]
        HRESULT Width([in] long prop);
        [id(0x00000008), propget, helpcontext(0x09620008)]
        HRESULT Height([out, retval] long* prop);
        [id(0x00000008), propput, helpcontext(0x09620008)]
        HRESULT Height([in] long prop);
        [id(0x00000009), propget, helpcontext(0x09620009)]
        HRESULT Split([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x09620009)]
        HRESULT Split([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x0962000a)]
        HRESULT SplitVertical([out, retval] long* prop);
        [id(0x0000000a), propput, helpcontext(0x0962000a)]
        HRESULT SplitVertical([in] long prop);
        [id(00000000), propget, helpcontext(0x09620000)]
        HRESULT Caption([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x09620000)]
        HRESULT Caption([in] BSTR prop);
        [id(0x0000000b), propget, helpcontext(0x0962000b)]
        HRESULT WindowState([out, retval] WdWindowState* prop);
        [id(0x0000000b), propput, helpcontext(0x0962000b)]
        HRESULT WindowState([in] WdWindowState prop);
        [id(0x0000000c), propget, helpcontext(0x0962000c)]
        HRESULT DisplayRulers([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propput, helpcontext(0x0962000c)]
        HRESULT DisplayRulers([in] VARIANT_BOOL prop);
        [id(0x0000000d), propget, helpcontext(0x0962000d)]
        HRESULT DisplayVerticalRuler([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), propput, helpcontext(0x0962000d)]
        HRESULT DisplayVerticalRuler([in] VARIANT_BOOL prop);
        [id(0x0000000e), propget, helpcontext(0x0962000e)]
        HRESULT View([out, retval] View** prop);
        [id(0x0000000f), propget, helpcontext(0x0962000f)]
        HRESULT Type([out, retval] WdWindowType* prop);
        [id(0x00000010), propget, helpcontext(0x09620010)]
        HRESULT Next([out, retval] Window** prop);
        [id(0x00000011), propget, helpcontext(0x09620011)]
        HRESULT Previous([out, retval] Window** prop);
        [id(0x00000012), propget, helpcontext(0x09620012)]
        HRESULT WindowNumber([out, retval] long* prop);
        [id(0x00000013), propget, helpcontext(0x09620013)]
        HRESULT DisplayVerticalScrollBar([out, retval] VARIANT_BOOL* prop);
        [id(0x00000013), propput, helpcontext(0x09620013)]
        HRESULT DisplayVerticalScrollBar([in] VARIANT_BOOL prop);
        [id(0x00000014), propget, helpcontext(0x09620014)]
        HRESULT DisplayHorizontalScrollBar([out, retval] VARIANT_BOOL* prop);
        [id(0x00000014), propput, helpcontext(0x09620014)]
        HRESULT DisplayHorizontalScrollBar([in] VARIANT_BOOL prop);
        [id(0x00000015), propget, helpcontext(0x09620015)]
        HRESULT StyleAreaWidth([out, retval] single* prop);
        [id(0x00000015), propput, helpcontext(0x09620015)]
        HRESULT StyleAreaWidth([in] single prop);
        [id(0x00000016), propget, helpcontext(0x09620016)]
        HRESULT DisplayScreenTips([out, retval] VARIANT_BOOL* prop);
        [id(0x00000016), propput, helpcontext(0x09620016)]
        HRESULT DisplayScreenTips([in] VARIANT_BOOL prop);
        [id(0x00000017), propget, helpcontext(0x09620017)]
        HRESULT HorizontalPercentScrolled([out, retval] long* prop);
        [id(0x00000017), propput, helpcontext(0x09620017)]
        HRESULT HorizontalPercentScrolled([in] long prop);
        [id(0x00000018), propget, helpcontext(0x09620018)]
        HRESULT VerticalPercentScrolled([out, retval] long* prop);
        [id(0x00000018), propput, helpcontext(0x09620018)]
        HRESULT VerticalPercentScrolled([in] long prop);
        [id(0x00000019), propget, helpcontext(0x09620019)]
        HRESULT DocumentMap([out, retval] VARIANT_BOOL* prop);
        [id(0x00000019), propput, helpcontext(0x09620019)]
        HRESULT DocumentMap([in] VARIANT_BOOL prop);
        [id(0x0000001a), propget, helpcontext(0x0962001a)]
        HRESULT Active([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001b), propget, hidden, helpcontext(0x0962001b)]
        HRESULT DocumentMapPercentWidth([out, retval] long* prop);
        [id(0x0000001b), propput, hidden, helpcontext(0x0962001b)]
        HRESULT DocumentMapPercentWidth([in] long prop);
        [id(0x0000001c), propget, helpcontext(0x0962001c)]
        HRESULT Index([out, retval] long* prop);
        [id(0x0000001e), propget, helpcontext(0x0962001e)]
        HRESULT IMEMode([out, retval] WdIMEMode* prop);
        [id(0x0000001e), propput, helpcontext(0x0962001e)]
        HRESULT IMEMode([in] WdIMEMode prop);
        [id(0x00000064), helpcontext(0x09620064)]
        HRESULT Activate();
        [id(0x00000066), helpcontext(0x09620066)]
        HRESULT Close(
                        [in, optional] VARIANT* SaveChanges, 
                        [in, optional] VARIANT* RouteDocument);
        [id(0x00000067), helpcontext(0x09620067)]
        HRESULT LargeScroll(
                        [in, optional] VARIANT* Down, 
                        [in, optional] VARIANT* Up, 
                        [in, optional] VARIANT* ToRight, 
                        [in, optional] VARIANT* ToLeft);
        [id(0x00000068), helpcontext(0x09620068)]
        HRESULT SmallScroll(
                        [in, optional] VARIANT* Down, 
                        [in, optional] VARIANT* Up, 
                        [in, optional] VARIANT* ToRight, 
                        [in, optional] VARIANT* ToLeft);
        [id(0x00000069), helpcontext(0x09620069)]
        HRESULT NewWindow([out, retval] Window** prop);
        [id(0x0000006b), hidden, helpcontext(0x0962006b)]
        HRESULT PrintOutOld(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint);
        [id(0x0000006c), helpcontext(0x0962006c)]
        HRESULT PageScroll(
                        [in, optional] VARIANT* Down, 
                        [in, optional] VARIANT* Up);
        [id(0x0000006d), helpcontext(0x0962006d)]
        HRESULT SetFocus();
        [id(0x0000006e), helpcontext(0x0962006e)]
        HRESULT RangeFromPoint(
                        [in] long x, 
                        [in] long y, 
                        [out, retval] IDispatch** prop);
        [id(0x0000006f), helpcontext(0x0962006f)]
        HRESULT ScrollIntoView(
                        [in] IDispatch* obj, 
                        [in, optional] VARIANT* Start);
        [id(0x00000070), helpcontext(0x09620070)]
        HRESULT GetPoint(
                        [out] long* ScreenPixelsLeft, 
                        [out] long* ScreenPixelsTop, 
                        [out] long* ScreenPixelsWidth, 
                        [out] long* ScreenPixelsHeight, 
                        [in] IDispatch* obj);
        [id(0x000001bc), hidden, helpcontext(0x096201bc)]
        HRESULT PrintOut2000(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint, 
                        [in, optional] VARIANT* PrintZoomColumn, 
                        [in, optional] VARIANT* PrintZoomRow, 
                        [in, optional] VARIANT* PrintZoomPaperWidth, 
                        [in, optional] VARIANT* PrintZoomPaperHeight);
        [id(0x0000001f), propget, helpcontext(0x0962001f)]
        HRESULT UsableWidth([out, retval] long* prop);
        [id(0x00000020), propget, helpcontext(0x09620020)]
        HRESULT UsableHeight([out, retval] long* prop);
        [id(0x00000021), propget, helpcontext(0x09620021)]
        HRESULT EnvelopeVisible([out, retval] VARIANT_BOOL* prop);
        [id(0x00000021), propput, helpcontext(0x09620021)]
        HRESULT EnvelopeVisible([in] VARIANT_BOOL prop);
        [id(0x00000023), propget, helpcontext(0x09620023)]
        HRESULT DisplayRightRuler([out, retval] VARIANT_BOOL* prop);
        [id(0x00000023), propput, helpcontext(0x09620023)]
        HRESULT DisplayRightRuler([in] VARIANT_BOOL prop);
        [id(0x00000022), propget, helpcontext(0x09620022)]
        HRESULT DisplayLeftScrollBar([out, retval] VARIANT_BOOL* prop);
        [id(0x00000022), propput, helpcontext(0x09620022)]
        HRESULT DisplayLeftScrollBar([in] VARIANT_BOOL prop);
        [id(0x00000024), propget, helpcontext(0x09620024)]
        HRESULT Visible([out, retval] VARIANT_BOOL* prop);
        [id(0x00000024), propput, helpcontext(0x09620024)]
        HRESULT Visible([in] VARIANT_BOOL prop);
        [id(0x000001bd), helpcontext(0x096201bd)]
        HRESULT PrintOut(
                        [in, optional] VARIANT* Background, 
                        [in, optional] VARIANT* Append, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* OutputFileName, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* Item, 
                        [in, optional] VARIANT* Copies, 
                        [in, optional] VARIANT* Pages, 
                        [in, optional] VARIANT* PageType, 
                        [in, optional] VARIANT* PrintToFile, 
                        [in, optional] VARIANT* Collate, 
                        [in, optional] VARIANT* ActivePrinterMacGX, 
                        [in, optional] VARIANT* ManualDuplexPrint, 
                        [in, optional] VARIANT* PrintZoomColumn, 
                        [in, optional] VARIANT* PrintZoomRow, 
                        [in, optional] VARIANT* PrintZoomPaperWidth, 
                        [in, optional] VARIANT* PrintZoomPaperHeight);
        [id(0x000001be), hidden, helpcontext(0x096201be)]
        HRESULT ToggleShowAllReviewers();
        [id(0x00000025), propget, helpcontext(0x09620025)]
        HRESULT Thumbnails([out, retval] VARIANT_BOOL* prop);
        [id(0x00000025), propput, helpcontext(0x09620025)]
        HRESULT Thumbnails([in] VARIANT_BOOL prop);
        [id(0x00000026), propget, helpcontext(0x09620026)]
        HRESULT ShowSourceDocuments([out, retval] WdShowSourceDocuments* prop);
        [id(0x00000026), propput, helpcontext(0x09620026)]
        HRESULT ShowSourceDocuments([in] WdShowSourceDocuments prop);
        [id(0x000001bf), helpcontext(0x096201bf)]
        HRESULT ToggleRibbon();
        [id(0x00000027), propget, helpcontext(0x09620027)]
        HRESULT Hwnd([out, retval] long* prop);
    };

    [
      odl,
      uuid(00020961-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000961),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Windows : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0961fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09610002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x096103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09610000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Window** prop);
        [id(0x0000000a), helpcontext(0x0961000a)]
        HRESULT Add(
                        [in, optional] VARIANT* Window, 
                        [out, retval] Window** prop);
        [id(0x0000000b), helpcontext(0x0961000b)]
        HRESULT Arrange([in, optional] VARIANT* ArrangeStyle);
        [id(0x0000000c), helpcontext(0x0961000c)]
        HRESULT CompareSideBySideWith(
                        [in] VARIANT* Document, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), helpcontext(0x0961000d)]
        HRESULT BreakSideBySide([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000e), helpcontext(0x0961000e)]
        HRESULT ResetPositionsSideBySide();
        [id(0x000003eb), propget, helpcontext(0x096103eb)]
        HRESULT SyncScrollingSideBySide([out, retval] VARIANT_BOOL* prop);
        [id(0x000003eb), propput, helpcontext(0x096103eb)]
        HRESULT SyncScrollingSideBySide([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020960-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000960),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Pane : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x096003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x096003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x096003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09600001)]
        HRESULT Document([out, retval] _Document** prop);
        [id(0x00000003), propget, helpcontext(0x09600003)]
        HRESULT Selection([out, retval] Selection** prop);
        [id(0x00000004), propget, helpcontext(0x09600004)]
        HRESULT DisplayRulers([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09600004)]
        HRESULT DisplayRulers([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x09600005)]
        HRESULT DisplayVerticalRuler([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x09600005)]
        HRESULT DisplayVerticalRuler([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09600007)]
        HRESULT Zooms([out, retval] Zooms** prop);
        [id(0x00000009), propget, helpcontext(0x09600009)]
        HRESULT Index([out, retval] long* prop);
        [id(0x0000000a), propget, helpcontext(0x0960000a)]
        HRESULT View([out, retval] View** prop);
        [id(0x0000000b), propget, helpcontext(0x0960000b)]
        HRESULT Next([out, retval] Pane** prop);
        [id(0x0000000c), propget, helpcontext(0x0960000c)]
        HRESULT Previous([out, retval] Pane** prop);
        [id(0x0000000d), propget, helpcontext(0x0960000d)]
        HRESULT HorizontalPercentScrolled([out, retval] long* prop);
        [id(0x0000000d), propput, helpcontext(0x0960000d)]
        HRESULT HorizontalPercentScrolled([in] long prop);
        [id(0x0000000e), propget, helpcontext(0x0960000e)]
        HRESULT VerticalPercentScrolled([out, retval] long* prop);
        [id(0x0000000e), propput, helpcontext(0x0960000e)]
        HRESULT VerticalPercentScrolled([in] long prop);
        [id(0x0000000f), propget, helpcontext(0x0960000f)]
        HRESULT MinimumFontSize([out, retval] long* prop);
        [id(0x0000000f), propput, helpcontext(0x0960000f)]
        HRESULT MinimumFontSize([in] long prop);
        [id(0x00000010), propget, hidden, helpcontext(0x09600010)]
        HRESULT BrowseToWindow([out, retval] VARIANT_BOOL* prop);
        [id(0x00000010), propput, hidden, helpcontext(0x09600010)]
        HRESULT BrowseToWindow([in] VARIANT_BOOL prop);
        [id(0x00000011), propget, helpcontext(0x09600011)]
        HRESULT BrowseWidth([out, retval] long* prop);
        [id(0x00000064), helpcontext(0x09600064)]
        HRESULT Activate();
        [id(0x00000065), helpcontext(0x09600065)]
        HRESULT Close();
        [id(0x00000066), helpcontext(0x09600066)]
        HRESULT LargeScroll(
                        [in, optional] VARIANT* Down, 
                        [in, optional] VARIANT* Up, 
                        [in, optional] VARIANT* ToRight, 
                        [in, optional] VARIANT* ToLeft);
        [id(0x00000067), helpcontext(0x09600067)]
        HRESULT SmallScroll(
                        [in, optional] VARIANT* Down, 
                        [in, optional] VARIANT* Up, 
                        [in, optional] VARIANT* ToRight, 
                        [in, optional] VARIANT* ToLeft);
        [id(0x00000068), helpcontext(0x09600068)]
        HRESULT AutoScroll([in] long Velocity);
        [id(0x00000069), helpcontext(0x09600069)]
        HRESULT PageScroll(
                        [in, optional] VARIANT* Down, 
                        [in, optional] VARIANT* Up);
        [id(0x0000006a), helpcontext(0x0960006a)]
        HRESULT NewFrameset();
        [id(0x0000006b), helpcontext(0x0960006b)]
        HRESULT TOCInFrameset();
        [id(0x00000012), propget, helpcontext(0x09600012)]
        HRESULT Frameset([out, retval] Frameset** prop);
        [id(0x00000013), propget, helpcontext(0x09600013)]
        HRESULT Pages([out, retval] Pages** prop);
    };

    [
      odl,
      uuid(0002095F-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000095f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Panes : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x095ffffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x095f0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x095f03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095f03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095f03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x095f0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Pane** prop);
        [id(0x00000003), helpcontext(0x095f0003)]
        HRESULT Add(
                        [in, optional] VARIANT* SplitVertical, 
                        [out, retval] Pane** prop);
    };

    [
      odl,
      uuid(0002095E-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000095e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Range : IDispatch {
        [id(00000000), propget, helpcontext(0x095e0000)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x095e0000)]
        HRESULT Text([in] BSTR prop);
        [id(0x00000002), propget, helpcontext(0x095e0002)]
        HRESULT FormattedText([out, retval] Range** prop);
        [id(0x00000002), propput, helpcontext(0x095e0002)]
        HRESULT FormattedText([in] Range* prop);
        [id(0x00000003), propget, helpcontext(0x095e0003)]
        HRESULT Start([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x095e0003)]
        HRESULT Start([in] long prop);
        [id(0x00000004), propget, helpcontext(0x095e0004)]
        HRESULT End([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x095e0004)]
        HRESULT End([in] long prop);
        [id(0x00000005), propget, helpcontext(0x095e0005)]
        HRESULT Font([out, retval] _Font** prop);
        [id(0x00000005), propput, helpcontext(0x095e0005)]
        HRESULT Font([in] _Font* prop);
        [id(0x00000006), propget, helpcontext(0x095e0006)]
        HRESULT Duplicate([out, retval] Range** prop);
        [id(0x00000007), propget, helpcontext(0x095e0007)]
        HRESULT StoryType([out, retval] WdStoryType* prop);
        [id(0x00000032), propget, helpcontext(0x095e0032)]
        HRESULT Tables([out, retval] Tables** prop);
        [id(0x00000033), propget, helpcontext(0x095e0033)]
        HRESULT Words([out, retval] Words** prop);
        [id(0x00000034), propget, helpcontext(0x095e0034)]
        HRESULT Sentences([out, retval] Sentences** prop);
        [id(0x00000035), propget, helpcontext(0x095e0035)]
        HRESULT Characters([out, retval] Characters** prop);
        [id(0x00000036), propget, helpcontext(0x095e0036)]
        HRESULT Footnotes([out, retval] Footnotes** prop);
        [id(0x00000037), propget, helpcontext(0x095e0037)]
        HRESULT Endnotes([out, retval] Endnotes** prop);
        [id(0x00000038), propget, helpcontext(0x095e0038)]
        HRESULT Comments([out, retval] Comments** prop);
        [id(0x00000039), propget, helpcontext(0x095e0039)]
        HRESULT Cells([out, retval] Cells** prop);
        [id(0x0000003a), propget, helpcontext(0x095e003a)]
        HRESULT Sections([out, retval] Sections** prop);
        [id(0x0000003b), propget, helpcontext(0x095e003b)]
        HRESULT Paragraphs([out, retval] Paragraphs** prop);
        [id(0x0000044c), propget, helpcontext(0x095e044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x095e044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x0000003d), propget, helpcontext(0x095e003d)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x0000003e), propget, helpcontext(0x095e003e)]
        HRESULT TextRetrievalMode([out, retval] TextRetrievalMode** prop);
        [id(0x0000003e), propput, helpcontext(0x095e003e)]
        HRESULT TextRetrievalMode([in] TextRetrievalMode* prop);
        [id(0x00000040), propget, helpcontext(0x095e0040)]
        HRESULT Fields([out, retval] Fields** prop);
        [id(0x00000041), propget, helpcontext(0x095e0041)]
        HRESULT FormFields([out, retval] FormFields** prop);
        [id(0x00000042), propget, helpcontext(0x095e0042)]
        HRESULT Frames([out, retval] Frames** prop);
        [id(0x0000044e), propget, helpcontext(0x095e044e)]
        HRESULT ParagraphFormat([out, retval] _ParagraphFormat** prop);
        [id(0x0000044e), propput, helpcontext(0x095e044e)]
        HRESULT ParagraphFormat([in] _ParagraphFormat* prop);
        [id(0x00000044), propget, helpcontext(0x095e0044)]
        HRESULT ListFormat([out, retval] ListFormat** prop);
        [id(0x0000004b), propget, helpcontext(0x095e004b)]
        HRESULT Bookmarks([out, retval] Bookmarks** prop);
        [id(0x000003e8), propget, helpcontext(0x095e03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000082), propget, helpcontext(0x095e0082)]
        HRESULT Bold([out, retval] long* prop);
        [id(0x00000082), propput, helpcontext(0x095e0082)]
        HRESULT Bold([in] long prop);
        [id(0x00000083), propget, helpcontext(0x095e0083)]
        HRESULT Italic([out, retval] long* prop);
        [id(0x00000083), propput, helpcontext(0x095e0083)]
        HRESULT Italic([in] long prop);
        [id(0x0000008b), propget, helpcontext(0x095e008b)]
        HRESULT Underline([out, retval] WdUnderline* prop);
        [id(0x0000008b), propput, helpcontext(0x095e008b)]
        HRESULT Underline([in] WdUnderline prop);
        [id(0x0000008c), propget, helpcontext(0x095e008c)]
        HRESULT EmphasisMark([out, retval] WdEmphasisMark* prop);
        [id(0x0000008c), propput, helpcontext(0x095e008c)]
        HRESULT EmphasisMark([in] WdEmphasisMark prop);
        [id(0x0000008d), propget, helpcontext(0x095e008d)]
        HRESULT DisableCharacterSpaceGrid([out, retval] VARIANT_BOOL* prop);
        [id(0x0000008d), propput, helpcontext(0x095e008d)]
        HRESULT DisableCharacterSpaceGrid([in] VARIANT_BOOL prop);
        [id(0x00000096), propget, helpcontext(0x095e0096)]
        HRESULT Revisions([out, retval] Revisions** prop);
        [id(0x00000097), propget, helpcontext(0x095e0097)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(0x00000097), propput, helpcontext(0x095e0097)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x00000098), propget, helpcontext(0x095e0098)]
        HRESULT StoryLength([out, retval] long* prop);
        [id(0x00000099), propget, helpcontext(0x095e0099)]
        HRESULT LanguageID([out, retval] WdLanguageID* prop);
        [id(0x00000099), propput, helpcontext(0x095e0099)]
        HRESULT LanguageID([in] WdLanguageID prop);
        [id(0x0000009b), propget, helpcontext(0x095e009b)]
        HRESULT SynonymInfo([out, retval] SynonymInfo** prop);
        [id(0x0000009c), propget, helpcontext(0x095e009c)]
        HRESULT Hyperlinks([out, retval] Hyperlinks** prop);
        [id(0x0000009d), propget, helpcontext(0x095e009d)]
        HRESULT ListParagraphs([out, retval] ListParagraphs** prop);
        [id(0x0000009f), propget, helpcontext(0x095e009f)]
        HRESULT Subdocuments([out, retval] Subdocuments** prop);
        [id(0x00000104), propget, helpcontext(0x095e0104)]
        HRESULT GrammarChecked([out, retval] VARIANT_BOOL* prop);
        [id(0x00000104), propput, helpcontext(0x095e0104)]
        HRESULT GrammarChecked([in] VARIANT_BOOL prop);
        [id(0x00000105), propget, helpcontext(0x095e0105)]
        HRESULT SpellingChecked([out, retval] VARIANT_BOOL* prop);
        [id(0x00000105), propput, helpcontext(0x095e0105)]
        HRESULT SpellingChecked([in] VARIANT_BOOL prop);
        [id(0x0000012d), propget, helpcontext(0x095e012d)]
        HRESULT HighlightColorIndex([out, retval] WdColorIndex* prop);
        [id(0x0000012d), propput, helpcontext(0x095e012d)]
        HRESULT HighlightColorIndex([in] WdColorIndex prop);
        [id(0x0000012e), propget, helpcontext(0x095e012e)]
        HRESULT Columns([out, retval] Columns** prop);
        [id(0x0000012f), propget, helpcontext(0x095e012f)]
        HRESULT Rows([out, retval] Rows** prop);
        [id(0x00000130), propget, hidden, helpcontext(0x095e0130)]
        HRESULT CanEdit([out, retval] long* prop);
        [id(0x00000131), propget, hidden, helpcontext(0x095e0131)]
        HRESULT CanPaste([out, retval] long* prop);
        [id(0x00000133), propget, helpcontext(0x095e0133)]
        HRESULT IsEndOfRowMark([out, retval] VARIANT_BOOL* prop);
        [id(0x00000134), propget, helpcontext(0x095e0134)]
        HRESULT BookmarkID([out, retval] long* prop);
        [id(0x00000135), propget, helpcontext(0x095e0135)]
        HRESULT PreviousBookmarkID([out, retval] long* prop);
        [id(0x00000106), propget, helpcontext(0x095e0106)]
        HRESULT Find([out, retval] Find** prop);
        [id(0x0000044d), propget, helpcontext(0x095e044d)]
        HRESULT PageSetup([out, retval] PageSetup** prop);
        [id(0x0000044d), propput, helpcontext(0x095e044d)]
        HRESULT PageSetup([in] PageSetup* prop);
        [id(0x00000137), propget, helpcontext(0x095e0137)]
        HRESULT ShapeRange([out, retval] ShapeRange** prop);
        [id(0x00000138), propget, helpcontext(0x095e0138)]
        HRESULT Case([out, retval] WdCharacterCase* prop);
        [id(0x00000138), propput, helpcontext(0x095e0138)]
        HRESULT Case([in] WdCharacterCase prop);
        [id(0x00000139), propget, helpcontext(0x095e0139)]
        HRESULT Information(
                        [in] WdInformation Type, 
                        [out, retval] VARIANT* prop);
        [id(0x0000013a), propget, helpcontext(0x095e013a)]
        HRESULT ReadabilityStatistics([out, retval] ReadabilityStatistics** prop);
        [id(0x0000013b), propget, helpcontext(0x095e013b)]
        HRESULT GrammaticalErrors([out, retval] ProofreadingErrors** prop);
        [id(0x0000013c), propget, helpcontext(0x095e013c)]
        HRESULT SpellingErrors([out, retval] ProofreadingErrors** prop);
        [id(0x0000013d), propget, helpcontext(0x095e013d)]
        HRESULT Orientation([out, retval] WdTextOrientation* prop);
        [id(0x0000013d), propput, helpcontext(0x095e013d)]
        HRESULT Orientation([in] WdTextOrientation prop);
        [id(0x0000013f), propget, helpcontext(0x095e013f)]
        HRESULT InlineShapes([out, retval] InlineShapes** prop);
        [id(0x00000140), propget, helpcontext(0x095e0140)]
        HRESULT NextStoryRange([out, retval] Range** prop);
        [id(0x00000141), propget, helpcontext(0x095e0141)]
        HRESULT LanguageIDFarEast([out, retval] WdLanguageID* prop);
        [id(0x00000141), propput, helpcontext(0x095e0141)]
        HRESULT LanguageIDFarEast([in] WdLanguageID prop);
        [id(0x00000142), propget, helpcontext(0x095e0142)]
        HRESULT LanguageIDOther([out, retval] WdLanguageID* prop);
        [id(0x00000142), propput, helpcontext(0x095e0142)]
        HRESULT LanguageIDOther([in] WdLanguageID prop);
        [id(0x0000ffff), helpcontext(0x095effff)]
        HRESULT Select();
        [id(0x00000064), helpcontext(0x095e0064)]
        HRESULT SetRange(
                        [in] long Start, 
                        [in] long End);
        [id(0x00000065), helpcontext(0x095e0065)]
        HRESULT Collapse([in, optional] VARIANT* Direction);
        [id(0x00000066), helpcontext(0x095e0066)]
        HRESULT InsertBefore([in] BSTR Text);
        [id(0x00000068), helpcontext(0x095e0068)]
        HRESULT InsertAfter([in] BSTR Text);
        [id(0x00000069), helpcontext(0x095e0069)]
        HRESULT Next(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] Range** prop);
        [id(0x0000006a), helpcontext(0x095e006a)]
        HRESULT Previous(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] Range** prop);
        [id(0x0000006b), helpcontext(0x095e006b)]
        HRESULT StartOf(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x0000006c), helpcontext(0x095e006c)]
        HRESULT EndOf(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x0000006d), helpcontext(0x095e006d)]
        HRESULT Move(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x0000006e), helpcontext(0x095e006e)]
        HRESULT MoveStart(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x0000006f), helpcontext(0x095e006f)]
        HRESULT MoveEnd(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000070), helpcontext(0x095e0070)]
        HRESULT MoveWhile(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000071), helpcontext(0x095e0071)]
        HRESULT MoveStartWhile(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000072), helpcontext(0x095e0072)]
        HRESULT MoveEndWhile(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000073), helpcontext(0x095e0073)]
        HRESULT MoveUntil(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000074), helpcontext(0x095e0074)]
        HRESULT MoveStartUntil(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000075), helpcontext(0x095e0075)]
        HRESULT MoveEndUntil(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000077), helpcontext(0x095e0077)]
        HRESULT Cut();
        [id(0x00000078), helpcontext(0x095e0078)]
        HRESULT Copy();
        [id(0x00000079), helpcontext(0x095e0079)]
        HRESULT Paste();
        [id(0x0000007a), helpcontext(0x095e007a)]
        HRESULT InsertBreak([in, optional] VARIANT* Type);
        [id(0x0000007b), helpcontext(0x095e007b)]
        HRESULT InsertFile(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* Link, 
                        [in, optional] VARIANT* Attachment);
        [id(0x0000007d), helpcontext(0x095e007d)]
        HRESULT InStory(
                        [in] Range* Range, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000007e), helpcontext(0x095e007e)]
        HRESULT InRange(
                        [in] Range* Range, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000007f), helpcontext(0x095e007f)]
        HRESULT Delete(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000080), helpcontext(0x095e0080)]
        HRESULT WholeStory();
        [id(0x00000081), helpcontext(0x095e0081)]
        HRESULT Expand(
                        [in, optional] VARIANT* Unit, 
                        [out, retval] long* prop);
        [id(0x000000a0), helpcontext(0x095e00a0)]
        HRESULT InsertParagraph();
        [id(0x000000a1), helpcontext(0x095e00a1)]
        HRESULT InsertParagraphAfter();
        [id(0x000000a2), hidden, helpcontext(0x095e00a2)]
        HRESULT ConvertToTableOld(
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* NumRows, 
                        [in, optional] VARIANT* NumColumns, 
                        [in, optional] VARIANT* InitialColumnWidth, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ApplyBorders, 
                        [in, optional] VARIANT* ApplyShading, 
                        [in, optional] VARIANT* ApplyFont, 
                        [in, optional] VARIANT* ApplyColor, 
                        [in, optional] VARIANT* ApplyHeadingRows, 
                        [in, optional] VARIANT* ApplyLastRow, 
                        [in, optional] VARIANT* ApplyFirstColumn, 
                        [in, optional] VARIANT* ApplyLastColumn, 
                        [in, optional] VARIANT* AutoFit, 
                        [out, retval] Table** prop);
        [id(0x000000a3), hidden, helpcontext(0x095e00a3)]
        HRESULT InsertDateTimeOld(
                        [in, optional] VARIANT* DateTimeFormat, 
                        [in, optional] VARIANT* InsertAsField, 
                        [in, optional] VARIANT* InsertAsFullWidth);
        [id(0x000000a4), helpcontext(0x095e00a4)]
        HRESULT InsertSymbol(
                        [in] long CharacterNumber, 
                        [in, optional] VARIANT* Font, 
                        [in, optional] VARIANT* Unicode, 
                        [in, optional] VARIANT* Bias);
        [id(0x000000a5), hidden, helpcontext(0x095e00a5)]
        HRESULT InsertCrossReference_2002(
                        [in] VARIANT* ReferenceType, 
                        [in] WdReferenceKind ReferenceKind, 
                        [in] VARIANT* ReferenceItem, 
                        [in, optional] VARIANT* InsertAsHyperlink, 
                        [in, optional] VARIANT* IncludePosition);
        [id(0x000000a6), hidden, helpcontext(0x095e00a6)]
        HRESULT InsertCaptionXP(
                        [in] VARIANT* Label, 
                        [in, optional] VARIANT* Title, 
                        [in, optional] VARIANT* TitleAutoText, 
                        [in, optional] VARIANT* Position);
        [id(0x000000a7), helpcontext(0x095e00a7)]
        HRESULT CopyAsPicture();
        [id(0x000000a8), hidden, helpcontext(0x095e00a8)]
        HRESULT SortOld(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* FieldNumber, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* FieldNumber2, 
                        [in, optional] VARIANT* SortFieldType2, 
                        [in, optional] VARIANT* SortOrder2, 
                        [in, optional] VARIANT* FieldNumber3, 
                        [in, optional] VARIANT* SortFieldType3, 
                        [in, optional] VARIANT* SortOrder3, 
                        [in, optional] VARIANT* SortColumn, 
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* LanguageID);
        [id(0x000000a9), helpcontext(0x095e00a9)]
        HRESULT SortAscending();
        [id(0x000000aa), helpcontext(0x095e00aa)]
        HRESULT SortDescending();
        [id(0x000000ab), helpcontext(0x095e00ab)]
        HRESULT IsEqual(
                        [in] Range* Range, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x000000ac), helpcontext(0x095e00ac)]
        HRESULT Calculate([out, retval] single* prop);
        [id(0x000000ad), helpcontext(0x095e00ad)]
        HRESULT GoTo(
                        [in, optional] VARIANT* What, 
                        [in, optional] VARIANT* Which, 
                        [in, optional] VARIANT* Count, 
                        [in, optional] VARIANT* Name, 
                        [out, retval] Range** prop);
        [id(0x000000ae), helpcontext(0x095e00ae)]
        HRESULT GoToNext(
                        [in] WdGoToItem What, 
                        [out, retval] Range** prop);
        [id(0x000000af), helpcontext(0x095e00af)]
        HRESULT GoToPrevious(
                        [in] WdGoToItem What, 
                        [out, retval] Range** prop);
        [id(0x000000b0), helpcontext(0x095e00b0)]
        HRESULT PasteSpecial(
                        [in, optional] VARIANT* IconIndex, 
                        [in, optional] VARIANT* Link, 
                        [in, optional] VARIANT* Placement, 
                        [in, optional] VARIANT* DisplayAsIcon, 
                        [in, optional] VARIANT* DataType, 
                        [in, optional] VARIANT* IconFileName, 
                        [in, optional] VARIANT* IconLabel);
        [id(0x000000b1), helpcontext(0x095e00b1)]
        HRESULT LookupNameProperties();
        [id(0x000000b2), helpcontext(0x095e00b2)]
        HRESULT ComputeStatistics(
                        [in] WdStatistic Statistic, 
                        [out, retval] long* prop);
        [id(0x000000b3), helpcontext(0x095e00b3)]
        HRESULT Relocate([in] long Direction);
        [id(0x000000b4), helpcontext(0x095e00b4)]
        HRESULT CheckSynonyms();
        [id(0x000000b5), hidden, helpcontext(0x095e00b5)]
        HRESULT SubscribeTo(
                        [in] BSTR Edition, 
                        [in, optional] VARIANT* Format);
        [id(0x000000b6), hidden, helpcontext(0x095e00b6)]
        HRESULT CreatePublisher(
                        [in, optional] VARIANT* Edition, 
                        [in, optional] VARIANT* ContainsPICT, 
                        [in, optional] VARIANT* ContainsRTF, 
                        [in, optional] VARIANT* ContainsText);
        [id(0x000000b7), helpcontext(0x095e00b7)]
        HRESULT InsertAutoText();
        [id(0x000000c2), helpcontext(0x095e00c2)]
        HRESULT InsertDatabase(
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* Style, 
                        [in, optional] VARIANT* LinkToSource, 
                        [in, optional] VARIANT* Connection, 
                        [in, optional] VARIANT* SQLStatement, 
                        [in, optional] VARIANT* SQLStatement1, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* DataSource, 
                        [in, optional] VARIANT* From, 
                        [in, optional] VARIANT* To, 
                        [in, optional] VARIANT* IncludeFields);
        [id(0x000000c3), helpcontext(0x095e00c3)]
        HRESULT AutoFormat();
        [id(0x000000cc), helpcontext(0x095e00cc)]
        HRESULT CheckGrammar();
        [id(0x000000cd), helpcontext(0x095e00cd)]
        HRESULT CheckSpelling(
                        [in, optional] VARIANT* CustomDictionary, 
                        [in, optional] VARIANT* IgnoreUppercase, 
                        [in, optional] VARIANT* AlwaysSuggest, 
                        [in, optional] VARIANT* CustomDictionary2, 
                        [in, optional] VARIANT* CustomDictionary3, 
                        [in, optional] VARIANT* CustomDictionary4, 
                        [in, optional] VARIANT* CustomDictionary5, 
                        [in, optional] VARIANT* CustomDictionary6, 
                        [in, optional] VARIANT* CustomDictionary7, 
                        [in, optional] VARIANT* CustomDictionary8, 
                        [in, optional] VARIANT* CustomDictionary9, 
                        [in, optional] VARIANT* CustomDictionary10);
        [id(0x000000d1), helpcontext(0x095e00d1)]
        HRESULT GetSpellingSuggestions(
                        [in, optional] VARIANT* CustomDictionary, 
                        [in, optional] VARIANT* IgnoreUppercase, 
                        [in, optional] VARIANT* MainDictionary, 
                        [in, optional] VARIANT* SuggestionMode, 
                        [in, optional] VARIANT* CustomDictionary2, 
                        [in, optional] VARIANT* CustomDictionary3, 
                        [in, optional] VARIANT* CustomDictionary4, 
                        [in, optional] VARIANT* CustomDictionary5, 
                        [in, optional] VARIANT* CustomDictionary6, 
                        [in, optional] VARIANT* CustomDictionary7, 
                        [in, optional] VARIANT* CustomDictionary8, 
                        [in, optional] VARIANT* CustomDictionary9, 
                        [in, optional] VARIANT* CustomDictionary10, 
                        [out, retval] SpellingSuggestions** prop);
        [id(0x000000d4), helpcontext(0x095e00d4)]
        HRESULT InsertParagraphBefore();
        [id(0x000000db), helpcontext(0x095e00db)]
        HRESULT NextSubdocument();
        [id(0x000000dc), helpcontext(0x095e00dc)]
        HRESULT PreviousSubdocument();
        [id(0x000000dd), helpcontext(0x095e00dd)]
        HRESULT ConvertHangulAndHanja(
                        [in, optional] VARIANT* ConversionsMode, 
                        [in, optional] VARIANT* FastConversion, 
                        [in, optional] VARIANT* CheckHangulEnding, 
                        [in, optional] VARIANT* EnableRecentOrdering, 
                        [in, optional] VARIANT* CustomDictionary);
        [id(0x000000de), helpcontext(0x095e00de)]
        HRESULT PasteAsNestedTable();
        [id(0x000000df), helpcontext(0x095e00df)]
        HRESULT ModifyEnclosure(
                        [in] VARIANT* Style, 
                        [in, optional] VARIANT* Symbol, 
                        [in, optional] VARIANT* EnclosedText);
        [id(0x000000e0), helpcontext(0x095e00e0)]
        HRESULT PhoneticGuide(
                        [in] BSTR Text, 
                        [in, optional, defaultvalue(-1)] WdPhoneticGuideAlignmentType Alignment, 
                        [in, optional, defaultvalue(0)] long Raise, 
                        [in, optional, defaultvalue(0)] long FontSize, 
                        [in, optional, defaultvalue("")] BSTR FontName);
        [id(0x000001bc), helpcontext(0x095e01bc)]
        HRESULT InsertDateTime(
                        [in, optional] VARIANT* DateTimeFormat, 
                        [in, optional] VARIANT* InsertAsField, 
                        [in, optional] VARIANT* InsertAsFullWidth, 
                        [in, optional] VARIANT* DateLanguage, 
                        [in, optional] VARIANT* CalendarType);
        [id(0x000001e4), helpcontext(0x095e01e4)]
        HRESULT Sort(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* FieldNumber, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* FieldNumber2, 
                        [in, optional] VARIANT* SortFieldType2, 
                        [in, optional] VARIANT* SortOrder2, 
                        [in, optional] VARIANT* FieldNumber3, 
                        [in, optional] VARIANT* SortFieldType3, 
                        [in, optional] VARIANT* SortOrder3, 
                        [in, optional] VARIANT* SortColumn, 
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* BidiSort, 
                        [in, optional] VARIANT* IgnoreThe, 
                        [in, optional] VARIANT* IgnoreKashida, 
                        [in, optional] VARIANT* IgnoreDiacritics, 
                        [in, optional] VARIANT* IgnoreHe, 
                        [in, optional] VARIANT* LanguageID);
        [id(0x000000cb), helpcontext(0x095e00cb)]
        HRESULT DetectLanguage();
        [id(0x000001f2), helpcontext(0x095e01f2)]
        HRESULT ConvertToTable(
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* NumRows, 
                        [in, optional] VARIANT* NumColumns, 
                        [in, optional] VARIANT* InitialColumnWidth, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ApplyBorders, 
                        [in, optional] VARIANT* ApplyShading, 
                        [in, optional] VARIANT* ApplyFont, 
                        [in, optional] VARIANT* ApplyColor, 
                        [in, optional] VARIANT* ApplyHeadingRows, 
                        [in, optional] VARIANT* ApplyLastRow, 
                        [in, optional] VARIANT* ApplyFirstColumn, 
                        [in, optional] VARIANT* ApplyLastColumn, 
                        [in, optional] VARIANT* AutoFit, 
                        [in, optional] VARIANT* AutoFitBehavior, 
                        [in, optional] VARIANT* DefaultTableBehavior, 
                        [out, retval] Table** prop);
        [id(0x000001f3), helpcontext(0x095e01f3)]
        HRESULT TCSCConverter(
                        [in, optional, defaultvalue(2)] WdTCSCConverterDirection WdTCSCConverterDirection, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL CommonTerms, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL UseVariants);
        [id(0x00000107), propget, helpcontext(0x095e0107)]
        HRESULT LanguageDetected([out, retval] VARIANT_BOOL* prop);
        [id(0x00000107), propput, helpcontext(0x095e0107)]
        HRESULT LanguageDetected([in] VARIANT_BOOL prop);
        [id(0x00000108), propget, helpcontext(0x095e0108)]
        HRESULT FitTextWidth([out, retval] single* prop);
        [id(0x00000108), propput, helpcontext(0x095e0108)]
        HRESULT FitTextWidth([in] single prop);
        [id(0x00000109), propget, helpcontext(0x095e0109)]
        HRESULT HorizontalInVertical([out, retval] WdHorizontalInVerticalType* prop);
        [id(0x00000109), propput, helpcontext(0x095e0109)]
        HRESULT HorizontalInVertical([in] WdHorizontalInVerticalType prop);
        [id(0x0000010a), propget, helpcontext(0x095e010a)]
        HRESULT TwoLinesInOne([out, retval] WdTwoLinesInOneType* prop);
        [id(0x0000010a), propput, helpcontext(0x095e010a)]
        HRESULT TwoLinesInOne([in] WdTwoLinesInOneType prop);
        [id(0x0000010b), propget, helpcontext(0x095e010b)]
        HRESULT CombineCharacters([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010b), propput, helpcontext(0x095e010b)]
        HRESULT CombineCharacters([in] VARIANT_BOOL prop);
        [id(0x00000143), propget, helpcontext(0x095e0143)]
        HRESULT NoProofing([out, retval] long* prop);
        [id(0x00000143), propput, helpcontext(0x095e0143)]
        HRESULT NoProofing([in] long prop);
        [id(0x00000144), propget, helpcontext(0x095e0144)]
        HRESULT TopLevelTables([out, retval] Tables** prop);
        [id(0x00000145), propget, helpcontext(0x095e0145)]
        HRESULT Scripts([out, retval] Scripts** prop);
        [id(0x00000146), propget, helpcontext(0x095e0146)]
        HRESULT CharacterWidth([out, retval] WdCharacterWidth* prop);
        [id(0x00000146), propput, helpcontext(0x095e0146)]
        HRESULT CharacterWidth([in] WdCharacterWidth prop);
        [id(0x00000147), propget, helpcontext(0x095e0147)]
        HRESULT Kana([out, retval] WdKana* prop);
        [id(0x00000147), propput, helpcontext(0x095e0147)]
        HRESULT Kana([in] WdKana prop);
        [id(0x00000190), propget, helpcontext(0x095e0190)]
        HRESULT BoldBi([out, retval] long* prop);
        [id(0x00000190), propput, helpcontext(0x095e0190)]
        HRESULT BoldBi([in] long prop);
        [id(0x00000191), propget, helpcontext(0x095e0191)]
        HRESULT ItalicBi([out, retval] long* prop);
        [id(0x00000191), propput, helpcontext(0x095e0191)]
        HRESULT ItalicBi([in] long prop);
        [id(0x00000195), propget, helpcontext(0x095e0195)]
        HRESULT ID([out, retval] BSTR* prop);
        [id(0x00000195), propput, helpcontext(0x095e0195)]
        HRESULT ID([in] BSTR prop);
        [id(0x00000196), propget, helpcontext(0x095e0196)]
        HRESULT HTMLDivisions([out, retval] HTMLDivisions** prop);
        [id(0x00000197), propget, hidden, helpcontext(0x095e0197)]
        HRESULT SmartTags([out, retval] SmartTags** prop);
        [id(0x00000198), propget, helpcontext(0x095e0198)]
        HRESULT ShowAll([out, retval] VARIANT_BOOL* prop);
        [id(0x00000198), propput, helpcontext(0x095e0198)]
        HRESULT ShowAll([in] VARIANT_BOOL prop);
        [id(0x00000199), propget, helpcontext(0x095e0199)]
        HRESULT Document([out, retval] _Document** prop);
        [id(0x0000019a), propget, helpcontext(0x095e019a)]
        HRESULT FootnoteOptions([out, retval] FootnoteOptions** prop);
        [id(0x0000019b), propget, helpcontext(0x095e019b)]
        HRESULT EndnoteOptions([out, retval] EndnoteOptions** prop);
        [id(0x0000019c), helpcontext(0x095e019c)]
        HRESULT PasteAndFormat([in] WdRecoveryType Type);
        [id(0x0000019d), helpcontext(0x095e019d)]
        HRESULT PasteExcelTable(
                        [in] VARIANT_BOOL LinkedToExcel, 
                        [in] VARIANT_BOOL WordFormatting, 
                        [in] VARIANT_BOOL RTF);
        [id(0x0000019e), helpcontext(0x095e019e)]
        HRESULT PasteAppendTable();
        [id(0x00000154), propget, hidden, helpcontext(0x095e0154)]
        HRESULT XMLNodes([out, retval] XMLNodes** prop);
        [id(0x00000155), propget, hidden, helpcontext(0x095e0155)]
        HRESULT XMLParentNode([out, retval] XMLNode** prop);
        [id(0x00000157), propget, helpcontext(0x095e0157)]
        HRESULT Editors([out, retval] Editors** prop);
        [id(0x00000158), propget, helpcontext(0x095e0158)]
        HRESULT XML(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL DataOnly, 
                        [out, retval] BSTR* prop);
        [id(0x00000159), propget, helpcontext(0x095e0159)]
        HRESULT EnhMetaFileBits([out, retval] VARIANT* prop);
        [id(0x0000019f), helpcontext(0x095e019f)]
        HRESULT GoToEditableRange(
                        [in, optional] VARIANT* EditorID, 
                        [out, retval] Range** prop);
        [id(0x000001a0), helpcontext(0x095e01a0)]
        HRESULT InsertXML(
                        [in] BSTR XML, 
                        [in, optional] VARIANT* Transform);
        [id(0x000001a1), helpcontext(0x095e01a1)]
        HRESULT InsertCaption(
                        [in] VARIANT* Label, 
                        [in, optional] VARIANT* Title, 
                        [in, optional] VARIANT* TitleAutoText, 
                        [in, optional] VARIANT* Position, 
                        [in, optional] VARIANT* ExcludeLabel);
        [id(0x000001a2), helpcontext(0x095e01a2)]
        HRESULT InsertCrossReference(
                        [in] VARIANT* ReferenceType, 
                        [in] WdReferenceKind ReferenceKind, 
                        [in] VARIANT* ReferenceItem, 
                        [in, optional] VARIANT* InsertAsHyperlink, 
                        [in, optional] VARIANT* IncludePosition, 
                        [in, optional] VARIANT* SeparateNumbers, 
                        [in, optional] VARIANT* SeparatorString);
        [id(0x0000015a), propget, helpcontext(0x095e015a)]
        HRESULT OMaths([out, retval] OMaths** prop);
        [id(0x000001a4), propget, helpcontext(0x095e01a4)]
        HRESULT CharacterStyle([out, retval] VARIANT* prop);
        [id(0x000001a5), propget, helpcontext(0x095e01a5)]
        HRESULT ParagraphStyle([out, retval] VARIANT* prop);
        [id(0x000001a6), propget, helpcontext(0x095e01a6)]
        HRESULT ListStyle([out, retval] VARIANT* prop);
        [id(0x000001a7), propget, helpcontext(0x095e01a7)]
        HRESULT TableStyle([out, retval] VARIANT* prop);
        [id(0x000001a8), propget, helpcontext(0x095e01a8)]
        HRESULT ContentControls([out, retval] ContentControls** prop);
        [id(0x000001a9), helpcontext(0x095e01a9)]
        HRESULT ExportFragment(
                        [in] BSTR FileName, 
                        [in] WdSaveFormat Format);
        [id(0x000001aa), propget, helpcontext(0x095e01aa)]
        HRESULT WordOpenXML([out, retval] BSTR* prop);
        [id(0x000001ab), helpcontext(0x095e01ab)]
        HRESULT SetListLevel([in] short Level);
        [id(0x000001f4), helpcontext(0x095e01f4)]
        HRESULT InsertAlignmentTab(
                        [in] long Alignment, 
                        [in, optional, defaultvalue(0)] long RelativeTo);
        [id(0x000001f5), propget, helpcontext(0x095e01f5)]
        HRESULT ParentContentControl([out, retval] ContentControl** prop);
        [id(0x000001f6), helpcontext(0x095e01f6)]
        HRESULT ImportFragment(
                        [in] BSTR FileName, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL MatchDestination);
        [id(0x000001f7), helpcontext(0x095e01f7)]
        HRESULT ExportAsFixedFormat(
                        [in] BSTR OutputFileName, 
                        [in] WdExportFormat ExportFormat, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL OpenAfterExport, 
                        [in, optional, defaultvalue(0)] WdExportOptimizeFor OptimizeFor, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL ExportCurrentPage, 
                        [in, optional, defaultvalue(0)] WdExportItem Item, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL IncludeDocProps, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL KeepIRM, 
                        [in, optional, defaultvalue(0)] WdExportCreateBookmarks CreateBookmarks, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL DocStructureTags, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL BitmapMissingFonts, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL UseISO19005_1, 
                        [in, optional] VARIANT* FixedFormatExtClassPtr);
        [id(0x000001f8), propget, helpcontext(0x095e01f8)]
        HRESULT Locks([out, retval] CoAuthLocks** prop);
        [id(0x000001f9), propget, helpcontext(0x095e01f9)]
        HRESULT Updates([out, retval] CoAuthUpdates** prop);
        [id(0x000001fa), propget, helpcontext(0x095e01fa)]
        HRESULT Conflicts([out, retval] Conflicts** prop);
        [id(0x000001fb), propget, helpcontext(0x095e01fb)]
        HRESULT TextVisibleOnScreen([out, retval] long* prop);
        [id(0x000001fc), helpcontext(0x095e01fc)]
        HRESULT SortByHeadings(
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* BidiSort, 
                        [in, optional] VARIANT* IgnoreThe, 
                        [in, optional] VARIANT* IgnoreKashida, 
                        [in, optional] VARIANT* IgnoreDiacritics, 
                        [in, optional] VARIANT* IgnoreHe, 
                        [in, optional] VARIANT* LanguageID);
    };

    [
      odl,
      uuid(000209C0-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009c0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListFormat : IDispatch {
        [id(0x00000044), propget, helpcontext(0x09c00044)]
        HRESULT ListLevelNumber([out, retval] long* prop);
        [id(0x00000044), propput, helpcontext(0x09c00044)]
        HRESULT ListLevelNumber([in] long prop);
        [id(0x00000045), propget, helpcontext(0x09c00045)]
        HRESULT List([out, retval] List** prop);
        [id(0x00000046), propget, helpcontext(0x09c00046)]
        HRESULT ListTemplate([out, retval] ListTemplate** prop);
        [id(0x00000047), propget, helpcontext(0x09c00047)]
        HRESULT ListValue([out, retval] long* prop);
        [id(0x00000048), propget, helpcontext(0x09c00048)]
        HRESULT SingleList([out, retval] VARIANT_BOOL* prop);
        [id(0x00000049), propget, helpcontext(0x09c00049)]
        HRESULT SingleListTemplate([out, retval] VARIANT_BOOL* prop);
        [id(0x0000004a), propget, helpcontext(0x09c0004a)]
        HRESULT ListType([out, retval] WdListType* prop);
        [id(0x0000004b), propget, helpcontext(0x09c0004b)]
        HRESULT ListString([out, retval] BSTR* prop);
        [id(0x000003e8), propget, helpcontext(0x09c003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09c003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09c003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000000b8), helpcontext(0x09c000b8)]
        HRESULT CanContinuePreviousList(
                        [in] ListTemplate* ListTemplate, 
                        [out, retval] WdContinue* prop);
        [id(0x000000b9), helpcontext(0x09c000b9)]
        HRESULT RemoveNumbers([in, optional] VARIANT* NumberType);
        [id(0x000000ba), helpcontext(0x09c000ba)]
        HRESULT ConvertNumbersToText([in, optional] VARIANT* NumberType);
        [id(0x000000bb), helpcontext(0x09c000bb)]
        HRESULT CountNumberedItems(
                        [in, optional] VARIANT* NumberType, 
                        [in, optional] VARIANT* Level, 
                        [out, retval] long* prop);
        [id(0x000000bc), hidden, helpcontext(0x09c000bc)]
        HRESULT ApplyBulletDefaultOld();
        [id(0x000000bd), hidden, helpcontext(0x09c000bd)]
        HRESULT ApplyNumberDefaultOld();
        [id(0x000000be), hidden, helpcontext(0x09c000be)]
        HRESULT ApplyOutlineNumberDefaultOld();
        [id(0x000000bf), hidden, helpcontext(0x09c000bf)]
        HRESULT ApplyListTemplateOld(
                        [in] ListTemplate* ListTemplate, 
                        [in, optional] VARIANT* ContinuePreviousList, 
                        [in, optional] VARIANT* ApplyTo);
        [id(0x000000d2), helpcontext(0x09c000d2)]
        HRESULT ListOutdent();
        [id(0x000000d3), helpcontext(0x09c000d3)]
        HRESULT ListIndent();
        [id(0x000000d4), helpcontext(0x09c000d4)]
        HRESULT ApplyBulletDefault([in, optional] VARIANT* DefaultListBehavior);
        [id(0x000000d5), helpcontext(0x09c000d5)]
        HRESULT ApplyNumberDefault([in, optional] VARIANT* DefaultListBehavior);
        [id(0x000000d6), helpcontext(0x09c000d6)]
        HRESULT ApplyOutlineNumberDefault([in, optional] VARIANT* DefaultListBehavior);
        [id(0x000000d7), helpcontext(0x09c000d7)]
        HRESULT ApplyListTemplate(
                        [in] ListTemplate* ListTemplate, 
                        [in, optional] VARIANT* ContinuePreviousList, 
                        [in, optional] VARIANT* ApplyTo, 
                        [in, optional] VARIANT* DefaultListBehavior);
        [id(0x0000004c), propget, helpcontext(0x09c0004c)]
        HRESULT ListPictureBullet([out, retval] InlineShape** prop);
        [id(0x000000d8), helpcontext(0x09c000d8)]
        HRESULT ApplyListTemplateWithLevel(
                        [in] ListTemplate* ListTemplate, 
                        [in, optional] VARIANT* ContinuePreviousList, 
                        [in, optional] VARIANT* ApplyTo, 
                        [in, optional] VARIANT* DefaultListBehavior, 
                        [in, optional] VARIANT* ApplyLevel);
    };

    [
      odl,
      uuid(000209B0-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009b0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Find : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09b003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09b003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09b003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000a), propget, helpcontext(0x09b0000a)]
        HRESULT Forward([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000a), propput, helpcontext(0x09b0000a)]
        HRESULT Forward([in] VARIANT_BOOL prop);
        [id(0x0000000b), propget, helpcontext(0x09b0000b)]
        HRESULT Font([out, retval] _Font** prop);
        [id(0x0000000b), propput, helpcontext(0x09b0000b)]
        HRESULT Font([in] _Font* prop);
        [id(0x0000000c), propget, helpcontext(0x09b0000c)]
        HRESULT Found([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), propget, helpcontext(0x09b0000d)]
        HRESULT MatchAllWordForms([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), propput, helpcontext(0x09b0000d)]
        HRESULT MatchAllWordForms([in] VARIANT_BOOL prop);
        [id(0x0000000e), propget, helpcontext(0x09b0000e)]
        HRESULT MatchCase([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000e), propput, helpcontext(0x09b0000e)]
        HRESULT MatchCase([in] VARIANT_BOOL prop);
        [id(0x0000000f), propget, helpcontext(0x09b0000f)]
        HRESULT MatchWildcards([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000f), propput, helpcontext(0x09b0000f)]
        HRESULT MatchWildcards([in] VARIANT_BOOL prop);
        [id(0x00000010), propget, helpcontext(0x09b00010)]
        HRESULT MatchSoundsLike([out, retval] VARIANT_BOOL* prop);
        [id(0x00000010), propput, helpcontext(0x09b00010)]
        HRESULT MatchSoundsLike([in] VARIANT_BOOL prop);
        [id(0x00000011), propget, helpcontext(0x09b00011)]
        HRESULT MatchWholeWord([out, retval] VARIANT_BOOL* prop);
        [id(0x00000011), propput, helpcontext(0x09b00011)]
        HRESULT MatchWholeWord([in] VARIANT_BOOL prop);
        [id(0x00000028), propget, helpcontext(0x09b00028)]
        HRESULT MatchFuzzy([out, retval] VARIANT_BOOL* prop);
        [id(0x00000028), propput, helpcontext(0x09b00028)]
        HRESULT MatchFuzzy([in] VARIANT_BOOL prop);
        [id(0x00000029), propget, helpcontext(0x09b00029)]
        HRESULT MatchByte([out, retval] VARIANT_BOOL* prop);
        [id(0x00000029), propput, helpcontext(0x09b00029)]
        HRESULT MatchByte([in] VARIANT_BOOL prop);
        [id(0x00000012), propget, helpcontext(0x09b00012)]
        HRESULT ParagraphFormat([out, retval] _ParagraphFormat** prop);
        [id(0x00000012), propput, helpcontext(0x09b00012)]
        HRESULT ParagraphFormat([in] _ParagraphFormat* prop);
        [id(0x00000013), propget, helpcontext(0x09b00013)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(0x00000013), propput, helpcontext(0x09b00013)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x00000016), propget, helpcontext(0x09b00016)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(0x00000016), propput, helpcontext(0x09b00016)]
        HRESULT Text([in] BSTR prop);
        [id(0x00000017), propget, helpcontext(0x09b00017)]
        HRESULT LanguageID([out, retval] WdLanguageID* prop);
        [id(0x00000017), propput, helpcontext(0x09b00017)]
        HRESULT LanguageID([in] WdLanguageID prop);
        [id(0x00000018), propget, helpcontext(0x09b00018)]
        HRESULT Highlight([out, retval] long* prop);
        [id(0x00000018), propput, helpcontext(0x09b00018)]
        HRESULT Highlight([in] long prop);
        [id(0x00000019), propget, helpcontext(0x09b00019)]
        HRESULT Replacement([out, retval] Replacement** prop);
        [id(0x0000001a), propget, helpcontext(0x09b0001a)]
        HRESULT Frame([out, retval] Frame** prop);
        [id(0x0000001b), propget, helpcontext(0x09b0001b)]
        HRESULT Wrap([out, retval] WdFindWrap* prop);
        [id(0x0000001b), propput, helpcontext(0x09b0001b)]
        HRESULT Wrap([in] WdFindWrap prop);
        [id(0x0000001c), propget, helpcontext(0x09b0001c)]
        HRESULT Format([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001c), propput, helpcontext(0x09b0001c)]
        HRESULT Format([in] VARIANT_BOOL prop);
        [id(0x0000001d), propget, helpcontext(0x09b0001d)]
        HRESULT LanguageIDFarEast([out, retval] WdLanguageID* prop);
        [id(0x0000001d), propput, helpcontext(0x09b0001d)]
        HRESULT LanguageIDFarEast([in] WdLanguageID prop);
        [id(0x0000003c), propget, helpcontext(0x09b0003c)]
        HRESULT LanguageIDOther([out, retval] WdLanguageID* prop);
        [id(0x0000003c), propput, helpcontext(0x09b0003c)]
        HRESULT LanguageIDOther([in] WdLanguageID prop);
        [id(0x0000003d), propget, helpcontext(0x09b0003d)]
        HRESULT CorrectHangulEndings([out, retval] VARIANT_BOOL* prop);
        [id(0x0000003d), propput, helpcontext(0x09b0003d)]
        HRESULT CorrectHangulEndings([in] VARIANT_BOOL prop);
        [id(0x0000001e), hidden, helpcontext(0x09b0001e)]
        HRESULT ExecuteOld(
                        [in, optional] VARIANT* FindText, 
                        [in, optional] VARIANT* MatchCase, 
                        [in, optional] VARIANT* MatchWholeWord, 
                        [in, optional] VARIANT* MatchWildcards, 
                        [in, optional] VARIANT* MatchSoundsLike, 
                        [in, optional] VARIANT* MatchAllWordForms, 
                        [in, optional] VARIANT* Forward, 
                        [in, optional] VARIANT* Wrap, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ReplaceWith, 
                        [in, optional] VARIANT* Replace, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000001f), helpcontext(0x09b0001f)]
        HRESULT ClearFormatting();
        [id(0x00000020), helpcontext(0x09b00020)]
        HRESULT SetAllFuzzyOptions();
        [id(0x00000021), helpcontext(0x09b00021)]
        HRESULT ClearAllFuzzyOptions();
        [id(0x000001bc), helpcontext(0x09b001bc)]
        HRESULT Execute(
                        [in, optional] VARIANT* FindText, 
                        [in, optional] VARIANT* MatchCase, 
                        [in, optional] VARIANT* MatchWholeWord, 
                        [in, optional] VARIANT* MatchWildcards, 
                        [in, optional] VARIANT* MatchSoundsLike, 
                        [in, optional] VARIANT* MatchAllWordForms, 
                        [in, optional] VARIANT* Forward, 
                        [in, optional] VARIANT* Wrap, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ReplaceWith, 
                        [in, optional] VARIANT* Replace, 
                        [in, optional] VARIANT* MatchKashida, 
                        [in, optional] VARIANT* MatchDiacritics, 
                        [in, optional] VARIANT* MatchAlefHamza, 
                        [in, optional] VARIANT* MatchControl, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000022), propget, helpcontext(0x09b00022)]
        HRESULT NoProofing([out, retval] long* prop);
        [id(0x00000022), propput, helpcontext(0x09b00022)]
        HRESULT NoProofing([in] long prop);
        [id(0x00000064), propget, helpcontext(0x09b00064)]
        HRESULT MatchKashida([out, retval] VARIANT_BOOL* prop);
        [id(0x00000064), propput, helpcontext(0x09b00064)]
        HRESULT MatchKashida([in] VARIANT_BOOL prop);
        [id(0x00000065), propget, helpcontext(0x09b00065)]
        HRESULT MatchDiacritics([out, retval] VARIANT_BOOL* prop);
        [id(0x00000065), propput, helpcontext(0x09b00065)]
        HRESULT MatchDiacritics([in] VARIANT_BOOL prop);
        [id(0x00000066), propget, helpcontext(0x09b00066)]
        HRESULT MatchAlefHamza([out, retval] VARIANT_BOOL* prop);
        [id(0x00000066), propput, helpcontext(0x09b00066)]
        HRESULT MatchAlefHamza([in] VARIANT_BOOL prop);
        [id(0x00000067), propget, helpcontext(0x09b00067)]
        HRESULT MatchControl([out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), propput, helpcontext(0x09b00067)]
        HRESULT MatchControl([in] VARIANT_BOOL prop);
        [id(0x00000068), propget, helpcontext(0x09b00068)]
        HRESULT MatchPhrase([out, retval] VARIANT_BOOL* prop);
        [id(0x00000068), propput, helpcontext(0x09b00068)]
        HRESULT MatchPhrase([in] VARIANT_BOOL prop);
        [id(0x00000069), propget, helpcontext(0x09b00069)]
        HRESULT MatchPrefix([out, retval] VARIANT_BOOL* prop);
        [id(0x00000069), propput, helpcontext(0x09b00069)]
        HRESULT MatchPrefix([in] VARIANT_BOOL prop);
        [id(0x0000006a), propget, helpcontext(0x09b0006a)]
        HRESULT MatchSuffix([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006a), propput, helpcontext(0x09b0006a)]
        HRESULT MatchSuffix([in] VARIANT_BOOL prop);
        [id(0x0000006b), propget, helpcontext(0x09b0006b)]
        HRESULT IgnoreSpace([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006b), propput, helpcontext(0x09b0006b)]
        HRESULT IgnoreSpace([in] VARIANT_BOOL prop);
        [id(0x0000006c), propget, helpcontext(0x09b0006c)]
        HRESULT IgnorePunct([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006c), propput, helpcontext(0x09b0006c)]
        HRESULT IgnorePunct([in] VARIANT_BOOL prop);
        [id(0x000001bd), helpcontext(0x09b001bd)]
        HRESULT HitHighlight(
                        [in] VARIANT* FindText, 
                        [in, optional] VARIANT* HighlightColor, 
                        [in, optional] VARIANT* TextColor, 
                        [in, optional] VARIANT* MatchCase, 
                        [in, optional] VARIANT* MatchWholeWord, 
                        [in, optional] VARIANT* MatchPrefix, 
                        [in, optional] VARIANT* MatchSuffix, 
                        [in, optional] VARIANT* MatchPhrase, 
                        [in, optional] VARIANT* MatchWildcards, 
                        [in, optional] VARIANT* MatchSoundsLike, 
                        [in, optional] VARIANT* MatchAllWordForms, 
                        [in, optional] VARIANT* MatchByte, 
                        [in, optional] VARIANT* MatchFuzzy, 
                        [in, optional] VARIANT* MatchKashida, 
                        [in, optional] VARIANT* MatchDiacritics, 
                        [in, optional] VARIANT* MatchAlefHamza, 
                        [in, optional] VARIANT* MatchControl, 
                        [in, optional] VARIANT* IgnoreSpace, 
                        [in, optional] VARIANT* IgnorePunct, 
                        [in, optional] VARIANT* HanjaPhoneticHangul, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x000001be), helpcontext(0x09b001be)]
        HRESULT ClearHitHighlight([out, retval] VARIANT_BOOL* prop);
        [id(0x000001bf), helpcontext(0x09b001bf)]
        HRESULT Execute2007(
                        [in, optional] VARIANT* FindText, 
                        [in, optional] VARIANT* MatchCase, 
                        [in, optional] VARIANT* MatchWholeWord, 
                        [in, optional] VARIANT* MatchWildcards, 
                        [in, optional] VARIANT* MatchSoundsLike, 
                        [in, optional] VARIANT* MatchAllWordForms, 
                        [in, optional] VARIANT* Forward, 
                        [in, optional] VARIANT* Wrap, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ReplaceWith, 
                        [in, optional] VARIANT* Replace, 
                        [in, optional] VARIANT* MatchKashida, 
                        [in, optional] VARIANT* MatchDiacritics, 
                        [in, optional] VARIANT* MatchAlefHamza, 
                        [in, optional] VARIANT* MatchControl, 
                        [in, optional] VARIANT* MatchPrefix, 
                        [in, optional] VARIANT* MatchSuffix, 
                        [in, optional] VARIANT* MatchPhrase, 
                        [in, optional] VARIANT* IgnoreSpace, 
                        [in, optional] VARIANT* IgnorePunct, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000006d), propget, helpcontext(0x09b0006d)]
        HRESULT HanjaPhoneticHangul([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006d), propput, helpcontext(0x09b0006d)]
        HRESULT HanjaPhoneticHangul([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(000209B1-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009b1),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Replacement : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09b103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09b103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09b103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000a), propget, helpcontext(0x09b1000a)]
        HRESULT Font([out, retval] _Font** prop);
        [id(0x0000000a), propput, helpcontext(0x09b1000a)]
        HRESULT Font([in] _Font* prop);
        [id(0x0000000b), propget, helpcontext(0x09b1000b)]
        HRESULT ParagraphFormat([out, retval] _ParagraphFormat** prop);
        [id(0x0000000b), propput, helpcontext(0x09b1000b)]
        HRESULT ParagraphFormat([in] _ParagraphFormat* prop);
        [id(0x0000000c), propget, helpcontext(0x09b1000c)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(0x0000000c), propput, helpcontext(0x09b1000c)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x0000000f), propget, helpcontext(0x09b1000f)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(0x0000000f), propput, helpcontext(0x09b1000f)]
        HRESULT Text([in] BSTR prop);
        [id(0x00000010), propget, helpcontext(0x09b10010)]
        HRESULT LanguageID([out, retval] WdLanguageID* prop);
        [id(0x00000010), propput, helpcontext(0x09b10010)]
        HRESULT LanguageID([in] WdLanguageID prop);
        [id(0x00000011), propget, helpcontext(0x09b10011)]
        HRESULT Highlight([out, retval] long* prop);
        [id(0x00000011), propput, helpcontext(0x09b10011)]
        HRESULT Highlight([in] long prop);
        [id(0x00000012), propget, helpcontext(0x09b10012)]
        HRESULT Frame([out, retval] Frame** prop);
        [id(0x00000013), propget, helpcontext(0x09b10013)]
        HRESULT LanguageIDFarEast([out, retval] WdLanguageID* prop);
        [id(0x00000013), propput, helpcontext(0x09b10013)]
        HRESULT LanguageIDFarEast([in] WdLanguageID prop);
        [id(0x00000014), helpcontext(0x09b10014)]
        HRESULT ClearFormatting();
        [id(0x00000015), propget, helpcontext(0x09b10015)]
        HRESULT NoProofing([out, retval] long* prop);
        [id(0x00000015), propput, helpcontext(0x09b10015)]
        HRESULT NoProofing([in] long prop);
    };

    [
      odl,
      uuid(0002095D-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000095d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Characters : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x095dfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x095d0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x095d0003)]
        HRESULT First([out, retval] Range** prop);
        [id(0x00000004), propget, helpcontext(0x095d0004)]
        HRESULT Last([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x095d03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x095d0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Range** prop);
    };

    [
      odl,
      uuid(0002095C-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000095c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Words : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x095cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x095c0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x095c0003)]
        HRESULT First([out, retval] Range** prop);
        [id(0x00000004), propget, helpcontext(0x095c0004)]
        HRESULT Last([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x095c03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x095c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Range** prop);
    };

    [
      odl,
      uuid(0002095B-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000095b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Sentences : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x095bfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x095b0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x095b0003)]
        HRESULT First([out, retval] Range** prop);
        [id(0x00000004), propget, helpcontext(0x095b0004)]
        HRESULT Last([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x095b03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x095b0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Range** prop);
    };

    [
      odl,
      uuid(0002095A-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000095a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Sections : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x095afffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x095a0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x095a0003)]
        HRESULT First([out, retval] Section** prop);
        [id(0x00000004), propget, helpcontext(0x095a0004)]
        HRESULT Last([out, retval] Section** prop);
        [id(0x000003e8), propget, helpcontext(0x095a03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000044d), propget, helpcontext(0x095a044d)]
        HRESULT PageSetup([out, retval] PageSetup** prop);
        [id(0x0000044d), propput, helpcontext(0x095a044d)]
        HRESULT PageSetup([in] PageSetup* prop);
        [id(00000000), helpcontext(0x095a0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Section** prop);
        [id(0x00000005), helpcontext(0x095a0005)]
        HRESULT Add(
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* Start, 
                        [out, retval] Section** prop);
    };

    [
      odl,
      uuid(00020959-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000959),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Section : IDispatch {
        [id(00000000), propget, helpcontext(0x09590000)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x095903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000044d), propget, helpcontext(0x0959044d)]
        HRESULT PageSetup([out, retval] PageSetup** prop);
        [id(0x0000044d), propput, helpcontext(0x0959044d)]
        HRESULT PageSetup([in] PageSetup* prop);
        [id(0x00000079), propget, helpcontext(0x09590079)]
        HRESULT Headers([out, retval] HeadersFooters** prop);
        [id(0x0000007a), propget, helpcontext(0x0959007a)]
        HRESULT Footers([out, retval] HeadersFooters** prop);
        [id(0x0000007b), propget, helpcontext(0x0959007b)]
        HRESULT ProtectedForForms([out, retval] VARIANT_BOOL* prop);
        [id(0x0000007b), propput, helpcontext(0x0959007b)]
        HRESULT ProtectedForForms([in] VARIANT_BOOL prop);
        [id(0x0000007c), propget, helpcontext(0x0959007c)]
        HRESULT Index([out, retval] long* prop);
        [id(0x0000044c), propget, helpcontext(0x0959044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x0959044c)]
        HRESULT Borders([in] Borders* prop);
    };

    [
      odl,
      uuid(00020958-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000958),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Paragraphs : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0958fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09580002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09580003)]
        HRESULT First([out, retval] Paragraph** prop);
        [id(0x00000004), propget, helpcontext(0x09580004)]
        HRESULT Last([out, retval] Paragraph** prop);
        [id(0x000003e8), propget, helpcontext(0x095803e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000044e), propget, helpcontext(0x0958044e)]
        HRESULT Format([out, retval] _ParagraphFormat** prop);
        [id(0x0000044e), propput, helpcontext(0x0958044e)]
        HRESULT Format([in] _ParagraphFormat* prop);
        [id(0x0000044f), propget, helpcontext(0x0958044f)]
        HRESULT TabStops([out, retval] TabStops** prop);
        [id(0x0000044f), propput, helpcontext(0x0958044f)]
        HRESULT TabStops([in] TabStops* prop);
        [id(0x0000044c), propget, helpcontext(0x0958044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x0958044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000064), propget, helpcontext(0x09580064)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(0x00000064), propput, helpcontext(0x09580064)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x00000065), propget, helpcontext(0x09580065)]
        HRESULT Alignment([out, retval] WdParagraphAlignment* prop);
        [id(0x00000065), propput, helpcontext(0x09580065)]
        HRESULT Alignment([in] WdParagraphAlignment prop);
        [id(0x00000066), propget, helpcontext(0x09580066)]
        HRESULT KeepTogether([out, retval] long* prop);
        [id(0x00000066), propput, helpcontext(0x09580066)]
        HRESULT KeepTogether([in] long prop);
        [id(0x00000067), propget, helpcontext(0x09580067)]
        HRESULT KeepWithNext([out, retval] long* prop);
        [id(0x00000067), propput, helpcontext(0x09580067)]
        HRESULT KeepWithNext([in] long prop);
        [id(0x00000068), propget, helpcontext(0x09580068)]
        HRESULT PageBreakBefore([out, retval] long* prop);
        [id(0x00000068), propput, helpcontext(0x09580068)]
        HRESULT PageBreakBefore([in] long prop);
        [id(0x00000069), propget, helpcontext(0x09580069)]
        HRESULT NoLineNumber([out, retval] long* prop);
        [id(0x00000069), propput, helpcontext(0x09580069)]
        HRESULT NoLineNumber([in] long prop);
        [id(0x0000006a), propget, helpcontext(0x0958006a)]
        HRESULT RightIndent([out, retval] single* prop);
        [id(0x0000006a), propput, helpcontext(0x0958006a)]
        HRESULT RightIndent([in] single prop);
        [id(0x0000006b), propget, helpcontext(0x0958006b)]
        HRESULT LeftIndent([out, retval] single* prop);
        [id(0x0000006b), propput, helpcontext(0x0958006b)]
        HRESULT LeftIndent([in] single prop);
        [id(0x0000006c), propget, helpcontext(0x0958006c)]
        HRESULT FirstLineIndent([out, retval] single* prop);
        [id(0x0000006c), propput, helpcontext(0x0958006c)]
        HRESULT FirstLineIndent([in] single prop);
        [id(0x0000006d), propget, helpcontext(0x0958006d)]
        HRESULT LineSpacing([out, retval] single* prop);
        [id(0x0000006d), propput, helpcontext(0x0958006d)]
        HRESULT LineSpacing([in] single prop);
        [id(0x0000006e), propget, helpcontext(0x0958006e)]
        HRESULT LineSpacingRule([out, retval] WdLineSpacing* prop);
        [id(0x0000006e), propput, helpcontext(0x0958006e)]
        HRESULT LineSpacingRule([in] WdLineSpacing prop);
        [id(0x0000006f), propget, helpcontext(0x0958006f)]
        HRESULT SpaceBefore([out, retval] single* prop);
        [id(0x0000006f), propput, helpcontext(0x0958006f)]
        HRESULT SpaceBefore([in] single prop);
        [id(0x00000070), propget, helpcontext(0x09580070)]
        HRESULT SpaceAfter([out, retval] single* prop);
        [id(0x00000070), propput, helpcontext(0x09580070)]
        HRESULT SpaceAfter([in] single prop);
        [id(0x00000071), propget, helpcontext(0x09580071)]
        HRESULT Hyphenation([out, retval] long* prop);
        [id(0x00000071), propput, helpcontext(0x09580071)]
        HRESULT Hyphenation([in] long prop);
        [id(0x00000072), propget, helpcontext(0x09580072)]
        HRESULT WidowControl([out, retval] long* prop);
        [id(0x00000072), propput, helpcontext(0x09580072)]
        HRESULT WidowControl([in] long prop);
        [id(0x00000074), propget, helpcontext(0x09580074)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000075), propget, helpcontext(0x09580075)]
        HRESULT FarEastLineBreakControl([out, retval] long* prop);
        [id(0x00000075), propput, helpcontext(0x09580075)]
        HRESULT FarEastLineBreakControl([in] long prop);
        [id(0x00000076), propget, helpcontext(0x09580076)]
        HRESULT WordWrap([out, retval] long* prop);
        [id(0x00000076), propput, helpcontext(0x09580076)]
        HRESULT WordWrap([in] long prop);
        [id(0x00000077), propget, helpcontext(0x09580077)]
        HRESULT HangingPunctuation([out, retval] long* prop);
        [id(0x00000077), propput, helpcontext(0x09580077)]
        HRESULT HangingPunctuation([in] long prop);
        [id(0x00000078), propget, helpcontext(0x09580078)]
        HRESULT HalfWidthPunctuationOnTopOfLine([out, retval] long* prop);
        [id(0x00000078), propput, helpcontext(0x09580078)]
        HRESULT HalfWidthPunctuationOnTopOfLine([in] long prop);
        [id(0x00000079), propget, helpcontext(0x09580079)]
        HRESULT AddSpaceBetweenFarEastAndAlpha([out, retval] long* prop);
        [id(0x00000079), propput, helpcontext(0x09580079)]
        HRESULT AddSpaceBetweenFarEastAndAlpha([in] long prop);
        [id(0x0000007a), propget, helpcontext(0x0958007a)]
        HRESULT AddSpaceBetweenFarEastAndDigit([out, retval] long* prop);
        [id(0x0000007a), propput, helpcontext(0x0958007a)]
        HRESULT AddSpaceBetweenFarEastAndDigit([in] long prop);
        [id(0x0000007b), propget, helpcontext(0x0958007b)]
        HRESULT BaseLineAlignment([out, retval] WdBaselineAlignment* prop);
        [id(0x0000007b), propput, helpcontext(0x0958007b)]
        HRESULT BaseLineAlignment([in] WdBaselineAlignment prop);
        [id(0x0000007c), propget, helpcontext(0x0958007c)]
        HRESULT AutoAdjustRightIndent([out, retval] long* prop);
        [id(0x0000007c), propput, helpcontext(0x0958007c)]
        HRESULT AutoAdjustRightIndent([in] long prop);
        [id(0x0000007d), propget, helpcontext(0x0958007d)]
        HRESULT DisableLineHeightGrid([out, retval] long* prop);
        [id(0x0000007d), propput, helpcontext(0x0958007d)]
        HRESULT DisableLineHeightGrid([in] long prop);
        [id(0x000000ca), propget, helpcontext(0x095800ca)]
        HRESULT OutlineLevel([out, retval] WdOutlineLevel* prop);
        [id(0x000000ca), propput, helpcontext(0x095800ca)]
        HRESULT OutlineLevel([in] WdOutlineLevel prop);
        [id(00000000), helpcontext(0x09580000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Paragraph** prop);
        [id(0x00000005), helpcontext(0x09580005)]
        HRESULT Add(
                        [in, optional] VARIANT* Range, 
                        [out, retval] Paragraph** prop);
        [id(0x0000012d), helpcontext(0x0958012d)]
        HRESULT CloseUp();
        [id(0x0000012e), helpcontext(0x0958012e)]
        HRESULT OpenUp();
        [id(0x0000012f), helpcontext(0x0958012f)]
        HRESULT OpenOrCloseUp();
        [id(0x00000130), helpcontext(0x09580130)]
        HRESULT TabHangingIndent([in] short Count);
        [id(0x00000132), helpcontext(0x09580132)]
        HRESULT TabIndent([in] short Count);
        [id(0x00000138), helpcontext(0x09580138)]
        HRESULT Reset();
        [id(0x00000139), helpcontext(0x09580139)]
        HRESULT Space1();
        [id(0x0000013a), helpcontext(0x0958013a)]
        HRESULT Space15();
        [id(0x0000013b), helpcontext(0x0958013b)]
        HRESULT Space2();
        [id(0x00000140), helpcontext(0x09580140)]
        HRESULT IndentCharWidth([in] short Count);
        [id(0x00000142), helpcontext(0x09580142)]
        HRESULT IndentFirstLineCharWidth([in] short Count);
        [id(0x00000144), helpcontext(0x09580144)]
        HRESULT OutlinePromote();
        [id(0x00000145), helpcontext(0x09580145)]
        HRESULT OutlineDemote();
        [id(0x00000146), helpcontext(0x09580146)]
        HRESULT OutlineDemoteToBody();
        [id(0x0000014d), helpcontext(0x0958014d)]
        HRESULT Indent();
        [id(0x0000014e), helpcontext(0x0958014e)]
        HRESULT Outdent();
        [id(0x0000007e), propget, helpcontext(0x0958007e)]
        HRESULT CharacterUnitRightIndent([out, retval] single* prop);
        [id(0x0000007e), propput, helpcontext(0x0958007e)]
        HRESULT CharacterUnitRightIndent([in] single prop);
        [id(0x0000007f), propget, helpcontext(0x0958007f)]
        HRESULT CharacterUnitLeftIndent([out, retval] single* prop);
        [id(0x0000007f), propput, helpcontext(0x0958007f)]
        HRESULT CharacterUnitLeftIndent([in] single prop);
        [id(0x00000080), propget, helpcontext(0x09580080)]
        HRESULT CharacterUnitFirstLineIndent([out, retval] single* prop);
        [id(0x00000080), propput, helpcontext(0x09580080)]
        HRESULT CharacterUnitFirstLineIndent([in] single prop);
        [id(0x00000081), propget, helpcontext(0x09580081)]
        HRESULT LineUnitBefore([out, retval] single* prop);
        [id(0x00000081), propput, helpcontext(0x09580081)]
        HRESULT LineUnitBefore([in] single prop);
        [id(0x00000082), propget, helpcontext(0x09580082)]
        HRESULT LineUnitAfter([out, retval] single* prop);
        [id(0x00000082), propput, helpcontext(0x09580082)]
        HRESULT LineUnitAfter([in] single prop);
        [id(0x00000083), propget, helpcontext(0x09580083)]
        HRESULT ReadingOrder([out, retval] WdReadingOrder* prop);
        [id(0x00000083), propput, helpcontext(0x09580083)]
        HRESULT ReadingOrder([in] WdReadingOrder prop);
        [id(0x00000084), propget, helpcontext(0x09580084)]
        HRESULT SpaceBeforeAuto([out, retval] long* prop);
        [id(0x00000084), propput, helpcontext(0x09580084)]
        HRESULT SpaceBeforeAuto([in] long prop);
        [id(0x00000085), propget, helpcontext(0x09580085)]
        HRESULT SpaceAfterAuto([out, retval] long* prop);
        [id(0x00000085), propput, helpcontext(0x09580085)]
        HRESULT SpaceAfterAuto([in] long prop);
        [id(0x0000014f), helpcontext(0x0958014f)]
        HRESULT IncreaseSpacing();
        [id(0x00000150), helpcontext(0x09580150)]
        HRESULT DecreaseSpacing();
    };

    [
      odl,
      uuid(00020957-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000957),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Paragraph : IDispatch {
        [id(00000000), propget, helpcontext(0x09570000)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x095703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000044e), propget, helpcontext(0x0957044e)]
        HRESULT Format([out, retval] _ParagraphFormat** prop);
        [id(0x0000044e), propput, helpcontext(0x0957044e)]
        HRESULT Format([in] _ParagraphFormat* prop);
        [id(0x0000044f), propget, helpcontext(0x0957044f)]
        HRESULT TabStops([out, retval] TabStops** prop);
        [id(0x0000044f), propput, helpcontext(0x0957044f)]
        HRESULT TabStops([in] TabStops* prop);
        [id(0x0000044c), propget, helpcontext(0x0957044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x0957044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x0000000d), propget, helpcontext(0x0957000d)]
        HRESULT DropCap([out, retval] DropCap** prop);
        [id(0x00000064), propget, helpcontext(0x09570064)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(0x00000064), propput, helpcontext(0x09570064)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x00000065), propget, helpcontext(0x09570065)]
        HRESULT Alignment([out, retval] WdParagraphAlignment* prop);
        [id(0x00000065), propput, helpcontext(0x09570065)]
        HRESULT Alignment([in] WdParagraphAlignment prop);
        [id(0x00000066), propget, helpcontext(0x09570066)]
        HRESULT KeepTogether([out, retval] long* prop);
        [id(0x00000066), propput, helpcontext(0x09570066)]
        HRESULT KeepTogether([in] long prop);
        [id(0x00000067), propget, helpcontext(0x09570067)]
        HRESULT KeepWithNext([out, retval] long* prop);
        [id(0x00000067), propput, helpcontext(0x09570067)]
        HRESULT KeepWithNext([in] long prop);
        [id(0x00000068), propget, helpcontext(0x09570068)]
        HRESULT PageBreakBefore([out, retval] long* prop);
        [id(0x00000068), propput, helpcontext(0x09570068)]
        HRESULT PageBreakBefore([in] long prop);
        [id(0x00000069), propget, helpcontext(0x09570069)]
        HRESULT NoLineNumber([out, retval] long* prop);
        [id(0x00000069), propput, helpcontext(0x09570069)]
        HRESULT NoLineNumber([in] long prop);
        [id(0x0000006a), propget, helpcontext(0x0957006a)]
        HRESULT RightIndent([out, retval] single* prop);
        [id(0x0000006a), propput, helpcontext(0x0957006a)]
        HRESULT RightIndent([in] single prop);
        [id(0x0000006b), propget, helpcontext(0x0957006b)]
        HRESULT LeftIndent([out, retval] single* prop);
        [id(0x0000006b), propput, helpcontext(0x0957006b)]
        HRESULT LeftIndent([in] single prop);
        [id(0x0000006c), propget, helpcontext(0x0957006c)]
        HRESULT FirstLineIndent([out, retval] single* prop);
        [id(0x0000006c), propput, helpcontext(0x0957006c)]
        HRESULT FirstLineIndent([in] single prop);
        [id(0x0000006d), propget, helpcontext(0x0957006d)]
        HRESULT LineSpacing([out, retval] single* prop);
        [id(0x0000006d), propput, helpcontext(0x0957006d)]
        HRESULT LineSpacing([in] single prop);
        [id(0x0000006e), propget, helpcontext(0x0957006e)]
        HRESULT LineSpacingRule([out, retval] WdLineSpacing* prop);
        [id(0x0000006e), propput, helpcontext(0x0957006e)]
        HRESULT LineSpacingRule([in] WdLineSpacing prop);
        [id(0x0000006f), propget, helpcontext(0x0957006f)]
        HRESULT SpaceBefore([out, retval] single* prop);
        [id(0x0000006f), propput, helpcontext(0x0957006f)]
        HRESULT SpaceBefore([in] single prop);
        [id(0x00000070), propget, helpcontext(0x09570070)]
        HRESULT SpaceAfter([out, retval] single* prop);
        [id(0x00000070), propput, helpcontext(0x09570070)]
        HRESULT SpaceAfter([in] single prop);
        [id(0x00000071), propget, helpcontext(0x09570071)]
        HRESULT Hyphenation([out, retval] long* prop);
        [id(0x00000071), propput, helpcontext(0x09570071)]
        HRESULT Hyphenation([in] long prop);
        [id(0x00000072), propget, helpcontext(0x09570072)]
        HRESULT WidowControl([out, retval] long* prop);
        [id(0x00000072), propput, helpcontext(0x09570072)]
        HRESULT WidowControl([in] long prop);
        [id(0x00000074), propget, helpcontext(0x09570074)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000075), propget, helpcontext(0x09570075)]
        HRESULT FarEastLineBreakControl([out, retval] long* prop);
        [id(0x00000075), propput, helpcontext(0x09570075)]
        HRESULT FarEastLineBreakControl([in] long prop);
        [id(0x00000076), propget, helpcontext(0x09570076)]
        HRESULT WordWrap([out, retval] long* prop);
        [id(0x00000076), propput, helpcontext(0x09570076)]
        HRESULT WordWrap([in] long prop);
        [id(0x00000077), propget, helpcontext(0x09570077)]
        HRESULT HangingPunctuation([out, retval] long* prop);
        [id(0x00000077), propput, helpcontext(0x09570077)]
        HRESULT HangingPunctuation([in] long prop);
        [id(0x00000078), propget, helpcontext(0x09570078)]
        HRESULT HalfWidthPunctuationOnTopOfLine([out, retval] long* prop);
        [id(0x00000078), propput, helpcontext(0x09570078)]
        HRESULT HalfWidthPunctuationOnTopOfLine([in] long prop);
        [id(0x00000079), propget, helpcontext(0x09570079)]
        HRESULT AddSpaceBetweenFarEastAndAlpha([out, retval] long* prop);
        [id(0x00000079), propput, helpcontext(0x09570079)]
        HRESULT AddSpaceBetweenFarEastAndAlpha([in] long prop);
        [id(0x0000007a), propget, helpcontext(0x0957007a)]
        HRESULT AddSpaceBetweenFarEastAndDigit([out, retval] long* prop);
        [id(0x0000007a), propput, helpcontext(0x0957007a)]
        HRESULT AddSpaceBetweenFarEastAndDigit([in] long prop);
        [id(0x0000007b), propget, helpcontext(0x0957007b)]
        HRESULT BaseLineAlignment([out, retval] WdBaselineAlignment* prop);
        [id(0x0000007b), propput, helpcontext(0x0957007b)]
        HRESULT BaseLineAlignment([in] WdBaselineAlignment prop);
        [id(0x0000007c), propget, helpcontext(0x0957007c)]
        HRESULT AutoAdjustRightIndent([out, retval] long* prop);
        [id(0x0000007c), propput, helpcontext(0x0957007c)]
        HRESULT AutoAdjustRightIndent([in] long prop);
        [id(0x0000007d), propget, helpcontext(0x0957007d)]
        HRESULT DisableLineHeightGrid([out, retval] long* prop);
        [id(0x0000007d), propput, helpcontext(0x0957007d)]
        HRESULT DisableLineHeightGrid([in] long prop);
        [id(0x000000ca), propget, helpcontext(0x095700ca)]
        HRESULT OutlineLevel([out, retval] WdOutlineLevel* prop);
        [id(0x000000ca), propput, helpcontext(0x095700ca)]
        HRESULT OutlineLevel([in] WdOutlineLevel prop);
        [id(0x0000012d), helpcontext(0x0957012d)]
        HRESULT CloseUp();
        [id(0x0000012e), helpcontext(0x0957012e)]
        HRESULT OpenUp();
        [id(0x0000012f), helpcontext(0x0957012f)]
        HRESULT OpenOrCloseUp();
        [id(0x00000130), helpcontext(0x09570130)]
        HRESULT TabHangingIndent([in] short Count);
        [id(0x00000132), helpcontext(0x09570132)]
        HRESULT TabIndent([in] short Count);
        [id(0x00000138), helpcontext(0x09570138)]
        HRESULT Reset();
        [id(0x00000139), helpcontext(0x09570139)]
        HRESULT Space1();
        [id(0x0000013a), helpcontext(0x0957013a)]
        HRESULT Space15();
        [id(0x0000013b), helpcontext(0x0957013b)]
        HRESULT Space2();
        [id(0x00000140), helpcontext(0x09570140)]
        HRESULT IndentCharWidth([in] short Count);
        [id(0x00000142), helpcontext(0x09570142)]
        HRESULT IndentFirstLineCharWidth([in] short Count);
        [id(0x00000144), helpcontext(0x09570144)]
        HRESULT Next(
                        [in, optional] VARIANT* Count, 
                        [out, retval] Paragraph** prop);
        [id(0x00000145), helpcontext(0x09570145)]
        HRESULT Previous(
                        [in, optional] VARIANT* Count, 
                        [out, retval] Paragraph** prop);
        [id(0x00000146), helpcontext(0x09570146)]
        HRESULT OutlinePromote();
        [id(0x00000147), helpcontext(0x09570147)]
        HRESULT OutlineDemote();
        [id(0x00000148), helpcontext(0x09570148)]
        HRESULT OutlineDemoteToBody();
        [id(0x0000014d), helpcontext(0x0957014d)]
        HRESULT Indent();
        [id(0x0000014e), helpcontext(0x0957014e)]
        HRESULT Outdent();
        [id(0x0000007e), propget, helpcontext(0x0957007e)]
        HRESULT CharacterUnitRightIndent([out, retval] single* prop);
        [id(0x0000007e), propput, helpcontext(0x0957007e)]
        HRESULT CharacterUnitRightIndent([in] single prop);
        [id(0x0000007f), propget, helpcontext(0x0957007f)]
        HRESULT CharacterUnitLeftIndent([out, retval] single* prop);
        [id(0x0000007f), propput, helpcontext(0x0957007f)]
        HRESULT CharacterUnitLeftIndent([in] single prop);
        [id(0x00000080), propget, helpcontext(0x09570080)]
        HRESULT CharacterUnitFirstLineIndent([out, retval] single* prop);
        [id(0x00000080), propput, helpcontext(0x09570080)]
        HRESULT CharacterUnitFirstLineIndent([in] single prop);
        [id(0x00000081), propget, helpcontext(0x09570081)]
        HRESULT LineUnitBefore([out, retval] single* prop);
        [id(0x00000081), propput, helpcontext(0x09570081)]
        HRESULT LineUnitBefore([in] single prop);
        [id(0x00000082), propget, helpcontext(0x09570082)]
        HRESULT LineUnitAfter([out, retval] single* prop);
        [id(0x00000082), propput, helpcontext(0x09570082)]
        HRESULT LineUnitAfter([in] single prop);
        [id(0x000000cb), propget, helpcontext(0x095700cb)]
        HRESULT ReadingOrder([out, retval] WdReadingOrder* prop);
        [id(0x000000cb), propput, helpcontext(0x095700cb)]
        HRESULT ReadingOrder([in] WdReadingOrder prop);
        [id(0x000000cc), propget, helpcontext(0x095700cc)]
        HRESULT ID([out, retval] BSTR* prop);
        [id(0x000000cc), propput, helpcontext(0x095700cc)]
        HRESULT ID([in] BSTR prop);
        [id(0x00000084), propget, helpcontext(0x09570084)]
        HRESULT SpaceBeforeAuto([out, retval] long* prop);
        [id(0x00000084), propput, helpcontext(0x09570084)]
        HRESULT SpaceBeforeAuto([in] long prop);
        [id(0x00000085), propget, helpcontext(0x09570085)]
        HRESULT SpaceAfterAuto([out, retval] long* prop);
        [id(0x00000085), propput, helpcontext(0x09570085)]
        HRESULT SpaceAfterAuto([in] long prop);
        [id(0x00000086), propget, helpcontext(0x09570086)]
        HRESULT IsStyleSeparator([out, retval] VARIANT_BOOL* prop);
        [id(0x0000014f), helpcontext(0x0957014f)]
        HRESULT SelectNumber();
        [id(0x00000150), helpcontext(0x09570150)]
        HRESULT ListAdvanceTo(
                        [in, optional, defaultvalue(0)] short Level1, 
                        [in, optional, defaultvalue(0)] short Level2, 
                        [in, optional, defaultvalue(0)] short Level3, 
                        [in, optional, defaultvalue(0)] short Level4, 
                        [in, optional, defaultvalue(0)] short Level5, 
                        [in, optional, defaultvalue(0)] short Level6, 
                        [in, optional, defaultvalue(0)] short Level7, 
                        [in, optional, defaultvalue(0)] short Level8, 
                        [in, optional, defaultvalue(0)] short Level9);
        [id(0x00000151), helpcontext(0x09570151)]
        HRESULT ResetAdvanceTo();
        [id(0x00000152), helpcontext(0x09570152)]
        HRESULT SeparateList();
        [id(0x00000153), helpcontext(0x09570153)]
        HRESULT JoinList();
        [id(0x00000087), propget, helpcontext(0x09570087)]
        HRESULT MirrorIndents([out, retval] long* prop);
        [id(0x00000087), propput, helpcontext(0x09570087)]
        HRESULT MirrorIndents([in] long prop);
        [id(0x00000088), propget, helpcontext(0x09570088)]
        HRESULT TextboxTightWrap([out, retval] WdTextboxTightWrap* prop);
        [id(0x00000088), propput, helpcontext(0x09570088)]
        HRESULT TextboxTightWrap([in] WdTextboxTightWrap prop);
        [id(0x00000089), propget, helpcontext(0x09570089)]
        HRESULT ListNumberOriginal(
                        [in] short Level, 
                        [out, retval] short* prop);
        [id(0x0000008a), propget, hidden, helpcontext(0x0957008a)]
        HRESULT ParaID([out, retval] long* prop);
        [id(0x0000008c), propget, hidden, helpcontext(0x0957008c)]
        HRESULT TextID([out, retval] long* prop);
        [id(0x000004b3), propget, helpcontext(0x095704b3)]
        HRESULT CollapsedState([out, retval] VARIANT_BOOL* prop);
        [id(0x000004b3), propput, helpcontext(0x095704b3)]
        HRESULT CollapsedState([in] VARIANT_BOOL prop);
        [id(0x000004b4), propget, helpcontext(0x095704b4)]
        HRESULT CollapseHeadingByDefault([out, retval] VARIANT_BOOL* prop);
        [id(0x000004b4), propput, helpcontext(0x095704b4)]
        HRESULT CollapseHeadingByDefault([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020956-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000956),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DropCap : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x095603e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000a), propget, helpcontext(0x0956000a)]
        HRESULT Position([out, retval] WdDropPosition* prop);
        [id(0x0000000a), propput, helpcontext(0x0956000a)]
        HRESULT Position([in] WdDropPosition prop);
        [id(0x0000000b), propget, helpcontext(0x0956000b)]
        HRESULT FontName([out, retval] BSTR* prop);
        [id(0x0000000b), propput, helpcontext(0x0956000b)]
        HRESULT FontName([in] BSTR prop);
        [id(0x0000000c), propget, helpcontext(0x0956000c)]
        HRESULT LinesToDrop([out, retval] long* prop);
        [id(0x0000000c), propput, helpcontext(0x0956000c)]
        HRESULT LinesToDrop([in] long prop);
        [id(0x0000000d), propget, helpcontext(0x0956000d)]
        HRESULT DistanceFromText([out, retval] single* prop);
        [id(0x0000000d), propput, helpcontext(0x0956000d)]
        HRESULT DistanceFromText([in] single prop);
        [id(0x00000064), helpcontext(0x09560064)]
        HRESULT Clear();
        [id(0x00000065), helpcontext(0x09560065)]
        HRESULT Enable();
    };

    [
      odl,
      uuid(00020955-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000955),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TabStops : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0955fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09550002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x095503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09550000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] TabStop** prop);
        [id(0x00000064), helpcontext(0x09550064)]
        HRESULT Add(
                        [in] single Position, 
                        [in, optional] VARIANT* Alignment, 
                        [in, optional] VARIANT* Leader, 
                        [out, retval] TabStop** prop);
        [id(0x00000065), helpcontext(0x09550065)]
        HRESULT ClearAll();
        [id(0x00000066), helpcontext(0x09550066)]
        HRESULT Before(
                        [in] single Position, 
                        [out, retval] TabStop** prop);
        [id(0x00000067), helpcontext(0x09550067)]
        HRESULT After(
                        [in] single Position, 
                        [out, retval] TabStop** prop);
    };

    [
      odl,
      uuid(00020954-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000954),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TabStop : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x095403e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09540064)]
        HRESULT Alignment([out, retval] WdTabAlignment* prop);
        [id(0x00000064), propput, helpcontext(0x09540064)]
        HRESULT Alignment([in] WdTabAlignment prop);
        [id(0x00000065), propget, helpcontext(0x09540065)]
        HRESULT Leader([out, retval] WdTabLeader* prop);
        [id(0x00000065), propput, helpcontext(0x09540065)]
        HRESULT Leader([in] WdTabLeader prop);
        [id(0x00000066), propget, helpcontext(0x09540066)]
        HRESULT Position([out, retval] single* prop);
        [id(0x00000066), propput, helpcontext(0x09540066)]
        HRESULT Position([in] single prop);
        [id(0x00000067), propget, helpcontext(0x09540067)]
        HRESULT CustomTab([out, retval] VARIANT_BOOL* prop);
        [id(0x00000068), propget, helpcontext(0x09540068)]
        HRESULT Next([out, retval] TabStop** prop);
        [id(0x00000069), propget, helpcontext(0x09540069)]
        HRESULT Previous([out, retval] TabStop** prop);
        [id(0x000000c8), helpcontext(0x095400c8)]
        HRESULT Clear();
    };

    [
      odl,
      uuid(00020953-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000953),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _ParagraphFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x095303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000a), propget, helpcontext(0x0953000a)]
        HRESULT Duplicate([out, retval] _ParagraphFormat** prop);
        [id(0x00000064), propget, helpcontext(0x09530064)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(0x00000064), propput, helpcontext(0x09530064)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x00000065), propget, helpcontext(0x09530065)]
        HRESULT Alignment([out, retval] WdParagraphAlignment* prop);
        [id(0x00000065), propput, helpcontext(0x09530065)]
        HRESULT Alignment([in] WdParagraphAlignment prop);
        [id(0x00000066), propget, helpcontext(0x09530066)]
        HRESULT KeepTogether([out, retval] long* prop);
        [id(0x00000066), propput, helpcontext(0x09530066)]
        HRESULT KeepTogether([in] long prop);
        [id(0x00000067), propget, helpcontext(0x09530067)]
        HRESULT KeepWithNext([out, retval] long* prop);
        [id(0x00000067), propput, helpcontext(0x09530067)]
        HRESULT KeepWithNext([in] long prop);
        [id(0x00000068), propget, helpcontext(0x09530068)]
        HRESULT PageBreakBefore([out, retval] long* prop);
        [id(0x00000068), propput, helpcontext(0x09530068)]
        HRESULT PageBreakBefore([in] long prop);
        [id(0x00000069), propget, helpcontext(0x09530069)]
        HRESULT NoLineNumber([out, retval] long* prop);
        [id(0x00000069), propput, helpcontext(0x09530069)]
        HRESULT NoLineNumber([in] long prop);
        [id(0x0000006a), propget, helpcontext(0x0953006a)]
        HRESULT RightIndent([out, retval] single* prop);
        [id(0x0000006a), propput, helpcontext(0x0953006a)]
        HRESULT RightIndent([in] single prop);
        [id(0x0000006b), propget, helpcontext(0x0953006b)]
        HRESULT LeftIndent([out, retval] single* prop);
        [id(0x0000006b), propput, helpcontext(0x0953006b)]
        HRESULT LeftIndent([in] single prop);
        [id(0x0000006c), propget, helpcontext(0x0953006c)]
        HRESULT FirstLineIndent([out, retval] single* prop);
        [id(0x0000006c), propput, helpcontext(0x0953006c)]
        HRESULT FirstLineIndent([in] single prop);
        [id(0x0000006d), propget, helpcontext(0x0953006d)]
        HRESULT LineSpacing([out, retval] single* prop);
        [id(0x0000006d), propput, helpcontext(0x0953006d)]
        HRESULT LineSpacing([in] single prop);
        [id(0x0000006e), propget, helpcontext(0x0953006e)]
        HRESULT LineSpacingRule([out, retval] WdLineSpacing* prop);
        [id(0x0000006e), propput, helpcontext(0x0953006e)]
        HRESULT LineSpacingRule([in] WdLineSpacing prop);
        [id(0x0000006f), propget, helpcontext(0x0953006f)]
        HRESULT SpaceBefore([out, retval] single* prop);
        [id(0x0000006f), propput, helpcontext(0x0953006f)]
        HRESULT SpaceBefore([in] single prop);
        [id(0x00000070), propget, helpcontext(0x09530070)]
        HRESULT SpaceAfter([out, retval] single* prop);
        [id(0x00000070), propput, helpcontext(0x09530070)]
        HRESULT SpaceAfter([in] single prop);
        [id(0x00000071), propget, helpcontext(0x09530071)]
        HRESULT Hyphenation([out, retval] long* prop);
        [id(0x00000071), propput, helpcontext(0x09530071)]
        HRESULT Hyphenation([in] long prop);
        [id(0x00000072), propget, helpcontext(0x09530072)]
        HRESULT WidowControl([out, retval] long* prop);
        [id(0x00000072), propput, helpcontext(0x09530072)]
        HRESULT WidowControl([in] long prop);
        [id(0x00000075), propget, helpcontext(0x09530075)]
        HRESULT FarEastLineBreakControl([out, retval] long* prop);
        [id(0x00000075), propput, helpcontext(0x09530075)]
        HRESULT FarEastLineBreakControl([in] long prop);
        [id(0x00000076), propget, helpcontext(0x09530076)]
        HRESULT WordWrap([out, retval] long* prop);
        [id(0x00000076), propput, helpcontext(0x09530076)]
        HRESULT WordWrap([in] long prop);
        [id(0x00000077), propget, helpcontext(0x09530077)]
        HRESULT HangingPunctuation([out, retval] long* prop);
        [id(0x00000077), propput, helpcontext(0x09530077)]
        HRESULT HangingPunctuation([in] long prop);
        [id(0x00000078), propget, helpcontext(0x09530078)]
        HRESULT HalfWidthPunctuationOnTopOfLine([out, retval] long* prop);
        [id(0x00000078), propput, helpcontext(0x09530078)]
        HRESULT HalfWidthPunctuationOnTopOfLine([in] long prop);
        [id(0x00000079), propget, helpcontext(0x09530079)]
        HRESULT AddSpaceBetweenFarEastAndAlpha([out, retval] long* prop);
        [id(0x00000079), propput, helpcontext(0x09530079)]
        HRESULT AddSpaceBetweenFarEastAndAlpha([in] long prop);
        [id(0x0000007a), propget, helpcontext(0x0953007a)]
        HRESULT AddSpaceBetweenFarEastAndDigit([out, retval] long* prop);
        [id(0x0000007a), propput, helpcontext(0x0953007a)]
        HRESULT AddSpaceBetweenFarEastAndDigit([in] long prop);
        [id(0x0000007b), propget, helpcontext(0x0953007b)]
        HRESULT BaseLineAlignment([out, retval] WdBaselineAlignment* prop);
        [id(0x0000007b), propput, helpcontext(0x0953007b)]
        HRESULT BaseLineAlignment([in] WdBaselineAlignment prop);
        [id(0x0000007c), propget, helpcontext(0x0953007c)]
        HRESULT AutoAdjustRightIndent([out, retval] long* prop);
        [id(0x0000007c), propput, helpcontext(0x0953007c)]
        HRESULT AutoAdjustRightIndent([in] long prop);
        [id(0x0000007d), propget, helpcontext(0x0953007d)]
        HRESULT DisableLineHeightGrid([out, retval] long* prop);
        [id(0x0000007d), propput, helpcontext(0x0953007d)]
        HRESULT DisableLineHeightGrid([in] long prop);
        [id(0x0000044f), propget, helpcontext(0x0953044f)]
        HRESULT TabStops([out, retval] TabStops** prop);
        [id(0x0000044f), propput, helpcontext(0x0953044f)]
        HRESULT TabStops([in] TabStops* prop);
        [id(0x0000044c), propget, helpcontext(0x0953044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x0953044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x0000044d), propget, helpcontext(0x0953044d)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x000000ca), propget, helpcontext(0x095300ca)]
        HRESULT OutlineLevel([out, retval] WdOutlineLevel* prop);
        [id(0x000000ca), propput, helpcontext(0x095300ca)]
        HRESULT OutlineLevel([in] WdOutlineLevel prop);
        [id(0x0000012d), helpcontext(0x0953012d)]
        HRESULT CloseUp();
        [id(0x0000012e), helpcontext(0x0953012e)]
        HRESULT OpenUp();
        [id(0x0000012f), helpcontext(0x0953012f)]
        HRESULT OpenOrCloseUp();
        [id(0x00000130), helpcontext(0x09530130)]
        HRESULT TabHangingIndent([in] short Count);
        [id(0x00000132), helpcontext(0x09530132)]
        HRESULT TabIndent([in] short Count);
        [id(0x00000138), helpcontext(0x09530138)]
        HRESULT Reset();
        [id(0x00000139), helpcontext(0x09530139)]
        HRESULT Space1();
        [id(0x0000013a), helpcontext(0x0953013a)]
        HRESULT Space15();
        [id(0x0000013b), helpcontext(0x0953013b)]
        HRESULT Space2();
        [id(0x00000140), helpcontext(0x09530140)]
        HRESULT IndentCharWidth([in] short Count);
        [id(0x00000142), helpcontext(0x09530142)]
        HRESULT IndentFirstLineCharWidth([in] short Count);
        [id(0x0000007e), propget, helpcontext(0x0953007e)]
        HRESULT CharacterUnitRightIndent([out, retval] single* prop);
        [id(0x0000007e), propput, helpcontext(0x0953007e)]
        HRESULT CharacterUnitRightIndent([in] single prop);
        [id(0x0000007f), propget, helpcontext(0x0953007f)]
        HRESULT CharacterUnitLeftIndent([out, retval] single* prop);
        [id(0x0000007f), propput, helpcontext(0x0953007f)]
        HRESULT CharacterUnitLeftIndent([in] single prop);
        [id(0x00000080), propget, helpcontext(0x09530080)]
        HRESULT CharacterUnitFirstLineIndent([out, retval] single* prop);
        [id(0x00000080), propput, helpcontext(0x09530080)]
        HRESULT CharacterUnitFirstLineIndent([in] single prop);
        [id(0x00000081), propget, helpcontext(0x09530081)]
        HRESULT LineUnitBefore([out, retval] single* prop);
        [id(0x00000081), propput, helpcontext(0x09530081)]
        HRESULT LineUnitBefore([in] single prop);
        [id(0x00000082), propget, helpcontext(0x09530082)]
        HRESULT LineUnitAfter([out, retval] single* prop);
        [id(0x00000082), propput, helpcontext(0x09530082)]
        HRESULT LineUnitAfter([in] single prop);
        [id(0x00000083), propget, helpcontext(0x09530083)]
        HRESULT ReadingOrder([out, retval] WdReadingOrder* prop);
        [id(0x00000083), propput, helpcontext(0x09530083)]
        HRESULT ReadingOrder([in] WdReadingOrder prop);
        [id(0x00000084), propget, helpcontext(0x09530084)]
        HRESULT SpaceBeforeAuto([out, retval] long* prop);
        [id(0x00000084), propput, helpcontext(0x09530084)]
        HRESULT SpaceBeforeAuto([in] long prop);
        [id(0x00000085), propget, helpcontext(0x09530085)]
        HRESULT SpaceAfterAuto([out, retval] long* prop);
        [id(0x00000085), propput, helpcontext(0x09530085)]

        HRESULT SpaceAfterAuto([in] long prop);
        [id(0x00000086), propget, helpcontext(0x09530086)]
        HRESULT MirrorIndents([out, retval] long* prop);
        [id(0x00000086), propput, helpcontext(0x09530086)]
        HRESULT MirrorIndents([in] long prop);
        [id(0x00000087), propget, helpcontext(0x09530087)]
        HRESULT TextboxTightWrap([out, retval] WdTextboxTightWrap* prop);
        [id(0x00000087), propput, helpcontext(0x09530087)]
        HRESULT TextboxTightWrap([in] WdTextboxTightWrap prop);
        [id(0x00000088), propget, helpcontext(0x09530088)]
        HRESULT CollapsedByDefault([out, retval] long* prop);
        [id(0x00000088), propput, helpcontext(0x09530088)]
        HRESULT CollapsedByDefault([in] long prop);
    };

    [
      odl,
      uuid(00020952-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000952),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _Font : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x095203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000a), propget, helpcontext(0x0952000a)]
        HRESULT Duplicate([out, retval] _Font** prop);
        [id(0x00000082), propget, helpcontext(0x09520082)]
        HRESULT Bold([out, retval] long* prop);
        [id(0x00000082), propput, helpcontext(0x09520082)]
        HRESULT Bold([in] long prop);
        [id(0x00000083), propget, helpcontext(0x09520083)]
        HRESULT Italic([out, retval] long* prop);
        [id(0x00000083), propput, helpcontext(0x09520083)]
        HRESULT Italic([in] long prop);
        [id(0x00000084), propget, helpcontext(0x09520084)]
        HRESULT Hidden([out, retval] long* prop);
        [id(0x00000084), propput, helpcontext(0x09520084)]
        HRESULT Hidden([in] long prop);
        [id(0x00000085), propget, helpcontext(0x09520085)]
        HRESULT SmallCaps([out, retval] long* prop);
        [id(0x00000085), propput, helpcontext(0x09520085)]
        HRESULT SmallCaps([in] long prop);
        [id(0x00000086), propget, helpcontext(0x09520086)]
        HRESULT AllCaps([out, retval] long* prop);
        [id(0x00000086), propput, helpcontext(0x09520086)]
        HRESULT AllCaps([in] long prop);
        [id(0x00000087), propget, helpcontext(0x09520087)]
        HRESULT StrikeThrough([out, retval] long* prop);
        [id(0x00000087), propput, helpcontext(0x09520087)]
        HRESULT StrikeThrough([in] long prop);
        [id(0x00000088), propget, helpcontext(0x09520088)]
        HRESULT DoubleStrikeThrough([out, retval] long* prop);
        [id(0x00000088), propput, helpcontext(0x09520088)]
        HRESULT DoubleStrikeThrough([in] long prop);
        [id(0x00000089), propget, helpcontext(0x09520089)]
        HRESULT ColorIndex([out, retval] WdColorIndex* prop);
        [id(0x00000089), propput, helpcontext(0x09520089)]
        HRESULT ColorIndex([in] WdColorIndex prop);
        [id(0x0000008a), propget, helpcontext(0x0952008a)]
        HRESULT Subscript([out, retval] long* prop);
        [id(0x0000008a), propput, helpcontext(0x0952008a)]
        HRESULT Subscript([in] long prop);
        [id(0x0000008b), propget, helpcontext(0x0952008b)]
        HRESULT Superscript([out, retval] long* prop);
        [id(0x0000008b), propput, helpcontext(0x0952008b)]
        HRESULT Superscript([in] long prop);
        [id(0x0000008c), propget, helpcontext(0x0952008c)]
        HRESULT Underline([out, retval] WdUnderline* prop);
        [id(0x0000008c), propput, helpcontext(0x0952008c)]
        HRESULT Underline([in] WdUnderline prop);
        [id(0x0000008d), propget, helpcontext(0x0952008d)]
        HRESULT Size([out, retval] single* prop);
        [id(0x0000008d), propput, helpcontext(0x0952008d)]
        HRESULT Size([in] single prop);
        [id(0x0000008e), propget, helpcontext(0x0952008e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x0000008e), propput, helpcontext(0x0952008e)]
        HRESULT Name([in] BSTR prop);
        [id(0x0000008f), propget, helpcontext(0x0952008f)]
        HRESULT Position([out, retval] long* prop);
        [id(0x0000008f), propput, helpcontext(0x0952008f)]
        HRESULT Position([in] long prop);
        [id(0x00000090), propget, helpcontext(0x09520090)]
        HRESULT Spacing([out, retval] single* prop);
        [id(0x00000090), propput, helpcontext(0x09520090)]
        HRESULT Spacing([in] single prop);
        [id(0x00000091), propget, helpcontext(0x09520091)]
        HRESULT Scaling([out, retval] long* prop);
        [id(0x00000091), propput, helpcontext(0x09520091)]
        HRESULT Scaling([in] long prop);
        [id(0x00000092), propget, helpcontext(0x09520092)]
        HRESULT Shadow([out, retval] long* prop);
        [id(0x00000092), propput, helpcontext(0x09520092)]
        HRESULT Shadow([in] long prop);
        [id(0x00000093), propget, helpcontext(0x09520093)]
        HRESULT Outline([out, retval] long* prop);
        [id(0x00000093), propput, helpcontext(0x09520093)]
        HRESULT Outline([in] long prop);
        [id(0x00000094), propget, helpcontext(0x09520094)]
        HRESULT Emboss([out, retval] long* prop);
        [id(0x00000094), propput, helpcontext(0x09520094)]
        HRESULT Emboss([in] long prop);
        [id(0x00000095), propget, helpcontext(0x09520095)]
        HRESULT Kerning([out, retval] single* prop);
        [id(0x00000095), propput, helpcontext(0x09520095)]
        HRESULT Kerning([in] single prop);
        [id(0x00000096), propget, helpcontext(0x09520096)]
        HRESULT Engrave([out, retval] long* prop);
        [id(0x00000096), propput, helpcontext(0x09520096)]
        HRESULT Engrave([in] long prop);
        [id(0x00000097), propget, hidden, helpcontext(0x09520097)]
        HRESULT Animation([out, retval] WdAnimation* prop);
        [id(0x00000097), propput, hidden, helpcontext(0x09520097)]
        HRESULT Animation([in] WdAnimation prop);
        [id(0x0000044c), propget, helpcontext(0x0952044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x0952044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000099), propget, helpcontext(0x09520099)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x0000009a), propget, helpcontext(0x0952009a)]
        HRESULT EmphasisMark([out, retval] WdEmphasisMark* prop);
        [id(0x0000009a), propput, helpcontext(0x0952009a)]
        HRESULT EmphasisMark([in] WdEmphasisMark prop);
        [id(0x0000009b), propget, helpcontext(0x0952009b)]
        HRESULT DisableCharacterSpaceGrid([out, retval] VARIANT_BOOL* prop);
        [id(0x0000009b), propput, helpcontext(0x0952009b)]
        HRESULT DisableCharacterSpaceGrid([in] VARIANT_BOOL prop);
        [id(0x0000009c), propget, helpcontext(0x0952009c)]
        HRESULT NameFarEast([out, retval] BSTR* prop);
        [id(0x0000009c), propput, helpcontext(0x0952009c)]
        HRESULT NameFarEast([in] BSTR prop);
        [id(0x0000009d), propget, helpcontext(0x0952009d)]
        HRESULT NameAscii([out, retval] BSTR* prop);
        [id(0x0000009d), propput, helpcontext(0x0952009d)]
        HRESULT NameAscii([in] BSTR prop);
        [id(0x0000009e), propget, helpcontext(0x0952009e)]
        HRESULT NameOther([out, retval] BSTR* prop);
        [id(0x0000009e), propput, helpcontext(0x0952009e)]
        HRESULT NameOther([in] BSTR prop);
        [id(0x00000064), helpcontext(0x09520064)]
        HRESULT Grow();
        [id(0x00000065), helpcontext(0x09520065)]
        HRESULT Shrink();
        [id(0x00000066), helpcontext(0x09520066)]
        HRESULT Reset();
        [id(0x00000067), helpcontext(0x09520067)]
        HRESULT SetAsTemplateDefault();
        [id(0x0000009f), propget, hidden, helpcontext(0x0952009f)]
        HRESULT Color([out, retval] WdColor* prop);
        [id(0x0000009f), propput, hidden, helpcontext(0x0952009f)]
        HRESULT Color([in] WdColor prop);
        [id(0x000000a0), propget, helpcontext(0x095200a0)]
        HRESULT BoldBi([out, retval] long* prop);
        [id(0x000000a0), propput, helpcontext(0x095200a0)]
        HRESULT BoldBi([in] long prop);
        [id(0x000000a1), propget, helpcontext(0x095200a1)]
        HRESULT ItalicBi([out, retval] long* prop);
        [id(0x000000a1), propput, helpcontext(0x095200a1)]
        HRESULT ItalicBi([in] long prop);
        [id(0x000000a2), propget, helpcontext(0x095200a2)]
        HRESULT SizeBi([out, retval] single* prop);
        [id(0x000000a2), propput, helpcontext(0x095200a2)]
        HRESULT SizeBi([in] single prop);
        [id(0x000000a3), propget, helpcontext(0x095200a3)]
        HRESULT NameBi([out, retval] BSTR* prop);
        [id(0x000000a3), propput, helpcontext(0x095200a3)]
        HRESULT NameBi([in] BSTR prop);
        [id(0x000000a4), propget, helpcontext(0x095200a4)]
        HRESULT ColorIndexBi([out, retval] WdColorIndex* prop);
        [id(0x000000a4), propput, helpcontext(0x095200a4)]
        HRESULT ColorIndexBi([in] WdColorIndex prop);
        [id(0x000000a5), propget, helpcontext(0x095200a5)]
        HRESULT DiacriticColor([out, retval] WdColor* prop);
        [id(0x000000a5), propput, helpcontext(0x095200a5)]
        HRESULT DiacriticColor([in] WdColor prop);
        [id(0x000000a6), propget, helpcontext(0x095200a6)]
        HRESULT UnderlineColor([out, retval] WdColor* prop);
        [id(0x000000a6), propput, helpcontext(0x095200a6)]
        HRESULT UnderlineColor([in] WdColor prop);
        [id(0x000000a7), propget, helpcontext(0x095200a7)]
        HRESULT Glow([out, retval] GlowFormat** prop);
        [id(0x000000a7), propput, helpcontext(0x095200a7)]
        HRESULT Glow([in] GlowFormat* prop);
        [id(0x000000a8), propget, helpcontext(0x095200a8)]
        HRESULT Reflection([out, retval] ReflectionFormat** prop);
        [id(0x000000a8), propput, helpcontext(0x095200a8)]
        HRESULT Reflection([in] ReflectionFormat* prop);
        [id(0x000000a9), propget, helpcontext(0x095200a9)]
        HRESULT TextShadow([out, retval] ShadowFormat** prop);
        [id(0x000000a9), propput, helpcontext(0x095200a9)]
        HRESULT TextShadow([in] ShadowFormat* prop);
        [id(0x000000aa), propget, helpcontext(0x095200aa)]
        HRESULT Fill([out, retval] FillFormat** prop);
        [id(0x000000aa), propput, helpcontext(0x095200aa)]
        HRESULT Fill([in] FillFormat* prop);
        [id(0x000000ab), propget, helpcontext(0x095200ab)]
        HRESULT Line([out, retval] LineFormat** prop);
        [id(0x000000ab), propput, helpcontext(0x095200ab)]
        HRESULT Line([in] LineFormat* prop);
        [id(0x000000ac), propget, helpcontext(0x095200ac)]
        HRESULT ThreeD([out, retval] ThreeDFormat** prop);
        [id(0x000000ac), propput, helpcontext(0x095200ac)]
        HRESULT ThreeD([in] ThreeDFormat* prop);
        [id(0x000000ad), propget, helpcontext(0x095200ad)]
        HRESULT TextColor([out, retval] ColorFormat** prop);
        [id(0x000000ae), propget, helpcontext(0x095200ae)]
        HRESULT Ligatures([out, retval] WdLigatures* prop);
        [id(0x000000ae), propput, helpcontext(0x095200ae)]
        HRESULT Ligatures([in] WdLigatures prop);
        [id(0x000000af), propget, helpcontext(0x095200af)]
        HRESULT NumberForm([out, retval] WdNumberForm* prop);
        [id(0x000000af), propput, helpcontext(0x095200af)]
        HRESULT NumberForm([in] WdNumberForm prop);
        [id(0x000000b0), propget, helpcontext(0x095200b0)]
        HRESULT NumberSpacing([out, retval] WdNumberSpacing* prop);
        [id(0x000000b0), propput, helpcontext(0x095200b0)]
        HRESULT NumberSpacing([in] WdNumberSpacing prop);
        [id(0x000000b1), propget, helpcontext(0x095200b1)]
        HRESULT ContextualAlternates([out, retval] long* prop);
        [id(0x000000b1), propput, helpcontext(0x095200b1)]
        HRESULT ContextualAlternates([in] long prop);
        [id(0x000000b2), propget, helpcontext(0x095200b2)]
        HRESULT StylisticSet([out, retval] WdStylisticSet* prop);
        [id(0x000000b2), propput, helpcontext(0x095200b2)]
        HRESULT StylisticSet([in] WdStylisticSet prop);
    };

    [
      odl,
      uuid(00020951-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000951),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Table : IDispatch {
        [id(00000000), propget, helpcontext(0x09510000)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x095103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09510064)]
        HRESULT Columns([out, retval] Columns** prop);
        [id(0x00000065), propget, helpcontext(0x09510065)]
        HRESULT Rows([out, retval] Rows** prop);
        [id(0x0000044c), propget, helpcontext(0x0951044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x0951044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000068), propget, helpcontext(0x09510068)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000069), propget, helpcontext(0x09510069)]
        HRESULT Uniform([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006a), propget, helpcontext(0x0951006a)]
        HRESULT AutoFormatType([out, retval] long* prop);
        [id(0x000000c8), helpcontext(0x095100c8)]
        HRESULT Select();
        [id(0x00000009), helpcontext(0x09510009)]
        HRESULT Delete();
        [id(0x0000000a), hidden, helpcontext(0x0951000a)]
        HRESULT SortOld(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* FieldNumber, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* FieldNumber2, 
                        [in, optional] VARIANT* SortFieldType2, 
                        [in, optional] VARIANT* SortOrder2, 
                        [in, optional] VARIANT* FieldNumber3, 
                        [in, optional] VARIANT* SortFieldType3, 
                        [in, optional] VARIANT* SortOrder3, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* LanguageID);
        [id(0x0000000c), helpcontext(0x0951000c)]
        HRESULT SortAscending();
        [id(0x0000000d), helpcontext(0x0951000d)]
        HRESULT SortDescending();
        [id(0x0000000e), helpcontext(0x0951000e)]
        HRESULT AutoFormat(
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ApplyBorders, 
                        [in, optional] VARIANT* ApplyShading, 
                        [in, optional] VARIANT* ApplyFont, 
                        [in, optional] VARIANT* ApplyColor, 
                        [in, optional] VARIANT* ApplyHeadingRows, 
                        [in, optional] VARIANT* ApplyLastRow, 
                        [in, optional] VARIANT* ApplyFirstColumn, 
                        [in, optional] VARIANT* ApplyLastColumn, 
                        [in, optional] VARIANT* AutoFit);
        [id(0x0000000f), helpcontext(0x0951000f)]
        HRESULT UpdateAutoFormat();
        [id(0x00000010), hidden, helpcontext(0x09510010)]
        HRESULT ConvertToTextOld(
                        [in, optional] VARIANT* Separator, 
                        [out, retval] Range** prop);
        [id(0x00000011), helpcontext(0x09510011)]
        HRESULT Cell(
                        [in] long Row, 
                        [in] long Column, 
                        [out, retval] Cell** prop);
        [id(0x00000012), helpcontext(0x09510012)]
        HRESULT Split(
                        [in] VARIANT* BeforeRow, 
                        [out, retval] Table** prop);
        [id(0x00000013), helpcontext(0x09510013)]
        HRESULT ConvertToText(
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* NestedTables, 
                        [out, retval] Range** prop);
        [id(0x00000014), helpcontext(0x09510014)]
        HRESULT AutoFitBehavior([in] WdAutoFitBehavior Behavior);
        [id(0x00000017), helpcontext(0x09510017)]
        HRESULT Sort(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* FieldNumber, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* FieldNumber2, 
                        [in, optional] VARIANT* SortFieldType2, 
                        [in, optional] VARIANT* SortOrder2, 
                        [in, optional] VARIANT* FieldNumber3, 
                        [in, optional] VARIANT* SortFieldType3, 
                        [in, optional] VARIANT* SortOrder3, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* BidiSort, 
                        [in, optional] VARIANT* IgnoreThe, 
                        [in, optional] VARIANT* IgnoreKashida, 
                        [in, optional] VARIANT* IgnoreDiacritics, 
                        [in, optional] VARIANT* IgnoreHe, 
                        [in, optional] VARIANT* LanguageID);
        [id(0x0000006b), propget, helpcontext(0x0951006b)]
        HRESULT Tables([out, retval] Tables** prop);
        [id(0x0000006c), propget, helpcontext(0x0951006c)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x0000006d), propget, hidden, helpcontext(0x0951006d)]
        HRESULT AllowPageBreaks([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006d), propput, hidden, helpcontext(0x0951006d)]
        HRESULT AllowPageBreaks([in] VARIANT_BOOL prop);
        [id(0x0000006e), propget, helpcontext(0x0951006e)]
        HRESULT AllowAutoFit([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006e), propput, helpcontext(0x0951006e)]
        HRESULT AllowAutoFit([in] VARIANT_BOOL prop);
        [id(0x0000006f), propget, helpcontext(0x0951006f)]
        HRESULT PreferredWidth([out, retval] single* prop);
        [id(0x0000006f), propput, helpcontext(0x0951006f)]
        HRESULT PreferredWidth([in] single prop);
        [id(0x00000070), propget, helpcontext(0x09510070)]
        HRESULT PreferredWidthType([out, retval] WdPreferredWidthType* prop);
        [id(0x00000070), propput, helpcontext(0x09510070)]
        HRESULT PreferredWidthType([in] WdPreferredWidthType prop);
        [id(0x00000071), propget, helpcontext(0x09510071)]
        HRESULT TopPadding([out, retval] single* prop);
        [id(0x00000071), propput, helpcontext(0x09510071)]
        HRESULT TopPadding([in] single prop);
        [id(0x00000072), propget, helpcontext(0x09510072)]
        HRESULT BottomPadding([out, retval] single* prop);
        [id(0x00000072), propput, helpcontext(0x09510072)]
        HRESULT BottomPadding([in] single prop);
        [id(0x00000073), propget, helpcontext(0x09510073)]
        HRESULT LeftPadding([out, retval] single* prop);
        [id(0x00000073), propput, helpcontext(0x09510073)]
        HRESULT LeftPadding([in] single prop);
        [id(0x00000074), propget, helpcontext(0x09510074)]
        HRESULT RightPadding([out, retval] single* prop);
        [id(0x00000074), propput, helpcontext(0x09510074)]
        HRESULT RightPadding([in] single prop);
        [id(0x00000075), propget, helpcontext(0x09510075)]
        HRESULT Spacing([out, retval] single* prop);
        [id(0x00000075), propput, helpcontext(0x09510075)]
        HRESULT Spacing([in] single prop);
        [id(0x00000076), propget, helpcontext(0x09510076)]
        HRESULT TableDirection([out, retval] WdTableDirection* prop);
        [id(0x00000076), propput, helpcontext(0x09510076)]
        HRESULT TableDirection([in] WdTableDirection prop);
        [id(0x00000077), propget, helpcontext(0x09510077)]
        HRESULT ID([out, retval] BSTR* prop);
        [id(0x00000077), propput, helpcontext(0x09510077)]
        HRESULT ID([in] BSTR prop);
        [id(0x000000c9), propget, helpcontext(0x095100c9)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(0x000000c9), propput, helpcontext(0x095100c9)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x000000ca), propget, helpcontext(0x095100ca)]
        HRESULT ApplyStyleHeadingRows([out, retval] VARIANT_BOOL* prop);
        [id(0x000000ca), propput, helpcontext(0x095100ca)]
        HRESULT ApplyStyleHeadingRows([in] VARIANT_BOOL prop);
        [id(0x000000cb), propget, helpcontext(0x095100cb)]
        HRESULT ApplyStyleLastRow([out, retval] VARIANT_BOOL* prop);
        [id(0x000000cb), propput, helpcontext(0x095100cb)]
        HRESULT ApplyStyleLastRow([in] VARIANT_BOOL prop);
        [id(0x000000cc), propget, helpcontext(0x095100cc)]
        HRESULT ApplyStyleFirstColumn([out, retval] VARIANT_BOOL* prop);
        [id(0x000000cc), propput, helpcontext(0x095100cc)]
        HRESULT ApplyStyleFirstColumn([in] VARIANT_BOOL prop);
        [id(0x000000cd), propget, helpcontext(0x095100cd)]
        HRESULT ApplyStyleLastColumn([out, retval] VARIANT_BOOL* prop);
        [id(0x000000cd), propput, helpcontext(0x095100cd)]
        HRESULT ApplyStyleLastColumn([in] VARIANT_BOOL prop);
        [id(0x000000ce), propget, helpcontext(0x095100ce)]
        HRESULT ApplyStyleRowBands([out, retval] VARIANT_BOOL* prop);
        [id(0x000000ce), propput, helpcontext(0x095100ce)]
        HRESULT ApplyStyleRowBands([in] VARIANT_BOOL prop);
        [id(0x000000cf), propget, helpcontext(0x095100cf)]
        HRESULT ApplyStyleColumnBands([out, retval] VARIANT_BOOL* prop);
        [id(0x000000cf), propput, helpcontext(0x095100cf)]
        HRESULT ApplyStyleColumnBands([in] VARIANT_BOOL prop);
        [id(0x000000d0), helpcontext(0x095100d0)]
        HRESULT ApplyStyleDirectFormatting([in] BSTR StyleName);
        [id(0x000000d1), propget, helpcontext(0x095100d1)]
        HRESULT Title([out, retval] BSTR* prop);
        [id(0x000000d1), propput, helpcontext(0x095100d1)]
        HRESULT Title([in] BSTR prop);
        [id(0x000000d2), propget, helpcontext(0x095100d2)]
        HRESULT Descr([out, retval] BSTR* prop);
        [id(0x000000d2), propput, helpcontext(0x095100d2)]
        HRESULT Descr([in] BSTR prop);
    };

    [
      odl,
      uuid(00020950-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000950),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Row : IDispatch {
        [id(00000000), propget, helpcontext(0x09500000)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x095003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x095003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x095003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000003), propget, helpcontext(0x09500003)]
        HRESULT AllowBreakAcrossPages([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x09500003)]
        HRESULT AllowBreakAcrossPages([in] long prop);
        [id(0x00000004), propget, helpcontext(0x09500004)]
        HRESULT Alignment([out, retval] WdRowAlignment* prop);
        [id(0x00000004), propput, helpcontext(0x09500004)]
        HRESULT Alignment([in] WdRowAlignment prop);
        [id(0x00000005), propget, helpcontext(0x09500005)]
        HRESULT HeadingFormat([out, retval] long* prop);
        [id(0x00000005), propput, helpcontext(0x09500005)]
        HRESULT HeadingFormat([in] long prop);
        [id(0x00000006), propget, helpcontext(0x09500006)]
        HRESULT SpaceBetweenColumns([out, retval] single* prop);
        [id(0x00000006), propput, helpcontext(0x09500006)]
        HRESULT SpaceBetweenColumns([in] single prop);
        [id(0x00000007), propget, helpcontext(0x09500007)]
        HRESULT Height([out, retval] single* prop);
        [id(0x00000007), propput, helpcontext(0x09500007)]
        HRESULT Height([in] single prop);
        [id(0x00000008), propget, helpcontext(0x09500008)]
        HRESULT HeightRule([out, retval] WdRowHeightRule* prop);
        [id(0x00000008), propput, helpcontext(0x09500008)]
        HRESULT HeightRule([in] WdRowHeightRule prop);
        [id(0x00000009), propget, helpcontext(0x09500009)]
        HRESULT LeftIndent([out, retval] single* prop);
        [id(0x00000009), propput, helpcontext(0x09500009)]
        HRESULT LeftIndent([in] single prop);
        [id(0x0000000a), propget, helpcontext(0x0950000a)]
        HRESULT IsLast([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000b), propget, helpcontext(0x0950000b)]
        HRESULT IsFirst([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propget, helpcontext(0x0950000c)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000064), propget, helpcontext(0x09500064)]
        HRESULT Cells([out, retval] Cells** prop);
        [id(0x0000044c), propget, helpcontext(0x0950044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x0950044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000067), propget, helpcontext(0x09500067)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000068), propget, helpcontext(0x09500068)]
        HRESULT Next([out, retval] Row** prop);
        [id(0x00000069), propget, helpcontext(0x09500069)]
        HRESULT Previous([out, retval] Row** prop);
        [id(0x0000ffff), helpcontext(0x0950ffff)]
        HRESULT Select();
        [id(0x000000c8), helpcontext(0x095000c8)]
        HRESULT Delete();
        [id(0x000000ca), helpcontext(0x095000ca)]
        HRESULT SetLeftIndent(
                        [in] single LeftIndent, 
                        [in] WdRulerStyle RulerStyle);
        [id(0x000000cb), helpcontext(0x095000cb)]
        HRESULT SetHeight(
                        [in] single RowHeight, 
                        [in] WdRowHeightRule HeightRule);
        [id(0x00000010), hidden, helpcontext(0x09500010)]
        HRESULT ConvertToTextOld(
                        [in, optional] VARIANT* Separator, 
                        [out, retval] Range** prop);
        [id(0x00000012), helpcontext(0x09500012)]
        HRESULT ConvertToText(
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* NestedTables, 
                        [out, retval] Range** prop);
        [id(0x0000006a), propget, helpcontext(0x0950006a)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x0000006b), propget, helpcontext(0x0950006b)]
        HRESULT ID([out, retval] BSTR* prop);
        [id(0x0000006b), propput, helpcontext(0x0950006b)]
        HRESULT ID([in] BSTR prop);
    };

    [
      odl,
      uuid(0002094F-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000094f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Column : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x094f03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094f03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094f03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000003), propget, helpcontext(0x094f0003)]
        HRESULT Width([out, retval] single* prop);
        [id(0x00000003), propput, helpcontext(0x094f0003)]
        HRESULT Width([in] single prop);
        [id(0x00000004), propget, helpcontext(0x094f0004)]
        HRESULT IsFirst([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propget, helpcontext(0x094f0005)]
        HRESULT IsLast([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propget, helpcontext(0x094f0006)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000064), propget, helpcontext(0x094f0064)]
        HRESULT Cells([out, retval] Cells** prop);
        [id(0x0000044c), propget, helpcontext(0x094f044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x094f044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000066), propget, helpcontext(0x094f0066)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000067), propget, helpcontext(0x094f0067)]
        HRESULT Next([out, retval] Column** prop);
        [id(0x00000068), propget, helpcontext(0x094f0068)]
        HRESULT Previous([out, retval] Column** prop);
        [id(0x0000ffff), helpcontext(0x094fffff)]
        HRESULT Select();
        [id(0x000000c8), helpcontext(0x094f00c8)]
        HRESULT Delete();
        [id(0x000000c9), helpcontext(0x094f00c9)]
        HRESULT SetWidth(
                        [in] single ColumnWidth, 
                        [in] WdRulerStyle RulerStyle);
        [id(0x000000ca), helpcontext(0x094f00ca)]
        HRESULT AutoFit();
        [id(0x000000cb), hidden, helpcontext(0x094f00cb)]
        HRESULT SortOld(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* LanguageID);
        [id(0x000000cc), helpcontext(0x094f00cc)]
        HRESULT Sort(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* BidiSort, 
                        [in, optional] VARIANT* IgnoreThe, 
                        [in, optional] VARIANT* IgnoreKashida, 
                        [in, optional] VARIANT* IgnoreDiacritics, 
                        [in, optional] VARIANT* IgnoreHe, 
                        [in, optional] VARIANT* LanguageID);
        [id(0x00000069), propget, helpcontext(0x094f0069)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x0000006a), propget, helpcontext(0x094f006a)]
        HRESULT PreferredWidth([out, retval] single* prop);
        [id(0x0000006a), propput, helpcontext(0x094f006a)]
        HRESULT PreferredWidth([in] single prop);
        [id(0x0000006b), propget, helpcontext(0x094f006b)]
        HRESULT PreferredWidthType([out, retval] WdPreferredWidthType* prop);
        [id(0x0000006b), propput, helpcontext(0x094f006b)]
        HRESULT PreferredWidthType([in] WdPreferredWidthType prop);
    };

    [
      odl,
      uuid(0002094E-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000094e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Cell : IDispatch {
        [id(00000000), propget, helpcontext(0x094e0000)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x094e03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000004), propget, helpcontext(0x094e0004)]
        HRESULT RowIndex([out, retval] long* prop);
        [id(0x00000005), propget, helpcontext(0x094e0005)]
        HRESULT ColumnIndex([out, retval] long* prop);
        [id(0x00000006), propget, helpcontext(0x094e0006)]
        HRESULT Width([out, retval] single* prop);
        [id(0x00000006), propput, helpcontext(0x094e0006)]
        HRESULT Width([in] single prop);
        [id(0x00000007), propget, helpcontext(0x094e0007)]
        HRESULT Height([out, retval] single* prop);
        [id(0x00000007), propput, helpcontext(0x094e0007)]
        HRESULT Height([in] single prop);
        [id(0x00000008), propget, helpcontext(0x094e0008)]
        HRESULT HeightRule([out, retval] WdRowHeightRule* prop);
        [id(0x00000008), propput, helpcontext(0x094e0008)]
        HRESULT HeightRule([in] WdRowHeightRule prop);
        [id(0x00000450), propget, helpcontext(0x094e0450)]
        HRESULT VerticalAlignment([out, retval] WdCellVerticalAlignment* prop);
        [id(0x00000450), propput, helpcontext(0x094e0450)]
        HRESULT VerticalAlignment([in] WdCellVerticalAlignment prop);
        [id(0x00000065), propget, helpcontext(0x094e0065)]
        HRESULT Column([out, retval] Column** prop);
        [id(0x00000066), propget, helpcontext(0x094e0066)]
        HRESULT Row([out, retval] Row** prop);
        [id(0x00000067), propget, helpcontext(0x094e0067)]
        HRESULT Next([out, retval] Cell** prop);
        [id(0x00000068), propget, helpcontext(0x094e0068)]
        HRESULT Previous([out, retval] Cell** prop);
        [id(0x00000069), propget, helpcontext(0x094e0069)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x0000044c), propget, helpcontext(0x094e044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x094e044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x0000ffff), helpcontext(0x094effff)]
        HRESULT Select();
        [id(0x000000c8), helpcontext(0x094e00c8)]
        HRESULT Delete([in, optional] VARIANT* ShiftCells);
        [id(0x000000c9), helpcontext(0x094e00c9)]
        HRESULT Formula(
                        [in, optional] VARIANT* Formula, 
                        [in, optional] VARIANT* NumFormat);
        [id(0x000000ca), helpcontext(0x094e00ca)]
        HRESULT SetWidth(
                        [in] single ColumnWidth, 
                        [in] WdRulerStyle RulerStyle);
        [id(0x000000cb), helpcontext(0x094e00cb)]
        HRESULT SetHeight(
                        [in] VARIANT* RowHeight, 
                        [in] WdRowHeightRule HeightRule);
        [id(0x000000cc), helpcontext(0x094e00cc)]
        HRESULT Merge([in] Cell* MergeTo);
        [id(0x000000cd), helpcontext(0x094e00cd)]
        HRESULT Split(
                        [in, optional] VARIANT* NumRows, 
                        [in, optional] VARIANT* NumColumns);
        [id(0x000000ce), helpcontext(0x094e00ce)]
        HRESULT AutoSum();
        [id(0x0000006a), propget, helpcontext(0x094e006a)]
        HRESULT Tables([out, retval] Tables** prop);
        [id(0x0000006b), propget, helpcontext(0x094e006b)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x0000006c), propget, helpcontext(0x094e006c)]
        HRESULT WordWrap([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006c), propput, helpcontext(0x094e006c)]
        HRESULT WordWrap([in] VARIANT_BOOL prop);
        [id(0x0000006d), propget, helpcontext(0x094e006d)]
        HRESULT PreferredWidth([out, retval] single* prop);
        [id(0x0000006d), propput, helpcontext(0x094e006d)]
        HRESULT PreferredWidth([in] single prop);
        [id(0x0000006e), propget, helpcontext(0x094e006e)]
        HRESULT FitText([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006e), propput, helpcontext(0x094e006e)]
        HRESULT FitText([in] VARIANT_BOOL prop);
        [id(0x0000006f), propget, helpcontext(0x094e006f)]
        HRESULT TopPadding([out, retval] single* prop);
        [id(0x0000006f), propput, helpcontext(0x094e006f)]
        HRESULT TopPadding([in] single prop);
        [id(0x00000070), propget, helpcontext(0x094e0070)]
        HRESULT BottomPadding([out, retval] single* prop);
        [id(0x00000070), propput, helpcontext(0x094e0070)]
        HRESULT BottomPadding([in] single prop);
        [id(0x00000071), propget, helpcontext(0x094e0071)]
        HRESULT LeftPadding([out, retval] single* prop);
        [id(0x00000071), propput, helpcontext(0x094e0071)]
        HRESULT LeftPadding([in] single prop);
        [id(0x00000072), propget, helpcontext(0x094e0072)]
        HRESULT RightPadding([out, retval] single* prop);
        [id(0x00000072), propput, helpcontext(0x094e0072)]
        HRESULT RightPadding([in] single prop);
        [id(0x00000073), propget, helpcontext(0x094e0073)]
        HRESULT ID([out, retval] BSTR* prop);
        [id(0x00000073), propput, helpcontext(0x094e0073)]
        HRESULT ID([in] BSTR prop);
        [id(0x00000074), propget, helpcontext(0x094e0074)]
        HRESULT PreferredWidthType([out, retval] WdPreferredWidthType* prop);
        [id(0x00000074), propput, helpcontext(0x094e0074)]
        HRESULT PreferredWidthType([in] WdPreferredWidthType prop);
    };

    [
      odl,
      uuid(0002094D-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000094d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Tables : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x094dfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x094d0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x094d03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x094d0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Table** prop);
        [id(0x00000004), hidden, helpcontext(0x094d0004)]
        HRESULT AddOld(
                        [in] Range* Range, 
                        [in] long NumRows, 
                        [in] long NumColumns, 
                        [out, retval] Table** prop);
        [id(0x000000c8), helpcontext(0x094d00c8)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in] long NumRows, 
                        [in] long NumColumns, 
                        [in, optional] VARIANT* DefaultTableBehavior, 
                        [in, optional] VARIANT* AutoFitBehavior, 
                        [out, retval] Table** prop);
        [id(0x00000064), propget, helpcontext(0x094d0064)]
        HRESULT NestingLevel([out, retval] long* prop);
    };

    [
      odl,
      uuid(0002094C-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000094c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Rows : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x094cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x094c0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x094c0003)]
        HRESULT AllowBreakAcrossPages([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x094c0003)]
        HRESULT AllowBreakAcrossPages([in] long prop);
        [id(0x00000004), propget, helpcontext(0x094c0004)]
        HRESULT Alignment([out, retval] WdRowAlignment* prop);
        [id(0x00000004), propput, helpcontext(0x094c0004)]
        HRESULT Alignment([in] WdRowAlignment prop);
        [id(0x00000005), propget, helpcontext(0x094c0005)]
        HRESULT HeadingFormat([out, retval] long* prop);
        [id(0x00000005), propput, helpcontext(0x094c0005)]
        HRESULT HeadingFormat([in] long prop);
        [id(0x00000006), propget, helpcontext(0x094c0006)]
        HRESULT SpaceBetweenColumns([out, retval] single* prop);
        [id(0x00000006), propput, helpcontext(0x094c0006)]
        HRESULT SpaceBetweenColumns([in] single prop);
        [id(0x00000007), propget, helpcontext(0x094c0007)]
        HRESULT Height([out, retval] single* prop);
        [id(0x00000007), propput, helpcontext(0x094c0007)]
        HRESULT Height([in] single prop);
        [id(0x00000008), propget, helpcontext(0x094c0008)]
        HRESULT HeightRule([out, retval] WdRowHeightRule* prop);
        [id(0x00000008), propput, helpcontext(0x094c0008)]
        HRESULT HeightRule([in] WdRowHeightRule prop);
        [id(0x00000009), propget, helpcontext(0x094c0009)]
        HRESULT LeftIndent([out, retval] single* prop);
        [id(0x00000009), propput, helpcontext(0x094c0009)]
        HRESULT LeftIndent([in] single prop);
        [id(0x0000000a), propget, helpcontext(0x094c000a)]
        HRESULT First([out, retval] Row** prop);
        [id(0x0000000b), propget, helpcontext(0x094c000b)]
        HRESULT Last([out, retval] Row** prop);
        [id(0x000003e8), propget, helpcontext(0x094c03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000044c), propget, helpcontext(0x094c044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x094c044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000066), propget, helpcontext(0x094c0066)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(00000000), helpcontext(0x094c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Row** prop);
        [id(0x00000064), helpcontext(0x094c0064)]
        HRESULT Add(
                        [in, optional] VARIANT* BeforeRow, 
                        [out, retval] Row** prop);
        [id(0x000000c7), helpcontext(0x094c00c7)]
        HRESULT Select();
        [id(0x000000c8), helpcontext(0x094c00c8)]
        HRESULT Delete();
        [id(0x000000ca), helpcontext(0x094c00ca)]
        HRESULT SetLeftIndent(
                        [in] single LeftIndent, 
                        [in] WdRulerStyle RulerStyle);
        [id(0x000000cb), helpcontext(0x094c00cb)]
        HRESULT SetHeight(
                        [in] single RowHeight, 
                        [in] WdRowHeightRule HeightRule);
        [id(0x00000010), hidden, helpcontext(0x094c0010)]
        HRESULT ConvertToTextOld(
                        [in, optional] VARIANT* Separator, 
                        [out, retval] Range** prop);
        [id(0x000000ce), helpcontext(0x094c00ce)]
        HRESULT DistributeHeight();
        [id(0x000000d2), helpcontext(0x094c00d2)]
        HRESULT ConvertToText(
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* NestedTables, 
                        [out, retval] Range** prop);
        [id(0x0000000c), propget, helpcontext(0x094c000c)]
        HRESULT WrapAroundText([out, retval] long* prop);
        [id(0x0000000c), propput, helpcontext(0x094c000c)]
        HRESULT WrapAroundText([in] long prop);
        [id(0x0000000d), propget, helpcontext(0x094c000d)]
        HRESULT DistanceTop([out, retval] single* prop);
        [id(0x0000000d), propput, helpcontext(0x094c000d)]
        HRESULT DistanceTop([in] single prop);
        [id(0x0000000e), propget, helpcontext(0x094c000e)]
        HRESULT DistanceBottom([out, retval] single* prop);
        [id(0x0000000e), propput, helpcontext(0x094c000e)]
        HRESULT DistanceBottom([in] single prop);
        [id(0x00000014), propget, helpcontext(0x094c0014)]
        HRESULT DistanceLeft([out, retval] single* prop);
        [id(0x00000014), propput, helpcontext(0x094c0014)]
        HRESULT DistanceLeft([in] single prop);
        [id(0x00000015), propget, helpcontext(0x094c0015)]
        HRESULT DistanceRight([out, retval] single* prop);
        [id(0x00000015), propput, helpcontext(0x094c0015)]
        HRESULT DistanceRight([in] single prop);
        [id(0x0000000f), propget, helpcontext(0x094c000f)]
        HRESULT HorizontalPosition([out, retval] single* prop);
        [id(0x0000000f), propput, helpcontext(0x094c000f)]
        HRESULT HorizontalPosition([in] single prop);
        [id(0x00000011), propget, helpcontext(0x094c0011)]
        HRESULT VerticalPosition([out, retval] single* prop);
        [id(0x00000011), propput, helpcontext(0x094c0011)]
        HRESULT VerticalPosition([in] single prop);
        [id(0x00000012), propget, helpcontext(0x094c0012)]
        HRESULT RelativeHorizontalPosition([out, retval] WdRelativeHorizontalPosition* prop);
        [id(0x00000012), propput, helpcontext(0x094c0012)]
        HRESULT RelativeHorizontalPosition([in] WdRelativeHorizontalPosition prop);
        [id(0x00000013), propget, helpcontext(0x094c0013)]
        HRESULT RelativeVerticalPosition([out, retval] WdRelativeVerticalPosition* prop);
        [id(0x00000013), propput, helpcontext(0x094c0013)]
        HRESULT RelativeVerticalPosition([in] WdRelativeVerticalPosition prop);
        [id(0x00000016), propget, helpcontext(0x094c0016)]
        HRESULT AllowOverlap([out, retval] long* prop);
        [id(0x00000016), propput, helpcontext(0x094c0016)]
        HRESULT AllowOverlap([in] long prop);
        [id(0x00000067), propget, helpcontext(0x094c0067)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x00000068), propget, helpcontext(0x094c0068)]
        HRESULT TableDirection([out, retval] WdTableDirection* prop);
        [id(0x00000068), propput, helpcontext(0x094c0068)]
        HRESULT TableDirection([in] WdTableDirection prop);
    };

    [
      odl,
      uuid(0002094B-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000094b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Columns : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x094bfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x094b0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x094b03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x094b0064)]
        HRESULT First([out, retval] Column** prop);
        [id(0x00000065), propget, helpcontext(0x094b0065)]
        HRESULT Last([out, retval] Column** prop);
        [id(0x00000003), propget, helpcontext(0x094b0003)]
        HRESULT Width([out, retval] single* prop);
        [id(0x00000003), propput, helpcontext(0x094b0003)]
        HRESULT Width([in] single prop);
        [id(0x0000044c), propget, helpcontext(0x094b044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x094b044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000067), propget, helpcontext(0x094b0067)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(00000000), helpcontext(0x094b0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Column** prop);
        [id(0x00000005), helpcontext(0x094b0005)]
        HRESULT Add(
                        [in, optional] VARIANT* BeforeColumn, 
                        [out, retval] Column** prop);
        [id(0x000000c7), helpcontext(0x094b00c7)]
        HRESULT Select();
        [id(0x000000c8), helpcontext(0x094b00c8)]
        HRESULT Delete();
        [id(0x000000c9), helpcontext(0x094b00c9)]
        HRESULT SetWidth(
                        [in] single ColumnWidth, 
                        [in] WdRulerStyle RulerStyle);
        [id(0x000000ca), helpcontext(0x094b00ca)]
        HRESULT AutoFit();
        [id(0x000000cb), helpcontext(0x094b00cb)]
        HRESULT DistributeWidth();
        [id(0x00000068), propget, helpcontext(0x094b0068)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x00000069), propget, helpcontext(0x094b0069)]
        HRESULT PreferredWidth([out, retval] single* prop);
        [id(0x00000069), propput, helpcontext(0x094b0069)]
        HRESULT PreferredWidth([in] single prop);
        [id(0x0000006a), propget, helpcontext(0x094b006a)]
        HRESULT PreferredWidthType([out, retval] WdPreferredWidthType* prop);
        [id(0x0000006a), propput, helpcontext(0x094b006a)]
        HRESULT PreferredWidthType([in] WdPreferredWidthType prop);
    };

    [
      odl,
      uuid(0002094A-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000094a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Cells : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x094afffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x094a0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x094a03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000006), propget, helpcontext(0x094a0006)]
        HRESULT Width([out, retval] single* prop);
        [id(0x00000006), propput, helpcontext(0x094a0006)]
        HRESULT Width([in] single prop);
        [id(0x00000007), propget, helpcontext(0x094a0007)]
        HRESULT Height([out, retval] single* prop);
        [id(0x00000007), propput, helpcontext(0x094a0007)]
        HRESULT Height([in] single prop);
        [id(0x00000008), propget, helpcontext(0x094a0008)]
        HRESULT HeightRule([out, retval] WdRowHeightRule* prop);
        [id(0x00000008), propput, helpcontext(0x094a0008)]
        HRESULT HeightRule([in] WdRowHeightRule prop);
        [id(0x00000450), propget, helpcontext(0x094a0450)]
        HRESULT VerticalAlignment([out, retval] WdCellVerticalAlignment* prop);
        [id(0x00000450), propput, helpcontext(0x094a0450)]
        HRESULT VerticalAlignment([in] WdCellVerticalAlignment prop);
        [id(0x0000044c), propget, helpcontext(0x094a044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x094a044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000065), propget, helpcontext(0x094a0065)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(00000000), helpcontext(0x094a0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Cell** prop);
        [id(0x00000004), helpcontext(0x094a0004)]
        HRESULT Add(
                        [in, optional] VARIANT* BeforeCell, 
                        [out, retval] Cell** prop);
        [id(0x000000c8), helpcontext(0x094a00c8)]
        HRESULT Delete([in, optional] VARIANT* ShiftCells);
        [id(0x000000ca), helpcontext(0x094a00ca)]
        HRESULT SetWidth(
                        [in] single ColumnWidth, 
                        [in] WdRulerStyle RulerStyle);
        [id(0x000000cb), helpcontext(0x094a00cb)]
        HRESULT SetHeight(
                        [in] VARIANT* RowHeight, 
                        [in] WdRowHeightRule HeightRule);
        [id(0x000000cc), helpcontext(0x094a00cc)]
        HRESULT Merge();
        [id(0x000000cd), helpcontext(0x094a00cd)]
        HRESULT Split(
                        [in, optional] VARIANT* NumRows, 
                        [in, optional] VARIANT* NumColumns, 
                        [in, optional] VARIANT* MergeBeforeSplit);
        [id(0x000000ce), helpcontext(0x094a00ce)]
        HRESULT DistributeHeight();
        [id(0x000000cf), helpcontext(0x094a00cf)]
        HRESULT DistributeWidth();
        [id(0x000000d0), helpcontext(0x094a00d0)]
        HRESULT AutoFit();
        [id(0x00000066), propget, helpcontext(0x094a0066)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x00000067), propget, helpcontext(0x094a0067)]
        HRESULT PreferredWidth([out, retval] single* prop);
        [id(0x00000067), propput, helpcontext(0x094a0067)]
        HRESULT PreferredWidth([in] single prop);
        [id(0x00000068), propget, helpcontext(0x094a0068)]
        HRESULT PreferredWidthType([out, retval] WdPreferredWidthType* prop);
        [id(0x00000068), propput, helpcontext(0x094a0068)]
        HRESULT PreferredWidthType([in] WdPreferredWidthType prop);
    };

    [
      odl,
      uuid(00020949-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000949),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AutoCorrect : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x094903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09490001)]
        HRESULT CorrectDays([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09490001)]
        HRESULT CorrectDays([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x09490002)]
        HRESULT CorrectInitialCaps([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09490002)]
        HRESULT CorrectInitialCaps([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x09490003)]
        HRESULT CorrectSentenceCaps([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09490003)]
        HRESULT CorrectSentenceCaps([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09490004)]
        HRESULT ReplaceText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09490004)]
        HRESULT ReplaceText([in] VARIANT_BOOL prop);
        [id(0x00000006), propget, helpcontext(0x09490006)]
        HRESULT Entries([out, retval] AutoCorrectEntries** prop);
        [id(0x00000007), propget, helpcontext(0x09490007)]
        HRESULT FirstLetterExceptions([out, retval] FirstLetterExceptions** prop);
        [id(0x00000008), propget, helpcontext(0x09490008)]
        HRESULT FirstLetterAutoAdd([out, retval] VARIANT_BOOL* prop);
        [id(0x00000008), propput, helpcontext(0x09490008)]
        HRESULT FirstLetterAutoAdd([in] VARIANT_BOOL prop);
        [id(0x00000009), propget, helpcontext(0x09490009)]
        HRESULT TwoInitialCapsExceptions([out, retval] TwoInitialCapsExceptions** prop);
        [id(0x0000000a), propget, helpcontext(0x0949000a)]
        HRESULT TwoInitialCapsAutoAdd([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000a), propput, helpcontext(0x0949000a)]
        HRESULT TwoInitialCapsAutoAdd([in] VARIANT_BOOL prop);
        [id(0x0000000b), propget, helpcontext(0x0949000b)]
        HRESULT CorrectCapsLock([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000b), propput, helpcontext(0x0949000b)]
        HRESULT CorrectCapsLock([in] VARIANT_BOOL prop);
        [id(0x0000000c), propget, helpcontext(0x0949000c)]
        HRESULT CorrectHangulAndAlphabet([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propput, helpcontext(0x0949000c)]
        HRESULT CorrectHangulAndAlphabet([in] VARIANT_BOOL prop);
        [id(0x0000000d), propget, helpcontext(0x0949000d)]
        HRESULT HangulAndAlphabetExceptions([out, retval] HangulAndAlphabetExceptions** prop);
        [id(0x0000000e), propget, helpcontext(0x0949000e)]
        HRESULT HangulAndAlphabetAutoAdd([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000e), propput, helpcontext(0x0949000e)]
        HRESULT HangulAndAlphabetAutoAdd([in] VARIANT_BOOL prop);
        [id(0x0000000f), propget, helpcontext(0x0949000f)]
        HRESULT ReplaceTextFromSpellingChecker([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000f), propput, helpcontext(0x0949000f)]
        HRESULT ReplaceTextFromSpellingChecker([in] VARIANT_BOOL prop);
        [id(0x00000010), propget, helpcontext(0x09490010)]
        HRESULT OtherCorrectionsAutoAdd([out, retval] VARIANT_BOOL* prop);
        [id(0x00000010), propput, helpcontext(0x09490010)]
        HRESULT OtherCorrectionsAutoAdd([in] VARIANT_BOOL prop);
        [id(0x00000011), propget, helpcontext(0x09490011)]
        HRESULT OtherCorrectionsExceptions([out, retval] OtherCorrectionsExceptions** prop);
        [id(0x00000012), propget, helpcontext(0x09490012)]
        HRESULT CorrectKeyboardSetting([out, retval] VARIANT_BOOL* prop);
        [id(0x00000012), propput, helpcontext(0x09490012)]
        HRESULT CorrectKeyboardSetting([in] VARIANT_BOOL prop);
        [id(0x00000013), propget, helpcontext(0x09490013)]
        HRESULT CorrectTableCells([out, retval] VARIANT_BOOL* prop);
        [id(0x00000013), propput, helpcontext(0x09490013)]
        HRESULT CorrectTableCells([in] VARIANT_BOOL prop);
        [id(0x00000014), propget, helpcontext(0x09490014)]
        HRESULT DisplayAutoCorrectOptions([out, retval] VARIANT_BOOL* prop);
        [id(0x00000014), propput, helpcontext(0x09490014)]
        HRESULT DisplayAutoCorrectOptions([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020948-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000948),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AutoCorrectEntries : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x094803e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0948fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09480001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09480000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] AutoCorrectEntry** prop);
        [id(0x00000065), helpcontext(0x09480065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in] BSTR Value, 
                        [out, retval] AutoCorrectEntry** prop);
        [id(0x00000066), helpcontext(0x09480066)]
        HRESULT AddRichText(
                        [in] BSTR Name, 
                        [in] Range* Range, 
                        [out, retval] AutoCorrectEntry** prop);
    };

    [
      odl,
      uuid(00020947-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000947),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AutoCorrectEntry : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x094703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09470001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09470002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x09470002)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x09470003)]
        HRESULT Value([out, retval] BSTR* prop);
        [id(0x00000003), propput, helpcontext(0x09470003)]
        HRESULT Value([in] BSTR prop);
        [id(0x00000004), propget, helpcontext(0x09470004)]
        HRESULT RichText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000065), helpcontext(0x09470065)]
        HRESULT Delete();
        [id(0x00000066), helpcontext(0x09470066)]
        HRESULT Apply([in] Range* Range);
    };

    [
      odl,
      uuid(00020946-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000946),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FirstLetterExceptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x094603e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0946fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09460001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09460000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] FirstLetterException** prop);
        [id(0x00000065), helpcontext(0x09460065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] FirstLetterException** prop);
    };

    [
      odl,
      uuid(00020945-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000945),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FirstLetterException : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x094503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09450001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09450002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000065), helpcontext(0x09450065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(00020944-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000944),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TwoInitialCapsExceptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x094403e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0944fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09440001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09440000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] TwoInitialCapsException** prop);
        [id(0x00000065), helpcontext(0x09440065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] TwoInitialCapsException** prop);
    };

    [
      odl,
      uuid(00020943-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000943),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TwoInitialCapsException : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x094303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09430001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09430002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000065), helpcontext(0x09430065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(00020942-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000942),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Footnotes : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0942fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09420002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x094203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09420064)]
        HRESULT Location([out, retval] WdFootnoteLocation* prop);
        [id(0x00000064), propput, helpcontext(0x09420064)]
        HRESULT Location([in] WdFootnoteLocation prop);
        [id(0x00000065), propget, helpcontext(0x09420065)]
        HRESULT NumberStyle([out, retval] WdNoteNumberStyle* prop);
        [id(0x00000065), propput, helpcontext(0x09420065)]
        HRESULT NumberStyle([in] WdNoteNumberStyle prop);
        [id(0x00000066), propget, helpcontext(0x09420066)]
        HRESULT StartingNumber([out, retval] long* prop);
        [id(0x00000066), propput, helpcontext(0x09420066)]
        HRESULT StartingNumber([in] long prop);
        [id(0x00000067), propget, helpcontext(0x09420067)]
        HRESULT NumberingRule([out, retval] WdNumberingRule* prop);
        [id(0x00000067), propput, helpcontext(0x09420067)]
        HRESULT NumberingRule([in] WdNumberingRule prop);
        [id(0x00000068), propget, helpcontext(0x09420068)]
        HRESULT Separator([out, retval] Range** prop);
        [id(0x00000069), propget, helpcontext(0x09420069)]
        HRESULT ContinuationSeparator([out, retval] Range** prop);
        [id(0x0000006a), propget, helpcontext(0x0942006a)]
        HRESULT ContinuationNotice([out, retval] Range** prop);
        [id(00000000), helpcontext(0x09420000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Footnote** prop);
        [id(0x00000004), helpcontext(0x09420004)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Reference, 
                        [in, optional] VARIANT* Text, 
                        [out, retval] Footnote** prop);
        [id(0x00000005), helpcontext(0x09420005)]
        HRESULT Convert();
        [id(0x00000006), helpcontext(0x09420006)]
        HRESULT SwapWithEndnotes();
        [id(0x00000007), helpcontext(0x09420007)]
        HRESULT ResetSeparator();
        [id(0x00000008), helpcontext(0x09420008)]
        HRESULT ResetContinuationSeparator();
        [id(0x00000009), helpcontext(0x09420009)]
        HRESULT ResetContinuationNotice();
    };

    [
      odl,
      uuid(00020941-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000941),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Endnotes : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0941fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09410002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x094103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09410064)]
        HRESULT Location([out, retval] WdEndnoteLocation* prop);
        [id(0x00000064), propput, helpcontext(0x09410064)]
        HRESULT Location([in] WdEndnoteLocation prop);
        [id(0x00000065), propget, helpcontext(0x09410065)]
        HRESULT NumberStyle([out, retval] WdNoteNumberStyle* prop);
        [id(0x00000065), propput, helpcontext(0x09410065)]
        HRESULT NumberStyle([in] WdNoteNumberStyle prop);
        [id(0x00000066), propget, helpcontext(0x09410066)]
        HRESULT StartingNumber([out, retval] long* prop);
        [id(0x00000066), propput, helpcontext(0x09410066)]
        HRESULT StartingNumber([in] long prop);
        [id(0x00000067), propget, helpcontext(0x09410067)]
        HRESULT NumberingRule([out, retval] WdNumberingRule* prop);
        [id(0x00000067), propput, helpcontext(0x09410067)]
        HRESULT NumberingRule([in] WdNumberingRule prop);
        [id(0x00000068), propget, helpcontext(0x09410068)]
        HRESULT Separator([out, retval] Range** prop);
        [id(0x00000069), propget, helpcontext(0x09410069)]
        HRESULT ContinuationSeparator([out, retval] Range** prop);
        [id(0x0000006a), propget, helpcontext(0x0941006a)]
        HRESULT ContinuationNotice([out, retval] Range** prop);
        [id(00000000), helpcontext(0x09410000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Endnote** prop);
        [id(0x00000004), helpcontext(0x09410004)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Reference, 
                        [in, optional] VARIANT* Text, 
                        [out, retval] Endnote** prop);
        [id(0x00000005), helpcontext(0x09410005)]
        HRESULT Convert();
        [id(0x00000006), helpcontext(0x09410006)]
        HRESULT SwapWithFootnotes();
        [id(0x00000007), helpcontext(0x09410007)]
        HRESULT ResetSeparator();
        [id(0x00000008), helpcontext(0x09410008)]
        HRESULT ResetContinuationSeparator();
        [id(0x00000009), helpcontext(0x09410009)]
        HRESULT ResetContinuationNotice();
    };

    [
      odl,
      uuid(00020940-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000940),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Comments : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0940fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09400002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x094003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x094003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x094003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), propget, helpcontext(0x094003eb)]
        HRESULT ShowBy([out, retval] BSTR* prop);
        [id(0x000003eb), propput, helpcontext(0x094003eb)]
        HRESULT ShowBy([in] BSTR prop);
        [id(00000000), helpcontext(0x09400000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Comment** prop);
        [id(0x00000004), helpcontext(0x09400004)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Text, 
                        [out, retval] Comment** prop);
    };

    [
      odl,
      uuid(0002093F-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000093f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Footnote : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093f03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093f03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093f03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000004), propget, helpcontext(0x093f0004)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000005), propget, helpcontext(0x093f0005)]
        HRESULT Reference([out, retval] Range** prop);
        [id(0x00000006), propget, helpcontext(0x093f0006)]
        HRESULT Index([out, retval] long* prop);
        [id(0x0000000a), helpcontext(0x093f000a)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(0002093E-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000093e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Endnote : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093e03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000004), propget, helpcontext(0x093e0004)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000005), propget, helpcontext(0x093e0005)]
        HRESULT Reference([out, retval] Range** prop);
        [id(0x00000006), propget, helpcontext(0x093e0006)]
        HRESULT Index([out, retval] long* prop);
        [id(0x0000000a), helpcontext(0x093e000a)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(0002093D-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000093d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Comment : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093d03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), propget, helpcontext(0x093d03eb)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x000003ec), propget, helpcontext(0x093d03ec)]
        HRESULT Reference([out, retval] Range** prop);
        [id(0x000003ed), propget, helpcontext(0x093d03ed)]
        HRESULT Scope([out, retval] Range** prop);
        [id(0x000003ee), propget, helpcontext(0x093d03ee)]
        HRESULT Index([out, retval] long* prop);
        [id(0x000003ef), propget, hidden, helpcontext(0x093d03ef)]
        HRESULT Author([out, retval] BSTR* prop);
        [id(0x000003ef), propput, hidden, helpcontext(0x093d03ef)]
        HRESULT Author([in] BSTR prop);
        [id(0x000003f0), propget, hidden, helpcontext(0x093d03f0)]
        HRESULT Initial([out, retval] BSTR* prop);
        [id(0x000003f0), propput, hidden, helpcontext(0x093d03f0)]
        HRESULT Initial([in] BSTR prop);
        [id(0x000003f1), propget, hidden, helpcontext(0x093d03f1)]
        HRESULT ShowTip([out, retval] VARIANT_BOOL* prop);
        [id(0x000003f1), propput, hidden, helpcontext(0x093d03f1)]
        HRESULT ShowTip([in] VARIANT_BOOL prop);
        [id(0x0000000a), hidden, helpcontext(0x093d000a)]
        HRESULT Delete();
        [id(0x000003f3), helpcontext(0x093d03f3)]
        HRESULT Edit();
        [id(0x000003f2), propget, helpcontext(0x093d03f2)]
        HRESULT Date([out, retval] DATE* prop);
        [id(0x000003f4), propget, helpcontext(0x093d03f4)]
        HRESULT IsInk([out, retval] VARIANT_BOOL* prop);
        [id(0x000003f5), propget, helpcontext(0x093d03f5)]
        HRESULT Done([out, retval] VARIANT_BOOL* prop);
        [id(0x000003f5), propput, helpcontext(0x093d03f5)]
        HRESULT Done([in] VARIANT_BOOL prop);
        [id(0x000003f6), propget, helpcontext(0x093d03f6)]
        HRESULT Ancestor([out, retval] Comment** prop);
        [id(0x000003f7), propget, helpcontext(0x093d03f7)]
        HRESULT Contact([out, retval] CoAuthor** prop);
        [id(0x000003f8), helpcontext(0x093d03f8)]
        HRESULT DeleteRecursively();
        [id(0x000003f9), propget, helpcontext(0x093d03f9)]
        HRESULT Replies([out, retval] Comments** prop);
    };

    [
      odl,
      uuid(0002093C-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000093c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Borders : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093c03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x093cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x093c0001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x093c0002)]
        HRESULT Enable([out, retval] long* prop);
        [id(0x00000002), propput, helpcontext(0x093c0002)]
        HRESULT Enable([in] long prop);
        [id(0x00000004), propget, helpcontext(0x093c0004)]
        HRESULT DistanceFromTop([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x093c0004)]
        HRESULT DistanceFromTop([in] long prop);
        [id(0x00000005), propget, helpcontext(0x093c0005)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x093c0005)]
        HRESULT Shadow([in] VARIANT_BOOL prop);
        [id(0x00000006), propget, helpcontext(0x093c0006)]
        HRESULT InsideLineStyle([out, retval] WdLineStyle* prop);
        [id(0x00000006), propput, helpcontext(0x093c0006)]
        HRESULT InsideLineStyle([in] WdLineStyle prop);
        [id(0x00000007), propget, helpcontext(0x093c0007)]
        HRESULT OutsideLineStyle([out, retval] WdLineStyle* prop);
        [id(0x00000007), propput, helpcontext(0x093c0007)]
        HRESULT OutsideLineStyle([in] WdLineStyle prop);
        [id(0x00000008), propget, helpcontext(0x093c0008)]
        HRESULT InsideLineWidth([out, retval] WdLineWidth* prop);
        [id(0x00000008), propput, helpcontext(0x093c0008)]
        HRESULT InsideLineWidth([in] WdLineWidth prop);
        [id(0x00000009), propget, helpcontext(0x093c0009)]
        HRESULT OutsideLineWidth([out, retval] WdLineWidth* prop);
        [id(0x00000009), propput, helpcontext(0x093c0009)]
        HRESULT OutsideLineWidth([in] WdLineWidth prop);
        [id(0x0000000a), propget, helpcontext(0x093c000a)]
        HRESULT InsideColorIndex([out, retval] WdColorIndex* prop);
        [id(0x0000000a), propput, helpcontext(0x093c000a)]
        HRESULT InsideColorIndex([in] WdColorIndex prop);
        [id(0x0000000b), propget, helpcontext(0x093c000b)]
        HRESULT OutsideColorIndex([out, retval] WdColorIndex* prop);
        [id(0x0000000b), propput, helpcontext(0x093c000b)]
        HRESULT OutsideColorIndex([in] WdColorIndex prop);
        [id(0x00000014), propget, helpcontext(0x093c0014)]
        HRESULT DistanceFromLeft([out, retval] long* prop);
        [id(0x00000014), propput, helpcontext(0x093c0014)]
        HRESULT DistanceFromLeft([in] long prop);
        [id(0x00000015), propget, helpcontext(0x093c0015)]
        HRESULT DistanceFromBottom([out, retval] long* prop);
        [id(0x00000015), propput, helpcontext(0x093c0015)]
        HRESULT DistanceFromBottom([in] long prop);
        [id(0x00000016), propget, helpcontext(0x093c0016)]
        HRESULT DistanceFromRight([out, retval] long* prop);
        [id(0x00000016), propput, helpcontext(0x093c0016)]
        HRESULT DistanceFromRight([in] long prop);
        [id(0x00000017), propget, helpcontext(0x093c0017)]
        HRESULT AlwaysInFront([out, retval] VARIANT_BOOL* prop);
        [id(0x00000017), propput, helpcontext(0x093c0017)]
        HRESULT AlwaysInFront([in] VARIANT_BOOL prop);
        [id(0x00000018), propget, helpcontext(0x093c0018)]
        HRESULT SurroundHeader([out, retval] VARIANT_BOOL* prop);
        [id(0x00000018), propput, helpcontext(0x093c0018)]
        HRESULT SurroundHeader([in] VARIANT_BOOL prop);
        [id(0x00000019), propget, helpcontext(0x093c0019)]
        HRESULT SurroundFooter([out, retval] VARIANT_BOOL* prop);
        [id(0x00000019), propput, helpcontext(0x093c0019)]
        HRESULT SurroundFooter([in] VARIANT_BOOL prop);
        [id(0x0000001a), propget, helpcontext(0x093c001a)]
        HRESULT JoinBorders([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001a), propput, helpcontext(0x093c001a)]
        HRESULT JoinBorders([in] VARIANT_BOOL prop);
        [id(0x0000001b), propget, helpcontext(0x093c001b)]
        HRESULT HasHorizontal([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001c), propget, helpcontext(0x093c001c)]
        HRESULT HasVertical([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001d), propget, helpcontext(0x093c001d)]
        HRESULT DistanceFrom([out, retval] WdBorderDistanceFrom* prop);
        [id(0x0000001d), propput, helpcontext(0x093c001d)]
        HRESULT DistanceFrom([in] WdBorderDistanceFrom prop);
        [id(0x0000001e), propget, helpcontext(0x093c001e)]
        HRESULT EnableFirstPageInSection([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001e), propput, helpcontext(0x093c001e)]
        HRESULT EnableFirstPageInSection([in] VARIANT_BOOL prop);
        [id(0x0000001f), propget, helpcontext(0x093c001f)]
        HRESULT EnableOtherPagesInSection([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001f), propput, helpcontext(0x093c001f)]
        HRESULT EnableOtherPagesInSection([in] VARIANT_BOOL prop);
        [id(00000000), helpcontext(0x093c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] WdBorderType Index, 
                        [out, retval] Border** prop);
        [id(0x000007d0), helpcontext(0x093c07d0)]
        HRESULT ApplyPageBordersToAllSections();
        [id(0x00000020), propget, helpcontext(0x093c0020)]
        HRESULT InsideColor([out, retval] WdColor* prop);
        [id(0x00000020), propput, helpcontext(0x093c0020)]
        HRESULT InsideColor([in] WdColor prop);
        [id(0x00000021), propget, helpcontext(0x093c0021)]
        HRESULT OutsideColor([out, retval] WdColor* prop);
        [id(0x00000021), propput, helpcontext(0x093c0021)]
        HRESULT OutsideColor([in] WdColor prop);
    };

    [
      odl,
      uuid(0002093B-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000093b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Border : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093b03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x093b0000)]
        HRESULT Visible([out, retval] VARIANT_BOOL* prop);
        [id(00000000), propput, helpcontext(0x093b0000)]
        HRESULT Visible([in] VARIANT_BOOL prop);
        [id(0x00000001), propget, helpcontext(0x093b0001)]
        HRESULT ColorIndex([out, retval] WdColorIndex* prop);
        [id(0x00000001), propput, helpcontext(0x093b0001)]
        HRESULT ColorIndex([in] WdColorIndex prop);
        [id(0x00000002), propget, helpcontext(0x093b0002)]
        HRESULT Inside([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propget, helpcontext(0x093b0003)]
        HRESULT LineStyle([out, retval] WdLineStyle* prop);
        [id(0x00000003), propput, helpcontext(0x093b0003)]
        HRESULT LineStyle([in] WdLineStyle prop);
        [id(0x00000004), propget, helpcontext(0x093b0004)]
        HRESULT LineWidth([out, retval] WdLineWidth* prop);
        [id(0x00000004), propput, helpcontext(0x093b0004)]
        HRESULT LineWidth([in] WdLineWidth prop);
        [id(0x00000005), propget, helpcontext(0x093b0005)]
        HRESULT ArtStyle([out, retval] WdPageBorderArt* prop);
        [id(0x00000005), propput, helpcontext(0x093b0005)]
        HRESULT ArtStyle([in] WdPageBorderArt prop);
        [id(0x00000006), propget, helpcontext(0x093b0006)]
        HRESULT ArtWidth([out, retval] long* prop);
        [id(0x00000006), propput, helpcontext(0x093b0006)]
        HRESULT ArtWidth([in] long prop);
        [id(0x00000007), propget, helpcontext(0x093b0007)]
        HRESULT Color([out, retval] WdColor* prop);
        [id(0x00000007), propput, helpcontext(0x093b0007)]
        HRESULT Color([in] WdColor prop);
    };

    [
      odl,
      uuid(0002093A-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000093a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Shading : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093a03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x093a0001)]
        HRESULT ForegroundPatternColorIndex([out, retval] WdColorIndex* prop);
        [id(0x00000001), propput, helpcontext(0x093a0001)]
        HRESULT ForegroundPatternColorIndex([in] WdColorIndex prop);
        [id(0x00000002), propget, helpcontext(0x093a0002)]
        HRESULT BackgroundPatternColorIndex([out, retval] WdColorIndex* prop);
        [id(0x00000002), propput, helpcontext(0x093a0002)]
        HRESULT BackgroundPatternColorIndex([in] WdColorIndex prop);
        [id(0x00000003), propget, helpcontext(0x093a0003)]
        HRESULT Texture([out, retval] WdTextureIndex* prop);
        [id(0x00000003), propput, helpcontext(0x093a0003)]
        HRESULT Texture([in] WdTextureIndex prop);
        [id(0x00000004), propget, helpcontext(0x093a0004)]
        HRESULT ForegroundPatternColor([out, retval] WdColor* prop);
        [id(0x00000004), propput, helpcontext(0x093a0004)]
        HRESULT ForegroundPatternColor([in] WdColor prop);
        [id(0x00000005), propget, helpcontext(0x093a0005)]
        HRESULT BackgroundPatternColor([out, retval] WdColor* prop);
        [id(0x00000005), propput, helpcontext(0x093a0005)]
        HRESULT BackgroundPatternColor([in] WdColor prop);
    };

    [
      odl,
      uuid(00020939-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000939),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextRetrievalMode : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09390000)]
        HRESULT ViewType([out, retval] WdViewType* prop);
        [id(00000000), propput, helpcontext(0x09390000)]
        HRESULT ViewType([in] WdViewType prop);
        [id(0x00000001), propget, helpcontext(0x09390001)]
        HRESULT Duplicate([out, retval] TextRetrievalMode** prop);
        [id(0x00000002), propget, helpcontext(0x09390002)]
        HRESULT IncludeHiddenText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09390002)]
        HRESULT IncludeHiddenText([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x09390003)]
        HRESULT IncludeFieldCodes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09390003)]
        HRESULT IncludeFieldCodes([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020937-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000937),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AutoTextEntries : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0937fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09370001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09370000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] AutoTextEntry** prop);
        [id(0x00000065), helpcontext(0x09370065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in] Range* Range, 
                        [out, retval] AutoTextEntry** prop);
        [id(0x00000066), helpcontext(0x09370066)]
        HRESULT AppendToSpike(
                        [in] Range* Range, 
                        [out, retval] AutoTextEntry** prop);
    };

    [
      odl,
      uuid(00020936-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000936),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AutoTextEntry : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093603e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09360001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09360002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x09360002)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x09360003)]
        HRESULT StyleName([out, retval] BSTR* prop);
        [id(00000000), propget, helpcontext(0x09360000)]
        HRESULT Value([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x09360000)]
        HRESULT Value([in] BSTR prop);
        [id(0x00000065), helpcontext(0x09360065)]
        HRESULT Delete();

        [id(0x00000066), helpcontext(0x09360066)]
        HRESULT Insert(
                        [in] Range* Where, 
                        [in, optional] VARIANT* RichText, 
                        [out, retval] Range** prop);
    };

    [
      odl,
      uuid(00020935-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000935),
      dual,
      nonextensible,
      oleautomation
    ]
    interface System : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09350001)]
        HRESULT OperatingSystem([out, retval] BSTR* prop);
        [id(0x00000002), propget, hidden, helpcontext(0x09350002)]
        HRESULT ProcessorType([out, retval] BSTR* prop);
        [id(0x00000003), propget, helpcontext(0x09350003)]
        HRESULT Version([out, retval] BSTR* prop);
        [id(0x00000004), propget, helpcontext(0x09350004)]
        HRESULT FreeDiskSpace([out, retval] long* prop);
        [id(0x00000005), propget, hidden, helpcontext(0x09350005)]
        HRESULT Country([out, retval] WdCountry* prop);
        [id(0x00000006), propget, helpcontext(0x09350006)]
        HRESULT LanguageDesignation([out, retval] BSTR* prop);
        [id(0x00000007), propget, helpcontext(0x09350007)]
        HRESULT HorizontalResolution([out, retval] long* prop);
        [id(0x00000008), propget, helpcontext(0x09350008)]
        HRESULT VerticalResolution([out, retval] long* prop);
        [id(0x00000009), propget, helpcontext(0x09350009)]
        HRESULT ProfileString(
                        [in] BSTR Section, 
                        [in] BSTR Key, 
                        [out, retval] BSTR* prop);
        [id(0x00000009), propput, helpcontext(0x09350009)]
        HRESULT ProfileString(
                        [in] BSTR Section, 
                        [in] BSTR Key, 
                        [in] BSTR prop);
        [id(0x0000000a), propget, helpcontext(0x0935000a)]
        HRESULT PrivateProfileString(
                        [in] BSTR FileName, 
                        [in] BSTR Section, 
                        [in] BSTR Key, 
                        [out, retval] BSTR* prop);
        [id(0x0000000a), propput, helpcontext(0x0935000a)]
        HRESULT PrivateProfileString(
                        [in] BSTR FileName, 
                        [in] BSTR Section, 
                        [in] BSTR Key, 
                        [in] BSTR prop);
        [id(0x0000000b), propget, helpcontext(0x0935000b)]
        HRESULT MathCoprocessorInstalled([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propget, helpcontext(0x0935000c)]
        HRESULT ComputerType([out, retval] BSTR* prop);
        [id(0x0000000e), propget, helpcontext(0x0935000e)]
        HRESULT MacintoshName([out, retval] BSTR* prop);
        [id(0x0000000f), propget, helpcontext(0x0935000f)]
        HRESULT QuickDrawInstalled([out, retval] VARIANT_BOOL* prop);
        [id(0x00000010), propget, helpcontext(0x09350010)]
        HRESULT Cursor([out, retval] WdCursorType* prop);
        [id(0x00000010), propput, helpcontext(0x09350010)]
        HRESULT Cursor([in] WdCursorType prop);
        [id(0x00000065), helpcontext(0x09350065)]
        HRESULT MSInfo();
        [id(0x00000066), helpcontext(0x09350066)]
        HRESULT Connect(
                        [in] BSTR Path, 
                        [in, optional] VARIANT* Drive, 
                        [in, optional] VARIANT* Password);
        [id(0x00000067), propget, helpcontext(0x09350067)]
        HRESULT CountryRegion([out, retval] WdCountry* prop);
    };

    [
      odl,
      uuid(00020933-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000933),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OLEFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x09330002)]
        HRESULT ClassType([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x09330002)]
        HRESULT ClassType([in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x09330003)]
        HRESULT DisplayAsIcon([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09330003)]
        HRESULT DisplayAsIcon([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09330007)]
        HRESULT IconName([out, retval] BSTR* prop);
        [id(0x00000007), propput, helpcontext(0x09330007)]
        HRESULT IconName([in] BSTR prop);
        [id(0x00000008), propget, helpcontext(0x09330008)]
        HRESULT IconPath([out, retval] BSTR* prop);
        [id(0x00000009), propget, helpcontext(0x09330009)]
        HRESULT IconIndex([out, retval] long* prop);
        [id(0x00000009), propput, helpcontext(0x09330009)]
        HRESULT IconIndex([in] long prop);
        [id(0x0000000a), propget, helpcontext(0x0933000a)]
        HRESULT IconLabel([out, retval] BSTR* prop);
        [id(0x0000000a), propput, helpcontext(0x0933000a)]
        HRESULT IconLabel([in] BSTR prop);
        [id(0x0000000c), propget, helpcontext(0x0933000c)]
        HRESULT Label([out, retval] BSTR* prop);
        [id(0x0000000e), propget, helpcontext(0x0933000e)]
        HRESULT Object([out, retval] IDispatch** prop);
        [id(0x00000016), propget, helpcontext(0x09330016)]
        HRESULT ProgID([out, retval] BSTR* prop);
        [id(0x00000068), helpcontext(0x09330068)]
        HRESULT Activate();
        [id(0x0000006a), helpcontext(0x0933006a)]
        HRESULT Edit();
        [id(0x0000006b), helpcontext(0x0933006b)]
        HRESULT Open();
        [id(0x0000006d), helpcontext(0x0933006d)]
        HRESULT DoVerb([in, optional] VARIANT* VerbIndex);
        [id(0x0000006e), helpcontext(0x0933006e)]
        HRESULT ConvertTo(
                        [in, optional] VARIANT* ClassType, 
                        [in, optional] VARIANT* DisplayAsIcon, 
                        [in, optional] VARIANT* IconFileName, 
                        [in, optional] VARIANT* IconIndex, 
                        [in, optional] VARIANT* IconLabel);
        [id(0x0000006f), helpcontext(0x0933006f)]
        HRESULT ActivateAs([in] BSTR ClassType);
        [id(0x00000070), propget, helpcontext(0x09330070)]
        HRESULT PreserveFormattingOnUpdate([out, retval] VARIANT_BOOL* prop);
        [id(0x00000070), propput, helpcontext(0x09330070)]
        HRESULT PreserveFormattingOnUpdate([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020931-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000931),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LinkFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09310001)]
        HRESULT AutoUpdate([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09310001)]
        HRESULT AutoUpdate([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09310004)]
        HRESULT SourceName([out, retval] BSTR* prop);
        [id(0x00000005), propget, helpcontext(0x09310005)]
        HRESULT SourcePath([out, retval] BSTR* prop);
        [id(0x0000000d), propget, helpcontext(0x0931000d)]
        HRESULT Locked([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), propput, helpcontext(0x0931000d)]
        HRESULT Locked([in] VARIANT_BOOL prop);
        [id(0x00000010), propget, helpcontext(0x09310010)]
        HRESULT Type([out, retval] WdLinkType* prop);
        [id(0x00000015), propget, helpcontext(0x09310015)]
        HRESULT SourceFullName([out, retval] BSTR* prop);
        [id(0x00000015), propput, helpcontext(0x09310015)]
        HRESULT SourceFullName([in] BSTR prop);
        [id(0x00000016), propget, helpcontext(0x09310016)]
        HRESULT SavePictureWithDocument([out, retval] VARIANT_BOOL* prop);
        [id(0x00000016), propput, helpcontext(0x09310016)]
        HRESULT SavePictureWithDocument([in] VARIANT_BOOL prop);
        [id(0x00000068), helpcontext(0x09310068)]
        HRESULT BreakLink();
        [id(0x00000069), helpcontext(0x09310069)]
        HRESULT Update();
    };

    [
      odl,
      uuid(000209A4-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009a4),
      hidden,
      dual,
      oleautomation
    ]
    interface _OLEControl : IDispatch {
        [id(0x80010103), propget, helpcontext(0x09a40103)]
        HRESULT Left([out, retval] single* prop);
        [id(0x80010103), propput, helpcontext(0x09a40103)]
        HRESULT Left([in] single prop);
        [id(0x80010104), propget, helpcontext(0x09a40104)]
        HRESULT Top([out, retval] single* prop);
        [id(0x80010104), propput, helpcontext(0x09a40104)]
        HRESULT Top([in] single prop);
        [id(0x80010105), propget, helpcontext(0x09a40105)]
        HRESULT Height([out, retval] single* prop);
        [id(0x80010105), propput, helpcontext(0x09a40105)]
        HRESULT Height([in] single prop);
        [id(0x80010106), propget, helpcontext(0x09a40106)]
        HRESULT Width([out, retval] single* prop);
        [id(0x80010106), propput, helpcontext(0x09a40106)]
        HRESULT Width([in] single prop);
        [id(0x80010000), propget, helpcontext(0x09a40000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x80010000), propput, helpcontext(0x09a40000)]
        HRESULT Name([in] BSTR prop);
        [id(0x80010107), propget, helpcontext(0x09a40107)]
        HRESULT Automation([out, retval] IDispatch** prop);
        [id(0x80010220), helpcontext(0x09a40220)]
        HRESULT Select();
        [id(0x80010228), helpcontext(0x09a40228)]
        HRESULT Copy();
        [id(0x80010229), helpcontext(0x09a40229)]
        HRESULT Cut();
        [id(0x80010250), helpcontext(0x09a40250)]
        HRESULT Delete();
        [id(0x80010251), helpcontext(0x09a40251)]
        HRESULT Activate();
        [id(0x80010bc3), propget, hidden, helpcontext(0x09a40bc3)]
        HRESULT AltHTML([out, retval] BSTR* prop);
        [id(0x80010bc3), propput, hidden, helpcontext(0x09a40bc3)]
        HRESULT AltHTML([in] BSTR prop);
    };

    [
      odl,
      uuid(00020930-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000930),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Fields : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x093003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x093003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x093003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09300001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09300002)]
        HRESULT Locked([out, retval] long* prop);
        [id(0x00000002), propput, helpcontext(0x09300002)]
        HRESULT Locked([in] long prop);
        [id(0xfffffffc), propget, helpcontext(0x0930fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x09300000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Field** prop);
        [id(0x00000064), helpcontext(0x09300064)]
        HRESULT ToggleShowCodes();
        [id(0x00000065), helpcontext(0x09300065)]
        HRESULT Update([out, retval] long* prop);
        [id(0x00000066), helpcontext(0x09300066)]
        HRESULT Unlink();
        [id(0x00000068), helpcontext(0x09300068)]
        HRESULT UpdateSource();
        [id(0x00000069), helpcontext(0x09300069)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Type, 
                        [in, optional] VARIANT* Text, 
                        [in, optional] VARIANT* PreserveFormatting, 
                        [out, retval] Field** prop);
    };

    [
      odl,
      uuid(0002092F-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000092f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Field : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092f03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092f03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092f03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x092f0000)]
        HRESULT Code([out, retval] Range** prop);
        [id(00000000), propput, helpcontext(0x092f0000)]
        HRESULT Code([in] Range* prop);
        [id(0x00000001), propget, helpcontext(0x092f0001)]
        HRESULT Type([out, retval] WdFieldType* prop);
        [id(0x00000002), propget, helpcontext(0x092f0002)]
        HRESULT Locked([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x092f0002)]
        HRESULT Locked([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x092f0003)]
        HRESULT Kind([out, retval] WdFieldKind* prop);
        [id(0x00000004), propget, helpcontext(0x092f0004)]
        HRESULT Result([out, retval] Range** prop);
        [id(0x00000004), propput, helpcontext(0x092f0004)]
        HRESULT Result([in] Range* prop);
        [id(0x00000005), propget, helpcontext(0x092f0005)]
        HRESULT Data([out, retval] BSTR* prop);
        [id(0x00000005), propput, helpcontext(0x092f0005)]
        HRESULT Data([in] BSTR prop);
        [id(0x00000006), propget, helpcontext(0x092f0006)]
        HRESULT Next([out, retval] Field** prop);
        [id(0x00000007), propget, helpcontext(0x092f0007)]
        HRESULT Previous([out, retval] Field** prop);
        [id(0x00000008), propget, helpcontext(0x092f0008)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000009), propget, helpcontext(0x092f0009)]
        HRESULT ShowCodes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x092f0009)]
        HRESULT ShowCodes([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x092f000a)]
        HRESULT LinkFormat([out, retval] LinkFormat** prop);
        [id(0x0000000b), propget, helpcontext(0x092f000b)]
        HRESULT OLEFormat([out, retval] OLEFormat** prop);
        [id(0x0000000c), propget, helpcontext(0x092f000c)]
        HRESULT InlineShape([out, retval] InlineShape** prop);
        [id(0x0000ffff), helpcontext(0x092fffff)]
        HRESULT Select();
        [id(0x00000065), helpcontext(0x092f0065)]
        HRESULT Update([out, retval] VARIANT_BOOL* prop);
        [id(0x00000066), helpcontext(0x092f0066)]
        HRESULT Unlink();
        [id(0x00000067), helpcontext(0x092f0067)]
        HRESULT UpdateSource();
        [id(0x00000068), helpcontext(0x092f0068)]
        HRESULT DoClick();
        [id(0x00000069), helpcontext(0x092f0069)]
        HRESULT Copy();
        [id(0x0000006a), helpcontext(0x092f006a)]
        HRESULT Cut();
        [id(0x0000006b), helpcontext(0x092f006b)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(0002092E-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000092e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Browser : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092e03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x092e0001)]
        HRESULT Target([out, retval] WdBrowseTarget* prop);
        [id(0x00000001), propput, helpcontext(0x092e0001)]
        HRESULT Target([in] WdBrowseTarget prop);
        [id(0x00000065), helpcontext(0x092e0065)]
        HRESULT Next();
        [id(0x00000066), helpcontext(0x092e0066)]
        HRESULT Previous();
    };

    [
      odl,
      uuid(0002092D-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000092d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Styles : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092d03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x092dfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x092d0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x092d0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Style** prop);
        [id(0x00000064), helpcontext(0x092d0064)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Type, 
                        [out, retval] Style** prop);
    };

    [
      odl,
      uuid(0002092C-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000092c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Style : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092c03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x092c0000)]
        HRESULT NameLocal([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x092c0000)]
        HRESULT NameLocal([in] BSTR prop);
        [id(0x00000001), propget, helpcontext(0x092c0001)]
        HRESULT BaseStyle([out, retval] VARIANT* prop);
        [id(0x00000001), propput, helpcontext(0x092c0001)]
        HRESULT BaseStyle([in] VARIANT* prop);
        [id(0x00000002), propget, helpcontext(0x092c0002)]
        HRESULT Description([out, retval] BSTR* prop);
        [id(0x00000003), propget, helpcontext(0x092c0003)]
        HRESULT Type([out, retval] WdStyleType* prop);
        [id(0x00000004), propget, helpcontext(0x092c0004)]
        HRESULT BuiltIn([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propget, helpcontext(0x092c0005)]
        HRESULT NextParagraphStyle([out, retval] VARIANT* prop);
        [id(0x00000005), propput, helpcontext(0x092c0005)]
        HRESULT NextParagraphStyle([in] VARIANT* prop);
        [id(0x00000006), propget, helpcontext(0x092c0006)]
        HRESULT InUse([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propget, helpcontext(0x092c0007)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000008), propget, helpcontext(0x092c0008)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x00000008), propput, helpcontext(0x092c0008)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000009), propget, helpcontext(0x092c0009)]
        HRESULT ParagraphFormat([out, retval] _ParagraphFormat** prop);
        [id(0x00000009), propput, helpcontext(0x092c0009)]
        HRESULT ParagraphFormat([in] _ParagraphFormat* prop);
        [id(0x0000000a), propget, helpcontext(0x092c000a)]
        HRESULT Font([out, retval] _Font** prop);
        [id(0x0000000a), propput, helpcontext(0x092c000a)]
        HRESULT Font([in] _Font* prop);
        [id(0x0000000b), propget, helpcontext(0x092c000b)]
        HRESULT Frame([out, retval] Frame** prop);
        [id(0x0000000c), propget, helpcontext(0x092c000c)]
        HRESULT LanguageID([out, retval] WdLanguageID* prop);
        [id(0x0000000c), propput, helpcontext(0x092c000c)]
        HRESULT LanguageID([in] WdLanguageID prop);
        [id(0x0000000d), propget, helpcontext(0x092c000d)]
        HRESULT AutomaticallyUpdate([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), propput, helpcontext(0x092c000d)]
        HRESULT AutomaticallyUpdate([in] VARIANT_BOOL prop);
        [id(0x0000000e), propget, helpcontext(0x092c000e)]
        HRESULT ListTemplate([out, retval] ListTemplate** prop);
        [id(0x0000000f), propget, helpcontext(0x092c000f)]
        HRESULT ListLevelNumber([out, retval] long* prop);
        [id(0x00000010), propget, helpcontext(0x092c0010)]
        HRESULT LanguageIDFarEast([out, retval] WdLanguageID* prop);
        [id(0x00000010), propput, helpcontext(0x092c0010)]
        HRESULT LanguageIDFarEast([in] WdLanguageID prop);
        [id(0x00000011), propget, hidden, helpcontext(0x092c0011)]
        HRESULT Hidden([out, retval] VARIANT_BOOL* prop);
        [id(0x00000011), propput, hidden, helpcontext(0x092c0011)]
        HRESULT Hidden([in] VARIANT_BOOL prop);
        [id(0x00000064), helpcontext(0x092c0064)]
        HRESULT Delete();
        [id(0x00000065), helpcontext(0x092c0065)]
        HRESULT LinkToListTemplate(
                        [in] ListTemplate* ListTemplate, 
                        [in, optional] VARIANT* ListLevelNumber);
        [id(0x00000012), propget, helpcontext(0x092c0012)]
        HRESULT NoProofing([out, retval] long* prop);
        [id(0x00000012), propput, helpcontext(0x092c0012)]
        HRESULT NoProofing([in] long prop);
        [id(0x00000068), propget, helpcontext(0x092c0068)]
        HRESULT LinkStyle([out, retval] VARIANT* prop);
        [id(0x00000068), propput, helpcontext(0x092c0068)]
        HRESULT LinkStyle([in] VARIANT* prop);
        [id(0x00000013), propget, helpcontext(0x092c0013)]
        HRESULT Visibility([out, retval] VARIANT_BOOL* prop);
        [id(0x00000013), propput, helpcontext(0x092c0013)]
        HRESULT Visibility([in] VARIANT_BOOL prop);
        [id(0x00000014), propget, helpcontext(0x092c0014)]
        HRESULT NoSpaceBetweenParagraphsOfSameStyle([out, retval] VARIANT_BOOL* prop);
        [id(0x00000014), propput, helpcontext(0x092c0014)]
        HRESULT NoSpaceBetweenParagraphsOfSameStyle([in] VARIANT_BOOL prop);
        [id(0x00000015), propget, helpcontext(0x092c0015)]
        HRESULT Table([out, retval] TableStyle** prop);
        [id(0x00000016), propget, helpcontext(0x092c0016)]
        HRESULT Locked([out, retval] VARIANT_BOOL* prop);
        [id(0x00000016), propput, helpcontext(0x092c0016)]
        HRESULT Locked([in] VARIANT_BOOL prop);
        [id(0x00000017), propget, helpcontext(0x092c0017)]
        HRESULT Priority([out, retval] long* prop);
        [id(0x00000017), propput, helpcontext(0x092c0017)]
        HRESULT Priority([in] long prop);
        [id(0x00000018), propget, helpcontext(0x092c0018)]
        HRESULT UnhideWhenUsed([out, retval] VARIANT_BOOL* prop);
        [id(0x00000018), propput, helpcontext(0x092c0018)]
        HRESULT UnhideWhenUsed([in] VARIANT_BOOL prop);
        [id(0x00000019), propget, helpcontext(0x092c0019)]
        HRESULT QuickStyle([out, retval] VARIANT_BOOL* prop);
        [id(0x00000019), propput, helpcontext(0x092c0019)]
        HRESULT QuickStyle([in] VARIANT_BOOL prop);
        [id(0x0000001a), propget, helpcontext(0x092c001a)]
        HRESULT Linked([out, retval] VARIANT_BOOL* prop);
    };

    [
      odl,
      uuid(0002092B-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000092b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Frames : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092b03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x092bfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x092b0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x092b0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Frame** prop);
        [id(0x00000064), helpcontext(0x092b0064)]
        HRESULT Add(
                        [in] Range* Range, 
                        [out, retval] Frame** prop);
        [id(0x00000065), helpcontext(0x092b0065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(0002092A-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000092a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Frame : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092a03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x092a0001)]
        HRESULT HeightRule([out, retval] WdFrameSizeRule* prop);
        [id(0x00000001), propput, helpcontext(0x092a0001)]
        HRESULT HeightRule([in] WdFrameSizeRule prop);
        [id(0x00000002), propget, helpcontext(0x092a0002)]
        HRESULT WidthRule([out, retval] WdFrameSizeRule* prop);
        [id(0x00000002), propput, helpcontext(0x092a0002)]
        HRESULT WidthRule([in] WdFrameSizeRule prop);
        [id(0x00000003), propget, helpcontext(0x092a0003)]
        HRESULT HorizontalDistanceFromText([out, retval] single* prop);
        [id(0x00000003), propput, helpcontext(0x092a0003)]
        HRESULT HorizontalDistanceFromText([in] single prop);
        [id(0x00000004), propget, helpcontext(0x092a0004)]
        HRESULT Height([out, retval] single* prop);
        [id(0x00000004), propput, helpcontext(0x092a0004)]
        HRESULT Height([in] single prop);
        [id(0x00000005), propget, helpcontext(0x092a0005)]
        HRESULT HorizontalPosition([out, retval] single* prop);
        [id(0x00000005), propput, helpcontext(0x092a0005)]
        HRESULT HorizontalPosition([in] single prop);
        [id(0x00000006), propget, helpcontext(0x092a0006)]
        HRESULT LockAnchor([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x092a0006)]
        HRESULT LockAnchor([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x092a0007)]
        HRESULT RelativeHorizontalPosition([out, retval] WdRelativeHorizontalPosition* prop);
        [id(0x00000007), propput, helpcontext(0x092a0007)]
        HRESULT RelativeHorizontalPosition([in] WdRelativeHorizontalPosition prop);
        [id(0x00000008), propget, helpcontext(0x092a0008)]
        HRESULT RelativeVerticalPosition([out, retval] WdRelativeVerticalPosition* prop);
        [id(0x00000008), propput, helpcontext(0x092a0008)]
        HRESULT RelativeVerticalPosition([in] WdRelativeVerticalPosition prop);
        [id(0x00000009), propget, helpcontext(0x092a0009)]
        HRESULT VerticalDistanceFromText([out, retval] single* prop);
        [id(0x00000009), propput, helpcontext(0x092a0009)]
        HRESULT VerticalDistanceFromText([in] single prop);
        [id(0x0000000a), propget, helpcontext(0x092a000a)]
        HRESULT VerticalPosition([out, retval] single* prop);
        [id(0x0000000a), propput, helpcontext(0x092a000a)]
        HRESULT VerticalPosition([in] single prop);
        [id(0x0000000b), propget, helpcontext(0x092a000b)]
        HRESULT Width([out, retval] single* prop);
        [id(0x0000000b), propput, helpcontext(0x092a000b)]
        HRESULT Width([in] single prop);
        [id(0x0000000c), propget, helpcontext(0x092a000c)]
        HRESULT TextWrap([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propput, helpcontext(0x092a000c)]
        HRESULT TextWrap([in] VARIANT_BOOL prop);
        [id(0x0000000d), propget, helpcontext(0x092a000d)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x0000044c), propget, helpcontext(0x092a044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x092a044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x0000000f), propget, helpcontext(0x092a000f)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000064), helpcontext(0x092a0064)]
        HRESULT Delete();
        [id(0x0000ffff), helpcontext(0x092affff)]
        HRESULT Select();
        [id(0x00000065), helpcontext(0x092a0065)]
        HRESULT Copy();
        [id(0x00000066), helpcontext(0x092a0066)]
        HRESULT Cut();
    };

    [
      odl,
      uuid(00020929-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000929),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FormFields : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09290001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09290002)]
        HRESULT Shaded([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09290002)]
        HRESULT Shaded([in] VARIANT_BOOL prop);
        [id(0xfffffffc), propget, helpcontext(0x0929fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x09290000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] FormField** prop);
        [id(0x00000065), helpcontext(0x09290065)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in] WdFieldType Type, 
                        [out, retval] FormField** prop);
    };

    [
      odl,
      uuid(00020928-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000928),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FormField : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092803e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09280000)]
        HRESULT Type([out, retval] WdFieldType* prop);
        [id(0x00000002), propget, helpcontext(0x09280002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x09280002)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x09280003)]
        HRESULT EntryMacro([out, retval] BSTR* prop);
        [id(0x00000003), propput, helpcontext(0x09280003)]
        HRESULT EntryMacro([in] BSTR prop);
        [id(0x00000004), propget, helpcontext(0x09280004)]
        HRESULT ExitMacro([out, retval] BSTR* prop);
        [id(0x00000004), propput, helpcontext(0x09280004)]
        HRESULT ExitMacro([in] BSTR prop);
        [id(0x00000005), propget, helpcontext(0x09280005)]
        HRESULT OwnHelp([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x09280005)]
        HRESULT OwnHelp([in] VARIANT_BOOL prop);
        [id(0x00000006), propget, helpcontext(0x09280006)]
        HRESULT OwnStatus([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x09280006)]
        HRESULT OwnStatus([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09280007)]
        HRESULT HelpText([out, retval] BSTR* prop);
        [id(0x00000007), propput, helpcontext(0x09280007)]
        HRESULT HelpText([in] BSTR prop);
        [id(0x00000008), propget, helpcontext(0x09280008)]
        HRESULT StatusText([out, retval] BSTR* prop);
        [id(0x00000008), propput, helpcontext(0x09280008)]
        HRESULT StatusText([in] BSTR prop);
        [id(0x00000009), propget, helpcontext(0x09280009)]
        HRESULT Enabled([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x09280009)]
        HRESULT Enabled([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x0928000a)]
        HRESULT Result([out, retval] BSTR* prop);
        [id(0x0000000a), propput, helpcontext(0x0928000a)]
        HRESULT Result([in] BSTR prop);
        [id(0x0000000b), propget, helpcontext(0x0928000b)]
        HRESULT TextInput([out, retval] TextInput** prop);
        [id(0x0000000c), propget, helpcontext(0x0928000c)]
        HRESULT CheckBox([out, retval] CheckBox** prop);
        [id(0x0000000d), propget, helpcontext(0x0928000d)]
        HRESULT DropDown([out, retval] DropDown** prop);
        [id(0x0000000e), propget, helpcontext(0x0928000e)]
        HRESULT Next([out, retval] FormField** prop);
        [id(0x0000000f), propget, helpcontext(0x0928000f)]
        HRESULT Previous([out, retval] FormField** prop);
        [id(0x00000010), propget, helpcontext(0x09280010)]
        HRESULT CalculateOnExit([out, retval] VARIANT_BOOL* prop);
        [id(0x00000010), propput, helpcontext(0x09280010)]
        HRESULT CalculateOnExit([in] VARIANT_BOOL prop);
        [id(0x00000011), propget, helpcontext(0x09280011)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x0000ffff), helpcontext(0x0928ffff)]
        HRESULT Select();
        [id(0x00000065), helpcontext(0x09280065)]
        HRESULT Copy();
        [id(0x00000066), helpcontext(0x09280066)]
        HRESULT Cut();
        [id(0x00000067), helpcontext(0x09280067)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(00020927-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000927),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextInput : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09270000)]
        HRESULT Valid([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propget, helpcontext(0x09270001)]
        HRESULT Default([out, retval] BSTR* prop);
        [id(0x00000001), propput, helpcontext(0x09270001)]
        HRESULT Default([in] BSTR prop);
        [id(0x00000002), propget, helpcontext(0x09270002)]
        HRESULT Type([out, retval] WdTextFormFieldType* prop);
        [id(0x00000003), propget, helpcontext(0x09270003)]
        HRESULT Format([out, retval] BSTR* prop);
        [id(0x00000004), propget, helpcontext(0x09270004)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x09270004)]
        HRESULT Width([in] long prop);
        [id(0x00000065), helpcontext(0x09270065)]
        HRESULT Clear();
        [id(0x00000066), helpcontext(0x09270066)]
        HRESULT EditType(
                        [in] WdTextFormFieldType Type, 
                        [in, optional] VARIANT* Default, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* Enabled);
    };

    [
      odl,
      uuid(00020926-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000926),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CheckBox : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092603e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09260000)]
        HRESULT Valid([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propget, helpcontext(0x09260001)]
        HRESULT AutoSize([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09260001)]
        HRESULT AutoSize([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x09260002)]
        HRESULT Size([out, retval] single* prop);
        [id(0x00000002), propput, helpcontext(0x09260002)]
        HRESULT Size([in] single prop);
        [id(0x00000003), propget, helpcontext(0x09260003)]
        HRESULT Default([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09260003)]
        HRESULT Default([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09260004)]
        HRESULT Value([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09260004)]
        HRESULT Value([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020925-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000925),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DropDown : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09250000)]
        HRESULT Valid([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propget, helpcontext(0x09250001)]
        HRESULT Default([out, retval] long* prop);
        [id(0x00000001), propput, helpcontext(0x09250001)]
        HRESULT Default([in] long prop);
        [id(0x00000002), propget, helpcontext(0x09250002)]
        HRESULT Value([out, retval] long* prop);
        [id(0x00000002), propput, helpcontext(0x09250002)]
        HRESULT Value([in] long prop);
        [id(0x00000003), propget, helpcontext(0x09250003)]
        HRESULT ListEntries([out, retval] ListEntries** prop);
    };

    [
      odl,
      uuid(00020924-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000924),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListEntries : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092403e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0924fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09240001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09240000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] ListEntry** prop);
        [id(0x00000065), helpcontext(0x09240065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Index, 
                        [out, retval] ListEntry** prop);
        [id(0x00000066), helpcontext(0x09240066)]
        HRESULT Clear();
    };

    [
      odl,
      uuid(00020923-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000923),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListEntry : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09230001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09230002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x09230002)]
        HRESULT Name([in] BSTR prop);
        [id(0x0000000b), helpcontext(0x0923000b)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(00020922-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000922),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TablesOfFigures : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0922fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09220001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09220002)]
        HRESULT Format([out, retval] WdTofFormat* prop);
        [id(0x00000002), propput, helpcontext(0x09220002)]
        HRESULT Format([in] WdTofFormat prop);
        [id(00000000), helpcontext(0x09220000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] TableOfFigures** prop);
        [id(0x00000064), hidden, helpcontext(0x09220064)]
        HRESULT AddOld(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Caption, 
                        [in, optional] VARIANT* IncludeLabel, 
                        [in, optional] VARIANT* UseHeadingStyles, 
                        [in, optional] VARIANT* UpperHeadingLevel, 
                        [in, optional] VARIANT* LowerHeadingLevel, 
                        [in, optional] VARIANT* UseFields, 
                        [in, optional] VARIANT* TableID, 
                        [in, optional] VARIANT* RightAlignPageNumbers, 
                        [in, optional] VARIANT* IncludePageNumbers, 
                        [in, optional] VARIANT* AddedStyles, 
                        [out, retval] TableOfFigures** prop);
        [id(0x00000065), helpcontext(0x09220065)]
        HRESULT MarkEntry(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Entry, 
                        [in, optional] VARIANT* EntryAutoText, 
                        [in, optional] VARIANT* TableID, 
                        [in, optional] VARIANT* Level, 
                        [out, retval] Field** prop);
        [id(0x000001bc), helpcontext(0x092201bc)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Caption, 
                        [in, optional] VARIANT* IncludeLabel, 
                        [in, optional] VARIANT* UseHeadingStyles, 
                        [in, optional] VARIANT* UpperHeadingLevel, 
                        [in, optional] VARIANT* LowerHeadingLevel, 
                        [in, optional] VARIANT* UseFields, 
                        [in, optional] VARIANT* TableID, 
                        [in, optional] VARIANT* RightAlignPageNumbers, 
                        [in, optional] VARIANT* IncludePageNumbers, 
                        [in, optional] VARIANT* AddedStyles, 
                        [in, optional] VARIANT* UseHyperlinks, 
                        [in, optional] VARIANT* HidePageNumbersInWeb, 
                        [out, retval] TableOfFigures** prop);
    };

    [
      odl,
      uuid(00020921-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000921),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TableOfFigures : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09210001)]
        HRESULT Caption([out, retval] BSTR* prop);
        [id(0x00000001), propput, helpcontext(0x09210001)]
        HRESULT Caption([in] BSTR prop);
        [id(0x00000002), propget, helpcontext(0x09210002)]
        HRESULT IncludeLabel([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09210002)]
        HRESULT IncludeLabel([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x09210003)]
        HRESULT RightAlignPageNumbers([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09210003)]
        HRESULT RightAlignPageNumbers([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09210004)]
        HRESULT UseHeadingStyles([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09210004)]
        HRESULT UseHeadingStyles([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x09210005)]
        HRESULT LowerHeadingLevel([out, retval] long* prop);
        [id(0x00000005), propput, helpcontext(0x09210005)]
        HRESULT LowerHeadingLevel([in] long prop);
        [id(0x00000006), propget, helpcontext(0x09210006)]
        HRESULT UpperHeadingLevel([out, retval] long* prop);
        [id(0x00000006), propput, helpcontext(0x09210006)]
        HRESULT UpperHeadingLevel([in] long prop);
        [id(0x00000007), propget, helpcontext(0x09210007)]
        HRESULT IncludePageNumbers([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propput, helpcontext(0x09210007)]
        HRESULT IncludePageNumbers([in] VARIANT_BOOL prop);
        [id(0x00000008), propget, helpcontext(0x09210008)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000009), propget, helpcontext(0x09210009)]
        HRESULT UseFields([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x09210009)]
        HRESULT UseFields([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x0921000a)]
        HRESULT TableID([out, retval] BSTR* prop);
        [id(0x0000000a), propput, helpcontext(0x0921000a)]
        HRESULT TableID([in] BSTR prop);
        [id(0x0000000b), propget, helpcontext(0x0921000b)]
        HRESULT HeadingStyles([out, retval] HeadingStyles** prop);
        [id(0x0000000c), propget, helpcontext(0x0921000c)]
        HRESULT TabLeader([out, retval] WdTabLeader* prop);
        [id(0x0000000c), propput, helpcontext(0x0921000c)]
        HRESULT TabLeader([in] WdTabLeader prop);
        [id(0x00000064), helpcontext(0x09210064)]
        HRESULT Delete();
        [id(0x00000065), helpcontext(0x09210065)]
        HRESULT UpdatePageNumbers();
        [id(0x00000066), helpcontext(0x09210066)]
        HRESULT Update();
        [id(0x0000000d), propget, helpcontext(0x0921000d)]
        HRESULT UseHyperlinks([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), propput, helpcontext(0x0921000d)]
        HRESULT UseHyperlinks([in] VARIANT_BOOL prop);
        [id(0x0000000e), propget, helpcontext(0x0921000e)]
        HRESULT HidePageNumbersInWeb([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000e), propput, helpcontext(0x0921000e)]
        HRESULT HidePageNumbersInWeb([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020920-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000920),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMerge : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x092003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x092003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x092003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09200001)]
        HRESULT MainDocumentType([out, retval] WdMailMergeMainDocType* prop);
        [id(0x00000001), propput, helpcontext(0x09200001)]
        HRESULT MainDocumentType([in] WdMailMergeMainDocType prop);
        [id(0x00000002), propget, helpcontext(0x09200002)]
        HRESULT State([out, retval] WdMailMergeState* prop);
        [id(0x00000003), propget, helpcontext(0x09200003)]
        HRESULT Destination([out, retval] WdMailMergeDestination* prop);
        [id(0x00000003), propput, helpcontext(0x09200003)]
        HRESULT Destination([in] WdMailMergeDestination prop);
        [id(0x00000004), propget, helpcontext(0x09200004)]
        HRESULT DataSource([out, retval] MailMergeDataSource** prop);
        [id(0x00000005), propget, helpcontext(0x09200005)]
        HRESULT Fields([out, retval] MailMergeFields** prop);
        [id(0x00000006), propget, helpcontext(0x09200006)]
        HRESULT ViewMailMergeFieldCodes([out, retval] long* prop);
        [id(0x00000006), propput, helpcontext(0x09200006)]
        HRESULT ViewMailMergeFieldCodes([in] long prop);
        [id(0x00000007), propget, helpcontext(0x09200007)]
        HRESULT SuppressBlankLines([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propput, helpcontext(0x09200007)]
        HRESULT SuppressBlankLines([in] VARIANT_BOOL prop);
        [id(0x00000008), propget, helpcontext(0x09200008)]
        HRESULT MailAsAttachment([out, retval] VARIANT_BOOL* prop);
        [id(0x00000008), propput, helpcontext(0x09200008)]
        HRESULT MailAsAttachment([in] VARIANT_BOOL prop);
        [id(0x00000009), propget, helpcontext(0x09200009)]
        HRESULT MailAddressFieldName([out, retval] BSTR* prop);
        [id(0x00000009), propput, helpcontext(0x09200009)]
        HRESULT MailAddressFieldName([in] BSTR prop);
        [id(0x0000000a), propget, helpcontext(0x0920000a)]
        HRESULT MailSubject([out, retval] BSTR* prop);
        [id(0x0000000a), propput, helpcontext(0x0920000a)]
        HRESULT MailSubject([in] BSTR prop);
        [id(0x00000065), helpcontext(0x09200065)]
        HRESULT CreateDataSource(
                        [in, optional] VARIANT* Name, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* HeaderRecord, 
                        [in, optional] VARIANT* MSQuery, 
                        [in, optional] VARIANT* SQLStatement, 
                        [in, optional] VARIANT* SQLStatement1, 
                        [in, optional] VARIANT* Connection, 
                        [in, optional] VARIANT* LinkToSource);
        [id(0x00000066), helpcontext(0x09200066)]
        HRESULT CreateHeaderSource(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* HeaderRecord);
        [id(0x00000067), hidden, helpcontext(0x09200067)]
        HRESULT OpenDataSource2000(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* LinkToSource, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* Connection, 
                        [in, optional] VARIANT* SQLStatement, 
                        [in, optional] VARIANT* SQLStatement1);
        [id(0x00000068), hidden, helpcontext(0x09200068)]
        HRESULT OpenHeaderSource2000(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate);
        [id(0x00000069), helpcontext(0x09200069)]
        HRESULT Execute([in, optional] VARIANT* Pause);
        [id(0x0000006a), helpcontext(0x0920006a)]
        HRESULT Check();
        [id(0x0000006b), helpcontext(0x0920006b)]
        HRESULT EditDataSource();
        [id(0x0000006c), helpcontext(0x0920006c)]
        HRESULT EditHeaderSource();
        [id(0x0000006d), helpcontext(0x0920006d)]
        HRESULT EditMainDocument();
        [id(0x0000006f), hidden, helpcontext(0x0920006f)]
        HRESULT UseAddressBook([in] BSTR Type);
        [id(0x0000000b), propget, helpcontext(0x0920000b)]
        HRESULT HighlightMergeFields([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000b), propput, helpcontext(0x0920000b)]
        HRESULT HighlightMergeFields([in] VARIANT_BOOL prop);
        [id(0x0000000c), propget, helpcontext(0x0920000c)]
        HRESULT MailFormat([out, retval] WdMailMergeMailFormat* prop);
        [id(0x0000000c), propput, helpcontext(0x0920000c)]
        HRESULT MailFormat([in] WdMailMergeMailFormat prop);
        [id(0x0000000d), propget, helpcontext(0x0920000d)]
        HRESULT ShowSendToCustom([out, retval] BSTR* prop);
        [id(0x0000000d), propput, helpcontext(0x0920000d)]
        HRESULT ShowSendToCustom([in] BSTR prop);
        [id(0x0000000e), propget, helpcontext(0x0920000e)]
        HRESULT WizardState([out, retval] long* prop);
        [id(0x0000000e), propput, helpcontext(0x0920000e)]
        HRESULT WizardState([in] long prop);
        [id(0x00000070), helpcontext(0x09200070)]
        HRESULT OpenDataSource(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* LinkToSource, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* Connection, 
                        [in, optional] VARIANT* SQLStatement, 
                        [in, optional] VARIANT* SQLStatement1, 
                        [in, optional] VARIANT* OpenExclusive, 
                        [in, optional] VARIANT* SubType);
        [id(0x00000071), helpcontext(0x09200071)]
        HRESULT OpenHeaderSource(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [in, optional] VARIANT* OpenExclusive);
        [id(0x00000072), helpcontext(0x09200072)]
        HRESULT ShowWizard(
                        [in] VARIANT* InitialState, 
                        [in, optional] VARIANT* ShowDocumentStep, 
                        [in, optional] VARIANT* ShowTemplateStep, 
                        [in, optional] VARIANT* ShowDataStep, 
                        [in, optional] VARIANT* ShowWriteStep, 
                        [in, optional] VARIANT* ShowPreviewStep, 
                        [in, optional] VARIANT* ShowMergeStep);
    };

    [
      odl,
      uuid(0002091F-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000091f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMergeFields : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091f03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091f03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091f03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x091ffffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x091f0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x091f0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] MailMergeField** prop);
        [id(0x00000065), helpcontext(0x091f0065)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in] BSTR Name, 
                        [out, retval] MailMergeField** prop);
        [id(0x00000066), helpcontext(0x091f0066)]
        HRESULT AddAsk(
                        [in] Range* Range, 
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Prompt, 
                        [in, optional] VARIANT* DefaultAskText, 
                        [in, optional] VARIANT* AskOnce, 
                        [out, retval] MailMergeField** prop);
        [id(0x00000067), helpcontext(0x091f0067)]
        HRESULT AddFillIn(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Prompt, 
                        [in, optional] VARIANT* DefaultFillInText, 
                        [in, optional] VARIANT* AskOnce, 
                        [out, retval] MailMergeField** prop);
        [id(0x00000068), helpcontext(0x091f0068)]
        HRESULT AddIf(
                        [in] Range* Range, 
                        [in] BSTR MergeField, 
                        [in] WdMailMergeComparison Comparison, 
                        [in, optional] VARIANT* CompareTo, 
                        [in, optional] VARIANT* TrueAutoText, 
                        [in, optional] VARIANT* TrueText, 
                        [in, optional] VARIANT* FalseAutoText, 
                        [in, optional] VARIANT* FalseText, 
                        [out, retval] MailMergeField** prop);
        [id(0x00000069), helpcontext(0x091f0069)]
        HRESULT AddMergeRec(
                        [in] Range* Range, 
                        [out, retval] MailMergeField** prop);
        [id(0x0000006a), helpcontext(0x091f006a)]
        HRESULT AddMergeSeq(
                        [in] Range* Range, 
                        [out, retval] MailMergeField** prop);
        [id(0x0000006b), helpcontext(0x091f006b)]
        HRESULT AddNext(
                        [in] Range* Range, 
                        [out, retval] MailMergeField** prop);
        [id(0x0000006c), helpcontext(0x091f006c)]
        HRESULT AddNextIf(
                        [in] Range* Range, 
                        [in] BSTR MergeField, 
                        [in] WdMailMergeComparison Comparison, 
                        [in, optional] VARIANT* CompareTo, 
                        [out, retval] MailMergeField** prop);
        [id(0x0000006d), helpcontext(0x091f006d)]
        HRESULT AddSet(
                        [in] Range* Range, 
                        [in] BSTR Name, 
                        [in, optional] VARIANT* ValueText, 
                        [in, optional] VARIANT* ValueAutoText, 
                        [out, retval] MailMergeField** prop);
        [id(0x0000006e), helpcontext(0x091f006e)]
        HRESULT AddSkipIf(
                        [in] Range* Range, 
                        [in] BSTR MergeField, 
                        [in] WdMailMergeComparison Comparison, 
                        [in, optional] VARIANT* CompareTo, 
                        [out, retval] MailMergeField** prop);
    };

    [
      odl,
      uuid(0002091E-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000091e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMergeField : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091e03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x091e0000)]
        HRESULT Type([out, retval] WdFieldType* prop);
        [id(0x00000003), propget, helpcontext(0x091e0003)]
        HRESULT Locked([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x091e0003)]
        HRESULT Locked([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x091e0005)]
        HRESULT Code([out, retval] Range** prop);
        [id(0x00000005), propput, helpcontext(0x091e0005)]
        HRESULT Code([in] Range* prop);
        [id(0x00000008), propget, helpcontext(0x091e0008)]
        HRESULT Next([out, retval] MailMergeField** prop);
        [id(0x00000009), propget, helpcontext(0x091e0009)]
        HRESULT Previous([out, retval] MailMergeField** prop);
        [id(0x0000ffff), helpcontext(0x091effff)]
        HRESULT Select();
        [id(0x00000069), helpcontext(0x091e0069)]
        HRESULT Copy();
        [id(0x0000006a), helpcontext(0x091e006a)]
        HRESULT Cut();
        [id(0x0000006b), helpcontext(0x091e006b)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(0002091D-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000091d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMergeDataSource : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091d03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x091d0001)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x091d0002)]
        HRESULT HeaderSourceName([out, retval] BSTR* prop);
        [id(0x00000003), propget, helpcontext(0x091d0003)]
        HRESULT Type([out, retval] WdMailMergeDataSource* prop);
        [id(0x00000004), propget, helpcontext(0x091d0004)]
        HRESULT HeaderSourceType([out, retval] WdMailMergeDataSource* prop);
        [id(0x00000005), propget, helpcontext(0x091d0005)]
        HRESULT ConnectString([out, retval] BSTR* prop);
        [id(0x00000006), propget, helpcontext(0x091d0006)]
        HRESULT QueryString([out, retval] BSTR* prop);
        [id(0x00000006), propput, helpcontext(0x091d0006)]
        HRESULT QueryString([in] BSTR prop);
        [id(0x00000007), propget, helpcontext(0x091d0007)]
        HRESULT ActiveRecord([out, retval] WdMailMergeActiveRecord* prop);
        [id(0x00000007), propput, helpcontext(0x091d0007)]
        HRESULT ActiveRecord([in] WdMailMergeActiveRecord prop);
        [id(0x00000008), propget, helpcontext(0x091d0008)]
        HRESULT FirstRecord([out, retval] long* prop);
        [id(0x00000008), propput, helpcontext(0x091d0008)]
        HRESULT FirstRecord([in] long prop);
        [id(0x00000009), propget, helpcontext(0x091d0009)]
        HRESULT LastRecord([out, retval] long* prop);
        [id(0x00000009), propput, helpcontext(0x091d0009)]
        HRESULT LastRecord([in] long prop);
        [id(0x0000000a), propget, helpcontext(0x091d000a)]
        HRESULT FieldNames([out, retval] MailMergeFieldNames** prop);
        [id(0x0000000b), propget, helpcontext(0x091d000b)]
        HRESULT DataFields([out, retval] MailMergeDataFields** prop);
        [id(0x00000065), hidden, helpcontext(0x091d0065)]
        HRESULT FindRecord2000(
                        [in] BSTR FindText, 
                        [in] BSTR Field, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propget, helpcontext(0x091d000c)]
        HRESULT RecordCount([out, retval] long* prop);
        [id(0x0000000d), propget, helpcontext(0x091d000d)]
        HRESULT Included([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), propput, helpcontext(0x091d000d)]
        HRESULT Included([in] VARIANT_BOOL prop);
        [id(0x0000000e), propget, helpcontext(0x091d000e)]
        HRESULT InvalidAddress([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000e), propput, helpcontext(0x091d000e)]
        HRESULT InvalidAddress([in] VARIANT_BOOL prop);
        [id(0x0000000f), propget, helpcontext(0x091d000f)]
        HRESULT InvalidComments([out, retval] BSTR* prop);
        [id(0x0000000f), propput, helpcontext(0x091d000f)]
        HRESULT InvalidComments([in] BSTR prop);
        [id(0x00000010), propget, helpcontext(0x091d0010)]
        HRESULT MappedDataFields([out, retval] MappedDataFields** prop);
        [id(0x00000011), propget, helpcontext(0x091d0011)]
        HRESULT TableName([out, retval] BSTR* prop);
        [id(0x00000066), helpcontext(0x091d0066)]
        HRESULT FindRecord(
                        [in] BSTR FindText, 
                        [in, optional] VARIANT* Field, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), helpcontext(0x091d0067)]
        HRESULT SetAllIncludedFlags([in] VARIANT_BOOL Included);
        [id(0x00000068), helpcontext(0x091d0068)]
        HRESULT SetAllErrorFlags(
                        [in] VARIANT_BOOL Invalid, 
                        [in] BSTR InvalidComment);
        [id(0x00000069), helpcontext(0x091d0069)]
        HRESULT Close();
    };

    [
      odl,
      uuid(0002091C-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000091c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMergeFieldNames : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091c03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x091cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x091c0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x091c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] MailMergeFieldName** prop);
    };

    [
      odl,
      uuid(0002091B-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000091b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMergeFieldName : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091b03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x091b0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x091b0001)]
        HRESULT Index([out, retval] long* prop);
    };

    [
      odl,
      uuid(0002091A-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000091a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMergeDataFields : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091a03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x091afffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x091a0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x091a0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] MailMergeDataField** prop);
    };

    [
      odl,
      uuid(00020919-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000919),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMergeDataField : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09190000)]
        HRESULT Value([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09190001)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x09190002)]
        HRESULT Index([out, retval] long* prop);
    };

    [
      odl,
      uuid(00020918-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000918),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Envelope : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091803e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09180001)]
        HRESULT Address([out, retval] Range** prop);
        [id(0x00000002), propget, helpcontext(0x09180002)]
        HRESULT ReturnAddress([out, retval] Range** prop);
        [id(0x00000004), propget, hidden, helpcontext(0x09180004)]
        HRESULT DefaultPrintBarCode([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, hidden, helpcontext(0x09180004)]
        HRESULT DefaultPrintBarCode([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x09180005)]
        HRESULT DefaultPrintFIMA([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x09180005)]
        HRESULT DefaultPrintFIMA([in] VARIANT_BOOL prop);
        [id(0x00000006), propget, helpcontext(0x09180006)]
        HRESULT DefaultHeight([out, retval] single* prop);
        [id(0x00000006), propput, helpcontext(0x09180006)]
        HRESULT DefaultHeight([in] single prop);
        [id(0x00000007), propget, helpcontext(0x09180007)]
        HRESULT DefaultWidth([out, retval] single* prop);
        [id(0x00000007), propput, helpcontext(0x09180007)]
        HRESULT DefaultWidth([in] single prop);
        [id(00000000), propget, helpcontext(0x09180000)]
        HRESULT DefaultSize([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x09180000)]
        HRESULT DefaultSize([in] BSTR prop);
        [id(0x00000009), propget, helpcontext(0x09180009)]
        HRESULT DefaultOmitReturnAddress([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x09180009)]
        HRESULT DefaultOmitReturnAddress([in] VARIANT_BOOL prop);
        [id(0x0000000c), propget, helpcontext(0x0918000c)]
        HRESULT FeedSource([out, retval] WdPaperTray* prop);
        [id(0x0000000c), propput, helpcontext(0x0918000c)]
        HRESULT FeedSource([in] WdPaperTray prop);
        [id(0x0000000d), propget, helpcontext(0x0918000d)]
        HRESULT AddressFromLeft([out, retval] single* prop);
        [id(0x0000000d), propput, helpcontext(0x0918000d)]
        HRESULT AddressFromLeft([in] single prop);
        [id(0x0000000e), propget, helpcontext(0x0918000e)]
        HRESULT AddressFromTop([out, retval] single* prop);
        [id(0x0000000e), propput, helpcontext(0x0918000e)]
        HRESULT AddressFromTop([in] single prop);
        [id(0x0000000f), propget, helpcontext(0x0918000f)]
        HRESULT ReturnAddressFromLeft([out, retval] single* prop);
        [id(0x0000000f), propput, helpcontext(0x0918000f)]
        HRESULT ReturnAddressFromLeft([in] single prop);
        [id(0x00000010), propget, helpcontext(0x09180010)]
        HRESULT ReturnAddressFromTop([out, retval] single* prop);
        [id(0x00000010), propput, helpcontext(0x09180010)]
        HRESULT ReturnAddressFromTop([in] single prop);
        [id(0x00000011), propget, helpcontext(0x09180011)]
        HRESULT AddressStyle([out, retval] Style** prop);
        [id(0x00000012), propget, helpcontext(0x09180012)]

        HRESULT ReturnAddressStyle([out, retval] Style** prop);
        [id(0x00000013), propget, helpcontext(0x09180013)]
        HRESULT DefaultOrientation([out, retval] WdEnvelopeOrientation* prop);
        [id(0x00000013), propput, helpcontext(0x09180013)]
        HRESULT DefaultOrientation([in] WdEnvelopeOrientation prop);
        [id(0x00000014), propget, helpcontext(0x09180014)]
        HRESULT DefaultFaceUp([out, retval] VARIANT_BOOL* prop);
        [id(0x00000014), propput, helpcontext(0x09180014)]
        HRESULT DefaultFaceUp([in] VARIANT_BOOL prop);
        [id(0x00000065), hidden, helpcontext(0x09180065)]
        HRESULT Insert2000(
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* AutoText, 
                        [in, optional] VARIANT* OmitReturnAddress, 
                        [in, optional] VARIANT* ReturnAddress, 
                        [in, optional] VARIANT* ReturnAutoText, 
                        [in, optional] VARIANT* PrintBarCode, 
                        [in, optional] VARIANT* PrintFIMA, 
                        [in, optional] VARIANT* Size, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* FeedSource, 
                        [in, optional] VARIANT* AddressFromLeft, 
                        [in, optional] VARIANT* AddressFromTop, 
                        [in, optional] VARIANT* ReturnAddressFromLeft, 
                        [in, optional] VARIANT* ReturnAddressFromTop, 
                        [in, optional] VARIANT* DefaultFaceUp, 
                        [in, optional] VARIANT* DefaultOrientation);
        [id(0x00000066), hidden, helpcontext(0x09180066)]
        HRESULT PrintOut2000(
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* AutoText, 
                        [in, optional] VARIANT* OmitReturnAddress, 
                        [in, optional] VARIANT* ReturnAddress, 
                        [in, optional] VARIANT* ReturnAutoText, 
                        [in, optional] VARIANT* PrintBarCode, 
                        [in, optional] VARIANT* PrintFIMA, 
                        [in, optional] VARIANT* Size, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* FeedSource, 
                        [in, optional] VARIANT* AddressFromLeft, 
                        [in, optional] VARIANT* AddressFromTop, 
                        [in, optional] VARIANT* ReturnAddressFromLeft, 
                        [in, optional] VARIANT* ReturnAddressFromTop, 
                        [in, optional] VARIANT* DefaultFaceUp, 
                        [in, optional] VARIANT* DefaultOrientation);
        [id(0x00000067), helpcontext(0x09180067)]
        HRESULT UpdateDocument();
        [id(0x00000068), helpcontext(0x09180068)]
        HRESULT Options();
        [id(0x00000016), propget, helpcontext(0x09180016)]
        HRESULT Vertical([out, retval] VARIANT_BOOL* prop);
        [id(0x00000016), propput, helpcontext(0x09180016)]
        HRESULT Vertical([in] VARIANT_BOOL prop);
        [id(0x00000017), propget, helpcontext(0x09180017)]
        HRESULT RecipientNamefromLeft([out, retval] single* prop);
        [id(0x00000017), propput, helpcontext(0x09180017)]
        HRESULT RecipientNamefromLeft([in] single prop);
        [id(0x00000018), propget, helpcontext(0x09180018)]
        HRESULT RecipientNamefromTop([out, retval] single* prop);
        [id(0x00000018), propput, helpcontext(0x09180018)]
        HRESULT RecipientNamefromTop([in] single prop);
        [id(0x00000019), propget, helpcontext(0x09180019)]
        HRESULT RecipientPostalfromLeft([out, retval] single* prop);
        [id(0x00000019), propput, helpcontext(0x09180019)]
        HRESULT RecipientPostalfromLeft([in] single prop);
        [id(0x0000001a), propget, helpcontext(0x0918001a)]
        HRESULT RecipientPostalfromTop([out, retval] single* prop);
        [id(0x0000001a), propput, helpcontext(0x0918001a)]
        HRESULT RecipientPostalfromTop([in] single prop);
        [id(0x0000001b), propget, helpcontext(0x0918001b)]
        HRESULT SenderNamefromLeft([out, retval] single* prop);
        [id(0x0000001b), propput, helpcontext(0x0918001b)]
        HRESULT SenderNamefromLeft([in] single prop);
        [id(0x0000001c), propget, helpcontext(0x0918001c)]
        HRESULT SenderNamefromTop([out, retval] single* prop);
        [id(0x0000001c), propput, helpcontext(0x0918001c)]
        HRESULT SenderNamefromTop([in] single prop);
        [id(0x0000001d), propget, helpcontext(0x0918001d)]
        HRESULT SenderPostalfromLeft([out, retval] single* prop);
        [id(0x0000001d), propput, helpcontext(0x0918001d)]
        HRESULT SenderPostalfromLeft([in] single prop);
        [id(0x0000001e), propget, helpcontext(0x0918001e)]
        HRESULT SenderPostalfromTop([out, retval] single* prop);
        [id(0x0000001e), propput, helpcontext(0x0918001e)]
        HRESULT SenderPostalfromTop([in] single prop);
        [id(0x00000069), helpcontext(0x09180069)]
        HRESULT Insert(
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* AutoText, 
                        [in, optional] VARIANT* OmitReturnAddress, 
                        [in, optional] VARIANT* ReturnAddress, 
                        [in, optional] VARIANT* ReturnAutoText, 
                        [in, optional] VARIANT* PrintBarCode, 
                        [in, optional] VARIANT* PrintFIMA, 
                        [in, optional] VARIANT* Size, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* FeedSource, 
                        [in, optional] VARIANT* AddressFromLeft, 
                        [in, optional] VARIANT* AddressFromTop, 
                        [in, optional] VARIANT* ReturnAddressFromLeft, 
                        [in, optional] VARIANT* ReturnAddressFromTop, 
                        [in, optional] VARIANT* DefaultFaceUp, 
                        [in, optional] VARIANT* DefaultOrientation, 
                        [in, optional] VARIANT* PrintEPostage, 
                        [in, optional] VARIANT* Vertical, 
                        [in, optional] VARIANT* RecipientNamefromLeft, 
                        [in, optional] VARIANT* RecipientNamefromTop, 
                        [in, optional] VARIANT* RecipientPostalfromLeft, 
                        [in, optional] VARIANT* RecipientPostalfromTop, 
                        [in, optional] VARIANT* SenderNamefromLeft, 
                        [in, optional] VARIANT* SenderNamefromTop, 
                        [in, optional] VARIANT* SenderPostalfromLeft, 
                        [in, optional] VARIANT* SenderPostalfromTop);
        [id(0x0000006a), helpcontext(0x0918006a)]
        HRESULT PrintOut(
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* AutoText, 
                        [in, optional] VARIANT* OmitReturnAddress, 
                        [in, optional] VARIANT* ReturnAddress, 
                        [in, optional] VARIANT* ReturnAutoText, 
                        [in, optional] VARIANT* PrintBarCode, 
                        [in, optional] VARIANT* PrintFIMA, 
                        [in, optional] VARIANT* Size, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* FeedSource, 
                        [in, optional] VARIANT* AddressFromLeft, 
                        [in, optional] VARIANT* AddressFromTop, 
                        [in, optional] VARIANT* ReturnAddressFromLeft, 
                        [in, optional] VARIANT* ReturnAddressFromTop, 
                        [in, optional] VARIANT* DefaultFaceUp, 
                        [in, optional] VARIANT* DefaultOrientation, 
                        [in, optional] VARIANT* PrintEPostage, 
                        [in, optional] VARIANT* Vertical, 
                        [in, optional] VARIANT* RecipientNamefromLeft, 
                        [in, optional] VARIANT* RecipientNamefromTop, 
                        [in, optional] VARIANT* RecipientPostalfromLeft, 
                        [in, optional] VARIANT* RecipientPostalfromTop, 
                        [in, optional] VARIANT* SenderNamefromLeft, 
                        [in, optional] VARIANT* SenderNamefromTop, 
                        [in, optional] VARIANT* SenderPostalfromLeft, 
                        [in, optional] VARIANT* SenderPostalfromTop);
    };

    [
      odl,
      uuid(00020917-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000917),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailingLabel : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, hidden, helpcontext(0x09170002)]
        HRESULT DefaultPrintBarCode([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, hidden, helpcontext(0x09170002)]
        HRESULT DefaultPrintBarCode([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09170004)]
        HRESULT DefaultLaserTray([out, retval] WdPaperTray* prop);
        [id(0x00000004), propput, helpcontext(0x09170004)]
        HRESULT DefaultLaserTray([in] WdPaperTray prop);
        [id(0x00000008), propget, helpcontext(0x09170008)]
        HRESULT CustomLabels([out, retval] CustomLabels** prop);
        [id(0x00000009), propget, helpcontext(0x09170009)]
        HRESULT DefaultLabelName([out, retval] BSTR* prop);
        [id(0x00000009), propput, helpcontext(0x09170009)]
        HRESULT DefaultLabelName([in] BSTR prop);
        [id(0x00000065), hidden, helpcontext(0x09170065)]
        HRESULT CreateNewDocument2000(
                        [in, optional] VARIANT* Name, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* AutoText, 
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* LaserTray, 
                        [out, retval] _Document** prop);
        [id(0x00000066), hidden, helpcontext(0x09170066)]
        HRESULT PrintOut2000(
                        [in, optional] VARIANT* Name, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* LaserTray, 
                        [in, optional] VARIANT* SingleLabel, 
                        [in, optional] VARIANT* Row, 
                        [in, optional] VARIANT* Column);
        [id(0x00000067), helpcontext(0x09170067)]
        HRESULT LabelOptions();
        [id(0x00000068), helpcontext(0x09170068)]
        HRESULT CreateNewDocument(
                        [in, optional] VARIANT* Name, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* AutoText, 
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* LaserTray, 
                        [in, optional] VARIANT* PrintEPostageLabel, 
                        [in, optional] VARIANT* Vertical, 
                        [out, retval] _Document** prop);
        [id(0x00000069), helpcontext(0x09170069)]
        HRESULT PrintOut(
                        [in, optional] VARIANT* Name, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* LaserTray, 
                        [in, optional] VARIANT* SingleLabel, 
                        [in, optional] VARIANT* Row, 
                        [in, optional] VARIANT* Column, 
                        [in, optional] VARIANT* PrintEPostageLabel, 
                        [in, optional] VARIANT* Vertical);
        [id(0x0000000a), propget, helpcontext(0x0917000a)]
        HRESULT Vertical([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000a), propput, helpcontext(0x0917000a)]
        HRESULT Vertical([in] VARIANT_BOOL prop);
        [id(0x0000006a), helpcontext(0x0917006a)]
        HRESULT CreateNewDocumentByID(
                        [in, optional] VARIANT* LabelID, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* AutoText, 
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* LaserTray, 
                        [in, optional] VARIANT* PrintEPostageLabel, 
                        [in, optional] VARIANT* Vertical, 
                        [out, retval] _Document** prop);
        [id(0x0000006b), helpcontext(0x0917006b)]
        HRESULT PrintOutByID(
                        [in, optional] VARIANT* LabelID, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* ExtractAddress, 
                        [in, optional] VARIANT* LaserTray, 
                        [in, optional] VARIANT* SingleLabel, 
                        [in, optional] VARIANT* Row, 
                        [in, optional] VARIANT* Column, 
                        [in, optional] VARIANT* PrintEPostageLabel, 
                        [in, optional] VARIANT* Vertical);
    };

    [
      odl,
      uuid(00020916-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000916),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomLabels : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091603e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0916fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09160001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09160000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] CustomLabel** prop);
        [id(0x00000065), helpcontext(0x09160065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* DotMatrix, 
                        [out, retval] CustomLabel** prop);
    };

    [
      odl,
      uuid(00020915-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000915),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomLabel : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09150001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09150002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x09150002)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x09150003)]
        HRESULT TopMargin([out, retval] single* prop);
        [id(0x00000003), propput, helpcontext(0x09150003)]
        HRESULT TopMargin([in] single prop);
        [id(0x00000004), propget, helpcontext(0x09150004)]
        HRESULT SideMargin([out, retval] single* prop);
        [id(0x00000004), propput, helpcontext(0x09150004)]
        HRESULT SideMargin([in] single prop);
        [id(0x00000005), propget, helpcontext(0x09150005)]
        HRESULT Height([out, retval] single* prop);
        [id(0x00000005), propput, helpcontext(0x09150005)]
        HRESULT Height([in] single prop);
        [id(0x00000006), propget, helpcontext(0x09150006)]
        HRESULT Width([out, retval] single* prop);
        [id(0x00000006), propput, helpcontext(0x09150006)]
        HRESULT Width([in] single prop);
        [id(0x00000007), propget, helpcontext(0x09150007)]
        HRESULT VerticalPitch([out, retval] single* prop);
        [id(0x00000007), propput, helpcontext(0x09150007)]
        HRESULT VerticalPitch([in] single prop);
        [id(0x00000008), propget, helpcontext(0x09150008)]
        HRESULT HorizontalPitch([out, retval] single* prop);
        [id(0x00000008), propput, helpcontext(0x09150008)]
        HRESULT HorizontalPitch([in] single prop);
        [id(0x00000009), propget, helpcontext(0x09150009)]
        HRESULT NumberAcross([out, retval] long* prop);
        [id(0x00000009), propput, helpcontext(0x09150009)]
        HRESULT NumberAcross([in] long prop);
        [id(0x0000000a), propget, helpcontext(0x0915000a)]
        HRESULT NumberDown([out, retval] long* prop);
        [id(0x0000000a), propput, helpcontext(0x0915000a)]
        HRESULT NumberDown([in] long prop);
        [id(0x0000000b), propget, helpcontext(0x0915000b)]
        HRESULT DotMatrix([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propget, helpcontext(0x0915000c)]
        HRESULT PageSize([out, retval] WdCustomLabelPageSize* prop);
        [id(0x0000000c), propput, helpcontext(0x0915000c)]
        HRESULT PageSize([in] WdCustomLabelPageSize prop);
        [id(0x0000000d), propget, helpcontext(0x0915000d)]
        HRESULT Valid([out, retval] VARIANT_BOOL* prop);
        [id(0x00000065), helpcontext(0x09150065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(00020914-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000914),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TablesOfContents : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091403e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0914fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09140001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09140002)]
        HRESULT Format([out, retval] WdTocFormat* prop);
        [id(0x00000002), propput, helpcontext(0x09140002)]
        HRESULT Format([in] WdTocFormat prop);
        [id(00000000), helpcontext(0x09140000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] TableOfContents** prop);
        [id(0x00000064), hidden, helpcontext(0x09140064)]
        HRESULT AddOld(
                        [in] Range* Range, 
                        [in, optional] VARIANT* UseHeadingStyles, 
                        [in, optional] VARIANT* UpperHeadingLevel, 
                        [in, optional] VARIANT* LowerHeadingLevel, 
                        [in, optional] VARIANT* UseFields, 
                        [in, optional] VARIANT* TableID, 
                        [in, optional] VARIANT* RightAlignPageNumbers, 
                        [in, optional] VARIANT* IncludePageNumbers, 
                        [in, optional] VARIANT* AddedStyles, 
                        [out, retval] TableOfContents** prop);
        [id(0x00000065), helpcontext(0x09140065)]
        HRESULT MarkEntry(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Entry, 
                        [in, optional] VARIANT* EntryAutoText, 
                        [in, optional] VARIANT* TableID, 
                        [in, optional] VARIANT* Level, 
                        [out, retval] Field** prop);
        [id(0x00000066), hidden, helpcontext(0x09140066)]
        HRESULT Add2000(
                        [in] Range* Range, 
                        [in, optional] VARIANT* UseHeadingStyles, 
                        [in, optional] VARIANT* UpperHeadingLevel, 
                        [in, optional] VARIANT* LowerHeadingLevel, 
                        [in, optional] VARIANT* UseFields, 
                        [in, optional] VARIANT* TableID, 
                        [in, optional] VARIANT* RightAlignPageNumbers, 
                        [in, optional] VARIANT* IncludePageNumbers, 
                        [in, optional] VARIANT* AddedStyles, 
                        [in, optional] VARIANT* UseHyperlinks, 
                        [in, optional] VARIANT* HidePageNumbersInWeb, 
                        [out, retval] TableOfContents** prop);
        [id(0x00000067), helpcontext(0x09140067)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in, optional] VARIANT* UseHeadingStyles, 
                        [in, optional] VARIANT* UpperHeadingLevel, 
                        [in, optional] VARIANT* LowerHeadingLevel, 
                        [in, optional] VARIANT* UseFields, 
                        [in, optional] VARIANT* TableID, 
                        [in, optional] VARIANT* RightAlignPageNumbers, 
                        [in, optional] VARIANT* IncludePageNumbers, 
                        [in, optional] VARIANT* AddedStyles, 
                        [in, optional] VARIANT* UseHyperlinks, 
                        [in, optional] VARIANT* HidePageNumbersInWeb, 
                        [in, optional] VARIANT* UseOutlineLevels, 
                        [out, retval] TableOfContents** prop);
    };

    [
      odl,
      uuid(00020913-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000913),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TableOfContents : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09130001)]
        HRESULT UseHeadingStyles([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09130001)]
        HRESULT UseHeadingStyles([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x09130002)]
        HRESULT UseFields([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09130002)]
        HRESULT UseFields([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x09130003)]
        HRESULT UpperHeadingLevel([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x09130003)]
        HRESULT UpperHeadingLevel([in] long prop);
        [id(0x00000004), propget, helpcontext(0x09130004)]
        HRESULT LowerHeadingLevel([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x09130004)]
        HRESULT LowerHeadingLevel([in] long prop);
        [id(0x00000005), propget, helpcontext(0x09130005)]
        HRESULT TableID([out, retval] BSTR* prop);
        [id(0x00000005), propput, helpcontext(0x09130005)]
        HRESULT TableID([in] BSTR prop);
        [id(0x00000006), propget, helpcontext(0x09130006)]
        HRESULT HeadingStyles([out, retval] HeadingStyles** prop);
        [id(0x00000007), propget, helpcontext(0x09130007)]
        HRESULT RightAlignPageNumbers([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propput, helpcontext(0x09130007)]
        HRESULT RightAlignPageNumbers([in] VARIANT_BOOL prop);
        [id(0x00000008), propget, helpcontext(0x09130008)]
        HRESULT IncludePageNumbers([out, retval] VARIANT_BOOL* prop);
        [id(0x00000008), propput, helpcontext(0x09130008)]
        HRESULT IncludePageNumbers([in] VARIANT_BOOL prop);
        [id(0x00000009), propget, helpcontext(0x09130009)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x0000000a), propget, helpcontext(0x0913000a)]
        HRESULT TabLeader([out, retval] WdTabLeader* prop);
        [id(0x0000000a), propput, helpcontext(0x0913000a)]
        HRESULT TabLeader([in] WdTabLeader prop);
        [id(0x00000064), helpcontext(0x09130064)]
        HRESULT Delete();
        [id(0x00000065), helpcontext(0x09130065)]
        HRESULT UpdatePageNumbers();
        [id(0x00000066), helpcontext(0x09130066)]
        HRESULT Update();
        [id(0x0000000b), propget, helpcontext(0x0913000b)]
        HRESULT UseHyperlinks([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000b), propput, helpcontext(0x0913000b)]
        HRESULT UseHyperlinks([in] VARIANT_BOOL prop);
        [id(0x0000000c), propget, helpcontext(0x0913000c)]
        HRESULT HidePageNumbersInWeb([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propput, helpcontext(0x0913000c)]
        HRESULT HidePageNumbersInWeb([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020912-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000912),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TablesOfAuthorities : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0912fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09120001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09120002)]
        HRESULT Format([out, retval] WdToaFormat* prop);
        [id(0x00000002), propput, helpcontext(0x09120002)]
        HRESULT Format([in] WdToaFormat prop);
        [id(00000000), helpcontext(0x09120000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] TableOfAuthorities** prop);
        [id(0x00000064), helpcontext(0x09120064)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Category, 
                        [in, optional] VARIANT* Bookmark, 
                        [in, optional] VARIANT* Passim, 
                        [in, optional] VARIANT* KeepEntryFormatting, 
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* IncludeSequenceName, 
                        [in, optional] VARIANT* EntrySeparator, 
                        [in, optional] VARIANT* PageRangeSeparator, 
                        [in, optional] VARIANT* IncludeCategoryHeader, 
                        [in, optional] VARIANT* PageNumberSeparator, 
                        [out, retval] TableOfAuthorities** prop);
        [id(0x00000067), helpcontext(0x09120067)]
        HRESULT NextCitation([in] BSTR ShortCitation);
        [id(0x00000065), helpcontext(0x09120065)]
        HRESULT MarkCitation(
                        [in] Range* Range, 
                        [in] BSTR ShortCitation, 
                        [in, optional] VARIANT* LongCitation, 
                        [in, optional] VARIANT* LongCitationAutoText, 
                        [in, optional] VARIANT* Category, 
                        [out, retval] Field** prop);
        [id(0x00000066), helpcontext(0x09120066)]
        HRESULT MarkAllCitations(
                        [in] BSTR ShortCitation, 
                        [in, optional] VARIANT* LongCitation, 
                        [in, optional] VARIANT* LongCitationAutoText, 
                        [in, optional] VARIANT* Category);
    };

    [
      odl,
      uuid(00020911-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000911),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TableOfAuthorities : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09110001)]
        HRESULT Passim([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09110001)]
        HRESULT Passim([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x09110002)]
        HRESULT KeepEntryFormatting([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09110002)]
        HRESULT KeepEntryFormatting([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x09110003)]
        HRESULT Category([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x09110003)]
        HRESULT Category([in] long prop);
        [id(0x00000004), propget, helpcontext(0x09110004)]
        HRESULT Bookmark([out, retval] BSTR* prop);
        [id(0x00000004), propput, helpcontext(0x09110004)]
        HRESULT Bookmark([in] BSTR prop);
        [id(0x00000005), propget, helpcontext(0x09110005)]
        HRESULT Separator([out, retval] BSTR* prop);
        [id(0x00000005), propput, helpcontext(0x09110005)]
        HRESULT Separator([in] BSTR prop);
        [id(0x00000006), propget, helpcontext(0x09110006)]
        HRESULT IncludeSequenceName([out, retval] BSTR* prop);
        [id(0x00000006), propput, helpcontext(0x09110006)]
        HRESULT IncludeSequenceName([in] BSTR prop);
        [id(0x00000007), propget, helpcontext(0x09110007)]
        HRESULT EntrySeparator([out, retval] BSTR* prop);
        [id(0x00000007), propput, helpcontext(0x09110007)]
        HRESULT EntrySeparator([in] BSTR prop);
        [id(0x00000008), propget, helpcontext(0x09110008)]
        HRESULT PageRangeSeparator([out, retval] BSTR* prop);
        [id(0x00000008), propput, helpcontext(0x09110008)]
        HRESULT PageRangeSeparator([in] BSTR prop);
        [id(0x00000009), propget, helpcontext(0x09110009)]
        HRESULT IncludeCategoryHeader([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x09110009)]
        HRESULT IncludeCategoryHeader([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x0911000a)]
        HRESULT PageNumberSeparator([out, retval] BSTR* prop);
        [id(0x0000000a), propput, helpcontext(0x0911000a)]
        HRESULT PageNumberSeparator([in] BSTR prop);
        [id(0x0000000b), propget, helpcontext(0x0911000b)]
        HRESULT Range([out, retval] Range** prop);

        [id(0x0000000c), propget, helpcontext(0x0911000c)]
        HRESULT TabLeader([out, retval] WdTabLeader* prop);
        [id(0x0000000c), propput, helpcontext(0x0911000c)]
        HRESULT TabLeader([in] WdTabLeader prop);
        [id(0x00000064), helpcontext(0x09110064)]
        HRESULT Delete();
        [id(0x00000065), helpcontext(0x09110065)]
        HRESULT Update();
    };

    [
      odl,
      uuid(00020910-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000910),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Dialogs : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x091003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x091003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x091003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0910fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09100001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09100000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] WdWordDialog Index, 
                        [out, retval] Dialog** prop);
    };

    [
      odl,
      uuid(000209B8-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009b8),
      dual,
      oleautomation
    ]
    interface Dialog : IDispatch {
        [id(0x00007d03), propget, helpcontext(0x09b87d03)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00007d04), propget, helpcontext(0x09b87d04)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00007d05), propget, helpcontext(0x09b87d05)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00007d02), propget, helpcontext(0x09b87d02)]
        HRESULT DefaultTab([out, retval] WdWordDialogTab* prop);
        [id(0x00007d02), propput, helpcontext(0x09b87d02)]
        HRESULT DefaultTab([in] WdWordDialogTab prop);
        [id(00000000), propget, helpcontext(0x09b80000)]
        HRESULT Type([out, retval] WdWordDialog* prop);
        [id(0x00000150), helpcontext(0x09b80150)]
        HRESULT Show(
                        [in, optional] VARIANT* TimeOut, 
                        [out, retval] long* prop);
        [id(0x00000152), helpcontext(0x09b80152)]
        HRESULT Display(
                        [in, optional] VARIANT* TimeOut, 
                        [out, retval] long* prop);
        [id(0x00007d01), helpcontext(0x09b87d01)]
        HRESULT Execute();
        [id(0x0000012e), helpcontext(0x09b8012e)]
        HRESULT Update();
        [id(0x00007d06), propget, helpcontext(0x09b87d06)]
        HRESULT CommandName([out, retval] BSTR* prop);
        [id(0x00007d07), propget, helpcontext(0x09b87d07)]
        HRESULT CommandBarId([out, retval] long* prop);
    };

    [
      odl,
      uuid(00020971-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000971),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PageSetup : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09710064)]
        HRESULT TopMargin([out, retval] single* prop);
        [id(0x00000064), propput, helpcontext(0x09710064)]
        HRESULT TopMargin([in] single prop);
        [id(0x00000065), propget, helpcontext(0x09710065)]
        HRESULT BottomMargin([out, retval] single* prop);
        [id(0x00000065), propput, helpcontext(0x09710065)]
        HRESULT BottomMargin([in] single prop);
        [id(0x00000066), propget, helpcontext(0x09710066)]
        HRESULT LeftMargin([out, retval] single* prop);
        [id(0x00000066), propput, helpcontext(0x09710066)]
        HRESULT LeftMargin([in] single prop);
        [id(0x00000067), propget, helpcontext(0x09710067)]
        HRESULT RightMargin([out, retval] single* prop);
        [id(0x00000067), propput, helpcontext(0x09710067)]
        HRESULT RightMargin([in] single prop);
        [id(0x00000068), propget, helpcontext(0x09710068)]
        HRESULT Gutter([out, retval] single* prop);
        [id(0x00000068), propput, helpcontext(0x09710068)]
        HRESULT Gutter([in] single prop);
        [id(0x00000069), propget, helpcontext(0x09710069)]
        HRESULT PageWidth([out, retval] single* prop);
        [id(0x00000069), propput, helpcontext(0x09710069)]
        HRESULT PageWidth([in] single prop);
        [id(0x0000006a), propget, helpcontext(0x0971006a)]
        HRESULT PageHeight([out, retval] single* prop);
        [id(0x0000006a), propput, helpcontext(0x0971006a)]
        HRESULT PageHeight([in] single prop);
        [id(0x0000006b), propget, helpcontext(0x0971006b)]
        HRESULT Orientation([out, retval] WdOrientation* prop);
        [id(0x0000006b), propput, helpcontext(0x0971006b)]
        HRESULT Orientation([in] WdOrientation prop);
        [id(0x0000006c), propget, helpcontext(0x0971006c)]
        HRESULT FirstPageTray([out, retval] WdPaperTray* prop);
        [id(0x0000006c), propput, helpcontext(0x0971006c)]
        HRESULT FirstPageTray([in] WdPaperTray prop);
        [id(0x0000006d), propget, helpcontext(0x0971006d)]
        HRESULT OtherPagesTray([out, retval] WdPaperTray* prop);
        [id(0x0000006d), propput, helpcontext(0x0971006d)]
        HRESULT OtherPagesTray([in] WdPaperTray prop);
        [id(0x0000006e), propget, helpcontext(0x0971006e)]
        HRESULT VerticalAlignment([out, retval] WdVerticalAlignment* prop);
        [id(0x0000006e), propput, helpcontext(0x0971006e)]
        HRESULT VerticalAlignment([in] WdVerticalAlignment prop);
        [id(0x0000006f), propget, helpcontext(0x0971006f)]
        HRESULT MirrorMargins([out, retval] long* prop);
        [id(0x0000006f), propput, helpcontext(0x0971006f)]
        HRESULT MirrorMargins([in] long prop);
        [id(0x00000070), propget, helpcontext(0x09710070)]
        HRESULT HeaderDistance([out, retval] single* prop);
        [id(0x00000070), propput, helpcontext(0x09710070)]
        HRESULT HeaderDistance([in] single prop);
        [id(0x00000071), propget, helpcontext(0x09710071)]
        HRESULT FooterDistance([out, retval] single* prop);
        [id(0x00000071), propput, helpcontext(0x09710071)]
        HRESULT FooterDistance([in] single prop);
        [id(0x00000072), propget, helpcontext(0x09710072)]
        HRESULT SectionStart([out, retval] WdSectionStart* prop);
        [id(0x00000072), propput, helpcontext(0x09710072)]
        HRESULT SectionStart([in] WdSectionStart prop);
        [id(0x00000073), propget, helpcontext(0x09710073)]
        HRESULT OddAndEvenPagesHeaderFooter([out, retval] long* prop);
        [id(0x00000073), propput, helpcontext(0x09710073)]
        HRESULT OddAndEvenPagesHeaderFooter([in] long prop);
        [id(0x00000074), propget, helpcontext(0x09710074)]
        HRESULT DifferentFirstPageHeaderFooter([out, retval] long* prop);
        [id(0x00000074), propput, helpcontext(0x09710074)]
        HRESULT DifferentFirstPageHeaderFooter([in] long prop);
        [id(0x00000075), propget, helpcontext(0x09710075)]
        HRESULT SuppressEndnotes([out, retval] long* prop);
        [id(0x00000075), propput, helpcontext(0x09710075)]
        HRESULT SuppressEndnotes([in] long prop);
        [id(0x00000076), propget, helpcontext(0x09710076)]
        HRESULT LineNumbering([out, retval] LineNumbering** prop);
        [id(0x00000076), propput, helpcontext(0x09710076)]
        HRESULT LineNumbering([in] LineNumbering* prop);
        [id(0x00000077), propget, helpcontext(0x09710077)]
        HRESULT TextColumns([out, retval] TextColumns** prop);
        [id(0x00000077), propput, helpcontext(0x09710077)]
        HRESULT TextColumns([in] TextColumns* prop);
        [id(0x00000078), propget, helpcontext(0x09710078)]
        HRESULT PaperSize([out, retval] WdPaperSize* prop);
        [id(0x00000078), propput, helpcontext(0x09710078)]
        HRESULT PaperSize([in] WdPaperSize prop);
        [id(0x00000079), propget, helpcontext(0x09710079)]
        HRESULT TwoPagesOnOne([out, retval] VARIANT_BOOL* prop);
        [id(0x00000079), propput, helpcontext(0x09710079)]
        HRESULT TwoPagesOnOne([in] VARIANT_BOOL prop);
        [id(0x0000007a), propget, hidden, helpcontext(0x0971007a)]
        HRESULT GutterOnTop([out, retval] VARIANT_BOOL* prop);
        [id(0x0000007a), propput, hidden, helpcontext(0x0971007a)]
        HRESULT GutterOnTop([in] VARIANT_BOOL prop);
        [id(0x0000007b), propget, helpcontext(0x0971007b)]
        HRESULT CharsLine([out, retval] single* prop);
        [id(0x0000007b), propput, helpcontext(0x0971007b)]
        HRESULT CharsLine([in] single prop);
        [id(0x0000007c), propget, helpcontext(0x0971007c)]
        HRESULT LinesPage([out, retval] single* prop);
        [id(0x0000007c), propput, helpcontext(0x0971007c)]
        HRESULT LinesPage([in] single prop);
        [id(0x00000080), propget, helpcontext(0x09710080)]
        HRESULT ShowGrid([out, retval] VARIANT_BOOL* prop);
        [id(0x00000080), propput, helpcontext(0x09710080)]
        HRESULT ShowGrid([in] VARIANT_BOOL prop);
        [id(0x000000c9), helpcontext(0x097100c9)]
        HRESULT TogglePortrait();
        [id(0x000000ca), helpcontext(0x097100ca)]
        HRESULT SetAsTemplateDefault();
        [id(0x00000081), propget, helpcontext(0x09710081)]
        HRESULT GutterStyle([out, retval] WdGutterStyleOld* prop);
        [id(0x00000081), propput, helpcontext(0x09710081)]
        HRESULT GutterStyle([in] WdGutterStyleOld prop);
        [id(0x00000082), propget, helpcontext(0x09710082)]
        HRESULT SectionDirection([out, retval] WdSectionDirection* prop);
        [id(0x00000082), propput, helpcontext(0x09710082)]
        HRESULT SectionDirection([in] WdSectionDirection prop);
        [id(0x00000083), propget, helpcontext(0x09710083)]
        HRESULT LayoutMode([out, retval] WdLayoutMode* prop);
        [id(0x00000083), propput, helpcontext(0x09710083)]
        HRESULT LayoutMode([in] WdLayoutMode prop);
        [id(0x000004c6), propget, helpcontext(0x097104c6)]
        HRESULT GutterPos([out, retval] WdGutterStyle* prop);
        [id(0x000004c6), propput, helpcontext(0x097104c6)]
        HRESULT GutterPos([in] WdGutterStyle prop);
        [id(0x000004c7), propget, helpcontext(0x097104c7)]
        HRESULT BookFoldPrinting([out, retval] VARIANT_BOOL* prop);
        [id(0x000004c7), propput, helpcontext(0x097104c7)]
        HRESULT BookFoldPrinting([in] VARIANT_BOOL prop);
        [id(0x000004c8), propget, helpcontext(0x097104c8)]
        HRESULT BookFoldRevPrinting([out, retval] VARIANT_BOOL* prop);
        [id(0x000004c8), propput, helpcontext(0x097104c8)]
        HRESULT BookFoldRevPrinting([in] VARIANT_BOOL prop);
        [id(0x000004c9), propget, helpcontext(0x097104c9)]
        HRESULT BookFoldPrintingSheets([out, retval] long* prop);
        [id(0x000004c9), propput, helpcontext(0x097104c9)]
        HRESULT BookFoldPrintingSheets([in] long prop);
    };

    [
      odl,
      uuid(00020972-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000972),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LineNumbering : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09720064)]
        HRESULT RestartMode([out, retval] WdNumberingRule* prop);
        [id(0x00000064), propput, helpcontext(0x09720064)]
        HRESULT RestartMode([in] WdNumberingRule prop);
        [id(0x00000065), propget, helpcontext(0x09720065)]
        HRESULT StartingNumber([out, retval] long* prop);
        [id(0x00000065), propput, helpcontext(0x09720065)]
        HRESULT StartingNumber([in] long prop);
        [id(0x00000066), propget, helpcontext(0x09720066)]
        HRESULT DistanceFromText([out, retval] single* prop);
        [id(0x00000066), propput, helpcontext(0x09720066)]
        HRESULT DistanceFromText([in] single prop);
        [id(0x00000067), propget, helpcontext(0x09720067)]
        HRESULT CountBy([out, retval] long* prop);
        [id(0x00000067), propput, helpcontext(0x09720067)]
        HRESULT CountBy([in] long prop);
        [id(0x00000068), propget, helpcontext(0x09720068)]
        HRESULT Active([out, retval] long* prop);
        [id(0x00000068), propput, helpcontext(0x09720068)]
        HRESULT Active([in] long prop);
    };

    [
      odl,
      uuid(00020973-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000973),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextColumns : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0973fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09730002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x097303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09730064)]
        HRESULT EvenlySpaced([out, retval] long* prop);
        [id(0x00000064), propput, helpcontext(0x09730064)]
        HRESULT EvenlySpaced([in] long prop);
        [id(0x00000065), propget, helpcontext(0x09730065)]
        HRESULT LineBetween([out, retval] long* prop);
        [id(0x00000065), propput, helpcontext(0x09730065)]
        HRESULT LineBetween([in] long prop);
        [id(0x00000066), propget, helpcontext(0x09730066)]
        HRESULT Width([out, retval] single* prop);
        [id(0x00000066), propput, helpcontext(0x09730066)]
        HRESULT Width([in] single prop);
        [id(0x00000067), propget, helpcontext(0x09730067)]
        HRESULT Spacing([out, retval] single* prop);
        [id(0x00000067), propput, helpcontext(0x09730067)]
        HRESULT Spacing([in] single prop);
        [id(00000000), helpcontext(0x09730000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] TextColumn** prop);
        [id(0x000000c9), helpcontext(0x097300c9)]
        HRESULT Add(
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* Spacing, 
                        [in, optional] VARIANT* EvenlySpaced, 
                        [out, retval] TextColumn** prop);
        [id(0x000000ca), helpcontext(0x097300ca)]
        HRESULT SetCount([in] long NumColumns);
        [id(0x00000068), propget, helpcontext(0x09730068)]
        HRESULT FlowDirection([out, retval] WdFlowDirection* prop);
        [id(0x00000068), propput, helpcontext(0x09730068)]
        HRESULT FlowDirection([in] WdFlowDirection prop);
    };

    [
      odl,
      uuid(00020974-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000974),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextColumn : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097403e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09740064)]
        HRESULT Width([out, retval] single* prop);
        [id(0x00000064), propput, helpcontext(0x09740064)]
        HRESULT Width([in] single prop);
        [id(0x00000065), propget, helpcontext(0x09740065)]
        HRESULT SpaceAfter([out, retval] single* prop);
        [id(0x00000065), propput, helpcontext(0x09740065)]
        HRESULT SpaceAfter([in] single prop);
    };

    [
      odl,
      uuid(00020975-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000975),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Selection : IDispatch {
        [id(00000000), propget, helpcontext(0x09750000)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x09750000)]
        HRESULT Text([in] BSTR prop);
        [id(0x00000002), propget, helpcontext(0x09750002)]
        HRESULT FormattedText([out, retval] Range** prop);
        [id(0x00000002), propput, helpcontext(0x09750002)]
        HRESULT FormattedText([in] Range* prop);
        [id(0x00000003), propget, helpcontext(0x09750003)]
        HRESULT Start([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x09750003)]
        HRESULT Start([in] long prop);
        [id(0x00000004), propget, helpcontext(0x09750004)]
        HRESULT End([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x09750004)]
        HRESULT End([in] long prop);
        [id(0x00000005), propget, helpcontext(0x09750005)]
        HRESULT Font([out, retval] _Font** prop);
        [id(0x00000005), propput, helpcontext(0x09750005)]
        HRESULT Font([in] _Font* prop);
        [id(0x00000006), propget, helpcontext(0x09750006)]
        HRESULT Type([out, retval] WdSelectionType* prop);
        [id(0x00000007), propget, helpcontext(0x09750007)]
        HRESULT StoryType([out, retval] WdStoryType* prop);
        [id(0x00000008), propget, helpcontext(0x09750008)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(0x00000008), propput, helpcontext(0x09750008)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x00000032), propget, helpcontext(0x09750032)]
        HRESULT Tables([out, retval] Tables** prop);
        [id(0x00000033), propget, helpcontext(0x09750033)]
        HRESULT Words([out, retval] Words** prop);
        [id(0x00000034), propget, helpcontext(0x09750034)]
        HRESULT Sentences([out, retval] Sentences** prop);
        [id(0x00000035), propget, helpcontext(0x09750035)]
        HRESULT Characters([out, retval] Characters** prop);
        [id(0x00000036), propget, helpcontext(0x09750036)]
        HRESULT Footnotes([out, retval] Footnotes** prop);
        [id(0x00000037), propget, helpcontext(0x09750037)]
        HRESULT Endnotes([out, retval] Endnotes** prop);
        [id(0x00000038), propget, helpcontext(0x09750038)]
        HRESULT Comments([out, retval] Comments** prop);
        [id(0x00000039), propget, helpcontext(0x09750039)]
        HRESULT Cells([out, retval] Cells** prop);
        [id(0x0000003a), propget, helpcontext(0x0975003a)]
        HRESULT Sections([out, retval] Sections** prop);
        [id(0x0000003b), propget, helpcontext(0x0975003b)]
        HRESULT Paragraphs([out, retval] Paragraphs** prop);
        [id(0x0000044c), propget, helpcontext(0x0975044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x0975044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x0000003d), propget, helpcontext(0x0975003d)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000040), propget, helpcontext(0x09750040)]
        HRESULT Fields([out, retval] Fields** prop);
        [id(0x00000041), propget, helpcontext(0x09750041)]
        HRESULT FormFields([out, retval] FormFields** prop);
        [id(0x00000042), propget, helpcontext(0x09750042)]
        HRESULT Frames([out, retval] Frames** prop);
        [id(0x0000044e), propget, helpcontext(0x0975044e)]
        HRESULT ParagraphFormat([out, retval] _ParagraphFormat** prop);
        [id(0x0000044e), propput, helpcontext(0x0975044e)]
        HRESULT ParagraphFormat([in] _ParagraphFormat* prop);
        [id(0x0000044d), propget, helpcontext(0x0975044d)]
        HRESULT PageSetup([out, retval] PageSetup** prop);
        [id(0x0000044d), propput, helpcontext(0x0975044d)]
        HRESULT PageSetup([in] PageSetup* prop);
        [id(0x0000004b), propget, helpcontext(0x0975004b)]
        HRESULT Bookmarks([out, retval] Bookmarks** prop);
        [id(0x00000098), propget, helpcontext(0x09750098)]
        HRESULT StoryLength([out, retval] long* prop);
        [id(0x00000099), propget, helpcontext(0x09750099)]
        HRESULT LanguageID([out, retval] WdLanguageID* prop);
        [id(0x00000099), propput, helpcontext(0x09750099)]
        HRESULT LanguageID([in] WdLanguageID prop);
        [id(0x0000009a), propget, helpcontext(0x0975009a)]
        HRESULT LanguageIDFarEast([out, retval] WdLanguageID* prop);
        [id(0x0000009a), propput, helpcontext(0x0975009a)]
        HRESULT LanguageIDFarEast([in] WdLanguageID prop);
        [id(0x0000009b), propget, helpcontext(0x0975009b)]
        HRESULT LanguageIDOther([out, retval] WdLanguageID* prop);
        [id(0x0000009b), propput, helpcontext(0x0975009b)]
        HRESULT LanguageIDOther([in] WdLanguageID prop);
        [id(0x0000009c), propget, helpcontext(0x0975009c)]
        HRESULT Hyperlinks([out, retval] Hyperlinks** prop);
        [id(0x0000012e), propget, helpcontext(0x0975012e)]
        HRESULT Columns([out, retval] Columns** prop);
        [id(0x0000012f), propget, helpcontext(0x0975012f)]
        HRESULT Rows([out, retval] Rows** prop);
        [id(0x00000132), propget, helpcontext(0x09750132)]
        HRESULT HeaderFooter([out, retval] HeaderFooter** prop);
        [id(0x00000133), propget, helpcontext(0x09750133)]
        HRESULT IsEndOfRowMark([out, retval] VARIANT_BOOL* prop);
        [id(0x00000134), propget, helpcontext(0x09750134)]
        HRESULT BookmarkID([out, retval] long* prop);
        [id(0x00000135), propget, helpcontext(0x09750135)]
        HRESULT PreviousBookmarkID([out, retval] long* prop);
        [id(0x00000106), propget, helpcontext(0x09750106)]
        HRESULT Find([out, retval] Find** prop);
        [id(0x00000190), propget, helpcontext(0x09750190)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000191), propget, helpcontext(0x09750191)]
        HRESULT Information(
                        [in] WdInformation Type, 
                        [out, retval] VARIANT* prop);
        [id(0x00000192), propget, helpcontext(0x09750192)]
        HRESULT Flags([out, retval] WdSelectionFlags* prop);
        [id(0x00000192), propput, helpcontext(0x09750192)]
        HRESULT Flags([in] WdSelectionFlags prop);
        [id(0x00000193), propget, helpcontext(0x09750193)]
        HRESULT Active([out, retval] VARIANT_BOOL* prop);
        [id(0x00000194), propget, helpcontext(0x09750194)]
        HRESULT StartIsActive([out, retval] VARIANT_BOOL* prop);
        [id(0x00000194), propput, helpcontext(0x09750194)]
        HRESULT StartIsActive([in] VARIANT_BOOL prop);
        [id(0x00000195), propget, helpcontext(0x09750195)]
        HRESULT IPAtEndOfLine([out, retval] VARIANT_BOOL* prop);
        [id(0x00000196), propget, helpcontext(0x09750196)]
        HRESULT ExtendMode([out, retval] VARIANT_BOOL* prop);
        [id(0x00000196), propput, helpcontext(0x09750196)]
        HRESULT ExtendMode([in] VARIANT_BOOL prop);
        [id(0x00000197), propget, helpcontext(0x09750197)]
        HRESULT ColumnSelectMode([out, retval] VARIANT_BOOL* prop);
        [id(0x00000197), propput, helpcontext(0x09750197)]
        HRESULT ColumnSelectMode([in] VARIANT_BOOL prop);
        [id(0x0000019a), propget, helpcontext(0x0975019a)]
        HRESULT Orientation([out, retval] WdTextOrientation* prop);
        [id(0x0000019a), propput, helpcontext(0x0975019a)]
        HRESULT Orientation([in] WdTextOrientation prop);
        [id(0x0000019b), propget, helpcontext(0x0975019b)]
        HRESULT InlineShapes([out, retval] InlineShapes** prop);
        [id(0x000003e8), propget, helpcontext(0x097503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), propget, helpcontext(0x097503eb)]
        HRESULT Document([out, retval] _Document** prop);
        [id(0x000003ec), propget, helpcontext(0x097503ec)]
        HRESULT ShapeRange([out, retval] ShapeRange** prop);
        [id(0x0000ffff), helpcontext(0x0975ffff)]
        HRESULT Select();
        [id(0x00000064), helpcontext(0x09750064)]
        HRESULT SetRange(
                        [in] long Start, 
                        [in] long End);
        [id(0x00000065), helpcontext(0x09750065)]
        HRESULT Collapse([in, optional] VARIANT* Direction);
        [id(0x00000066), helpcontext(0x09750066)]
        HRESULT InsertBefore([in] BSTR Text);
        [id(0x00000068), helpcontext(0x09750068)]
        HRESULT InsertAfter([in] BSTR Text);
        [id(0x00000069), helpcontext(0x09750069)]
        HRESULT Next(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] Range** prop);
        [id(0x0000006a), helpcontext(0x0975006a)]
        HRESULT Previous(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] Range** prop);
        [id(0x0000006b), helpcontext(0x0975006b)]
        HRESULT StartOf(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x0000006c), helpcontext(0x0975006c)]
        HRESULT EndOf(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x0000006d), helpcontext(0x0975006d)]
        HRESULT Move(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x0000006e), helpcontext(0x0975006e)]
        HRESULT MoveStart(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x0000006f), helpcontext(0x0975006f)]
        HRESULT MoveEnd(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000070), helpcontext(0x09750070)]
        HRESULT MoveWhile(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000071), helpcontext(0x09750071)]
        HRESULT MoveStartWhile(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000072), helpcontext(0x09750072)]
        HRESULT MoveEndWhile(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000073), helpcontext(0x09750073)]
        HRESULT MoveUntil(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000074), helpcontext(0x09750074)]
        HRESULT MoveStartUntil(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000075), helpcontext(0x09750075)]
        HRESULT MoveEndUntil(
                        [in] VARIANT* Cset, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000077), helpcontext(0x09750077)]
        HRESULT Cut();
        [id(0x00000078), helpcontext(0x09750078)]
        HRESULT Copy();
        [id(0x00000079), helpcontext(0x09750079)]
        HRESULT Paste();
        [id(0x0000007a), helpcontext(0x0975007a)]
        HRESULT InsertBreak([in, optional] VARIANT* Type);
        [id(0x0000007b), helpcontext(0x0975007b)]
        HRESULT InsertFile(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* Link, 
                        [in, optional] VARIANT* Attachment);
        [id(0x0000007d), helpcontext(0x0975007d)]
        HRESULT InStory(
                        [in] Range* Range, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000007e), helpcontext(0x0975007e)]
        HRESULT InRange(
                        [in] Range* Range, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000007f), helpcontext(0x0975007f)]
        HRESULT Delete(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [out, retval] long* prop);
        [id(0x00000081), helpcontext(0x09750081)]
        HRESULT Expand(
                        [in, optional] VARIANT* Unit, 
                        [out, retval] long* prop);
        [id(0x000000a0), helpcontext(0x097500a0)]
        HRESULT InsertParagraph();
        [id(0x000000a1), helpcontext(0x097500a1)]
        HRESULT InsertParagraphAfter();
        [id(0x000000a2), hidden, helpcontext(0x097500a2)]
        HRESULT ConvertToTableOld(
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* NumRows, 
                        [in, optional] VARIANT* NumColumns, 
                        [in, optional] VARIANT* InitialColumnWidth, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ApplyBorders, 
                        [in, optional] VARIANT* ApplyShading, 
                        [in, optional] VARIANT* ApplyFont, 
                        [in, optional] VARIANT* ApplyColor, 
                        [in, optional] VARIANT* ApplyHeadingRows, 
                        [in, optional] VARIANT* ApplyLastRow, 
                        [in, optional] VARIANT* ApplyFirstColumn, 
                        [in, optional] VARIANT* ApplyLastColumn, 
                        [in, optional] VARIANT* AutoFit, 
                        [out, retval] Table** prop);
        [id(0x000000a3), hidden, helpcontext(0x097500a3)]
        HRESULT InsertDateTimeOld(
                        [in, optional] VARIANT* DateTimeFormat, 
                        [in, optional] VARIANT* InsertAsField, 
                        [in, optional] VARIANT* InsertAsFullWidth);
        [id(0x000000a4), helpcontext(0x097500a4)]
        HRESULT InsertSymbol(
                        [in] long CharacterNumber, 
                        [in, optional] VARIANT* Font, 
                        [in, optional] VARIANT* Unicode, 
                        [in, optional] VARIANT* Bias);
        [id(0x000000a5), hidden, helpcontext(0x097500a5)]
        HRESULT InsertCrossReference_2002(
                        [in] VARIANT* ReferenceType, 
                        [in] WdReferenceKind ReferenceKind, 
                        [in] VARIANT* ReferenceItem, 
                        [in, optional] VARIANT* InsertAsHyperlink, 
                        [in, optional] VARIANT* IncludePosition);
        [id(0x000000a6), hidden, helpcontext(0x097500a6)]
        HRESULT InsertCaptionXP(
                        [in] VARIANT* Label, 
                        [in, optional] VARIANT* Title, 
                        [in, optional] VARIANT* TitleAutoText, 
                        [in, optional] VARIANT* Position);
        [id(0x000000a7), helpcontext(0x097500a7)]
        HRESULT CopyAsPicture();
        [id(0x000000a8), hidden, helpcontext(0x097500a8)]
        HRESULT SortOld(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* FieldNumber, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* FieldNumber2, 
                        [in, optional] VARIANT* SortFieldType2, 
                        [in, optional] VARIANT* SortOrder2, 
                        [in, optional] VARIANT* FieldNumber3, 
                        [in, optional] VARIANT* SortFieldType3, 
                        [in, optional] VARIANT* SortOrder3, 
                        [in, optional] VARIANT* SortColumn, 
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* LanguageID);
        [id(0x000000a9), helpcontext(0x097500a9)]
        HRESULT SortAscending();
        [id(0x000000aa), helpcontext(0x097500aa)]
        HRESULT SortDescending();
        [id(0x000000ab), helpcontext(0x097500ab)]
        HRESULT IsEqual(
                        [in] Range* Range, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x000000ac), helpcontext(0x097500ac)]
        HRESULT Calculate([out, retval] single* prop);
        [id(0x000000ad), helpcontext(0x097500ad)]
        HRESULT GoTo(
                        [in, optional] VARIANT* What, 
                        [in, optional] VARIANT* Which, 
                        [in, optional] VARIANT* Count, 
                        [in, optional] VARIANT* Name, 
                        [out, retval] Range** prop);
        [id(0x000000ae), helpcontext(0x097500ae)]
        HRESULT GoToNext(
                        [in] WdGoToItem What, 
                        [out, retval] Range** prop);
        [id(0x000000af), helpcontext(0x097500af)]
        HRESULT GoToPrevious(
                        [in] WdGoToItem What, 
                        [out, retval] Range** prop);
        [id(0x000000b0), helpcontext(0x097500b0)]
        HRESULT PasteSpecial(
                        [in, optional] VARIANT* IconIndex, 
                        [in, optional] VARIANT* Link, 
                        [in, optional] VARIANT* Placement, 
                        [in, optional] VARIANT* DisplayAsIcon, 
                        [in, optional] VARIANT* DataType, 
                        [in, optional] VARIANT* IconFileName, 
                        [in, optional] VARIANT* IconLabel);
        [id(0x000000b1), helpcontext(0x097500b1)]
        HRESULT PreviousField([out, retval] Field** prop);
        [id(0x000000b2), helpcontext(0x097500b2)]
        HRESULT NextField([out, retval] Field** prop);
        [id(0x000000d4), helpcontext(0x097500d4)]
        HRESULT InsertParagraphBefore();
        [id(0x000000d6), helpcontext(0x097500d6)]
        HRESULT InsertCells([in, optional] VARIANT* ShiftCells);
        [id(0x0000012c), helpcontext(0x0975012c)]
        HRESULT Extend([in, optional] VARIANT* Character);
        [id(0x0000012d), helpcontext(0x0975012d)]
        HRESULT Shrink();
        [id(0x000001f4), helpcontext(0x097501f4)]
        HRESULT MoveLeft(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x000001f5), helpcontext(0x097501f5)]
        HRESULT MoveRight(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x000001f6), helpcontext(0x097501f6)]
        HRESULT MoveUp(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x000001f7), helpcontext(0x097501f7)]
        HRESULT MoveDown(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Count, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x000001f8), helpcontext(0x097501f8)]
        HRESULT HomeKey(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x000001f9), helpcontext(0x097501f9)]
        HRESULT EndKey(
                        [in, optional] VARIANT* Unit, 
                        [in, optional] VARIANT* Extend, 
                        [out, retval] long* prop);
        [id(0x000001fa), helpcontext(0x097501fa)]
        HRESULT EscapeKey();
        [id(0x000001fb), helpcontext(0x097501fb)]
        HRESULT TypeText([in] BSTR Text);
        [id(0x000001fd), helpcontext(0x097501fd)]
        HRESULT CopyFormat();
        [id(0x000001fe), helpcontext(0x097501fe)]
        HRESULT PasteFormat();
        [id(0x00000200), helpcontext(0x09750200)]
        HRESULT TypeParagraph();
        [id(0x00000201), helpcontext(0x09750201)]
        HRESULT TypeBackspace();
        [id(0x00000202), helpcontext(0x09750202)]
        HRESULT NextSubdocument();
        [id(0x00000203), helpcontext(0x09750203)]
        HRESULT PreviousSubdocument();
        [id(0x00000204), helpcontext(0x09750204)]
        HRESULT SelectColumn();
        [id(0x00000205), helpcontext(0x09750205)]
        HRESULT SelectCurrentFont();
        [id(0x00000206), helpcontext(0x09750206)]
        HRESULT SelectCurrentAlignment();
        [id(0x00000207), helpcontext(0x09750207)]
        HRESULT SelectCurrentSpacing();
        [id(0x00000208), helpcontext(0x09750208)]
        HRESULT SelectCurrentIndent();
        [id(0x00000209), helpcontext(0x09750209)]
        HRESULT SelectCurrentTabs();
        [id(0x0000020a), helpcontext(0x0975020a)]
        HRESULT SelectCurrentColor();
        [id(0x0000020b), helpcontext(0x0975020b)]
        HRESULT CreateTextbox();
        [id(0x0000020c), helpcontext(0x0975020c)]
        HRESULT WholeStory();
        [id(0x0000020d), helpcontext(0x0975020d)]
        HRESULT SelectRow();
        [id(0x0000020e), helpcontext(0x0975020e)]
        HRESULT SplitTable();
        [id(0x00000210), helpcontext(0x09750210)]
        HRESULT InsertRows([in, optional] VARIANT* NumRows);
        [id(0x00000211), helpcontext(0x09750211)]
        HRESULT InsertColumns();
        [id(0x00000212), helpcontext(0x09750212)]
        HRESULT InsertFormula(
                        [in, optional] VARIANT* Formula, 
                        [in, optional] VARIANT* NumberFormat);
        [id(0x00000213), helpcontext(0x09750213)]
        HRESULT NextRevision(
                        [in, optional] VARIANT* Wrap, 
                        [out, retval] Revision** prop);
        [id(0x00000214), helpcontext(0x09750214)]
        HRESULT PreviousRevision(
                        [in, optional] VARIANT* Wrap, 
                        [out, retval] Revision** prop);
        [id(0x00000215), helpcontext(0x09750215)]
        HRESULT PasteAsNestedTable();
        [id(0x00000216), helpcontext(0x09750216)]
        HRESULT CreateAutoTextEntry(
                        [in] BSTR Name, 
                        [in] BSTR StyleName, 
                        [out, retval] AutoTextEntry** prop);
        [id(0x00000217), helpcontext(0x09750217)]
        HRESULT DetectLanguage();
        [id(0x00000218), helpcontext(0x09750218)]
        HRESULT SelectCell();
        [id(0x00000219), helpcontext(0x09750219)]
        HRESULT InsertRowsBelow([in, optional] VARIANT* NumRows);
        [id(0x0000021a), helpcontext(0x0975021a)]
        HRESULT InsertColumnsRight();
        [id(0x0000021b), helpcontext(0x0975021b)]
        HRESULT InsertRowsAbove([in, optional] VARIANT* NumRows);
        [id(0x00000258), helpcontext(0x09750258)]
        HRESULT RtlRun();
        [id(0x00000259), helpcontext(0x09750259)]
        HRESULT LtrRun();
        [id(0x0000025a), helpcontext(0x0975025a)]
        HRESULT BoldRun();
        [id(0x0000025b), helpcontext(0x0975025b)]
        HRESULT ItalicRun();
        [id(0x0000025d), helpcontext(0x0975025d)]
        HRESULT RtlPara();
        [id(0x0000025e), helpcontext(0x0975025e)]
        HRESULT LtrPara();
        [id(0x000001bc), helpcontext(0x097501bc)]
        HRESULT InsertDateTime(
                        [in, optional] VARIANT* DateTimeFormat, 
                        [in, optional] VARIANT* InsertAsField, 
                        [in, optional] VARIANT* InsertAsFullWidth, 
                        [in, optional] VARIANT* DateLanguage, 
                        [in, optional] VARIANT* CalendarType);
        [id(0x000001bd), hidden, helpcontext(0x097501bd)]
        HRESULT Sort2000(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* FieldNumber, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* FieldNumber2, 
                        [in, optional] VARIANT* SortFieldType2, 
                        [in, optional] VARIANT* SortOrder2, 
                        [in, optional] VARIANT* FieldNumber3, 
                        [in, optional] VARIANT* SortFieldType3, 
                        [in, optional] VARIANT* SortOrder3, 
                        [in, optional] VARIANT* SortColumn, 
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* BidiSort, 
                        [in, optional] VARIANT* IgnoreThe, 
                        [in, optional] VARIANT* IgnoreKashida, 
                        [in, optional] VARIANT* IgnoreDiacritics, 
                        [in, optional] VARIANT* IgnoreHe, 
                        [in, optional] VARIANT* LanguageID);
        [id(0x000001c9), helpcontext(0x097501c9)]
        HRESULT ConvertToTable(
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* NumRows, 
                        [in, optional] VARIANT* NumColumns, 
                        [in, optional] VARIANT* InitialColumnWidth, 
                        [in, optional] VARIANT* Format, 
                        [in, optional] VARIANT* ApplyBorders, 
                        [in, optional] VARIANT* ApplyShading, 
                        [in, optional] VARIANT* ApplyFont, 
                        [in, optional] VARIANT* ApplyColor, 
                        [in, optional] VARIANT* ApplyHeadingRows, 
                        [in, optional] VARIANT* ApplyLastRow, 
                        [in, optional] VARIANT* ApplyFirstColumn, 
                        [in, optional] VARIANT* ApplyLastColumn, 
                        [in, optional] VARIANT* AutoFit, 
                        [in, optional] VARIANT* AutoFitBehavior, 
                        [in, optional] VARIANT* DefaultTableBehavior, 
                        [out, retval] Table** prop);
        [id(0x000003ed), propget, helpcontext(0x097503ed)]
        HRESULT NoProofing([out, retval] long* prop);
        [id(0x000003ed), propput, helpcontext(0x097503ed)]
        HRESULT NoProofing([in] long prop);
        [id(0x000003ee), propget, helpcontext(0x097503ee)]
        HRESULT TopLevelTables([out, retval] Tables** prop);
        [id(0x000003ef), propget, helpcontext(0x097503ef)]
        HRESULT LanguageDetected([out, retval] VARIANT_BOOL* prop);
        [id(0x000003ef), propput, helpcontext(0x097503ef)]
        HRESULT LanguageDetected([in] VARIANT_BOOL prop);
        [id(0x000003f0), propget, helpcontext(0x097503f0)]
        HRESULT FitTextWidth([out, retval] single* prop);
        [id(0x000003f0), propput, helpcontext(0x097503f0)]
        HRESULT FitTextWidth([in] single prop);
        [id(0x000003f1), helpcontext(0x097503f1)]
        HRESULT ClearFormatting();
        [id(0x000003f2), helpcontext(0x097503f2)]
        HRESULT PasteAppendTable();
        [id(0x000003f3), propget, helpcontext(0x097503f3)]
        HRESULT HTMLDivisions([out, retval] HTMLDivisions** prop);
        [id(0x000003f7), propget, hidden, helpcontext(0x097503f7)]
        HRESULT SmartTags([out, retval] SmartTags** prop);
        [id(0x000003fd), propget, helpcontext(0x097503fd)]
        HRESULT ChildShapeRange([out, retval] ShapeRange** prop);
        [id(0x000003fe), propget, helpcontext(0x097503fe)]
        HRESULT HasChildShapeRange([out, retval] VARIANT_BOOL* prop);
        [id(0x00000400), propget, helpcontext(0x09750400)]
        HRESULT FootnoteOptions([out, retval] FootnoteOptions** prop);
        [id(0x00000401), propget, helpcontext(0x09750401)]
        HRESULT EndnoteOptions([out, retval] EndnoteOptions** prop);
        [id(0x000003f4), helpcontext(0x097503f4)]
        HRESULT ToggleCharacterCode();
        [id(0x000003f5), helpcontext(0x097503f5)]
        HRESULT PasteAndFormat([in] WdRecoveryType Type);
        [id(0x000003f6), helpcontext(0x097503f6)]
        HRESULT PasteExcelTable(
                        [in] VARIANT_BOOL LinkedToExcel, 
                        [in] VARIANT_BOOL WordFormatting, 
                        [in] VARIANT_BOOL RTF);
        [id(0x000003fb), helpcontext(0x097503fb)]
        HRESULT ShrinkDiscontiguousSelection();
        [id(0x000003fc), helpcontext(0x097503fc)]
        HRESULT InsertStyleSeparator();
        [id(0x000003ff), helpcontext(0x097503ff)]
        HRESULT Sort(
                        [in, optional] VARIANT* ExcludeHeader, 
                        [in, optional] VARIANT* FieldNumber, 
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* FieldNumber2, 
                        [in, optional] VARIANT* SortFieldType2, 
                        [in, optional] VARIANT* SortOrder2, 
                        [in, optional] VARIANT* FieldNumber3, 
                        [in, optional] VARIANT* SortFieldType3, 
                        [in, optional] VARIANT* SortOrder3, 
                        [in, optional] VARIANT* SortColumn, 
                        [in, optional] VARIANT* Separator, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* BidiSort, 
                        [in, optional] VARIANT* IgnoreThe, 
                        [in, optional] VARIANT* IgnoreKashida, 
                        [in, optional] VARIANT* IgnoreDiacritics, 
                        [in, optional] VARIANT* IgnoreHe, 
                        [in, optional] VARIANT* LanguageID, 
                        [in, optional] VARIANT* SubFieldNumber, 
                        [in, optional] VARIANT* SubFieldNumber2, 
                        [in, optional] VARIANT* SubFieldNumber3);
        [id(0x00000136), propget, hidden, helpcontext(0x09750136)]
        HRESULT XMLNodes([out, retval] XMLNodes** prop);
        [id(0x00000137), propget, hidden, helpcontext(0x09750137)]
        HRESULT XMLParentNode([out, retval] XMLNode** prop);
        [id(0x00000139), propget, helpcontext(0x09750139)]
        HRESULT Editors([out, retval] Editors** prop);
        [id(0x0000013a), propget, helpcontext(0x0975013a)]
        HRESULT XML(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL DataOnly, 
                        [out, retval] BSTR* prop);
        [id(0x0000013b), propget, helpcontext(0x0975013b)]
        HRESULT EnhMetaFileBits([out, retval] VARIANT* prop);
        [id(0x00000403), helpcontext(0x09750403)]
        HRESULT GoToEditableRange(
                        [in, optional] VARIANT* EditorID, 
                        [out, retval] Range** prop);
        [id(0x00000404), helpcontext(0x09750404)]
        HRESULT InsertXML(
                        [in] BSTR XML, 
                        [in, optional] VARIANT* Transform);
        [id(0x000001a1), helpcontext(0x097501a1)]
        HRESULT InsertCaption(
                        [in] VARIANT* Label, 
                        [in, optional] VARIANT* Title, 
                        [in, optional] VARIANT* TitleAutoText, 
                        [in, optional] VARIANT* Position, 
                        [in, optional] VARIANT* ExcludeLabel);
        [id(0x000001a2), helpcontext(0x097501a2)]
        HRESULT InsertCrossReference(
                        [in] VARIANT* ReferenceType, 
                        [in] WdReferenceKind ReferenceKind, 
                        [in] VARIANT* ReferenceItem, 
                        [in, optional] VARIANT* InsertAsHyperlink, 
                        [in, optional] VARIANT* IncludePosition, 
                        [in, optional] VARIANT* SeparateNumbers, 
                        [in, optional] VARIANT* SeparatorString);
        [id(0x0000013c), propget, helpcontext(0x0975013c)]
        HRESULT OMaths([out, retval] OMaths** prop);
        [id(0x0000013d), propget, helpcontext(0x0975013d)]
        HRESULT WordOpenXML([out, retval] BSTR* prop);
        [id(0x00000406), helpcontext(0x09750406)]
        HRESULT ClearParagraphStyle();
        [id(0x00000407), helpcontext(0x09750407)]
        HRESULT ClearCharacterAllFormatting();
        [id(0x00000408), helpcontext(0x09750408)]
        HRESULT ClearCharacterStyle();
        [id(0x00000409), helpcontext(0x09750409)]
        HRESULT ClearCharacterDirectFormatting();
        [id(0x0000040a), propget, hidden, helpcontext(0x0975040a)]
        HRESULT ContentControls([out, retval] ContentControls** prop);
        [id(0x0000040b), propget, hidden, helpcontext(0x0975040b)]
        HRESULT ParentContentControl([out, retval] ContentControl** prop);
        [id(0x0000040c), helpcontext(0x0975040c)]
        HRESULT ExportAsFixedFormat(
                        [in] BSTR OutputFileName, 
                        [in] WdExportFormat ExportFormat, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL OpenAfterExport, 
                        [in, optional, defaultvalue(0)] WdExportOptimizeFor OptimizeFor, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL ExportCurrentPage, 
                        [in, optional, defaultvalue(0)] WdExportItem Item, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL IncludeDocProps, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL KeepIRM, 
                        [in, optional, defaultvalue(0)] WdExportCreateBookmarks CreateBookmarks, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL DocStructureTags, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL BitmapMissingFonts, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL UseISO19005_1, 
                        [in, optional] VARIANT* FixedFormatExtClassPtr);
        [id(0x0000040d), helpcontext(0x0975040d)]
        HRESULT ReadingModeGrowFont();
        [id(0x0000040e), helpcontext(0x0975040e)]
        HRESULT ReadingModeShrinkFont();
        [id(0x0000040f), helpcontext(0x0975040f)]
        HRESULT ClearParagraphAllFormatting();
        [id(0x00000410), helpcontext(0x09750410)]
        HRESULT ClearParagraphDirectFormatting();
        [id(0x00000411), helpcontext(0x09750411)]
        HRESULT InsertNewPage();
        [id(0x00000412), helpcontext(0x09750412)]
        HRESULT SortByHeadings(
                        [in, optional] VARIANT* SortFieldType, 
                        [in, optional] VARIANT* SortOrder, 
                        [in, optional] VARIANT* CaseSensitive, 
                        [in, optional] VARIANT* BidiSort, 
                        [in, optional] VARIANT* IgnoreThe, 
                        [in, optional] VARIANT* IgnoreKashida, 
                        [in, optional] VARIANT* IgnoreDiacritics, 
                        [in, optional] VARIANT* IgnoreHe, 
                        [in, optional] VARIANT* LanguageID);
    };

    [
      odl,
      uuid(00020976-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000976),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TablesOfAuthoritiesCategories : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097603e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0976fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09760001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09760000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] TableOfAuthoritiesCategory** prop);
    };

    [
      odl,
      uuid(00020977-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000977),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TableOfAuthoritiesCategory : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09770000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x09770000)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000001), propget, helpcontext(0x09770001)]
        HRESULT Index([out, retval] long* prop);
    };

    [
      odl,
      uuid(00020978-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000978),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CaptionLabels : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097803e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0978fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09780001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09780000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] CaptionLabel** prop);
        [id(0x00000064), helpcontext(0x09780064)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] CaptionLabel** prop);
    };

    [
      odl,
      uuid(00020979-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000979),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CaptionLabel : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09790000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09790001)]
        HRESULT BuiltIn([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propget, helpcontext(0x09790002)]
        HRESULT ID([out, retval] WdCaptionLabelID* prop);
        [id(0x00000003), propget, helpcontext(0x09790003)]
        HRESULT IncludeChapterNumber([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09790003)]
        HRESULT IncludeChapterNumber([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09790004)]
        HRESULT NumberStyle([out, retval] WdCaptionNumberStyle* prop);
        [id(0x00000004), propput, helpcontext(0x09790004)]
        HRESULT NumberStyle([in] WdCaptionNumberStyle prop);
        [id(0x00000005), propget, helpcontext(0x09790005)]
        HRESULT ChapterStyleLevel([out, retval] long* prop);
        [id(0x00000005), propput, helpcontext(0x09790005)]
        HRESULT ChapterStyleLevel([in] long prop);
        [id(0x00000006), propget, helpcontext(0x09790006)]
        HRESULT Separator([out, retval] WdSeparatorType* prop);
        [id(0x00000006), propput, helpcontext(0x09790006)]
        HRESULT Separator([in] WdSeparatorType prop);
        [id(0x00000007), propget, helpcontext(0x09790007)]
        HRESULT Position([out, retval] WdCaptionPosition* prop);
        [id(0x00000007), propput, helpcontext(0x09790007)]
        HRESULT Position([in] WdCaptionPosition prop);
        [id(0x00000064), helpcontext(0x09790064)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(0002097A-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000097a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AutoCaptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097a03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x097afffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x097a0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x097a0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] AutoCaption** prop);
        [id(0x00000064), helpcontext(0x097a0064)]
        HRESULT CancelAutoInsert();
    };

    [
      odl,
      uuid(0002097B-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000097b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AutoCaption : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097b03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x097b0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x097b0001)]
        HRESULT AutoInsert([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x097b0001)]
        HRESULT AutoInsert([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x097b0002)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x097b0003)]
        HRESULT CaptionLabel([out, retval] VARIANT* prop);
        [id(0x00000003), propput, helpcontext(0x097b0003)]
        HRESULT CaptionLabel([in] VARIANT* prop);
    };

    [
      odl,
      uuid(0002097C-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000097c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Indexes : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097c03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x097cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x097c0001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x097c0002)]
        HRESULT Format([out, retval] WdIndexFormat* prop);
        [id(0x00000002), propput, helpcontext(0x097c0002)]
        HRESULT Format([in] WdIndexFormat prop);
        [id(00000000), helpcontext(0x097c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Index** prop);
        [id(0x00000064), hidden, helpcontext(0x097c0064)]
        HRESULT AddOld(
                        [in] Range* Range, 
                        [in, optional] VARIANT* HeadingSeparator, 
                        [in, optional] VARIANT* RightAlignPageNumbers, 
                        [in, optional] VARIANT* Type, 
                        [in, optional] VARIANT* NumberOfColumns, 
                        [in, optional] VARIANT* AccentedLetters, 
                        [out, retval] Index** prop);
        [id(0x00000065), helpcontext(0x097c0065)]
        HRESULT MarkEntry(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Entry, 
                        [in, optional] VARIANT* EntryAutoText, 
                        [in, optional] VARIANT* CrossReference, 
                        [in, optional] VARIANT* CrossReferenceAutoText, 
                        [in, optional] VARIANT* BookmarkName, 
                        [in, optional] VARIANT* Bold, 
                        [in, optional] VARIANT* Italic, 
                        [in, optional] VARIANT* Reading, 
                        [out, retval] Field** prop);
        [id(0x00000066), helpcontext(0x097c0066)]
        HRESULT MarkAllEntries(
                        [in] Range* Range, 
                        [in, optional] VARIANT* Entry, 
                        [in, optional] VARIANT* EntryAutoText, 
                        [in, optional] VARIANT* CrossReference, 
                        [in, optional] VARIANT* CrossReferenceAutoText, 
                        [in, optional] VARIANT* BookmarkName, 
                        [in, optional] VARIANT* Bold, 
                        [in, optional] VARIANT* Italic);
        [id(0x00000067), helpcontext(0x097c0067)]
        HRESULT AutoMarkEntries([in] BSTR ConcordanceFileName);
        [id(0x00000068), helpcontext(0x097c0068)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in, optional] VARIANT* HeadingSeparator, 
                        [in, optional] VARIANT* RightAlignPageNumbers, 
                        [in, optional] VARIANT* Type, 
                        [in, optional] VARIANT* NumberOfColumns, 
                        [in, optional] VARIANT* AccentedLetters, 
                        [in, optional] VARIANT* SortBy, 
                        [in, optional] VARIANT* IndexLanguage, 
                        [out, retval] Index** prop);
    };

    [
      odl,
      uuid(0002097D-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000097d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Index : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097d03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x097d0001)]
        HRESULT HeadingSeparator([out, retval] WdHeadingSeparator* prop);
        [id(0x00000001), propput, helpcontext(0x097d0001)]
        HRESULT HeadingSeparator([in] WdHeadingSeparator prop);
        [id(0x00000002), propget, helpcontext(0x097d0002)]
        HRESULT RightAlignPageNumbers([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x097d0002)]
        HRESULT RightAlignPageNumbers([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x097d0003)]
        HRESULT Type([out, retval] WdIndexType* prop);
        [id(0x00000003), propput, helpcontext(0x097d0003)]
        HRESULT Type([in] WdIndexType prop);
        [id(0x00000004), propget, helpcontext(0x097d0004)]
        HRESULT NumberOfColumns([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x097d0004)]
        HRESULT NumberOfColumns([in] long prop);
        [id(0x00000005), propget, helpcontext(0x097d0005)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000006), propget, helpcontext(0x097d0006)]
        HRESULT TabLeader([out, retval] WdTabLeader* prop);
        [id(0x00000006), propput, helpcontext(0x097d0006)]
        HRESULT TabLeader([in] WdTabLeader prop);
        [id(0x00000007), propget, helpcontext(0x097d0007)]
        HRESULT AccentedLetters([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propput, helpcontext(0x097d0007)]
        HRESULT AccentedLetters([in] VARIANT_BOOL prop);
        [id(0x00000008), propget, helpcontext(0x097d0008)]
        HRESULT SortBy([out, retval] WdIndexSortBy* prop);
        [id(0x00000008), propput, helpcontext(0x097d0008)]
        HRESULT SortBy([in] WdIndexSortBy prop);
        [id(0x00000009), propget, helpcontext(0x097d0009)]
        HRESULT Filter([out, retval] WdIndexFilter* prop);
        [id(0x00000009), propput, helpcontext(0x097d0009)]
        HRESULT Filter([in] WdIndexFilter prop);
        [id(0x00000064), helpcontext(0x097d0064)]
        HRESULT Delete();
        [id(0x00000066), helpcontext(0x097d0066)]
        HRESULT Update();
        [id(0x0000000a), propget, helpcontext(0x097d000a)]
        HRESULT IndexLanguage([out, retval] WdLanguageID* prop);
        [id(0x0000000a), propput, helpcontext(0x097d000a)]
        HRESULT IndexLanguage([in] WdLanguageID prop);
    };

    [
      odl,
      uuid(0002097E-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000097e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AddIn : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097e03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x097e0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x097e0001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x097e0003)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000004), propget, helpcontext(0x097e0004)]
        HRESULT Installed([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x097e0004)]
        HRESULT Installed([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x097e0005)]
        HRESULT Compiled([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propget, helpcontext(0x097e0006)]
        HRESULT Autoload([out, retval] VARIANT_BOOL* prop);
        [id(0x00000065), helpcontext(0x097e0065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(0002097F-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000097f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AddIns : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x097f03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x097f03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x097f03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x097ffffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x097f0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x097f0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] AddIn** prop);
        [id(0x00000002), helpcontext(0x097f0002)]
        HRESULT Add(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* Install, 
                        [out, retval] AddIn** prop);
        [id(0x00000003), helpcontext(0x097f0003)]
        HRESULT Unload([in] VARIANT_BOOL RemoveFromList);
    };

    [
      odl,
      uuid(00020980-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000980),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Revisions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0980fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000005), propget, helpcontext(0x09800005)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09800000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Revision** prop);
        [id(0x00000065), helpcontext(0x09800065)]
        HRESULT AcceptAll();
        [id(0x00000066), helpcontext(0x09800066)]
        HRESULT RejectAll();
    };

    [
      odl,
      uuid(00020981-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000981),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Revision : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09810001)]
        HRESULT Author([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x09810002)]
        HRESULT Date([out, retval] DATE* prop);
        [id(0x00000003), propget, helpcontext(0x09810003)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000004), propget, helpcontext(0x09810004)]
        HRESULT Type([out, retval] WdRevisionType* prop);
        [id(0x00000005), propget, helpcontext(0x09810005)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000065), helpcontext(0x09810065)]
        HRESULT Accept();
        [id(0x00000066), helpcontext(0x09810066)]
        HRESULT Reject();
        [id(0x00000008), propget, helpcontext(0x09810008)]
        HRESULT Style([out, retval] Style** prop);
        [id(0x00000009), propget, helpcontext(0x09810009)]
        HRESULT FormatDescription([out, retval] BSTR* prop);
        [id(0x0000000a), propget, helpcontext(0x0981000a)]
        HRESULT MovedRange([out, retval] Range** prop);
        [id(0x0000000b), propget, helpcontext(0x0981000b)]
        HRESULT Cells([out, retval] Cells** prop);
    };

    [
      odl,
      uuid(00020982-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000982),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Task : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09820000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09820001)]
        HRESULT Left([out, retval] long* prop);
        [id(0x00000001), propput, helpcontext(0x09820001)]
        HRESULT Left([in] long prop);
        [id(0x00000002), propget, helpcontext(0x09820002)]
        HRESULT Top([out, retval] long* prop);
        [id(0x00000002), propput, helpcontext(0x09820002)]
        HRESULT Top([in] long prop);
        [id(0x00000003), propget, helpcontext(0x09820003)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x09820003)]
        HRESULT Width([in] long prop);
        [id(0x00000004), propget, helpcontext(0x09820004)]
        HRESULT Height([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x09820004)]
        HRESULT Height([in] long prop);
        [id(0x00000005), propget, helpcontext(0x09820005)]
        HRESULT WindowState([out, retval] WdWindowState* prop);
        [id(0x00000005), propput, helpcontext(0x09820005)]
        HRESULT WindowState([in] WdWindowState prop);
        [id(0x00000006), propget, helpcontext(0x09820006)]
        HRESULT Visible([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x09820006)]
        HRESULT Visible([in] VARIANT_BOOL prop);
        [id(0x0000000a), helpcontext(0x0982000a)]
        HRESULT Activate([in, optional] VARIANT* Wait);
        [id(0x0000000b), helpcontext(0x0982000b)]
        HRESULT Close();
        [id(0x0000000c), helpcontext(0x0982000c)]
        HRESULT Move(
                        [in] long Left, 
                        [in] long Top);
        [id(0x0000000d), helpcontext(0x0982000d)]
        HRESULT Resize(
                        [in] long Width, 
                        [in] long Height);
        [id(0x0000000e), helpcontext(0x0982000e)]
        HRESULT SendWindowMessage(
                        [in] long Message, 
                        [in] long wParam, 
                        [in] long lParam);
    };

    [
      odl,
      uuid(00020983-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000983),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Tasks : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0983fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09830001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09830000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Task** prop);
        [id(0x00000002), helpcontext(0x09830002)]
        HRESULT Exists(
                        [in] BSTR Name, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), helpcontext(0x09830003)]
        HRESULT ExitWindows();
    };

    [
      odl,
      uuid(00020984-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000984),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HeadersFooters : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098403e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0984fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09840001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09840000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] WdHeaderFooterIndex Index, 
                        [out, retval] HeaderFooter** prop);
    };

    [
      odl,
      uuid(00020985-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000985),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HeaderFooter : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09850000)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000002), propget, helpcontext(0x09850002)]
        HRESULT Index([out, retval] WdHeaderFooterIndex* prop);
        [id(0x00000003), propget, helpcontext(0x09850003)]
        HRESULT IsHeader([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propget, helpcontext(0x09850004)]
        HRESULT Exists([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09850004)]
        HRESULT Exists([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x09850005)]
        HRESULT PageNumbers([out, retval] PageNumbers** prop);
        [id(0x00000006), propget, helpcontext(0x09850006)]
        HRESULT LinkToPrevious([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x09850006)]
        HRESULT LinkToPrevious([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09850007)]
        HRESULT Shapes([out, retval] Shapes** prop);
    };

    [
      odl,
      uuid(00020986-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000986),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PageNumbers : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098603e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0986fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09860001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09860002)]
        HRESULT NumberStyle([out, retval] WdPageNumberStyle* prop);
        [id(0x00000002), propput, helpcontext(0x09860002)]
        HRESULT NumberStyle([in] WdPageNumberStyle prop);
        [id(0x00000003), propget, helpcontext(0x09860003)]
        HRESULT IncludeChapterNumber([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09860003)]
        HRESULT IncludeChapterNumber([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09860004)]
        HRESULT HeadingLevelForChapter([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x09860004)]
        HRESULT HeadingLevelForChapter([in] long prop);
        [id(0x00000005), propget, helpcontext(0x09860005)]
        HRESULT ChapterPageSeparator([out, retval] WdSeparatorType* prop);
        [id(0x00000005), propput, helpcontext(0x09860005)]
        HRESULT ChapterPageSeparator([in] WdSeparatorType prop);
        [id(0x00000006), propget, helpcontext(0x09860006)]
        HRESULT RestartNumberingAtSection([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x09860006)]
        HRESULT RestartNumberingAtSection([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09860007)]
        HRESULT StartingNumber([out, retval] long* prop);
        [id(0x00000007), propput, helpcontext(0x09860007)]
        HRESULT StartingNumber([in] long prop);
        [id(0x00000008), propget, helpcontext(0x09860008)]
        HRESULT ShowFirstPageNumber([out, retval] VARIANT_BOOL* prop);
        [id(0x00000008), propput, helpcontext(0x09860008)]
        HRESULT ShowFirstPageNumber([in] VARIANT_BOOL prop);
        [id(00000000), helpcontext(0x09860000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] PageNumber** prop);
        [id(0x00000065), helpcontext(0x09860065)]
        HRESULT Add(
                        [in, optional] VARIANT* PageNumberAlignment, 
                        [in, optional] VARIANT* FirstPage, 
                        [out, retval] PageNumber** prop);
        [id(0x0000000a), propget, helpcontext(0x0986000a)]
        HRESULT DoubleQuote([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000a), propput, helpcontext(0x0986000a)]
        HRESULT DoubleQuote([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(00020987-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000987),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PageNumber : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09870001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09870003)]
        HRESULT Alignment([out, retval] WdPageNumberAlignment* prop);
        [id(0x00000003), propput, helpcontext(0x09870003)]
        HRESULT Alignment([in] WdPageNumberAlignment prop);
        [id(0x0000ffff), helpcontext(0x0987ffff)]
        HRESULT Select();
        [id(0x00000065), helpcontext(0x09870065)]
        HRESULT Copy();
        [id(0x00000066), helpcontext(0x09870066)]
        HRESULT Cut();
        [id(0x00000067), helpcontext(0x09870067)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(00020988-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000988),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Subdocuments : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098803e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09880001)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x0988fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09880002)]
        HRESULT Expanded([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09880002)]
        HRESULT Expanded([in] VARIANT_BOOL prop);
        [id(00000000), helpcontext(0x09880000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Subdocument** prop);
        [id(0x00000064), helpcontext(0x09880064)]
        HRESULT AddFromFile(
                        [in] VARIANT* Name, 
                        [in, optional] VARIANT* ConfirmConversions, 
                        [in, optional] VARIANT* ReadOnly, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* Revert, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [out, retval] Subdocument** prop);
        [id(0x00000065), helpcontext(0x09880065)]
        HRESULT AddFromRange(
                        [in] Range* Range, 
                        [out, retval] Subdocument** prop);
        [id(0x00000066), helpcontext(0x09880066)]
        HRESULT Merge(
                        [in, optional] VARIANT* FirstSubdocument, 
                        [in, optional] VARIANT* LastSubdocument);
        [id(0x00000067), helpcontext(0x09880067)]
        HRESULT Delete();
        [id(0x00000068), helpcontext(0x09880068)]
        HRESULT Select();
    };

    [
      odl,
      uuid(00020989-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000989),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Subdocument : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09890001)]
        HRESULT Locked([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09890001)]
        HRESULT Locked([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x09890002)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000003), propget, helpcontext(0x09890003)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000004), propget, helpcontext(0x09890004)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000005), propget, helpcontext(0x09890005)]
        HRESULT HasFile([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propget, helpcontext(0x09890006)]
        HRESULT Level([out, retval] long* prop);
        [id(0x00000064), helpcontext(0x09890064)]
        HRESULT Delete();
        [id(0x00000065), helpcontext(0x09890065)]
        HRESULT Split([in] Range* Range);
        [id(0x00000066), helpcontext(0x09890066)]
        HRESULT Open([out, retval] _Document** prop);
    };

    [
      odl,
      uuid(0002098A-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000098a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HeadingStyles : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098a03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x098afffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x098a0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x098a0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] HeadingStyle** prop);
        [id(0x00000064), helpcontext(0x098a0064)]
        HRESULT Add(
                        [in] VARIANT* Style, 
                        [in] short Level, 
                        [out, retval] HeadingStyle** prop);
    };

    [
      odl,
      uuid(0002098B-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000098b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HeadingStyle : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098b03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x098b0000)]
        HRESULT Style([out, retval] VARIANT* prop);
        [id(00000000), propput, helpcontext(0x098b0000)]
        HRESULT Style([in] VARIANT* prop);
        [id(0x00000002), propget, helpcontext(0x098b0002)]
        HRESULT Level([out, retval] short* prop);
        [id(0x00000002), propput, helpcontext(0x098b0002)]
        HRESULT Level([in] short prop);
        [id(0x00000064), helpcontext(0x098b0064)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(0002098C-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000098c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface StoryRanges : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x098cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x098c0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x098c03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x098c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] WdStoryType Index, 
                        [out, retval] Range** prop);
    };

    [
      odl,
      uuid(0002098D-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000098d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListLevel : IDispatch {
        [id(0x00000001), propget, helpcontext(0x098d0001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x098d0002)]
        HRESULT NumberFormat([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x098d0002)]
        HRESULT NumberFormat([in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x098d0003)]
        HRESULT TrailingCharacter([out, retval] WdTrailingCharacter* prop);
        [id(0x00000003), propput, helpcontext(0x098d0003)]
        HRESULT TrailingCharacter([in] WdTrailingCharacter prop);
        [id(0x00000004), propget, helpcontext(0x098d0004)]
        HRESULT NumberStyle([out, retval] WdListNumberStyle* prop);
        [id(0x00000004), propput, helpcontext(0x098d0004)]
        HRESULT NumberStyle([in] WdListNumberStyle prop);
        [id(0x00000005), propget, helpcontext(0x098d0005)]
        HRESULT NumberPosition([out, retval] single* prop);
        [id(0x00000005), propput, helpcontext(0x098d0005)]
        HRESULT NumberPosition([in] single prop);
        [id(0x00000006), propget, helpcontext(0x098d0006)]
        HRESULT Alignment([out, retval] WdListLevelAlignment* prop);
        [id(0x00000006), propput, helpcontext(0x098d0006)]
        HRESULT Alignment([in] WdListLevelAlignment prop);
        [id(0x00000007), propget, helpcontext(0x098d0007)]
        HRESULT TextPosition([out, retval] single* prop);
        [id(0x00000007), propput, helpcontext(0x098d0007)]
        HRESULT TextPosition([in] single prop);
        [id(0x00000008), propget, helpcontext(0x098d0008)]
        HRESULT TabPosition([out, retval] single* prop);
        [id(0x00000008), propput, helpcontext(0x098d0008)]
        HRESULT TabPosition([in] single prop);
        [id(0x00000009), propget, hidden, helpcontext(0x098d0009)]
        HRESULT ResetOnHigherOld([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, hidden, helpcontext(0x098d0009)]
        HRESULT ResetOnHigherOld([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x098d000a)]
        HRESULT StartAt([out, retval] long* prop);
        [id(0x0000000a), propput, helpcontext(0x098d000a)]
        HRESULT StartAt([in] long prop);
        [id(0x0000000b), propget, helpcontext(0x098d000b)]
        HRESULT LinkedStyle([out, retval] BSTR* prop);
        [id(0x0000000b), propput, helpcontext(0x098d000b)]
        HRESULT LinkedStyle([in] BSTR prop);
        [id(0x0000000c), propget, helpcontext(0x098d000c)]
        HRESULT Font([out, retval] _Font** prop);
        [id(0x0000000c), propput, helpcontext(0x098d000c)]
        HRESULT Font([in] _Font* prop);
        [id(0x000003e8), propget, helpcontext(0x098d03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000d), propget, helpcontext(0x098d000d)]
        HRESULT ResetOnHigher([out, retval] long* prop);
        [id(0x0000000d), propput, helpcontext(0x098d000d)]
        HRESULT ResetOnHigher([in] long prop);
        [id(0x0000000e), propget, helpcontext(0x098d000e)]
        HRESULT PictureBullet([out, retval] InlineShape** prop);
        [id(00000000), helpcontext(0x098d0000)]
        HRESULT ApplyPictureBullet(
                        [in] BSTR FileName, 
                        [out, retval] InlineShape** prop);
    };

    [
      odl,
      uuid(0002098E-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000098e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListLevels : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x098efffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x098e0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x098e03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x098e0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] ListLevel** prop);
    };

    [
      odl,
      uuid(0002098F-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000098f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListTemplate : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098f03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098f03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098f03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x098f0001)]
        HRESULT OutlineNumbered([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x098f0001)]
        HRESULT OutlineNumbered([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x098f0003)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000003), propput, helpcontext(0x098f0003)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000002), propget, helpcontext(0x098f0002)]
        HRESULT ListLevels([out, retval] ListLevels** prop);
        [id(0x00000065), helpcontext(0x098f0065)]
        HRESULT Convert(
                        [in, optional] VARIANT* Level, 
                        [out, retval] ListTemplate** prop);
    };

    [
      odl,
      uuid(00020990-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000990),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListTemplates : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0990fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09900002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x099003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09900000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] ListTemplate** prop);
        [id(0x00000064), helpcontext(0x09900064)]
        HRESULT Add(
                        [in, optional] VARIANT* OutlineNumbered, 
                        [in, optional] VARIANT* Name, 
                        [out, retval] ListTemplate** prop);
    };

    [
      odl,
      uuid(00020991-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000991),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListParagraphs : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0991fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09910002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x099103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09910000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Paragraph** prop);
    };

    [
      odl,
      uuid(00020992-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000992),
      dual,
      nonextensible,
      oleautomation
    ]
    interface List : IDispatch {
        [id(0x00000001), propget, helpcontext(0x09920001)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000002), propget, helpcontext(0x09920002)]
        HRESULT ListParagraphs([out, retval] ListParagraphs** prop);
        [id(0x00000003), propget, helpcontext(0x09920003)]
        HRESULT SingleListTemplate([out, retval] VARIANT_BOOL* prop);
        [id(0x000003e8), propget, helpcontext(0x099203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000065), helpcontext(0x09920065)]
        HRESULT ConvertNumbersToText([in, optional] VARIANT* NumberType);
        [id(0x00000066), helpcontext(0x09920066)]
        HRESULT RemoveNumbers([in, optional] VARIANT* NumberType);
        [id(0x00000067), helpcontext(0x09920067)]
        HRESULT CountNumberedItems(
                        [in, optional] VARIANT* NumberType, 
                        [in, optional] VARIANT* Level, 
                        [out, retval] long* prop);
        [id(0x00000068), hidden, helpcontext(0x09920068)]
        HRESULT ApplyListTemplateOld(
                        [in] ListTemplate* ListTemplate, 
                        [in, optional] VARIANT* ContinuePreviousList);
        [id(0x00000069), helpcontext(0x09920069)]
        HRESULT CanContinuePreviousList(
                        [in] ListTemplate* ListTemplate, 
                        [out, retval] WdContinue* prop);
        [id(0x0000006a), helpcontext(0x0992006a)]
        HRESULT ApplyListTemplate(
                        [in] ListTemplate* ListTemplate, 
                        [in, optional] VARIANT* ContinuePreviousList, 
                        [in, optional] VARIANT* DefaultListBehavior);
        [id(0x00000004), propget, helpcontext(0x09920004)]
        HRESULT StyleName([out, retval] BSTR* prop);
        [id(0x0000006b), helpcontext(0x0992006b)]
        HRESULT ApplyListTemplateWithLevel(
                        [in] ListTemplate* ListTemplate, 
                        [in, optional] VARIANT* ContinuePreviousList, 
                        [in, optional] VARIANT* DefaultListBehavior, 
                        [in, optional] VARIANT* ApplyLevel);
    };

    [
      odl,
      uuid(00020993-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000993),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Lists : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0993fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09930002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x099303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09930000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] List** prop);
    };

    [
      odl,
      uuid(00020994-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000994),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListGallery : IDispatch {
        [id(0x00000001), propget, helpcontext(0x09940001)]
        HRESULT ListTemplates([out, retval] ListTemplates** prop);
        [id(0x000003e8), propget, helpcontext(0x099403e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000065), propget, helpcontext(0x09940065)]
        HRESULT Modified(
                        [in] long Index, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000064), helpcontext(0x09940064)]
        HRESULT Reset([in] long Index);
    };

    [
      odl,
      uuid(00020995-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000995),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ListGalleries : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0995fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09950002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x099503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09950000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] WdListGalleryType Index, 
                        [out, retval] ListGallery** prop);
    };

    [
      odl,
      uuid(00020996-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000996),
      dual,
      nonextensible,
      oleautomation
    ]
    interface KeyBindings : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x099603e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0996fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09960002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x0000000a), propget, helpcontext(0x0996000a)]
        HRESULT Context([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09960000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] KeyBinding** prop);
        [id(0x00000065), helpcontext(0x09960065)]
        HRESULT Add(
                        [in] WdKeyCategory KeyCategory, 
                        [in] BSTR Command, 
                        [in] long KeyCode, 
                        [in, optional] VARIANT* KeyCode2, 
                        [in, optional] VARIANT* CommandParameter, 
                        [out, retval] KeyBinding** prop);
        [id(0x00000066), helpcontext(0x09960066)]
        HRESULT ClearAll();
        [id(0x0000006e), helpcontext(0x0996006e)]
        HRESULT Key(
                        [in] long KeyCode, 
                        [in, optional] VARIANT* KeyCode2, 
                        [out, retval] KeyBinding** prop);
    };

    [
      odl,
      uuid(00020997-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000997),
      dual,
      nonextensible,
      oleautomation
    ]
    interface KeysBoundTo : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x099703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0997fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09970002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09970003)]
        HRESULT KeyCategory([out, retval] WdKeyCategory* prop);
        [id(0x00000004), propget, helpcontext(0x09970004)]
        HRESULT Command([out, retval] BSTR* prop);
        [id(0x00000005), propget, helpcontext(0x09970005)]
        HRESULT CommandParameter([out, retval] BSTR* prop);
        [id(0x0000000a), propget, helpcontext(0x0997000a)]
        HRESULT Context([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09970000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] KeyBinding** prop);
        [id(0x00000001), helpcontext(0x09970001)]
        HRESULT Key(
                        [in] long KeyCode, 
                        [in, optional] VARIANT* KeyCode2, 
                        [out, retval] KeyBinding** prop);
    };

    [
      odl,
      uuid(00020998-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000998),
      dual,
      nonextensible,
      oleautomation
    ]
    interface KeyBinding : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x099803e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09980001)]
        HRESULT Command([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x09980002)]
        HRESULT KeyString([out, retval] BSTR* prop);
        [id(0x00000003), propget, helpcontext(0x09980003)]
        HRESULT Protected([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propget, helpcontext(0x09980004)]
        HRESULT KeyCategory([out, retval] WdKeyCategory* prop);
        [id(0x00000006), propget, helpcontext(0x09980006)]
        HRESULT KeyCode([out, retval] long* prop);
        [id(0x00000007), propget, helpcontext(0x09980007)]
        HRESULT KeyCode2([out, retval] long* prop);
        [id(0x00000008), propget, helpcontext(0x09980008)]
        HRESULT CommandParameter([out, retval] BSTR* prop);
        [id(0x0000000a), propget, helpcontext(0x0998000a)]
        HRESULT Context([out, retval] IDispatch** prop);
        [id(0x00000065), helpcontext(0x09980065)]
        HRESULT Clear();
        [id(0x00000066), helpcontext(0x09980066)]
        HRESULT Disable();
        [id(0x00000067), helpcontext(0x09980067)]
        HRESULT Execute();
        [id(0x00000068), helpcontext(0x09980068)]
        HRESULT Rebind(
                        [in] WdKeyCategory KeyCategory, 
                        [in] BSTR Command, 
                        [in, optional] VARIANT* CommandParameter);
    };

    [
      odl,
      uuid(00020999-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x00000999),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FileConverter : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x099903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09990000)]
        HRESULT FormatName([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09990001)]
        HRESULT ClassName([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x09990002)]
        HRESULT SaveFormat([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09990003)]
        HRESULT OpenFormat([out, retval] long* prop);
        [id(0x00000004), propget, helpcontext(0x09990004)]
        HRESULT CanSave([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propget, helpcontext(0x09990005)]
        HRESULT CanOpen([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propget, helpcontext(0x09990006)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000007), propget, helpcontext(0x09990007)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000008), propget, helpcontext(0x09990008)]
        HRESULT Extensions([out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(0002099A-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000099a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FileConverters : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x099a03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x099a0001)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x099afffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x099a0002)]
        HRESULT ConvertMacWordChevrons([out, retval] WdChevronConvertRule* prop);
        [id(0x00000002), propput, helpcontext(0x099a0002)]
        HRESULT ConvertMacWordChevrons([in] WdChevronConvertRule prop);
        [id(00000000), helpcontext(0x099a0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] FileConverter** prop);
    };

    [
      odl,
      uuid(0002099B-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000099b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SynonymInfo : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x099b03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x099b0001)]
        HRESULT Word([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x099b0002)]
        HRESULT Found([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propget, helpcontext(0x099b0003)]
        HRESULT MeaningCount([out, retval] long* prop);
        [id(0x00000004), propget, helpcontext(0x099b0004)]
        HRESULT MeaningList([out, retval] VARIANT* prop);
        [id(0x00000005), propget, helpcontext(0x099b0005)]
        HRESULT PartOfSpeechList([out, retval] VARIANT* prop);
        [id(0x00000007), propget, helpcontext(0x099b0007)]
        HRESULT SynonymList(
                        [in] VARIANT* Meaning, 
                        [out, retval] VARIANT* prop);
        [id(0x00000008), propget, helpcontext(0x099b0008)]
        HRESULT AntonymList([out, retval] VARIANT* prop);
        [id(0x00000009), propget, helpcontext(0x099b0009)]
        HRESULT RelatedExpressionList([out, retval] VARIANT* prop);
        [id(0x0000000a), propget, helpcontext(0x099b000a)]
        HRESULT RelatedWordList([out, retval] VARIANT* prop);
    };

    [
      odl,
      uuid(0002099C-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000099c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Hyperlinks : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x099c03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x099c0001)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x099cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x099c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Hyperlink** prop);
        [id(0x00000064), hidden, helpcontext(0x099c0064)]
        HRESULT _Add(
                        [in] IDispatch* Anchor, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* SubAddress, 
                        [out, retval] Hyperlink** prop);
        [id(0x00000065), helpcontext(0x099c0065)]
        HRESULT Add(
                        [in] IDispatch* Anchor, 
                        [in, optional] VARIANT* Address, 
                        [in, optional] VARIANT* SubAddress, 
                        [in, optional] VARIANT* ScreenTip, 
                        [in, optional] VARIANT* TextToDisplay, 
                        [in, optional] VARIANT* Target, 
                        [out, retval] Hyperlink** prop);
    };

    [
      odl,
      uuid(0002099D-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000099d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Hyperlink : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x099d03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x099d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x099d03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), propget, helpcontext(0x099d03eb)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000003ec), propget, hidden, helpcontext(0x099d03ec)]
        HRESULT AddressOld([out, retval] BSTR* prop);
        [id(0x000003ed), propget, helpcontext(0x099d03ed)]
        HRESULT Type([out, retval] MsoHyperlinkType* prop);
        [id(0x000003ee), propget, helpcontext(0x099d03ee)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x000003ef), propget, helpcontext(0x099d03ef)]
        HRESULT Shape([out, retval] Shape** prop);
        [id(0x000003f0), propget, hidden, helpcontext(0x099d03f0)]
        HRESULT SubAddressOld([out, retval] BSTR* prop);
        [id(0x000003f1), propget, helpcontext(0x099d03f1)]
        HRESULT ExtraInfoRequired([out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), helpcontext(0x099d0067)]
        HRESULT Delete();
        [id(0x00000068), helpcontext(0x099d0068)]
        HRESULT Follow(
                        [in, optional] VARIANT* NewWindow, 
                        [in, optional] VARIANT* AddHistory, 
                        [in, optional] VARIANT* ExtraInfo, 
                        [in, optional] VARIANT* Method, 
                        [in, optional] VARIANT* HeaderInfo);
        [id(0x00000069), helpcontext(0x099d0069)]
        HRESULT AddToFavorites();
        [id(0x0000006a), helpcontext(0x099d006a)]
        HRESULT CreateNewDocument(
                        [in] BSTR FileName, 
                        [in] VARIANT_BOOL EditNow, 
                        [in] VARIANT_BOOL Overwrite);
        [id(0x0000044c), propget, helpcontext(0x099d044c)]
        HRESULT Address([out, retval] BSTR* prop);
        [id(0x0000044c), propput, helpcontext(0x099d044c)]
        HRESULT Address([in] BSTR prop);
        [id(0x0000044d), propget, helpcontext(0x099d044d)]
        HRESULT SubAddress([out, retval] BSTR* prop);
        [id(0x0000044d), propput, helpcontext(0x099d044d)]
        HRESULT SubAddress([in] BSTR prop);
        [id(0x000003f2), propget, helpcontext(0x099d03f2)]
        HRESULT EmailSubject([out, retval] BSTR* prop);
        [id(0x000003f2), propput, helpcontext(0x099d03f2)]
        HRESULT EmailSubject([in] BSTR prop);
        [id(0x000003f3), propget, helpcontext(0x099d03f3)]
        HRESULT ScreenTip([out, retval] BSTR* prop);
        [id(0x000003f3), propput, helpcontext(0x099d03f3)]
        HRESULT ScreenTip([in] BSTR prop);
        [id(0x000003f4), propget, helpcontext(0x099d03f4)]
        HRESULT TextToDisplay([out, retval] BSTR* prop);
        [id(0x000003f4), propput, helpcontext(0x099d03f4)]
        HRESULT TextToDisplay([in] BSTR prop);
        [id(0x000003f5), propget, helpcontext(0x099d03f5)]
        HRESULT Target([out, retval] BSTR* prop);
        [id(0x000003f5), propput, helpcontext(0x099d03f5)]
        HRESULT Target([in] BSTR prop);
    };

    [
      odl,
      uuid(0002099F-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x0000099f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Shapes : IDispatch {
        [id(0x00001f40), propget, helpcontext(0x099f1f40)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00001f41), propget, helpcontext(0x099f1f41)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x099f0001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x099f0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x099ffffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x099f0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Shape** prop);
        [id(0x0000000a), helpcontext(0x099f000a)]
        HRESULT AddCallout(
                        [in] MsoCalloutType Type, 
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x0000000b), hidden, helpcontext(0x099f000b)]
        HRESULT AddConnector(
                        [in] MsoConnectorType Type, 
                        [in] single BeginX, 
                        [in] single BeginY, 
                        [in] single EndX, 
                        [in] single EndY, 
                        [out, retval] Shape** prop);
        [id(0x0000000c), helpcontext(0x099f000c)]
        HRESULT AddCurve(
                        [in] VARIANT* SafeArrayOfPoints, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x0000000d), helpcontext(0x099f000d)]
        HRESULT AddLabel(
                        [in] MsoTextOrientation Orientation, 
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x0000000e), helpcontext(0x099f000e)]
        HRESULT AddLine(
                        [in] single BeginX, 
                        [in] single BeginY, 
                        [in] single EndX, 
                        [in] single EndY, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x0000000f), helpcontext(0x099f000f)]
        HRESULT AddPicture(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* LinkToFile, 
                        [in, optional] VARIANT* SaveWithDocument, 
                        [in, optional] VARIANT* Left, 
                        [in, optional] VARIANT* Top, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000010), helpcontext(0x099f0010)]
        HRESULT AddPolyline(
                        [in] VARIANT* SafeArrayOfPoints, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000011), helpcontext(0x099f0011)]
        HRESULT AddShape(
                        [in] long Type, 
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000012), helpcontext(0x099f0012)]
        HRESULT AddTextEffect(
                        [in] MsoPresetTextEffect PresetTextEffect, 
                        [in] BSTR Text, 
                        [in] BSTR FontName, 
                        [in] single FontSize, 
                        [in] MsoTriState FontBold, 
                        [in] MsoTriState FontItalic, 
                        [in] single Left, 
                        [in] single Top, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000013), helpcontext(0x099f0013)]
        HRESULT AddTextbox(
                        [in] MsoTextOrientation Orientation, 
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000014), helpcontext(0x099f0014)]
        HRESULT BuildFreeform(
                        [in] MsoEditingType EditingType, 
                        [in] single X1, 
                        [in] single Y1, 
                        [out, retval] FreeformBuilder** prop);
        [id(0x00000015), helpcontext(0x099f0015)]
        HRESULT Range(
                        [in] VARIANT* Index, 
                        [out, retval] ShapeRange** prop);
        [id(0x00000016), helpcontext(0x099f0016)]
        HRESULT SelectAll();
        [id(0x00000018), helpcontext(0x099f0018)]
        HRESULT AddOLEObject(
                        [in, optional] VARIANT* ClassType, 
                        [in, optional] VARIANT* FileName, 
                        [in, optional] VARIANT* LinkToFile, 
                        [in, optional] VARIANT* DisplayAsIcon, 
                        [in, optional] VARIANT* IconFileName, 
                        [in, optional] VARIANT* IconIndex, 
                        [in, optional] VARIANT* IconLabel, 
                        [in, optional] VARIANT* Left, 
                        [in, optional] VARIANT* Top, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000066), helpcontext(0x099f0066)]
        HRESULT AddOLEControl(
                        [in, optional] VARIANT* ClassType, 
                        [in, optional] VARIANT* Left, 
                        [in, optional] VARIANT* Top, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000017), hidden, helpcontext(0x099f0017)]
        HRESULT AddDiagram(
                        [in] MsoDiagramType Type, 
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000019), helpcontext(0x099f0019)]
        HRESULT AddCanvas(
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000067), hidden, helpcontext(0x099f0067)]
        HRESULT AddChart(
                        [in, optional, defaultvalue(-1)] XlChartType Type, 
                        [in, optional] VARIANT* Left, 
                        [in, optional] VARIANT* Top, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x0000001c), helpcontext(0x099f001c)]
        HRESULT AddSmartArt(
                        [in] SmartArtLayout* Layout, 
                        [in, optional] VARIANT* Left, 
                        [in, optional] VARIANT* Top, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000068), helpcontext(0x099f0068)]
        HRESULT AddWebVideo(
                        [in] BSTR EmbedCode, 
                        [in] VARIANT* VideoWidth, 
                        [in] VARIANT* VideoHeight, 
                        [in, optional] VARIANT* PosterFrameImage, 
                        [in, optional] VARIANT* Url, 
                        [in, optional] VARIANT* Left, 
                        [in, optional] VARIANT* Top, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
        [id(0x00000069), helpcontext(0x099f0069)]
        HRESULT AddChart2(
                        [in, optional, defaultvalue(-1)] long Style, 
                        [in, optional, defaultvalue(-1)] XlChartType Type, 
                        [in, optional] VARIANT* Left, 
                        [in, optional] VARIANT* Top, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* Height, 
                        [in, optional] VARIANT* Anchor, 
                        [in, optional] VARIANT* NewLayout, 
                        [out, retval] Shape** prop);
    };

    [
      odl,
      uuid(000209B5-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009b5),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShapeRange : IDispatch {
        [id(0x00001f40), propget, helpcontext(0x09b51f40)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00001f41), propget, helpcontext(0x09b51f41)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09b50001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x09b50002)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x09b5fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000064), propget, helpcontext(0x09b50064)]
        HRESULT Adjustments([out, retval] Adjustments** prop);
        [id(0x00000065), propget, helpcontext(0x09b50065)]
        HRESULT AutoShapeType([out, retval] MsoAutoShapeType* prop);
        [id(0x00000065), propput, helpcontext(0x09b50065)]
        HRESULT AutoShapeType([in] MsoAutoShapeType prop);
        [id(0x00000067), propget, helpcontext(0x09b50067)]
        HRESULT Callout([out, retval] CalloutFormat** prop);
        [id(0x00000068), propget, hidden, helpcontext(0x09b50068)]
        HRESULT ConnectionSiteCount([out, retval] long* prop);
        [id(0x00000069), propget, hidden, helpcontext(0x09b50069)]
        HRESULT Connector([out, retval] MsoTriState* prop);
        [id(0x0000006a), propget, hidden, helpcontext(0x09b5006a)]
        HRESULT ConnectorFormat([out, retval] ConnectorFormat** prop);
        [id(0x0000006b), propget, helpcontext(0x09b5006b)]
        HRESULT Fill([out, retval] FillFormat** prop);
        [id(0x0000006c), propget, helpcontext(0x09b5006c)]
        HRESULT GroupItems([out, retval] GroupShapes** prop);
        [id(0x0000006d), propget, helpcontext(0x09b5006d)]
        HRESULT Height([out, retval] single* prop);
        [id(0x0000006d), propput, helpcontext(0x09b5006d)]
        HRESULT Height([in] single prop);
        [id(0x0000006e), propget, helpcontext(0x09b5006e)]
        HRESULT HorizontalFlip([out, retval] MsoTriState* prop);
        [id(0x0000006f), propget, helpcontext(0x09b5006f)]
        HRESULT Left([out, retval] single* prop);
        [id(0x0000006f), propput, helpcontext(0x09b5006f)]
        HRESULT Left([in] single prop);
        [id(0x00000070), propget, helpcontext(0x09b50070)]
        HRESULT Line([out, retval] LineFormat** prop);
        [id(0x00000071), propget, helpcontext(0x09b50071)]
        HRESULT LockAspectRatio([out, retval] MsoTriState* prop);
        [id(0x00000071), propput, helpcontext(0x09b50071)]
        HRESULT LockAspectRatio([in] MsoTriState prop);
        [id(0x00000073), propget, helpcontext(0x09b50073)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000073), propput, helpcontext(0x09b50073)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000074), propget, helpcontext(0x09b50074)]
        HRESULT Nodes([out, retval] ShapeNodes** prop);
        [id(0x00000075), propget, helpcontext(0x09b50075)]
        HRESULT Rotation([out, retval] single* prop);
        [id(0x00000075), propput, helpcontext(0x09b50075)]
        HRESULT Rotation([in] single prop);
        [id(0x00000076), propget, helpcontext(0x09b50076)]
        HRESULT PictureFormat([out, retval] PictureFormat** prop);
        [id(0x00000077), propget, helpcontext(0x09b50077)]
        HRESULT Shadow([out, retval] ShadowFormat** prop);
        [id(0x00000078), propget, helpcontext(0x09b50078)]
        HRESULT TextEffect([out, retval] TextEffectFormat** prop);
        [id(0x00000079), propget, helpcontext(0x09b50079)]
        HRESULT TextFrame([out, retval] TextFrame** prop);
        [id(0x0000007a), propget, helpcontext(0x09b5007a)]
        HRESULT ThreeD([out, retval] ThreeDFormat** prop);
        [id(0x0000007b), propget, helpcontext(0x09b5007b)]
        HRESULT Top([out, retval] single* prop);
        [id(0x0000007b), propput, helpcontext(0x09b5007b)]
        HRESULT Top([in] single prop);
        [id(0x0000007c), propget, helpcontext(0x09b5007c)]
        HRESULT Type([out, retval] MsoShapeType* prop);
        [id(0x0000007d), propget, helpcontext(0x09b5007d)]
        HRESULT VerticalFlip([out, retval] MsoTriState* prop);
        [id(0x0000007e), propget, helpcontext(0x09b5007e)]
        HRESULT Vertices([out, retval] VARIANT* prop);
        [id(0x0000007f), propget, helpcontext(0x09b5007f)]
        HRESULT Visible([out, retval] MsoTriState* prop);
        [id(0x0000007f), propput, helpcontext(0x09b5007f)]
        HRESULT Visible([in] MsoTriState prop);
        [id(0x00000080), propget, helpcontext(0x09b50080)]
        HRESULT Width([out, retval] single* prop);
        [id(0x00000080), propput, helpcontext(0x09b50080)]
        HRESULT Width([in] single prop);
        [id(0x00000081), propget, helpcontext(0x09b50081)]
        HRESULT ZOrderPosition([out, retval] long* prop);
        [id(0x000003e9), propget, helpcontext(0x09b503e9)]
        HRESULT Hyperlink([out, retval] Hyperlink** prop);
        [id(0x0000012c), propget, helpcontext(0x09b5012c)]
        HRESULT RelativeHorizontalPosition([out, retval] WdRelativeHorizontalPosition* prop);
        [id(0x0000012c), propput, helpcontext(0x09b5012c)]
        HRESULT RelativeHorizontalPosition([in] WdRelativeHorizontalPosition prop);
        [id(0x0000012d), propget, helpcontext(0x09b5012d)]
        HRESULT RelativeVerticalPosition([out, retval] WdRelativeVerticalPosition* prop);
        [id(0x0000012d), propput, helpcontext(0x09b5012d)]
        HRESULT RelativeVerticalPosition([in] WdRelativeVerticalPosition prop);
        [id(0x0000012e), propget, helpcontext(0x09b5012e)]
        HRESULT LockAnchor([out, retval] long* prop);
        [id(0x0000012e), propput, helpcontext(0x09b5012e)]
        HRESULT LockAnchor([in] long prop);
        [id(0x0000012f), propget, helpcontext(0x09b5012f)]
        HRESULT WrapFormat([out, retval] WrapFormat** prop);
        [id(0x00000130), propget, helpcontext(0x09b50130)]
        HRESULT Anchor([out, retval] Range** prop);
        [id(00000000), helpcontext(0x09b50000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Shape** prop);
        [id(0x0000000a), helpcontext(0x09b5000a)]
        HRESULT Align(
                        [in] MsoAlignCmd Align, 
                        [in] long RelativeTo);
        [id(0x0000000b), helpcontext(0x09b5000b)]
        HRESULT Apply();
        [id(0x0000000c), helpcontext(0x09b5000c)]
        HRESULT Delete();
        [id(0x0000000d), helpcontext(0x09b5000d)]
        HRESULT Distribute(
                        [in] MsoDistributeCmd Distribute, 
                        [in] long RelativeTo);
        [id(0x0000000e), helpcontext(0x09b5000e)]
        HRESULT Duplicate([out, retval] ShapeRange** prop);
        [id(0x0000000f), helpcontext(0x09b5000f)]
        HRESULT Flip([in] MsoFlipCmd FlipCmd);
        [id(0x00000010), helpcontext(0x09b50010)]
        HRESULT IncrementLeft([in] single Increment);
        [id(0x00000011), helpcontext(0x09b50011)]
        HRESULT IncrementRotation([in] single Increment);
        [id(0x00000012), helpcontext(0x09b50012)]
        HRESULT IncrementTop([in] single Increment);
        [id(0x00000013), helpcontext(0x09b50013)]
        HRESULT Group([out, retval] Shape** prop);
        [id(0x00000014), helpcontext(0x09b50014)]
        HRESULT PickUp();
        [id(0x00000015), hidden, helpcontext(0x09b50015)]
        HRESULT Regroup([out, retval] Shape** prop);
        [id(0x00000016), hidden, helpcontext(0x09b50016)]
        HRESULT RerouteConnections();
        [id(0x00000017), helpcontext(0x09b50017)]
        HRESULT ScaleHeight(
                        [in] single Factor, 
                        [in] MsoTriState RelativeToOriginalSize, 
                        [in, optional, defaultvalue(0)] MsoScaleFrom Scale);
        [id(0x00000018), helpcontext(0x09b50018)]
        HRESULT ScaleWidth(
                        [in] single Factor, 
                        [in] MsoTriState RelativeToOriginalSize, 
                        [in, optional, defaultvalue(0)] MsoScaleFrom Scale);
        [id(0x00000019), helpcontext(0x09b50019)]
        HRESULT Select([in, optional] VARIANT* Replace);
        [id(0x0000001a), helpcontext(0x09b5001a)]
        HRESULT SetShapesDefaultProperties();
        [id(0x0000001b), helpcontext(0x09b5001b)]
        HRESULT Ungroup([out, retval] ShapeRange** prop);
        [id(0x0000001c), helpcontext(0x09b5001c)]
        HRESULT ZOrder([in] MsoZOrderCmd ZOrderCmd);
        [id(0x0000001d), hidden, helpcontext(0x09b5001d)]
        HRESULT ConvertToFrame([out, retval] Frame** prop);
        [id(0x0000001e), helpcontext(0x09b5001e)]
        HRESULT ConvertToInlineShape([out, retval] InlineShape** prop);
        [id(0x00000032), hidden, helpcontext(0x09b50032)]
        HRESULT Activate();
        [id(0x00000083), propget, helpcontext(0x09b50083)]
        HRESULT AlternativeText([out, retval] BSTR* prop);
        [id(0x00000083), propput, helpcontext(0x09b50083)]
        HRESULT AlternativeText([in] BSTR prop);
        [id(0x00000084), propget, hidden, helpcontext(0x09b50084)]
        HRESULT HasDiagram([out, retval] MsoTriState* prop);
        [id(0x00000085), propget, hidden, helpcontext(0x09b50085)]
        HRESULT Diagram([out, retval] IMsoDiagram** prop);
        [id(0x00000086), propget, hidden, helpcontext(0x09b50086)]
        HRESULT HasDiagramNode([out, retval] MsoTriState* prop);
        [id(0x00000087), propget, hidden, helpcontext(0x09b50087)]
        HRESULT DiagramNode([out, retval] DiagramNode** prop);
        [id(0x00000088), propget, helpcontext(0x09b50088)]
        HRESULT Child([out, retval] MsoTriState* prop);
        [id(0x00000089), propget, helpcontext(0x09b50089)]
        HRESULT ParentGroup([out, retval] Shape** prop);
        [id(0x0000008a), propget, helpcontext(0x09b5008a)]
        HRESULT CanvasItems([out, retval] CanvasShapes** prop);
        [id(0x0000008b), propget, helpcontext(0x09b5008b)]
        HRESULT ID([out, retval] long* prop);
        [id(0x0000008c), helpcontext(0x09b5008c)]
        HRESULT CanvasCropLeft([in] single Increment);
        [id(0x0000008d), helpcontext(0x09b5008d)]
        HRESULT CanvasCropTop([in] single Increment);
        [id(0x0000008e), helpcontext(0x09b5008e)]
        HRESULT CanvasCropRight([in] single Increment);
        [id(0x0000008f), helpcontext(0x09b5008f)]
        HRESULT CanvasCropBottom([in] single Increment);
        [id(0x00000090), propput, hidden, helpcontext(0x09b50090)]
        HRESULT RTF([in] BSTR rhs);
        [id(0x00000091), propget, helpcontext(0x09b50091)]
        HRESULT LayoutInCell([out, retval] long* prop);
        [id(0x00000091), propput, helpcontext(0x09b50091)]
        HRESULT LayoutInCell([in] long prop);
        [id(0x000000c8), propget, helpcontext(0x09b500c8)]
        HRESULT LeftRelative([out, retval] single* prop);
        [id(0x000000c8), propput, helpcontext(0x09b500c8)]
        HRESULT LeftRelative([in] single prop);
        [id(0x000000c9), propget, helpcontext(0x09b500c9)]
        HRESULT TopRelative([out, retval] single* prop);
        [id(0x000000c9), propput, helpcontext(0x09b500c9)]
        HRESULT TopRelative([in] single prop);
        [id(0x000000ca), propget, helpcontext(0x09b500ca)]
        HRESULT WidthRelative([out, retval] single* prop);
        [id(0x000000ca), propput, helpcontext(0x09b500ca)]
        HRESULT WidthRelative([in] single prop);
        [id(0x000000cb), propget, helpcontext(0x09b500cb)]
        HRESULT HeightRelative([out, retval] single* prop);
        [id(0x000000cb), propput, helpcontext(0x09b500cb)]
        HRESULT HeightRelative([in] single prop);
        [id(0x000000cc), propget, helpcontext(0x09b500cc)]
        HRESULT RelativeHorizontalSize([out, retval] WdRelativeHorizontalSize* prop);
        [id(0x000000cc), propput, helpcontext(0x09b500cc)]
        HRESULT RelativeHorizontalSize([in] WdRelativeHorizontalSize prop);
        [id(0x000000cd), propget, helpcontext(0x09b500cd)]
        HRESULT RelativeVerticalSize([out, retval] WdRelativeVerticalSize* prop);
        [id(0x000000cd), propput, helpcontext(0x09b500cd)]
        HRESULT RelativeVerticalSize([in] WdRelativeVerticalSize prop);
        [id(0x00000098), propget, helpcontext(0x09b50098)]
        HRESULT SoftEdge([out, retval] SoftEdgeFormat** prop);
        [id(0x00000099), propget, helpcontext(0x09b50099)]
        HRESULT Glow([out, retval] GlowFormat** prop);
        [id(0x0000009a), propget, helpcontext(0x09b5009a)]
        HRESULT Reflection([out, retval] ReflectionFormat** prop);
        [id(0x0000009b), propget, helpcontext(0x09b5009b)]
        HRESULT TextFrame2([out, retval] TextFrame2** prop);
        [id(0x00000096), propget, helpcontext(0x09b50096)]
        HRESULT ShapeStyle([out, retval] MsoShapeStyleIndex* prop);
        [id(0x00000096), propput, helpcontext(0x09b50096)]
        HRESULT ShapeStyle([in] MsoShapeStyleIndex prop);
        [id(0x00000097), propget, helpcontext(0x09b50097)]
        HRESULT BackgroundStyle([out, retval] MsoBackgroundStyleIndex* prop);
        [id(0x00000097), propput, helpcontext(0x09b50097)]
        HRESULT BackgroundStyle([in] MsoBackgroundStyleIndex prop);
        [id(0x000000ce), propget, helpcontext(0x09b500ce)]
        HRESULT Title([out, retval] BSTR* prop);
        [id(0x000000ce), propput, helpcontext(0x09b500ce)]
        HRESULT Title([in] BSTR prop);
    };

    [
      odl,
      uuid(000209B6-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009b6),
      dual,
      nonextensible,
      oleautomation
    ]
    interface GroupShapes : IDispatch {
        [id(0x00001f40), propget, helpcontext(0x09b61f40)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00001f41), propget, helpcontext(0x09b61f41)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09b60001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x09b60002)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x09b6fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x09b60000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Shape** prop);
        [id(0x0000000a), helpcontext(0x09b6000a)]
        HRESULT Range(
                        [in] VARIANT* Index, 
                        [out, retval] ShapeRange** prop);
    };

    [
      odl,
      uuid(000209A0-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009a0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Shape : IDispatch {
        [id(0x00001f40), propget, helpcontext(0x09a01f40)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00001f41), propget, helpcontext(0x09a01f41)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09a00001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09a00064)]
        HRESULT Adjustments([out, retval] Adjustments** prop);
        [id(0x00000065), propget, helpcontext(0x09a00065)]
        HRESULT AutoShapeType([out, retval] MsoAutoShapeType* prop);
        [id(0x00000065), propput, helpcontext(0x09a00065)]
        HRESULT AutoShapeType([in] MsoAutoShapeType prop);
        [id(0x00000067), propget, helpcontext(0x09a00067)]
        HRESULT Callout([out, retval] CalloutFormat** prop);
        [id(0x00000068), propget, hidden, helpcontext(0x09a00068)]
        HRESULT ConnectionSiteCount([out, retval] long* prop);
        [id(0x00000069), propget, hidden, helpcontext(0x09a00069)]
        HRESULT Connector([out, retval] MsoTriState* prop);
        [id(0x0000006a), propget, hidden, helpcontext(0x09a0006a)]
        HRESULT ConnectorFormat([out, retval] ConnectorFormat** prop);
        [id(0x0000006b), propget, helpcontext(0x09a0006b)]
        HRESULT Fill([out, retval] FillFormat** prop);
        [id(0x0000006c), propget, helpcontext(0x09a0006c)]
        HRESULT GroupItems([out, retval] GroupShapes** prop);
        [id(0x0000006d), propget, helpcontext(0x09a0006d)]
        HRESULT Height([out, retval] single* prop);
        [id(0x0000006d), propput, helpcontext(0x09a0006d)]
        HRESULT Height([in] single prop);
        [id(0x0000006e), propget, helpcontext(0x09a0006e)]
        HRESULT HorizontalFlip([out, retval] MsoTriState* prop);
        [id(0x0000006f), propget, helpcontext(0x09a0006f)]
        HRESULT Left([out, retval] single* prop);
        [id(0x0000006f), propput, helpcontext(0x09a0006f)]
        HRESULT Left([in] single prop);
        [id(0x00000070), propget, helpcontext(0x09a00070)]
        HRESULT Line([out, retval] LineFormat** prop);
        [id(0x00000071), propget, helpcontext(0x09a00071)]
        HRESULT LockAspectRatio([out, retval] MsoTriState* prop);
        [id(0x00000071), propput, helpcontext(0x09a00071)]
        HRESULT LockAspectRatio([in] MsoTriState prop);
        [id(0x00000073), propget, helpcontext(0x09a00073)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000073), propput, helpcontext(0x09a00073)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000074), propget, helpcontext(0x09a00074)]
        HRESULT Nodes([out, retval] ShapeNodes** prop);
        [id(0x00000075), propget, helpcontext(0x09a00075)]
        HRESULT Rotation([out, retval] single* prop);
        [id(0x00000075), propput, helpcontext(0x09a00075)]
        HRESULT Rotation([in] single prop);
        [id(0x00000076), propget, helpcontext(0x09a00076)]
        HRESULT PictureFormat([out, retval] PictureFormat** prop);
        [id(0x00000077), propget, helpcontext(0x09a00077)]
        HRESULT Shadow([out, retval] ShadowFormat** prop);
        [id(0x00000078), propget, helpcontext(0x09a00078)]
        HRESULT TextEffect([out, retval] TextEffectFormat** prop);
        [id(0x00000079), propget, helpcontext(0x09a00079)]
        HRESULT TextFrame([out, retval] TextFrame** prop);
        [id(0x0000007a), propget, helpcontext(0x09a0007a)]
        HRESULT ThreeD([out, retval] ThreeDFormat** prop);
        [id(0x0000007b), propget, helpcontext(0x09a0007b)]
        HRESULT Top([out, retval] single* prop);
        [id(0x0000007b), propput, helpcontext(0x09a0007b)]
        HRESULT Top([in] single prop);
        [id(0x0000007c), propget, helpcontext(0x09a0007c)]
        HRESULT Type([out, retval] MsoShapeType* prop);
        [id(0x0000007d), propget, helpcontext(0x09a0007d)]
        HRESULT VerticalFlip([out, retval] MsoTriState* prop);
        [id(0x0000007e), propget, helpcontext(0x09a0007e)]
        HRESULT Vertices([out, retval] VARIANT* prop);
        [id(0x0000007f), propget, helpcontext(0x09a0007f)]
        HRESULT Visible([out, retval] MsoTriState* prop);
        [id(0x0000007f), propput, helpcontext(0x09a0007f)]
        HRESULT Visible([in] MsoTriState prop);
        [id(0x00000080), propget, helpcontext(0x09a00080)]
        HRESULT Width([out, retval] single* prop);
        [id(0x00000080), propput, helpcontext(0x09a00080)]
        HRESULT Width([in] single prop);
        [id(0x00000081), propget, helpcontext(0x09a00081)]
        HRESULT ZOrderPosition([out, retval] long* prop);
        [id(0x000003e9), propget, helpcontext(0x09a003e9)]
        HRESULT Hyperlink([out, retval] Hyperlink** prop);
        [id(0x0000012c), propget, helpcontext(0x09a0012c)]
        HRESULT RelativeHorizontalPosition([out, retval] WdRelativeHorizontalPosition* prop);
        [id(0x0000012c), propput, helpcontext(0x09a0012c)]
        HRESULT RelativeHorizontalPosition([in] WdRelativeHorizontalPosition prop);
        [id(0x0000012d), propget, helpcontext(0x09a0012d)]
        HRESULT RelativeVerticalPosition([out, retval] WdRelativeVerticalPosition* prop);
        [id(0x0000012d), propput, helpcontext(0x09a0012d)]
        HRESULT RelativeVerticalPosition([in] WdRelativeVerticalPosition prop);
        [id(0x0000012e), propget, helpcontext(0x09a0012e)]
        HRESULT LockAnchor([out, retval] long* prop);
        [id(0x0000012e), propput, helpcontext(0x09a0012e)]
        HRESULT LockAnchor([in] long prop);
        [id(0x0000012f), propget, helpcontext(0x09a0012f)]
        HRESULT WrapFormat([out, retval] WrapFormat** prop);
        [id(0x000001f4), propget, helpcontext(0x09a001f4)]
        HRESULT OLEFormat([out, retval] OLEFormat** prop);
        [id(0x000001f5), propget, helpcontext(0x09a001f5)]
        HRESULT Anchor([out, retval] Range** prop);
        [id(0x000001f6), propget, helpcontext(0x09a001f6)]
        HRESULT LinkFormat([out, retval] LinkFormat** prop);
        [id(0x0000000a), helpcontext(0x09a0000a)]
        HRESULT Apply();
        [id(0x0000000b), helpcontext(0x09a0000b)]
        HRESULT Delete();
        [id(0x0000000c), helpcontext(0x09a0000c)]
        HRESULT Duplicate([out, retval] Shape** prop);
        [id(0x0000000d), helpcontext(0x09a0000d)]
        HRESULT Flip([in] MsoFlipCmd FlipCmd);
        [id(0x0000000e), helpcontext(0x09a0000e)]
        HRESULT IncrementLeft([in] single Increment);
        [id(0x0000000f), helpcontext(0x09a0000f)]
        HRESULT IncrementRotation([in] single Increment);
        [id(0x00000010), helpcontext(0x09a00010)]
        HRESULT IncrementTop([in] single Increment);
        [id(0x00000011), helpcontext(0x09a00011)]
        HRESULT PickUp();
        [id(0x00000012), hidden, helpcontext(0x09a00012)]
        HRESULT RerouteConnections();
        [id(0x00000013), helpcontext(0x09a00013)]
        HRESULT ScaleHeight(
                        [in] single Factor, 
                        [in] MsoTriState RelativeToOriginalSize, 
                        [in, optional, defaultvalue(0)] MsoScaleFrom Scale);
        [id(0x00000014), helpcontext(0x09a00014)]
        HRESULT ScaleWidth(
                        [in] single Factor, 
                        [in] MsoTriState RelativeToOriginalSize, 
                        [in, optional, defaultvalue(0)] MsoScaleFrom Scale);
        [id(0x00000015), helpcontext(0x09a00015)]
        HRESULT Select([in, optional] VARIANT* Replace);
        [id(0x00000016), helpcontext(0x09a00016)]
        HRESULT SetShapesDefaultProperties();
        [id(0x00000017), helpcontext(0x09a00017)]
        HRESULT Ungroup([out, retval] ShapeRange** prop);
        [id(0x00000018), helpcontext(0x09a00018)]
        HRESULT ZOrder([in] MsoZOrderCmd ZOrderCmd);
        [id(0x00000019), helpcontext(0x09a00019)]
        HRESULT ConvertToInlineShape([out, retval] InlineShape** prop);
        [id(0x0000001d), hidden, helpcontext(0x09a0001d)]
        HRESULT ConvertToFrame([out, retval] Frame** prop);
        [id(0x00000032), hidden, helpcontext(0x09a00032)]
        HRESULT Activate();
        [id(0x00000083), propget, helpcontext(0x09a00083)]
        HRESULT AlternativeText([out, retval] BSTR* prop);
        [id(0x00000083), propput, helpcontext(0x09a00083)]
        HRESULT AlternativeText([in] BSTR prop);
        [id(0x000001f7), propget, helpcontext(0x09a001f7)]
        HRESULT Script([out, retval] Script** prop);
        [id(0x00000084), propget, hidden, helpcontext(0x09a00084)]
        HRESULT HasDiagram([out, retval] MsoTriState* prop);
        [id(0x00000085), propget, hidden, helpcontext(0x09a00085)]
        HRESULT Diagram([out, retval] IMsoDiagram** prop);
        [id(0x00000086), propget, hidden, helpcontext(0x09a00086)]
        HRESULT HasDiagramNode([out, retval] MsoTriState* prop);
        [id(0x00000087), propget, hidden, helpcontext(0x09a00087)]
        HRESULT DiagramNode([out, retval] DiagramNode** prop);
        [id(0x00000088), propget, helpcontext(0x09a00088)]
        HRESULT Child([out, retval] MsoTriState* prop);
        [id(0x00000089), propget, helpcontext(0x09a00089)]
        HRESULT ParentGroup([out, retval] Shape** prop);
        [id(0x0000008a), propget, helpcontext(0x09a0008a)]
        HRESULT CanvasItems([out, retval] CanvasShapes** prop);
        [id(0x0000008b), propget, helpcontext(0x09a0008b)]
        HRESULT ID([out, retval] long* prop);
        [id(0x0000008c), helpcontext(0x09a0008c)]
        HRESULT CanvasCropLeft([in] single Increment);
        [id(0x0000008d), helpcontext(0x09a0008d)]
        HRESULT CanvasCropTop([in] single Increment);
        [id(0x0000008e), helpcontext(0x09a0008e)]
        HRESULT CanvasCropRight([in] single Increment);
        [id(0x0000008f), helpcontext(0x09a0008f)]
        HRESULT CanvasCropBottom([in] single Increment);
        [id(0x00000090), propput, hidden, helpcontext(0x09a00090)]
        HRESULT RTF([in] BSTR rhs);
        [id(0x00000091), propget, helpcontext(0x09a00091)]
        HRESULT LayoutInCell([out, retval] long* prop);
        [id(0x00000091), propput, helpcontext(0x09a00091)]
        HRESULT LayoutInCell([in] long prop);
        [id(0x00000094), propget, helpcontext(0x09a00094)]
        HRESULT HasChart([out, retval] MsoTriState* prop);
        [id(0x00000095), propget, helpcontext(0x09a00095)]
        HRESULT Chart([out, retval] Chart** prop);
        [id(0x000000c8), propget, helpcontext(0x09a000c8)]
        HRESULT LeftRelative([out, retval] single* prop);
        [id(0x000000c8), propput, helpcontext(0x09a000c8)]
        HRESULT LeftRelative([in] single prop);
        [id(0x000000c9), propget, helpcontext(0x09a000c9)]
        HRESULT TopRelative([out, retval] single* prop);
        [id(0x000000c9), propput, helpcontext(0x09a000c9)]
        HRESULT TopRelative([in] single prop);
        [id(0x000000ca), propget, helpcontext(0x09a000ca)]
        HRESULT WidthRelative([out, retval] single* prop);
        [id(0x000000ca), propput, helpcontext(0x09a000ca)]
        HRESULT WidthRelative([in] single prop);
        [id(0x000000cb), propget, helpcontext(0x09a000cb)]
        HRESULT HeightRelative([out, retval] single* prop);
        [id(0x000000cb), propput, helpcontext(0x09a000cb)]
        HRESULT HeightRelative([in] single prop);
        [id(0x000000cc), propget, helpcontext(0x09a000cc)]
        HRESULT RelativeHorizontalSize([out, retval] WdRelativeHorizontalSize* prop);
        [id(0x000000cc), propput, helpcontext(0x09a000cc)]
        HRESULT RelativeHorizontalSize([in] WdRelativeHorizontalSize prop);
        [id(0x000000cd), propget, helpcontext(0x09a000cd)]
        HRESULT RelativeVerticalSize([out, retval] WdRelativeVerticalSize* prop);
        [id(0x000000cd), propput, helpcontext(0x09a000cd)]
        HRESULT RelativeVerticalSize([in] WdRelativeVerticalSize prop);
        [id(0x00000098), propget, helpcontext(0x09a00098)]
        HRESULT SoftEdge([out, retval] SoftEdgeFormat** prop);
        [id(0x00000099), propget, helpcontext(0x09a00099)]
        HRESULT Glow([out, retval] GlowFormat** prop);
        [id(0x0000009a), propget, helpcontext(0x09a0009a)]
        HRESULT Reflection([out, retval] ReflectionFormat** prop);
        [id(0x0000009b), propget, helpcontext(0x09a0009b)]
        HRESULT TextFrame2([out, retval] TextFrame2** prop);
        [id(0x000000ce), propget, helpcontext(0x09a000ce)]
        HRESULT HasSmartArt([out, retval] MsoTriState* prop);
        [id(0x0000009c), propget, helpcontext(0x09a0009c)]
        HRESULT SmartArt([out, retval] SmartArt** prop);
        [id(0x00000096), propget, helpcontext(0x09a00096)]
        HRESULT ShapeStyle([out, retval] MsoShapeStyleIndex* prop);
        [id(0x00000096), propput, helpcontext(0x09a00096)]
        HRESULT ShapeStyle([in] MsoShapeStyleIndex prop);
        [id(0x00000097), propget, helpcontext(0x09a00097)]
        HRESULT BackgroundStyle([out, retval] MsoBackgroundStyleIndex* prop);
        [id(0x00000097), propput, helpcontext(0x09a00097)]
        HRESULT BackgroundStyle([in] MsoBackgroundStyleIndex prop);
        [id(0x0000009e), propget, helpcontext(0x09a0009e)]
        HRESULT Title([out, retval] BSTR* prop);
        [id(0x0000009e), propput, helpcontext(0x09a0009e)]
        HRESULT Title([in] BSTR prop);
        [id(0x000000cf), propget, hidden, helpcontext(0x09a000cf)]
        HRESULT AnchorID([out, retval] long* prop);
        [id(0x000000d0), propget, hidden, helpcontext(0x09a000d0)]
        HRESULT EditID([out, retval] long* prop);
    };

    [
      odl,
      uuid(000209B2-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009b2),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextFrame : IDispatch {
        [id(0x00001f40), propget, helpcontext(0x09b21f40)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00001f41), propget, helpcontext(0x09b21f41)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09b20001)]
        HRESULT Parent([out, retval] Shape** prop);
        [id(0x00000064), propget, helpcontext(0x09b20064)]
        HRESULT MarginBottom([out, retval] single* prop);
        [id(0x00000064), propput, helpcontext(0x09b20064)]
        HRESULT MarginBottom([in] single prop);
        [id(0x00000065), propget, helpcontext(0x09b20065)]
        HRESULT MarginLeft([out, retval] single* prop);
        [id(0x00000065), propput, helpcontext(0x09b20065)]
        HRESULT MarginLeft([in] single prop);
        [id(0x00000066), propget, helpcontext(0x09b20066)]
        HRESULT MarginRight([out, retval] single* prop);
        [id(0x00000066), propput, helpcontext(0x09b20066)]
        HRESULT MarginRight([in] single prop);
        [id(0x00000067), propget, helpcontext(0x09b20067)]
        HRESULT MarginTop([out, retval] single* prop);
        [id(0x00000067), propput, helpcontext(0x09b20067)]
        HRESULT MarginTop([in] single prop);
        [id(0x00000068), propget, helpcontext(0x09b20068)]
        HRESULT Orientation([out, retval] MsoTextOrientation* prop);
        [id(0x00000068), propput, helpcontext(0x09b20068)]
        HRESULT Orientation([in] MsoTextOrientation prop);
        [id(0x000003e9), propget, helpcontext(0x09b203e9)]
        HRESULT TextRange([out, retval] Range** prop);
        [id(0x000003ea), propget, helpcontext(0x09b203ea)]
        HRESULT ContainingRange([out, retval] Range** prop);
        [id(0x00001389), propget, helpcontext(0x09b21389)]
        HRESULT Next([out, retval] TextFrame** prop);
        [id(0x00001389), propput, helpcontext(0x09b21389)]
        HRESULT Next([in] TextFrame* prop);
        [id(0x0000138a), propget, helpcontext(0x09b2138a)]
        HRESULT Previous([out, retval] TextFrame** prop);
        [id(0x0000138a), propput, helpcontext(0x09b2138a)]
        HRESULT Previous([in] TextFrame* prop);
        [id(0x0000138b), propget, helpcontext(0x09b2138b)]
        HRESULT Overflowing([out, retval] VARIANT_BOOL* prop);
        [id(0x00001390), propget, helpcontext(0x09b21390)]
        HRESULT HasText([out, retval] long* prop);
        [id(0x0000138c), helpcontext(0x09b2138c)]
        HRESULT BreakForwardLink();
        [id(0x0000138e), helpcontext(0x09b2138e)]
        HRESULT ValidLinkTarget(
                        [in] TextFrame* TargetTextFrame, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00001391), propget, helpcontext(0x09b21391)]
        HRESULT AutoSize([out, retval] long* prop);
        [id(0x00001391), propput, helpcontext(0x09b21391)]
        HRESULT AutoSize([in] long prop);
        [id(0x00001392), propget, helpcontext(0x09b21392)]
        HRESULT WordWrap([out, retval] long* prop);
        [id(0x00001392), propput, helpcontext(0x09b21392)]
        HRESULT WordWrap([in] long prop);
        [id(0x00001393), propget, helpcontext(0x09b21393)]
        HRESULT VerticalAnchor([out, retval] MsoVerticalAnchor* prop);
        [id(0x00001393), propput, helpcontext(0x09b21393)]
        HRESULT VerticalAnchor([in] MsoVerticalAnchor prop);
        [id(0x00001394), propget, helpcontext(0x09b21394)]
        HRESULT HorizontalAnchor([out, retval] MsoHorizontalAnchor* prop);
        [id(0x00001394), propput, helpcontext(0x09b21394)]
        HRESULT HorizontalAnchor([in] MsoHorizontalAnchor prop);
        [id(0x00001395), propget, helpcontext(0x09b21395)]
        HRESULT PathFormat([out, retval] MsoPathFormat* prop);
        [id(0x00001395), propput, helpcontext(0x09b21395)]
        HRESULT PathFormat([in] MsoPathFormat prop);
        [id(0x00001396), propget, helpcontext(0x09b21396)]
        HRESULT WarpFormat([out, retval] MsoWarpFormat* prop);
        [id(0x00001396), propput, helpcontext(0x09b21396)]
        HRESULT WarpFormat([in] MsoWarpFormat prop);
        [id(0x00001397), propget, helpcontext(0x09b21397)]
        HRESULT Column([out, retval] TextColumn2** prop);
        [id(0x00001398), propget, helpcontext(0x09b21398)]
        HRESULT ThreeD([out, retval] ThreeDFormat** prop);
        [id(0x00001399), propget, helpcontext(0x09b21399)]
        HRESULT NoTextRotation([out, retval] MsoTriState* prop);
        [id(0x00001399), propput, helpcontext(0x09b21399)]
        HRESULT NoTextRotation([in] MsoTriState prop);
        [id(0x0000139a), helpcontext(0x09b2139a)]
        HRESULT DeleteText();
    };

    [
      odl,
      uuid(000209A1-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009a1),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _LetterContent : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09a103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09a103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09a103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000a), propget, helpcontext(0x09a1000a)]
        HRESULT Duplicate([out, retval] _LetterContent** prop);
        [id(0x00000065), propget, helpcontext(0x09a10065)]
        HRESULT DateFormat([out, retval] BSTR* prop);
        [id(0x00000065), propput, helpcontext(0x09a10065)]
        HRESULT DateFormat([in] BSTR prop);
        [id(0x00000066), propget, helpcontext(0x09a10066)]
        HRESULT IncludeHeaderFooter([out, retval] VARIANT_BOOL* prop);
        [id(0x00000066), propput, helpcontext(0x09a10066)]
        HRESULT IncludeHeaderFooter([in] VARIANT_BOOL prop);
        [id(0x00000067), propget, helpcontext(0x09a10067)]
        HRESULT PageDesign([out, retval] BSTR* prop);
        [id(0x00000067), propput, helpcontext(0x09a10067)]
        HRESULT PageDesign([in] BSTR prop);
        [id(0x00000068), propget, helpcontext(0x09a10068)]
        HRESULT LetterStyle([out, retval] WdLetterStyle* prop);
        [id(0x00000068), propput, helpcontext(0x09a10068)]
        HRESULT LetterStyle([in] WdLetterStyle prop);
        [id(0x00000069), propget, helpcontext(0x09a10069)]
        HRESULT Letterhead([out, retval] VARIANT_BOOL* prop);
        [id(0x00000069), propput, helpcontext(0x09a10069)]
        HRESULT Letterhead([in] VARIANT_BOOL prop);
        [id(0x0000006a), propget, helpcontext(0x09a1006a)]
        HRESULT LetterheadLocation([out, retval] WdLetterheadLocation* prop);
        [id(0x0000006a), propput, helpcontext(0x09a1006a)]
        HRESULT LetterheadLocation([in] WdLetterheadLocation prop);
        [id(0x0000006b), propget, helpcontext(0x09a1006b)]
        HRESULT LetterheadSize([out, retval] single* prop);
        [id(0x0000006b), propput, helpcontext(0x09a1006b)]
        HRESULT LetterheadSize([in] single prop);
        [id(0x0000006c), propget, helpcontext(0x09a1006c)]
        HRESULT RecipientName([out, retval] BSTR* prop);
        [id(0x0000006c), propput, helpcontext(0x09a1006c)]
        HRESULT RecipientName([in] BSTR prop);
        [id(0x0000006d), propget, helpcontext(0x09a1006d)]
        HRESULT RecipientAddress([out, retval] BSTR* prop);
        [id(0x0000006d), propput, helpcontext(0x09a1006d)]
        HRESULT RecipientAddress([in] BSTR prop);
        [id(0x0000006e), propget, helpcontext(0x09a1006e)]
        HRESULT Salutation([out, retval] BSTR* prop);
        [id(0x0000006e), propput, helpcontext(0x09a1006e)]
        HRESULT Salutation([in] BSTR prop);
        [id(0x0000006f), propget, helpcontext(0x09a1006f)]
        HRESULT SalutationType([out, retval] WdSalutationType* prop);
        [id(0x0000006f), propput, helpcontext(0x09a1006f)]
        HRESULT SalutationType([in] WdSalutationType prop);
        [id(0x00000070), propget, helpcontext(0x09a10070)]
        HRESULT RecipientReference([out, retval] BSTR* prop);
        [id(0x00000070), propput, helpcontext(0x09a10070)]
        HRESULT RecipientReference([in] BSTR prop);
        [id(0x00000072), propget, helpcontext(0x09a10072)]
        HRESULT MailingInstructions([out, retval] BSTR* prop);
        [id(0x00000072), propput, helpcontext(0x09a10072)]
        HRESULT MailingInstructions([in] BSTR prop);
        [id(0x00000073), propget, helpcontext(0x09a10073)]
        HRESULT AttentionLine([out, retval] BSTR* prop);
        [id(0x00000073), propput, helpcontext(0x09a10073)]
        HRESULT AttentionLine([in] BSTR prop);
        [id(0x00000074), propget, helpcontext(0x09a10074)]
        HRESULT Subject([out, retval] BSTR* prop);
        [id(0x00000074), propput, helpcontext(0x09a10074)]
        HRESULT Subject([in] BSTR prop);
        [id(0x00000075), propget, helpcontext(0x09a10075)]
        HRESULT EnclosureNumber([out, retval] long* prop);
        [id(0x00000075), propput, helpcontext(0x09a10075)]
        HRESULT EnclosureNumber([in] long prop);
        [id(0x00000076), propget, helpcontext(0x09a10076)]
        HRESULT CCList([out, retval] BSTR* prop);
        [id(0x00000076), propput, helpcontext(0x09a10076)]
        HRESULT CCList([in] BSTR prop);
        [id(0x00000077), propget, helpcontext(0x09a10077)]
        HRESULT ReturnAddress([out, retval] BSTR* prop);
        [id(0x00000077), propput, helpcontext(0x09a10077)]
        HRESULT ReturnAddress([in] BSTR prop);
        [id(0x00000078), propget, helpcontext(0x09a10078)]
        HRESULT SenderName([out, retval] BSTR* prop);
        [id(0x00000078), propput, helpcontext(0x09a10078)]
        HRESULT SenderName([in] BSTR prop);
        [id(0x00000079), propget, helpcontext(0x09a10079)]
        HRESULT Closing([out, retval] BSTR* prop);
        [id(0x00000079), propput, helpcontext(0x09a10079)]
        HRESULT Closing([in] BSTR prop);
        [id(0x0000007a), propget, helpcontext(0x09a1007a)]
        HRESULT SenderCompany([out, retval] BSTR* prop);
        [id(0x0000007a), propput, helpcontext(0x09a1007a)]
        HRESULT SenderCompany([in] BSTR prop);
        [id(0x0000007b), propget, helpcontext(0x09a1007b)]
        HRESULT SenderJobTitle([out, retval] BSTR* prop);
        [id(0x0000007b), propput, helpcontext(0x09a1007b)]
        HRESULT SenderJobTitle([in] BSTR prop);
        [id(0x0000007c), propget, helpcontext(0x09a1007c)]
        HRESULT SenderInitials([out, retval] BSTR* prop);
        [id(0x0000007c), propput, helpcontext(0x09a1007c)]
        HRESULT SenderInitials([in] BSTR prop);
        [id(0x0000007d), propget, helpcontext(0x09a1007d)]
        HRESULT InfoBlock([out, retval] VARIANT_BOOL* prop);
        [id(0x0000007d), propput, helpcontext(0x09a1007d)]
        HRESULT InfoBlock([in] VARIANT_BOOL prop);
        [id(0x0000007e), propget, helpcontext(0x09a1007e)]
        HRESULT RecipientCode([out, retval] BSTR* prop);
        [id(0x0000007e), propput, helpcontext(0x09a1007e)]
        HRESULT RecipientCode([in] BSTR prop);
        [id(0x0000007f), propget, helpcontext(0x09a1007f)]
        HRESULT RecipientGender([out, retval] WdSalutationGender* prop);
        [id(0x0000007f), propput, helpcontext(0x09a1007f)]
        HRESULT RecipientGender([in] WdSalutationGender prop);
        [id(0x00000080), propget, helpcontext(0x09a10080)]
        HRESULT ReturnAddressShortForm([out, retval] BSTR* prop);
        [id(0x00000080), propput, helpcontext(0x09a10080)]
        HRESULT ReturnAddressShortForm([in] BSTR prop);
        [id(0x00000081), propget, helpcontext(0x09a10081)]
        HRESULT SenderCity([out, retval] BSTR* prop);
        [id(0x00000081), propput, helpcontext(0x09a10081)]
        HRESULT SenderCity([in] BSTR prop);
        [id(0x00000082), propget, helpcontext(0x09a10082)]
        HRESULT SenderCode([out, retval] BSTR* prop);
        [id(0x00000082), propput, helpcontext(0x09a10082)]
        HRESULT SenderCode([in] BSTR prop);
        [id(0x00000083), propget, helpcontext(0x09a10083)]
        HRESULT SenderGender([out, retval] WdSalutationGender* prop);
        [id(0x00000083), propput, helpcontext(0x09a10083)]
        HRESULT SenderGender([in] WdSalutationGender prop);
        [id(0x00000084), propget, helpcontext(0x09a10084)]
        HRESULT SenderReference([out, retval] BSTR* prop);
        [id(0x00000084), propput, helpcontext(0x09a10084)]
        HRESULT SenderReference([in] BSTR prop);
    };

    [
      odl,
      uuid(000209A5-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009a5),
      dual,
      nonextensible,
      oleautomation
    ]
    interface View : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09a503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09a503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09a503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09a50000)]
        HRESULT Type([out, retval] WdViewType* prop);
        [id(00000000), propput, helpcontext(0x09a50000)]
        HRESULT Type([in] WdViewType prop);
        [id(0x00000001), propget, helpcontext(0x09a50001)]
        HRESULT FullScreen([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09a50001)]
        HRESULT FullScreen([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x09a50002)]
        HRESULT Draft([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x09a50002)]
        HRESULT Draft([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x09a50003)]
        HRESULT ShowAll([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09a50003)]
        HRESULT ShowAll([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09a50004)]
        HRESULT ShowFieldCodes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09a50004)]
        HRESULT ShowFieldCodes([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x09a50005)]
        HRESULT MailMergeDataView([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x09a50005)]
        HRESULT MailMergeDataView([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09a50007)]
        HRESULT Magnifier([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propput, helpcontext(0x09a50007)]
        HRESULT Magnifier([in] VARIANT_BOOL prop);
        [id(0x00000008), propget, helpcontext(0x09a50008)]
        HRESULT ShowFirstLineOnly([out, retval] VARIANT_BOOL* prop);
        [id(0x00000008), propput, helpcontext(0x09a50008)]
        HRESULT ShowFirstLineOnly([in] VARIANT_BOOL prop);
        [id(0x00000009), propget, helpcontext(0x09a50009)]
        HRESULT ShowFormat([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x09a50009)]
        HRESULT ShowFormat([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x09a5000a)]
        HRESULT Zoom([out, retval] Zoom** prop);
        [id(0x0000000b), propget, helpcontext(0x09a5000b)]
        HRESULT ShowObjectAnchors([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000b), propput, helpcontext(0x09a5000b)]
        HRESULT ShowObjectAnchors([in] VARIANT_BOOL prop);
        [id(0x0000000c), propget, helpcontext(0x09a5000c)]
        HRESULT ShowTextBoundaries([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000c), propput, helpcontext(0x09a5000c)]
        HRESULT ShowTextBoundaries([in] VARIANT_BOOL prop);
        [id(0x0000000d), propget, helpcontext(0x09a5000d)]
        HRESULT ShowHighlight([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000d), propput, helpcontext(0x09a5000d)]
        HRESULT ShowHighlight([in] VARIANT_BOOL prop);
        [id(0x0000000e), propget, helpcontext(0x09a5000e)]
        HRESULT ShowDrawings([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000e), propput, helpcontext(0x09a5000e)]
        HRESULT ShowDrawings([in] VARIANT_BOOL prop);
        [id(0x0000000f), propget, helpcontext(0x09a5000f)]
        HRESULT ShowTabs([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000f), propput, helpcontext(0x09a5000f)]
        HRESULT ShowTabs([in] VARIANT_BOOL prop);
        [id(0x00000010), propget, helpcontext(0x09a50010)]
        HRESULT ShowSpaces([out, retval] VARIANT_BOOL* prop);
        [id(0x00000010), propput, helpcontext(0x09a50010)]
        HRESULT ShowSpaces([in] VARIANT_BOOL prop);
        [id(0x00000011), propget, helpcontext(0x09a50011)]
        HRESULT ShowParagraphs([out, retval] VARIANT_BOOL* prop);
        [id(0x00000011), propput, helpcontext(0x09a50011)]
        HRESULT ShowParagraphs([in] VARIANT_BOOL prop);
        [id(0x00000012), propget, helpcontext(0x09a50012)]
        HRESULT ShowHyphens([out, retval] VARIANT_BOOL* prop);
        [id(0x00000012), propput, helpcontext(0x09a50012)]
        HRESULT ShowHyphens([in] VARIANT_BOOL prop);
        [id(0x00000013), propget, helpcontext(0x09a50013)]
        HRESULT ShowHiddenText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000013), propput, helpcontext(0x09a50013)]
        HRESULT ShowHiddenText([in] VARIANT_BOOL prop);
        [id(0x00000014), propget, helpcontext(0x09a50014)]
        HRESULT WrapToWindow([out, retval] VARIANT_BOOL* prop);
        [id(0x00000014), propput, helpcontext(0x09a50014)]
        HRESULT WrapToWindow([in] VARIANT_BOOL prop);
        [id(0x00000015), propget, helpcontext(0x09a50015)]
        HRESULT ShowPicturePlaceHolders([out, retval] VARIANT_BOOL* prop);
        [id(0x00000015), propput, helpcontext(0x09a50015)]
        HRESULT ShowPicturePlaceHolders([in] VARIANT_BOOL prop);
        [id(0x00000016), propget, helpcontext(0x09a50016)]
        HRESULT ShowBookmarks([out, retval] VARIANT_BOOL* prop);
        [id(0x00000016), propput, helpcontext(0x09a50016)]
        HRESULT ShowBookmarks([in] VARIANT_BOOL prop);
        [id(0x00000017), propget, helpcontext(0x09a50017)]
        HRESULT FieldShading([out, retval] WdFieldShading* prop);
        [id(0x00000017), propput, helpcontext(0x09a50017)]
        HRESULT FieldShading([in] WdFieldShading prop);
        [id(0x00000018), propget, hidden, helpcontext(0x09a50018)]
        HRESULT ShowAnimation([out, retval] VARIANT_BOOL* prop);
        [id(0x00000018), propput, hidden, helpcontext(0x09a50018)]
        HRESULT ShowAnimation([in] VARIANT_BOOL prop);
        [id(0x00000019), propget, helpcontext(0x09a50019)]
        HRESULT TableGridlines([out, retval] VARIANT_BOOL* prop);
        [id(0x00000019), propput, helpcontext(0x09a50019)]
        HRESULT TableGridlines([in] VARIANT_BOOL prop);
        [id(0x0000001a), propget, hidden, helpcontext(0x09a5001a)]
        HRESULT EnlargeFontsLessThan([out, retval] long* prop);
        [id(0x0000001a), propput, hidden, helpcontext(0x09a5001a)]
        HRESULT EnlargeFontsLessThan([in] long prop);
        [id(0x0000001b), propget, helpcontext(0x09a5001b)]
        HRESULT ShowMainTextLayer([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001b), propput, helpcontext(0x09a5001b)]
        HRESULT ShowMainTextLayer([in] VARIANT_BOOL prop);
        [id(0x0000001c), propget, helpcontext(0x09a5001c)]
        HRESULT SeekView([out, retval] WdSeekView* prop);
        [id(0x0000001c), propput, helpcontext(0x09a5001c)]
        HRESULT SeekView([in] WdSeekView prop);
        [id(0x0000001d), propget, helpcontext(0x09a5001d)]
        HRESULT SplitSpecial([out, retval] WdSpecialPane* prop);
        [id(0x0000001d), propput, helpcontext(0x09a5001d)]
        HRESULT SplitSpecial([in] WdSpecialPane prop);
        [id(0x0000001e), propget, hidden, helpcontext(0x09a5001e)]
        HRESULT BrowseToWindow([out, retval] long* prop);
        [id(0x0000001e), propput, hidden, helpcontext(0x09a5001e)]
        HRESULT BrowseToWindow([in] long prop);
        [id(0x0000001f), propget, helpcontext(0x09a5001f)]
        HRESULT ShowOptionalBreaks([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001f), propput, helpcontext(0x09a5001f)]
        HRESULT ShowOptionalBreaks([in] VARIANT_BOOL prop);
        [id(0x00000065), helpcontext(0x09a50065)]
        HRESULT CollapseOutline([in, optional] VARIANT* Range);
        [id(0x00000066), helpcontext(0x09a50066)]
        HRESULT ExpandOutline([in, optional] VARIANT* Range);
        [id(0x00000067), helpcontext(0x09a50067)]
        HRESULT ShowAllHeadings();
        [id(0x00000068), helpcontext(0x09a50068)]
        HRESULT ShowHeading([in] long Level);
        [id(0x00000069), helpcontext(0x09a50069)]
        HRESULT PreviousHeaderFooter();
        [id(0x0000006a), helpcontext(0x09a5006a)]
        HRESULT NextHeaderFooter();
        [id(0x00000020), propget, helpcontext(0x09a50020)]
        HRESULT DisplayPageBoundaries([out, retval] VARIANT_BOOL* prop);
        [id(0x00000020), propput, helpcontext(0x09a50020)]
        HRESULT DisplayPageBoundaries([in] VARIANT_BOOL prop);
        [id(0x00000021), propget, hidden, helpcontext(0x09a50021)]
        HRESULT DisplaySmartTags([out, retval] VARIANT_BOOL* prop);
        [id(0x00000021), propput, hidden, helpcontext(0x09a50021)]
        HRESULT DisplaySmartTags([in] VARIANT_BOOL prop);
        [id(0x00000022), propget, helpcontext(0x09a50022)]
        HRESULT ShowRevisionsAndComments([out, retval] VARIANT_BOOL* prop);
        [id(0x00000022), propput, helpcontext(0x09a50022)]
        HRESULT ShowRevisionsAndComments([in] VARIANT_BOOL prop);
        [id(0x00000023), propget, helpcontext(0x09a50023)]
        HRESULT ShowComments([out, retval] VARIANT_BOOL* prop);
        [id(0x00000023), propput, helpcontext(0x09a50023)]
        HRESULT ShowComments([in] VARIANT_BOOL prop);
        [id(0x00000024), propget, helpcontext(0x09a50024)]
        HRESULT ShowInsertionsAndDeletions([out, retval] VARIANT_BOOL* prop);
        [id(0x00000024), propput, helpcontext(0x09a50024)]
        HRESULT ShowInsertionsAndDeletions([in] VARIANT_BOOL prop);
        [id(0x00000025), propget, helpcontext(0x09a50025)]
        HRESULT ShowFormatChanges([out, retval] VARIANT_BOOL* prop);
        [id(0x00000025), propput, helpcontext(0x09a50025)]
        HRESULT ShowFormatChanges([in] VARIANT_BOOL prop);
        [id(0x00000026), propget, hidden, helpcontext(0x09a50026)]
        HRESULT RevisionsView([out, retval] WdRevisionsView* prop);
        [id(0x00000026), propput, hidden, helpcontext(0x09a50026)]
        HRESULT RevisionsView([in] WdRevisionsView prop);
        [id(0x00000027), propget, hidden, helpcontext(0x09a50027)]
        HRESULT RevisionsMode([out, retval] WdRevisionsMode* prop);
        [id(0x00000027), propput, hidden, helpcontext(0x09a50027)]
        HRESULT RevisionsMode([in] WdRevisionsMode prop);
        [id(0x00000028), propget, helpcontext(0x09a50028)]
        HRESULT RevisionsBalloonWidth([out, retval] single* prop);
        [id(0x00000028), propput, helpcontext(0x09a50028)]
        HRESULT RevisionsBalloonWidth([in] single prop);
        [id(0x00000029), propget, helpcontext(0x09a50029)]
        HRESULT RevisionsBalloonWidthType([out, retval] WdRevisionsBalloonWidthType* prop);
        [id(0x00000029), propput, helpcontext(0x09a50029)]
        HRESULT RevisionsBalloonWidthType([in] WdRevisionsBalloonWidthType prop);
        [id(0x0000002a), propget, helpcontext(0x09a5002a)]
        HRESULT RevisionsBalloonSide([out, retval] WdRevisionsBalloonMargin* prop);
        [id(0x0000002a), propput, helpcontext(0x09a5002a)]
        HRESULT RevisionsBalloonSide([in] WdRevisionsBalloonMargin prop);
        [id(0x0000002b), propget, hidden, helpcontext(0x09a5002b)]
        HRESULT Reviewers([out, retval] Reviewers** prop);
        [id(0x0000002c), propget, helpcontext(0x09a5002c)]
        HRESULT RevisionsBalloonShowConnectingLines([out, retval] VARIANT_BOOL* prop);
        [id(0x0000002c), propput, helpcontext(0x09a5002c)]
        HRESULT RevisionsBalloonShowConnectingLines([in] VARIANT_BOOL prop);
        [id(0x0000002d), propget, helpcontext(0x09a5002d)]
        HRESULT ReadingLayout([out, retval] VARIANT_BOOL* prop);
        [id(0x0000002d), propput, helpcontext(0x09a5002d)]
        HRESULT ReadingLayout([in] VARIANT_BOOL prop);
        [id(0x0000002e), propget, helpcontext(0x09a5002e)]
        HRESULT ShowXMLMarkup([out, retval] long* prop);
        [id(0x0000002e), propput, helpcontext(0x09a5002e)]
        HRESULT ShowXMLMarkup([in] long prop);
        [id(0x0000002f), propget, helpcontext(0x09a5002f)]
        HRESULT ShadeEditableRanges([out, retval] long* prop);
        [id(0x0000002f), propput, helpcontext(0x09a5002f)]
        HRESULT ShadeEditableRanges([in] long prop);
        [id(0x00000030), propget, helpcontext(0x09a50030)]
        HRESULT ShowInkAnnotations([out, retval] VARIANT_BOOL* prop);
        [id(0x00000030), propput, helpcontext(0x09a50030)]
        HRESULT ShowInkAnnotations([in] VARIANT_BOOL prop);
        [id(0x00000031), propget, helpcontext(0x09a50031)]
        HRESULT DisplayBackgrounds([out, retval] VARIANT_BOOL* prop);
        [id(0x00000031), propput, helpcontext(0x09a50031)]
        HRESULT DisplayBackgrounds([in] VARIANT_BOOL prop);
        [id(0x00000032), propget, helpcontext(0x09a50032)]
        HRESULT ReadingLayoutActualView([out, retval] VARIANT_BOOL* prop);
        [id(0x00000032), propput, helpcontext(0x09a50032)]
        HRESULT ReadingLayoutActualView([in] VARIANT_BOOL prop);
        [id(0x00000033), propget, hidden, helpcontext(0x09a50033)]
        HRESULT ReadingLayoutAllowMultiplePages([out, retval] VARIANT_BOOL* prop);
        [id(0x00000033), propput, hidden, helpcontext(0x09a50033)]
        HRESULT ReadingLayoutAllowMultiplePages([in] VARIANT_BOOL prop);
        [id(0x00000035), propget, hidden, helpcontext(0x09a50035)]
        HRESULT ReadingLayoutAllowEditing([out, retval] VARIANT_BOOL* prop);
        [id(0x00000035), propput, hidden, helpcontext(0x09a50035)]
        HRESULT ReadingLayoutAllowEditing([in] VARIANT_BOOL prop);
        [id(0x00000036), propget, helpcontext(0x09a50036)]
        HRESULT ReadingLayoutTruncateMargins([out, retval] WdReadingLayoutMargin* prop);
        [id(0x00000036), propput, helpcontext(0x09a50036)]
        HRESULT ReadingLayoutTruncateMargins([in] WdReadingLayoutMargin prop);
        [id(0x00000034), propget, hidden, helpcontext(0x09a50034)]
        HRESULT ShowMarkupAreaHighlight([out, retval] VARIANT_BOOL* prop);
        [id(0x00000034), propput, hidden, helpcontext(0x09a50034)]
        HRESULT ShowMarkupAreaHighlight([in] VARIANT_BOOL prop);
        [id(0x00000037), propget, helpcontext(0x09a50037)]
        HRESULT Panning([out, retval] VARIANT_BOOL* prop);
        [id(0x00000037), propput, helpcontext(0x09a50037)]
        HRESULT Panning([in] VARIANT_BOOL prop);
        [id(0x00000038), propget, helpcontext(0x09a50038)]
        HRESULT ShowCropMarks([out, retval] VARIANT_BOOL* prop);
        [id(0x00000038), propput, helpcontext(0x09a50038)]
        HRESULT ShowCropMarks([in] VARIANT_BOOL prop);
        [id(0x00000039), propget, helpcontext(0x09a50039)]
        HRESULT MarkupMode([out, retval] WdRevisionsMode* prop);
        [id(0x00000039), propput, helpcontext(0x09a50039)]
        HRESULT MarkupMode([in] WdRevisionsMode prop);
        [id(0x0000003a), propget, helpcontext(0x09a5003a)]
        HRESULT ConflictMode([out, retval] VARIANT_BOOL* prop);
        [id(0x0000003a), propput, helpcontext(0x09a5003a)]
        HRESULT ConflictMode([in] VARIANT_BOOL prop);
        [id(0x0000003b), propget, helpcontext(0x09a5003b)]
        HRESULT ShowOtherAuthors([out, retval] VARIANT_BOOL* prop);
        [id(0x0000003b), propput, helpcontext(0x09a5003b)]
        HRESULT ShowOtherAuthors([in] VARIANT_BOOL prop);
        [id(0x00000453), helpcontext(0x09a50453)]
        HRESULT ExpandAllHeadings();
        [id(0x00000454), helpcontext(0x09a50454)]
        HRESULT CollapseAllHeadings();
        [id(0x0000003e), propget, helpcontext(0x09a5003e)]
        HRESULT RevisionsFilter([out, retval] RevisionsFilter** prop);
        [id(0x0000003f), propget, helpcontext(0x09a5003f)]
        HRESULT PageColor([out, retval] WdPageColor* prop);
        [id(0x0000003f), propput, helpcontext(0x09a5003f)]
        HRESULT PageColor([in] WdPageColor prop);
        [id(0x00000040), propget, helpcontext(0x09a50040)]
        HRESULT ColumnWidth([out, retval] WdColumnWidth* prop);
        [id(0x00000040), propput, helpcontext(0x09a50040)]
        HRESULT ColumnWidth([in] WdColumnWidth prop);
    };

    [
      odl,
      uuid(000209A6-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009a6),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Zoom : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09a603e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09a603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09a603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09a60000)]
        HRESULT Percentage([out, retval] long* prop);
        [id(00000000), propput, helpcontext(0x09a60000)]
        HRESULT Percentage([in] long prop);
        [id(0x00000001), propget, helpcontext(0x09a60001)]
        HRESULT PageFit([out, retval] WdPageFit* prop);
        [id(0x00000001), propput, helpcontext(0x09a60001)]
        HRESULT PageFit([in] WdPageFit prop);
        [id(0x00000002), propget, helpcontext(0x09a60002)]
        HRESULT PageRows([out, retval] long* prop);
        [id(0x00000002), propput, helpcontext(0x09a60002)]
        HRESULT PageRows([in] long prop);
        [id(0x00000003), propget, helpcontext(0x09a60003)]
        HRESULT PageColumns([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x09a60003)]
        HRESULT PageColumns([in] long prop);
    };

    [
      odl,
      uuid(000209A7-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009a7),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Zooms : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09a703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09a703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09a703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09a70000)]
        HRESULT Item(
                        [in] WdViewType Index, 
                        [out, retval] Zoom** prop);
    };

    [
      odl,
      uuid(000209A8-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009a8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface InlineShape : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09a803e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09a803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09a803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000044c), propget, helpcontext(0x09a8044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x0000044c), propput, helpcontext(0x09a8044c)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000002), propget, helpcontext(0x09a80002)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000003), propget, helpcontext(0x09a80003)]
        HRESULT LinkFormat([out, retval] LinkFormat** prop);
        [id(0x00000004), propget, helpcontext(0x09a80004)]
        HRESULT Field([out, retval] Field** prop);
        [id(0x00000005), propget, helpcontext(0x09a80005)]
        HRESULT OLEFormat([out, retval] OLEFormat** prop);
        [id(0x00000006), propget, helpcontext(0x09a80006)]
        HRESULT Type([out, retval] WdInlineShapeType* prop);
        [id(0x00000007), propget, helpcontext(0x09a80007)]
        HRESULT Hyperlink([out, retval] Hyperlink** prop);
        [id(0x00000008), propget, helpcontext(0x09a80008)]
        HRESULT Height([out, retval] single* prop);
        [id(0x00000008), propput, helpcontext(0x09a80008)]
        HRESULT Height([in] single prop);
        [id(0x00000009), propget, helpcontext(0x09a80009)]
        HRESULT Width([out, retval] single* prop);
        [id(0x00000009), propput, helpcontext(0x09a80009)]
        HRESULT Width([in] single prop);
        [id(0x0000000a), propget, helpcontext(0x09a8000a)]
        HRESULT ScaleHeight([out, retval] single* prop);
        [id(0x0000000a), propput, helpcontext(0x09a8000a)]
        HRESULT ScaleHeight([in] single prop);
        [id(0x0000000b), propget, helpcontext(0x09a8000b)]
        HRESULT ScaleWidth([out, retval] single* prop);
        [id(0x0000000b), propput, helpcontext(0x09a8000b)]
        HRESULT ScaleWidth([in] single prop);
        [id(0x0000000c), propget, helpcontext(0x09a8000c)]
        HRESULT LockAspectRatio([out, retval] MsoTriState* prop);
        [id(0x0000000c), propput, helpcontext(0x09a8000c)]
        HRESULT LockAspectRatio([in] MsoTriState prop);
        [id(0x00000070), propget, helpcontext(0x09a80070)]
        HRESULT Line([out, retval] LineFormat** prop);
        [id(0x0000006b), propget, helpcontext(0x09a8006b)]
        HRESULT Fill([out, retval] FillFormat** prop);
        [id(0x00000076), propget, helpcontext(0x09a80076)]
        HRESULT PictureFormat([out, retval] PictureFormat** prop);
        [id(0x00000076), propput, helpcontext(0x09a80076)]
        HRESULT PictureFormat([in] PictureFormat* prop);
        [id(0x00000064), hidden, helpcontext(0x09a80064)]
        HRESULT Activate();
        [id(0x00000065), helpcontext(0x09a80065)]
        HRESULT Reset();
        [id(0x00000066), helpcontext(0x09a80066)]
        HRESULT Delete();
        [id(0x0000ffff), helpcontext(0x09a8ffff)]
        HRESULT Select();
        [id(0x00000068), helpcontext(0x09a80068)]
        HRESULT ConvertToShape([out, retval] Shape** prop);
        [id(0x00000077), propget, helpcontext(0x09a80077)]
        HRESULT HorizontalLineFormat([out, retval] HorizontalLineFormat** prop);
        [id(0x0000007a), propget, helpcontext(0x09a8007a)]
        HRESULT Script([out, retval] Script** prop);
        [id(0x00000082), propget, hidden, helpcontext(0x09a80082)]
        HRESULT OWSAnchor([out, retval] long* prop);
        [id(0x00000078), propget, helpcontext(0x09a80078)]
        HRESULT TextEffect([out, retval] TextEffectFormat** prop);
        [id(0x00000078), propput, helpcontext(0x09a80078)]
        HRESULT TextEffect([in] TextEffectFormat* prop);
        [id(0x00000083), propget, helpcontext(0x09a80083)]
        HRESULT AlternativeText([out, retval] BSTR* prop);
        [id(0x00000083), propput, helpcontext(0x09a80083)]
        HRESULT AlternativeText([in] BSTR prop);
        [id(0x00000084), propget, helpcontext(0x09a80084)]
        HRESULT IsPictureBullet([out, retval] VARIANT_BOOL* prop);
        [id(0x00000085), propget, helpcontext(0x09a80085)]
        HRESULT GroupItems([out, retval] GroupShapes** prop);
        [id(0x00000094), propget, helpcontext(0x09a80094)]
        HRESULT HasChart([out, retval] MsoTriState* prop);
        [id(0x00000095), propget, helpcontext(0x09a80095)]
        HRESULT Chart([out, retval] Chart** prop);
        [id(0x00000098), propget, helpcontext(0x09a80098)]
        HRESULT SoftEdge([out, retval] SoftEdgeFormat** prop);
        [id(0x00000099), propget, helpcontext(0x09a80099)]
        HRESULT Glow([out, retval] GlowFormat** prop);
        [id(0x0000009a), propget, helpcontext(0x09a8009a)]
        HRESULT Reflection([out, retval] ReflectionFormat** prop);
        [id(0x0000044d), propget, helpcontext(0x09a8044d)]
        HRESULT Shadow([out, retval] ShadowFormat** prop);
        [id(0x0000009b), propget, helpcontext(0x09a8009b)]
        HRESULT HasSmartArt([out, retval] MsoTriState* prop);
        [id(0x0000009c), propget, helpcontext(0x09a8009c)]
        HRESULT SmartArt([out, retval] SmartArt** prop);
        [id(0x0000009e), propget, helpcontext(0x09a8009e)]
        HRESULT Title([out, retval] BSTR* prop);
        [id(0x0000009e), propput, helpcontext(0x09a8009e)]
        HRESULT Title([in] BSTR prop);
        [id(0x000000cf), propget, hidden, helpcontext(0x09a800cf)]
        HRESULT AnchorID([out, retval] long* prop);
        [id(0x000000d0), propget, hidden, helpcontext(0x09a800d0)]
        HRESULT EditID([out, retval] long* prop);
    };

    [
      odl,
      uuid(000209A9-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009a9),
      dual,
      nonextensible,
      oleautomation
    ]
    interface InlineShapes : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09a903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09a903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09a903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09a90001)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x09a9fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x09a90000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] InlineShape** prop);
        [id(0x00000064), helpcontext(0x09a90064)]
        HRESULT AddPicture(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* LinkToFile, 
                        [in, optional] VARIANT* SaveWithDocument, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] InlineShape** prop);
        [id(0x00000018), helpcontext(0x09a90018)]
        HRESULT AddOLEObject(
                        [in, optional] VARIANT* ClassType, 
                        [in, optional] VARIANT* FileName, 
                        [in, optional] VARIANT* LinkToFile, 
                        [in, optional] VARIANT* DisplayAsIcon, 
                        [in, optional] VARIANT* IconFileName, 
                        [in, optional] VARIANT* IconIndex, 
                        [in, optional] VARIANT* IconLabel, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] InlineShape** prop);
        [id(0x00000066), helpcontext(0x09a90066)]
        HRESULT AddOLEControl(
                        [in, optional] VARIANT* ClassType, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] InlineShape** prop);
        [id(0x000000c8), helpcontext(0x09a900c8)]
        HRESULT New(
                        [in] Range* Range, 
                        [out, retval] InlineShape** prop);
        [id(0x00000068), helpcontext(0x09a90068)]
        HRESULT AddHorizontalLine(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] InlineShape** prop);
        [id(0x00000069), helpcontext(0x09a90069)]
        HRESULT AddHorizontalLineStandard(
                        [in, optional] VARIANT* Range, 
                        [out, retval] InlineShape** prop);
        [id(0x0000006a), helpcontext(0x09a9006a)]
        HRESULT AddPictureBullet(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] InlineShape** prop);
        [id(0x0000006b), hidden, helpcontext(0x09a9006b)]
        HRESULT AddChart(
                        [in, optional, defaultvalue(-1)] XlChartType Type, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] InlineShape** prop);
        [id(0x0000006c), helpcontext(0x09a9006c)]
        HRESULT AddSmartArt(
                        [in] SmartArtLayout* Layout, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] InlineShape** prop);
        [id(0x0000006d), helpcontext(0x09a9006d)]
        HRESULT AddWebVideo(
                        [in] BSTR EmbedCode, 
                        [in] VARIANT* VideoWidth, 
                        [in] VARIANT* VideoHeight, 
                        [in, optional] VARIANT* PosterFrameImage, 
                        [in, optional] VARIANT* Url, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] InlineShape** prop);
        [id(0x0000006e), helpcontext(0x09a9006e)]
        HRESULT AddChart2(
                        [in, optional, defaultvalue(-1)] long Style, 
                        [in, optional, defaultvalue(-1)] XlChartType Type, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* NewLayout, 
                        [out, retval] InlineShape** prop);
    };

    [
      odl,
      uuid(000209AA-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009aa),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SpellingSuggestions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09aa03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09aa03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09aa03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09aafffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09aa0001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09aa0002)]
        HRESULT SpellingErrorType([out, retval] WdSpellingErrorType* prop);
        [id(00000000), helpcontext(0x09aa0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] SpellingSuggestion** prop);
    };

    [
      odl,
      uuid(000209AB-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009ab),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SpellingSuggestion : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ab03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ab03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09ab03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09ab0000)]
        HRESULT Name([out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(000209AC-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009ac),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Dictionaries : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ac03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ac03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09ac03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09acfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09ac0001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09ac0002)]
        HRESULT Maximum([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09ac0003)]
        HRESULT ActiveCustomDictionary([out, retval] Dictionary** prop);
        [id(0x00000003), propput, helpcontext(0x09ac0003)]
        HRESULT ActiveCustomDictionary([in] Dictionary* prop);
        [id(00000000), helpcontext(0x09ac0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Dictionary** prop);
        [id(0x00000065), helpcontext(0x09ac0065)]
        HRESULT Add(
                        [in] BSTR FileName, 
                        [out, retval] Dictionary** prop);
        [id(0x00000066), helpcontext(0x09ac0066)]
        HRESULT ClearAll();
    };

    [
      odl,
      uuid(000209E0-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009e0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HangulHanjaConversionDictionaries : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09e0fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09e00001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09e00002)]
        HRESULT Maximum([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09e00003)]
        HRESULT ActiveCustomDictionary([out, retval] Dictionary** prop);
        [id(0x00000003), propput, helpcontext(0x09e00003)]
        HRESULT ActiveCustomDictionary([in] Dictionary* prop);
        [id(0x00000004), propget, hidden, helpcontext(0x09e00004)]
        HRESULT BuiltinDictionary([out, retval] Dictionary** prop);
        [id(00000000), helpcontext(0x09e00000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Dictionary** prop);
        [id(0x00000065), helpcontext(0x09e00065)]
        HRESULT Add(
                        [in] BSTR FileName, 
                        [out, retval] Dictionary** prop);
        [id(0x00000066), helpcontext(0x09e00066)]
        HRESULT ClearAll();
    };

    [
      odl,
      uuid(000209AD-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009ad),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Dictionary : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ad03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ad03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09ad03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09ad0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09ad0001)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x09ad0002)]
        HRESULT LanguageID([out, retval] WdLanguageID* prop);
        [id(0x00000002), propput, helpcontext(0x09ad0002)]
        HRESULT LanguageID([in] WdLanguageID prop);
        [id(0x00000003), propget, helpcontext(0x09ad0003)]
        HRESULT ReadOnly([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propget, helpcontext(0x09ad0004)]
        HRESULT Type([out, retval] WdDictionaryType* prop);
        [id(0x00000005), propget, helpcontext(0x09ad0005)]
        HRESULT LanguageSpecific([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x09ad0005)]
        HRESULT LanguageSpecific([in] VARIANT_BOOL prop);
        [id(0x00000065), helpcontext(0x09ad0065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(000209AE-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009ae),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ReadabilityStatistics : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ae03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ae03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09ae03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09aefffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09ae0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09ae0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] ReadabilityStatistic** prop);
    };

    [
      odl,
      uuid(000209AF-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009af),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ReadabilityStatistic : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09af03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09af03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09af03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09af0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000001), propget, helpcontext(0x09af0001)]
        HRESULT Value([out, retval] single* prop);
    };

    [
      odl,
      uuid(000209B3-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009b3),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface Versions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09b303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09b303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09b303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09b3fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09b30002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09b30003)]
        HRESULT AutoVersion([out, retval] WdAutoVersions* prop);
        [id(0x00000003), propput, helpcontext(0x09b30003)]
        HRESULT AutoVersion([in] WdAutoVersions prop);
        [id(00000000), helpcontext(0x09b30000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Version** prop);
        [id(0x0000000b), helpcontext(0x09b3000b)]
        HRESULT Save([in, optional] VARIANT* Comment);
    };

    [
      odl,
      uuid(000209B4-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009b4),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Version : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09b403e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09b403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09b403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), propget, helpcontext(0x09b403eb)]
        HRESULT SavedBy([out, retval] BSTR* prop);
        [id(0x000003ec), propget, helpcontext(0x09b403ec)]
        HRESULT Comment([out, retval] BSTR* prop);
        [id(0x000003ed), propget, helpcontext(0x09b403ed)]
        HRESULT Date([out, retval] DATE* prop);
        [id(0x00000002), propget, helpcontext(0x09b40002)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000065), hidden, helpcontext(0x09b40065)]
        HRESULT OpenOld();
        [id(0x00000066), helpcontext(0x09b40066)]
        HRESULT Delete();
        [id(0x00000067), helpcontext(0x09b40067)]
        HRESULT Open([out, retval] _Document** prop);
    };

    [
      odl,
      uuid(000209B7-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009b7),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Options : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09b703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09b703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09b703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09b70001)]
        HRESULT AllowAccentedUppercase([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09b70001)]
        HRESULT AllowAccentedUppercase([in] VARIANT_BOOL prop);
        [id(0x00000011), propget, hidden, helpcontext(0x09b70011)]
        HRESULT WPHelp([out, retval] VARIANT_BOOL* prop);
        [id(0x00000011), propput, hidden, helpcontext(0x09b70011)]
        HRESULT WPHelp([in] VARIANT_BOOL prop);
        [id(0x00000012), propget, hidden, helpcontext(0x09b70012)]
        HRESULT WPDocNavKeys([out, retval] VARIANT_BOOL* prop);
        [id(0x00000012), propput, hidden, helpcontext(0x09b70012)]
        HRESULT WPDocNavKeys([in] VARIANT_BOOL prop);
        [id(0x00000013), propget, helpcontext(0x09b70013)]
        HRESULT Pagination([out, retval] VARIANT_BOOL* prop);
        [id(0x00000013), propput, helpcontext(0x09b70013)]
        HRESULT Pagination([in] VARIANT_BOOL prop);
        [id(0x00000014), propget, hidden, helpcontext(0x09b70014)]
        HRESULT BlueScreen([out, retval] VARIANT_BOOL* prop);
        [id(0x00000014), propput, hidden, helpcontext(0x09b70014)]
        HRESULT BlueScreen([in] VARIANT_BOOL prop);
        [id(0x00000015), propget, helpcontext(0x09b70015)]
        HRESULT EnableSound([out, retval] VARIANT_BOOL* prop);
        [id(0x00000015), propput, helpcontext(0x09b70015)]
        HRESULT EnableSound([in] VARIANT_BOOL prop);
        [id(0x00000016), propget, helpcontext(0x09b70016)]
        HRESULT ConfirmConversions([out, retval] VARIANT_BOOL* prop);
        [id(0x00000016), propput, helpcontext(0x09b70016)]
        HRESULT ConfirmConversions([in] VARIANT_BOOL prop);
        [id(0x00000017), propget, helpcontext(0x09b70017)]
        HRESULT UpdateLinksAtOpen([out, retval] VARIANT_BOOL* prop);
        [id(0x00000017), propput, helpcontext(0x09b70017)]
        HRESULT UpdateLinksAtOpen([in] VARIANT_BOOL prop);
        [id(0x00000018), propget, helpcontext(0x09b70018)]
        HRESULT SendMailAttach([out, retval] VARIANT_BOOL* prop);
        [id(0x00000018), propput, helpcontext(0x09b70018)]
        HRESULT SendMailAttach([in] VARIANT_BOOL prop);
        [id(0x0000001a), propget, helpcontext(0x09b7001a)]
        HRESULT MeasurementUnit([out, retval] WdMeasurementUnits* prop);
        [id(0x0000001a), propput, helpcontext(0x09b7001a)]
        HRESULT MeasurementUnit([in] WdMeasurementUnits prop);
        [id(0x0000001b), propget, helpcontext(0x09b7001b)]
        HRESULT ButtonFieldClicks([out, retval] long* prop);
        [id(0x0000001b), propput, helpcontext(0x09b7001b)]
        HRESULT ButtonFieldClicks([in] long prop);
        [id(0x0000001c), propget, helpcontext(0x09b7001c)]
        HRESULT ShortMenuNames([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001c), propput, helpcontext(0x09b7001c)]
        HRESULT ShortMenuNames([in] VARIANT_BOOL prop);
        [id(0x0000001d), propget, helpcontext(0x09b7001d)]
        HRESULT RTFInClipboard([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001d), propput, helpcontext(0x09b7001d)]
        HRESULT RTFInClipboard([in] VARIANT_BOOL prop);
        [id(0x0000001e), propget, helpcontext(0x09b7001e)]
        HRESULT UpdateFieldsAtPrint([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001e), propput, helpcontext(0x09b7001e)]
        HRESULT UpdateFieldsAtPrint([in] VARIANT_BOOL prop);
        [id(0x0000001f), propget, helpcontext(0x09b7001f)]
        HRESULT PrintProperties([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001f), propput, helpcontext(0x09b7001f)]
        HRESULT PrintProperties([in] VARIANT_BOOL prop);
        [id(0x00000020), propget, helpcontext(0x09b70020)]
        HRESULT PrintFieldCodes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000020), propput, helpcontext(0x09b70020)]
        HRESULT PrintFieldCodes([in] VARIANT_BOOL prop);
        [id(0x00000021), propget, helpcontext(0x09b70021)]
        HRESULT PrintComments([out, retval] VARIANT_BOOL* prop);
        [id(0x00000021), propput, helpcontext(0x09b70021)]
        HRESULT PrintComments([in] VARIANT_BOOL prop);
        [id(0x00000022), propget, helpcontext(0x09b70022)]
        HRESULT PrintHiddenText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000022), propput, helpcontext(0x09b70022)]
        HRESULT PrintHiddenText([in] VARIANT_BOOL prop);
        [id(0x00000023), propget, helpcontext(0x09b70023)]
        HRESULT EnvelopeFeederInstalled([out, retval] VARIANT_BOOL* prop);
        [id(0x00000024), propget, helpcontext(0x09b70024)]
        HRESULT UpdateLinksAtPrint([out, retval] VARIANT_BOOL* prop);
        [id(0x00000024), propput, helpcontext(0x09b70024)]
        HRESULT UpdateLinksAtPrint([in] VARIANT_BOOL prop);
        [id(0x00000025), propget, helpcontext(0x09b70025)]
        HRESULT PrintBackground([out, retval] VARIANT_BOOL* prop);
        [id(0x00000025), propput, helpcontext(0x09b70025)]
        HRESULT PrintBackground([in] VARIANT_BOOL prop);
        [id(0x00000026), propget, helpcontext(0x09b70026)]
        HRESULT PrintDrawingObjects([out, retval] VARIANT_BOOL* prop);
        [id(0x00000026), propput, helpcontext(0x09b70026)]
        HRESULT PrintDrawingObjects([in] VARIANT_BOOL prop);
        [id(0x00000027), propget, helpcontext(0x09b70027)]
        HRESULT DefaultTray([out, retval] BSTR* prop);
        [id(0x00000027), propput, helpcontext(0x09b70027)]
        HRESULT DefaultTray([in] BSTR prop);
        [id(0x00000028), propget, helpcontext(0x09b70028)]
        HRESULT DefaultTrayID([out, retval] long* prop);
        [id(0x00000028), propput, helpcontext(0x09b70028)]
        HRESULT DefaultTrayID([in] long prop);
        [id(0x00000029), propget, helpcontext(0x09b70029)]
        HRESULT CreateBackup([out, retval] VARIANT_BOOL* prop);
        [id(0x00000029), propput, helpcontext(0x09b70029)]
        HRESULT CreateBackup([in] VARIANT_BOOL prop);
        [id(0x0000002a), propget, hidden, helpcontext(0x09b7002a)]
        HRESULT AllowFastSave([out, retval] VARIANT_BOOL* prop);
        [id(0x0000002a), propput, hidden, helpcontext(0x09b7002a)]
        HRESULT AllowFastSave([in] VARIANT_BOOL prop);
        [id(0x0000002b), propget, helpcontext(0x09b7002b)]
        HRESULT SavePropertiesPrompt([out, retval] VARIANT_BOOL* prop);
        [id(0x0000002b), propput, helpcontext(0x09b7002b)]
        HRESULT SavePropertiesPrompt([in] VARIANT_BOOL prop);
        [id(0x0000002c), propget, helpcontext(0x09b7002c)]
        HRESULT SaveNormalPrompt([out, retval] VARIANT_BOOL* prop);
        [id(0x0000002c), propput, helpcontext(0x09b7002c)]
        HRESULT SaveNormalPrompt([in] VARIANT_BOOL prop);
        [id(0x0000002d), propget, helpcontext(0x09b7002d)]
        HRESULT SaveInterval([out, retval] long* prop);
        [id(0x0000002d), propput, helpcontext(0x09b7002d)]
        HRESULT SaveInterval([in] long prop);
        [id(0x0000002e), propget, helpcontext(0x09b7002e)]
        HRESULT BackgroundSave([out, retval] VARIANT_BOOL* prop);
        [id(0x0000002e), propput, helpcontext(0x09b7002e)]
        HRESULT BackgroundSave([in] VARIANT_BOOL prop);
        [id(0x00000039), propget, helpcontext(0x09b70039)]
        HRESULT InsertedTextMark([out, retval] WdInsertedTextMark* prop);
        [id(0x00000039), propput, helpcontext(0x09b70039)]
        HRESULT InsertedTextMark([in] WdInsertedTextMark prop);
        [id(0x0000003a), propget, helpcontext(0x09b7003a)]
        HRESULT DeletedTextMark([out, retval] WdDeletedTextMark* prop);
        [id(0x0000003a), propput, helpcontext(0x09b7003a)]
        HRESULT DeletedTextMark([in] WdDeletedTextMark prop);
        [id(0x0000003b), propget, helpcontext(0x09b7003b)]
        HRESULT RevisedLinesMark([out, retval] WdRevisedLinesMark* prop);
        [id(0x0000003b), propput, helpcontext(0x09b7003b)]
        HRESULT RevisedLinesMark([in] WdRevisedLinesMark prop);
        [id(0x0000003c), propget, helpcontext(0x09b7003c)]
        HRESULT InsertedTextColor([out, retval] WdColorIndex* prop);
        [id(0x0000003c), propput, helpcontext(0x09b7003c)]
        HRESULT InsertedTextColor([in] WdColorIndex prop);
        [id(0x0000003d), propget, helpcontext(0x09b7003d)]
        HRESULT DeletedTextColor([out, retval] WdColorIndex* prop);
        [id(0x0000003d), propput, helpcontext(0x09b7003d)]
        HRESULT DeletedTextColor([in] WdColorIndex prop);
        [id(0x0000003e), propget, helpcontext(0x09b7003e)]
        HRESULT RevisedLinesColor([out, retval] WdColorIndex* prop);
        [id(0x0000003e), propput, helpcontext(0x09b7003e)]
        HRESULT RevisedLinesColor([in] WdColorIndex prop);
        [id(0x00000041), propget, helpcontext(0x09b70041)]
        HRESULT DefaultFilePath(
                        [in] WdDefaultFilePath Path, 
                        [out, retval] BSTR* prop);
        [id(0x00000041), propput, helpcontext(0x09b70041)]
        HRESULT DefaultFilePath(
                        [in] WdDefaultFilePath Path, 
                        [in] BSTR prop);
        [id(0x00000042), propget, helpcontext(0x09b70042)]
        HRESULT Overtype([out, retval] VARIANT_BOOL* prop);
        [id(0x00000042), propput, helpcontext(0x09b70042)]
        HRESULT Overtype([in] VARIANT_BOOL prop);
        [id(0x00000043), propget, helpcontext(0x09b70043)]
        HRESULT ReplaceSelection([out, retval] VARIANT_BOOL* prop);
        [id(0x00000043), propput, helpcontext(0x09b70043)]
        HRESULT ReplaceSelection([in] VARIANT_BOOL prop);
        [id(0x00000044), propget, helpcontext(0x09b70044)]
        HRESULT AllowDragAndDrop([out, retval] VARIANT_BOOL* prop);
        [id(0x00000044), propput, helpcontext(0x09b70044)]
        HRESULT AllowDragAndDrop([in] VARIANT_BOOL prop);
        [id(0x00000045), propget, helpcontext(0x09b70045)]
        HRESULT AutoWordSelection([out, retval] VARIANT_BOOL* prop);
        [id(0x00000045), propput, helpcontext(0x09b70045)]
        HRESULT AutoWordSelection([in] VARIANT_BOOL prop);
        [id(0x00000046), propget, helpcontext(0x09b70046)]
        HRESULT INSKeyForPaste([out, retval] VARIANT_BOOL* prop);
        [id(0x00000046), propput, helpcontext(0x09b70046)]
        HRESULT INSKeyForPaste([in] VARIANT_BOOL prop);
        [id(0x00000047), propget, helpcontext(0x09b70047)]
        HRESULT SmartCutPaste([out, retval] VARIANT_BOOL* prop);
        [id(0x00000047), propput, helpcontext(0x09b70047)]
        HRESULT SmartCutPaste([in] VARIANT_BOOL prop);
        [id(0x00000048), propget, helpcontext(0x09b70048)]
        HRESULT TabIndentKey([out, retval] VARIANT_BOOL* prop);
        [id(0x00000048), propput, helpcontext(0x09b70048)]
        HRESULT TabIndentKey([in] VARIANT_BOOL prop);
        [id(0x00000049), propget, helpcontext(0x09b70049)]
        HRESULT PictureEditor([out, retval] BSTR* prop);
        [id(0x00000049), propput, helpcontext(0x09b70049)]
        HRESULT PictureEditor([in] BSTR prop);
        [id(0x0000004a), propget, helpcontext(0x09b7004a)]
        HRESULT AnimateScreenMovements([out, retval] VARIANT_BOOL* prop);
        [id(0x0000004a), propput, helpcontext(0x09b7004a)]
        HRESULT AnimateScreenMovements([in] VARIANT_BOOL prop);
        [id(0x0000004b), propget, hidden, helpcontext(0x09b7004b)]
        HRESULT VirusProtection([out, retval] VARIANT_BOOL* prop);
        [id(0x0000004b), propput, hidden, helpcontext(0x09b7004b)]
        HRESULT VirusProtection([in] VARIANT_BOOL prop);
        [id(0x0000004c), propget, helpcontext(0x09b7004c)]
        HRESULT RevisedPropertiesMark([out, retval] WdRevisedPropertiesMark* prop);
        [id(0x0000004c), propput, helpcontext(0x09b7004c)]
        HRESULT RevisedPropertiesMark([in] WdRevisedPropertiesMark prop);
        [id(0x0000004d), propget, helpcontext(0x09b7004d)]
        HRESULT RevisedPropertiesColor([out, retval] WdColorIndex* prop);
        [id(0x0000004d), propput, helpcontext(0x09b7004d)]
        HRESULT RevisedPropertiesColor([in] WdColorIndex prop);
        [id(0x0000004f), propget, helpcontext(0x09b7004f)]
        HRESULT SnapToGrid([out, retval] VARIANT_BOOL* prop);
        [id(0x0000004f), propput, helpcontext(0x09b7004f)]
        HRESULT SnapToGrid([in] VARIANT_BOOL prop);
        [id(0x00000050), propget, helpcontext(0x09b70050)]
        HRESULT SnapToShapes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000050), propput, helpcontext(0x09b70050)]
        HRESULT SnapToShapes([in] VARIANT_BOOL prop);
        [id(0x00000051), propget, helpcontext(0x09b70051)]
        HRESULT GridDistanceHorizontal([out, retval] single* prop);
        [id(0x00000051), propput, helpcontext(0x09b70051)]
        HRESULT GridDistanceHorizontal([in] single prop);
        [id(0x00000052), propget, helpcontext(0x09b70052)]
        HRESULT GridDistanceVertical([out, retval] single* prop);
        [id(0x00000052), propput, helpcontext(0x09b70052)]
        HRESULT GridDistanceVertical([in] single prop);
        [id(0x00000053), propget, helpcontext(0x09b70053)]
        HRESULT GridOriginHorizontal([out, retval] single* prop);
        [id(0x00000053), propput, helpcontext(0x09b70053)]
        HRESULT GridOriginHorizontal([in] single prop);
        [id(0x00000054), propget, helpcontext(0x09b70054)]
        HRESULT GridOriginVertical([out, retval] single* prop);
        [id(0x00000054), propput, helpcontext(0x09b70054)]
        HRESULT GridOriginVertical([in] single prop);
        [id(0x00000056), propget, helpcontext(0x09b70056)]
        HRESULT InlineConversion([out, retval] VARIANT_BOOL* prop);
        [id(0x00000056), propput, helpcontext(0x09b70056)]
        HRESULT InlineConversion([in] VARIANT_BOOL prop);
        [id(0x00000057), propget, helpcontext(0x09b70057)]
        HRESULT IMEAutomaticControl([out, retval] VARIANT_BOOL* prop);
        [id(0x00000057), propput, helpcontext(0x09b70057)]
        HRESULT IMEAutomaticControl([in] VARIANT_BOOL prop);
        [id(0x000000fa), propget, helpcontext(0x09b700fa)]
        HRESULT AutoFormatApplyHeadings([out, retval] VARIANT_BOOL* prop);
        [id(0x000000fa), propput, helpcontext(0x09b700fa)]
        HRESULT AutoFormatApplyHeadings([in] VARIANT_BOOL prop);
        [id(0x000000fb), propget, helpcontext(0x09b700fb)]
        HRESULT AutoFormatApplyLists([out, retval] VARIANT_BOOL* prop);
        [id(0x000000fb), propput, helpcontext(0x09b700fb)]
        HRESULT AutoFormatApplyLists([in] VARIANT_BOOL prop);
        [id(0x000000fc), propget, helpcontext(0x09b700fc)]
        HRESULT AutoFormatApplyBulletedLists([out, retval] VARIANT_BOOL* prop);
        [id(0x000000fc), propput, helpcontext(0x09b700fc)]
        HRESULT AutoFormatApplyBulletedLists([in] VARIANT_BOOL prop);
        [id(0x000000fd), propget, helpcontext(0x09b700fd)]
        HRESULT AutoFormatApplyOtherParas([out, retval] VARIANT_BOOL* prop);
        [id(0x000000fd), propput, helpcontext(0x09b700fd)]
        HRESULT AutoFormatApplyOtherParas([in] VARIANT_BOOL prop);
        [id(0x000000fe), propget, helpcontext(0x09b700fe)]
        HRESULT AutoFormatReplaceQuotes([out, retval] VARIANT_BOOL* prop);
        [id(0x000000fe), propput, helpcontext(0x09b700fe)]
        HRESULT AutoFormatReplaceQuotes([in] VARIANT_BOOL prop);
        [id(0x000000ff), propget, helpcontext(0x09b700ff)]
        HRESULT AutoFormatReplaceSymbols([out, retval] VARIANT_BOOL* prop);
        [id(0x000000ff), propput, helpcontext(0x09b700ff)]
        HRESULT AutoFormatReplaceSymbols([in] VARIANT_BOOL prop);
        [id(0x00000100), propget, helpcontext(0x09b70100)]
        HRESULT AutoFormatReplaceOrdinals([out, retval] VARIANT_BOOL* prop);
        [id(0x00000100), propput, helpcontext(0x09b70100)]
        HRESULT AutoFormatReplaceOrdinals([in] VARIANT_BOOL prop);
        [id(0x00000101), propget, helpcontext(0x09b70101)]
        HRESULT AutoFormatReplaceFractions([out, retval] VARIANT_BOOL* prop);
        [id(0x00000101), propput, helpcontext(0x09b70101)]
        HRESULT AutoFormatReplaceFractions([in] VARIANT_BOOL prop);
        [id(0x00000102), propget, helpcontext(0x09b70102)]
        HRESULT AutoFormatReplacePlainTextEmphasis([out, retval] VARIANT_BOOL* prop);
        [id(0x00000102), propput, helpcontext(0x09b70102)]
        HRESULT AutoFormatReplacePlainTextEmphasis([in] VARIANT_BOOL prop);
        [id(0x00000103), propget, helpcontext(0x09b70103)]
        HRESULT AutoFormatPreserveStyles([out, retval] VARIANT_BOOL* prop);
        [id(0x00000103), propput, helpcontext(0x09b70103)]
        HRESULT AutoFormatPreserveStyles([in] VARIANT_BOOL prop);
        [id(0x00000104), propget, helpcontext(0x09b70104)]
        HRESULT AutoFormatAsYouTypeApplyHeadings([out, retval] VARIANT_BOOL* prop);
        [id(0x00000104), propput, helpcontext(0x09b70104)]
        HRESULT AutoFormatAsYouTypeApplyHeadings([in] VARIANT_BOOL prop);
        [id(0x00000105), propget, helpcontext(0x09b70105)]
        HRESULT AutoFormatAsYouTypeApplyBorders([out, retval] VARIANT_BOOL* prop);
        [id(0x00000105), propput, helpcontext(0x09b70105)]
        HRESULT AutoFormatAsYouTypeApplyBorders([in] VARIANT_BOOL prop);
        [id(0x00000106), propget, helpcontext(0x09b70106)]
        HRESULT AutoFormatAsYouTypeApplyBulletedLists([out, retval] VARIANT_BOOL* prop);
        [id(0x00000106), propput, helpcontext(0x09b70106)]
        HRESULT AutoFormatAsYouTypeApplyBulletedLists([in] VARIANT_BOOL prop);
        [id(0x00000107), propget, helpcontext(0x09b70107)]
        HRESULT AutoFormatAsYouTypeApplyNumberedLists([out, retval] VARIANT_BOOL* prop);
        [id(0x00000107), propput, helpcontext(0x09b70107)]
        HRESULT AutoFormatAsYouTypeApplyNumberedLists([in] VARIANT_BOOL prop);
        [id(0x00000108), propget, helpcontext(0x09b70108)]
        HRESULT AutoFormatAsYouTypeReplaceQuotes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000108), propput, helpcontext(0x09b70108)]
        HRESULT AutoFormatAsYouTypeReplaceQuotes([in] VARIANT_BOOL prop);
        [id(0x00000109), propget, helpcontext(0x09b70109)]
        HRESULT AutoFormatAsYouTypeReplaceSymbols([out, retval] VARIANT_BOOL* prop);
        [id(0x00000109), propput, helpcontext(0x09b70109)]
        HRESULT AutoFormatAsYouTypeReplaceSymbols([in] VARIANT_BOOL prop);
        [id(0x0000010a), propget, helpcontext(0x09b7010a)]
        HRESULT AutoFormatAsYouTypeReplaceOrdinals([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010a), propput, helpcontext(0x09b7010a)]
        HRESULT AutoFormatAsYouTypeReplaceOrdinals([in] VARIANT_BOOL prop);
        [id(0x0000010b), propget, helpcontext(0x09b7010b)]
        HRESULT AutoFormatAsYouTypeReplaceFractions([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010b), propput, helpcontext(0x09b7010b)]
        HRESULT AutoFormatAsYouTypeReplaceFractions([in] VARIANT_BOOL prop);
        [id(0x0000010c), propget, helpcontext(0x09b7010c)]
        HRESULT AutoFormatAsYouTypeReplacePlainTextEmphasis([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010c), propput, helpcontext(0x09b7010c)]
        HRESULT AutoFormatAsYouTypeReplacePlainTextEmphasis([in] VARIANT_BOOL prop);
        [id(0x0000010d), propget, helpcontext(0x09b7010d)]
        HRESULT AutoFormatAsYouTypeFormatListItemBeginning([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010d), propput, helpcontext(0x09b7010d)]
        HRESULT AutoFormatAsYouTypeFormatListItemBeginning([in] VARIANT_BOOL prop);
        [id(0x0000010e), propget, helpcontext(0x09b7010e)]
        HRESULT AutoFormatAsYouTypeDefineStyles([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010e), propput, helpcontext(0x09b7010e)]
        HRESULT AutoFormatAsYouTypeDefineStyles([in] VARIANT_BOOL prop);
        [id(0x0000010f), propget, helpcontext(0x09b7010f)]
        HRESULT AutoFormatPlainTextWordMail([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010f), propput, helpcontext(0x09b7010f)]
        HRESULT AutoFormatPlainTextWordMail([in] VARIANT_BOOL prop);
        [id(0x00000110), propget, helpcontext(0x09b70110)]
        HRESULT AutoFormatAsYouTypeReplaceHyperlinks([out, retval] VARIANT_BOOL* prop);
        [id(0x00000110), propput, helpcontext(0x09b70110)]
        HRESULT AutoFormatAsYouTypeReplaceHyperlinks([in] VARIANT_BOOL prop);
        [id(0x00000111), propget, helpcontext(0x09b70111)]
        HRESULT AutoFormatReplaceHyperlinks([out, retval] VARIANT_BOOL* prop);
        [id(0x00000111), propput, helpcontext(0x09b70111)]
        HRESULT AutoFormatReplaceHyperlinks([in] VARIANT_BOOL prop);
        [id(0x00000112), propget, helpcontext(0x09b70112)]
        HRESULT DefaultHighlightColorIndex([out, retval] WdColorIndex* prop);
        [id(0x00000112), propput, helpcontext(0x09b70112)]
        HRESULT DefaultHighlightColorIndex([in] WdColorIndex prop);
        [id(0x00000113), propget, helpcontext(0x09b70113)]
        HRESULT DefaultBorderLineStyle([out, retval] WdLineStyle* prop);
        [id(0x00000113), propput, helpcontext(0x09b70113)]
        HRESULT DefaultBorderLineStyle([in] WdLineStyle prop);
        [id(0x00000114), propget, helpcontext(0x09b70114)]
        HRESULT CheckSpellingAsYouType([out, retval] VARIANT_BOOL* prop);
        [id(0x00000114), propput, helpcontext(0x09b70114)]
        HRESULT CheckSpellingAsYouType([in] VARIANT_BOOL prop);
        [id(0x00000115), propget, helpcontext(0x09b70115)]
        HRESULT CheckGrammarAsYouType([out, retval] VARIANT_BOOL* prop);
        [id(0x00000115), propput, helpcontext(0x09b70115)]
        HRESULT CheckGrammarAsYouType([in] VARIANT_BOOL prop);
        [id(0x00000116), propget, helpcontext(0x09b70116)]
        HRESULT IgnoreInternetAndFileAddresses([out, retval] VARIANT_BOOL* prop);
        [id(0x00000116), propput, helpcontext(0x09b70116)]
        HRESULT IgnoreInternetAndFileAddresses([in] VARIANT_BOOL prop);
        [id(0x00000117), propget, helpcontext(0x09b70117)]
        HRESULT ShowReadabilityStatistics([out, retval] VARIANT_BOOL* prop);
        [id(0x00000117), propput, helpcontext(0x09b70117)]
        HRESULT ShowReadabilityStatistics([in] VARIANT_BOOL prop);
        [id(0x00000118), propget, helpcontext(0x09b70118)]
        HRESULT IgnoreUppercase([out, retval] VARIANT_BOOL* prop);
        [id(0x00000118), propput, helpcontext(0x09b70118)]
        HRESULT IgnoreUppercase([in] VARIANT_BOOL prop);
        [id(0x00000119), propget, helpcontext(0x09b70119)]
        HRESULT IgnoreMixedDigits([out, retval] VARIANT_BOOL* prop);
        [id(0x00000119), propput, helpcontext(0x09b70119)]
        HRESULT IgnoreMixedDigits([in] VARIANT_BOOL prop);
        [id(0x0000011a), propget, helpcontext(0x09b7011a)]
        HRESULT SuggestFromMainDictionaryOnly([out, retval] VARIANT_BOOL* prop);
        [id(0x0000011a), propput, helpcontext(0x09b7011a)]
        HRESULT SuggestFromMainDictionaryOnly([in] VARIANT_BOOL prop);
        [id(0x0000011b), propget, helpcontext(0x09b7011b)]
        HRESULT SuggestSpellingCorrections([out, retval] VARIANT_BOOL* prop);
        [id(0x0000011b), propput, helpcontext(0x09b7011b)]
        HRESULT SuggestSpellingCorrections([in] VARIANT_BOOL prop);
        [id(0x0000011c), propget, helpcontext(0x09b7011c)]
        HRESULT DefaultBorderLineWidth([out, retval] WdLineWidth* prop);
        [id(0x0000011c), propput, helpcontext(0x09b7011c)]
        HRESULT DefaultBorderLineWidth([in] WdLineWidth prop);
        [id(0x0000011d), propget, helpcontext(0x09b7011d)]
        HRESULT CheckGrammarWithSpelling([out, retval] VARIANT_BOOL* prop);
        [id(0x0000011d), propput, helpcontext(0x09b7011d)]
        HRESULT CheckGrammarWithSpelling([in] VARIANT_BOOL prop);
        [id(0x0000011e), propget, helpcontext(0x09b7011e)]
        HRESULT DefaultOpenFormat([out, retval] WdOpenFormat* prop);
        [id(0x0000011e), propput, helpcontext(0x09b7011e)]
        HRESULT DefaultOpenFormat([in] WdOpenFormat prop);
        [id(0x0000011f), propget, helpcontext(0x09b7011f)]
        HRESULT PrintDraft([out, retval] VARIANT_BOOL* prop);
        [id(0x0000011f), propput, helpcontext(0x09b7011f)]
        HRESULT PrintDraft([in] VARIANT_BOOL prop);
        [id(0x00000120), propget, helpcontext(0x09b70120)]
        HRESULT PrintReverse([out, retval] VARIANT_BOOL* prop);
        [id(0x00000120), propput, helpcontext(0x09b70120)]
        HRESULT PrintReverse([in] VARIANT_BOOL prop);
        [id(0x00000121), propget, helpcontext(0x09b70121)]
        HRESULT MapPaperSize([out, retval] VARIANT_BOOL* prop);
        [id(0x00000121), propput, helpcontext(0x09b70121)]
        HRESULT MapPaperSize([in] VARIANT_BOOL prop);
        [id(0x00000122), propget, helpcontext(0x09b70122)]
        HRESULT AutoFormatAsYouTypeApplyTables([out, retval] VARIANT_BOOL* prop);
        [id(0x00000122), propput, helpcontext(0x09b70122)]
        HRESULT AutoFormatAsYouTypeApplyTables([in] VARIANT_BOOL prop);
        [id(0x00000123), propget, helpcontext(0x09b70123)]
        HRESULT AutoFormatApplyFirstIndents([out, retval] VARIANT_BOOL* prop);
        [id(0x00000123), propput, helpcontext(0x09b70123)]
        HRESULT AutoFormatApplyFirstIndents([in] VARIANT_BOOL prop);
        [id(0x00000126), propget, helpcontext(0x09b70126)]
        HRESULT AutoFormatMatchParentheses([out, retval] VARIANT_BOOL* prop);
        [id(0x00000126), propput, helpcontext(0x09b70126)]
        HRESULT AutoFormatMatchParentheses([in] VARIANT_BOOL prop);
        [id(0x00000127), propget, helpcontext(0x09b70127)]
        HRESULT AutoFormatReplaceFarEastDashes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000127), propput, helpcontext(0x09b70127)]
        HRESULT AutoFormatReplaceFarEastDashes([in] VARIANT_BOOL prop);
        [id(0x00000128), propget, helpcontext(0x09b70128)]
        HRESULT AutoFormatDeleteAutoSpaces([out, retval] VARIANT_BOOL* prop);
        [id(0x00000128), propput, helpcontext(0x09b70128)]
        HRESULT AutoFormatDeleteAutoSpaces([in] VARIANT_BOOL prop);
        [id(0x00000129), propget, helpcontext(0x09b70129)]
        HRESULT AutoFormatAsYouTypeApplyFirstIndents([out, retval] VARIANT_BOOL* prop);
        [id(0x00000129), propput, helpcontext(0x09b70129)]
        HRESULT AutoFormatAsYouTypeApplyFirstIndents([in] VARIANT_BOOL prop);
        [id(0x0000012a), propget, helpcontext(0x09b7012a)]
        HRESULT AutoFormatAsYouTypeApplyDates([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012a), propput, helpcontext(0x09b7012a)]
        HRESULT AutoFormatAsYouTypeApplyDates([in] VARIANT_BOOL prop);
        [id(0x0000012b), propget, helpcontext(0x09b7012b)]
        HRESULT AutoFormatAsYouTypeApplyClosings([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012b), propput, helpcontext(0x09b7012b)]
        HRESULT AutoFormatAsYouTypeApplyClosings([in] VARIANT_BOOL prop);
        [id(0x0000012c), propget, helpcontext(0x09b7012c)]
        HRESULT AutoFormatAsYouTypeMatchParentheses([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012c), propput, helpcontext(0x09b7012c)]
        HRESULT AutoFormatAsYouTypeMatchParentheses([in] VARIANT_BOOL prop);
        [id(0x0000012d), propget, helpcontext(0x09b7012d)]
        HRESULT AutoFormatAsYouTypeReplaceFarEastDashes([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012d), propput, helpcontext(0x09b7012d)]
        HRESULT AutoFormatAsYouTypeReplaceFarEastDashes([in] VARIANT_BOOL prop);
        [id(0x0000012e), propget, helpcontext(0x09b7012e)]
        HRESULT AutoFormatAsYouTypeDeleteAutoSpaces([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012e), propput, helpcontext(0x09b7012e)]
        HRESULT AutoFormatAsYouTypeDeleteAutoSpaces([in] VARIANT_BOOL prop);
        [id(0x0000012f), propget, helpcontext(0x09b7012f)]
        HRESULT AutoFormatAsYouTypeInsertClosings([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012f), propput, helpcontext(0x09b7012f)]
        HRESULT AutoFormatAsYouTypeInsertClosings([in] VARIANT_BOOL prop);
        [id(0x00000130), propget, helpcontext(0x09b70130)]
        HRESULT AutoFormatAsYouTypeAutoLetterWizard([out, retval] VARIANT_BOOL* prop);
        [id(0x00000130), propput, helpcontext(0x09b70130)]
        HRESULT AutoFormatAsYouTypeAutoLetterWizard([in] VARIANT_BOOL prop);
        [id(0x00000131), propget, helpcontext(0x09b70131)]
        HRESULT AutoFormatAsYouTypeInsertOvers([out, retval] VARIANT_BOOL* prop);
        [id(0x00000131), propput, helpcontext(0x09b70131)]
        HRESULT AutoFormatAsYouTypeInsertOvers([in] VARIANT_BOOL prop);
        [id(0x00000132), propget, helpcontext(0x09b70132)]
        HRESULT DisplayGridLines([out, retval] VARIANT_BOOL* prop);
        [id(0x00000132), propput, helpcontext(0x09b70132)]
        HRESULT DisplayGridLines([in] VARIANT_BOOL prop);
        [id(0x00000135), propget, helpcontext(0x09b70135)]
        HRESULT MatchFuzzyCase([out, retval] VARIANT_BOOL* prop);
        [id(0x00000135), propput, helpcontext(0x09b70135)]
        HRESULT MatchFuzzyCase([in] VARIANT_BOOL prop);
        [id(0x00000136), propget, helpcontext(0x09b70136)]
        HRESULT MatchFuzzyByte([out, retval] VARIANT_BOOL* prop);
        [id(0x00000136), propput, helpcontext(0x09b70136)]
        HRESULT MatchFuzzyByte([in] VARIANT_BOOL prop);
        [id(0x00000137), propget, helpcontext(0x09b70137)]
        HRESULT MatchFuzzyHiragana([out, retval] VARIANT_BOOL* prop);
        [id(0x00000137), propput, helpcontext(0x09b70137)]
        HRESULT MatchFuzzyHiragana([in] VARIANT_BOOL prop);
        [id(0x00000138), propget, helpcontext(0x09b70138)]
        HRESULT MatchFuzzySmallKana([out, retval] VARIANT_BOOL* prop);
        [id(0x00000138), propput, helpcontext(0x09b70138)]
        HRESULT MatchFuzzySmallKana([in] VARIANT_BOOL prop);
        [id(0x00000139), propget, helpcontext(0x09b70139)]
        HRESULT MatchFuzzyDash([out, retval] VARIANT_BOOL* prop);
        [id(0x00000139), propput, helpcontext(0x09b70139)]
        HRESULT MatchFuzzyDash([in] VARIANT_BOOL prop);
        [id(0x0000013a), propget, helpcontext(0x09b7013a)]
        HRESULT MatchFuzzyIterationMark([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013a), propput, helpcontext(0x09b7013a)]
        HRESULT MatchFuzzyIterationMark([in] VARIANT_BOOL prop);
        [id(0x0000013b), propget, helpcontext(0x09b7013b)]
        HRESULT MatchFuzzyKanji([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013b), propput, helpcontext(0x09b7013b)]
        HRESULT MatchFuzzyKanji([in] VARIANT_BOOL prop);
        [id(0x0000013c), propget, helpcontext(0x09b7013c)]
        HRESULT MatchFuzzyOldKana([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013c), propput, helpcontext(0x09b7013c)]
        HRESULT MatchFuzzyOldKana([in] VARIANT_BOOL prop);
        [id(0x0000013d), propget, helpcontext(0x09b7013d)]
        HRESULT MatchFuzzyProlongedSoundMark([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013d), propput, helpcontext(0x09b7013d)]
        HRESULT MatchFuzzyProlongedSoundMark([in] VARIANT_BOOL prop);
        [id(0x0000013e), propget, helpcontext(0x09b7013e)]
        HRESULT MatchFuzzyDZ([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013e), propput, helpcontext(0x09b7013e)]
        HRESULT MatchFuzzyDZ([in] VARIANT_BOOL prop);
        [id(0x0000013f), propget, helpcontext(0x09b7013f)]
        HRESULT MatchFuzzyBV([out, retval] VARIANT_BOOL* prop);
        [id(0x0000013f), propput, helpcontext(0x09b7013f)]
        HRESULT MatchFuzzyBV([in] VARIANT_BOOL prop);
        [id(0x00000140), propget, helpcontext(0x09b70140)]
        HRESULT MatchFuzzyTC([out, retval] VARIANT_BOOL* prop);
        [id(0x00000140), propput, helpcontext(0x09b70140)]
        HRESULT MatchFuzzyTC([in] VARIANT_BOOL prop);
        [id(0x00000141), propget, helpcontext(0x09b70141)]
        HRESULT MatchFuzzyHF([out, retval] VARIANT_BOOL* prop);
        [id(0x00000141), propput, helpcontext(0x09b70141)]
        HRESULT MatchFuzzyHF([in] VARIANT_BOOL prop);
        [id(0x00000142), propget, helpcontext(0x09b70142)]
        HRESULT MatchFuzzyZJ([out, retval] VARIANT_BOOL* prop);
        [id(0x00000142), propput, helpcontext(0x09b70142)]
        HRESULT MatchFuzzyZJ([in] VARIANT_BOOL prop);
        [id(0x00000143), propget, helpcontext(0x09b70143)]
        HRESULT MatchFuzzyAY([out, retval] VARIANT_BOOL* prop);
        [id(0x00000143), propput, helpcontext(0x09b70143)]
        HRESULT MatchFuzzyAY([in] VARIANT_BOOL prop);
        [id(0x00000144), propget, helpcontext(0x09b70144)]
        HRESULT MatchFuzzyKiKu([out, retval] VARIANT_BOOL* prop);
        [id(0x00000144), propput, helpcontext(0x09b70144)]
        HRESULT MatchFuzzyKiKu([in] VARIANT_BOOL prop);
        [id(0x00000145), propget, helpcontext(0x09b70145)]
        HRESULT MatchFuzzyPunctuation([out, retval] VARIANT_BOOL* prop);
        [id(0x00000145), propput, helpcontext(0x09b70145)]
        HRESULT MatchFuzzyPunctuation([in] VARIANT_BOOL prop);
        [id(0x00000146), propget, helpcontext(0x09b70146)]
        HRESULT MatchFuzzySpace([out, retval] VARIANT_BOOL* prop);
        [id(0x00000146), propput, helpcontext(0x09b70146)]
        HRESULT MatchFuzzySpace([in] VARIANT_BOOL prop);
        [id(0x00000147), propget, helpcontext(0x09b70147)]
        HRESULT ApplyFarEastFontsToAscii([out, retval] VARIANT_BOOL* prop);
        [id(0x00000147), propput, helpcontext(0x09b70147)]
        HRESULT ApplyFarEastFontsToAscii([in] VARIANT_BOOL prop);
        [id(0x00000148), propget, helpcontext(0x09b70148)]
        HRESULT ConvertHighAnsiToFarEast([out, retval] VARIANT_BOOL* prop);
        [id(0x00000148), propput, helpcontext(0x09b70148)]
        HRESULT ConvertHighAnsiToFarEast([in] VARIANT_BOOL prop);
        [id(0x0000014a), propget, helpcontext(0x09b7014a)]
        HRESULT PrintOddPagesInAscendingOrder([out, retval] VARIANT_BOOL* prop);
        [id(0x0000014a), propput, helpcontext(0x09b7014a)]
        HRESULT PrintOddPagesInAscendingOrder([in] VARIANT_BOOL prop);
        [id(0x0000014b), propget, helpcontext(0x09b7014b)]
        HRESULT PrintEvenPagesInAscendingOrder([out, retval] VARIANT_BOOL* prop);
        [id(0x0000014b), propput, helpcontext(0x09b7014b)]
        HRESULT PrintEvenPagesInAscendingOrder([in] VARIANT_BOOL prop);
        [id(0x00000151), propget, helpcontext(0x09b70151)]
        HRESULT DefaultBorderColorIndex([out, retval] WdColorIndex* prop);
        [id(0x00000151), propput, helpcontext(0x09b70151)]
        HRESULT DefaultBorderColorIndex([in] WdColorIndex prop);
        [id(0x00000152), propget, helpcontext(0x09b70152)]
        HRESULT EnableMisusedWordsDictionary([out, retval] VARIANT_BOOL* prop);
        [id(0x00000152), propput, helpcontext(0x09b70152)]
        HRESULT EnableMisusedWordsDictionary([in] VARIANT_BOOL prop);
        [id(0x00000153), propget, helpcontext(0x09b70153)]
        HRESULT AllowCombinedAuxiliaryForms([out, retval] VARIANT_BOOL* prop);
        [id(0x00000153), propput, helpcontext(0x09b70153)]
        HRESULT AllowCombinedAuxiliaryForms([in] VARIANT_BOOL prop);
        [id(0x00000154), propget, helpcontext(0x09b70154)]
        HRESULT HangulHanjaFastConversion([out, retval] VARIANT_BOOL* prop);
        [id(0x00000154), propput, helpcontext(0x09b70154)]
        HRESULT HangulHanjaFastConversion([in] VARIANT_BOOL prop);
        [id(0x00000155), propget, helpcontext(0x09b70155)]
        HRESULT CheckHangulEndings([out, retval] VARIANT_BOOL* prop);
        [id(0x00000155), propput, helpcontext(0x09b70155)]
        HRESULT CheckHangulEndings([in] VARIANT_BOOL prop);
        [id(0x00000156), propget, helpcontext(0x09b70156)]
        HRESULT EnableHangulHanjaRecentOrdering([out, retval] VARIANT_BOOL* prop);
        [id(0x00000156), propput, helpcontext(0x09b70156)]
        HRESULT EnableHangulHanjaRecentOrdering([in] VARIANT_BOOL prop);
        [id(0x00000157), propget, helpcontext(0x09b70157)]
        HRESULT MultipleWordConversionsMode([out, retval] WdMultipleWordConversionsMode* prop);
        [id(0x00000157), propput, helpcontext(0x09b70157)]
        HRESULT MultipleWordConversionsMode([in] WdMultipleWordConversionsMode prop);
        [id(0x0000014d), hidden, helpcontext(0x09b7014d)]
        HRESULT SetWPHelpOptions(
                        [in, optional] VARIANT* CommandKeyHelp, 
                        [in, optional] VARIANT* DocNavigationKeys, 
                        [in, optional] VARIANT* MouseSimulation, 
                        [in, optional] VARIANT* DemoGuidance, 
                        [in, optional] VARIANT* DemoSpeed, 
                        [in, optional] VARIANT* HelpType);
        [id(0x00000158), propget, helpcontext(0x09b70158)]
        HRESULT DefaultBorderColor([out, retval] WdColor* prop);
        [id(0x00000158), propput, helpcontext(0x09b70158)]
        HRESULT DefaultBorderColor([in] WdColor prop);
        [id(0x00000159), propget, helpcontext(0x09b70159)]
        HRESULT AllowPixelUnits([out, retval] VARIANT_BOOL* prop);
        [id(0x00000159), propput, helpcontext(0x09b70159)]
        HRESULT AllowPixelUnits([in] VARIANT_BOOL prop);
        [id(0x0000015a), propget, helpcontext(0x09b7015a)]
        HRESULT UseCharacterUnit([out, retval] VARIANT_BOOL* prop);
        [id(0x0000015a), propput, helpcontext(0x09b7015a)]
        HRESULT UseCharacterUnit([in] VARIANT_BOOL prop);
        [id(0x0000015b), propget, helpcontext(0x09b7015b)]
        HRESULT AllowCompoundNounProcessing([out, retval] VARIANT_BOOL* prop);
        [id(0x0000015b), propput, helpcontext(0x09b7015b)]
        HRESULT AllowCompoundNounProcessing([in] VARIANT_BOOL prop);
        [id(0x0000018f), propget, helpcontext(0x09b7018f)]
        HRESULT AutoKeyboardSwitching([out, retval] VARIANT_BOOL* prop);
        [id(0x0000018f), propput, helpcontext(0x09b7018f)]
        HRESULT AutoKeyboardSwitching([in] VARIANT_BOOL prop);
        [id(0x00000190), propget, helpcontext(0x09b70190)]
        HRESULT DocumentViewDirection([out, retval] WdDocumentViewDirection* prop);
        [id(0x00000190), propput, helpcontext(0x09b70190)]
        HRESULT DocumentViewDirection([in] WdDocumentViewDirection prop);
        [id(0x00000191), propget, helpcontext(0x09b70191)]
        HRESULT ArabicNumeral([out, retval] WdArabicNumeral* prop);
        [id(0x00000191), propput, helpcontext(0x09b70191)]
        HRESULT ArabicNumeral([in] WdArabicNumeral prop);
        [id(0x00000192), propget, helpcontext(0x09b70192)]
        HRESULT MonthNames([out, retval] WdMonthNames* prop);
        [id(0x00000192), propput, helpcontext(0x09b70192)]
        HRESULT MonthNames([in] WdMonthNames prop);
        [id(0x00000193), propget, helpcontext(0x09b70193)]
        HRESULT CursorMovement([out, retval] WdCursorMovement* prop);
        [id(0x00000193), propput, helpcontext(0x09b70193)]
        HRESULT CursorMovement([in] WdCursorMovement prop);
        [id(0x00000194), propget, helpcontext(0x09b70194)]
        HRESULT VisualSelection([out, retval] WdVisualSelection* prop);
        [id(0x00000194), propput, helpcontext(0x09b70194)]
        HRESULT VisualSelection([in] WdVisualSelection prop);
        [id(0x00000195), propget, helpcontext(0x09b70195)]
        HRESULT ShowDiacritics([out, retval] VARIANT_BOOL* prop);
        [id(0x00000195), propput, helpcontext(0x09b70195)]
        HRESULT ShowDiacritics([in] VARIANT_BOOL prop);
        [id(0x00000196), propget, helpcontext(0x09b70196)]
        HRESULT ShowControlCharacters([out, retval] VARIANT_BOOL* prop);
        [id(0x00000196), propput, helpcontext(0x09b70196)]
        HRESULT ShowControlCharacters([in] VARIANT_BOOL prop);
        [id(0x00000197), propget, helpcontext(0x09b70197)]
        HRESULT AddControlCharacters([out, retval] VARIANT_BOOL* prop);
        [id(0x00000197), propput, helpcontext(0x09b70197)]
        HRESULT AddControlCharacters([in] VARIANT_BOOL prop);
        [id(0x00000198), propget, helpcontext(0x09b70198)]
        HRESULT AddBiDirectionalMarksWhenSavingTextFile([out, retval] VARIANT_BOOL* prop);
        [id(0x00000198), propput, helpcontext(0x09b70198)]
        HRESULT AddBiDirectionalMarksWhenSavingTextFile([in] VARIANT_BOOL prop);
        [id(0x00000199), propget, helpcontext(0x09b70199)]
        HRESULT StrictInitialAlefHamza([out, retval] VARIANT_BOOL* prop);
        [id(0x00000199), propput, helpcontext(0x09b70199)]
        HRESULT StrictInitialAlefHamza([in] VARIANT_BOOL prop);
        [id(0x0000019a), propget, helpcontext(0x09b7019a)]
        HRESULT StrictFinalYaa([out, retval] VARIANT_BOOL* prop);
        [id(0x0000019a), propput, helpcontext(0x09b7019a)]
        HRESULT StrictFinalYaa([in] VARIANT_BOOL prop);
        [id(0x0000019b), propget, helpcontext(0x09b7019b)]
        HRESULT HebrewMode([out, retval] WdHebSpellStart* prop);
        [id(0x0000019b), propput, helpcontext(0x09b7019b)]
        HRESULT HebrewMode([in] WdHebSpellStart prop);
        [id(0x0000019c), propget, helpcontext(0x09b7019c)]
        HRESULT ArabicMode([out, retval] WdAraSpeller* prop);
        [id(0x0000019c), propput, helpcontext(0x09b7019c)]
        HRESULT ArabicMode([in] WdAraSpeller prop);
        [id(0x0000019d), propget, helpcontext(0x09b7019d)]
        HRESULT AllowClickAndTypeMouse([out, retval] VARIANT_BOOL* prop);
        [id(0x0000019d), propput, helpcontext(0x09b7019d)]
        HRESULT AllowClickAndTypeMouse([in] VARIANT_BOOL prop);
        [id(0x0000019f), propget, helpcontext(0x09b7019f)]
        HRESULT UseGermanSpellingReform([out, retval] VARIANT_BOOL* prop);
        [id(0x0000019f), propput, helpcontext(0x09b7019f)]
        HRESULT UseGermanSpellingReform([in] VARIANT_BOOL prop);
        [id(0x000001a2), propget, helpcontext(0x09b701a2)]
        HRESULT InterpretHighAnsi([out, retval] WdHighAnsiText* prop);
        [id(0x000001a2), propput, helpcontext(0x09b701a2)]
        HRESULT InterpretHighAnsi([in] WdHighAnsiText prop);
        [id(0x000001a3), propget, helpcontext(0x09b701a3)]
        HRESULT AddHebDoubleQuote([out, retval] VARIANT_BOOL* prop);
        [id(0x000001a3), propput, helpcontext(0x09b701a3)]
        HRESULT AddHebDoubleQuote([in] VARIANT_BOOL prop);
        [id(0x000001a4), propget, helpcontext(0x09b701a4)]
        HRESULT UseDiffDiacColor([out, retval] VARIANT_BOOL* prop);
        [id(0x000001a4), propput, helpcontext(0x09b701a4)]
        HRESULT UseDiffDiacColor([in] VARIANT_BOOL prop);
        [id(0x000001a5), propget, helpcontext(0x09b701a5)]
        HRESULT DiacriticColorVal([out, retval] WdColor* prop);
        [id(0x000001a5), propput, helpcontext(0x09b701a5)]
        HRESULT DiacriticColorVal([in] WdColor prop);
        [id(0x000001a7), propget, helpcontext(0x09b701a7)]
        HRESULT OptimizeForWord97byDefault([out, retval] VARIANT_BOOL* prop);
        [id(0x000001a7), propput, helpcontext(0x09b701a7)]
        HRESULT OptimizeForWord97byDefault([in] VARIANT_BOOL prop);
        [id(0x000001a8), propget, helpcontext(0x09b701a8)]
        HRESULT LocalNetworkFile([out, retval] VARIANT_BOOL* prop);
        [id(0x000001a8), propput, helpcontext(0x09b701a8)]
        HRESULT LocalNetworkFile([in] VARIANT_BOOL prop);
        [id(0x000001a9), propget, helpcontext(0x09b701a9)]
        HRESULT TypeNReplace([out, retval] VARIANT_BOOL* prop);
        [id(0x000001a9), propput, helpcontext(0x09b701a9)]
        HRESULT TypeNReplace([in] VARIANT_BOOL prop);
        [id(0x000001aa), propget, helpcontext(0x09b701aa)]
        HRESULT SequenceCheck([out, retval] VARIANT_BOOL* prop);
        [id(0x000001aa), propput, helpcontext(0x09b701aa)]
        HRESULT SequenceCheck([in] VARIANT_BOOL prop);
        [id(0x000001ab), propget, hidden, helpcontext(0x09b701ab)]
        HRESULT BackgroundOpen([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ab), propput, hidden, helpcontext(0x09b701ab)]
        HRESULT BackgroundOpen([in] VARIANT_BOOL prop);
        [id(0x000001ac), propget, helpcontext(0x09b701ac)]
        HRESULT DisableFeaturesbyDefault([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ac), propput, helpcontext(0x09b701ac)]
        HRESULT DisableFeaturesbyDefault([in] VARIANT_BOOL prop);
        [id(0x000001ad), propget, helpcontext(0x09b701ad)]
        HRESULT PasteAdjustWordSpacing([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ad), propput, helpcontext(0x09b701ad)]
        HRESULT PasteAdjustWordSpacing([in] VARIANT_BOOL prop);
        [id(0x000001ae), propget, helpcontext(0x09b701ae)]
        HRESULT PasteAdjustParagraphSpacing([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ae), propput, helpcontext(0x09b701ae)]
        HRESULT PasteAdjustParagraphSpacing([in] VARIANT_BOOL prop);
        [id(0x000001af), propget, helpcontext(0x09b701af)]
        HRESULT PasteAdjustTableFormatting([out, retval] VARIANT_BOOL* prop);
        [id(0x000001af), propput, helpcontext(0x09b701af)]
        HRESULT PasteAdjustTableFormatting([in] VARIANT_BOOL prop);
        [id(0x000001b0), propget, helpcontext(0x09b701b0)]
        HRESULT PasteSmartStyleBehavior([out, retval] VARIANT_BOOL* prop);
        [id(0x000001b0), propput, helpcontext(0x09b701b0)]
        HRESULT PasteSmartStyleBehavior([in] VARIANT_BOOL prop);
        [id(0x000001b1), propget, helpcontext(0x09b701b1)]
        HRESULT PasteMergeFromPPT([out, retval] VARIANT_BOOL* prop);
        [id(0x000001b1), propput, helpcontext(0x09b701b1)]
        HRESULT PasteMergeFromPPT([in] VARIANT_BOOL prop);
        [id(0x000001b2), propget, helpcontext(0x09b701b2)]
        HRESULT PasteMergeFromXL([out, retval] VARIANT_BOOL* prop);
        [id(0x000001b2), propput, helpcontext(0x09b701b2)]
        HRESULT PasteMergeFromXL([in] VARIANT_BOOL prop);
        [id(0x000001b3), propget, helpcontext(0x09b701b3)]
        HRESULT CtrlClickHyperlinkToOpen([out, retval] VARIANT_BOOL* prop);
        [id(0x000001b3), propput, helpcontext(0x09b701b3)]
        HRESULT CtrlClickHyperlinkToOpen([in] VARIANT_BOOL prop);
        [id(0x000001b4), propget, helpcontext(0x09b701b4)]
        HRESULT PictureWrapType([out, retval] WdWrapTypeMerged* prop);
        [id(0x000001b4), propput, helpcontext(0x09b701b4)]
        HRESULT PictureWrapType([in] WdWrapTypeMerged prop);
        [id(0x000001b5), propget, helpcontext(0x09b701b5)]
        HRESULT DisableFeaturesIntroducedAfterbyDefault([out, retval] WdDisableFeaturesIntroducedAfter* prop);
        [id(0x000001b5), propput, helpcontext(0x09b701b5)]
        HRESULT DisableFeaturesIntroducedAfterbyDefault([in] WdDisableFeaturesIntroducedAfter prop);
        [id(0x000001b6), propget, helpcontext(0x09b701b6)]
        HRESULT PasteSmartCutPaste([out, retval] VARIANT_BOOL* prop);
        [id(0x000001b6), propput, helpcontext(0x09b701b6)]
        HRESULT PasteSmartCutPaste([in] VARIANT_BOOL prop);
        [id(0x000001b7), propget, helpcontext(0x09b701b7)]
        HRESULT DisplayPasteOptions([out, retval] VARIANT_BOOL* prop);
        [id(0x000001b7), propput, helpcontext(0x09b701b7)]
        HRESULT DisplayPasteOptions([in] VARIANT_BOOL prop);
        [id(0x000001b9), propget, helpcontext(0x09b701b9)]
        HRESULT PromptUpdateStyle([out, retval] VARIANT_BOOL* prop);
        [id(0x000001b9), propput, helpcontext(0x09b701b9)]
        HRESULT PromptUpdateStyle([in] VARIANT_BOOL prop);
        [id(0x000001ba), propget, helpcontext(0x09b701ba)]
        HRESULT DefaultEPostageApp([out, retval] BSTR* prop);
        [id(0x000001ba), propput, helpcontext(0x09b701ba)]
        HRESULT DefaultEPostageApp([in] BSTR prop);
        [id(0x000001bb), propget, helpcontext(0x09b701bb)]
        HRESULT DefaultTextEncoding([out, retval] MsoEncoding* prop);
        [id(0x000001bb), propput, helpcontext(0x09b701bb)]
        HRESULT DefaultTextEncoding([in] MsoEncoding prop);
        [id(0x000001bc), propget, hidden, helpcontext(0x09b701bc)]
        HRESULT LabelSmartTags([out, retval] VARIANT_BOOL* prop);
        [id(0x000001bc), propput, hidden, helpcontext(0x09b701bc)]
        HRESULT LabelSmartTags([in] VARIANT_BOOL prop);
        [id(0x000001bd), propget, hidden, helpcontext(0x09b701bd)]
        HRESULT DisplaySmartTagButtons([out, retval] VARIANT_BOOL* prop);
        [id(0x000001bd), propput, hidden, helpcontext(0x09b701bd)]
        HRESULT DisplaySmartTagButtons([in] VARIANT_BOOL prop);
        [id(0x000001be), propget, helpcontext(0x09b701be)]
        HRESULT WarnBeforeSavingPrintingSendingMarkup([out, retval] VARIANT_BOOL* prop);
        [id(0x000001be), propput, helpcontext(0x09b701be)]
        HRESULT WarnBeforeSavingPrintingSendingMarkup([in] VARIANT_BOOL prop);
        [id(0x000001bf), propget, helpcontext(0x09b701bf)]
        HRESULT StoreRSIDOnSave([out, retval] VARIANT_BOOL* prop);
        [id(0x000001bf), propput, helpcontext(0x09b701bf)]
        HRESULT StoreRSIDOnSave([in] VARIANT_BOOL prop);
        [id(0x000001c0), propget, helpcontext(0x09b701c0)]
        HRESULT ShowFormatError([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c0), propput, helpcontext(0x09b701c0)]
        HRESULT ShowFormatError([in] VARIANT_BOOL prop);
        [id(0x000001c1), propget, helpcontext(0x09b701c1)]
        HRESULT FormatScanning([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c1), propput, helpcontext(0x09b701c1)]
        HRESULT FormatScanning([in] VARIANT_BOOL prop);
        [id(0x000001c2), propget, helpcontext(0x09b701c2)]
        HRESULT PasteMergeLists([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c2), propput, helpcontext(0x09b701c2)]
        HRESULT PasteMergeLists([in] VARIANT_BOOL prop);
        [id(0x000001c3), propget, helpcontext(0x09b701c3)]
        HRESULT AutoCreateNewDrawings([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c3), propput, helpcontext(0x09b701c3)]
        HRESULT AutoCreateNewDrawings([in] VARIANT_BOOL prop);
        [id(0x000001c4), propget, helpcontext(0x09b701c4)]
        HRESULT SmartParaSelection([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c4), propput, helpcontext(0x09b701c4)]
        HRESULT SmartParaSelection([in] VARIANT_BOOL prop);
        [id(0x000001c5), propget, helpcontext(0x09b701c5)]
        HRESULT RevisionsBalloonPrintOrientation([out, retval] WdRevisionsBalloonPrintOrientation* prop);
        [id(0x000001c5), propput, helpcontext(0x09b701c5)]
        HRESULT RevisionsBalloonPrintOrientation([in] WdRevisionsBalloonPrintOrientation prop);
        [id(0x000001c6), propget, helpcontext(0x09b701c6)]
        HRESULT CommentsColor([out, retval] WdColorIndex* prop);
        [id(0x000001c6), propput, helpcontext(0x09b701c6)]
        HRESULT CommentsColor([in] WdColorIndex prop);
        [id(0x000001c7), propget, helpcontext(0x09b701c7)]
        HRESULT PrintXMLTag([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c7), propput, helpcontext(0x09b701c7)]
        HRESULT PrintXMLTag([in] VARIANT_BOOL prop);
        [id(0x000001c8), propget, helpcontext(0x09b701c8)]
        HRESULT PrintBackgrounds([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c8), propput, helpcontext(0x09b701c8)]
        HRESULT PrintBackgrounds([in] VARIANT_BOOL prop);
        [id(0x000001c9), propget, helpcontext(0x09b701c9)]
        HRESULT AllowReadingMode([out, retval] VARIANT_BOOL* prop);
        [id(0x000001c9), propput, helpcontext(0x09b701c9)]
        HRESULT AllowReadingMode([in] VARIANT_BOOL prop);
        [id(0x000001ca), propget, helpcontext(0x09b701ca)]
        HRESULT ShowMarkupOpenSave([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ca), propput, helpcontext(0x09b701ca)]
        HRESULT ShowMarkupOpenSave([in] VARIANT_BOOL prop);
        [id(0x000001cb), propget, helpcontext(0x09b701cb)]
        HRESULT SmartCursoring([out, retval] VARIANT_BOOL* prop);
        [id(0x000001cb), propput, helpcontext(0x09b701cb)]
        HRESULT SmartCursoring([in] VARIANT_BOOL prop);
        [id(0x000001cc), propget, helpcontext(0x09b701cc)]
        HRESULT MoveToTextMark([out, retval] WdMoveToTextMark* prop);
        [id(0x000001cc), propput, helpcontext(0x09b701cc)]
        HRESULT MoveToTextMark([in] WdMoveToTextMark prop);
        [id(0x000001cd), propget, helpcontext(0x09b701cd)]
        HRESULT MoveFromTextMark([out, retval] WdMoveFromTextMark* prop);
        [id(0x000001cd), propput, helpcontext(0x09b701cd)]
        HRESULT MoveFromTextMark([in] WdMoveFromTextMark prop);
        [id(0x000001ce), propget, helpcontext(0x09b701ce)]
        HRESULT BibliographyStyle([out, retval] BSTR* prop);
        [id(0x000001ce), propput, helpcontext(0x09b701ce)]
        HRESULT BibliographyStyle([in] BSTR prop);
        [id(0x000001cf), propget, helpcontext(0x09b701cf)]
        HRESULT BibliographySort([out, retval] BSTR* prop);
        [id(0x000001cf), propput, helpcontext(0x09b701cf)]
        HRESULT BibliographySort([in] BSTR prop);
        [id(0x000001d0), propget, helpcontext(0x09b701d0)]
        HRESULT InsertedCellColor([out, retval] WdCellColor* prop);
        [id(0x000001d0), propput, helpcontext(0x09b701d0)]
        HRESULT InsertedCellColor([in] WdCellColor prop);
        [id(0x000001d1), propget, helpcontext(0x09b701d1)]
        HRESULT DeletedCellColor([out, retval] WdCellColor* prop);
        [id(0x000001d1), propput, helpcontext(0x09b701d1)]
        HRESULT DeletedCellColor([in] WdCellColor prop);
        [id(0x000001d2), propget, helpcontext(0x09b701d2)]
        HRESULT MergedCellColor([out, retval] WdCellColor* prop);
        [id(0x000001d2), propput, helpcontext(0x09b701d2)]
        HRESULT MergedCellColor([in] WdCellColor prop);
        [id(0x000001d3), propget, helpcontext(0x09b701d3)]
        HRESULT SplitCellColor([out, retval] WdCellColor* prop);
        [id(0x000001d3), propput, helpcontext(0x09b701d3)]
        HRESULT SplitCellColor([in] WdCellColor prop);
        [id(0x000001d4), propget, helpcontext(0x09b701d4)]
        HRESULT ShowSelectionFloaties([out, retval] VARIANT_BOOL* prop);
        [id(0x000001d4), propput, helpcontext(0x09b701d4)]
        HRESULT ShowSelectionFloaties([in] VARIANT_BOOL prop);
        [id(0x000001d5), propget, helpcontext(0x09b701d5)]
        HRESULT ShowMenuFloaties([out, retval] VARIANT_BOOL* prop);
        [id(0x000001d5), propput, helpcontext(0x09b701d5)]
        HRESULT ShowMenuFloaties([in] VARIANT_BOOL prop);
        [id(0x000001d6), propget, helpcontext(0x09b701d6)]
        HRESULT ShowDevTools([out, retval] VARIANT_BOOL* prop);
        [id(0x000001d6), propput, helpcontext(0x09b701d6)]
        HRESULT ShowDevTools([in] VARIANT_BOOL prop);
        [id(0x000001d8), propget, helpcontext(0x09b701d8)]
        HRESULT EnableLivePreview([out, retval] VARIANT_BOOL* prop);
        [id(0x000001d8), propput, helpcontext(0x09b701d8)]
        HRESULT EnableLivePreview([in] VARIANT_BOOL prop);
        [id(0x000001da), propget, helpcontext(0x09b701da)]
        HRESULT OMathAutoBuildUp([out, retval] VARIANT_BOOL* prop);
        [id(0x000001da), propput, helpcontext(0x09b701da)]
        HRESULT OMathAutoBuildUp([in] VARIANT_BOOL prop);
        [id(0x000001dc), propget, hidden, helpcontext(0x09b701dc)]
        HRESULT AlwaysUseClearType([out, retval] VARIANT_BOOL* prop);
        [id(0x000001dc), propput, hidden, helpcontext(0x09b701dc)]
        HRESULT AlwaysUseClearType([in] VARIANT_BOOL prop);
        [id(0x000001dd), propget, helpcontext(0x09b701dd)]
        HRESULT PasteFormatWithinDocument([out, retval] WdPasteOptions* prop);
        [id(0x000001dd), propput, helpcontext(0x09b701dd)]
        HRESULT PasteFormatWithinDocument([in] WdPasteOptions prop);
        [id(0x000001de), propget, helpcontext(0x09b701de)]
        HRESULT PasteFormatBetweenDocuments([out, retval] WdPasteOptions* prop);
        [id(0x000001de), propput, helpcontext(0x09b701de)]
        HRESULT PasteFormatBetweenDocuments([in] WdPasteOptions prop);
        [id(0x000001df), propget, helpcontext(0x09b701df)]
        HRESULT PasteFormatBetweenStyledDocuments([out, retval] WdPasteOptions* prop);
        [id(0x000001df), propput, helpcontext(0x09b701df)]
        HRESULT PasteFormatBetweenStyledDocuments([in] WdPasteOptions prop);
        [id(0x000001e0), propget, helpcontext(0x09b701e0)]
        HRESULT PasteFormatFromExternalSource([out, retval] WdPasteOptions* prop);
        [id(0x000001e0), propput, helpcontext(0x09b701e0)]
        HRESULT PasteFormatFromExternalSource([in] WdPasteOptions prop);
        [id(0x000001e1), propget, helpcontext(0x09b701e1)]
        HRESULT PasteOptionKeepBulletsAndNumbers([out, retval] VARIANT_BOOL* prop);
        [id(0x000001e1), propput, helpcontext(0x09b701e1)]
        HRESULT PasteOptionKeepBulletsAndNumbers([in] VARIANT_BOOL prop);
        [id(0x000001e2), propget, helpcontext(0x09b701e2)]
        HRESULT INSKeyForOvertype([out, retval] VARIANT_BOOL* prop);
        [id(0x000001e2), propput, helpcontext(0x09b701e2)]
        HRESULT INSKeyForOvertype([in] VARIANT_BOOL prop);
        [id(0x000001e3), propget, helpcontext(0x09b701e3)]
        HRESULT RepeatWord([out, retval] VARIANT_BOOL* prop);
        [id(0x000001e3), propput, helpcontext(0x09b701e3)]
        HRESULT RepeatWord([in] VARIANT_BOOL prop);
        [id(0x000001e4), propget, helpcontext(0x09b701e4)]
        HRESULT FrenchReform([out, retval] WdFrenchSpeller* prop);
        [id(0x000001e4), propput, helpcontext(0x09b701e4)]
        HRESULT FrenchReform([in] WdFrenchSpeller prop);
        [id(0x000001e5), propget, helpcontext(0x09b701e5)]
        HRESULT ContextualSpeller([out, retval] VARIANT_BOOL* prop);
        [id(0x000001e5), propput, helpcontext(0x09b701e5)]
        HRESULT ContextualSpeller([in] VARIANT_BOOL prop);
        [id(0x000001e6), propget, helpcontext(0x09b701e6)]
        HRESULT MoveToTextColor([out, retval] WdColorIndex* prop);
        [id(0x000001e6), propput, helpcontext(0x09b701e6)]
        HRESULT MoveToTextColor([in] WdColorIndex prop);
        [id(0x000001e7), propget, helpcontext(0x09b701e7)]
        HRESULT MoveFromTextColor([out, retval] WdColorIndex* prop);
        [id(0x000001e7), propput, helpcontext(0x09b701e7)]
        HRESULT MoveFromTextColor([in] WdColorIndex prop);
        [id(0x000001e8), propget, helpcontext(0x09b701e8)]
        HRESULT OMathCopyLF([out, retval] VARIANT_BOOL* prop);
        [id(0x000001e8), propput, helpcontext(0x09b701e8)]
        HRESULT OMathCopyLF([in] VARIANT_BOOL prop);
        [id(0x000001e9), propget, helpcontext(0x09b701e9)]
        HRESULT UseNormalStyleForList([out, retval] VARIANT_BOOL* prop);
        [id(0x000001e9), propput, helpcontext(0x09b701e9)]
        HRESULT UseNormalStyleForList([in] VARIANT_BOOL prop);
        [id(0x000001ea), propget, helpcontext(0x09b701ea)]
        HRESULT AllowOpenInDraftView([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ea), propput, helpcontext(0x09b701ea)]
        HRESULT AllowOpenInDraftView([in] VARIANT_BOOL prop);
        [id(0x000001ec), propget, helpcontext(0x09b701ec)]
        HRESULT EnableLegacyIMEMode([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ec), propput, helpcontext(0x09b701ec)]
        HRESULT EnableLegacyIMEMode([in] VARIANT_BOOL prop);
        [id(0x000001ed), propget, helpcontext(0x09b701ed)]
        HRESULT DoNotPromptForConvert([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ed), propput, helpcontext(0x09b701ed)]
        HRESULT DoNotPromptForConvert([in] VARIANT_BOOL prop);
        [id(0x000001ee), propget, helpcontext(0x09b701ee)]
        HRESULT PrecisePositioning([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ee), propput, helpcontext(0x09b701ee)]
        HRESULT PrecisePositioning([in] VARIANT_BOOL prop);
        [id(0x000001ef), propget, helpcontext(0x09b701ef)]
        HRESULT UpdateStyleListBehavior([out, retval] WdUpdateStyleListBehavior* prop);
        [id(0x000001ef), propput, helpcontext(0x09b701ef)]
        HRESULT UpdateStyleListBehavior([in] WdUpdateStyleListBehavior prop);
        [id(0x000001f0), propget, helpcontext(0x09b701f0)]
        HRESULT StrictTaaMarboota([out, retval] VARIANT_BOOL* prop);
        [id(0x000001f0), propput, helpcontext(0x09b701f0)]
        HRESULT StrictTaaMarboota([in] VARIANT_BOOL prop);
        [id(0x000001f1), propget, helpcontext(0x09b701f1)]
        HRESULT StrictRussianE([out, retval] VARIANT_BOOL* prop);
        [id(0x000001f1), propput, helpcontext(0x09b701f1)]
        HRESULT StrictRussianE([in] VARIANT_BOOL prop);
        [id(0x000001f2), propget, helpcontext(0x09b701f2)]
        HRESULT SpanishMode([out, retval] WdSpanishSpeller* prop);
        [id(0x000001f2), propput, helpcontext(0x09b701f2)]
        HRESULT SpanishMode([in] WdSpanishSpeller prop);
        [id(0x000001f5), propget, helpcontext(0x09b701f5)]
        HRESULT PortugalReform([out, retval] WdPortugueseReform* prop);
        [id(0x000001f5), propput, helpcontext(0x09b701f5)]
        HRESULT PortugalReform([in] WdPortugueseReform prop);
        [id(0x000001f6), propget, helpcontext(0x09b701f6)]
        HRESULT BrazilReform([out, retval] WdPortugueseReform* prop);
        [id(0x000001f6), propput, helpcontext(0x09b701f6)]
        HRESULT BrazilReform([in] WdPortugueseReform prop);
        [id(0x000001f7), propget, helpcontext(0x09b701f7)]
        HRESULT UpdateFieldsWithTrackedChangesAtPrint([out, retval] VARIANT_BOOL* prop);
        [id(0x000001f7), propput, helpcontext(0x09b701f7)]
        HRESULT UpdateFieldsWithTrackedChangesAtPrint([in] VARIANT_BOOL prop);
        [id(0x000001f8), propget, helpcontext(0x09b701f8)]
        HRESULT DisplayAlignmentGuides([out, retval] VARIANT_BOOL* prop);
        [id(0x000001f8), propput, helpcontext(0x09b701f8)]
        HRESULT DisplayAlignmentGuides([in] VARIANT_BOOL prop);
        [id(0x000001f9), propget, helpcontext(0x09b701f9)]
        HRESULT PageAlignmentGuides([out, retval] VARIANT_BOOL* prop);
        [id(0x000001f9), propput, helpcontext(0x09b701f9)]
        HRESULT PageAlignmentGuides([in] VARIANT_BOOL prop);
        [id(0x000001fa), propget, helpcontext(0x09b701fa)]
        HRESULT MarginAlignmentGuides([out, retval] VARIANT_BOOL* prop);
        [id(0x000001fa), propput, helpcontext(0x09b701fa)]
        HRESULT MarginAlignmentGuides([in] VARIANT_BOOL prop);
        [id(0x000001fb), propget, helpcontext(0x09b701fb)]
        HRESULT ParagraphAlignmentGuides([out, retval] VARIANT_BOOL* prop);
        [id(0x000001fb), propput, helpcontext(0x09b701fb)]
        HRESULT ParagraphAlignmentGuides([in] VARIANT_BOOL prop);
        [id(0x000001fc), propget, helpcontext(0x09b701fc)]
        HRESULT EnableLiveDrag([out, retval] VARIANT_BOOL* prop);
        [id(0x000001fc), propput, helpcontext(0x09b701fc)]
        HRESULT EnableLiveDrag([in] VARIANT_BOOL prop);
        [id(0x000001fd), propget, helpcontext(0x09b701fd)]
        HRESULT UseSubPixelPositioning([out, retval] VARIANT_BOOL* prop);
        [id(0x000001fd), propput, helpcontext(0x09b701fd)]
        HRESULT UseSubPixelPositioning([in] VARIANT_BOOL prop);
        [id(0x000001fe), propget, helpcontext(0x09b701fe)]
        HRESULT AlertIfNotDefault([out, retval] VARIANT_BOOL* prop);
        [id(0x000001fe), propput, helpcontext(0x09b701fe)]
        HRESULT AlertIfNotDefault([in] VARIANT_BOOL prop);
        [id(0x000001ff), propget, helpcontext(0x09b701ff)]
        HRESULT EnableProofingToolsAdvertisement([out, retval] VARIANT_BOOL* prop);
        [id(0x000001ff), propput, helpcontext(0x09b701ff)]
        HRESULT EnableProofingToolsAdvertisement([in] VARIANT_BOOL prop);
        [id(0x00000200), propget, helpcontext(0x09b70200)]
        HRESULT PreferCloudSaveLocations([out, retval] VARIANT_BOOL* prop);
        [id(0x00000200), propput, helpcontext(0x09b70200)]
        HRESULT PreferCloudSaveLocations([in] VARIANT_BOOL prop);
        [id(0x00000201), propget, helpcontext(0x09b70201)]
        HRESULT SkyDriveSignInOption([out, retval] VARIANT_BOOL* prop);
        [id(0x00000201), propput, helpcontext(0x09b70201)]
        HRESULT SkyDriveSignInOption([in] VARIANT_BOOL prop);
        [id(0x00000202), propget, helpcontext(0x09b70202)]
        HRESULT ExpandHeadingsOnOpen([out, retval] VARIANT_BOOL* prop);
        [id(0x00000202), propput, helpcontext(0x09b70202)]
        HRESULT ExpandHeadingsOnOpen([in] VARIANT_BOOL prop);
        [id(0x00000203), propget, helpcontext(0x09b70203)]
        HRESULT UseLocalUserInfo([out, retval] VARIANT_BOOL* prop);
        [id(0x00000203), propput, helpcontext(0x09b70203)]
        HRESULT UseLocalUserInfo([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(000209BA-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009ba),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MailMessage : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ba03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ba03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09ba03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000014e), helpcontext(0x09ba014e)]
        HRESULT CheckName();
        [id(0x0000014f), helpcontext(0x09ba014f)]
        HRESULT Delete();
        [id(0x00000150), helpcontext(0x09ba0150)]
        HRESULT DisplayMoveDialog();
        [id(0x00000151), helpcontext(0x09ba0151)]
        HRESULT DisplayProperties();
        [id(0x00000152), helpcontext(0x09ba0152)]
        HRESULT DisplaySelectNamesDialog();
        [id(0x00000153), helpcontext(0x09ba0153)]
        HRESULT Forward();
        [id(0x00000154), helpcontext(0x09ba0154)]
        HRESULT GoToNext();
        [id(0x00000155), helpcontext(0x09ba0155)]
        HRESULT GoToPrevious();
        [id(0x00000156), helpcontext(0x09ba0156)]
        HRESULT Reply();
        [id(0x00000157), helpcontext(0x09ba0157)]
        HRESULT ReplyAll();
        [id(0x00000158), helpcontext(0x09ba0158)]
        HRESULT ToggleHeader();
    };

    [
      odl,
      uuid(000209BB-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009bb),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ProofreadingErrors : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09bb03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09bb03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09bb03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09bbfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09bb0001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09bb0002)]
        HRESULT Type([out, retval] WdProofreadingErrorType* prop);
        [id(00000000), helpcontext(0x09bb0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Range** prop);
    };

    [
      odl,
      uuid(000209BD-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009bd),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Mailer : IDispatch {
        [id(0x000003e8), propget, hidden, helpcontext(0x09bd03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, hidden, helpcontext(0x09bd03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, hidden, helpcontext(0x09bd03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, hidden, helpcontext(0x09bd0064)]
        HRESULT BCCRecipients([out, retval] VARIANT* prop);
        [id(0x00000064), propput, hidden, helpcontext(0x09bd0064)]
        HRESULT BCCRecipients([in] VARIANT* prop);
        [id(0x00000065), propget, hidden, helpcontext(0x09bd0065)]
        HRESULT CCRecipients([out, retval] VARIANT* prop);
        [id(0x00000065), propput, hidden, helpcontext(0x09bd0065)]
        HRESULT CCRecipients([in] VARIANT* prop);
        [id(0x00000066), propget, hidden, helpcontext(0x09bd0066)]
        HRESULT Recipients([out, retval] VARIANT* prop);
        [id(0x00000066), propput, hidden, helpcontext(0x09bd0066)]
        HRESULT Recipients([in] VARIANT* prop);
        [id(0x00000067), propget, hidden, helpcontext(0x09bd0067)]
        HRESULT Enclosures([out, retval] VARIANT* prop);
        [id(0x00000067), propput, hidden, helpcontext(0x09bd0067)]
        HRESULT Enclosures([in] VARIANT* prop);
        [id(0x00000068), propget, hidden, helpcontext(0x09bd0068)]
        HRESULT Sender([out, retval] BSTR* prop);
        [id(0x00000069), propget, hidden, helpcontext(0x09bd0069)]
        HRESULT SendDateTime([out, retval] DATE* prop);
        [id(0x0000006a), propget, hidden, helpcontext(0x09bd006a)]
        HRESULT Received([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006b), propget, hidden, helpcontext(0x09bd006b)]
        HRESULT Subject([out, retval] BSTR* prop);
        [id(0x0000006b), propput, hidden, helpcontext(0x09bd006b)]
        HRESULT Subject([in] BSTR prop);
    };

    [
      odl,
      uuid(000209C3-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009c3),
      dual,
      nonextensible,
      oleautomation
    ]
    interface WrapFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09c303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09c303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09c303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09c30064)]
        HRESULT Type([out, retval] WdWrapType* prop);
        [id(0x00000064), propput, helpcontext(0x09c30064)]
        HRESULT Type([in] WdWrapType prop);
        [id(0x00000065), propget, helpcontext(0x09c30065)]
        HRESULT Side([out, retval] WdWrapSideType* prop);
        [id(0x00000065), propput, helpcontext(0x09c30065)]
        HRESULT Side([in] WdWrapSideType prop);
        [id(0x00000066), propget, helpcontext(0x09c30066)]
        HRESULT DistanceTop([out, retval] single* prop);
        [id(0x00000066), propput, helpcontext(0x09c30066)]
        HRESULT DistanceTop([in] single prop);
        [id(0x00000067), propget, helpcontext(0x09c30067)]
        HRESULT DistanceBottom([out, retval] single* prop);
        [id(0x00000067), propput, helpcontext(0x09c30067)]
        HRESULT DistanceBottom([in] single prop);
        [id(0x00000068), propget, helpcontext(0x09c30068)]
        HRESULT DistanceLeft([out, retval] single* prop);
        [id(0x00000068), propput, helpcontext(0x09c30068)]
        HRESULT DistanceLeft([in] single prop);
        [id(0x00000069), propget, helpcontext(0x09c30069)]
        HRESULT DistanceRight([out, retval] single* prop);
        [id(0x00000069), propput, helpcontext(0x09c30069)]
        HRESULT DistanceRight([in] single prop);
        [id(0x0000006a), propget, helpcontext(0x09c3006a)]
        HRESULT AllowOverlap([out, retval] long* prop);
        [id(0x0000006a), propput, helpcontext(0x09c3006a)]
        HRESULT AllowOverlap([in] long prop);
    };

    [
      odl,
      uuid(000209D1-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009d1),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HangulAndAlphabetExceptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09d103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09d103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09d103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09d1fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09d10001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09d10000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] HangulAndAlphabetException** prop);
        [id(0x00000065), helpcontext(0x09d10065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] HangulAndAlphabetException** prop);
    };

    [
      odl,
      uuid(000209D2-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009d2),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HangulAndAlphabetException : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09d203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09d203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09d203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09d20001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09d20002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000065), helpcontext(0x09d20065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(000209C4-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009c4),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Adjustments : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09c403e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09c403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09c40001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x09c40002)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), propget, helpcontext(0x09c40000)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] single* prop);
        [id(00000000), propput, helpcontext(0x09c40000)]
        HRESULT Item(
                        [in] long Index, 
                        [in] single prop);
    };

    [
      odl,
      uuid(000209C5-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009c5),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CalloutFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09c503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09c503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09c50001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09c50064)]
        HRESULT Accent([out, retval] MsoTriState* prop);
        [id(0x00000064), propput, helpcontext(0x09c50064)]
        HRESULT Accent([in] MsoTriState prop);
        [id(0x00000065), propget, helpcontext(0x09c50065)]
        HRESULT Angle([out, retval] MsoCalloutAngleType* prop);
        [id(0x00000065), propput, helpcontext(0x09c50065)]
        HRESULT Angle([in] MsoCalloutAngleType prop);
        [id(0x00000066), propget, hidden, helpcontext(0x09c50066)]
        HRESULT AutoAttach([out, retval] MsoTriState* prop);
        [id(0x00000066), propput, hidden, helpcontext(0x09c50066)]
        HRESULT AutoAttach([in] MsoTriState prop);
        [id(0x00000067), propget, helpcontext(0x09c50067)]
        HRESULT AutoLength([out, retval] MsoTriState* prop);
        [id(0x00000068), propget, helpcontext(0x09c50068)]
        HRESULT Border([out, retval] MsoTriState* prop);
        [id(0x00000068), propput, helpcontext(0x09c50068)]
        HRESULT Border([in] MsoTriState prop);
        [id(0x00000069), propget, helpcontext(0x09c50069)]
        HRESULT Drop([out, retval] single* prop);
        [id(0x0000006a), propget, helpcontext(0x09c5006a)]
        HRESULT DropType([out, retval] MsoCalloutDropType* prop);
        [id(0x0000006b), propget, helpcontext(0x09c5006b)]
        HRESULT Gap([out, retval] single* prop);
        [id(0x0000006b), propput, helpcontext(0x09c5006b)]
        HRESULT Gap([in] single prop);
        [id(0x0000006c), propget, helpcontext(0x09c5006c)]
        HRESULT Length([out, retval] single* prop);
        [id(0x0000006d), propget, helpcontext(0x09c5006d)]
        HRESULT Type([out, retval] MsoCalloutType* prop);
        [id(0x0000006d), propput, helpcontext(0x09c5006d)]
        HRESULT Type([in] MsoCalloutType prop);
        [id(0x0000000a), hidden, helpcontext(0x09c5000a)]
        HRESULT AutomaticLength();
        [id(0x0000000b), helpcontext(0x09c5000b)]
        HRESULT CustomDrop([in] single Drop);
        [id(0x0000000c), helpcontext(0x09c5000c)]
        HRESULT CustomLength([in] single Length);
        [id(0x0000000d), helpcontext(0x09c5000d)]
        HRESULT PresetDrop([in] MsoCalloutDropType DropType);
    };

    [
      odl,
      uuid(000209C6-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009c6),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ColorFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09c603e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09c603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09c60001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x09c60000)]
        HRESULT RGB([out, retval] long* prop);
        [id(00000000), propput, helpcontext(0x09c60000)]
        HRESULT RGB([in] long prop);
        [id(0x00000064), propget, hidden, helpcontext(0x09c60064)]
        HRESULT SchemeColor([out, retval] long* prop);
        [id(0x00000064), propput, hidden, helpcontext(0x09c60064)]
        HRESULT SchemeColor([in] long prop);
        [id(0x00000065), propget, helpcontext(0x09c60065)]
        HRESULT Type([out, retval] MsoColorType* prop);
        [id(0x00000066), propget, hidden, helpcontext(0x09c60066)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000066), propput, hidden, helpcontext(0x09c60066)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000067), propget, helpcontext(0x09c60067)]
        HRESULT TintAndShade([out, retval] single* prop);
        [id(0x00000067), propput, helpcontext(0x09c60067)]
        HRESULT TintAndShade([in] single prop);
        [id(0x00000068), propget, hidden, helpcontext(0x09c60068)]
        HRESULT OverPrint([out, retval] MsoTriState* prop);
        [id(0x00000068), propput, hidden, helpcontext(0x09c60068)]
        HRESULT OverPrint([in] MsoTriState prop);
        [id(0x00000069), propget, hidden, helpcontext(0x09c60069)]
        HRESULT Ink(
                        [in] long Index, 
                        [out, retval] single* prop);
        [id(0x00000069), propput, hidden, helpcontext(0x09c60069)]
        HRESULT Ink(
                        [in] long Index, 
                        [in] single prop);
        [id(0x0000006a), propget, hidden, helpcontext(0x09c6006a)]
        HRESULT Cyan([out, retval] long* prop);
        [id(0x0000006a), propput, hidden, helpcontext(0x09c6006a)]
        HRESULT Cyan([in] long prop);
        [id(0x0000006b), propget, hidden, helpcontext(0x09c6006b)]
        HRESULT Magenta([out, retval] long* prop);
        [id(0x0000006b), propput, hidden, helpcontext(0x09c6006b)]
        HRESULT Magenta([in] long prop);
        [id(0x0000006c), propget, hidden, helpcontext(0x09c6006c)]
        HRESULT Yellow([out, retval] long* prop);
        [id(0x0000006c), propput, hidden, helpcontext(0x09c6006c)]
        HRESULT Yellow([in] long prop);
        [id(0x0000006d), propget, hidden, helpcontext(0x09c6006d)]
        HRESULT Black([out, retval] long* prop);
        [id(0x0000006d), propput, hidden, helpcontext(0x09c6006d)]
        HRESULT Black([in] long prop);
        [id(0x0000006e), hidden, helpcontext(0x09c6006e)]
        HRESULT SetCMYK(
                        [in] long Cyan, 
                        [in] long Magenta, 
                        [in] long Yellow, 
                        [in] long Black);
        [id(0x000000c8), propget, helpcontext(0x09c600c8)]
        HRESULT ObjectThemeColor([out, retval] WdThemeColorIndex* prop);
        [id(0x000000c8), propput, helpcontext(0x09c600c8)]
        HRESULT ObjectThemeColor([in] WdThemeColorIndex prop);
        [id(0x000000c9), propget, helpcontext(0x09c600c9)]
        HRESULT Brightness([out, retval] single* prop);
        [id(0x000000c9), propput, helpcontext(0x09c600c9)]
        HRESULT Brightness([in] single prop);
    };

    [
      odl,
      uuid(000209C7-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009c7),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ConnectorFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09c703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09c703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000064), propget, helpcontext(0x09c70064)]
        HRESULT BeginConnected([out, retval] MsoTriState* prop);
        [id(0x00000065), propget, helpcontext(0x09c70065)]
        HRESULT BeginConnectedShape([out, retval] Shape** prop);
        [id(0x00000066), propget, helpcontext(0x09c70066)]
        HRESULT BeginConnectionSite([out, retval] long* prop);
        [id(0x00000067), propget, helpcontext(0x09c70067)]
        HRESULT EndConnected([out, retval] MsoTriState* prop);
        [id(0x00000068), propget, helpcontext(0x09c70068)]
        HRESULT EndConnectedShape([out, retval] Shape** prop);
        [id(0x00000069), propget, helpcontext(0x09c70069)]
        HRESULT EndConnectionSite([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09c70001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000006a), propget, helpcontext(0x09c7006a)]
        HRESULT Type([out, retval] MsoConnectorType* prop);
        [id(0x0000006a), propput, helpcontext(0x09c7006a)]
        HRESULT Type([in] MsoConnectorType prop);
        [id(0x0000000a), helpcontext(0x09c7000a)]
        HRESULT BeginConnect(
                        [out] Shape** ConnectedShape, 
                        [in] long ConnectionSite);
        [id(0x0000000b), helpcontext(0x09c7000b)]
        HRESULT BeginDisconnect();
        [id(0x0000000c), helpcontext(0x09c7000c)]
        HRESULT EndConnect(
                        [out] Shape** ConnectedShape, 
                        [in] long ConnectionSite);
        [id(0x0000000d), helpcontext(0x09c7000d)]
        HRESULT EndDisconnect();
    };

    [
      odl,
      uuid(000209C8-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009c8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FillFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09c803e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09c803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09c80001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09c80064)]
        HRESULT BackColor([out, retval] ColorFormat** prop);
        [id(0x00000065), propget, helpcontext(0x09c80065)]
        HRESULT ForeColor([out, retval] ColorFormat** prop);
        [id(0x00000066), propget, helpcontext(0x09c80066)]
        HRESULT GradientColorType([out, retval] MsoGradientColorType* prop);
        [id(0x00000067), propget, helpcontext(0x09c80067)]
        HRESULT GradientDegree([out, retval] single* prop);
        [id(0x00000068), propget, helpcontext(0x09c80068)]
        HRESULT GradientStyle([out, retval] MsoGradientStyle* prop);
        [id(0x00000069), propget, helpcontext(0x09c80069)]
        HRESULT GradientVariant([out, retval] long* prop);
        [id(0x0000006a), propget, helpcontext(0x09c8006a)]
        HRESULT Pattern([out, retval] MsoPatternType* prop);
        [id(0x0000006b), propget, helpcontext(0x09c8006b)]
        HRESULT PresetGradientType([out, retval] MsoPresetGradientType* prop);
        [id(0x0000006c), propget, helpcontext(0x09c8006c)]
        HRESULT PresetTexture([out, retval] MsoPresetTexture* prop);
        [id(0x0000006d), propget, helpcontext(0x09c8006d)]
        HRESULT TextureName([out, retval] BSTR* prop);
        [id(0x0000006e), propget, helpcontext(0x09c8006e)]
        HRESULT TextureType([out, retval] MsoTextureType* prop);
        [id(0x0000006f), propget, helpcontext(0x09c8006f)]
        HRESULT Transparency([out, retval] single* prop);
        [id(0x0000006f), propput, helpcontext(0x09c8006f)]
        HRESULT Transparency([in] single prop);
        [id(0x00000070), propget, helpcontext(0x09c80070)]
        HRESULT Type([out, retval] MsoFillType* prop);
        [id(0x00000071), propget, helpcontext(0x09c80071)]
        HRESULT Visible([out, retval] MsoTriState* prop);
        [id(0x00000071), propput, helpcontext(0x09c80071)]
        HRESULT Visible([in] MsoTriState prop);
        [id(0x0000000a), hidden, helpcontext(0x09c8000a)]
        HRESULT Background();
        [id(0x0000000b), helpcontext(0x09c8000b)]
        HRESULT OneColorGradient(
                        [in] MsoGradientStyle Style, 
                        [in] long Variant, 
                        [in] single Degree);
        [id(0x0000000c), helpcontext(0x09c8000c)]
        HRESULT Patterned([in] MsoPatternType Pattern);
        [id(0x0000000d), helpcontext(0x09c8000d)]
        HRESULT PresetGradient(
                        [in] MsoGradientStyle Style, 
                        [in] long Variant, 
                        [in] MsoPresetGradientType PresetGradientType);
        [id(0x0000000e), helpcontext(0x09c8000e)]
        HRESULT PresetTextured([in] MsoPresetTexture PresetTexture);
        [id(0x0000000f), helpcontext(0x09c8000f)]
        HRESULT Solid();
        [id(0x00000010), helpcontext(0x09c80010)]
        HRESULT TwoColorGradient(
                        [in] MsoGradientStyle Style, 
                        [in] long Variant);
        [id(0x00000011), helpcontext(0x09c80011)]
        HRESULT UserPicture([in] BSTR PictureFile);
        [id(0x00000012), helpcontext(0x09c80012)]
        HRESULT UserTextured([in] BSTR TextureFile);
        [id(0x00000072), propget, helpcontext(0x09c80072)]
        HRESULT GradientStops([out, retval] GradientStops** prop);
        [id(0x00000073), propget, helpcontext(0x09c80073)]
        HRESULT TextureOffsetX([out, retval] single* prop);
        [id(0x00000073), propput, helpcontext(0x09c80073)]
        HRESULT TextureOffsetX([in] single prop);
        [id(0x00000074), propget, helpcontext(0x09c80074)]
        HRESULT TextureOffsetY([out, retval] single* prop);
        [id(0x00000074), propput, helpcontext(0x09c80074)]
        HRESULT TextureOffsetY([in] single prop);
        [id(0x00000075), propget, helpcontext(0x09c80075)]
        HRESULT TextureAlignment([out, retval] MsoTextureAlignment* prop);
        [id(0x00000075), propput, helpcontext(0x09c80075)]
        HRESULT TextureAlignment([in] MsoTextureAlignment prop);
        [id(0x00000076), propget, helpcontext(0x09c80076)]
        HRESULT TextureHorizontalScale([out, retval] single* prop);
        [id(0x00000076), propput, helpcontext(0x09c80076)]
        HRESULT TextureHorizontalScale([in] single prop);
        [id(0x00000077), propget, helpcontext(0x09c80077)]
        HRESULT TextureVerticalScale([out, retval] single* prop);
        [id(0x00000077), propput, helpcontext(0x09c80077)]
        HRESULT TextureVerticalScale([in] single prop);
        [id(0x00000078), propget, helpcontext(0x09c80078)]
        HRESULT TextureTile([out, retval] MsoTriState* prop);
        [id(0x00000078), propput, helpcontext(0x09c80078)]
        HRESULT TextureTile([in] MsoTriState prop);
        [id(0x00000079), propget, helpcontext(0x09c80079)]
        HRESULT RotateWithObject([out, retval] MsoTriState* prop);
        [id(0x00000079), propput, helpcontext(0x09c80079)]
        HRESULT RotateWithObject([in] MsoTriState prop);
        [id(0x0000007a), propget, helpcontext(0x09c8007a)]
        HRESULT PictureEffects([out, retval] PictureEffects** prop);
        [id(0x0000007b), propget, helpcontext(0x09c8007b)]
        HRESULT GradientAngle([out, retval] single* prop);
        [id(0x0000007b), propput, helpcontext(0x09c8007b)]
        HRESULT GradientAngle([in] single prop);
    };

    [
      odl,
      uuid(000209C9-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009c9),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FreeformBuilder : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09c903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09c903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09c90001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000a), helpcontext(0x09c9000a)]
        HRESULT AddNodes(
                        [in] MsoSegmentType SegmentType, 
                        [in] MsoEditingType EditingType, 
                        [in] single X1, 
                        [in] single Y1, 
                        [in, optional, defaultvalue(0)] single X2, 
                        [in, optional, defaultvalue(0)] single Y2, 
                        [in, optional, defaultvalue(0)] single X3, 
                        [in, optional, defaultvalue(0)] single Y3);
        [id(0x0000000b), helpcontext(0x09c9000b)]
        HRESULT ConvertToShape(
                        [in, optional] VARIANT* Anchor, 
                        [out, retval] Shape** prop);
    };

    [
      odl,
      uuid(000209CA-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009ca),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LineFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ca03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ca03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09ca0001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09ca0064)]
        HRESULT BackColor([out, retval] ColorFormat** prop);
        [id(0x00000065), propget, helpcontext(0x09ca0065)]
        HRESULT BeginArrowheadLength([out, retval] MsoArrowheadLength* prop);
        [id(0x00000065), propput, helpcontext(0x09ca0065)]
        HRESULT BeginArrowheadLength([in] MsoArrowheadLength prop);
        [id(0x00000066), propget, helpcontext(0x09ca0066)]
        HRESULT BeginArrowheadStyle([out, retval] MsoArrowheadStyle* prop);
        [id(0x00000066), propput, helpcontext(0x09ca0066)]
        HRESULT BeginArrowheadStyle([in] MsoArrowheadStyle prop);
        [id(0x00000067), propget, helpcontext(0x09ca0067)]
        HRESULT BeginArrowheadWidth([out, retval] MsoArrowheadWidth* prop);
        [id(0x00000067), propput, helpcontext(0x09ca0067)]
        HRESULT BeginArrowheadWidth([in] MsoArrowheadWidth prop);
        [id(0x00000068), propget, helpcontext(0x09ca0068)]
        HRESULT DashStyle([out, retval] MsoLineDashStyle* prop);
        [id(0x00000068), propput, helpcontext(0x09ca0068)]
        HRESULT DashStyle([in] MsoLineDashStyle prop);
        [id(0x00000069), propget, helpcontext(0x09ca0069)]
        HRESULT EndArrowheadLength([out, retval] MsoArrowheadLength* prop);
        [id(0x00000069), propput, helpcontext(0x09ca0069)]
        HRESULT EndArrowheadLength([in] MsoArrowheadLength prop);
        [id(0x0000006a), propget, helpcontext(0x09ca006a)]
        HRESULT EndArrowheadStyle([out, retval] MsoArrowheadStyle* prop);
        [id(0x0000006a), propput, helpcontext(0x09ca006a)]
        HRESULT EndArrowheadStyle([in] MsoArrowheadStyle prop);
        [id(0x0000006b), propget, helpcontext(0x09ca006b)]
        HRESULT EndArrowheadWidth([out, retval] MsoArrowheadWidth* prop);
        [id(0x0000006b), propput, helpcontext(0x09ca006b)]
        HRESULT EndArrowheadWidth([in] MsoArrowheadWidth prop);
        [id(0x0000006c), propget, helpcontext(0x09ca006c)]
        HRESULT ForeColor([out, retval] ColorFormat** prop);
        [id(0x0000006d), propget, helpcontext(0x09ca006d)]
        HRESULT Pattern([out, retval] MsoPatternType* prop);
        [id(0x0000006d), propput, helpcontext(0x09ca006d)]
        HRESULT Pattern([in] MsoPatternType prop);
        [id(0x0000006e), propget, helpcontext(0x09ca006e)]
        HRESULT Style([out, retval] MsoLineStyle* prop);
        [id(0x0000006e), propput, helpcontext(0x09ca006e)]
        HRESULT Style([in] MsoLineStyle prop);
        [id(0x0000006f), propget, helpcontext(0x09ca006f)]
        HRESULT Transparency([out, retval] single* prop);
        [id(0x0000006f), propput, helpcontext(0x09ca006f)]
        HRESULT Transparency([in] single prop);
        [id(0x00000070), propget, helpcontext(0x09ca0070)]
        HRESULT Visible([out, retval] MsoTriState* prop);
        [id(0x00000070), propput, helpcontext(0x09ca0070)]
        HRESULT Visible([in] MsoTriState prop);
        [id(0x00000071), propget, helpcontext(0x09ca0071)]
        HRESULT Weight([out, retval] single* prop);
        [id(0x00000071), propput, helpcontext(0x09ca0071)]
        HRESULT Weight([in] single prop);
        [id(0x00000072), propget, helpcontext(0x09ca0072)]
        HRESULT InsetPen([out, retval] MsoTriState* prop);
        [id(0x00000072), propput, helpcontext(0x09ca0072)]
        HRESULT InsetPen([in] MsoTriState prop);
    };

    [
      odl,
      uuid(000209CB-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009cb),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PictureFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09cb03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09cb03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09cb0001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09cb0064)]
        HRESULT Brightness([out, retval] single* prop);
        [id(0x00000064), propput, helpcontext(0x09cb0064)]
        HRESULT Brightness([in] single prop);
        [id(0x00000065), propget, helpcontext(0x09cb0065)]
        HRESULT ColorType([out, retval] MsoPictureColorType* prop);
        [id(0x00000065), propput, helpcontext(0x09cb0065)]
        HRESULT ColorType([in] MsoPictureColorType prop);
        [id(0x00000066), propget, helpcontext(0x09cb0066)]
        HRESULT Contrast([out, retval] single* prop);
        [id(0x00000066), propput, helpcontext(0x09cb0066)]
        HRESULT Contrast([in] single prop);
        [id(0x00000067), propget, helpcontext(0x09cb0067)]
        HRESULT CropBottom([out, retval] single* prop);
        [id(0x00000067), propput, helpcontext(0x09cb0067)]
        HRESULT CropBottom([in] single prop);
        [id(0x00000068), propget, helpcontext(0x09cb0068)]
        HRESULT CropLeft([out, retval] single* prop);
        [id(0x00000068), propput, helpcontext(0x09cb0068)]
        HRESULT CropLeft([in] single prop);
        [id(0x00000069), propget, helpcontext(0x09cb0069)]
        HRESULT CropRight([out, retval] single* prop);
        [id(0x00000069), propput, helpcontext(0x09cb0069)]
        HRESULT CropRight([in] single prop);
        [id(0x0000006a), propget, helpcontext(0x09cb006a)]
        HRESULT CropTop([out, retval] single* prop);
        [id(0x0000006a), propput, helpcontext(0x09cb006a)]
        HRESULT CropTop([in] single prop);
        [id(0x0000006b), propget, helpcontext(0x09cb006b)]
        HRESULT TransparencyColor([out, retval] long* prop);
        [id(0x0000006b), propput, helpcontext(0x09cb006b)]
        HRESULT TransparencyColor([in] long prop);
        [id(0x0000006c), propget, helpcontext(0x09cb006c)]
        HRESULT TransparentBackground([out, retval] MsoTriState* prop);
        [id(0x0000006c), propput, helpcontext(0x09cb006c)]
        HRESULT TransparentBackground([in] MsoTriState prop);
        [id(0x0000000a), helpcontext(0x09cb000a)]
        HRESULT IncrementBrightness([in] single Increment);
        [id(0x0000000b), helpcontext(0x09cb000b)]
        HRESULT IncrementContrast([in] single Increment);
        [id(0x0000006d), propget, helpcontext(0x09cb006d)]
        HRESULT Crop([out, retval] Crop** prop);
        [id(0x0000006d), propput, helpcontext(0x09cb006d)]
        HRESULT Crop([in] Crop* prop);
    };

    [
      odl,
      uuid(000209CC-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009cc),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShadowFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09cc03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09cc03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09cc0001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09cc0064)]
        HRESULT ForeColor([out, retval] ColorFormat** prop);
        [id(0x00000065), propget, helpcontext(0x09cc0065)]
        HRESULT Obscured([out, retval] MsoTriState* prop);
        [id(0x00000065), propput, helpcontext(0x09cc0065)]
        HRESULT Obscured([in] MsoTriState prop);
        [id(0x00000066), propget, helpcontext(0x09cc0066)]
        HRESULT OffsetX([out, retval] single* prop);
        [id(0x00000066), propput, helpcontext(0x09cc0066)]
        HRESULT OffsetX([in] single prop);
        [id(0x00000067), propget, helpcontext(0x09cc0067)]
        HRESULT OffsetY([out, retval] single* prop);
        [id(0x00000067), propput, helpcontext(0x09cc0067)]
        HRESULT OffsetY([in] single prop);
        [id(0x00000068), propget, helpcontext(0x09cc0068)]
        HRESULT Transparency([out, retval] single* prop);
        [id(0x00000068), propput, helpcontext(0x09cc0068)]
        HRESULT Transparency([in] single prop);
        [id(0x00000069), propget, helpcontext(0x09cc0069)]
        HRESULT Type([out, retval] MsoShadowType* prop);
        [id(0x00000069), propput, helpcontext(0x09cc0069)]
        HRESULT Type([in] MsoShadowType prop);
        [id(0x0000006a), propget, helpcontext(0x09cc006a)]
        HRESULT Visible([out, retval] MsoTriState* prop);
        [id(0x0000006a), propput, helpcontext(0x09cc006a)]
        HRESULT Visible([in] MsoTriState prop);
        [id(0x0000000a), helpcontext(0x09cc000a)]
        HRESULT IncrementOffsetX([in] single Increment);
        [id(0x0000000b), helpcontext(0x09cc000b)]
        HRESULT IncrementOffsetY([in] single Increment);
        [id(0x0000006b), propget, helpcontext(0x09cc006b)]
        HRESULT Style([out, retval] MsoShadowStyle* prop);
        [id(0x0000006b), propput, helpcontext(0x09cc006b)]
        HRESULT Style([in] MsoShadowStyle prop);
        [id(0x0000006c), propget, helpcontext(0x09cc006c)]
        HRESULT Blur([out, retval] single* prop);
        [id(0x0000006c), propput, helpcontext(0x09cc006c)]
        HRESULT Blur([in] single prop);
        [id(0x0000006d), propget, helpcontext(0x09cc006d)]
        HRESULT Size([out, retval] single* prop);
        [id(0x0000006d), propput, helpcontext(0x09cc006d)]
        HRESULT Size([in] single prop);
        [id(0x0000006e), propget, helpcontext(0x09cc006e)]
        HRESULT RotateWithShape([out, retval] MsoTriState* prop);
        [id(0x0000006e), propput, helpcontext(0x09cc006e)]
        HRESULT RotateWithShape([in] MsoTriState prop);
    };

    [
      odl,
      uuid(000209CD-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009cd),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShapeNode : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09cd03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09cd03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09cd0001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09cd0064)]
        HRESULT EditingType([out, retval] MsoEditingType* prop);
        [id(0x00000065), propget, helpcontext(0x09cd0065)]
        HRESULT Points([out, retval] VARIANT* prop);
        [id(0x00000066), propget, helpcontext(0x09cd0066)]
        HRESULT SegmentType([out, retval] MsoSegmentType* prop);
    };

    [
      odl,
      uuid(000209CE-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009ce),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShapeNodes : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ce03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ce03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09ce0001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x09ce0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x09cefffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x0000000b), helpcontext(0x09ce000b)]
        HRESULT Delete([in] long Index);
        [id(00000000), helpcontext(0x09ce0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] ShapeNode** prop);
        [id(0x0000000d), helpcontext(0x09ce000d)]
        HRESULT SetEditingType(
                        [in] long Index, 
                        [in] MsoEditingType EditingType);
        [id(0x0000000e), helpcontext(0x09ce000e)]
        HRESULT SetPosition(
                        [in] long Index, 
                        [in] single X1, 
                        [in] single Y1);
        [id(0x0000000f), helpcontext(0x09ce000f)]
        HRESULT SetSegmentType(
                        [in] long Index, 
                        [in] MsoSegmentType SegmentType);
        [id(0x0000000c), helpcontext(0x09ce000c)]
        HRESULT Insert(
                        [in] long Index, 
                        [in] MsoSegmentType SegmentType, 
                        [in] MsoEditingType EditingType, 
                        [in] single X1, 
                        [in] single Y1, 
                        [in, optional, defaultvalue(0)] single X2, 
                        [in, optional, defaultvalue(0)] single Y2, 
                        [in, optional, defaultvalue(0)] single X3, 
                        [in, optional, defaultvalue(0)] single Y3);
    };

    [
      odl,
      uuid(000209CF-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009cf),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextEffectFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09cf03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09cf03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09cf0001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09cf0064)]
        HRESULT Alignment([out, retval] MsoTextEffectAlignment* prop);
        [id(0x00000064), propput, helpcontext(0x09cf0064)]
        HRESULT Alignment([in] MsoTextEffectAlignment prop);
        [id(0x00000065), propget, helpcontext(0x09cf0065)]
        HRESULT FontBold([out, retval] MsoTriState* prop);
        [id(0x00000065), propput, helpcontext(0x09cf0065)]
        HRESULT FontBold([in] MsoTriState prop);
        [id(0x00000066), propget, helpcontext(0x09cf0066)]
        HRESULT FontItalic([out, retval] MsoTriState* prop);
        [id(0x00000066), propput, helpcontext(0x09cf0066)]
        HRESULT FontItalic([in] MsoTriState prop);
        [id(0x00000067), propget, helpcontext(0x09cf0067)]
        HRESULT FontName([out, retval] BSTR* prop);
        [id(0x00000067), propput, helpcontext(0x09cf0067)]
        HRESULT FontName([in] BSTR prop);
        [id(0x00000068), propget, helpcontext(0x09cf0068)]
        HRESULT FontSize([out, retval] single* prop);
        [id(0x00000068), propput, helpcontext(0x09cf0068)]
        HRESULT FontSize([in] single prop);
        [id(0x00000069), propget, helpcontext(0x09cf0069)]
        HRESULT KernedPairs([out, retval] MsoTriState* prop);
        [id(0x00000069), propput, helpcontext(0x09cf0069)]
        HRESULT KernedPairs([in] MsoTriState prop);
        [id(0x0000006a), propget, helpcontext(0x09cf006a)]
        HRESULT NormalizedHeight([out, retval] MsoTriState* prop);
        [id(0x0000006a), propput, helpcontext(0x09cf006a)]
        HRESULT NormalizedHeight([in] MsoTriState prop);
        [id(0x0000006b), propget, helpcontext(0x09cf006b)]
        HRESULT PresetShape([out, retval] MsoPresetTextEffectShape* prop);
        [id(0x0000006b), propput, helpcontext(0x09cf006b)]
        HRESULT PresetShape([in] MsoPresetTextEffectShape prop);
        [id(0x0000006c), propget, helpcontext(0x09cf006c)]
        HRESULT PresetTextEffect([out, retval] MsoPresetTextEffect* prop);
        [id(0x0000006c), propput, helpcontext(0x09cf006c)]
        HRESULT PresetTextEffect([in] MsoPresetTextEffect prop);
        [id(0x0000006d), propget, helpcontext(0x09cf006d)]
        HRESULT RotatedChars([out, retval] MsoTriState* prop);
        [id(0x0000006d), propput, helpcontext(0x09cf006d)]
        HRESULT RotatedChars([in] MsoTriState prop);
        [id(0x0000006e), propget, helpcontext(0x09cf006e)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(0x0000006e), propput, helpcontext(0x09cf006e)]
        HRESULT Text([in] BSTR prop);
        [id(0x0000006f), propget, helpcontext(0x09cf006f)]
        HRESULT Tracking([out, retval] single* prop);
        [id(0x0000006f), propput, helpcontext(0x09cf006f)]
        HRESULT Tracking([in] single prop);
        [id(0x0000000a), helpcontext(0x09cf000a)]
        HRESULT ToggleVerticalText();
    };

    [
      odl,
      uuid(000209D0-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009d0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ThreeDFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09d003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09d003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x09d00001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x09d00064)]
        HRESULT Depth([out, retval] single* prop);
        [id(0x00000064), propput, helpcontext(0x09d00064)]
        HRESULT Depth([in] single prop);
        [id(0x00000065), propget, helpcontext(0x09d00065)]
        HRESULT ExtrusionColor([out, retval] ColorFormat** prop);
        [id(0x00000066), propget, helpcontext(0x09d00066)]
        HRESULT ExtrusionColorType([out, retval] MsoExtrusionColorType* prop);
        [id(0x00000066), propput, helpcontext(0x09d00066)]
        HRESULT ExtrusionColorType([in] MsoExtrusionColorType prop);
        [id(0x00000067), propget, helpcontext(0x09d00067)]
        HRESULT Perspective([out, retval] MsoTriState* prop);
        [id(0x00000067), propput, helpcontext(0x09d00067)]
        HRESULT Perspective([in] MsoTriState prop);
        [id(0x00000068), propget, helpcontext(0x09d00068)]
        HRESULT PresetExtrusionDirection([out, retval] MsoPresetExtrusionDirection* prop);
        [id(0x00000069), propget, helpcontext(0x09d00069)]
        HRESULT PresetLightingDirection([out, retval] MsoPresetLightingDirection* prop);
        [id(0x00000069), propput, helpcontext(0x09d00069)]
        HRESULT PresetLightingDirection([in] MsoPresetLightingDirection prop);
        [id(0x0000006a), propget, helpcontext(0x09d0006a)]
        HRESULT PresetLightingSoftness([out, retval] MsoPresetLightingSoftness* prop);
        [id(0x0000006a), propput, helpcontext(0x09d0006a)]
        HRESULT PresetLightingSoftness([in] MsoPresetLightingSoftness prop);
        [id(0x0000006b), propget, helpcontext(0x09d0006b)]
        HRESULT PresetMaterial([out, retval] MsoPresetMaterial* prop);
        [id(0x0000006b), propput, helpcontext(0x09d0006b)]
        HRESULT PresetMaterial([in] MsoPresetMaterial prop);
        [id(0x0000006c), propget, helpcontext(0x09d0006c)]
        HRESULT PresetThreeDFormat([out, retval] MsoPresetThreeDFormat* prop);
        [id(0x0000006d), propget, helpcontext(0x09d0006d)]
        HRESULT RotationX([out, retval] single* prop);
        [id(0x0000006d), propput, helpcontext(0x09d0006d)]
        HRESULT RotationX([in] single prop);
        [id(0x0000006e), propget, helpcontext(0x09d0006e)]
        HRESULT RotationY([out, retval] single* prop);
        [id(0x0000006e), propput, helpcontext(0x09d0006e)]
        HRESULT RotationY([in] single prop);
        [id(0x0000006f), propget, helpcontext(0x09d0006f)]
        HRESULT Visible([out, retval] MsoTriState* prop);
        [id(0x0000006f), propput, helpcontext(0x09d0006f)]
        HRESULT Visible([in] MsoTriState prop);
        [id(0x0000000a), helpcontext(0x09d0000a)]
        HRESULT IncrementRotationX([in] single Increment);
        [id(0x0000000b), helpcontext(0x09d0000b)]
        HRESULT IncrementRotationY([in] single Increment);
        [id(0x0000000c), helpcontext(0x09d0000c)]
        HRESULT ResetRotation();
        [id(0x0000000e), helpcontext(0x09d0000e)]
        HRESULT SetExtrusionDirection([in] MsoPresetExtrusionDirection PresetExtrusionDirection);
        [id(0x0000000d), helpcontext(0x09d0000d)]
        HRESULT SetThreeDFormat([in] MsoPresetThreeDFormat PresetThreeDFormat);
        [id(0x0000000f), helpcontext(0x09d0000f)]
        HRESULT SetPresetCamera([in] MsoPresetCamera PresetCamera);
        [id(0x00000010), helpcontext(0x09d00010)]
        HRESULT IncrementRotationZ([in] single Increment);
        [id(0x00000011), helpcontext(0x09d00011)]
        HRESULT IncrementRotationHorizontal([in] single Increment);
        [id(0x00000012), helpcontext(0x09d00012)]
        HRESULT IncrementRotationVertical([in] single Increment);
        [id(0x00000070), propget, helpcontext(0x09d00070)]
        HRESULT PresetLighting([out, retval] MsoLightRigType* prop);
        [id(0x00000070), propput, helpcontext(0x09d00070)]
        HRESULT PresetLighting([in] MsoLightRigType prop);
        [id(0x00000071), propget, helpcontext(0x09d00071)]
        HRESULT Z([out, retval] single* prop);
        [id(0x00000071), propput, helpcontext(0x09d00071)]
        HRESULT Z([in] single prop);
        [id(0x00000072), propget, helpcontext(0x09d00072)]
        HRESULT BevelTopType([out, retval] MsoBevelType* prop);
        [id(0x00000072), propput, helpcontext(0x09d00072)]
        HRESULT BevelTopType([in] MsoBevelType prop);
        [id(0x00000073), propget, helpcontext(0x09d00073)]
        HRESULT BevelTopInset([out, retval] single* prop);
        [id(0x00000073), propput, helpcontext(0x09d00073)]
        HRESULT BevelTopInset([in] single prop);
        [id(0x00000074), propget, helpcontext(0x09d00074)]
        HRESULT BevelTopDepth([out, retval] single* prop);
        [id(0x00000074), propput, helpcontext(0x09d00074)]
        HRESULT BevelTopDepth([in] single prop);
        [id(0x00000075), propget, helpcontext(0x09d00075)]
        HRESULT BevelBottomType([out, retval] MsoBevelType* prop);
        [id(0x00000075), propput, helpcontext(0x09d00075)]
        HRESULT BevelBottomType([in] MsoBevelType prop);
        [id(0x00000076), propget, helpcontext(0x09d00076)]
        HRESULT BevelBottomInset([out, retval] single* prop);
        [id(0x00000076), propput, helpcontext(0x09d00076)]
        HRESULT BevelBottomInset([in] single prop);
        [id(0x00000077), propget, helpcontext(0x09d00077)]
        HRESULT BevelBottomDepth([out, retval] single* prop);
        [id(0x00000077), propput, helpcontext(0x09d00077)]
        HRESULT BevelBottomDepth([in] single prop);
        [id(0x00000078), propget, helpcontext(0x09d00078)]
        HRESULT PresetCamera([out, retval] MsoPresetCamera* prop);
        [id(0x00000079), propget, helpcontext(0x09d00079)]
        HRESULT RotationZ([out, retval] single* prop);
        [id(0x00000079), propput, helpcontext(0x09d00079)]
        HRESULT RotationZ([in] single prop);
        [id(0x0000007a), propget, helpcontext(0x09d0007a)]
        HRESULT ContourWidth([out, retval] single* prop);
        [id(0x0000007a), propput, helpcontext(0x09d0007a)]
        HRESULT ContourWidth([in] single prop);
        [id(0x0000007b), propget, helpcontext(0x09d0007b)]
        HRESULT ContourColor([out, retval] ColorFormat** prop);
        [id(0x0000007c), propget, helpcontext(0x09d0007c)]
        HRESULT FieldOfView([out, retval] single* prop);
        [id(0x0000007c), propput, helpcontext(0x09d0007c)]
        HRESULT FieldOfView([in] single prop);
        [id(0x0000007d), propget, helpcontext(0x09d0007d)]
        HRESULT ProjectText([out, retval] MsoTriState* prop);
        [id(0x0000007d), propput, helpcontext(0x09d0007d)]
        HRESULT ProjectText([in] MsoTriState prop);
        [id(0x0000007e), propget, helpcontext(0x09d0007e)]
        HRESULT LightAngle([out, retval] single* prop);
        [id(0x0000007e), propput, helpcontext(0x09d0007e)]
        HRESULT LightAngle([in] single prop);
    };

    [
      uuid(000209F7-0000-0000-C000-000000000046),
      helpcontext(0x00000fa0),
      hidden
    ]
    dispinterface ApplicationEvents {
        properties:
        methods:
    };

    [
      uuid(000209F0-0000-0000-C000-000000000046),
      helpcontext(0x000009b9),
      appobject
    ]
    coclass Global {
        [default] interface _Global;
    };

    [
      uuid(000209FF-0000-0000-C000-000000000046),
      helpcontext(0x00000970)
    ]
    coclass Application {
        [default] interface _Application;
        [source] dispinterface ApplicationEvents;
        [source] dispinterface ApplicationEvents2;
        [source] dispinterface ApplicationEvents3;
        [default, source] dispinterface ApplicationEvents4;
    };

    [
      uuid(000209F6-0000-0000-C000-000000000046),
      helpcontext(0x00000fa1),
      hidden
    ]
    dispinterface DocumentEvents {
        properties:
        methods:
            [id(0x00000004), helpcontext(0x003d0cec)]
            void New();
            [id(0x00000005), helpcontext(0x003d0ced)]
            void Open();
            [id(0x00000006), helpcontext(0x003d0cee)]
            void Close();
    };

    [
      uuid(00020906-0000-0000-C000-000000000046),
      helpcontext(0x0000096b)
    ]
    coclass Document {
        [default] interface _Document;
        [source] dispinterface DocumentEvents;
        [default, source] dispinterface DocumentEvents2;
    };

    [
      uuid(000209F5-0000-0000-C000-000000000046),
      helpcontext(0x00000952)
    ]
    coclass Font {
        [default] interface _Font;
    };

    [
      uuid(000209F4-0000-0000-C000-000000000046),
      helpcontext(0x00000953)
    ]
    coclass ParagraphFormat {
        [default] interface _ParagraphFormat;
    };

    [
      uuid(000209F3-0000-0000-C000-000000000046),
      helpcontext(0x00000fa2),
      hidden
    ]
    dispinterface OCXEvents {
        properties:
        methods:
            [id(0x800100e0), helpcontext(0x003d10d1)]
            void GotFocus();
            [id(0x800100e1), helpcontext(0x003d10d2)]
            void LostFocus();
    };

    [
      uuid(000209F2-0000-0000-C000-000000000046),
      helpcontext(0x000009a4),
      hidden
    ]
    coclass OLEControl {
        [default] interface _OLEControl;
        [default, source] dispinterface OCXEvents;
    };

    [
      uuid(000209F1-0000-0000-C000-000000000046),
      helpcontext(0x000009a1)
    ]
    coclass LetterContent {
        [default] interface _LetterContent;
    };

    [
      odl,
      uuid(000209F7-0001-0000-C000-000000000046),
      version(10.0),
      helpcontext(0x00000fa0),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IApplicationEvents : IDispatch {
        [id(0x00000001), restricted, hidden]
        HRESULT Startup();
        [id(0x00000002), helpcontext(0x00061a82)]
        HRESULT Quit();
        [id(0x00000003), helpcontext(0x00061a83)]
        HRESULT DocumentChange();
    };

    [
      odl,
      uuid(000209FE-0001-0000-C000-000000000046),
      version(10.0),
      helpcontext(0x00000fa0),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IApplicationEvents2 : IDispatch {
        [id(0x00000001), restricted, hidden]
        HRESULT Startup();
        [id(0x00000002), helpcontext(0x00061a82)]
        HRESULT Quit();
        [id(0x00000003), helpcontext(0x00061a83)]
        HRESULT DocumentChange();
        [id(0x00000004), helpcontext(0x00061a84)]
        HRESULT DocumentOpen([in] _Document* Doc);
        [id(0x00000006), helpcontext(0x00061a85)]
        HRESULT DocumentBeforeClose(
                        [in] _Document* Doc, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x00000007), helpcontext(0x00061a86)]
        HRESULT DocumentBeforePrint(
                        [in] _Document* Doc, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x00000008), helpcontext(0x00061a87)]
        HRESULT DocumentBeforeSave(
                        [in] _Document* Doc, 
                        [in] VARIANT_BOOL* SaveAsUI, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x00000009), helpcontext(0x00061a88)]
        HRESULT NewDocument([in] _Document* Doc);
        [id(0x0000000a), helpcontext(0x00061a89)]
        HRESULT WindowActivate(
                        [in] _Document* Doc, 
                        [in] Window* Wn);
        [id(0x0000000b), helpcontext(0x003d090a)]
        HRESULT WindowDeactivate(
                        [in] _Document* Doc, 
                        [in] Window* Wn);
        [id(0x0000000c), helpcontext(0x003d090b)]
        HRESULT WindowSelectionChange([in] Selection* Sel);
        [id(0x0000000d), helpcontext(0x003d090c)]
        HRESULT WindowBeforeRightClick(
                        [in] Selection* Sel, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x0000000e), helpcontext(0x003d090d)]
        HRESULT WindowBeforeDoubleClick(
                        [in] Selection* Sel, 
                        [in] VARIANT_BOOL* Cancel);
    };

    [
      uuid(000209FE-0000-0000-C000-000000000046),
      helpcontext(0x00000fa2),
      hidden
    ]
    dispinterface ApplicationEvents2 {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000001), restricted, hidden]
            void Startup();
            [id(0x00000002), helpcontext(0x00061a82)]
            void Quit();
            [id(0x00000003), helpcontext(0x00061a83)]
            void DocumentChange();
            [id(0x00000004), helpcontext(0x00061a84)]
            void DocumentOpen([in] _Document* Doc);
            [id(0x00000006), helpcontext(0x00061a85)]
            void DocumentBeforeClose(
                            [in] _Document* Doc, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x00000007), helpcontext(0x00061a86)]
            void DocumentBeforePrint(
                            [in] _Document* Doc, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x00000008), helpcontext(0x00061a87)]
            void DocumentBeforeSave(
                            [in] _Document* Doc, 
                            [in] VARIANT_BOOL* SaveAsUI, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x00000009), helpcontext(0x00061a88)]
            void NewDocument([in] _Document* Doc);
            [id(0x0000000a), helpcontext(0x00061a89)]
            void WindowActivate(
                            [in] _Document* Doc, 
                            [in] Window* Wn);
            [id(0x0000000b), helpcontext(0x003d090a)]
            void WindowDeactivate(
                            [in] _Document* Doc, 
                            [in] Window* Wn);
            [id(0x0000000c), helpcontext(0x003d090b)]
            void WindowSelectionChange([in] Selection* Sel);
            [id(0x0000000d), helpcontext(0x003d090c)]
            void WindowBeforeRightClick(
                            [in] Selection* Sel, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x0000000e), helpcontext(0x003d090d)]
            void WindowBeforeDoubleClick(
                            [in] Selection* Sel, 
                            [in] VARIANT_BOOL* Cancel);
    };

    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    [
      odl,
      uuid(000209D7-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009d7),
      dual,
      nonextensible,
      oleautomation
    ]
    interface EmailAuthor : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09d703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09d703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09d703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x09d70067)]
        HRESULT Style([out, retval] Style** prop);
    };

    [
      odl,
      uuid(000209DB-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009db),
      dual,
      nonextensible,
      oleautomation
    ]
    interface EmailOptions : IDispatch {
        [id(0x00000064), propget, helpcontext(0x09db0064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x09db0065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x09db0066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x09db0067)]
        HRESULT UseThemeStyle([out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), propput, helpcontext(0x09db0067)]
        HRESULT UseThemeStyle([in] VARIANT_BOOL prop);
        [id(0x0000006a), propget, helpcontext(0x09db006a)]
        HRESULT MarkCommentsWith([out, retval] BSTR* prop);
        [id(0x0000006a), propput, helpcontext(0x09db006a)]
        HRESULT MarkCommentsWith([in] BSTR prop);
        [id(0x0000006b), propget, helpcontext(0x09db006b)]
        HRESULT MarkComments([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006b), propput, helpcontext(0x09db006b)]
        HRESULT MarkComments([in] VARIANT_BOOL prop);
        [id(0x0000006c), propget, helpcontext(0x09db006c)]
        HRESULT EmailSignature([out, retval] EmailSignature** prop);
        [id(0x0000006d), propget, helpcontext(0x09db006d)]
        HRESULT ComposeStyle([out, retval] Style** prop);
        [id(0x0000006e), propget, helpcontext(0x09db006e)]
        HRESULT ReplyStyle([out, retval] Style** prop);
        [id(0x00000072), propget, helpcontext(0x09db0072)]
        HRESULT ThemeName([out, retval] BSTR* prop);
        [id(0x00000072), propput, helpcontext(0x09db0072)]
        HRESULT ThemeName([in] BSTR prop);
        [id(0x0000006f), propget, hidden, helpcontext(0x09db006f)]
        HRESULT Dummy1([out, retval] VARIANT_BOOL* prop);
        [id(0x00000070), propget, hidden, helpcontext(0x09db0070)]
        HRESULT Dummy2([out, retval] VARIANT_BOOL* prop);
        [id(0x00000071), hidden, helpcontext(0x09db0071)]
        HRESULT Dummy3();
        [id(0x00000074), propget, helpcontext(0x09db0074)]
        HRESULT NewColorOnReply([out, retval] VARIANT_BOOL* prop);
        [id(0x00000074), propput, helpcontext(0x09db0074)]
        HRESULT NewColorOnReply([in] VARIANT_BOOL prop);
        [id(0x00000075), propget, helpcontext(0x09db0075)]
        HRESULT PlainTextStyle([out, retval] Style** prop);
        [id(0x00000076), propget, helpcontext(0x09db0076)]
        HRESULT UseThemeStyleOnReply([out, retval] VARIANT_BOOL* prop);
        [id(0x00000076), propput, helpcontext(0x09db0076)]
        HRESULT UseThemeStyleOnReply([in] VARIANT_BOOL prop);
        [id(0x00000104), propget, helpcontext(0x09db0104)]
        HRESULT AutoFormatAsYouTypeApplyHeadings([out, retval] VARIANT_BOOL* prop);
        [id(0x00000104), propput, helpcontext(0x09db0104)]
        HRESULT AutoFormatAsYouTypeApplyHeadings([in] VARIANT_BOOL prop);
        [id(0x00000105), propget, helpcontext(0x09db0105)]
        HRESULT AutoFormatAsYouTypeApplyBorders([out, retval] VARIANT_BOOL* prop);
        [id(0x00000105), propput, helpcontext(0x09db0105)]
        HRESULT AutoFormatAsYouTypeApplyBorders([in] VARIANT_BOOL prop);
        [id(0x00000106), propget, helpcontext(0x09db0106)]
        HRESULT AutoFormatAsYouTypeApplyBulletedLists([out, retval] VARIANT_BOOL* prop);
        [id(0x00000106), propput, helpcontext(0x09db0106)]
        HRESULT AutoFormatAsYouTypeApplyBulletedLists([in] VARIANT_BOOL prop);
        [id(0x00000107), propget, helpcontext(0x09db0107)]
        HRESULT AutoFormatAsYouTypeApplyNumberedLists([out, retval] VARIANT_BOOL* prop);
        [id(0x00000107), propput, helpcontext(0x09db0107)]
        HRESULT AutoFormatAsYouTypeApplyNumberedLists([in] VARIANT_BOOL prop);
        [id(0x00000108), propget, helpcontext(0x09db0108)]
        HRESULT AutoFormatAsYouTypeReplaceQuotes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000108), propput, helpcontext(0x09db0108)]
        HRESULT AutoFormatAsYouTypeReplaceQuotes([in] VARIANT_BOOL prop);
        [id(0x00000109), propget, helpcontext(0x09db0109)]
        HRESULT AutoFormatAsYouTypeReplaceSymbols([out, retval] VARIANT_BOOL* prop);
        [id(0x00000109), propput, helpcontext(0x09db0109)]
        HRESULT AutoFormatAsYouTypeReplaceSymbols([in] VARIANT_BOOL prop);
        [id(0x0000010a), propget, helpcontext(0x09db010a)]
        HRESULT AutoFormatAsYouTypeReplaceOrdinals([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010a), propput, helpcontext(0x09db010a)]
        HRESULT AutoFormatAsYouTypeReplaceOrdinals([in] VARIANT_BOOL prop);
        [id(0x0000010b), propget, helpcontext(0x09db010b)]
        HRESULT AutoFormatAsYouTypeReplaceFractions([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010b), propput, helpcontext(0x09db010b)]
        HRESULT AutoFormatAsYouTypeReplaceFractions([in] VARIANT_BOOL prop);
        [id(0x0000010c), propget, helpcontext(0x09db010c)]
        HRESULT AutoFormatAsYouTypeReplacePlainTextEmphasis([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010c), propput, helpcontext(0x09db010c)]
        HRESULT AutoFormatAsYouTypeReplacePlainTextEmphasis([in] VARIANT_BOOL prop);
        [id(0x0000010d), propget, helpcontext(0x09db010d)]
        HRESULT AutoFormatAsYouTypeFormatListItemBeginning([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010d), propput, helpcontext(0x09db010d)]
        HRESULT AutoFormatAsYouTypeFormatListItemBeginning([in] VARIANT_BOOL prop);
        [id(0x0000010e), propget, helpcontext(0x09db010e)]
        HRESULT AutoFormatAsYouTypeDefineStyles([out, retval] VARIANT_BOOL* prop);
        [id(0x0000010e), propput, helpcontext(0x09db010e)]
        HRESULT AutoFormatAsYouTypeDefineStyles([in] VARIANT_BOOL prop);
        [id(0x00000110), propget, helpcontext(0x09db0110)]
        HRESULT AutoFormatAsYouTypeReplaceHyperlinks([out, retval] VARIANT_BOOL* prop);
        [id(0x00000110), propput, helpcontext(0x09db0110)]
        HRESULT AutoFormatAsYouTypeReplaceHyperlinks([in] VARIANT_BOOL prop);
        [id(0x00000122), propget, helpcontext(0x09db0122)]
        HRESULT AutoFormatAsYouTypeApplyTables([out, retval] VARIANT_BOOL* prop);
        [id(0x00000122), propput, helpcontext(0x09db0122)]
        HRESULT AutoFormatAsYouTypeApplyTables([in] VARIANT_BOOL prop);
        [id(0x00000129), propget, helpcontext(0x09db0129)]
        HRESULT AutoFormatAsYouTypeApplyFirstIndents([out, retval] VARIANT_BOOL* prop);
        [id(0x00000129), propput, helpcontext(0x09db0129)]
        HRESULT AutoFormatAsYouTypeApplyFirstIndents([in] VARIANT_BOOL prop);
        [id(0x0000012a), propget, helpcontext(0x09db012a)]
        HRESULT AutoFormatAsYouTypeApplyDates([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012a), propput, helpcontext(0x09db012a)]
        HRESULT AutoFormatAsYouTypeApplyDates([in] VARIANT_BOOL prop);
        [id(0x0000012b), propget, helpcontext(0x09db012b)]
        HRESULT AutoFormatAsYouTypeApplyClosings([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012b), propput, helpcontext(0x09db012b)]
        HRESULT AutoFormatAsYouTypeApplyClosings([in] VARIANT_BOOL prop);
        [id(0x0000012c), propget, helpcontext(0x09db012c)]
        HRESULT AutoFormatAsYouTypeMatchParentheses([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012c), propput, helpcontext(0x09db012c)]
        HRESULT AutoFormatAsYouTypeMatchParentheses([in] VARIANT_BOOL prop);
        [id(0x0000012d), propget, helpcontext(0x09db012d)]
        HRESULT AutoFormatAsYouTypeReplaceFarEastDashes([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012d), propput, helpcontext(0x09db012d)]
        HRESULT AutoFormatAsYouTypeReplaceFarEastDashes([in] VARIANT_BOOL prop);
        [id(0x0000012e), propget, helpcontext(0x09db012e)]
        HRESULT AutoFormatAsYouTypeDeleteAutoSpaces([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012e), propput, helpcontext(0x09db012e)]
        HRESULT AutoFormatAsYouTypeDeleteAutoSpaces([in] VARIANT_BOOL prop);
        [id(0x0000012f), propget, helpcontext(0x09db012f)]
        HRESULT AutoFormatAsYouTypeInsertClosings([out, retval] VARIANT_BOOL* prop);
        [id(0x0000012f), propput, helpcontext(0x09db012f)]
        HRESULT AutoFormatAsYouTypeInsertClosings([in] VARIANT_BOOL prop);
        [id(0x00000130), propget, helpcontext(0x09db0130)]
        HRESULT AutoFormatAsYouTypeAutoLetterWizard([out, retval] VARIANT_BOOL* prop);
        [id(0x00000130), propput, helpcontext(0x09db0130)]
        HRESULT AutoFormatAsYouTypeAutoLetterWizard([in] VARIANT_BOOL prop);
        [id(0x00000131), propget, helpcontext(0x09db0131)]
        HRESULT AutoFormatAsYouTypeInsertOvers([out, retval] VARIANT_BOOL* prop);
        [id(0x00000131), propput, helpcontext(0x09db0131)]
        HRESULT AutoFormatAsYouTypeInsertOvers([in] VARIANT_BOOL prop);
        [id(0x00000132), propget, helpcontext(0x09db0132)]
        HRESULT RelyOnCSS([out, retval] VARIANT_BOOL* prop);
        [id(0x00000132), propput, helpcontext(0x09db0132)]
        HRESULT RelyOnCSS([in] VARIANT_BOOL prop);
        [id(0x00000133), propget, helpcontext(0x09db0133)]
        HRESULT HTMLFidelity([out, retval] WdEmailHTMLFidelity* prop);
        [id(0x00000133), propput, helpcontext(0x09db0133)]
        HRESULT HTMLFidelity([in] WdEmailHTMLFidelity prop);
        [id(0x00000134), propget, hidden, helpcontext(0x09db0134)]
        HRESULT EmbedSmartTag([out, retval] VARIANT_BOOL* prop);
        [id(0x00000134), propput, hidden, helpcontext(0x09db0134)]
        HRESULT EmbedSmartTag([in] VARIANT_BOOL prop);
        [id(0x00000135), propget, helpcontext(0x09db0135)]
        HRESULT TabIndentKey([out, retval] VARIANT_BOOL* prop);
        [id(0x00000135), propput, helpcontext(0x09db0135)]
        HRESULT TabIndentKey([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(000209DC-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009dc),
      dual,
      nonextensible,
      oleautomation
    ]
    interface EmailSignature : IDispatch {
        [id(0x00000064), propget, helpcontext(0x09dc0064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x09dc0065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x09dc0066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x09dc0067)]
        HRESULT NewMessageSignature([out, retval] BSTR* prop);
        [id(0x00000067), propput, helpcontext(0x09dc0067)]
        HRESULT NewMessageSignature([in] BSTR prop);
        [id(0x00000068), propget, helpcontext(0x09dc0068)]
        HRESULT ReplyMessageSignature([out, retval] BSTR* prop);
        [id(0x00000068), propput, helpcontext(0x09dc0068)]
        HRESULT ReplyMessageSignature([in] BSTR prop);
        [id(0x00000069), propget, helpcontext(0x09dc0069)]
        HRESULT EmailSignatureEntries([out, retval] EmailSignatureEntries** prop);
    };

    [
      odl,
      uuid(000209DD-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009dd),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Email : IDispatch {
        [id(0x00000064), propget, helpcontext(0x09dd0064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x09dd0065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x09dd0066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000069), propget, helpcontext(0x09dd0069)]
        HRESULT CurrentEmailAuthor([out, retval] EmailAuthor** prop);
    };

    [
      odl,
      uuid(000209DE-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009de),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HorizontalLineFormat : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09de03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09de03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09de03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x09de0002)]
        HRESULT PercentWidth([out, retval] single* prop);
        [id(0x00000002), propput, helpcontext(0x09de0002)]
        HRESULT PercentWidth([in] single prop);
        [id(0x00000003), propget, helpcontext(0x09de0003)]
        HRESULT NoShade([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09de0003)]
        HRESULT NoShade([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09de0004)]
        HRESULT Alignment([out, retval] WdHorizontalLineAlignment* prop);
        [id(0x00000004), propput, helpcontext(0x09de0004)]
        HRESULT Alignment([in] WdHorizontalLineAlignment prop);
        [id(0x00000005), propget, helpcontext(0x09de0005)]
        HRESULT WidthType([out, retval] WdHorizontalLineWidthType* prop);
        [id(0x00000005), propput, helpcontext(0x09de0005)]
        HRESULT WidthType([in] WdHorizontalLineWidthType prop);
    };

    [
      odl,
      uuid(000209E2-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009e2),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Frameset : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09e2fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x000003eb), propget, helpcontext(0x09e203eb)]
        HRESULT ParentFrameset([out, retval] Frameset** prop);
        [id(00000000), propget, helpcontext(0x09e20000)]
        HRESULT Type([out, retval] WdFramesetType* prop);
        [id(0x00000001), propget, helpcontext(0x09e20001)]
        HRESULT WidthType([out, retval] WdFramesetSizeType* prop);
        [id(0x00000001), propput, helpcontext(0x09e20001)]
        HRESULT WidthType([in] WdFramesetSizeType prop);
        [id(0x00000002), propget, helpcontext(0x09e20002)]
        HRESULT HeightType([out, retval] WdFramesetSizeType* prop);
        [id(0x00000002), propput, helpcontext(0x09e20002)]
        HRESULT HeightType([in] WdFramesetSizeType prop);
        [id(0x00000003), propget, helpcontext(0x09e20003)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x09e20003)]
        HRESULT Width([in] long prop);
        [id(0x00000004), propget, helpcontext(0x09e20004)]
        HRESULT Height([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x09e20004)]
        HRESULT Height([in] long prop);
        [id(0x00000005), propget, helpcontext(0x09e20005)]
        HRESULT ChildFramesetCount([out, retval] long* prop);
        [id(0x00000006), propget, helpcontext(0x09e20006)]
        HRESULT ChildFramesetItem(
                        [in] long Index, 
                        [out, retval] Frameset** prop);
        [id(0x00000014), propget, helpcontext(0x09e20014)]
        HRESULT FramesetBorderWidth([out, retval] single* prop);
        [id(0x00000014), propput, helpcontext(0x09e20014)]
        HRESULT FramesetBorderWidth([in] single prop);
        [id(0x00000015), propget, helpcontext(0x09e20015)]
        HRESULT FramesetBorderColor([out, retval] WdColor* prop);
        [id(0x00000015), propput, helpcontext(0x09e20015)]
        HRESULT FramesetBorderColor([in] WdColor prop);
        [id(0x0000001e), propget, helpcontext(0x09e2001e)]
        HRESULT FrameScrollbarType([out, retval] WdScrollbarType* prop);
        [id(0x0000001e), propput, helpcontext(0x09e2001e)]
        HRESULT FrameScrollbarType([in] WdScrollbarType prop);
        [id(0x0000001f), propget, helpcontext(0x09e2001f)]
        HRESULT FrameResizable([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001f), propput, helpcontext(0x09e2001f)]
        HRESULT FrameResizable([in] VARIANT_BOOL prop);
        [id(0x00000022), propget, helpcontext(0x09e20022)]
        HRESULT FrameName([out, retval] BSTR* prop);
        [id(0x00000022), propput, helpcontext(0x09e20022)]
        HRESULT FrameName([in] BSTR prop);
        [id(0x00000023), propget, helpcontext(0x09e20023)]
        HRESULT FrameDisplayBorders([out, retval] VARIANT_BOOL* prop);
        [id(0x00000023), propput, helpcontext(0x09e20023)]
        HRESULT FrameDisplayBorders([in] VARIANT_BOOL prop);
        [id(0x00000024), propget, helpcontext(0x09e20024)]
        HRESULT FrameDefaultURL([out, retval] BSTR* prop);
        [id(0x00000024), propput, helpcontext(0x09e20024)]
        HRESULT FrameDefaultURL([in] BSTR prop);
        [id(0x00000025), propget, helpcontext(0x09e20025)]
        HRESULT FrameLinkToFile([out, retval] VARIANT_BOOL* prop);
        [id(0x00000025), propput, helpcontext(0x09e20025)]
        HRESULT FrameLinkToFile([in] VARIANT_BOOL prop);
        [id(0x00000032), helpcontext(0x09e20032)]
        HRESULT AddNewFrame(
                        [in] WdFramesetNewFrameLocation Where, 
                        [out, retval] Frameset** prop);
        [id(0x00000033), helpcontext(0x09e20033)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(000209E3-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009e3),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DefaultWebOptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09e30001)]
        HRESULT OptimizeForBrowser([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09e30001)]
        HRESULT OptimizeForBrowser([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x09e30002)]
        HRESULT BrowserLevel([out, retval] WdBrowserLevel* prop);
        [id(0x00000002), propput, helpcontext(0x09e30002)]
        HRESULT BrowserLevel([in] WdBrowserLevel prop);
        [id(0x00000003), propget, helpcontext(0x09e30003)]
        HRESULT RelyOnCSS([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09e30003)]
        HRESULT RelyOnCSS([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09e30004)]
        HRESULT OrganizeInFolder([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09e30004)]
        HRESULT OrganizeInFolder([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x09e30005)]
        HRESULT UpdateLinksOnSave([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x09e30005)]
        HRESULT UpdateLinksOnSave([in] VARIANT_BOOL prop);
        [id(0x00000006), propget, helpcontext(0x09e30006)]
        HRESULT UseLongFileNames([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x09e30006)]
        HRESULT UseLongFileNames([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09e30007)]
        HRESULT CheckIfOfficeIsHTMLEditor([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propput, helpcontext(0x09e30007)]
        HRESULT CheckIfOfficeIsHTMLEditor([in] VARIANT_BOOL prop);
        [id(0x00000008), propget, helpcontext(0x09e30008)]
        HRESULT CheckIfWordIsDefaultHTMLEditor([out, retval] VARIANT_BOOL* prop);
        [id(0x00000008), propput, helpcontext(0x09e30008)]
        HRESULT CheckIfWordIsDefaultHTMLEditor([in] VARIANT_BOOL prop);
        [id(0x00000009), propget, helpcontext(0x09e30009)]
        HRESULT RelyOnVML([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x09e30009)]
        HRESULT RelyOnVML([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x09e3000a)]
        HRESULT AllowPNG([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000a), propput, helpcontext(0x09e3000a)]
        HRESULT AllowPNG([in] VARIANT_BOOL prop);
        [id(0x0000000b), propget, helpcontext(0x09e3000b)]
        HRESULT ScreenSize([out, retval] MsoScreenSize* prop);
        [id(0x0000000b), propput, helpcontext(0x09e3000b)]
        HRESULT ScreenSize([in] MsoScreenSize prop);
        [id(0x0000000c), propget, helpcontext(0x09e3000c)]
        HRESULT PixelsPerInch([out, retval] long* prop);
        [id(0x0000000c), propput, helpcontext(0x09e3000c)]
        HRESULT PixelsPerInch([in] long prop);
        [id(0x0000000d), propget, helpcontext(0x09e3000d)]
        HRESULT Encoding([out, retval] MsoEncoding* prop);
        [id(0x0000000d), propput, helpcontext(0x09e3000d)]
        HRESULT Encoding([in] MsoEncoding prop);
        [id(0x0000000e), propget, helpcontext(0x09e3000e)]
        HRESULT AlwaysSaveInDefaultEncoding([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000e), propput, helpcontext(0x09e3000e)]
        HRESULT AlwaysSaveInDefaultEncoding([in] VARIANT_BOOL prop);
        [id(0x0000000f), propget, helpcontext(0x09e3000f)]
        HRESULT Fonts([out, retval] WebPageFonts** prop);
        [id(0x00000010), propget, helpcontext(0x09e30010)]
        HRESULT FolderSuffix([out, retval] BSTR* prop);
        [id(0x00000011), propget, helpcontext(0x09e30011)]
        HRESULT TargetBrowser([out, retval] MsoTargetBrowser* prop);
        [id(0x00000011), propput, helpcontext(0x09e30011)]
        HRESULT TargetBrowser([in] MsoTargetBrowser prop);
        [id(0x00000012), propget, helpcontext(0x09e30012)]
        HRESULT SaveNewWebPagesAsWebArchives([out, retval] VARIANT_BOOL* prop);
        [id(0x00000012), propput, helpcontext(0x09e30012)]
        HRESULT SaveNewWebPagesAsWebArchives([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(000209E4-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009e4),
      dual,
      nonextensible,
      oleautomation
    ]
    interface WebOptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e403e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09e40001)]
        HRESULT OptimizeForBrowser([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propput, helpcontext(0x09e40001)]
        HRESULT OptimizeForBrowser([in] VARIANT_BOOL prop);
        [id(0x00000002), propget, helpcontext(0x09e40002)]
        HRESULT BrowserLevel([out, retval] WdBrowserLevel* prop);
        [id(0x00000002), propput, helpcontext(0x09e40002)]
        HRESULT BrowserLevel([in] WdBrowserLevel prop);
        [id(0x00000003), propget, helpcontext(0x09e40003)]
        HRESULT RelyOnCSS([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x09e40003)]
        HRESULT RelyOnCSS([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x09e40004)]
        HRESULT OrganizeInFolder([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, helpcontext(0x09e40004)]
        HRESULT OrganizeInFolder([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x09e40005)]
        HRESULT UseLongFileNames([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x09e40005)]
        HRESULT UseLongFileNames([in] VARIANT_BOOL prop);
        [id(0x00000006), propget, helpcontext(0x09e40006)]
        HRESULT RelyOnVML([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x09e40006)]
        HRESULT RelyOnVML([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x09e40007)]
        HRESULT AllowPNG([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propput, helpcontext(0x09e40007)]
        HRESULT AllowPNG([in] VARIANT_BOOL prop);
        [id(0x00000008), propget, helpcontext(0x09e40008)]
        HRESULT ScreenSize([out, retval] MsoScreenSize* prop);
        [id(0x00000008), propput, helpcontext(0x09e40008)]
        HRESULT ScreenSize([in] MsoScreenSize prop);
        [id(0x00000009), propget, helpcontext(0x09e40009)]
        HRESULT PixelsPerInch([out, retval] long* prop);
        [id(0x00000009), propput, helpcontext(0x09e40009)]
        HRESULT PixelsPerInch([in] long prop);
        [id(0x0000000a), propget, helpcontext(0x09e4000a)]
        HRESULT Encoding([out, retval] MsoEncoding* prop);
        [id(0x0000000a), propput, helpcontext(0x09e4000a)]
        HRESULT Encoding([in] MsoEncoding prop);
        [id(0x0000000b), propget, helpcontext(0x09e4000b)]
        HRESULT FolderSuffix([out, retval] BSTR* prop);
        [id(0x00000065), helpcontext(0x09e40065)]
        HRESULT UseDefaultFolderSuffix();
        [id(0x0000000c), propget, helpcontext(0x09e4000c)]
        HRESULT TargetBrowser([out, retval] MsoTargetBrowser* prop);
        [id(0x0000000c), propput, helpcontext(0x09e4000c)]
        HRESULT TargetBrowser([in] MsoTargetBrowser prop);
    };

    [
      odl,
      uuid(000209DF-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009df),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OtherCorrectionsExceptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09df03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09df03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09df03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09dffffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09df0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09df0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] OtherCorrectionsException** prop);
        [id(0x00000065), helpcontext(0x09df0065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] OtherCorrectionsException** prop);
    };

    [
      odl,
      uuid(000209E1-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009e1),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OtherCorrectionsException : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09e10001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09e10002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000065), helpcontext(0x09e10065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(000209E5-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009e5),
      dual,
      nonextensible,
      oleautomation
    ]
    interface EmailSignatureEntries : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09e5fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09e50001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09e50000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] EmailSignatureEntry** prop);
        [id(0x00000065), helpcontext(0x09e50065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in] Range* Range, 
                        [out, retval] EmailSignatureEntry** prop);
    };

    [
      odl,
      uuid(000209E6-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009e6),
      dual,
      nonextensible,
      oleautomation
    ]
    interface EmailSignatureEntry : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e603e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e603e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e603ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09e60001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09e60002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x09e60002)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000065), helpcontext(0x09e60065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(000209E7-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009e7),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HTMLDivision : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09e70001)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x0000044c), propget, helpcontext(0x09e7044c)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x00000003), propget, helpcontext(0x09e70003)]
        HRESULT LeftIndent([out, retval] single* prop);
        [id(0x00000003), propput, helpcontext(0x09e70003)]
        HRESULT LeftIndent([in] single prop);
        [id(0x00000004), propget, helpcontext(0x09e70004)]
        HRESULT RightIndent([out, retval] single* prop);
        [id(0x00000004), propput, helpcontext(0x09e70004)]
        HRESULT RightIndent([in] single prop);
        [id(0x00000005), propget, helpcontext(0x09e70005)]
        HRESULT SpaceBefore([out, retval] single* prop);
        [id(0x00000005), propput, helpcontext(0x09e70005)]
        HRESULT SpaceBefore([in] single prop);
        [id(0x00000006), propget, helpcontext(0x09e70006)]
        HRESULT SpaceAfter([out, retval] single* prop);
        [id(0x00000006), propput, helpcontext(0x09e70006)]
        HRESULT SpaceAfter([in] single prop);
        [id(0x00000007), propget, helpcontext(0x09e70007)]
        HRESULT HTMLDivisions([out, retval] HTMLDivisions** prop);
        [id(0x00000008), helpcontext(0x09e70008)]
        HRESULT HTMLDivisionParent(
                        [in, optional] VARIANT* LevelsUp, 
                        [out, retval] HTMLDivision** prop);
        [id(0x00000065), helpcontext(0x09e70065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(000209E8-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009e8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HTMLDivisions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e803e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09e803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x09e8fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x09e80001)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09e80002)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x00000065), helpcontext(0x09e80065)]
        HRESULT Add(
                        [in, optional] VARIANT* Range, 
                        [out, retval] HTMLDivision** prop);
        [id(00000000), helpcontext(0x09e80000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] HTMLDivision** prop);
    };

    [
      odl,
      uuid(000209E9-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009e9),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface DiagramNode : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09e903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09e903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000064), propget, helpcontext(0x09e90064)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000065), propget, helpcontext(0x09e90065)]
        HRESULT Children([out, retval] DiagramNodeChildren** prop);
        [id(0x00000066), propget, helpcontext(0x09e90066)]
        HRESULT Shape([out, retval] Shape** prop);
        [id(0x00000067), propget, helpcontext(0x09e90067)]
        HRESULT Root([out, retval] DiagramNode** prop);
        [id(0x00000068), propget, helpcontext(0x09e90068)]
        HRESULT Diagram([out, retval] Diagram** prop);
        [id(0x00000069), propget, helpcontext(0x09e90069)]
        HRESULT Layout([out, retval] MsoOrgChartLayoutType* prop);
        [id(0x00000069), propput, helpcontext(0x09e90069)]
        HRESULT Layout([in] MsoOrgChartLayoutType prop);
        [id(0x0000006a), propget, helpcontext(0x09e9006a)]
        HRESULT TextShape([out, retval] Shape** prop);
        [id(0x0000000a), helpcontext(0x09e9000a)]
        HRESULT AddNode(
                        [in, optional, defaultvalue(2)] MsoRelativeNodePosition Pos, 
                        [in, optional, defaultvalue(1)] MsoDiagramNodeType NodeType, 
                        [out, retval] DiagramNode** prop);
        [id(0x0000000b), helpcontext(0x09e9000b)]
        HRESULT Delete();
        [id(0x0000000c), helpcontext(0x09e9000c)]
        HRESULT MoveNode(
                        [out] DiagramNode** TargetNode, 
                        [in] MsoRelativeNodePosition Pos);
        [id(0x0000000d), helpcontext(0x09e9000d)]
        HRESULT ReplaceNode([out] DiagramNode** TargetNode);
        [id(0x0000000e), helpcontext(0x09e9000e)]
        HRESULT SwapNode(
                        [out] DiagramNode** TargetNode, 
                        [in, optional, defaultvalue(-1)] MsoRelativeNodePosition Pos);
        [id(0x0000000f), helpcontext(0x09e9000f)]
        HRESULT CloneNode(
                        [in] VARIANT_BOOL copyChildren, 
                        [out, optional, defaultvalue(0)] DiagramNode** TargetNode, 
                        [in, optional, defaultvalue(2)] MsoRelativeNodePosition Pos, 
                        [out, retval] DiagramNode** prop);
        [id(0x00000010), helpcontext(0x09e90010)]
        HRESULT TransferChildren([out] DiagramNode** ReceivingNode);
        [id(0x00000011), helpcontext(0x09e90011)]
        HRESULT NextNode([out, retval] DiagramNode** prop);
        [id(0x00000012), helpcontext(0x09e90012)]
        HRESULT PrevNode([out, retval] DiagramNode** prop);
    };

    [
      odl,
      uuid(000209EA-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009ea),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface DiagramNodeChildren : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ea03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ea03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x09eafffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000064), propget, helpcontext(0x09ea0064)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000065), propget, helpcontext(0x09ea0065)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000067), propget, helpcontext(0x09ea0067)]
        HRESULT FirstChild([out, retval] DiagramNode** prop);
        [id(0x00000068), propget, helpcontext(0x09ea0068)]
        HRESULT LastChild([out, retval] DiagramNode** prop);
        [id(00000000), helpcontext(0x09ea0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] DiagramNode** prop);
        [id(0x0000000a), helpcontext(0x09ea000a)]
        HRESULT AddNode(
                        [in, optional, defaultvalue(-1)] VARIANT* Index, 
                        [in, optional, defaultvalue(1)] MsoDiagramNodeType NodeType, 
                        [out, retval] DiagramNode** prop);
        [id(0x0000000b), helpcontext(0x09ea000b)]
        HRESULT SelectAll();
    };

    [
      odl,
      uuid(000209EB-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009eb),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface DiagramNodes : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09eb03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09eb03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x09ebfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000064), propget, helpcontext(0x09eb0064)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000065), propget, helpcontext(0x09eb0065)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09eb0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] DiagramNode** prop);
        [id(0x0000000a), helpcontext(0x09eb000a)]
        HRESULT SelectAll();
    };

    [
      odl,
      uuid(000209EC-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009ec),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface Diagram : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ec03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ec03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000064), propget, helpcontext(0x09ec0064)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000065), propget, helpcontext(0x09ec0065)]
        HRESULT Nodes([out, retval] DiagramNodes** prop);
        [id(0x00000066), propget, helpcontext(0x09ec0066)]
        HRESULT Type([out, retval] MsoDiagramType* prop);
        [id(0x00000067), propget, helpcontext(0x09ec0067)]
        HRESULT AutoLayout([out, retval] MsoTriState* prop);
        [id(0x00000067), propput, helpcontext(0x09ec0067)]
        HRESULT AutoLayout([in] MsoTriState prop);
        [id(0x00000068), propget, helpcontext(0x09ec0068)]
        HRESULT Reverse([out, retval] MsoTriState* prop);
        [id(0x00000068), propput, helpcontext(0x09ec0068)]
        HRESULT Reverse([in] MsoTriState prop);
        [id(0x00000069), propget, helpcontext(0x09ec0069)]
        HRESULT AutoFormat([out, retval] MsoTriState* prop);
        [id(0x00000069), propput, helpcontext(0x09ec0069)]
        HRESULT AutoFormat([in] MsoTriState prop);
        [id(0x0000000a), helpcontext(0x09ec000a)]
        HRESULT Convert([in] MsoDiagramType Type);
        [id(0x0000000b), helpcontext(0x09ec000b)]
        HRESULT FitText();
    };

    [
      odl,
      uuid(B923FDE0-F08C-11D3-91B0-00105A0A19FD),
      version(8.6),
      helpcontext(0x00000de0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomProperty : IDispatch {
        [id(0x00000001), propget, helpcontext(0x0de00001)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(00000000), propget, helpcontext(0x0de00000)]
        HRESULT Value([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x0de00000)]
        HRESULT Value([in] BSTR prop);
        [id(0x000003e8), propget, helpcontext(0x0de003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0de003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0de003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000000b), helpcontext(0x0de0000b)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(B923FDE1-F08C-11D3-91B0-00105A0A19FD),
      version(8.6),
      helpcontext(0x00000de1),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CustomProperties : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0de1fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x0de10002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x0de103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0de103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0de103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x0de10000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] CustomProperty** prop);
        [id(0x00000005), helpcontext(0x0de10005)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in] BSTR Value, 
                        [out, retval] CustomProperty** prop);
    };

    [
      odl,
      uuid(000209ED-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009ed),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartTag : IDispatch {
        [id(00000000), propget, hidden, helpcontext(0x09ed0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propget, hidden, helpcontext(0x09ed0002)]
        HRESULT XML([out, retval] BSTR* prop);
        [id(0x00000003), propget, hidden, helpcontext(0x09ed0003)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000004), propget, hidden, helpcontext(0x09ed0004)]
        HRESULT DownloadURL([out, retval] BSTR* prop);
        [id(0x00000005), propget, hidden, helpcontext(0x09ed0005)]
        HRESULT Properties([out, retval] CustomProperties** prop);
        [id(0x000003e8), propget, hidden, helpcontext(0x09ed03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, hidden, helpcontext(0x09ed03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, hidden, helpcontext(0x09ed03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000ffff), hidden, helpcontext(0x09edffff)]
        HRESULT Select();
        [id(0x0000000b), hidden, helpcontext(0x09ed000b)]
        HRESULT Delete();
        [id(0x000003eb), propget, hidden, helpcontext(0x09ed03eb)]
        HRESULT SmartTagActions([out, retval] SmartTagActions** prop);
        [id(0x000003ec), propget, hidden, helpcontext(0x09ed03ec)]
        HRESULT XMLNode([out, retval] XMLNode** prop);
    };

    [
      odl,
      uuid(000209EE-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009ee),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartTags : IDispatch {
        [id(0xfffffffc), propget, hidden, helpcontext(0x09eefffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, hidden, helpcontext(0x09ee0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, hidden, helpcontext(0x09ee03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, hidden, helpcontext(0x09ee03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, hidden, helpcontext(0x09ee03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), hidden, helpcontext(0x09ee0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] SmartTag** prop);
        [id(0x00000005), hidden, helpcontext(0x09ee0005)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT* Range, 
                        [in, optional] VARIANT* Properties, 
                        [out, retval] SmartTag** prop);
        [id(0x000003eb), hidden, helpcontext(0x09ee03eb)]
        HRESULT SmartTagsByType(
                        [in] BSTR Name, 
                        [out, retval] SmartTags** prop);
    };

    [
      odl,
      uuid(000209EF-0000-0000-C000-000000000046),
      version(8.6),
      helpcontext(0x000009ef),
      dual,
      nonextensible,
      oleautomation
    ]
    interface StyleSheet : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09ef03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09ef03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000064), propget, helpcontext(0x09ef0064)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09ef0001)]
        HRESULT FullName([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x09ef0002)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x09ef0003)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000004), propget, helpcontext(0x09ef0004)]
        HRESULT Path([out, retval] BSTR* prop);
        [id(0x00000005), propget, helpcontext(0x09ef0005)]
        HRESULT Type([out, retval] WdStyleSheetLinkType* prop);
        [id(0x00000005), propput, helpcontext(0x09ef0005)]
        HRESULT Type([in] WdStyleSheetLinkType prop);
        [id(0x00000006), propget, helpcontext(0x09ef0006)]
        HRESULT Title([out, retval] BSTR* prop);
        [id(0x00000006), propput, helpcontext(0x09ef0006)]
        HRESULT Title([in] BSTR prop);
        [id(0x00000007), helpcontext(0x09ef0007)]
        HRESULT Move([in] WdStyleSheetPrecedence Precedence);
        [id(0x00000008), helpcontext(0x09ef0008)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(07B7CC7E-E66C-11D3-9454-00105AA31A08),
      version(8.6),
      helpcontext(0x00000c7e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface StyleSheets : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0c7e03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0c7e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0c7e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0c7efffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x0c7e0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x0c7e0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] StyleSheet** prop);
        [id(0x00000002), helpcontext(0x0c7e0002)]
        HRESULT Add(
                        [in] BSTR FileName, 
                        [in] WdStyleSheetLinkType LinkType, 
                        [in] BSTR Title, 
                        [in] WdStyleSheetPrecedence Precedence, 
                        [out, retval] StyleSheet** prop);
    };

    [
      odl,
      uuid(5D311669-EA51-11D3-87CC-00105AA31A34),
      version(8.6),
      helpcontext(0x00000669),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MappedDataField : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x066903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x066903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x066903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x06690001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x06690002)]
        HRESULT DataFieldName([out, retval] BSTR* prop);
        [id(00000000), propget, helpcontext(0x06690000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000004), propget, helpcontext(0x06690004)]
        HRESULT Value([out, retval] BSTR* prop);
        [id(0x00000005), propget, helpcontext(0x06690005)]
        HRESULT DataFieldIndex([out, retval] long* prop);
        [id(0x00000005), propput, helpcontext(0x06690005)]
        HRESULT DataFieldIndex([in] long prop);
    };

    [
      odl,
      uuid(799A6814-EA41-11D3-87CC-00105AA31A34),
      version(8.6),
      helpcontext(0x00000814),
      dual,
      nonextensible,
      oleautomation
    ]
    interface MappedDataFields : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x081403e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x081403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x081403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x08140001)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x0814fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x08140000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] WdMappedDataFields Index, 
                        [out, retval] MappedDataField** prop);
    };

    [
      odl,
      uuid(396F9073-F9FD-11D3-8EA0-0050049A1A01),
      version(8.6),
      helpcontext(0x00000073),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CanvasShapes : IDispatch {
        [id(0x00001f40), propget, helpcontext(0x00731f40)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00001f41), propget, helpcontext(0x00731f41)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000001), propget, helpcontext(0x00730001)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x00730002)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x0073fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x00730000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Shape** prop);
        [id(0x0000000a), helpcontext(0x0073000a)]
        HRESULT AddCallout(
                        [in] MsoCalloutType Type, 
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [out, retval] Shape** prop);
        [id(0x0000000b), helpcontext(0x0073000b)]
        HRESULT AddConnector(
                        [in] MsoConnectorType Type, 
                        [in] single BeginX, 
                        [in] single BeginY, 
                        [in] single EndX, 
                        [in] single EndY, 
                        [out, retval] Shape** prop);
        [id(0x0000000c), helpcontext(0x0073000c)]
        HRESULT AddCurve(
                        [in] VARIANT* SafeArrayOfPoints, 
                        [out, retval] Shape** prop);
        [id(0x0000000d), helpcontext(0x0073000d)]
        HRESULT AddLabel(
                        [in] MsoTextOrientation Orientation, 
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [out, retval] Shape** prop);
        [id(0x0000000e), helpcontext(0x0073000e)]
        HRESULT AddLine(
                        [in] single BeginX, 
                        [in] single BeginY, 
                        [in] single EndX, 
                        [in] single EndY, 
                        [out, retval] Shape** prop);
        [id(0x0000000f), helpcontext(0x0073000f)]
        HRESULT AddPicture(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT* LinkToFile, 
                        [in, optional] VARIANT* SaveWithDocument, 
                        [in, optional] VARIANT* Left, 
                        [in, optional] VARIANT* Top, 
                        [in, optional] VARIANT* Width, 
                        [in, optional] VARIANT* Height, 
                        [out, retval] Shape** prop);
        [id(0x00000010), helpcontext(0x00730010)]
        HRESULT AddPolyline(
                        [in] VARIANT* SafeArrayOfPoints, 
                        [out, retval] Shape** prop);
        [id(0x00000011), helpcontext(0x00730011)]
        HRESULT AddShape(
                        [in] long Type, 
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [out, retval] Shape** prop);
        [id(0x00000012), helpcontext(0x00730012)]
        HRESULT AddTextEffect(
                        [in] MsoPresetTextEffect PresetTextEffect, 
                        [in] BSTR Text, 
                        [in] BSTR FontName, 
                        [in] single FontSize, 
                        [in] MsoTriState FontBold, 
                        [in] MsoTriState FontItalic, 
                        [in] single Left, 
                        [in] single Top, 
                        [out, retval] Shape** prop);
        [id(0x00000013), helpcontext(0x00730013)]
        HRESULT AddTextbox(
                        [in] MsoTextOrientation Orientation, 
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [out, retval] Shape** prop);
        [id(0x00000014), helpcontext(0x00730014)]
        HRESULT BuildFreeform(
                        [in] MsoEditingType EditingType, 
                        [in] single X1, 
                        [in] single Y1, 
                        [out, retval] FreeformBuilder** prop);
        [id(0x00000015), helpcontext(0x00730015)]
        HRESULT Range(
                        [in] VARIANT* Index, 
                        [out, retval] ShapeRange** prop);
        [id(0x00000016), helpcontext(0x00730016)]
        HRESULT SelectAll();
    };

    [
      odl,
      uuid(B7564E97-0519-4C68-B400-3803E7C63242),
      version(8.6),
      helpcontext(0x00000e97),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TableStyle : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0e9703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0e9703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000064), propget, helpcontext(0x0e970064)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x0e970002)]
        HRESULT AllowPageBreaks([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x0e970002)]
        HRESULT AllowPageBreaks([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x0e970003)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x00000003), propput, helpcontext(0x0e970003)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000004), propget, helpcontext(0x0e970004)]
        HRESULT BottomPadding([out, retval] single* prop);
        [id(0x00000004), propput, helpcontext(0x0e970004)]
        HRESULT BottomPadding([in] single prop);
        [id(0x00000005), propget, helpcontext(0x0e970005)]
        HRESULT LeftPadding([out, retval] single* prop);
        [id(0x00000005), propput, helpcontext(0x0e970005)]
        HRESULT LeftPadding([in] single prop);
        [id(0x00000006), propget, helpcontext(0x0e970006)]
        HRESULT TopPadding([out, retval] single* prop);
        [id(0x00000006), propput, helpcontext(0x0e970006)]
        HRESULT TopPadding([in] single prop);
        [id(0x00000007), propget, helpcontext(0x0e970007)]
        HRESULT RightPadding([out, retval] single* prop);
        [id(0x00000007), propput, helpcontext(0x0e970007)]
        HRESULT RightPadding([in] single prop);
        [id(0x00000009), propget, helpcontext(0x0e970009)]
        HRESULT Alignment([out, retval] WdRowAlignment* prop);
        [id(0x00000009), propput, helpcontext(0x0e970009)]
        HRESULT Alignment([in] WdRowAlignment prop);
        [id(0x0000000a), propget, helpcontext(0x0e97000a)]
        HRESULT Spacing([out, retval] single* prop);
        [id(0x0000000a), propput, helpcontext(0x0e97000a)]
        HRESULT Spacing([in] single prop);
        [id(0x00000010), helpcontext(0x0e970010)]
        HRESULT Condition(
                        [in] WdConditionCode ConditionCode, 
                        [out, retval] ConditionalStyle** prop);
        [id(0x0000000c), propget, helpcontext(0x0e97000c)]
        HRESULT TableDirection([out, retval] WdTableDirection* prop);
        [id(0x0000000c), propput, helpcontext(0x0e97000c)]
        HRESULT TableDirection([in] WdTableDirection prop);
        [id(0x0000000d), propget, helpcontext(0x0e97000d)]
        HRESULT AllowBreakAcrossPage([out, retval] long* prop);
        [id(0x0000000d), propput, helpcontext(0x0e97000d)]
        HRESULT AllowBreakAcrossPage([in] long prop);
        [id(0x0000000e), propget, helpcontext(0x0e97000e)]
        HRESULT LeftIndent([out, retval] single* prop);
        [id(0x0000000e), propput, helpcontext(0x0e97000e)]
        HRESULT LeftIndent([in] single prop);
        [id(0x0000000f), propget, helpcontext(0x0e97000f)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000011), propget, helpcontext(0x0e970011)]
        HRESULT RowStripe([out, retval] long* prop);
        [id(0x00000011), propput, helpcontext(0x0e970011)]
        HRESULT RowStripe([in] long prop);
        [id(0x00000012), propget, helpcontext(0x0e970012)]
        HRESULT ColumnStripe([out, retval] long* prop);
        [id(0x00000012), propput, helpcontext(0x0e970012)]
        HRESULT ColumnStripe([in] long prop);
    };

    [
      odl,
      uuid(1498F56D-ED33-41F9-B37B-EF30E50B08AC),
      version(8.6),
      helpcontext(0x0000056d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ConditionalStyle : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x056d03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x056d03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000064), propget, helpcontext(0x056d0064)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x056d0001)]
        HRESULT Shading([out, retval] Shading** prop);
        [id(0x00000002), propget, helpcontext(0x056d0002)]
        HRESULT Borders([out, retval] Borders** prop);
        [id(0x00000002), propput, helpcontext(0x056d0002)]
        HRESULT Borders([in] Borders* prop);
        [id(0x00000003), propget, helpcontext(0x056d0003)]
        HRESULT BottomPadding([out, retval] single* prop);
        [id(0x00000003), propput, helpcontext(0x056d0003)]
        HRESULT BottomPadding([in] single prop);
        [id(0x00000004), propget, helpcontext(0x056d0004)]
        HRESULT TopPadding([out, retval] single* prop);
        [id(0x00000004), propput, helpcontext(0x056d0004)]
        HRESULT TopPadding([in] single prop);
        [id(0x00000005), propget, helpcontext(0x056d0005)]
        HRESULT LeftPadding([out, retval] single* prop);
        [id(0x00000005), propput, helpcontext(0x056d0005)]
        HRESULT LeftPadding([in] single prop);
        [id(0x00000006), propget, helpcontext(0x056d0006)]
        HRESULT RightPadding([out, retval] single* prop);
        [id(0x00000006), propput, helpcontext(0x056d0006)]
        HRESULT RightPadding([in] single prop);
        [id(0x00000009), propget, helpcontext(0x056d0009)]
        HRESULT ParagraphFormat([out, retval] _ParagraphFormat** prop);
        [id(0x00000009), propput, helpcontext(0x056d0009)]
        HRESULT ParagraphFormat([in] _ParagraphFormat* prop);
        [id(0x0000000a), propget, helpcontext(0x056d000a)]
        HRESULT Font([out, retval] _Font** prop);
        [id(0x0000000a), propput, helpcontext(0x056d000a)]
        HRESULT Font([in] _Font* prop);
    };

    [
      odl,
      uuid(BEA85A24-D7DA-4F3D-B58C-ED90FB01D615),
      version(8.6),
      helpcontext(0x00000a24),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FootnoteOptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0a2403e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0a2403e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0a2403ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x0a240064)]
        HRESULT Location([out, retval] WdFootnoteLocation* prop);
        [id(0x00000064), propput, helpcontext(0x0a240064)]
        HRESULT Location([in] WdFootnoteLocation prop);
        [id(0x00000065), propget, helpcontext(0x0a240065)]
        HRESULT NumberStyle([out, retval] WdNoteNumberStyle* prop);
        [id(0x00000065), propput, helpcontext(0x0a240065)]
        HRESULT NumberStyle([in] WdNoteNumberStyle prop);
        [id(0x00000066), propget, helpcontext(0x0a240066)]
        HRESULT StartingNumber([out, retval] long* prop);
        [id(0x00000066), propput, helpcontext(0x0a240066)]
        HRESULT StartingNumber([in] long prop);
        [id(0x00000067), propget, helpcontext(0x0a240067)]
        HRESULT NumberingRule([out, retval] WdNumberingRule* prop);
        [id(0x00000067), propput, helpcontext(0x0a240067)]
        HRESULT NumberingRule([in] WdNumberingRule prop);
        [id(0x00000068), propget, helpcontext(0x0a240068)]
        HRESULT LayoutColumns([out, retval] long* prop);
        [id(0x00000068), propput, helpcontext(0x0a240068)]
        HRESULT LayoutColumns([in] long prop);
    };

    [
      odl,
      uuid(BF043168-F4DE-4E7C-B206-741A8B3EF71A),
      version(8.6),
      helpcontext(0x00000168),
      dual,
      nonextensible,
      oleautomation
    ]
    interface EndnoteOptions : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x016803e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x016803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x016803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000064), propget, helpcontext(0x01680064)]
        HRESULT Location([out, retval] WdEndnoteLocation* prop);
        [id(0x00000064), propput, helpcontext(0x01680064)]
        HRESULT Location([in] WdEndnoteLocation prop);
        [id(0x00000065), propget, helpcontext(0x01680065)]
        HRESULT NumberStyle([out, retval] WdNoteNumberStyle* prop);
        [id(0x00000065), propput, helpcontext(0x01680065)]
        HRESULT NumberStyle([in] WdNoteNumberStyle prop);
        [id(0x00000066), propget, helpcontext(0x01680066)]
        HRESULT StartingNumber([out, retval] long* prop);
        [id(0x00000066), propput, helpcontext(0x01680066)]
        HRESULT StartingNumber([in] long prop);
        [id(0x00000067), propget, helpcontext(0x01680067)]
        HRESULT NumberingRule([out, retval] WdNumberingRule* prop);
        [id(0x00000067), propput, helpcontext(0x01680067)]
        HRESULT NumberingRule([in] WdNumberingRule prop);
    };

    [
      odl,
      uuid(12DCDC9A-5418-48A3-BBE6-EB57BAE275E8),
      version(8.6),
      helpcontext(0x00000c9a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Reviewers : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0c9afffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x000003e8), propget, helpcontext(0x0c9a03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0c9a03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0c9a03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x0c9a0002)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x0c9a0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Reviewer** prop);
    };

    [
      odl,
      uuid(47CEF4AE-DC32-4220-8AA5-19CCC0E6633A),
      version(8.6),
      helpcontext(0x000004ae),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Reviewer : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x04ae03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x04ae03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x04ae03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x04ae0000)]
        HRESULT Visible([out, retval] VARIANT_BOOL* prop);
        [id(00000000), propput, helpcontext(0x04ae0000)]
        HRESULT Visible([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(B9F1A4E2-0D0A-43B7-8495-139E7ACBD840),
      version(8.6),
      helpcontext(0x000004e2),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TaskPane : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x04e203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x04e203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x04e203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), propget, helpcontext(0x04e203eb)]
        HRESULT Visible([out, retval] VARIANT_BOOL* prop);
        [id(0x000003eb), propput, helpcontext(0x04e203eb)]
        HRESULT Visible([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(E6AAEC05-E543-4085-BA92-9BF7D2474F5C),
      version(8.6),
      helpcontext(0x00000c05),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TaskPanes : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0c05fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x0c050002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x0c0503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0c0503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0c0503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x0c050000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] WdTaskPanes Index, 
                        [out, retval] TaskPane** prop);
    };

    [
      odl,
      uuid(00020A00-0001-0000-C000-000000000046),
      version(10.0),
      helpcontext(0x00000fa0),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IApplicationEvents3 : IDispatch {
        [id(0x00000001), restricted, hidden]
        HRESULT Startup();
        [id(0x00000002), helpcontext(0x00061a82)]
        HRESULT Quit();
        [id(0x00000003), helpcontext(0x00061a83)]
        HRESULT DocumentChange();
        [id(0x00000004), helpcontext(0x00061a84)]
        HRESULT DocumentOpen([in] _Document* Doc);
        [id(0x00000006), helpcontext(0x00061a85)]
        HRESULT DocumentBeforeClose(
                        [in] _Document* Doc, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x00000007), helpcontext(0x00061a86)]
        HRESULT DocumentBeforePrint(
                        [in] _Document* Doc, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x00000008), helpcontext(0x00061a87)]
        HRESULT DocumentBeforeSave(
                        [in] _Document* Doc, 
                        [in] VARIANT_BOOL* SaveAsUI, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x00000009), helpcontext(0x00061a88)]
        HRESULT NewDocument([in] _Document* Doc);
        [id(0x0000000a), helpcontext(0x00061a89)]
        HRESULT WindowActivate(
                        [in] _Document* Doc, 
                        [in] Window* Wn);
        [id(0x0000000b), helpcontext(0x003d090a)]
        HRESULT WindowDeactivate(
                        [in] _Document* Doc, 
                        [in] Window* Wn);
        [id(0x0000000c), helpcontext(0x003d090b)]
        HRESULT WindowSelectionChange([in] Selection* Sel);
        [id(0x0000000d), helpcontext(0x003d090c)]
        HRESULT WindowBeforeRightClick(
                        [in] Selection* Sel, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x0000000e), helpcontext(0x003d090d)]
        HRESULT WindowBeforeDoubleClick(
                        [in] Selection* Sel, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x0000000f), helpcontext(0x003d090e)]
        HRESULT EPostagePropertyDialog([in] _Document* Doc);
        [id(0x00000010), helpcontext(0x003d090f)]
        HRESULT EPostageInsert([in] _Document* Doc);
        [id(0x00000011), helpcontext(0x003d0910)]
        HRESULT MailMergeAfterMerge(
                        [in] _Document* Doc, 
                        [in] _Document* DocResult);
        [id(0x00000012), helpcontext(0x003d0911)]
        HRESULT MailMergeAfterRecordMerge([in] _Document* Doc);
        [id(0x00000013), helpcontext(0x003d0912)]
        HRESULT MailMergeBeforeMerge(
                        [in] _Document* Doc, 
                        [in] long StartRecord, 
                        [in] long EndRecord, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x00000014), helpcontext(0x003d0913)]
        HRESULT MailMergeBeforeRecordMerge(
                        [in] _Document* Doc, 
                        [in] VARIANT_BOOL* Cancel);
        [id(0x00000015), helpcontext(0x003d0914)]
        HRESULT MailMergeDataSourceLoad([in] _Document* Doc);
        [id(0x00000016), helpcontext(0x003d0915)]
        HRESULT MailMergeDataSourceValidate(
                        [in] _Document* Doc, 
                        [in] VARIANT_BOOL* Handled);
        [id(0x00000017), helpcontext(0x003d0916)]
        HRESULT MailMergeWizardSendToCustom([in] _Document* Doc);
        [id(0x00000018), helpcontext(0x003d0917)]
        HRESULT MailMergeWizardStateChange(
                        [in] _Document* Doc, 
                        [in] int* FromState, 
                        [in] int* ToState, 
                        [in] VARIANT_BOOL* Handled);
        [id(0x00000019), helpcontext(0x003d0918)]
        HRESULT WindowSize(
                        [in] _Document* Doc, 
                        [in] Window* Wn);
    };

    [
      uuid(00020A00-0000-0000-C000-000000000046),
      helpcontext(0x00000fa3),
      hidden
    ]
    dispinterface ApplicationEvents3 {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000001), restricted, hidden]
            void Startup();
            [id(0x00000002), helpcontext(0x00061a82)]
            void Quit();
            [id(0x00000003), helpcontext(0x00061a83)]
            void DocumentChange();
            [id(0x00000004), helpcontext(0x00061a84)]
            void DocumentOpen([in] _Document* Doc);
            [id(0x00000006), helpcontext(0x00061a85)]
            void DocumentBeforeClose(
                            [in] _Document* Doc, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x00000007), helpcontext(0x00061a86)]
            void DocumentBeforePrint(
                            [in] _Document* Doc, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x00000008), helpcontext(0x00061a87)]
            void DocumentBeforeSave(
                            [in] _Document* Doc, 
                            [in] VARIANT_BOOL* SaveAsUI, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x00000009), helpcontext(0x00061a88)]
            void NewDocument([in] _Document* Doc);
            [id(0x0000000a), helpcontext(0x00061a89)]
            void WindowActivate(
                            [in] _Document* Doc, 
                            [in] Window* Wn);
            [id(0x0000000b), helpcontext(0x003d090a)]
            void WindowDeactivate(
                            [in] _Document* Doc, 
                            [in] Window* Wn);
            [id(0x0000000c), helpcontext(0x003d090b)]
            void WindowSelectionChange([in] Selection* Sel);
            [id(0x0000000d), helpcontext(0x003d090c)]
            void WindowBeforeRightClick(
                            [in] Selection* Sel, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x0000000e), helpcontext(0x003d090d)]
            void WindowBeforeDoubleClick(
                            [in] Selection* Sel, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x0000000f), helpcontext(0x003d090e)]
            void EPostagePropertyDialog([in] _Document* Doc);
            [id(0x00000010), helpcontext(0x003d090f)]
            void EPostageInsert([in] _Document* Doc);
            [id(0x00000011), helpcontext(0x003d0910)]
            void MailMergeAfterMerge(
                            [in] _Document* Doc, 
                            [in] _Document* DocResult);
            [id(0x00000012), helpcontext(0x003d0911)]
            void MailMergeAfterRecordMerge([in] _Document* Doc);
            [id(0x00000013), helpcontext(0x003d0912)]
            void MailMergeBeforeMerge(
                            [in] _Document* Doc, 
                            [in] long StartRecord, 
                            [in] long EndRecord, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x00000014), helpcontext(0x003d0913)]
            void MailMergeBeforeRecordMerge(
                            [in] _Document* Doc, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x00000015), helpcontext(0x003d0914)]
            void MailMergeDataSourceLoad([in] _Document* Doc);
            [id(0x00000016), helpcontext(0x003d0915)]
            void MailMergeDataSourceValidate(
                            [in] _Document* Doc, 
                            [in] VARIANT_BOOL* Handled);
            [id(0x00000017), helpcontext(0x003d0916)]
            void MailMergeWizardSendToCustom([in] _Document* Doc);
            [id(0x00000018), helpcontext(0x003d0917)]
            void MailMergeWizardStateChange(
                            [in] _Document* Doc, 
                            [in] int* FromState, 
                            [in] int* ToState, 
                            [in] VARIANT_BOOL* Handled);
            [id(0x00000019), helpcontext(0x003d0918)]
            void WindowSize(
                            [in] _Document* Doc, 
                            [in] Window* Wn);
    };

    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    [
      odl,
      uuid(DFB6AA6C-1068-420F-969D-01280FCC1630),
      version(8.6),
      helpcontext(0x00000a6c),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartTagAction : IDispatch {
        [id(00000000), propget, hidden, helpcontext(0x0a6c0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000003e8), propget, hidden, helpcontext(0x0a6c03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, hidden, helpcontext(0x0a6c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, hidden, helpcontext(0x0a6c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), hidden, helpcontext(0x0a6c03eb)]
        HRESULT Execute();
        [id(0x000003ec), propget, hidden, helpcontext(0x0a6c03ec)]
        HRESULT Type([out, retval] WdSmartTagControlType* prop);
        [id(0x000003ed), propget, hidden, helpcontext(0x0a6c03ed)]
        HRESULT PresentInPane([out, retval] VARIANT_BOOL* prop);
        [id(0x000003ee), propget, hidden, helpcontext(0x0a6c03ee)]
        HRESULT ExpandHelp([out, retval] VARIANT_BOOL* prop);
        [id(0x000003ee), propput, hidden, helpcontext(0x0a6c03ee)]
        HRESULT ExpandHelp([in] VARIANT_BOOL prop);
        [id(0x000003ef), propget, hidden, helpcontext(0x0a6c03ef)]
        HRESULT CheckboxState([out, retval] VARIANT_BOOL* prop);
        [id(0x000003ef), propput, hidden, helpcontext(0x0a6c03ef)]
        HRESULT CheckboxState([in] VARIANT_BOOL prop);
        [id(0x000003f0), propget, hidden, helpcontext(0x0a6c03f0)]
        HRESULT TextboxText([out, retval] BSTR* prop);
        [id(0x000003f0), propput, hidden, helpcontext(0x0a6c03f0)]
        HRESULT TextboxText([in] BSTR prop);
        [id(0x000003f1), propget, hidden, helpcontext(0x0a6c03f1)]
        HRESULT ListSelection([out, retval] long* prop);
        [id(0x000003f1), propput, hidden, helpcontext(0x0a6c03f1)]
        HRESULT ListSelection([in] long prop);
        [id(0x000003f2), propget, hidden, helpcontext(0x0a6c03f2)]
        HRESULT RadioGroupSelection([out, retval] long* prop);
        [id(0x000003f2), propput, hidden, helpcontext(0x0a6c03f2)]
        HRESULT RadioGroupSelection([in] long prop);
        [id(0x000003f3), propget, hidden, helpcontext(0x0a6c03f3)]
        HRESULT ExpandDocumentFragment([out, retval] VARIANT_BOOL* prop);
        [id(0x000003f3), propput, hidden, helpcontext(0x0a6c03f3)]
        HRESULT ExpandDocumentFragment([in] VARIANT_BOOL prop);
        [id(0x000003f4), propget, hidden, helpcontext(0x0a6c03f4)]
        HRESULT ActiveXControl([out, retval] IDispatch** prop);
    };

    [
      odl,
      uuid(CDE12CD8-767B-4757-8A31-13029A086305),
      version(8.6),
      helpcontext(0x00000cd8),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartTagActions : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0cd8fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, hidden, helpcontext(0x0cd80002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, hidden, helpcontext(0x0cd803e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, hidden, helpcontext(0x0cd803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, hidden, helpcontext(0x0cd803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), hidden, helpcontext(0x0cd80000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] SmartTagAction** prop);
        [id(0x000003eb), hidden, helpcontext(0x0cd803eb)]
        HRESULT ReloadActions();
    };

    [
      odl,
      uuid(15EBE471-0182-4CCE-98D0-B6614D1C32A1),
      version(8.6),
      helpcontext(0x00000471),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartTagRecognizer : IDispatch {
        [id(0x00000001), propget, hidden, helpcontext(0x04710001)]
        HRESULT FullName([out, retval] BSTR* prop);
        [id(0x000003e8), propget, hidden, helpcontext(0x047103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, hidden, helpcontext(0x047103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, hidden, helpcontext(0x047103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), propget, hidden, helpcontext(0x047103eb)]
        HRESULT Enabled([out, retval] VARIANT_BOOL* prop);
        [id(0x000003eb), propput, hidden, helpcontext(0x047103eb)]
        HRESULT Enabled([in] VARIANT_BOOL prop);
        [id(00000000), propget, hidden, helpcontext(0x04710000)]
        HRESULT ProgID([out, retval] BSTR* prop);
        [id(0x000003ec), propget, hidden, helpcontext(0x047103ec)]
        HRESULT Caption([out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(F2B60A10-DED5-46FB-A914-3C6F4EBB6451),
      version(8.6),
      helpcontext(0x00000a10),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartTagRecognizers : IDispatch {
        [id(0xfffffffc), propget, hidden, helpcontext(0x0a10fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, hidden, helpcontext(0x0a100002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, hidden, helpcontext(0x0a1003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, hidden, helpcontext(0x0a1003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, hidden, helpcontext(0x0a1003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), hidden, helpcontext(0x0a100000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] SmartTagRecognizer** prop);
        [id(0x000003eb), hidden, helpcontext(0x0a1003eb)]
        HRESULT ReloadRecognizers();
    };

    [
      odl,
      uuid(5E9A888C-E5DC-4DCB-8308-3C91FB61E6F4),
      version(8.6),
      helpcontext(0x0000088c),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartTagType : IDispatch {
        [id(00000000), propget, hidden, helpcontext(0x088c0000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000003e8), propget, hidden, helpcontext(0x088c03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, hidden, helpcontext(0x088c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, hidden, helpcontext(0x088c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000003eb), propget, hidden, helpcontext(0x088c03eb)]
        HRESULT SmartTagActions([out, retval] SmartTagActions** prop);
        [id(0x000003ec), propget, hidden, helpcontext(0x088c03ec)]
        HRESULT SmartTagRecognizers([out, retval] SmartTagRecognizers** prop);
        [id(0x000003ed), propget, hidden, helpcontext(0x088c03ed)]
        HRESULT FriendlyName([out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(DB8E3072-E106-4453-8E7C-53056F1D30DC),
      version(8.6),
      helpcontext(0x00000072),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface SmartTagTypes : IDispatch {
        [id(0xfffffffc), propget, hidden, helpcontext(0x0072fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, hidden, helpcontext(0x00720002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, hidden, helpcontext(0x007203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, hidden, helpcontext(0x007203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, hidden, helpcontext(0x007203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), hidden, helpcontext(0x00720000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] SmartTagType** prop);
        [id(0x000003eb), hidden, helpcontext(0x007203eb)]
        HRESULT ReloadAll();
    };

    [
      odl,
      uuid(AE6CE2F5-B9D3-407D-85A8-0F10C63289A4),
      version(8.6),
      helpcontext(0x000002f5),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Line : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x02f503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x02f503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x02f503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x02f50002)]
        HRESULT LineType([out, retval] WdLineType* prop);
        [id(0x00000003), propget, helpcontext(0x02f50003)]
        HRESULT Left([out, retval] long* prop);
        [id(0x00000004), propget, helpcontext(0x02f50004)]
        HRESULT Top([out, retval] long* prop);
        [id(0x00000005), propget, helpcontext(0x02f50005)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000006), propget, helpcontext(0x02f50006)]
        HRESULT Height([out, retval] long* prop);
        [id(0x00000007), propget, helpcontext(0x02f50007)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000008), propget, helpcontext(0x02f50008)]
        HRESULT Rectangles([out, retval] Rectangles** prop);
    };

    [
      odl,
      uuid(E2E8A400-0615-427D-ADCC-CAD39FFEBD42),
      version(8.6),
      helpcontext(0x00000400),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Lines : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0400fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x04000002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x040003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x040003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x040003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x04000000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Line** prop);
    };

    [
      odl,
      uuid(ADD4EDF3-2F33-4734-9CE6-D476097C5ADA),
      version(8.6),
      helpcontext(0x00000df3),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Rectangle : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0df303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0df303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0df303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x0df30002)]
        HRESULT RectangleType([out, retval] WdRectangleType* prop);
        [id(0x00000003), propget, helpcontext(0x0df30003)]
        HRESULT Left([out, retval] long* prop);
        [id(0x00000004), propget, helpcontext(0x0df30004)]
        HRESULT Top([out, retval] long* prop);
        [id(0x00000005), propget, helpcontext(0x0df30005)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000006), propget, helpcontext(0x0df30006)]
        HRESULT Height([out, retval] long* prop);
        [id(0x00000007), propget, helpcontext(0x0df30007)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000008), propget, helpcontext(0x0df30008)]
        HRESULT Lines([out, retval] Lines** prop);
    };

    [
      odl,
      uuid(7D0F7985-68D9-4D93-91CB-8109280E76CC),
      version(8.6),
      helpcontext(0x00000985),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Rectangles : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0985fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x09850002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x098503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x09850000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Rectangle** prop);
    };

    [
      odl,
      uuid(79635BF1-BD1D-4B3F-A520-C1106F1AAAD8),
      version(8.6),
      helpcontext(0x00000bf1),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Break : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0bf103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0bf103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0bf103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x0bf10002)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000003), propget, helpcontext(0x0bf10003)]
        HRESULT PageIndex([out, retval] long* prop);
    };

    [
      odl,
      uuid(16BE9309-D708-4322-BB1A-B056F58D17EA),
      version(8.6),
      helpcontext(0x00000309),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Breaks : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0309fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x03090002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x030903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x030903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x030903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x03090000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Break** prop);
    };

    [
      odl,
      uuid(352840A9-AF7D-4CA4-87FC-21C68FDAB3E4),
      version(8.6),
      helpcontext(0x000000a9),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Page : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x00a903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x00a903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x00a903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x00a90002)]
        HRESULT Left([out, retval] long* prop);
        [id(0x00000003), propget, helpcontext(0x00a90003)]
        HRESULT Top([out, retval] long* prop);
        [id(0x00000004), propget, helpcontext(0x00a90004)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000005), propget, helpcontext(0x00a90005)]
        HRESULT Height([out, retval] long* prop);
        [id(0x00000006), propget, helpcontext(0x00a90006)]
        HRESULT Rectangles([out, retval] Rectangles** prop);
        [id(0x00000007), propget, helpcontext(0x00a90007)]
        HRESULT Breaks([out, retval] Breaks** prop);
        [id(0x00000008), propget, helpcontext(0x00a90008)]
        HRESULT EnhMetaFileBits([out, retval] VARIANT* prop);
        [id(0x000000c8), hidden, helpcontext(0x00a900c8)]
        HRESULT SaveAsPNG([in] BSTR FileName);
    };

    [
      odl,
      uuid(91807402-6C6F-47CD-B8FA-C42FEE8EE924),
      version(8.6),
      helpcontext(0x00000402),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Pages : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0402fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x04020002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x040203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x040203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x040203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x04020000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Page** prop);
    };

    [
      odl,
      uuid(09760240-0B89-49F7-A79D-479F24723F56),
      version(8.6),
      helpcontext(0x00000240),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLNode : IDispatch {
        [id(00000000), propget, helpcontext(0x02400000)]
        HRESULT BaseName([out, retval] BSTR* prop);
        [id(0x000003e8), propget, helpcontext(0x024003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x024003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x024003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x02400001)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000002), propget, helpcontext(0x02400002)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x02400002)]
        HRESULT Text([in] BSTR prop);
        [id(0x00000004), propget, helpcontext(0x02400004)]
        HRESULT NamespaceURI([out, retval] BSTR* prop);
        [id(0x00000005), propget, helpcontext(0x02400005)]
        HRESULT XML(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL DataOnly, 
                        [out, retval] BSTR* prop);
        [id(0x00000006), propget, helpcontext(0x02400006)]
        HRESULT NextSibling([out, retval] XMLNode** prop);
        [id(0x00000007), propget, helpcontext(0x02400007)]
        HRESULT PreviousSibling([out, retval] XMLNode** prop);
        [id(0x00000008), propget, helpcontext(0x02400008)]
        HRESULT ParentNode([out, retval] XMLNode** prop);
        [id(0x00000009), propget, helpcontext(0x02400009)]
        HRESULT FirstChild([out, retval] XMLNode** prop);
        [id(0x0000000a), propget, helpcontext(0x0240000a)]
        HRESULT LastChild([out, retval] XMLNode** prop);
        [id(0x0000000b), propget, helpcontext(0x0240000b)]
        HRESULT OwnerDocument([out, retval] _Document** prop);
        [id(0x0000000c), propget, helpcontext(0x0240000c)]
        HRESULT NodeType([out, retval] WdXMLNodeType* prop);
        [id(0x0000000d), propget, helpcontext(0x0240000d)]
        HRESULT ChildNodes([out, retval] XMLNodes** prop);
        [id(0x0000000f), propget, helpcontext(0x0240000f)]
        HRESULT Attributes([out, retval] XMLNodes** prop);
        [id(0x00000010), propget, helpcontext(0x02400010)]
        HRESULT NodeValue([out, retval] BSTR* prop);
        [id(0x00000010), propput, helpcontext(0x02400010)]
        HRESULT NodeValue([in] BSTR prop);
        [id(0x00000011), propget, helpcontext(0x02400011)]
        HRESULT HasChildNodes([out, retval] VARIANT_BOOL* prop);
        [id(0x00000012), helpcontext(0x02400012)]
        HRESULT SelectSingleNode(
                        [in] BSTR XPath, 
                        [in, optional, defaultvalue("")] BSTR PrefixMapping, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL FastSearchSkippingTextNodes, 
                        [out, retval] XMLNode** prop);
        [id(0x00000013), helpcontext(0x02400013)]
        HRESULT SelectNodes(
                        [in] BSTR XPath, 
                        [in, optional, defaultvalue("")] BSTR PrefixMapping, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL FastSearchSkippingTextNodes, 
                        [out, retval] XMLNodes** prop);
        [id(0x00000014), propget, hidden, helpcontext(0x02400014)]
        HRESULT ChildNodeSuggestions([out, retval] XMLChildNodeSuggestions** prop);
        [id(0x00000015), propget, helpcontext(0x02400015)]
        HRESULT Level([out, retval] WdXMLNodeLevel* prop);
        [id(0x00000016), propget, helpcontext(0x02400016)]
        HRESULT ValidationStatus([out, retval] WdXMLValidationStatus* prop);
        [id(0x00000017), propget, hidden, helpcontext(0x02400017)]
        HRESULT SmartTag([out, retval] SmartTag** prop);
        [id(0x00000018), propget, helpcontext(0x02400018)]
        HRESULT ValidationErrorText(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Advanced, 
                        [out, retval] BSTR* prop);
        [id(0x00000019), propget, helpcontext(0x02400019)]
        HRESULT PlaceholderText([out, retval] BSTR* prop);
        [id(0x00000019), propput, helpcontext(0x02400019)]
        HRESULT PlaceholderText([in] BSTR prop);
        [id(0x00000064), helpcontext(0x02400064)]
        HRESULT Delete();
        [id(0x00000065), helpcontext(0x02400065)]
        HRESULT Copy();
        [id(0x00000066), helpcontext(0x02400066)]
        HRESULT RemoveChild([in] XMLNode* ChildElement);
        [id(0x00000067), helpcontext(0x02400067)]
        HRESULT Cut();
        [id(0x00000068), helpcontext(0x02400068)]
        HRESULT Validate();
        [id(0x00000069), helpcontext(0x02400069)]
        HRESULT SetValidationError(
                        [in] WdXMLValidationStatus Status, 
                        [in, optional] VARIANT* ErrorText, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL ClearedAutomatically);
        [id(0x0000006a), propget, helpcontext(0x0240006a)]
        HRESULT WordOpenXML([out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(D36C1F42-7044-4B9E-9CA3-85919454DB04),
      version(8.6),
      helpcontext(0x00000f42),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLNodes : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0f42fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x0f420002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x0f4203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0f4203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0f4203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x0f420000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] XMLNode** prop);
        [id(0x00000064), hidden, helpcontext(0x0f420064)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in] BSTR Namespace, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] XMLNode** prop);
    };

    [
      odl,
      uuid(FE0971F0-5E60-4985-BCDA-95CB0B8E0308),
      version(8.6),
      helpcontext(0x000001f0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLSchemaReference : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x01f003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x01f003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x01f003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x01f00002)]
        HRESULT NamespaceURI([out, retval] BSTR* prop);
        [id(0x00000003), propget, helpcontext(0x01f00003)]
        HRESULT Location([out, retval] BSTR* prop);
        [id(0x00000064), helpcontext(0x01f00064)]
        HRESULT Delete();
        [id(0x00000065), helpcontext(0x01f00065)]
        HRESULT Reload();
    };

    [
      odl,
      uuid(356B06EC-4908-42A4-81FC-4B5A51F3483B),
      version(8.6),
      helpcontext(0x000006ec),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLSchemaReferences : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x06ecfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x06ec0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x06ec03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x06ec03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x06ec03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000003), propget, hidden, helpcontext(0x06ec0003)]
        HRESULT AutomaticValidation([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, hidden, helpcontext(0x06ec0003)]
        HRESULT AutomaticValidation([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, hidden, helpcontext(0x06ec0004)]
        HRESULT AllowSaveAsXMLWithoutValidation([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propput, hidden, helpcontext(0x06ec0004)]
        HRESULT AllowSaveAsXMLWithoutValidation([in] VARIANT_BOOL prop);
        [id(0x00000005), propget, helpcontext(0x06ec0005)]
        HRESULT HideValidationErrors([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propput, helpcontext(0x06ec0005)]
        HRESULT HideValidationErrors([in] VARIANT_BOOL prop);
        [id(0x00000006), propget, helpcontext(0x06ec0006)]
        HRESULT IgnoreMixedContent([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propput, helpcontext(0x06ec0006)]
        HRESULT IgnoreMixedContent([in] VARIANT_BOOL prop);
        [id(0x00000007), propget, helpcontext(0x06ec0007)]
        HRESULT ShowPlaceholderText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000007), propput, helpcontext(0x06ec0007)]
        HRESULT ShowPlaceholderText([in] VARIANT_BOOL prop);
        [id(00000000), helpcontext(0x06ec0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] XMLSchemaReference** prop);
        [id(0x00000064), helpcontext(0x06ec0064)]
        HRESULT Validate();
        [id(0x00000065), helpcontext(0x06ec0065)]
        HRESULT Add(
                        [in, optional] VARIANT* NamespaceURI, 
                        [in, optional] VARIANT* Alias, 
                        [in, optional] VARIANT* FileName, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL InstallForAllUsers, 
                        [out, retval] XMLSchemaReference** prop);
    };

    [
      odl,
      uuid(A87E00E9-3AC3-4B53-ABE3-7379653D0E82),
      version(8.6),
      helpcontext(0x000000e9),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLChildNodeSuggestion : IDispatch {
        [id(0x000003e8), propget, hidden, helpcontext(0x00e903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, hidden, helpcontext(0x00e903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, hidden, helpcontext(0x00e903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, hidden, helpcontext(0x00e90000)]
        HRESULT BaseName([out, retval] BSTR* prop);
        [id(0x00000003), propget, hidden, helpcontext(0x00e90003)]
        HRESULT NamespaceURI([out, retval] BSTR* prop);
        [id(0x00000004), propget, hidden, helpcontext(0x00e90004)]
        HRESULT XMLSchemaReference([out, retval] XMLSchemaReference** prop);
        [id(0x00000064), hidden, helpcontext(0x00e90064)]
        HRESULT Insert(
                        [in, optional] VARIANT* Range, 
                        [out, retval] XMLNode** prop);
    };

    [
      odl,
      uuid(DE63B5AC-CA4F-46FE-9184-A5719AB9ED5B),
      version(8.6),
      helpcontext(0x000005ac),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLChildNodeSuggestions : IDispatch {
        [id(0xfffffffc), propget, hidden, helpcontext(0x05acfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, hidden, helpcontext(0x05ac0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, hidden, helpcontext(0x05ac03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, hidden, helpcontext(0x05ac03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, hidden, helpcontext(0x05ac03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), hidden, helpcontext(0x05ac0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] XMLChildNodeSuggestion** prop);
    };

    [
      odl,
      uuid(B140A023-4850-4DA6-BC5F-CC459C4507BC),
      version(8.6),
      helpcontext(0x00000023),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLNamespace : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x002303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x002303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x002303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x00230002)]
        HRESULT URI([out, retval] BSTR* prop);
        [id(0x00000003), propget, helpcontext(0x00230003)]
        HRESULT Location(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [out, retval] BSTR* prop);
        [id(0x00000003), propput, helpcontext(0x00230003)]
        HRESULT Location(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [in] BSTR prop);
        [id(0x00000004), propget, helpcontext(0x00230004)]
        HRESULT Alias(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [out, retval] BSTR* prop);
        [id(0x00000004), propput, helpcontext(0x00230004)]
        HRESULT Alias(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [in] BSTR prop);
        [id(0x00000005), propget, helpcontext(0x00230005)]
        HRESULT XSLTransforms([out, retval] XSLTransforms** prop);
        [id(0x00000006), propget, helpcontext(0x00230006)]
        HRESULT DefaultTransform(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [out, retval] XSLTransform** prop);
        [id(0x00000006), propput, helpcontext(0x00230006)]
        HRESULT DefaultTransform(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [in] XSLTransform* prop);
        [id(0x00000064), helpcontext(0x00230064)]
        HRESULT AttachToDocument([in] VARIANT* Document);
        [id(0x00000065), helpcontext(0x00230065)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(656BBED7-E82D-4B0A-8F97-EC742BA11FFA),
      version(8.6),
      helpcontext(0x00000ed7),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLNamespaces : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0ed7fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x0ed70002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x0ed703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0ed703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0ed703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x0ed70000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] XMLNamespace** prop);
        [id(0x00000065), helpcontext(0x0ed70065)]
        HRESULT Add(
                        [in] BSTR Path, 
                        [in, optional] VARIANT* NamespaceURI, 
                        [in, optional] VARIANT* Alias, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL InstallForAllUsers, 
                        [out, retval] XMLNamespace** prop);
        [id(0x00000066), helpcontext(0x0ed70066)]
        HRESULT InstallManifest(
                        [in] BSTR Path, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL InstallForAllUsers);
    };

    [
      odl,
      uuid(E3124493-7D6A-410F-9A48-CC822C033CEC),
      version(8.6),
      helpcontext(0x00000493),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XSLTransform : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x049303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x049303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x049303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x04930002)]
        HRESULT Alias(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x04930002)]
        HRESULT Alias(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x04930003)]
        HRESULT Location(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [out, retval] BSTR* prop);
        [id(0x00000003), propput, helpcontext(0x04930003)]
        HRESULT Location(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL AllUsers, 
                        [in] BSTR prop);
        [id(0x00000065), helpcontext(0x04930065)]
        HRESULT Delete();
        [id(0x00000066), propget, helpcontext(0x04930066)]
        HRESULT ID([out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(C774F5EA-A539-4284-A1BE-30AEC052D899),
      version(8.6),
      helpcontext(0x000005ea),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XSLTransforms : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x05eafffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x05ea0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x05ea03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x05ea03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x05ea03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x05ea0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] XSLTransform** prop);
        [id(0x00000065), helpcontext(0x05ea0065)]
        HRESULT Add(
                        [in] BSTR Location, 
                        [in, optional] VARIANT* Alias, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL InstallForAllUsers, 
                        [out, retval] XSLTransform** prop);
    };

    [
      odl,
      uuid(AED7E08C-14F0-4F33-921D-4C5353137BF6),
      version(8.6),
      helpcontext(0x0000008c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Editors : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x008c03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x008c03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x008c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x008c0002)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x008c0000)]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Editor** prop);
        [id(0x000001f5), helpcontext(0x008c01f5)]
        HRESULT Add(
                        [in] VARIANT* EditorID, 
                        [out, retval] Editor** prop);
    };

    [
      odl,
      uuid(DD947D72-F33C-4198-9BDF-F86181D05E41),
      version(8.6),
      helpcontext(0x00000d72),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Editor : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0d720064)]
        HRESULT ID([out, retval] BSTR* prop);
        [id(0x00000065), propget, helpcontext(0x0d720065)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000066), propget, helpcontext(0x0d720066)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000067), propget, helpcontext(0x0d720067)]
        HRESULT NextRange([out, retval] Range** prop);
        [id(0x000003e8), propget, helpcontext(0x0d7203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0d7203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0d7203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000001f4), helpcontext(0x0d7201f4)]
        HRESULT Delete();
        [id(0x000001f5), helpcontext(0x0d7201f5)]
        HRESULT DeleteAll();
        [id(0x000001f6), helpcontext(0x0d7201f6)]
        HRESULT SelectAll();
    };

    [
      odl,
      uuid(00020A01-0001-0000-C000-000000000046),
      version(10.0),
      helpcontext(0x00000fa0),
      hidden
    ]
    interface IApplicationEvents4 : IDispatch {
        [restricted, hidden]
        HRESULT _stdcall Startup();
        [helpcontext(0x00061a82)]
        HRESULT _stdcall Quit();
        [helpcontext(0x00061a83)]
        HRESULT _stdcall DocumentChange();
        [helpcontext(0x00061a84)]
        HRESULT _stdcall DocumentOpen([in] _Document* Doc);
        [helpcontext(0x00061a85)]
        HRESULT _stdcall DocumentBeforeClose(
                        [in] _Document* Doc, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x00061a86)]
        HRESULT _stdcall DocumentBeforePrint(
                        [in] _Document* Doc, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x00061a87)]
        HRESULT _stdcall DocumentBeforeSave(
                        [in] _Document* Doc, 
                        [in] VARIANT_BOOL* SaveAsUI, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x00061a88)]
        HRESULT _stdcall NewDocument([in] _Document* Doc);
        [helpcontext(0x00061a89)]
        HRESULT _stdcall WindowActivate(
                        [in] _Document* Doc, 
                        [in] Window* Wn);
        [helpcontext(0x003d090a)]
        HRESULT _stdcall WindowDeactivate(
                        [in] _Document* Doc, 
                        [in] Window* Wn);
        [helpcontext(0x003d090b)]
        HRESULT _stdcall WindowSelectionChange([in] Selection* Sel);
        [helpcontext(0x003d090c)]
        HRESULT _stdcall WindowBeforeRightClick(
                        [in] Selection* Sel, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x003d090d)]
        HRESULT _stdcall WindowBeforeDoubleClick(
                        [in] Selection* Sel, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x003d090e)]
        HRESULT _stdcall EPostagePropertyDialog([in] _Document* Doc);
        [helpcontext(0x003d090f)]
        HRESULT _stdcall EPostageInsert([in] _Document* Doc);
        [helpcontext(0x003d0910)]
        HRESULT _stdcall MailMergeAfterMerge(
                        [in] _Document* Doc, 
                        [in] _Document* DocResult);
        [helpcontext(0x003d0911)]
        HRESULT _stdcall MailMergeAfterRecordMerge([in] _Document* Doc);
        [helpcontext(0x003d0912)]
        HRESULT _stdcall MailMergeBeforeMerge(
                        [in] _Document* Doc, 
                        [in] long StartRecord, 
                        [in] long EndRecord, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x003d0913)]
        HRESULT _stdcall MailMergeBeforeRecordMerge(
                        [in] _Document* Doc, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x003d0914)]
        HRESULT _stdcall MailMergeDataSourceLoad([in] _Document* Doc);
        [helpcontext(0x003d0915)]
        HRESULT _stdcall MailMergeDataSourceValidate(
                        [in] _Document* Doc, 
                        [in] VARIANT_BOOL* Handled);
        [helpcontext(0x003d0916)]
        HRESULT _stdcall MailMergeWizardSendToCustom([in] _Document* Doc);
        [helpcontext(0x003d0917)]
        HRESULT _stdcall MailMergeWizardStateChange(
                        [in] _Document* Doc, 
                        [in] int* FromState, 
                        [in] int* ToState, 
                        [in] VARIANT_BOOL* Handled);
        [helpcontext(0x003d0918)]
        HRESULT _stdcall WindowSize(
                        [in] _Document* Doc, 
                        [in] Window* Wn);
        [helpcontext(0x003d0919)]
        HRESULT _stdcall XMLSelectionChange(
                        [in] Selection* Sel, 
                        [in] XMLNode* OldXMLNode, 
                        [in] XMLNode* NewXMLNode, 
                        [in] long* Reason);
        [helpcontext(0x003d091a)]
        HRESULT _stdcall XMLValidationError([in] XMLNode* XMLNode);
        [helpcontext(0x003d091b)]
        HRESULT _stdcall DocumentSync(
                        [in] _Document* Doc, 
                        [in] MsoSyncEventType SyncEventType);
        [helpcontext(0x003d091c)]
        HRESULT _stdcall EPostageInsertEx(
                        [in] _Document* Doc, 
                        [in] int cpDeliveryAddrStart, 
                        [in] int cpDeliveryAddrEnd, 
                        [in] int cpReturnAddrStart, 
                        [in] int cpReturnAddrEnd, 
                        [in] int xaWidth, 
                        [in] int yaHeight, 
                        [in] BSTR bstrPrinterName, 
                        [in] BSTR bstrPaperFeed, 
                        [in] VARIANT_BOOL fPrint, 
                        [in, out] VARIANT_BOOL* fCancel);
        [helpcontext(0x003d091d)]
        HRESULT _stdcall MailMergeDataSourceValidate2(
                        [in] _Document* Doc, 
                        [in, out] VARIANT_BOOL* Handled);
        [helpcontext(0x003d091e)]
        HRESULT _stdcall ProtectedViewWindowOpen([in] ProtectedViewWindow* PvWindow);
        [helpcontext(0x003d091f)]
        HRESULT _stdcall ProtectedViewWindowBeforeEdit(
                        [in] ProtectedViewWindow* PvWindow, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x003d0921)]
        HRESULT _stdcall ProtectedViewWindowBeforeClose(
                        [in] ProtectedViewWindow* PvWindow, 
                        [in] int CloseReason, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x003d0922)]
        HRESULT _stdcall ProtectedViewWindowSize([in] ProtectedViewWindow* PvWindow);
        [helpcontext(0x003d0922)]
        HRESULT _stdcall ProtectedViewWindowActivate([in] ProtectedViewWindow* PvWindow);
        [helpcontext(0x003d0923)]
        HRESULT _stdcall ProtectedViewWindowDeactivate([in] ProtectedViewWindow* PvWindow);
    };

    [
      uuid(00020A01-0000-0000-C000-000000000046),
      helpcontext(0x00000fa3),
      hidden,
      nonextensible
    ]
    dispinterface ApplicationEvents4 {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000001), restricted, hidden]
            void Startup();
            [id(0x00000002), helpcontext(0x00061a82)]
            void Quit();
            [id(0x00000003), helpcontext(0x00061a83)]
            void DocumentChange();
            [id(0x00000004), helpcontext(0x00061a84)]
            void DocumentOpen([in] _Document* Doc);
            [id(0x00000006), helpcontext(0x00061a85)]
            void DocumentBeforeClose(
                            [in] _Document* Doc, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000007), helpcontext(0x00061a86)]
            void DocumentBeforePrint(
                            [in] _Document* Doc, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000008), helpcontext(0x00061a87)]
            void DocumentBeforeSave(
                            [in] _Document* Doc, 
                            [in] VARIANT_BOOL* SaveAsUI, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000009), helpcontext(0x00061a88)]
            void NewDocument([in] _Document* Doc);
            [id(0x0000000a), helpcontext(0x00061a89)]
            void WindowActivate(
                            [in] _Document* Doc, 
                            [in] Window* Wn);
            [id(0x0000000b), helpcontext(0x003d090a)]
            void WindowDeactivate(
                            [in] _Document* Doc, 
                            [in] Window* Wn);
            [id(0x0000000c), helpcontext(0x003d090b)]
            void WindowSelectionChange([in] Selection* Sel);
            [id(0x0000000d), helpcontext(0x003d090c)]
            void WindowBeforeRightClick(
                            [in] Selection* Sel, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x0000000e), helpcontext(0x003d090d)]
            void WindowBeforeDoubleClick(
                            [in] Selection* Sel, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x0000000f), helpcontext(0x003d090e)]
            void EPostagePropertyDialog([in] _Document* Doc);
            [id(0x00000010), helpcontext(0x003d090f)]
            void EPostageInsert([in] _Document* Doc);
            [id(0x00000011), helpcontext(0x003d0910)]
            void MailMergeAfterMerge(
                            [in] _Document* Doc, 
                            [in] _Document* DocResult);
            [id(0x00000012), helpcontext(0x003d0911)]
            void MailMergeAfterRecordMerge([in] _Document* Doc);
            [id(0x00000013), helpcontext(0x003d0912)]
            void MailMergeBeforeMerge(
                            [in] _Document* Doc, 
                            [in] long StartRecord, 
                            [in] long EndRecord, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000014), helpcontext(0x003d0913)]
            void MailMergeBeforeRecordMerge(
                            [in] _Document* Doc, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000015), helpcontext(0x003d0914)]
            void MailMergeDataSourceLoad([in] _Document* Doc);
            [id(0x00000016), helpcontext(0x003d0915)]
            void MailMergeDataSourceValidate(
                            [in] _Document* Doc, 
                            [in] VARIANT_BOOL* Handled);
            [id(0x00000017), helpcontext(0x003d0916)]
            void MailMergeWizardSendToCustom([in] _Document* Doc);
            [id(0x00000018), helpcontext(0x003d0917)]
            void MailMergeWizardStateChange(
                            [in] _Document* Doc, 
                            [in] int* FromState, 
                            [in] int* ToState, 
                            [in] VARIANT_BOOL* Handled);
            [id(0x00000019), helpcontext(0x003d0918)]
            void WindowSize(
                            [in] _Document* Doc, 
                            [in] Window* Wn);
            [id(0x0000001a), helpcontext(0x003d0919)]
            void XMLSelectionChange(
                            [in] Selection* Sel, 
                            [in] XMLNode* OldXMLNode, 
                            [in] XMLNode* NewXMLNode, 
                            [in] long* Reason);
            [id(0x0000001b), helpcontext(0x003d091a)]
            void XMLValidationError([in] XMLNode* XMLNode);
            [id(0x0000001c), helpcontext(0x003d091b)]
            void DocumentSync(
                            [in] _Document* Doc, 
                            [in] MsoSyncEventType SyncEventType);
            [id(0x0000001d), helpcontext(0x003d091c)]
            void EPostageInsertEx(
                            [in] _Document* Doc, 
                            [in] int cpDeliveryAddrStart, 
                            [in] int cpDeliveryAddrEnd, 
                            [in] int cpReturnAddrStart, 
                            [in] int cpReturnAddrEnd, 
                            [in] int xaWidth, 
                            [in] int yaHeight, 
                            [in] BSTR bstrPrinterName, 
                            [in] BSTR bstrPaperFeed, 
                            [in] VARIANT_BOOL fPrint, 
                            [in, out] VARIANT_BOOL* fCancel);
            [id(0x0000001e), helpcontext(0x003d091d)]
            void MailMergeDataSourceValidate2(
                            [in] _Document* Doc, 
                            [in, out] VARIANT_BOOL* Handled);
            [id(0x0000001f), helpcontext(0x003d091e)]
            void ProtectedViewWindowOpen([in] ProtectedViewWindow* PvWindow);
            [id(0x00000020), helpcontext(0x003d091f)]
            void ProtectedViewWindowBeforeEdit(
                            [in] ProtectedViewWindow* PvWindow, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000021), helpcontext(0x003d0921)]
            void ProtectedViewWindowBeforeClose(
                            [in] ProtectedViewWindow* PvWindow, 
                            [in] int CloseReason, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000022), helpcontext(0x003d0922)]
            void ProtectedViewWindowSize([in] ProtectedViewWindow* PvWindow);
            [id(0x00000023), helpcontext(0x003d0922)]
            void ProtectedViewWindowActivate([in] ProtectedViewWindow* PvWindow);
            [id(0x00000024), helpcontext(0x003d0923)]
            void ProtectedViewWindowDeactivate([in] ProtectedViewWindow* PvWindow);
    };

    [
      uuid(00020A02-0000-0000-C000-000000000046),
      helpcontext(0x00000fa1),
      hidden
    ]
    dispinterface DocumentEvents2 {
        properties:
        methods:
            [id(0x00000004), helpcontext(0x003d0cec)]
            void New();
            [id(0x00000005), helpcontext(0x003d0ced)]
            void Open();
            [id(0x00000006), helpcontext(0x003d0cee)]
            void Close();
            [id(0x00000007), helpcontext(0x003d0cef)]
            void Sync(MsoSyncEventType SyncEventType);
            [id(0x00000008), helpcontext(0x003d0cf0)]
            void XMLAfterInsert(
                            [in] XMLNode* NewXMLNode, 
                            [in] VARIANT_BOOL InUndoRedo);
            [id(0x00000009), helpcontext(0x003d0cf1)]
            void XMLBeforeDelete(
                            [in] Range* DeletedRange, 
                            [in] XMLNode* OldXMLNode, 
                            [in] VARIANT_BOOL InUndoRedo);
            [id(0x0000000c), helpcontext(0x003d0cf2)]
            void ContentControlAfterAdd(
                            [in] ContentControl* NewContentControl, 
                            [in] VARIANT_BOOL InUndoRedo);
            [id(0x0000000d), helpcontext(0x003d0cf3)]
            void ContentControlBeforeDelete(
                            [in] ContentControl* OldContentControl, 
                            [in] VARIANT_BOOL InUndoRedo);
            [id(0x0000000e), helpcontext(0x003d0cf4)]
            void ContentControlOnExit(
                            [in] ContentControl* ContentControl, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x0000000f), helpcontext(0x003d0cf5)]
            void ContentControlOnEnter([in] ContentControl* ContentControl);
            [id(0x00000010), helpcontext(0x003d0cf6)]
            void ContentControlBeforeStoreUpdate(
                            [in] ContentControl* ContentControl, 
                            [in, out] BSTR* Content);
            [id(0x00000011), helpcontext(0x003d0cf7)]
            void ContentControlBeforeContentUpdate(
                            [in] ContentControl* ContentControl, 
                            [in, out] BSTR* Content);
            [id(0x00000012), helpcontext(0x003d0cf8)]
            void BuildingBlockInsert(
                            [in] Range* Range, 
                            [in] BSTR Name, 
                            [in] BSTR Category, 
                            [in] BSTR BlockType, 
                            [in] BSTR Template);
    };

    


    


    


    


    


    


    


    


    [
      odl,
      uuid(4A6AE865-199D-4EA3-9F6B-125BD9C40EDF),
      version(8.6),
      helpcontext(0x00000865),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Source : IDispatch {
        [id(0x00000064), propget, helpcontext(0x08650064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x08650065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x08650066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x08650067)]
        HRESULT Tag([out, retval] BSTR* prop);
        [id(0x00000068), propget, helpcontext(0x08650068)]
        HRESULT Field(
                        [in] BSTR Name, 
                        [out, retval] BSTR* prop);
        [id(0x00000068), propput, helpcontext(0x08650068)]
        HRESULT Field(
                        [in] BSTR Name, 
                        [in] BSTR prop);
        [id(0x00000069), propget, helpcontext(0x08650069)]
        HRESULT XML([out, retval] BSTR* prop);
        [id(0x0000006b), propget, helpcontext(0x0865006b)]
        HRESULT Cited([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006a), helpcontext(0x0865006a)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(FA02A26B-6550-45C5-B6F0-80E757CD3482),
      version(8.6),
      helpcontext(0x0000026b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Sources : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x026bfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000002), propget, helpcontext(0x026b0002)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000003e8), propget, helpcontext(0x026b03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x026b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x026b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), helpcontext(0x026b0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Source** prop);
        [id(0x0000006b), helpcontext(0x026b006b)]
        HRESULT Add([in] BSTR Data);
    };

    [
      odl,
      uuid(3834F60F-EE8C-455D-A441-D766675D6D3B),
      version(8.6),
      helpcontext(0x0000060f),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Bibliography : IDispatch {
        [id(0x00000064), propget, helpcontext(0x060f0064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x060f0065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x060f0066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x060f0067)]
        HRESULT Sources([out, retval] Sources** prop);
        [id(0x00000069), propget, helpcontext(0x060f0069)]
        HRESULT BibliographyStyle([out, retval] BSTR* prop);
        [id(0x00000069), propput, helpcontext(0x060f0069)]
        HRESULT BibliographyStyle([in] BSTR prop);
        [id(0x00000068), helpcontext(0x060f0068)]
        HRESULT GenerateUniqueTag([out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(873E774B-926A-4CB1-878D-635A45187595),
      version(8.6),
      helpcontext(0x0000074b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMaths : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x074bfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000064), propget, helpcontext(0x074b0064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x074b0065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x074b0066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x074b0067)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x074b0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] OMath** prop);
        [id(0x000000c8), helpcontext(0x074b00c8)]
        HRESULT Linearize();
        [id(0x000000c9), helpcontext(0x074b00c9)]
        HRESULT BuildUp();
        [id(0x000000ca), helpcontext(0x074b00ca)]
        HRESULT Add(
                        [in] Range* Range, 
                        [out, retval] Range** prop);
    };

    [
      odl,
      uuid(E4442A83-F623-459C-8E95-8BFB44DCF23A),
      version(8.6),
      helpcontext(0x00000a83),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMath : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0a830064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0a830065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0a830066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x0a830067)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000068), propget, helpcontext(0x0a830068)]
        HRESULT Functions([out, retval] OMathFunctions** prop);
        [id(0x00000069), propget, helpcontext(0x0a830069)]
        HRESULT Type([out, retval] WdOMathType* prop);
        [id(0x00000069), propput, helpcontext(0x0a830069)]
        HRESULT Type([in] WdOMathType prop);
        [id(0x0000006a), propget, helpcontext(0x0a83006a)]
        HRESULT ParentOMath([out, retval] OMath** prop);
        [id(0x0000006b), propget, helpcontext(0x0a83006b)]
        HRESULT ParentFunction([out, retval] OMathFunction** prop);
        [id(0x0000006c), propget, helpcontext(0x0a83006c)]
        HRESULT ParentRow([out, retval] OMathMatRow** prop);
        [id(0x0000006d), propget, helpcontext(0x0a83006d)]
        HRESULT ParentCol([out, retval] OMathMatCol** prop);
        [id(0x0000006e), propget, helpcontext(0x0a83006e)]
        HRESULT ParentArg([out, retval] OMath** prop);
        [id(0x0000006f), propget, helpcontext(0x0a83006f)]
        HRESULT ArgIndex([out, retval] long* prop);
        [id(0x00000070), propget, helpcontext(0x0a830070)]
        HRESULT NestingLevel([out, retval] long* prop);
        [id(0x00000071), propget, helpcontext(0x0a830071)]
        HRESULT ArgSize([out, retval] long* prop);
        [id(0x00000071), propput, helpcontext(0x0a830071)]
        HRESULT ArgSize([in] long prop);
        [id(0x00000072), propget, helpcontext(0x0a830072)]
        HRESULT Breaks([out, retval] OMathBreaks** prop);
        [id(0x00000073), propget, helpcontext(0x0a830073)]
        HRESULT Justification([out, retval] WdOMathJc* prop);
        [id(0x00000073), propput, helpcontext(0x0a830073)]
        HRESULT Justification([in] WdOMathJc prop);
        [id(0x00000074), propget, helpcontext(0x0a830074)]
        HRESULT AlignPoint([out, retval] long* prop);
        [id(0x00000074), propput, helpcontext(0x0a830074)]
        HRESULT AlignPoint([in] long prop);
        [id(0x000000c8), helpcontext(0x0a8300c8)]
        HRESULT Linearize();
        [id(0x000000c9), helpcontext(0x0a8300c9)]
        HRESULT BuildUp();
        [id(0x000000ca), helpcontext(0x0a8300ca)]
        HRESULT Remove();
        [id(0x000000cb), helpcontext(0x0a8300cb)]
        HRESULT ConvertToMathText();
        [id(0x000000cc), helpcontext(0x0a8300cc)]
        HRESULT ConvertToNormalText();
        [id(0x000000cd), helpcontext(0x0a8300cd)]
        HRESULT ConvertToLiteralText();
    };

    [
      odl,
      uuid(497142A4-16FD-42C6-BC58-15D89345FC21),
      version(8.6),
      helpcontext(0x000002a4),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathFunctions : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x02a4fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000064), propget, helpcontext(0x02a40064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x02a40065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x02a40066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x02a40067)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x02a40000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] OMathFunction** prop);
        [id(0x00000068), helpcontext(0x02a40068)]
        HRESULT Add(
                        [in] Range* Range, 
                        [in] WdOMathFunctionType Type, 
                        [in, optional] VARIANT* NumArgs, 
                        [in, optional] VARIANT* NumCols, 
                        [out, retval] OMathFunction** prop);
    };

    [
      odl,
      uuid(8245795B-9AED-4943-A16D-E586ED8180D1),
      version(8.6),
      helpcontext(0x0000095b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathArgs : IDispatch {
        [id(0x00000064), propget, helpcontext(0x095b0064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x095b0065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x095b0066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x095b0067)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x095b0000)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] OMath** prop);
        [id(0x000000c8), helpcontext(0x095b00c8)]
        HRESULT Add(
                        [in, optional] VARIANT* BeforeArg, 
                        [out, retval] OMath** prop);
    };

    [
      odl,
      uuid(F1F37152-1DB1-4901-AD9A-C740F99464B4),
      version(8.6),
      helpcontext(0x00000152),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathFunction : IDispatch {
        [id(00000000), propget, helpcontext(0x01520000)]
        HRESULT Type([out, retval] WdOMathFunctionType* prop);
        [id(0x00000064), propget, helpcontext(0x01520064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x01520065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x01520066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x01520067)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000068), propget, helpcontext(0x01520068)]
        HRESULT Args([out, retval] OMathArgs** prop);
        [id(0x00000069), propget, helpcontext(0x01520069)]
        HRESULT Acc([out, retval] OMathAcc** prop);
        [id(0x0000006a), propget, helpcontext(0x0152006a)]
        HRESULT Bar([out, retval] OMathBar** prop);
        [id(0x0000006b), propget, helpcontext(0x0152006b)]
        HRESULT Box([out, retval] OMathBox** prop);
        [id(0x0000006c), propget, helpcontext(0x0152006c)]
        HRESULT BorderBox([out, retval] OMathBorderBox** prop);
        [id(0x0000006d), propget, helpcontext(0x0152006d)]
        HRESULT Delim([out, retval] OMathDelim** prop);
        [id(0x0000006e), propget, helpcontext(0x0152006e)]
        HRESULT EqArray([out, retval] OMathEqArray** prop);
        [id(0x0000006f), propget, helpcontext(0x0152006f)]
        HRESULT Frac([out, retval] OMathFrac** prop);
        [id(0x00000070), propget, helpcontext(0x01520070)]
        HRESULT Func([out, retval] OMathFunc** prop);
        [id(0x00000071), propget, helpcontext(0x01520071)]
        HRESULT GroupChar([out, retval] OMathGroupChar** prop);
        [id(0x00000072), propget, helpcontext(0x01520072)]
        HRESULT LimLow([out, retval] OMathLimLow** prop);
        [id(0x00000073), propget, helpcontext(0x01520073)]
        HRESULT LimUpp([out, retval] OMathLimUpp** prop);
        [id(0x00000074), propget, helpcontext(0x01520074)]
        HRESULT Mat([out, retval] OMathMat** prop);
        [id(0x00000075), propget, helpcontext(0x01520075)]
        HRESULT Nary([out, retval] OMathNary** prop);
        [id(0x00000076), propget, helpcontext(0x01520076)]
        HRESULT Phantom([out, retval] OMathPhantom** prop);
        [id(0x00000077), propget, helpcontext(0x01520077)]
        HRESULT ScrPre([out, retval] OMathScrPre** prop);
        [id(0x00000078), propget, helpcontext(0x01520078)]
        HRESULT Rad([out, retval] OMathRad** prop);
        [id(0x00000079), propget, helpcontext(0x01520079)]
        HRESULT ScrSub([out, retval] OMathScrSub** prop);
        [id(0x0000007a), propget, helpcontext(0x0152007a)]
        HRESULT ScrSubSup([out, retval] OMathScrSubSup** prop);
        [id(0x0000007b), propget, helpcontext(0x0152007b)]
        HRESULT ScrSup([out, retval] OMathScrSup** prop);
        [id(0x0000007d), propget, helpcontext(0x0152007d)]
        HRESULT OMath([out, retval] OMath** prop);
        [id(0x000000c9), helpcontext(0x015200c9)]
        HRESULT Remove([out, retval] OMathFunction** prop);
    };

    [
      odl,
      uuid(F258DE05-C41B-4C33-A778-F0D3F98CEEB3),
      version(8.6),
      helpcontext(0x00000e05),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathAcc : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0e050064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0e050065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0e050066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x0e050067)]
        HRESULT E([out, retval] OMath** prop);
        [id(0x00000068), propget, helpcontext(0x0e050068)]
        HRESULT Char([out, retval] short* prop);
        [id(0x00000068), propput, helpcontext(0x0e050068)]
        HRESULT Char([in] short prop);
    };

    [
      odl,
      uuid(F08B45F1-8F23-4156-9D63-1820C0ED229A),
      version(8.6),
      helpcontext(0x000005f1),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathBar : IDispatch {
        [id(0x00000064), propget, helpcontext(0x05f10064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x05f10065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x05f10066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x05f10067)]
        HRESULT E([out, retval] OMath** prop);
        [id(0x00000068), propget, helpcontext(0x05f10068)]
        HRESULT BarTop([out, retval] VARIANT_BOOL* prop);
        [id(0x00000068), propput, helpcontext(0x05f10068)]
        HRESULT BarTop([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(842C37FE-C76F-4B2B-9B60-C408CB5E838E),
      version(8.6),
      helpcontext(0x000007fe),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathBox : IDispatch {
        [id(0x00000064), propget, helpcontext(0x07fe0064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x07fe0065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x07fe0066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x07fe0067)]
        HRESULT E([out, retval] OMath** prop);
        [id(0x00000068), propget, helpcontext(0x07fe0068)]
        HRESULT OpEmu([out, retval] VARIANT_BOOL* prop);
        [id(0x00000068), propput, helpcontext(0x07fe0068)]
        HRESULT OpEmu([in] VARIANT_BOOL prop);
        [id(0x00000069), propget, helpcontext(0x07fe0069)]
        HRESULT NoBreak([out, retval] VARIANT_BOOL* prop);
        [id(0x00000069), propput, helpcontext(0x07fe0069)]
        HRESULT NoBreak([in] VARIANT_BOOL prop);
        [id(0x0000006a), propget, helpcontext(0x07fe006a)]
        HRESULT Diff([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006a), propput, helpcontext(0x07fe006a)]
        HRESULT Diff([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(2503B6EE-0889-44DF-B920-6D6F9659DEA3),
      version(8.6),
      helpcontext(0x000006ee),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathBorderBox : IDispatch {
        [id(0x00000064), propget, helpcontext(0x06ee0064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x06ee0065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x06ee0066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x06ee0067)]
        HRESULT E([out, retval] OMath** prop);
        [id(0x00000068), propget, helpcontext(0x06ee0068)]
        HRESULT HideTop([out, retval] VARIANT_BOOL* prop);
        [id(0x00000068), propput, helpcontext(0x06ee0068)]
        HRESULT HideTop([in] VARIANT_BOOL prop);
        [id(0x00000069), propget, helpcontext(0x06ee0069)]
        HRESULT HideBot([out, retval] VARIANT_BOOL* prop);
        [id(0x00000069), propput, helpcontext(0x06ee0069)]
        HRESULT HideBot([in] VARIANT_BOOL prop);
        [id(0x0000006a), propget, helpcontext(0x06ee006a)]
        HRESULT HideLeft([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006a), propput, helpcontext(0x06ee006a)]
        HRESULT HideLeft([in] VARIANT_BOOL prop);
        [id(0x0000006b), propget, helpcontext(0x06ee006b)]
        HRESULT HideRight([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006b), propput, helpcontext(0x06ee006b)]
        HRESULT HideRight([in] VARIANT_BOOL prop);
        [id(0x0000006c), propget, helpcontext(0x06ee006c)]
        HRESULT StrikeH([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006c), propput, helpcontext(0x06ee006c)]
        HRESULT StrikeH([in] VARIANT_BOOL prop);
        [id(0x0000006d), propget, helpcontext(0x06ee006d)]
        HRESULT StrikeV([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006d), propput, helpcontext(0x06ee006d)]
        HRESULT StrikeV([in] VARIANT_BOOL prop);
        [id(0x0000006e), propget, helpcontext(0x06ee006e)]
        HRESULT StrikeBLTR([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006e), propput, helpcontext(0x06ee006e)]
        HRESULT StrikeBLTR([in] VARIANT_BOOL prop);
        [id(0x0000006f), propget, helpcontext(0x06ee006f)]
        HRESULT StrikeTLBR([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006f), propput, helpcontext(0x06ee006f)]
        HRESULT StrikeTLBR([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(C94688A6-A2A7-4133-A26D-726CD569D5F3),
      version(8.6),
      helpcontext(0x000008a6),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathDelim : IDispatch {
        [id(0x00000064), propget, helpcontext(0x08a60064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x08a60065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x08a60066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x08a60067)]
        HRESULT E([out, retval] OMathArgs** prop);
        [id(0x00000068), propget, helpcontext(0x08a60068)]
        HRESULT BegChar([out, retval] short* prop);
        [id(0x00000068), propput, helpcontext(0x08a60068)]
        HRESULT BegChar([in] short prop);
        [id(0x00000069), propget, helpcontext(0x08a60069)]
        HRESULT SepChar([out, retval] short* prop);
        [id(0x00000069), propput, helpcontext(0x08a60069)]
        HRESULT SepChar([in] short prop);
        [id(0x0000006a), propget, helpcontext(0x08a6006a)]
        HRESULT EndChar([out, retval] short* prop);
        [id(0x0000006a), propput, helpcontext(0x08a6006a)]
        HRESULT EndChar([in] short prop);
        [id(0x0000006b), propget, helpcontext(0x08a6006b)]
        HRESULT Grow([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006b), propput, helpcontext(0x08a6006b)]
        HRESULT Grow([in] VARIANT_BOOL prop);
        [id(0x0000006c), propget, helpcontext(0x08a6006c)]
        HRESULT Shape([out, retval] WdOMathShapeType* prop);
        [id(0x0000006c), propput, helpcontext(0x08a6006c)]
        HRESULT Shape([in] WdOMathShapeType prop);
        [id(0x0000006d), propget, helpcontext(0x08a6006d)]
        HRESULT NoLeftChar([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006d), propput, helpcontext(0x08a6006d)]
        HRESULT NoLeftChar([in] VARIANT_BOOL prop);
        [id(0x0000006e), propget, helpcontext(0x08a6006e)]
        HRESULT NoRightChar([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006e), propput, helpcontext(0x08a6006e)]
        HRESULT NoRightChar([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(1F998A61-71C6-44C2-A0F2-1D66169B47CB),
      version(8.6),
      helpcontext(0x00000a61),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathEqArray : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0a610064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0a610065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0a610066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x0a610067)]
        HRESULT E([out, retval] OMathArgs** prop);
        [id(0x00000068), propget, helpcontext(0x0a610068)]
        HRESULT MaxDist([out, retval] VARIANT_BOOL* prop);
        [id(0x00000068), propput, helpcontext(0x0a610068)]
        HRESULT MaxDist([in] VARIANT_BOOL prop);
        [id(0x00000069), propget, helpcontext(0x0a610069)]
        HRESULT ObjDist([out, retval] VARIANT_BOOL* prop);
        [id(0x00000069), propput, helpcontext(0x0a610069)]
        HRESULT ObjDist([in] VARIANT_BOOL prop);
        [id(0x0000006a), propget, helpcontext(0x0a61006a)]
        HRESULT Align([out, retval] WdOMathVertAlignType* prop);
        [id(0x0000006a), propput, helpcontext(0x0a61006a)]
        HRESULT Align([in] WdOMathVertAlignType prop);
        [id(0x0000006b), propget, helpcontext(0x0a61006b)]
        HRESULT RowSpacingRule([out, retval] WdOMathSpacingRule* prop);
        [id(0x0000006b), propput, helpcontext(0x0a61006b)]
        HRESULT RowSpacingRule([in] WdOMathSpacingRule prop);
        [id(0x0000006c), propget, helpcontext(0x0a61006c)]
        HRESULT RowSpacing([out, retval] long* prop);
        [id(0x0000006c), propput, helpcontext(0x0a61006c)]
        HRESULT RowSpacing([in] long prop);
    };

    [
      odl,
      uuid(50209974-BA32-4A03-8FA6-BAC56CC056FD),
      version(8.6),
      helpcontext(0x00000974),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathFrac : IDispatch {
        [id(0x00000064), propget, helpcontext(0x09740064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x09740065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x09740066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x09740067)]
        HRESULT Num([out, retval] OMath** prop);
        [id(0x00000068), propget, helpcontext(0x09740068)]
        HRESULT Den([out, retval] OMath** prop);
        [id(0x00000069), propget, helpcontext(0x09740069)]
        HRESULT Type([out, retval] WdOMathFracType* prop);
        [id(0x00000069), propput, helpcontext(0x09740069)]
        HRESULT Type([in] WdOMathFracType prop);
    };

    [
      odl,
      uuid(0D951ADF-10A6-4C9B-BCD9-0FB8CBAD9A87),
      version(8.6),
      helpcontext(0x00000adf),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathFunc : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0adf0064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0adf0065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0adf0066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x0adf0067)]
        HRESULT FName([out, retval] OMath** prop);
        [id(0x00000068), propget, helpcontext(0x0adf0068)]
        HRESULT E([out, retval] OMath** prop);
    };

    [
      odl,
      uuid(02B17CB4-7D55-4B34-B38B-10381433441F),
      version(8.6),
      helpcontext(0x00000cb4),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathGroupChar : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0cb40064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0cb40065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0cb40066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x0cb40067)]
        HRESULT E([out, retval] OMath** prop);
        [id(0x00000068), propget, helpcontext(0x0cb40068)]
        HRESULT Char([out, retval] short* prop);
        [id(0x00000068), propput, helpcontext(0x0cb40068)]
        HRESULT Char([in] short prop);
        [id(0x00000069), propget, helpcontext(0x0cb40069)]
        HRESULT CharTop([out, retval] VARIANT_BOOL* prop);
        [id(0x00000069), propput, helpcontext(0x0cb40069)]
        HRESULT CharTop([in] VARIANT_BOOL prop);
        [id(0x0000006a), propget, helpcontext(0x0cb4006a)]
        HRESULT AlignTop([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006a), propput, helpcontext(0x0cb4006a)]
        HRESULT AlignTop([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(74DE9576-8E99-4E28-912B-CB30747C60CE),
      version(8.6),
      helpcontext(0x00000576),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathLimLow : IDispatch {
        [id(0x00000064), propget, helpcontext(0x05760064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x05760065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x05760066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x05760067)]
        HRESULT E([out, retval] OMath** prop);
        [id(0x00000068), propget, helpcontext(0x05760068)]
        HRESULT Lim([out, retval] OMath** prop);
        [id(0x000000c9), helpcontext(0x057600c9)]
        HRESULT ToLimUpp([out, retval] OMathFunction** prop);
    };

    [
      odl,
      uuid(FC9086C6-0287-4997-B2E1-816C334A22F8),
      version(8.6),
      helpcontext(0x000006c6),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathLimUpp : IDispatch {
        [id(0x00000064), propget, helpcontext(0x06c60064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x06c60065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x06c60066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x06c60067)]
        HRESULT E([out, retval] OMath** prop);
        [id(0x00000068), propget, helpcontext(0x06c60068)]
        HRESULT Lim([out, retval] OMath** prop);
        [id(0x000000c9), helpcontext(0x06c600c9)]
        HRESULT ToLimLow([out, retval] OMathFunction** prop);
    };

    [
      odl,
      uuid(3E061A7E-67AD-4EAA-BC1E-55057D5E596F),
      version(8.6),
      helpcontext(0x00000a7e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathMat : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0a7e0064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0a7e0065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0a7e0066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x0a7e0067)]
        HRESULT Rows([out, retval] OMathMatRows** prop);
        [id(0x00000068), propget, helpcontext(0x0a7e0068)]
        HRESULT Cols([out, retval] OMathMatCols** prop);
        [id(0x00000069), propget, helpcontext(0x0a7e0069)]
        HRESULT Cell(
                        [in] long Row, 
                        [in] long Col, 
                        [out, retval] OMath** prop);
        [id(0x0000006a), propget, helpcontext(0x0a7e006a)]
        HRESULT Align([out, retval] WdOMathVertAlignType* prop);
        [id(0x0000006a), propput, helpcontext(0x0a7e006a)]
        HRESULT Align([in] WdOMathVertAlignType prop);
        [id(0x0000006b), propget, helpcontext(0x0a7e006b)]
        HRESULT PlcHoldHidden([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006b), propput, helpcontext(0x0a7e006b)]
        HRESULT PlcHoldHidden([in] VARIANT_BOOL prop);
        [id(0x0000006c), propget, helpcontext(0x0a7e006c)]
        HRESULT RowSpacingRule([out, retval] WdOMathSpacingRule* prop);
        [id(0x0000006c), propput, helpcontext(0x0a7e006c)]
        HRESULT RowSpacingRule([in] WdOMathSpacingRule prop);
        [id(0x0000006d), propget, helpcontext(0x0a7e006d)]
        HRESULT RowSpacing([out, retval] long* prop);
        [id(0x0000006d), propput, helpcontext(0x0a7e006d)]
        HRESULT RowSpacing([in] long prop);
        [id(0x0000006e), propget, helpcontext(0x0a7e006e)]
        HRESULT ColSpacing([out, retval] long* prop);
        [id(0x0000006e), propput, helpcontext(0x0a7e006e)]
        HRESULT ColSpacing([in] long prop);
        [id(0x0000006f), propget, helpcontext(0x0a7e006f)]
        HRESULT ColGapRule([out, retval] WdOMathSpacingRule* prop);
        [id(0x0000006f), propput, helpcontext(0x0a7e006f)]
        HRESULT ColGapRule([in] WdOMathSpacingRule prop);
        [id(0x00000070), propget, helpcontext(0x0a7e0070)]
        HRESULT ColGap([out, retval] long* prop);
        [id(0x00000070), propput, helpcontext(0x0a7e0070)]
        HRESULT ColGap([in] long prop);
    };

    [
      odl,
      uuid(1B426348-607D-433C-9216-C5D2BF0EF31F),
      version(8.6),
      helpcontext(0x00000348),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathMatRows : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0348fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000064), propget, helpcontext(0x03480064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x03480065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x03480066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x03480067)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x03480000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] OMathMatRow** prop);
        [id(0x000000c8), helpcontext(0x034800c8)]
        HRESULT Add(
                        [in, optional] VARIANT* BeforeRow, 
                        [out, retval] OMathMatRow** prop);
    };

    [
      odl,
      uuid(EFC71F9C-7F42-4CD4-A7A7-970D7A48CD27),
      version(8.6),
      helpcontext(0x00000f9c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathMatCols : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0f9cfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000064), propget, helpcontext(0x0f9c0064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0f9c0065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0f9c0066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x0f9c0067)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x0f9c0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] OMathMatCol** prop);
        [id(0x000000c8), helpcontext(0x0f9c00c8)]
        HRESULT Add(
                        [in, optional] VARIANT* BeforeCol, 
                        [out, retval] OMathMatCol** prop);
    };

    [
      odl,
      uuid(5DAA8BB6-054E-48F6-BEAC-EAAD02BE0CC7),
      version(8.6),
      helpcontext(0x00000bb6),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathMatRow : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0bb60064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0bb60065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0bb60066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x0bb60067)]
        HRESULT Args([out, retval] OMathArgs** prop);
        [id(0x00000068), propget, helpcontext(0x0bb60068)]
        HRESULT RowIndex([out, retval] long* prop);
        [id(0x000000c8), helpcontext(0x0bb600c8)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(CAE36175-3818-4C60-BCBF-0645D51EB33B),
      version(8.6),
      helpcontext(0x00000175),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathMatCol : IDispatch {
        [id(0x00000064), propget, helpcontext(0x01750064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x01750065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x01750066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x01750067)]
        HRESULT Args([out, retval] OMathArgs** prop);
        [id(0x00000068), propget, helpcontext(0x01750068)]
        HRESULT ColIndex([out, retval] long* prop);
        [id(0x00000069), propget, helpcontext(0x01750069)]
        HRESULT Align([out, retval] WdOMathHorizAlignType* prop);
        [id(0x00000069), propput, helpcontext(0x01750069)]
        HRESULT Align([in] WdOMathHorizAlignType prop);
        [id(0x000000c8), helpcontext(0x017500c8)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(CEBD4184-4E6D-4FC6-A42D-2142B1B76AF5),
      version(8.6),
      helpcontext(0x00000184),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathNary : IDispatch {
        [id(0x00000064), propget, helpcontext(0x01840064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x01840065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x01840066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x01840067)]
        HRESULT Sub([out, retval] OMath** prop);
        [id(0x00000068), propget, helpcontext(0x01840068)]
        HRESULT Sup([out, retval] OMath** prop);
        [id(0x00000069), propget, helpcontext(0x01840069)]
        HRESULT E([out, retval] OMath** prop);
        [id(0x0000006a), propget, helpcontext(0x0184006a)]
        HRESULT Char([out, retval] short* prop);
        [id(0x0000006a), propput, helpcontext(0x0184006a)]
        HRESULT Char([in] short prop);
        [id(0x0000006b), propget, helpcontext(0x0184006b)]
        HRESULT Grow([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006b), propput, helpcontext(0x0184006b)]
        HRESULT Grow([in] VARIANT_BOOL prop);
        [id(0x0000006c), propget, helpcontext(0x0184006c)]
        HRESULT SubSupLim([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006c), propput, helpcontext(0x0184006c)]
        HRESULT SubSupLim([in] VARIANT_BOOL prop);
        [id(0x0000006d), propget, helpcontext(0x0184006d)]
        HRESULT HideSub([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006d), propput, helpcontext(0x0184006d)]
        HRESULT HideSub([in] VARIANT_BOOL prop);
        [id(0x0000006e), propget, helpcontext(0x0184006e)]
        HRESULT HideSup([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006e), propput, helpcontext(0x0184006e)]
        HRESULT HideSup([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(DB77D541-85C3-42E8-8649-AFBD7CF87866),
      version(8.6),
      helpcontext(0x00000541),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathPhantom : IDispatch {
        [id(0x00000064), propget, helpcontext(0x05410064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x05410065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x05410066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x05410067)]
        HRESULT E([out, retval] OMath** prop);
        [id(0x00000068), propget, helpcontext(0x05410068)]
        HRESULT Show([out, retval] VARIANT_BOOL* prop);
        [id(0x00000068), propput, helpcontext(0x05410068)]
        HRESULT Show([in] VARIANT_BOOL prop);
        [id(0x00000069), propget, helpcontext(0x05410069)]
        HRESULT ZeroWid([out, retval] VARIANT_BOOL* prop);
        [id(0x00000069), propput, helpcontext(0x05410069)]
        HRESULT ZeroWid([in] VARIANT_BOOL prop);
        [id(0x0000006a), propget, helpcontext(0x0541006a)]
        HRESULT ZeroAsc([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006a), propput, helpcontext(0x0541006a)]
        HRESULT ZeroAsc([in] VARIANT_BOOL prop);
        [id(0x0000006b), propget, helpcontext(0x0541006b)]
        HRESULT ZeroDesc([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006b), propput, helpcontext(0x0541006b)]
        HRESULT ZeroDesc([in] VARIANT_BOOL prop);
        [id(0x0000006c), propget, helpcontext(0x0541006c)]
        HRESULT Transp([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006c), propput, helpcontext(0x0541006c)]
        HRESULT Transp([in] VARIANT_BOOL prop);
        [id(0x0000006d), propget, helpcontext(0x0541006d)]
        HRESULT Smash([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006d), propput, helpcontext(0x0541006d)]
        HRESULT Smash([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(AFAF0C0E-8603-40F6-8FD1-42726CAC21E3),
      version(8.6),
      helpcontext(0x00000c0e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathScrPre : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0c0e0064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0c0e0065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0c0e0066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x0c0e0067)]
        HRESULT Sub([out, retval] OMath** prop);
        [id(0x00000068), propget, helpcontext(0x0c0e0068)]
        HRESULT Sup([out, retval] OMath** prop);
        [id(0x00000069), propget, helpcontext(0x0c0e0069)]
        HRESULT E([out, retval] OMath** prop);
        [id(0x000000c9), helpcontext(0x0c0e00c9)]
        HRESULT ToScrSubSup([out, retval] OMathFunction** prop);
    };

    [
      odl,
      uuid(67A7EEC5-285D-4024-B071-BD6B33B88547),
      version(8.6),
      helpcontext(0x00000ec5),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathRad : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0ec50064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0ec50065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0ec50066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x0ec50067)]
        HRESULT Deg([out, retval] OMath** prop);
        [id(0x00000068), propget, helpcontext(0x0ec50068)]
        HRESULT E([out, retval] OMath** prop);
        [id(0x00000069), propget, helpcontext(0x0ec50069)]
        HRESULT HideDeg([out, retval] VARIANT_BOOL* prop);
        [id(0x00000069), propput, helpcontext(0x0ec50069)]
        HRESULT HideDeg([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(98DFBD12-96CB-4F07-90EA-749FF1D6B89D),
      version(8.6),
      helpcontext(0x00000d12),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathScrSub : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0d120064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0d120065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0d120066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x0d120067)]
        HRESULT E([out, retval] OMath** prop);
        [id(0x00000068), propget, helpcontext(0x0d120068)]
        HRESULT Sub([out, retval] OMath** prop);
    };

    [
      odl,
      uuid(DC489AD4-23C4-4F4B-990F-45A51C7C0C4F),
      version(8.6),
      helpcontext(0x00000ad4),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathScrSubSup : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0ad40064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0ad40065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0ad40066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x0ad40067)]
        HRESULT E([out, retval] OMath** prop);
        [id(0x00000068), propget, helpcontext(0x0ad40068)]
        HRESULT Sub([out, retval] OMath** prop);
        [id(0x00000069), propget, helpcontext(0x0ad40069)]
        HRESULT Sup([out, retval] OMath** prop);
        [id(0x0000006a), propget, helpcontext(0x0ad4006a)]
        HRESULT AlignScripts([out, retval] VARIANT_BOOL* prop);
        [id(0x0000006a), propput, helpcontext(0x0ad4006a)]
        HRESULT AlignScripts([in] VARIANT_BOOL prop);
        [id(0x000000c8), helpcontext(0x0ad400c8)]
        HRESULT RemoveSub([out, retval] OMathFunction** prop);
        [id(0x000000c9), helpcontext(0x0ad400c9)]
        HRESULT RemoveSup([out, retval] OMathFunction** prop);
        [id(0x000000ca), helpcontext(0x0ad400ca)]
        HRESULT ToScrPre([out, retval] OMathFunction** prop);
    };

    [
      odl,
      uuid(D0A95726-678A-4B9D-8103-1E2B86735AE7),
      version(8.6),
      helpcontext(0x00000726),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathScrSup : IDispatch {
        [id(0x00000064), propget, helpcontext(0x07260064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x07260065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x07260066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x07260067)]
        HRESULT E([out, retval] OMath** prop);
        [id(0x00000068), propget, helpcontext(0x07260068)]
        HRESULT Sup([out, retval] OMath** prop);
    };

    [
      odl,
      uuid(6F9D1F68-06F7-49EF-8902-185E54EB5E87),
      version(8.6),
      helpcontext(0x00000f68),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathAutoCorrect : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0f680064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0f680065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0f680066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x0f680067)]
        HRESULT ReplaceText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), propput, helpcontext(0x0f680067)]
        HRESULT ReplaceText([in] VARIANT_BOOL prop);
        [id(0x00000068), propget, helpcontext(0x0f680068)]
        HRESULT UseOutsideOMath([out, retval] VARIANT_BOOL* prop);
        [id(0x00000068), propput, helpcontext(0x0f680068)]
        HRESULT UseOutsideOMath([in] VARIANT_BOOL prop);
        [id(0x00000069), propget, helpcontext(0x0f680069)]
        HRESULT Entries([out, retval] OMathAutoCorrectEntries** prop);
        [id(0x0000006a), propget, helpcontext(0x0f68006a)]
        HRESULT Functions([out, retval] OMathRecognizedFunctions** prop);
    };

    [
      odl,
      uuid(18CD5EC8-8B7B-42C8-992A-2A407468642C),
      version(8.6),
      helpcontext(0x00000ec8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathAutoCorrectEntries : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0ec80064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0ec80065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0ec80066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0ec8fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000067), propget, helpcontext(0x0ec80067)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x0ec80000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] OMathAutoCorrectEntry** prop);
        [id(0x000000c8), helpcontext(0x0ec800c8)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in] BSTR Value, 
                        [out, retval] OMathAutoCorrectEntry** prop);
    };

    [
      odl,
      uuid(D8779F01-4869-4403-B334-D60C5F9C9175),
      version(8.6),
      helpcontext(0x00000f01),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathAutoCorrectEntry : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0f010064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0f010065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0f010066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x0f010067)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000068), propget, helpcontext(0x0f010068)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000068), propput, helpcontext(0x0f010068)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000069), propget, helpcontext(0x0f010069)]
        HRESULT Value([out, retval] BSTR* prop);
        [id(0x00000069), propput, helpcontext(0x0f010069)]
        HRESULT Value([in] BSTR prop);
        [id(0x000000c8), helpcontext(0x0f0100c8)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(44FEE887-6600-41AB-95A5-DE33C605116C),
      version(8.6),
      helpcontext(0x00000887),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathRecognizedFunctions : IDispatch {
        [id(0x00000064), propget, helpcontext(0x08870064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x08870065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x08870066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0887fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000067), propget, helpcontext(0x08870067)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x08870000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] OMathRecognizedFunction** prop);
        [id(0x000000c8), helpcontext(0x088700c8)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] OMathRecognizedFunction** prop);
    };

    [
      odl,
      uuid(5C04BD93-2F3F-4668-918D-9738EC901039),
      version(8.6),
      helpcontext(0x00000d93),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathRecognizedFunction : IDispatch {
        [id(0x00000064), propget, helpcontext(0x0d930064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0d930065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0d930066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x0d930067)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000068), propget, helpcontext(0x0d930068)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000000c8), helpcontext(0x0d9300c8)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(804CD967-F83B-432D-9446-C61A45CFEFF0),
      version(8.6),
      helpcontext(0x00000967),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ContentControls : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0967fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000064), propget, helpcontext(0x09670064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x09670065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x09670066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x09670067)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09670000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] ContentControl** prop);
        [id(0x00000001), helpcontext(0x09670001)]
        HRESULT Add(
                        [in, optional, defaultvalue(0)] WdContentControlType Type, 
                        [in, optional] VARIANT* Range, 
                        [out, retval] ContentControl** prop);
    };

    [
      odl,
      uuid(EE95AFE3-3026-4172-B078-0E79DAB5CC3D),
      version(8.6),
      helpcontext(0x00000fe3),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ContentControl : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0fe303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0fe303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0fe303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x0fe30001)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000002), propget, helpcontext(0x0fe30002)]
        HRESULT LockContentControl([out, retval] VARIANT_BOOL* prop);
        [id(0x00000002), propput, helpcontext(0x0fe30002)]
        HRESULT LockContentControl([in] VARIANT_BOOL prop);
        [id(0x00000003), propget, helpcontext(0x0fe30003)]
        HRESULT LockContents([out, retval] VARIANT_BOOL* prop);
        [id(0x00000003), propput, helpcontext(0x0fe30003)]
        HRESULT LockContents([in] VARIANT_BOOL prop);
        [id(0x00000004), propget, helpcontext(0x0fe30004)]
        HRESULT XMLMapping([out, retval] XMLMapping** prop);
        [id(0x00000005), propget, helpcontext(0x0fe30005)]
        HRESULT Type([out, retval] WdContentControlType* prop);
        [id(0x00000005), propput, helpcontext(0x0fe30005)]
        HRESULT Type([in] WdContentControlType prop);
        [id(0x00000006), helpcontext(0x0fe30006)]
        HRESULT Copy();
        [id(0x00000007), helpcontext(0x0fe30007)]
        HRESULT Cut();
        [id(0x00000008), helpcontext(0x0fe30008)]
        HRESULT Delete([in, optional, defaultvalue(0)] VARIANT_BOOL DeleteContents);
        [id(0x00000009), propget, helpcontext(0x0fe30009)]
        HRESULT DropdownListEntries([out, retval] ContentControlListEntries** prop);
        [id(0x0000000a), propget, helpcontext(0x0fe3000a)]
        HRESULT PlaceholderText([out, retval] BuildingBlock** prop);
        [id(0x0000000b), helpcontext(0x0fe3000b)]
        HRESULT SetPlaceholderText(
                        [in, optional, defaultvalue(0)] BuildingBlock* BuildingBlock, 
                        [in, optional, defaultvalue(0)] Range* Range, 
                        [in, optional, defaultvalue("")] BSTR Text);
        [id(0x0000000c), propget, helpcontext(0x0fe3000c)]
        HRESULT Title([out, retval] BSTR* prop);
        [id(0x0000000c), propput, helpcontext(0x0fe3000c)]
        HRESULT Title([in] BSTR prop);
        [id(0x0000000d), propget, helpcontext(0x0fe3000d)]
        HRESULT DateDisplayFormat([out, retval] BSTR* prop);
        [id(0x0000000d), propput, helpcontext(0x0fe3000d)]
        HRESULT DateDisplayFormat([in] BSTR prop);
        [id(0x0000000f), propget, helpcontext(0x0fe3000f)]
        HRESULT MultiLine([out, retval] VARIANT_BOOL* prop);
        [id(0x0000000f), propput, helpcontext(0x0fe3000f)]
        HRESULT MultiLine([in] VARIANT_BOOL prop);
        [id(0x00000010), propget, helpcontext(0x0fe30010)]
        HRESULT ParentContentControl([out, retval] ContentControl** prop);
        [id(0x00000011), propget, helpcontext(0x0fe30011)]
        HRESULT Temporary([out, retval] VARIANT_BOOL* prop);
        [id(0x00000011), propput, helpcontext(0x0fe30011)]
        HRESULT Temporary([in] VARIANT_BOOL prop);
        [id(0x00000012), propget, helpcontext(0x0fe30012)]
        HRESULT ID([out, retval] BSTR* prop);
        [id(0x00000013), propget, helpcontext(0x0fe30013)]
        HRESULT ShowingPlaceholderText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000014), propget, helpcontext(0x0fe30014)]
        HRESULT DateStorageFormat([out, retval] WdContentControlDateStorageFormat* prop);
        [id(0x00000014), propput, helpcontext(0x0fe30014)]
        HRESULT DateStorageFormat([in] WdContentControlDateStorageFormat prop);
        [id(0x00000015), propget, helpcontext(0x0fe30015)]
        HRESULT BuildingBlockType([out, retval] WdBuildingBlockTypes* prop);
        [id(0x00000015), propput, helpcontext(0x0fe30015)]
        HRESULT BuildingBlockType([in] WdBuildingBlockTypes prop);
        [id(0x00000016), propget, helpcontext(0x0fe30016)]
        HRESULT BuildingBlockCategory([out, retval] BSTR* prop);
        [id(0x00000016), propput, helpcontext(0x0fe30016)]
        HRESULT BuildingBlockCategory([in] BSTR prop);
        [id(0x00000017), propget, helpcontext(0x0fe30017)]
        HRESULT DateDisplayLocale([out, retval] WdLanguageID* prop);
        [id(0x00000017), propput, helpcontext(0x0fe30017)]
        HRESULT DateDisplayLocale([in] WdLanguageID prop);
        [id(0x00000018), helpcontext(0x0fe30018)]
        HRESULT Ungroup();
        [id(0x00000019), propget, helpcontext(0x0fe30019)]
        HRESULT DefaultTextStyle([out, retval] VARIANT* prop);
        [id(0x00000019), propput, helpcontext(0x0fe30019)]
        HRESULT DefaultTextStyle([in] VARIANT* prop);
        [id(0x0000001a), propget, helpcontext(0x0fe3001a)]
        HRESULT DateCalendarType([out, retval] WdCalendarType* prop);
        [id(0x0000001a), propput, helpcontext(0x0fe3001a)]
        HRESULT DateCalendarType([in] WdCalendarType prop);
        [id(0x0000001b), propget, helpcontext(0x0fe3001b)]
        HRESULT Tag([out, retval] BSTR* prop);
        [id(0x0000001b), propput, helpcontext(0x0fe3001b)]
        HRESULT Tag([in] BSTR prop);
        [id(0x0000001c), propget, helpcontext(0x0fe3001c)]
        HRESULT Checked([out, retval] VARIANT_BOOL* prop);
        [id(0x0000001c), propput, helpcontext(0x0fe3001c)]
        HRESULT Checked([in] VARIANT_BOOL prop);
        [id(0x0000001d), helpcontext(0x0fe3001d)]
        HRESULT SetCheckedSymbol(
                        [in] long CharacterNumber, 
                        [in, optional, defaultvalue("")] BSTR Font);
        [id(0x0000001e), helpcontext(0x0fe3001e)]
        HRESULT SetUncheckedSymbol(
                        [in] long CharacterNumber, 
                        [in, optional, defaultvalue("")] BSTR Font);
        [id(0x0000001f), propget, helpcontext(0x0fe3001f)]
        HRESULT Color([out, retval] WdColor* prop);
        [id(0x0000001f), propput, helpcontext(0x0fe3001f)]
        HRESULT Color([in] WdColor prop);
        [id(0x00000020), propget, helpcontext(0x0fe30020)]
        HRESULT Appearance([out, retval] WdContentControlAppearance* prop);
        [id(0x00000020), propput, helpcontext(0x0fe30020)]
        HRESULT Appearance([in] WdContentControlAppearance prop);
        [id(0x00000021), propget, helpcontext(0x0fe30021)]
        HRESULT Level([out, retval] WdContentControlLevel* prop);
        [id(0x00000022), propget, helpcontext(0x0fe30022)]
        HRESULT RepeatingSectionItems([out, retval] RepeatingSectionItemColl** prop);
        [id(0x00000023), propget, helpcontext(0x0fe30023)]
        HRESULT RepeatingSectionItemTitle([out, retval] BSTR* prop);
        [id(0x00000023), propput, helpcontext(0x0fe30023)]
        HRESULT RepeatingSectionItemTitle([in] BSTR prop);
        [id(0x00000024), propget, helpcontext(0x0fe30024)]
        HRESULT AllowInsertDeleteSection([out, retval] VARIANT_BOOL* prop);
        [id(0x00000024), propput, helpcontext(0x0fe30024)]
        HRESULT AllowInsertDeleteSection([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(0C1FABE7-F737-406F-9CA3-B07661F9D1A2),
      version(8.6),
      helpcontext(0x00000be7),
      dual,
      nonextensible,
      oleautomation
    ]
    interface XMLMapping : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0be703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0be703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0be703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x0be70000)]
        HRESULT IsMapped([out, retval] VARIANT_BOOL* prop);
        [id(0x00000001), propget, helpcontext(0x0be70001)]
        HRESULT CustomXMLPart([out, retval] CustomXMLPart** prop);
        [id(0x00000002), propget, helpcontext(0x0be70002)]
        HRESULT CustomXMLNode([out, retval] CustomXMLNode** prop);
        [id(0x00000003), helpcontext(0x0be70003)]
        HRESULT SetMapping(
                        [in] BSTR XPath, 
                        [in, optional, defaultvalue("")] BSTR PrefixMapping, 
                        [in, optional, defaultvalue(0)] CustomXMLPart* Source, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), helpcontext(0x0be70004)]
        HRESULT Delete();
        [id(0x00000005), helpcontext(0x0be70005)]
        HRESULT SetMappingByNode(
                        [in] CustomXMLNode* Node, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), propget, helpcontext(0x0be70006)]
        HRESULT XPath([out, retval] BSTR* prop);
        [id(0x00000007), propget, helpcontext(0x0be70007)]
        HRESULT PrefixMappings([out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(54F46DC4-F6A6-48CC-BD66-46C1DDEADD22),
      version(8.6),
      helpcontext(0x00000dc4),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ContentControlListEntries : IDispatch {
        [id(0xfffffffc), propget, helpcontext(0x0dc4fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000064), propget, helpcontext(0x0dc40064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x0dc40065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x0dc40066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000067), propget, helpcontext(0x0dc40067)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000068), helpcontext(0x0dc40068)]
        HRESULT Clear();
        [id(00000000), helpcontext(0x0dc40000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] ContentControlListEntry** prop);
        [id(0x0000006a), helpcontext(0x0dc4006a)]
        HRESULT Add(
                        [in] BSTR Text, 
                        [in, optional, defaultvalue("")] BSTR Value, 
                        [in, optional, defaultvalue(0)] long Index, 
                        [out, retval] ContentControlListEntry** prop);
    };

    [
      odl,
      uuid(0C6FA8CA-E65F-4FC7-AB8F-20729EECBB14),
      version(8.6),
      helpcontext(0x000008ca),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ContentControlListEntry : IDispatch {
        [id(0x00000064), propget, helpcontext(0x08ca0064)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000065), propget, helpcontext(0x08ca0065)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000066), propget, helpcontext(0x08ca0066)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x08ca0000)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x08ca0000)]
        HRESULT Text([in] BSTR prop);
        [id(0x00000068), propget, helpcontext(0x08ca0068)]
        HRESULT Value([out, retval] BSTR* prop);
        [id(0x00000068), propput, helpcontext(0x08ca0068)]
        HRESULT Value([in] BSTR prop);
        [id(0x00000069), propget, helpcontext(0x08ca0069)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000069), propput, helpcontext(0x08ca0069)]
        HRESULT Index([in] long prop);
        [id(0x0000006a), helpcontext(0x08ca006a)]
        HRESULT Delete();
        [id(0x0000006b), helpcontext(0x08ca006b)]
        HRESULT MoveUp();
        [id(0x0000006c), helpcontext(0x08ca006c)]
        HRESULT MoveDown();
        [id(0x0000006d), helpcontext(0x08ca006d)]
        HRESULT Select();
    };

    [
      odl,
      uuid(B5828B50-0E3D-448A-962D-A40702A5868D),
      version(8.6),
      helpcontext(0x00000b50),
      dual,
      nonextensible,
      oleautomation
    ]
    interface BuildingBlockTypes : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0b5003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0b5003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0b5003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x0b500001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x0b500000)]
        HRESULT Item(
                        [in] WdBuildingBlockTypes Index, 
                        [out, retval] BuildingBlockType** prop);
    };

    [
      odl,
      uuid(817F99FA-CCC4-4971-8E9D-1238F735AAFF),
      version(8.6),
      helpcontext(0x000009fa),
      dual,
      nonextensible,
      oleautomation
    ]
    interface BuildingBlockType : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x09fa03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x09fa03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x09fa03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09fa0001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x09fa0002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000014), propget, helpcontext(0x09fa0014)]
        HRESULT Categories([out, retval] Categories** prop);
    };

    [
      odl,
      uuid(6E47678B-A879-4E56-8698-3B7CF169FAD4),
      version(8.6),
      helpcontext(0x0000078b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Categories : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x078b03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x078b03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x078b03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x078b0001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x078b0000)]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] Category** prop);
    };

    [
      odl,
      uuid(ECFBDB5E-ACD2-4530-AD79-4560B7FF055C),
      version(8.6),
      helpcontext(0x00000b5e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Category : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0b5e03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0b5e03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0b5e03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x0b5e0001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x0b5e0002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000003), propget, helpcontext(0x0b5e0003)]
        HRESULT BuildingBlocks([out, retval] BuildingBlocks** prop);
        [id(0x00000004), propget, helpcontext(0x0b5e0004)]
        HRESULT Type([out, retval] BuildingBlockType** prop);
    };

    [
      odl,
      uuid(C6D50987-25D7-408A-BFF2-90BF86A24E93),
      version(8.6),
      helpcontext(0x00000987),
      dual,
      nonextensible,
      oleautomation
    ]
    interface BuildingBlocks : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x098703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x098703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x098703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x09870001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x09870000)]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] BuildingBlock** prop);
        [id(0x00000065), helpcontext(0x09870065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in] Range* Range, 
                        [in, optional] VARIANT* Description, 
                        [in, optional, defaultvalue(0)] WdDocPartInsertOptions InsertOptions, 
                        [out, retval] BuildingBlock** prop);
    };

    [
      odl,
      uuid(BFD3FC23-F763-4FF8-826E-1AFBF598A4E7),
      version(8.6),
      helpcontext(0x00000c23),
      dual,
      nonextensible,
      oleautomation
    ]
    interface BuildingBlock : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0c2303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0c2303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0c2303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x0c230001)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000002), propget, helpcontext(0x0c230002)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000002), propput, helpcontext(0x0c230002)]
        HRESULT Name([in] BSTR prop);
        [id(0x00000003), propget, helpcontext(0x0c230003)]
        HRESULT Type([out, retval] BuildingBlockType** prop);
        [id(0x00000004), propget, helpcontext(0x0c230004)]
        HRESULT Description([out, retval] BSTR* prop);
        [id(0x00000004), propput, helpcontext(0x0c230004)]
        HRESULT Description([in] BSTR prop);
        [id(0x00000005), propget, helpcontext(0x0c230005)]
        HRESULT ID([out, retval] BSTR* prop);
        [id(0x00000006), propget, helpcontext(0x0c230006)]
        HRESULT Category([out, retval] Category** prop);
        [id(00000000), propget, helpcontext(0x0c230000)]
        HRESULT Value([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x0c230000)]
        HRESULT Value([in] BSTR prop);
        [id(0x00000007), propget, helpcontext(0x0c230007)]
        HRESULT InsertOptions([out, retval] long* prop);
        [id(0x00000007), propput, helpcontext(0x0c230007)]
        HRESULT InsertOptions([in] long prop);
        [id(0x00000065), helpcontext(0x0c230065)]
        HRESULT Delete();
        [id(0x00000066), helpcontext(0x0c230066)]
        HRESULT Insert(
                        [in] Range* Where, 
                        [in, optional] VARIANT* RichText, 
                        [out, retval] Range** prop);
    };

    [
      odl,
      uuid(39709229-56A0-4E29-9112-B31DD067EBFD),
      version(8.6),
      helpcontext(0x00000229),
      dual,
      nonextensible,
      oleautomation
    ]
    interface BuildingBlockEntries : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x022903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x022903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x022903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x02290001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x02290000)]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] BuildingBlock** prop);
        [id(0x00000065), helpcontext(0x02290065)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in] WdBuildingBlockTypes Type, 
                        [in] BSTR Category, 
                        [in] Range* Range, 
                        [in, optional] VARIANT* Description, 
                        [in, optional, defaultvalue(0)] WdDocPartInsertOptions InsertOptions, 
                        [out, retval] BuildingBlock** prop);
    };

    [
      odl,
      uuid(E2E0F3A7-204C-40C5-BAA5-290F374FDF5A),
      version(8.6),
      helpcontext(0x000003a7),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathBreaks : IDispatch {
        [id(0x00000065), propget, helpcontext(0x03a70065)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000066), propget, helpcontext(0x03a70066)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000067), propget, helpcontext(0x03a70067)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000068), propget, helpcontext(0x03a70068)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x03a70000)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] OMathBreak** prop);
        [id(0x00000069), helpcontext(0x03a70069)]
        HRESULT Add(
                        [in] Range* Range, 
                        [out, retval] OMathBreak** prop);
    };

    [
      odl,
      uuid(65E515D5-F50B-4951-8F38-FA6AC8707387),
      version(8.6),
      helpcontext(0x000005d5),
      dual,
      nonextensible,
      oleautomation
    ]
    interface OMathBreak : IDispatch {
        [id(0x00000065), propget, helpcontext(0x05d50065)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x00000066), propget, helpcontext(0x05d50066)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000067), propget, helpcontext(0x05d50067)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000068), propget, helpcontext(0x05d50068)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000069), propget, helpcontext(0x05d50069)]
        HRESULT AlignAt([out, retval] long* prop);
        [id(0x00000069), propput, helpcontext(0x05d50069)]
        HRESULT AlignAt([in] long prop);
        [id(0x0000006a), helpcontext(0x05d5006a)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(E6AAEC05-E543-4085-BA92-9BF7D2474F51),
      version(8.6),
      helpcontext(0x00000c05),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Research : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0c0503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0c0503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0c0503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000001f4), helpcontext(0x0c0501f4)]
        HRESULT Query(
                        [in] BSTR ServiceID, 
                        [in, optional, defaultvalue("")] BSTR QueryString, 
                        [in, optional, defaultvalue(0)] WdLanguageID QueryLanguage, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL UseSelection, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL LaunchQuery, 
                        [out, retval] VARIANT* prop);
        [id(0x000001f5), helpcontext(0x0c0501f5)]
        HRESULT SetLanguagePair(
                        [in] WdLanguageID LanguageFrom, 
                        [in] WdLanguageID LanguageTo, 
                        [out, retval] VARIANT* prop);
        [id(0x000001f6), helpcontext(0x0c0501f6)]
        HRESULT IsResearchService(
                        [in] BSTR ServiceID, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x000003eb), propget, helpcontext(0x0c0503eb)]
        HRESULT FavoriteService([out, retval] BSTR* prop);
        [id(0x000003eb), propput, helpcontext(0x0c0503eb)]
        HRESULT FavoriteService([in] BSTR prop);
    };

    [
      odl,
      uuid(D040DAF9-6CE4-4BE8-839D-F4538A4301CF),
      version(8.6),
      helpcontext(0x00000af9),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SoftEdgeFormat : IDispatch {
        [id(0x00000001), propget, helpcontext(0x0af90001)]
        HRESULT Type([out, retval] MsoSoftEdgeType* prop);
        [id(0x00000001), propput, helpcontext(0x0af90001)]
        HRESULT Type([in] MsoSoftEdgeType prop);
        [id(0x00000002), propget, helpcontext(0x0af90002)]
        HRESULT Radius([out, retval] single* prop);
        [id(0x00000002), propput, helpcontext(0x0af90002)]
        HRESULT Radius([in] single prop);
        [id(0x000003e8), propget, helpcontext(0x0af903e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0af903e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0af903ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
    };

    [
      odl,
      uuid(F1B14F40-5C32-4C8C-B5B2-DE537BB6B89D),
      version(8.6),
      helpcontext(0x00000f40),
      dual,
      nonextensible,
      oleautomation
    ]
    interface GlowFormat : IDispatch {
        [id(0x00000001), propget, helpcontext(0x0f400001)]
        HRESULT Radius([out, retval] single* prop);
        [id(0x00000001), propput, helpcontext(0x0f400001)]
        HRESULT Radius([in] single prop);
        [id(0x00000002), propget, helpcontext(0x0f400002)]
        HRESULT Color([out, retval] ColorFormat** prop);
        [id(0x000003e8), propget, helpcontext(0x0f4003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0f4003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0f4003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000003), propget, helpcontext(0x0f400003)]
        HRESULT Transparency([out, retval] single* prop);
        [id(0x00000003), propput, helpcontext(0x0f400003)]
        HRESULT Transparency([in] single prop);
    };

    [
      odl,
      uuid(F01943FF-1985-445E-8602-8FB8F39CCA75),
      version(8.6),
      helpcontext(0x000003ff),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ReflectionFormat : IDispatch {
        [id(0x00000001), propget, helpcontext(0x03ff0001)]
        HRESULT Type([out, retval] MsoReflectionType* prop);
        [id(0x00000001), propput, helpcontext(0x03ff0001)]
        HRESULT Type([in] MsoReflectionType prop);
        [id(0x000003e8), propget, helpcontext(0x03ff03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x03ff03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x03ff03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000002), propget, helpcontext(0x03ff0002)]
        HRESULT Transparency([out, retval] single* prop);
        [id(0x00000002), propput, helpcontext(0x03ff0002)]
        HRESULT Transparency([in] single prop);
        [id(0x00000003), propget, helpcontext(0x03ff0003)]
        HRESULT Size([out, retval] single* prop);
        [id(0x00000003), propput, helpcontext(0x03ff0003)]
        HRESULT Size([in] single prop);
        [id(0x00000004), propget, helpcontext(0x03ff0004)]
        HRESULT Offset([out, retval] single* prop);
        [id(0x00000004), propput, helpcontext(0x03ff0004)]
        HRESULT Offset([in] single prop);
        [id(0x00000005), propget, helpcontext(0x03ff0005)]
        HRESULT Blur([out, retval] single* prop);
        [id(0x00000005), propput, helpcontext(0x03ff0005)]
        HRESULT Blur([in] single prop);
    };

    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    [
      odl,
      uuid(4A304B59-31FF-42DD-B436-7FC9C5DB7559),
      version(8.6),
      helpcontext(0x00000b59),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartData : IDispatch {
        [id(0x60020000), propget, helpcontext(0x0b590000)]
        HRESULT Workbook([out, retval] IDispatch** prop);
        [id(0x60020001), helpcontext(0x0b590001)]
        HRESULT Activate();
        [id(0x60020002), propget, helpcontext(0x0b590002)]
        HRESULT IsLinked([out, retval] VARIANT_BOOL* prop);
        [id(0x60020003), helpcontext(0x0b590003)]
        HRESULT BreakLink();
        [id(0x60020004), helpcontext(0x0b590004)]
        HRESULT ActivateChartDataWindow();
    };

    [
      odl,
      uuid(6FFA84BB-A350-4442-BB53-A43653459A84),
      version(8.6),
      helpcontext(0x000004bb),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Chart : IDispatch {
        [id(0x00000096), propget, helpcontext(0x04bb0096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x60020001), propget, helpcontext(0x04bb0001)]
        HRESULT HasTitle(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x60020001), propput, helpcontext(0x04bb0001)]
        HRESULT HasTitle(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL prop);
        [id(0x60020003), propget, helpcontext(0x04bb0003)]
        HRESULT ChartTitle(
                        [in, lcid] long lcid, 
                        [out, retval] ChartTitle** prop);
        [id(0x60020004), propget, helpcontext(0x04bb0004)]
        HRESULT DepthPercent(
                        [in, lcid] long lcid, 
                        [out, retval] long* prop);
        [id(0x60020004), propput, helpcontext(0x04bb0004)]
        HRESULT DepthPercent(
                        [in, lcid] long lcid, 
                        [in] long prop);
        [id(0x60020006), propget, helpcontext(0x04bb0006)]
        HRESULT Elevation(
                        [in, lcid] long lcid, 
                        [out, retval] long* prop);
        [id(0x60020006), propput, helpcontext(0x04bb0006)]
        HRESULT Elevation(
                        [in, lcid] long lcid, 
                        [in] long prop);
        [id(0x60020008), propget, helpcontext(0x04bb0008)]
        HRESULT GapDepth(
                        [in, lcid] long lcid, 
                        [out, retval] long* prop);
        [id(0x60020008), propput, helpcontext(0x04bb0008)]
        HRESULT GapDepth(
                        [in, lcid] long lcid, 
                        [in] long prop);
        [id(0x6002000a), propget, helpcontext(0x04bb000a)]
        HRESULT HeightPercent(
                        [in, lcid] long lcid, 
                        [out, retval] long* prop);
        [id(0x6002000a), propput, helpcontext(0x04bb000a)]
        HRESULT HeightPercent(
                        [in, lcid] long lcid, 
                        [in] long prop);
        [id(0x6002000c), propget, helpcontext(0x04bb000c)]
        HRESULT Perspective(
                        [in, lcid] long lcid, 
                        [out, retval] long* prop);
        [id(0x6002000c), propput, helpcontext(0x04bb000c)]
        HRESULT Perspective(
                        [in, lcid] long lcid, 
                        [in] long prop);
        [id(0x6002000e), propget, helpcontext(0x04bb000e)]
        HRESULT RightAngleAxes(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* prop);
        [id(0x6002000e), propput, helpcontext(0x04bb000e)]
        HRESULT RightAngleAxes(
                        [in, lcid] long lcid, 
                        [in] VARIANT prop);
        [id(0x60020010), propget, helpcontext(0x04bb0010)]
        HRESULT Rotation(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* prop);
        [id(0x60020010), propput, helpcontext(0x04bb0010)]
        HRESULT Rotation(
                        [in, lcid] long lcid, 
                        [in] VARIANT prop);
        [id(0x60020012), propget, helpcontext(0x04bb0012)]
        HRESULT DisplayBlanksAs(
                        [in, lcid] long lcid, 
                        [out, retval] XlDisplayBlanksAs* prop);
        [id(0x60020012), propput, helpcontext(0x04bb0012)]
        HRESULT DisplayBlanksAs(
                        [in, lcid] long lcid, 
                        [in] XlDisplayBlanksAs prop);
        [id(0x00000008), propget, helpcontext(0x04bb0008)]
        HRESULT ChartGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** prop);
        [id(0x00000044), helpcontext(0x04bb0044)]
        HRESULT SeriesCollection(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** prop);
        [id(0x0000006d), propget, hidden, helpcontext(0x04bb006d)]
        HRESULT SubType(
                        [in, lcid] long lcid, 
                        [out, retval] long* prop);
        [id(0x0000006d), propput, hidden, helpcontext(0x04bb006d)]
        HRESULT SubType(
                        [in, lcid] long lcid, 
                        [in] long prop);
        [id(0x0000006c), propget, hidden, helpcontext(0x04bb006c)]
        HRESULT Type(
                        [in, lcid] long lcid, 
                        [out, retval] long* prop);
        [id(0x0000006c), propput, hidden, helpcontext(0x04bb006c)]
        HRESULT Type(
                        [in, lcid] long lcid, 
                        [in] long prop);
        [id(0x0000004f), propget, hidden, helpcontext(0x04bb004f)]
        HRESULT Corners(
                        [in, lcid] long lcid, 
                        [out, retval] Corners** prop);
        [id(0x00000782), helpcontext(0x04bb0782)]
        HRESULT ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                        [in, optional] VARIANT LegendKey, 
                        [in, optional] VARIANT AutoText, 
                        [in, optional] VARIANT HasLeaderLines, 
                        [in, optional] VARIANT ShowSeriesName, 
                        [in, optional] VARIANT ShowCategoryName, 
                        [in, optional] VARIANT ShowValue, 
                        [in, optional] VARIANT ShowPercentage, 
                        [in, optional] VARIANT ShowBubbleSize, 
                        [in, optional] VARIANT Separator, 
                        [in, lcid] long lcid);
        [id(0x00000578), propget, helpcontext(0x04bb0578)]
        HRESULT ChartType([out, retval] XlChartType* prop);
        [id(0x00000578), propput, helpcontext(0x04bb0578)]
        HRESULT ChartType([in] XlChartType prop);
        [id(0x00000574), propget, helpcontext(0x04bb0574)]
        HRESULT HasDataTable([out, retval] VARIANT_BOOL* prop);
        [id(0x00000574), propput, helpcontext(0x04bb0574)]
        HRESULT HasDataTable([in] VARIANT_BOOL prop);
        [id(0x00000579), hidden, helpcontext(0x04bb0579)]
        HRESULT ApplyCustomType(
                        [in] XlChartType ChartType, 
                        [in, optional] VARIANT TypeName);
        [id(0x00000581), helpcontext(0x04bb0581)]
        HRESULT GetChartElement(
                        [in] long x, 
                        [in] long y, 
                        [out] long* ElementID, 
                        [out] long* Arg1, 
                        [out] long* Arg2);
        [id(0x00000585), helpcontext(0x04bb0585)]
        HRESULT SetSourceData(
                        [in] BSTR Source, 
                        [in, optional] VARIANT PlotBy);
        [id(0x000000ca), propget, helpcontext(0x04bb00ca)]
        HRESULT PlotBy([out, retval] XlRowCol* prop);
        [id(0x000000ca), propput, helpcontext(0x04bb00ca)]
        HRESULT PlotBy([in] XlRowCol prop);
        [id(0x00000035), propget, helpcontext(0x04bb0035)]
        HRESULT HasLegend(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x00000035), propput, helpcontext(0x04bb0035)]
        HRESULT HasLegend(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL prop);
        [id(0x00000054), propget, helpcontext(0x04bb0054)]
        HRESULT Legend(
                        [in, lcid] long lcid, 
                        [out, retval] Legend** prop);
        [id(0x60020035), helpcontext(0x04bb0035)]
        HRESULT Axes(
                        [in, optional] VARIANT Type, 
                        [in, optional, defaultvalue(1)] XlAxisGroup AxisGroup, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** prop);
        [id(0x60020036), propget, helpcontext(0x04bb0036)]
        HRESULT HasAxis(
                        [in, optional] VARIANT Index1, 
                        [in, optional] VARIANT Index2, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* prop);
        [id(0x60020036), propput, helpcontext(0x04bb0036)]
        HRESULT HasAxis(
                        [in, optional] VARIANT Index1, 
                        [in, optional] VARIANT Index2, 
                        [in, lcid] long lcid, 
                        [in] VARIANT prop);
        [id(0x60020038), propget, helpcontext(0x04bb0038)]
        HRESULT Walls(
                        [in, lcid] long lcid, 
                        [out, retval] Walls** prop);
        [id(0x60020039), propget, helpcontext(0x04bb0039)]
        HRESULT Floor(
                        [in, lcid] long lcid, 
                        [out, retval] Floor** prop);
        [id(0x6002003a), propget, helpcontext(0x04bb003a)]
        HRESULT PlotArea(
                        [in, lcid] long lcid, 
                        [out, retval] PlotArea** prop);
        [id(0x0000005c), propget, helpcontext(0x04bb005c)]
        HRESULT PlotVisibleOnly(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x0000005c), propput, helpcontext(0x04bb005c)]
        HRESULT PlotVisibleOnly(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL prop);
        [id(0x6002003d), propget, helpcontext(0x04bb003d)]
        HRESULT ChartArea(
                        [in, lcid] long lcid, 
                        [out, retval] ChartArea** prop);
        [id(0x6002003e), hidden, helpcontext(0x04bb003e)]
        HRESULT AutoFormat(
                        [in] long Gallery, 
                        [in, optional] VARIANT Format);
        [id(0x6002003f), propget, helpcontext(0x04bb003f)]
        HRESULT AutoScaling(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x6002003f), propput, helpcontext(0x04bb003f)]
        HRESULT AutoScaling(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL prop);
        [id(0x60020041), helpcontext(0x04bb0041)]
        HRESULT SetBackgroundPicture([in] BSTR FileName);
        [id(0x60020042), helpcontext(0x04bb0042)]
        HRESULT ChartWizard(
                        [in, optional] VARIANT Source, 
                        [in, optional] VARIANT Gallery, 
                        [in, optional] VARIANT Format, 
                        [in, optional] VARIANT PlotBy, 
                        [in, optional] VARIANT CategoryLabels, 
                        [in, optional] VARIANT SeriesLabels, 
                        [in, optional] VARIANT HasLegend, 
                        [in, optional] VARIANT Title, 
                        [in, optional] VARIANT CategoryTitle, 
                        [in, optional] VARIANT ValueTitle, 
                        [in, optional] VARIANT ExtraTitle, 
                        [in, lcid] long lcid);
        [id(0x60020043), helpcontext(0x04bb0043)]
        HRESULT CopyPicture(
                        [in, optional, defaultvalue(1)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [in, optional, defaultvalue(2)] XlPictureAppearance Size, 
                        [in, lcid] long lcid);
        [id(0x60020044), propget, helpcontext(0x04bb0044)]
        HRESULT DataTable([out, retval] DataTable** prop);
        [id(0x60020047), helpcontext(0x04bb0047)]
        HRESULT Paste(
                        [in, optional] VARIANT Type, 
                        [in, lcid] long lcid);
        [id(0x60020048), propget, helpcontext(0x04bb0048)]
        HRESULT BarShape([out, retval] XlBarShape* prop);
        [id(0x60020048), propput, helpcontext(0x04bb0048)]
        HRESULT BarShape([in] XlBarShape prop);
        [id(0x6002004a), helpcontext(0x04bb004a)]
        HRESULT Export(
                        [in] BSTR FileName, 
                        [in, optional] VARIANT FilterName, 
                        [in, optional] VARIANT Interactive, 
                        [out, retval] VARIANT_BOOL* prop);
        [id(0x6002004b), helpcontext(0x04bb004b)]
        HRESULT SetDefaultChart([in] VARIANT Name);
        [id(0x6002004c), helpcontext(0x04bb004c)]
        HRESULT ApplyChartTemplate([in] BSTR FileName);
        [id(0x6002004d), helpcontext(0x04bb004d)]
        HRESULT SaveChartTemplate([in] BSTR FileName);
        [id(0x00000949), propget, helpcontext(0x04bb0949)]
        HRESULT SideWall([out, retval] Walls** prop);
        [id(0x0000094a), propget, helpcontext(0x04bb094a)]
        HRESULT BackWall([out, retval] Walls** prop);
        [id(0x000009a1), propget, helpcontext(0x04bb09a1)]
        HRESULT ChartStyle([out, retval] VARIANT* prop);
        [id(0x000009a1), propput, helpcontext(0x04bb09a1)]
        HRESULT ChartStyle([in] VARIANT prop);
        [id(0x000009a2), helpcontext(0x04bb09a2)]
        HRESULT ClearToMatchStyle();
        [id(0x00000716), propget, helpcontext(0x04bb0716)]
        HRESULT PivotLayout([out, retval] IDispatch** prop);
        [id(0x00000717), propget, hidden, helpcontext(0x04bb0717)]
        HRESULT HasPivotFields([out, retval] VARIANT_BOOL* prop);
        [id(0x00000717), propput, hidden, helpcontext(0x04bb0717)]
        HRESULT HasPivotFields([in] VARIANT_BOOL prop);
        [id(0x60020057), propget, helpcontext(0x04bb0057)]
        HRESULT ShowDataLabelsOverMaximum([out, retval] VARIANT_BOOL* prop);
        [id(0x60020057), propput, helpcontext(0x04bb0057)]
        HRESULT ShowDataLabelsOverMaximum([in] VARIANT_BOOL prop);
        [id(0x000009a4), helpcontext(0x04bb09a4)]
        HRESULT ApplyLayout(
                        [in] long Layout, 
                        [in, optional] VARIANT ChartType);
        [id(0x6002005b), helpcontext(0x04bb005b)]
        HRESULT Refresh();
        [id(0x6002005c), helpcontext(0x04bb005c)]
        HRESULT SetElement([in] MsoChartElementType Element);
        [id(0x6002005d), propget, helpcontext(0x04bb005d)]
        HRESULT ChartData([out, retval] ChartData** prop);
        [id(0x6002005f), propget, helpcontext(0x04bb005f)]
        HRESULT Shapes([out, retval] IDispatch** prop);
        [id(0x00000094), propget, helpcontext(0x04bb0094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x04bb0095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000011), propget, hidden, helpcontext(0x04bb0011)]
        HRESULT Area3DGroup(
                        [in, lcid] long lcid, 
                        [out, retval] ChartGroup** prop);
        [id(0x00000009), hidden, helpcontext(0x04bb0009)]
        HRESULT AreaGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** prop);
        [id(0x00000012), propget, hidden, helpcontext(0x04bb0012)]
        HRESULT Bar3DGroup(
                        [in, lcid] long lcid, 
                        [out, retval] ChartGroup** prop);
        [id(0x0000000a), hidden, helpcontext(0x04bb000a)]
        HRESULT BarGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** prop);
        [id(0x00000013), propget, hidden, helpcontext(0x04bb0013)]
        HRESULT Column3DGroup(
                        [in, lcid] long lcid, 
                        [out, retval] ChartGroup** prop);
        [id(0x0000000b), hidden, helpcontext(0x04bb000b)]
        HRESULT ColumnGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** prop);
        [id(0x00000014), propget, hidden, helpcontext(0x04bb0014)]
        HRESULT Line3DGroup(
                        [in, lcid] long lcid, 
                        [out, retval] ChartGroup** prop);
        [id(0x0000000c), hidden, helpcontext(0x04bb000c)]
        HRESULT LineGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** prop);
        [id(0x00000015), propget, hidden, helpcontext(0x04bb0015)]
        HRESULT Pie3DGroup(
                        [in, lcid] long lcid, 
                        [out, retval] ChartGroup** prop);
        [id(0x0000000d), hidden, helpcontext(0x04bb000d)]
        HRESULT PieGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** prop);
        [id(0x0000000e), hidden, helpcontext(0x04bb000e)]
        HRESULT DoughnutGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** prop);
        [id(0x0000000f), hidden, helpcontext(0x04bb000f)]
        HRESULT RadarGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** prop);
        [id(0x00000016), propget, hidden, helpcontext(0x04bb0016)]
        HRESULT SurfaceGroup(
                        [in, lcid] long lcid, 
                        [out, retval] ChartGroup** prop);
        [id(0x00000010), hidden, helpcontext(0x04bb0010)]
        HRESULT XYGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** prop);
        [id(0x00000075), helpcontext(0x04bb0075)]
        HRESULT Delete(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* prop);
        [id(0x00000227), helpcontext(0x04bb0227)]
        HRESULT Copy(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [id(0x000000eb), helpcontext(0x04bb00eb)]
        HRESULT Select(
                        [in, optional] VARIANT Replace, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* prop);
        [id(0x00000b1c), propget, helpcontext(0x04bb0b1c)]
        HRESULT ShowReportFilterFieldButtons([out, retval] VARIANT_BOOL* prop);
        [id(0x00000b1c), propput, helpcontext(0x04bb0b1c)]
        HRESULT ShowReportFilterFieldButtons([in] VARIANT_BOOL prop);
        [id(0x00000b1d), propget, helpcontext(0x04bb0b1d)]
        HRESULT ShowLegendFieldButtons([out, retval] VARIANT_BOOL* prop);
        [id(0x00000b1d), propput, helpcontext(0x04bb0b1d)]
        HRESULT ShowLegendFieldButtons([in] VARIANT_BOOL prop);
        [id(0x00000b1e), propget, helpcontext(0x04bb0b1e)]
        HRESULT ShowAxisFieldButtons([out, retval] VARIANT_BOOL* prop);
        [id(0x00000b1e), propput, helpcontext(0x04bb0b1e)]
        HRESULT ShowAxisFieldButtons([in] VARIANT_BOOL prop);
        [id(0x00000b1f), propget, helpcontext(0x04bb0b1f)]
        HRESULT ShowValueFieldButtons([out, retval] VARIANT_BOOL* prop);
        [id(0x00000b1f), propput, helpcontext(0x04bb0b1f)]
        HRESULT ShowValueFieldButtons([in] VARIANT_BOOL prop);
        [id(0x00000b20), propget, helpcontext(0x04bb0b20)]
        HRESULT ShowAllFieldButtons([out, retval] VARIANT_BOOL* prop);
        [id(0x00000b20), propput, helpcontext(0x04bb0b20)]
        HRESULT ShowAllFieldButtons([in] VARIANT_BOOL prop);
        [id(0x000000ec), helpcontext(0x04bb00ec)]
        HRESULT FullSeriesCollection(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** prop);
        [id(0x000000ed), propget, helpcontext(0x04bb00ed)]
        HRESULT CategoryLabelLevel([out, retval] XlCategoryLabelLevel* prop);
        [id(0x000000ed), propput, helpcontext(0x04bb00ed)]
        HRESULT CategoryLabelLevel([in] XlCategoryLabelLevel prop);
        [id(0x000000ee), propget, helpcontext(0x04bb00ee)]
        HRESULT SeriesNameLevel([out, retval] XlSeriesNameLevel* prop);
        [id(0x000000ee), propput, helpcontext(0x04bb00ee)]
        HRESULT SeriesNameLevel([in] XlSeriesNameLevel prop);
        [id(0x000000ef), propget, hidden, helpcontext(0x04bb00ef)]
        HRESULT HasHiddenContent([out, retval] VARIANT_BOOL* prop);
        [id(0x000000f0), hidden, helpcontext(0x04bb00f0)]
        HRESULT DeleteHiddenContent();
        [id(0x000009a3), propget, helpcontext(0x04bb09a3)]
        HRESULT ChartColor([out, retval] VARIANT* prop);
        [id(0x000009a3), propput, helpcontext(0x04bb09a3)]
        HRESULT ChartColor([in] VARIANT prop);
        [id(0x000009a5), helpcontext(0x04bb09a5)]
        HRESULT ClearToMatchColorStyle();
    };

    [
      odl,
      uuid(AE6D45E5-981E-4547-8752-674BB55420A5),
      version(8.6),
      helpcontext(0x000005e5),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface Corners : IDispatch {
        [id(0x00000096), propget, hidden, helpcontext(0x05e50096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000006e), propget, hidden, helpcontext(0x05e5006e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000000eb), hidden, helpcontext(0x05e500eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x00000094), propget, helpcontext(0x05e50094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x05e50095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(B3A1E8C6-E1CE-4A46-8D12-E017157B03D7),
      version(8.6),
      helpcontext(0x000008c6),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Legend : IDispatch {
        [id(0x00000096), propget, helpcontext(0x08c60096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000006e), propget, helpcontext(0x08c6006e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000000eb), helpcontext(0x08c600eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x00000080), propget, hidden, helpcontext(0x08c60080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x00000075), helpcontext(0x08c60075)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x00000092), propget, hidden, helpcontext(0x08c60092)]
        HRESULT Font([out, retval] ChartFont** prop);
        [id(0x000000ad), helpcontext(0x08c600ad)]
        HRESULT LegendEntries(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** prop);
        [id(0x00000085), propget, helpcontext(0x08c60085)]
        HRESULT Position([out, retval] XlLegendPosition* prop);
        [id(0x00000085), propput, helpcontext(0x08c60085)]
        HRESULT Position([in] XlLegendPosition prop);
        [id(0x00000067), propget, helpcontext(0x08c60067)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), propput, helpcontext(0x08c60067)]
        HRESULT Shadow([in] VARIANT_BOOL prop);
        [id(0x0000006f), helpcontext(0x08c6006f)]
        HRESULT Clear([out, retval] VARIANT* prop);
        [id(0x0000007b), propget, helpcontext(0x08c6007b)]
        HRESULT Height([out, retval] double* prop);
        [id(0x0000007b), propput, helpcontext(0x08c6007b)]
        HRESULT Height([in] double prop);
        [id(0x00000081), propget, hidden, helpcontext(0x08c60081)]
        HRESULT Interior([out, retval] Interior** prop);
        [id(0x0000067f), propget, hidden, helpcontext(0x08c6067f)]
        HRESULT Fill([out, retval] ChartFillFormat** prop);
        [id(0x0000007f), propget, helpcontext(0x08c6007f)]
        HRESULT Left([out, retval] double* prop);
        [id(0x0000007f), propput, helpcontext(0x08c6007f)]
        HRESULT Left([in] double prop);
        [id(0x0000007e), propget, helpcontext(0x08c6007e)]
        HRESULT Top([out, retval] double* prop);
        [id(0x0000007e), propput, helpcontext(0x08c6007e)]
        HRESULT Top([in] double prop);
        [id(0x0000007a), propget, helpcontext(0x08c6007a)]
        HRESULT Width([out, retval] double* prop);
        [id(0x0000007a), propput, helpcontext(0x08c6007a)]
        HRESULT Width([in] double prop);
        [id(0x000005f5), propget, hidden, helpcontext(0x08c605f5)]
        HRESULT AutoScaleFont([out, retval] VARIANT* prop);
        [id(0x000005f5), propput, hidden, helpcontext(0x08c605f5)]
        HRESULT AutoScaleFont([in] VARIANT prop);
        [id(0x00000972), propget, helpcontext(0x08c60972)]
        HRESULT IncludeInLayout([out, retval] VARIANT_BOOL* prop);
        [id(0x00000972), propput, helpcontext(0x08c60972)]
        HRESULT IncludeInLayout([in] VARIANT_BOOL prop);
        [id(0x6002001a), propget, helpcontext(0x08c6001a)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x08c60094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x08c60095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(AB0D33A3-C9EA-485B-9443-4C1BB3656CEA),
      version(8.6),
      helpcontext(0x000003a3),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartBorder : IDispatch {
        [id(0x60020000), propget, helpcontext(0x03a30000)]
        HRESULT Color([out, retval] VARIANT* prop);
        [id(0x60020000), propput, helpcontext(0x03a30000)]
        HRESULT Color([in] VARIANT prop);
        [id(0x60020002), propget, helpcontext(0x03a30002)]
        HRESULT ColorIndex([out, retval] VARIANT* prop);
        [id(0x60020002), propput, helpcontext(0x03a30002)]
        HRESULT ColorIndex([in] VARIANT prop);
        [id(0x60020004), propget, helpcontext(0x03a30004)]
        HRESULT LineStyle([out, retval] VARIANT* prop);
        [id(0x60020004), propput, helpcontext(0x03a30004)]
        HRESULT LineStyle([in] VARIANT prop);
        [id(0x60020006), propget, helpcontext(0x03a30006)]
        HRESULT Weight([out, retval] VARIANT* prop);
        [id(0x60020006), propput, helpcontext(0x03a30006)]
        HRESULT Weight([in] VARIANT prop);
        [id(0x00000094), propget, helpcontext(0x03a30094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x03a30095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000096), propget, helpcontext(0x03a30096)]
        HRESULT Parent([out, retval] IDispatch** prop);
    };

    [
      odl,
      uuid(A2E94180-7564-4D97-806B-BBC0D0A1350C),
      version(8.6),
      helpcontext(0x00000180),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Walls : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0180006e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000000eb), helpcontext(0x018000eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x00000096), propget, helpcontext(0x01800096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000080), propget, hidden, helpcontext(0x01800080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x00000070), helpcontext(0x01800070)]
        HRESULT ClearFormats([out, retval] VARIANT* prop);
        [id(0x00000081), propget, hidden, helpcontext(0x01800081)]
        HRESULT Interior([out, retval] Interior** prop);
        [id(0x0000067f), propget, hidden, helpcontext(0x0180067f)]
        HRESULT Fill([out, retval] ChartFillFormat** prop);
        [id(0x000000a1), propget, helpcontext(0x018000a1)]
        HRESULT PictureType([out, retval] VARIANT* prop);
        [id(0x000000a1), propput, helpcontext(0x018000a1)]
        HRESULT PictureType([in] VARIANT prop);
        [id(0x000000d3), helpcontext(0x018000d3)]
        HRESULT Paste();
        [id(0x000000a2), propget, helpcontext(0x018000a2)]
        HRESULT PictureUnit([out, retval] VARIANT* prop);
        [id(0x000000a2), propput, helpcontext(0x018000a2)]
        HRESULT PictureUnit([in] VARIANT prop);
        [id(0x00000973), propget, helpcontext(0x01800973)]
        HRESULT Thickness([out, retval] long* prop);
        [id(0x00000973), propput, helpcontext(0x01800973)]
        HRESULT Thickness([in] long prop);
        [id(0x6002000e), propget, helpcontext(0x0180000e)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x01800094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x01800095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(7E64D2BE-2818-48CB-8F8A-CC7B61D9E860),
      version(8.6),
      helpcontext(0x000002be),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Floor : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x02be006e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000000eb), helpcontext(0x02be00eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x00000096), propget, helpcontext(0x02be0096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000080), propget, hidden, helpcontext(0x02be0080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x00000070), helpcontext(0x02be0070)]
        HRESULT ClearFormats([out, retval] VARIANT* prop);
        [id(0x00000081), propget, hidden, helpcontext(0x02be0081)]
        HRESULT Interior([out, retval] Interior** prop);
        [id(0x0000067f), propget, hidden, helpcontext(0x02be067f)]
        HRESULT Fill([out, retval] ChartFillFormat** prop);
        [id(0x000000a1), propget, helpcontext(0x02be00a1)]
        HRESULT PictureType([out, retval] VARIANT* prop);
        [id(0x000000a1), propput, helpcontext(0x02be00a1)]
        HRESULT PictureType([in] VARIANT prop);
        [id(0x000000d3), helpcontext(0x02be00d3)]
        HRESULT Paste();
        [id(0x00000973), propget, helpcontext(0x02be0973)]
        HRESULT Thickness([out, retval] long* prop);
        [id(0x00000973), propput, helpcontext(0x02be0973)]
        HRESULT Thickness([in] long prop);
        [id(0x6002000c), propget, helpcontext(0x02be000c)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x02be0094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x02be0095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(56AFD330-440C-4F4C-A39C-ED306D084D5F),
      version(8.6),
      helpcontext(0x00000330),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PlotArea : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0330006e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000000eb), helpcontext(0x033000eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x00000096), propget, helpcontext(0x03300096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000080), propget, hidden, helpcontext(0x03300080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x00000070), helpcontext(0x03300070)]
        HRESULT ClearFormats([out, retval] VARIANT* prop);
        [id(0x0000007b), propget, helpcontext(0x0330007b)]
        HRESULT Height([out, retval] double* prop);
        [id(0x0000007b), propput, helpcontext(0x0330007b)]
        HRESULT Height([in] double prop);
        [id(0x00000081), propget, hidden, helpcontext(0x03300081)]
        HRESULT Interior([out, retval] Interior** prop);
        [id(0x0000067f), propget, hidden, helpcontext(0x0330067f)]
        HRESULT Fill([out, retval] ChartFillFormat** prop);
        [id(0x0000007f), propget, helpcontext(0x0330007f)]
        HRESULT Left([out, retval] double* prop);
        [id(0x0000007f), propput, helpcontext(0x0330007f)]
        HRESULT Left([in] double prop);
        [id(0x0000007e), propget, helpcontext(0x0330007e)]
        HRESULT Top([out, retval] double* prop);
        [id(0x0000007e), propput, helpcontext(0x0330007e)]
        HRESULT Top([in] double prop);
        [id(0x0000007a), propget, helpcontext(0x0330007a)]
        HRESULT Width([out, retval] double* prop);
        [id(0x0000007a), propput, helpcontext(0x0330007a)]
        HRESULT Width([in] double prop);
        [id(0x00000683), propget, helpcontext(0x03300683)]
        HRESULT InsideLeft([out, retval] double* prop);
        [id(0x00000683), propput, helpcontext(0x03300683)]
        HRESULT InsideLeft([in] double prop);
        [id(0x00000684), propget, helpcontext(0x03300684)]
        HRESULT InsideTop([out, retval] double* prop);
        [id(0x00000684), propput, helpcontext(0x03300684)]
        HRESULT InsideTop([in] double prop);
        [id(0x00000685), propget, helpcontext(0x03300685)]
        HRESULT InsideWidth([out, retval] double* prop);
        [id(0x00000685), propput, helpcontext(0x03300685)]
        HRESULT InsideWidth([in] double prop);
        [id(0x00000686), propget, helpcontext(0x03300686)]
        HRESULT InsideHeight([out, retval] double* prop);
        [id(0x00000686), propput, helpcontext(0x03300686)]
        HRESULT InsideHeight([in] double prop);
        [id(0x00000687), propget, helpcontext(0x03300687)]
        HRESULT Position([out, retval] XlChartElementPosition* prop);
        [id(0x00000687), propput, helpcontext(0x03300687)]
        HRESULT Position([in] XlChartElementPosition prop);
        [id(0x60020019), propget, helpcontext(0x03300019)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x03300094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x03300095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(C75AD98A-74E9-49FE-8BF1-544839CC08A5),
      version(8.6),
      helpcontext(0x0000098a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartArea : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x098a006e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000000eb), helpcontext(0x098a00eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x00000096), propget, helpcontext(0x098a0096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000080), propget, hidden, helpcontext(0x098a0080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x0000006f), helpcontext(0x098a006f)]
        HRESULT Clear([out, retval] VARIANT* prop);
        [id(0x00000071), helpcontext(0x098a0071)]
        HRESULT ClearContents([out, retval] VARIANT* prop);
        [id(0x00000227), helpcontext(0x098a0227)]
        HRESULT Copy([out, retval] VARIANT* prop);
        [id(0x00000092), propget, hidden, helpcontext(0x098a0092)]
        HRESULT Font([out, retval] ChartFont** prop);
        [id(0x00000067), propget, helpcontext(0x098a0067)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), propput, helpcontext(0x098a0067)]
        HRESULT Shadow([in] VARIANT_BOOL prop);
        [id(0x00000070), helpcontext(0x098a0070)]
        HRESULT ClearFormats([out, retval] VARIANT* prop);
        [id(0x0000007b), propget, helpcontext(0x098a007b)]
        HRESULT Height([out, retval] double* prop);
        [id(0x0000007b), propput, helpcontext(0x098a007b)]
        HRESULT Height([in] double prop);
        [id(0x00000081), propget, hidden, helpcontext(0x098a0081)]
        HRESULT Interior([out, retval] Interior** prop);
        [id(0x0000067f), propget, hidden, helpcontext(0x098a067f)]
        HRESULT Fill([out, retval] ChartFillFormat** prop);
        [id(0x0000007f), propget, helpcontext(0x098a007f)]
        HRESULT Left([out, retval] double* prop);
        [id(0x0000007f), propput, helpcontext(0x098a007f)]
        HRESULT Left([in] double prop);
        [id(0x0000007e), propget, helpcontext(0x098a007e)]
        HRESULT Top([out, retval] double* prop);
        [id(0x0000007e), propput, helpcontext(0x098a007e)]
        HRESULT Top([in] double prop);
        [id(0x0000007a), propget, helpcontext(0x098a007a)]
        HRESULT Width([out, retval] double* prop);
        [id(0x0000007a), propput, helpcontext(0x098a007a)]
        HRESULT Width([in] double prop);
        [id(0x000005f5), propget, hidden, helpcontext(0x098a05f5)]
        HRESULT AutoScaleFont([out, retval] VARIANT* prop);
        [id(0x000005f5), propput, hidden, helpcontext(0x098a05f5)]
        HRESULT AutoScaleFont([in] VARIANT prop);
        [id(0x60020017), propget, helpcontext(0x098a0017)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x098a0094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x098a0095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(5D7F6C15-36CE-44CC-9692-5A1F8B8C906D),
      version(8.6),
      helpcontext(0x00000c15),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SeriesLines : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0c15006e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000000eb), helpcontext(0x0c1500eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x00000096), propget, helpcontext(0x0c150096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000080), propget, helpcontext(0x0c150080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x00000075), helpcontext(0x0c150075)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x60020005), propget, helpcontext(0x0c150005)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x0c150094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x0c150095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(36162C62-B59A-4278-AF3D-F2AC1EB999D9),
      version(8.6),
      helpcontext(0x00000c62),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LeaderLines : IDispatch {
        [id(0x000000eb), helpcontext(0x0c6200eb)]
        HRESULT Select();
        [id(0x00000080), propget, helpcontext(0x0c620080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x00000075), helpcontext(0x0c620075)]
        HRESULT Delete();
        [id(0x60020003), propget, helpcontext(0x0c620003)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x0c620094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x0c620095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000096), propget, helpcontext(0x0c620096)]
        HRESULT Parent([out, retval] IDispatch** prop);
    };

    [
      odl,
      uuid(FC9090AF-0DDB-4EC1-86E8-8751F2199F2C),
      version(8.6),
      helpcontext(0x000000af),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Gridlines : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x00af006e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000000eb), helpcontext(0x00af00eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x00000096), propget, helpcontext(0x00af0096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000080), propget, helpcontext(0x00af0080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x00000075), helpcontext(0x00af0075)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x60020005), propget, helpcontext(0x00af0005)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x00af0094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x00af0095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(86905AC9-33F3-4A88-96C8-B289B0390BCA),
      version(8.6),
      helpcontext(0x00000ac9),
      dual,
      nonextensible,
      oleautomation
    ]
    interface UpBars : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0ac9006e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000000eb), helpcontext(0x0ac900eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x00000096), propget, helpcontext(0x0ac90096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000080), propget, helpcontext(0x0ac90080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x00000075), helpcontext(0x0ac90075)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x00000081), propget, helpcontext(0x0ac90081)]
        HRESULT Interior([out, retval] Interior** prop);
        [id(0x0000067f), propget, helpcontext(0x0ac9067f)]
        HRESULT Fill([out, retval] ChartFillFormat** prop);
        [id(0x60020007), propget, helpcontext(0x0ac90007)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x0ac90094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x0ac90095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(84A6A663-AEF4-4FCD-83FD-9BB707F157CA),
      version(8.6),
      helpcontext(0x00000663),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DownBars : IDispatch {
        [id(0x0000006e), propget, helpcontext(0x0663006e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000000eb), helpcontext(0x066300eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x00000096), propget, helpcontext(0x06630096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000080), propget, hidden, helpcontext(0x06630080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x00000075), helpcontext(0x06630075)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x00000081), propget, hidden, helpcontext(0x06630081)]
        HRESULT Interior([out, retval] Interior** prop);
        [id(0x0000067f), propget, hidden, helpcontext(0x0663067f)]
        HRESULT Fill([out, retval] ChartFillFormat** prop);
        [id(0x60020007), propget, helpcontext(0x06630007)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x06630094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x06630095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(B184502B-587A-4C6A-8DC4-ECE4354883C6),
      version(8.6),
      helpcontext(0x0000002b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Interior : IDispatch {
        [id(0x60020000), propget, helpcontext(0x002b0000)]
        HRESULT Color([out, retval] VARIANT* prop);
        [id(0x60020000), propput, helpcontext(0x002b0000)]
        HRESULT Color([in] VARIANT prop);
        [id(0x60020002), propget, helpcontext(0x002b0002)]
        HRESULT ColorIndex([out, retval] VARIANT* prop);
        [id(0x60020002), propput, helpcontext(0x002b0002)]
        HRESULT ColorIndex([in] VARIANT prop);
        [id(0x60020004), propget, helpcontext(0x002b0004)]
        HRESULT InvertIfNegative([out, retval] VARIANT* prop);
        [id(0x60020004), propput, helpcontext(0x002b0004)]
        HRESULT InvertIfNegative([in] VARIANT prop);
        [id(0x60020006), propget, helpcontext(0x002b0006)]
        HRESULT Pattern([out, retval] VARIANT* prop);
        [id(0x60020006), propput, helpcontext(0x002b0006)]
        HRESULT Pattern([in] VARIANT prop);
        [id(0x60020008), propget, helpcontext(0x002b0008)]
        HRESULT PatternColor([out, retval] VARIANT* prop);
        [id(0x60020008), propput, helpcontext(0x002b0008)]
        HRESULT PatternColor([in] VARIANT prop);
        [id(0x6002000a), propget, helpcontext(0x002b000a)]
        HRESULT PatternColorIndex([out, retval] VARIANT* prop);
        [id(0x6002000a), propput, helpcontext(0x002b000a)]
        HRESULT PatternColorIndex([in] VARIANT prop);
        [id(0x00000094), propget, helpcontext(0x002b0094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x002b0095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000096), propget, helpcontext(0x002b0096)]
        HRESULT Parent([out, retval] IDispatch** prop);
    };

    [
      odl,
      uuid(F152D349-7D20-4C01-A42B-2D6DE4F3891C),
      version(8.6),
      helpcontext(0x00000349),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartFillFormat : IDispatch {
        [id(0x60020000), helpcontext(0x03490000)]
        HRESULT OneColorGradient(
                        [in] MsoGradientStyle Style, 
                        [in] long Variant, 
                        [in] single Degree);
        [id(0x60020001), helpcontext(0x03490001)]
        HRESULT TwoColorGradient(
                        [in] MsoGradientStyle Style, 
                        [in] long Variant);
        [id(0x60020002), helpcontext(0x03490002)]
        HRESULT PresetTextured([in] MsoPresetTexture PresetTexture);
        [id(0x60020003), helpcontext(0x03490003)]
        HRESULT Solid();
        [id(0x60020004), helpcontext(0x03490004)]
        HRESULT Patterned([in] MsoPatternType Pattern);
        [id(0x60020005), helpcontext(0x03490005)]
        HRESULT UserPicture(
                        [in, optional] VARIANT PictureFile, 
                        [in, optional] VARIANT PictureFormat, 
                        [in, optional] VARIANT PictureStackUnit, 
                        [in, optional] VARIANT PicturePlacement);
        [id(0x60020006), helpcontext(0x03490006)]
        HRESULT UserTextured([in] BSTR TextureFile);
        [id(0x60020007), helpcontext(0x03490007)]
        HRESULT PresetGradient(
                        [in] MsoGradientStyle Style, 
                        [in] long Variant, 
                        [in] MsoPresetGradientType PresetGradientType);
        [id(0x60020008), propget, helpcontext(0x03490008)]
        HRESULT BackColor([out, retval] ChartColorFormat** prop);
        [id(0x60020009), propget, helpcontext(0x03490009)]
        HRESULT ForeColor([out, retval] ChartColorFormat** prop);
        [id(0x6002000a), propget, helpcontext(0x0349000a)]
        HRESULT GradientColorType([out, retval] MsoGradientColorType* prop);
        [id(0x6002000b), propget, helpcontext(0x0349000b)]
        HRESULT GradientDegree([out, retval] single* prop);
        [id(0x6002000c), propget, helpcontext(0x0349000c)]
        HRESULT GradientStyle([out, retval] MsoGradientStyle* prop);
        [id(0x6002000d), propget, helpcontext(0x0349000d)]
        HRESULT GradientVariant([out, retval] long* prop);
        [id(0x6002000e), propget, helpcontext(0x0349000e)]
        HRESULT Pattern([out, retval] MsoPatternType* prop);
        [id(0x6002000f), propget, helpcontext(0x0349000f)]
        HRESULT PresetGradientType([out, retval] MsoPresetGradientType* prop);
        [id(0x60020010), propget, helpcontext(0x03490010)]
        HRESULT PresetTexture([out, retval] MsoPresetTexture* prop);
        [id(0x60020011), propget, helpcontext(0x03490011)]
        HRESULT TextureName([out, retval] BSTR* prop);
        [id(0x60020012), propget, helpcontext(0x03490012)]
        HRESULT TextureType([out, retval] MsoTextureType* prop);
        [id(0x60020013), propget, helpcontext(0x03490013)]
        HRESULT Type([out, retval] MsoFillType* prop);
        [id(0x60020014), propget, helpcontext(0x03490014)]
        HRESULT Visible([out, retval] MsoTriState* prop);
        [id(0x60020014), propput, helpcontext(0x03490014)]
        HRESULT Visible([in] MsoTriState prop);
        [id(0x00000094), propget, helpcontext(0x03490094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x03490095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000096), propget, helpcontext(0x03490096)]
        HRESULT Parent([out, retval] IDispatch** prop);
    };

    [
      odl,
      uuid(B6511068-70BF-4751-A741-55C1D41AD96F),
      version(8.6),
      helpcontext(0x00000068),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LegendEntries : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00680096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000076), propget, helpcontext(0x00680076)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x00680000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] LegendEntry** prop);
        [id(0xfffffffc), helpcontext(0x0068fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000094), propget, helpcontext(0x00680094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x00680095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x60020006), helpcontext(0x00680006)]
        HRESULT _Default(
                        [in] VARIANT Index, 
                        [out, retval] LegendEntry** prop);
    };

    [
      odl,
      uuid(CDB0FF41-E862-47BB-AE77-3FA7B1AE3189),
      version(8.6),
      helpcontext(0x00000f41),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartFont : IDispatch {
        [id(0x60020000), propget, helpcontext(0x0f410000)]
        HRESULT Background([out, retval] VARIANT* prop);
        [id(0x60020000), propput, helpcontext(0x0f410000)]
        HRESULT Background([in] VARIANT prop);
        [id(0x60020002), propget, helpcontext(0x0f410002)]
        HRESULT Bold([out, retval] VARIANT* prop);
        [id(0x60020002), propput, helpcontext(0x0f410002)]
        HRESULT Bold([in] VARIANT prop);
        [id(0x60020004), propget, helpcontext(0x0f410004)]
        HRESULT Color([out, retval] VARIANT* prop);
        [id(0x60020004), propput, helpcontext(0x0f410004)]
        HRESULT Color([in] VARIANT prop);
        [id(0x60020006), propget, helpcontext(0x0f410006)]
        HRESULT ColorIndex([out, retval] VARIANT* prop);
        [id(0x60020006), propput, helpcontext(0x0f410006)]
        HRESULT ColorIndex([in] VARIANT prop);
        [id(0x60020008), propget, helpcontext(0x0f410008)]
        HRESULT FontStyle([out, retval] VARIANT* prop);
        [id(0x60020008), propput, helpcontext(0x0f410008)]
        HRESULT FontStyle([in] VARIANT prop);
        [id(0x6002000a), propget, helpcontext(0x0f41000a)]
        HRESULT Italic([out, retval] VARIANT* prop);
        [id(0x6002000a), propput, helpcontext(0x0f41000a)]
        HRESULT Italic([in] VARIANT prop);
        [id(0x6002000c), propget, helpcontext(0x0f41000c)]
        HRESULT Name([out, retval] VARIANT* prop);
        [id(0x6002000c), propput, helpcontext(0x0f41000c)]
        HRESULT Name([in] VARIANT prop);
        [id(0x6002000e), propget, hidden, helpcontext(0x0f41000e)]
        HRESULT OutlineFont([out, retval] VARIANT* prop);
        [id(0x6002000e), propput, hidden, helpcontext(0x0f41000e)]
        HRESULT OutlineFont([in] VARIANT prop);
        [id(0x60020010), propget, hidden, helpcontext(0x0f410010)]
        HRESULT Shadow([out, retval] VARIANT* prop);
        [id(0x60020010), propput, hidden, helpcontext(0x0f410010)]
        HRESULT Shadow([in] VARIANT prop);
        [id(0x60020012), propget, helpcontext(0x0f410012)]
        HRESULT Size([out, retval] VARIANT* prop);
        [id(0x60020012), propput, helpcontext(0x0f410012)]
        HRESULT Size([in] VARIANT prop);
        [id(0x60020014), propget, helpcontext(0x0f410014)]
        HRESULT StrikeThrough([out, retval] VARIANT* prop);
        [id(0x60020014), propput, helpcontext(0x0f410014)]
        HRESULT StrikeThrough([in] VARIANT prop);
        [id(0x60020016), propget, helpcontext(0x0f410016)]
        HRESULT Subscript([out, retval] VARIANT* prop);
        [id(0x60020016), propput, helpcontext(0x0f410016)]
        HRESULT Subscript([in] VARIANT prop);
        [id(0x60020018), propget, helpcontext(0x0f410018)]
        HRESULT Superscript([out, retval] VARIANT* prop);
        [id(0x60020018), propput, helpcontext(0x0f410018)]
        HRESULT Superscript([in] VARIANT prop);
        [id(0x6002001a), propget, helpcontext(0x0f41001a)]
        HRESULT Underline([out, retval] VARIANT* prop);
        [id(0x6002001a), propput, helpcontext(0x0f41001a)]
        HRESULT Underline([in] VARIANT prop);
        [id(0x00000094), propget, helpcontext(0x0f410094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x0f410095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000096), propget, helpcontext(0x0f410096)]
        HRESULT Parent([out, retval] IDispatch** prop);
    };

    [
      odl,
      uuid(DD8F80B8-9B80-4E89-9BEC-F12DF35E43B3),
      version(8.6),
      helpcontext(0x000000b8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartColorFormat : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00b80096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000066e), propget, helpcontext(0x00b8066e)]
        HRESULT SchemeColor([out, retval] long* prop);
        [id(0x0000066e), propput, helpcontext(0x00b8066e)]
        HRESULT SchemeColor([in] long prop);
        [id(0x0000041f), propget, helpcontext(0x00b8041f)]
        HRESULT RGB([out, retval] long* prop);
        [id(0x60020005), propget, helpcontext(0x00b80005)]
        HRESULT _Default([out, retval] long* prop);
        [id(0x0000006c), propget, helpcontext(0x00b8006c)]
        HRESULT Type([out, retval] long* prop);
        [id(0x00000094), propget, helpcontext(0x00b80094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x00b80095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(C4A02049-024C-4273-8934-E48CC21479A9),
      version(8.6),
      helpcontext(0x00000049),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LegendEntry : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00490096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000075), helpcontext(0x00490075)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x00000092), propget, helpcontext(0x00490092)]
        HRESULT Font([out, retval] ChartFont** prop);
        [id(0x000001e6), propget, helpcontext(0x004901e6)]
        HRESULT Index([out, retval] long* prop);
        [id(0x000000ae), propget, helpcontext(0x004900ae)]
        HRESULT LegendKey([out, retval] LegendKey** prop);
        [id(0x000000eb), helpcontext(0x004900eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x000005f5), propget, hidden, helpcontext(0x004905f5)]
        HRESULT AutoScaleFont([out, retval] VARIANT* prop);
        [id(0x000005f5), propput, hidden, helpcontext(0x004905f5)]
        HRESULT AutoScaleFont([in] VARIANT prop);
        [id(0x0000007f), propget, helpcontext(0x0049007f)]
        HRESULT Left([out, retval] double* prop);
        [id(0x0000007e), propget, helpcontext(0x0049007e)]
        HRESULT Top([out, retval] double* prop);
        [id(0x0000007a), propget, helpcontext(0x0049007a)]
        HRESULT Width([out, retval] double* prop);
        [id(0x0000007b), propget, helpcontext(0x0049007b)]
        HRESULT Height([out, retval] double* prop);
        [id(0x6002000c), propget, helpcontext(0x0049000c)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x00490094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x00490095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(DF076FDE-8781-4051-A5BC-99F6B7DC04D4),
      version(8.6),
      helpcontext(0x00000fde),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LegendKey : IDispatch {
        [id(0x00000096), propget, helpcontext(0x0fde0096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000080), propget, hidden, helpcontext(0x0fde0080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x00000070), helpcontext(0x0fde0070)]
        HRESULT ClearFormats([out, retval] VARIANT* prop);
        [id(0x00000075), helpcontext(0x0fde0075)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x00000081), propget, hidden, helpcontext(0x0fde0081)]
        HRESULT Interior([out, retval] Interior** prop);
        [id(0x0000067f), propget, hidden, helpcontext(0x0fde067f)]
        HRESULT Fill([out, retval] ChartFillFormat** prop);
        [id(0x00000084), propget, helpcontext(0x0fde0084)]
        HRESULT InvertIfNegative([out, retval] VARIANT_BOOL* prop);
        [id(0x00000084), propput, helpcontext(0x0fde0084)]
        HRESULT InvertIfNegative([in] VARIANT_BOOL prop);
        [id(0x00000049), propget, helpcontext(0x0fde0049)]
        HRESULT MarkerBackgroundColor([out, retval] long* prop);
        [id(0x00000049), propput, helpcontext(0x0fde0049)]
        HRESULT MarkerBackgroundColor([in] long prop);
        [id(0x0000004a), propget, helpcontext(0x0fde004a)]
        HRESULT MarkerBackgroundColorIndex([out, retval] XlColorIndex* prop);
        [id(0x0000004a), propput, helpcontext(0x0fde004a)]
        HRESULT MarkerBackgroundColorIndex([in] XlColorIndex prop);
        [id(0x0000004b), propget, helpcontext(0x0fde004b)]
        HRESULT MarkerForegroundColor([out, retval] long* prop);
        [id(0x0000004b), propput, helpcontext(0x0fde004b)]
        HRESULT MarkerForegroundColor([in] long prop);
        [id(0x0000004c), propget, helpcontext(0x0fde004c)]
        HRESULT MarkerForegroundColorIndex([out, retval] XlColorIndex* prop);
        [id(0x0000004c), propput, helpcontext(0x0fde004c)]
        HRESULT MarkerForegroundColorIndex([in] XlColorIndex prop);
        [id(0x000000e7), propget, helpcontext(0x0fde00e7)]
        HRESULT MarkerSize([out, retval] long* prop);
        [id(0x000000e7), propput, helpcontext(0x0fde00e7)]
        HRESULT MarkerSize([in] long prop);
        [id(0x00000048), propget, helpcontext(0x0fde0048)]
        HRESULT MarkerStyle([out, retval] XlMarkerStyle* prop);
        [id(0x00000048), propput, helpcontext(0x0fde0048)]
        HRESULT MarkerStyle([in] XlMarkerStyle prop);
        [id(0x000000a1), propget, helpcontext(0x0fde00a1)]
        HRESULT PictureType([out, retval] long* prop);
        [id(0x000000a1), propput, helpcontext(0x0fde00a1)]
        HRESULT PictureType([in] long prop);
        [id(0x000000a2), propget, hidden, helpcontext(0x0fde00a2)]
        HRESULT PictureUnit([out, retval] double* prop);
        [id(0x000000a2), propput, hidden, helpcontext(0x0fde00a2)]
        HRESULT PictureUnit([in] double prop);
        [id(0x000000eb), hidden, helpcontext(0x0fde00eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x000000a3), propget, helpcontext(0x0fde00a3)]
        HRESULT Smooth([out, retval] VARIANT_BOOL* prop);
        [id(0x000000a3), propput, helpcontext(0x0fde00a3)]
        HRESULT Smooth([in] VARIANT_BOOL prop);
        [id(0x0000007f), propget, helpcontext(0x0fde007f)]
        HRESULT Left([out, retval] double* prop);
        [id(0x0000007e), propget, helpcontext(0x0fde007e)]
        HRESULT Top([out, retval] double* prop);
        [id(0x0000007a), propget, helpcontext(0x0fde007a)]
        HRESULT Width([out, retval] double* prop);
        [id(0x0000007b), propget, helpcontext(0x0fde007b)]
        HRESULT Height([out, retval] double* prop);
        [id(0x00000067), propget, helpcontext(0x0fde0067)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), propput, helpcontext(0x0fde0067)]
        HRESULT Shadow([in] VARIANT_BOOL prop);
        [id(0x60020021), propget, helpcontext(0x0fde0021)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x0fde0094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x0fde0095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000a59), propget, helpcontext(0x0fde0a59)]
        HRESULT PictureUnit2([out, retval] double* prop);
        [id(0x00000a59), propput, helpcontext(0x0fde0a59)]
        HRESULT PictureUnit2([in] double prop);
    };

    [
      odl,
      uuid(8FEB78F7-35C6-4871-918C-193C3CDD886D),
      version(8.6),
      helpcontext(0x000008f7),
      dual,
      nonextensible,
      oleautomation
    ]
    interface SeriesCollection : IDispatch {
        [id(0x00000096), propget, helpcontext(0x08f70096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000000b5), helpcontext(0x08f700b5)]
        HRESULT Add(
                        [in] VARIANT Source, 
                        [in, optional, defaultvalue(2)] XlRowCol Rowcol, 
                        [in, optional] VARIANT SeriesLabels, 
                        [in, optional] VARIANT CategoryLabels, 
                        [in, optional] VARIANT Replace, 
                        [out, retval] Series** prop);
        [id(0x00000076), propget, helpcontext(0x08f70076)]
        HRESULT Count([out, retval] long* prop);
        [id(0x000000e3), helpcontext(0x08f700e3)]
        HRESULT Extend(
                        [in] VARIANT Source, 
                        [in, optional] VARIANT Rowcol, 
                        [in, optional] VARIANT CategoryLabels, 
                        [out, retval] VARIANT* prop);
        [id(00000000), helpcontext(0x08f70000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] Series** prop);
        [id(0xfffffffc), helpcontext(0x08f7fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x0000045d), helpcontext(0x08f7045d)]
        HRESULT NewSeries([out, retval] Series** prop);
        [id(0x00000094), propget, helpcontext(0x08f70094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x08f70095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x6002000a), helpcontext(0x08f7000a)]
        HRESULT _Default(
                        [in] VARIANT Index, 
                        [out, retval] Series** prop);
    };

    [
      odl,
      uuid(40810760-068A-4486-BEC9-8EA58C7029F5),
      version(8.6),
      helpcontext(0x00000760),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Series : IDispatch {
        [id(0x00000096), propget, helpcontext(0x07600096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000002f), propget, helpcontext(0x0760002f)]
        HRESULT AxisGroup([out, retval] XlAxisGroup* prop);
        [id(0x0000002f), propput, helpcontext(0x0760002f)]
        HRESULT AxisGroup([in] XlAxisGroup prop);
        [id(0x00000080), propget, helpcontext(0x07600080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x00000070), helpcontext(0x07600070)]
        HRESULT ClearFormats([out, retval] VARIANT* prop);
        [id(0x00000227), helpcontext(0x07600227)]
        HRESULT Copy([out, retval] VARIANT* prop);
        [id(0x0000009d), helpcontext(0x0760009d)]
        HRESULT DataLabels(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** prop);
        [id(0x00000075), helpcontext(0x07600075)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x00000098), helpcontext(0x07600098)]
        HRESULT ErrorBar(
                        [in] XlErrorBarDirection Direction, 
                        [in] XlErrorBarInclude Include, 
                        [in] XlErrorBarType Type, 
                        [in, optional] VARIANT Amount, 
                        [in, optional] VARIANT MinusValues, 
                        [out, retval] VARIANT* prop);
        [id(0x0000009f), propget, helpcontext(0x0760009f)]
        HRESULT ErrorBars([out, retval] ErrorBars** prop);
        [id(0x000000b6), propget, helpcontext(0x076000b6)]
        HRESULT Explosion([out, retval] long* prop);
        [id(0x000000b6), propput, helpcontext(0x076000b6)]
        HRESULT Explosion([in] long prop);
        [id(0x00000105), propget, helpcontext(0x07600105)]
        HRESULT Formula([out, retval] BSTR* prop);
        [id(0x00000105), propput, helpcontext(0x07600105)]
        HRESULT Formula([in] BSTR prop);
        [id(0x00000107), propget, helpcontext(0x07600107)]
        HRESULT FormulaLocal([out, retval] BSTR* prop);
        [id(0x00000107), propput, helpcontext(0x07600107)]
        HRESULT FormulaLocal([in] BSTR prop);
        [id(0x00000108), propget, helpcontext(0x07600108)]
        HRESULT FormulaR1C1([out, retval] BSTR* prop);
        [id(0x00000108), propput, helpcontext(0x07600108)]
        HRESULT FormulaR1C1([in] BSTR prop);
        [id(0x00000109), propget, helpcontext(0x07600109)]
        HRESULT FormulaR1C1Local([out, retval] BSTR* prop);
        [id(0x00000109), propput, helpcontext(0x07600109)]
        HRESULT FormulaR1C1Local([in] BSTR prop);
        [id(0x0000004e), propget, helpcontext(0x0760004e)]
        HRESULT HasDataLabels([out, retval] VARIANT_BOOL* prop);
        [id(0x0000004e), propput, helpcontext(0x0760004e)]
        HRESULT HasDataLabels([in] VARIANT_BOOL prop);
        [id(0x000000a0), propget, helpcontext(0x076000a0)]
        HRESULT HasErrorBars([out, retval] VARIANT_BOOL* prop);
        [id(0x000000a0), propput, helpcontext(0x076000a0)]
        HRESULT HasErrorBars([in] VARIANT_BOOL prop);
        [id(0x00000081), propget, hidden, helpcontext(0x07600081)]
        HRESULT Interior([out, retval] Interior** prop);
        [id(0x0000067f), propget, hidden, helpcontext(0x0760067f)]
        HRESULT Fill([out, retval] ChartFillFormat** prop);
        [id(0x00000084), propget, helpcontext(0x07600084)]
        HRESULT InvertIfNegative([out, retval] VARIANT_BOOL* prop);
        [id(0x00000084), propput, helpcontext(0x07600084)]
        HRESULT InvertIfNegative([in] VARIANT_BOOL prop);
        [id(0x00000049), propget, helpcontext(0x07600049)]
        HRESULT MarkerBackgroundColor([out, retval] long* prop);
        [id(0x00000049), propput, helpcontext(0x07600049)]
        HRESULT MarkerBackgroundColor([in] long prop);
        [id(0x0000004a), propget, helpcontext(0x0760004a)]
        HRESULT MarkerBackgroundColorIndex([out, retval] XlColorIndex* prop);
        [id(0x0000004a), propput, helpcontext(0x0760004a)]
        HRESULT MarkerBackgroundColorIndex([in] XlColorIndex prop);
        [id(0x0000004b), propget, helpcontext(0x0760004b)]
        HRESULT MarkerForegroundColor([out, retval] long* prop);
        [id(0x0000004b), propput, helpcontext(0x0760004b)]
        HRESULT MarkerForegroundColor([in] long prop);
        [id(0x0000004c), propget, helpcontext(0x0760004c)]
        HRESULT MarkerForegroundColorIndex([out, retval] XlColorIndex* prop);
        [id(0x0000004c), propput, helpcontext(0x0760004c)]
        HRESULT MarkerForegroundColorIndex([in] XlColorIndex prop);
        [id(0x000000e7), propget, helpcontext(0x076000e7)]
        HRESULT MarkerSize([out, retval] long* prop);
        [id(0x000000e7), propput, helpcontext(0x076000e7)]
        HRESULT MarkerSize([in] long prop);
        [id(0x00000048), propget, helpcontext(0x07600048)]
        HRESULT MarkerStyle([out, retval] XlMarkerStyle* prop);
        [id(0x00000048), propput, helpcontext(0x07600048)]
        HRESULT MarkerStyle([in] XlMarkerStyle prop);
        [id(0x0000006e), propget, helpcontext(0x0760006e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x0000006e), propput, helpcontext(0x0760006e)]
        HRESULT Name([in] BSTR prop);
        [id(0x000000d3), helpcontext(0x076000d3)]
        HRESULT Paste([out, retval] VARIANT* prop);
        [id(0x000000a1), propget, helpcontext(0x076000a1)]
        HRESULT PictureType([out, retval] XlChartPictureType* prop);
        [id(0x000000a1), propput, helpcontext(0x076000a1)]
        HRESULT PictureType([in] XlChartPictureType prop);
        [id(0x000000a2), propget, hidden, helpcontext(0x076000a2)]
        HRESULT PictureUnit([out, retval] double* prop);
        [id(0x000000a2), propput, hidden, helpcontext(0x076000a2)]
        HRESULT PictureUnit([in] double prop);
        [id(0x000000e4), propget, helpcontext(0x076000e4)]
        HRESULT PlotOrder([out, retval] long* prop);
        [id(0x000000e4), propput, helpcontext(0x076000e4)]
        HRESULT PlotOrder([in] long prop);
        [id(0x00000046), helpcontext(0x07600046)]
        HRESULT Points(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** prop);
        [id(0x000000eb), helpcontext(0x076000eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x000000a3), propget, helpcontext(0x076000a3)]
        HRESULT Smooth([out, retval] VARIANT_BOOL* prop);
        [id(0x000000a3), propput, helpcontext(0x076000a3)]
        HRESULT Smooth([in] VARIANT_BOOL prop);
        [id(0x0000009a), helpcontext(0x0760009a)]
        HRESULT Trendlines(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** prop);
        [id(0x0000006c), propget, helpcontext(0x0760006c)]
        HRESULT Type([out, retval] long* prop);
        [id(0x0000006c), propput, helpcontext(0x0760006c)]
        HRESULT Type([in] long prop);
        [id(0x00000578), propget, helpcontext(0x07600578)]
        HRESULT ChartType([out, retval] XlChartType* prop);
        [id(0x00000578), propput, helpcontext(0x07600578)]
        HRESULT ChartType([in] XlChartType prop);
        [id(0x00000579), hidden, helpcontext(0x07600579)]
        HRESULT ApplyCustomType([in] XlChartType ChartType);
        [id(0x000000a4), propget, helpcontext(0x076000a4)]
        HRESULT Values([out, retval] VARIANT* prop);
        [id(0x000000a4), propput, helpcontext(0x076000a4)]
        HRESULT Values([in] VARIANT prop);
        [id(0x00000457), propget, helpcontext(0x07600457)]
        HRESULT XValues([out, retval] VARIANT* prop);
        [id(0x00000457), propput, helpcontext(0x07600457)]
        HRESULT XValues([in] VARIANT prop);
        [id(0x00000680), propget, helpcontext(0x07600680)]
        HRESULT BubbleSizes([out, retval] VARIANT* prop);
        [id(0x00000680), propput, helpcontext(0x07600680)]
        HRESULT BubbleSizes([in] VARIANT prop);
        [id(0x0000057b), propget, helpcontext(0x0760057b)]
        HRESULT BarShape([out, retval] XlBarShape* prop);
        [id(0x0000057b), propput, helpcontext(0x0760057b)]
        HRESULT BarShape([in] XlBarShape prop);
        [id(0x0000067b), propget, helpcontext(0x0760067b)]
        HRESULT ApplyPictToSides([out, retval] VARIANT_BOOL* prop);
        [id(0x0000067b), propput, helpcontext(0x0760067b)]
        HRESULT ApplyPictToSides([in] VARIANT_BOOL prop);
        [id(0x0000067c), propget, helpcontext(0x0760067c)]
        HRESULT ApplyPictToFront([out, retval] VARIANT_BOOL* prop);
        [id(0x0000067c), propput, helpcontext(0x0760067c)]
        HRESULT ApplyPictToFront([in] VARIANT_BOOL prop);
        [id(0x0000067d), propget, helpcontext(0x0760067d)]
        HRESULT ApplyPictToEnd([out, retval] VARIANT_BOOL* prop);
        [id(0x0000067d), propput, helpcontext(0x0760067d)]
        HRESULT ApplyPictToEnd([in] VARIANT_BOOL prop);
        [id(0x00000681), propget, helpcontext(0x07600681)]
        HRESULT Has3DEffect([out, retval] VARIANT_BOOL* prop);
        [id(0x00000681), propput, helpcontext(0x07600681)]
        HRESULT Has3DEffect([in] VARIANT_BOOL prop);
        [id(0x00000067), propget, helpcontext(0x07600067)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), propput, helpcontext(0x07600067)]
        HRESULT Shadow([in] VARIANT_BOOL prop);
        [id(0x00000572), propget, helpcontext(0x07600572)]
        HRESULT HasLeaderLines([out, retval] VARIANT_BOOL* prop);
        [id(0x00000572), propput, helpcontext(0x07600572)]
        HRESULT HasLeaderLines([in] VARIANT_BOOL prop);
        [id(0x00000682), propget, helpcontext(0x07600682)]
        HRESULT LeaderLines([out, retval] LeaderLines** prop);
        [id(0x00000782), helpcontext(0x07600782)]
        HRESULT ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                        [in, optional] VARIANT LegendKey, 
                        [in, optional] VARIANT AutoText, 
                        [in, optional] VARIANT HasLeaderLines, 
                        [in, optional] VARIANT ShowSeriesName, 
                        [in, optional] VARIANT ShowCategoryName, 
                        [in, optional] VARIANT ShowValue, 
                        [in, optional] VARIANT ShowPercentage, 
                        [in, optional] VARIANT ShowBubbleSize, 
                        [in, optional] VARIANT Separator, 
                        [out, retval] VARIANT* prop);
        [id(0x60020052), propget, helpcontext(0x07600052)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x07600094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x07600095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000a59), propget, helpcontext(0x07600a59)]
        HRESULT PictureUnit2([out, retval] double* prop);
        [id(0x00000a59), propput, helpcontext(0x07600a59)]
        HRESULT PictureUnit2([in] double prop);
        [id(0x00000784), propget, helpcontext(0x07600784)]
        HRESULT PlotColorIndex([out, retval] long* prop);
        [id(0x00000b44), propget, helpcontext(0x07600b44)]
        HRESULT InvertColor([out, retval] long* prop);
        [id(0x00000b44), propput, helpcontext(0x07600b44)]
        HRESULT InvertColor([in] long prop);
        [id(0x00000b45), propget, helpcontext(0x07600b45)]
        HRESULT InvertColorIndex([out, retval] XlColorIndex* prop);
        [id(0x00000b45), propput, helpcontext(0x07600b45)]
        HRESULT InvertColorIndex([in] XlColorIndex prop);
        [id(0x00000b47), propget, helpcontext(0x07600b47)]
        HRESULT IsFiltered([out, retval] VARIANT_BOOL* prop);
        [id(0x00000b47), propput, helpcontext(0x07600b47)]
        HRESULT IsFiltered([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(194F8476-B79D-4572-A609-294207DE77C1),
      version(8.6),
      helpcontext(0x00000476),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ErrorBars : IDispatch {
        [id(0x00000096), propget, helpcontext(0x04760096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000006e), propget, helpcontext(0x0476006e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000000eb), helpcontext(0x047600eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x00000080), propget, helpcontext(0x04760080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x00000075), helpcontext(0x04760075)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x00000070), helpcontext(0x04760070)]
        HRESULT ClearFormats([out, retval] VARIANT* prop);
        [id(0x00000464), propget, helpcontext(0x04760464)]
        HRESULT EndStyle([out, retval] XlEndStyleCap* prop);
        [id(0x00000464), propput, helpcontext(0x04760464)]
        HRESULT EndStyle([in] XlEndStyleCap prop);
        [id(0x60020008), propget, helpcontext(0x04760008)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x04760094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x04760095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(91C46192-3124-4346-A815-10B8873F5A06),
      version(8.6),
      helpcontext(0x00000192),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Trendline : IDispatch {
        [id(0x00000096), propget, helpcontext(0x01920096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000000b9), propget, hidden, helpcontext(0x019200b9)]
        HRESULT Backward([out, retval] double* prop);
        [id(0x000000b9), propput, hidden, helpcontext(0x019200b9)]
        HRESULT Backward([in] double prop);
        [id(0x00000080), propget, helpcontext(0x01920080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x00000070), helpcontext(0x01920070)]
        HRESULT ClearFormats([out, retval] VARIANT* prop);
        [id(0x0000009e), propget, helpcontext(0x0192009e)]
        HRESULT DataLabel([out, retval] DataLabel** prop);
        [id(0x00000075), helpcontext(0x01920075)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x000000be), propget, helpcontext(0x019200be)]
        HRESULT DisplayEquation([out, retval] VARIANT_BOOL* prop);
        [id(0x000000be), propput, helpcontext(0x019200be)]
        HRESULT DisplayEquation([in] VARIANT_BOOL prop);
        [id(0x000000bd), propget, helpcontext(0x019200bd)]
        HRESULT DisplayRSquared([out, retval] VARIANT_BOOL* prop);
        [id(0x000000bd), propput, helpcontext(0x019200bd)]
        HRESULT DisplayRSquared([in] VARIANT_BOOL prop);
        [id(0x000000bf), propget, hidden, helpcontext(0x019200bf)]
        HRESULT Forward([out, retval] double* prop);
        [id(0x000000bf), propput, hidden, helpcontext(0x019200bf)]
        HRESULT Forward([in] double prop);
        [id(0x000001e6), propget, helpcontext(0x019201e6)]
        HRESULT Index([out, retval] long* prop);
        [id(0x000000ba), propget, helpcontext(0x019200ba)]
        HRESULT Intercept([out, retval] double* prop);
        [id(0x000000ba), propput, helpcontext(0x019200ba)]
        HRESULT Intercept([in] double prop);
        [id(0x000000bb), propget, helpcontext(0x019200bb)]
        HRESULT InterceptIsAuto([out, retval] VARIANT_BOOL* prop);
        [id(0x000000bb), propput, helpcontext(0x019200bb)]
        HRESULT InterceptIsAuto([in] VARIANT_BOOL prop);
        [id(0x0000006e), propget, helpcontext(0x0192006e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x0000006e), propput, helpcontext(0x0192006e)]
        HRESULT Name([in] BSTR prop);
        [id(0x000000bc), propget, helpcontext(0x019200bc)]
        HRESULT NameIsAuto([out, retval] VARIANT_BOOL* prop);
        [id(0x000000bc), propput, helpcontext(0x019200bc)]
        HRESULT NameIsAuto([in] VARIANT_BOOL prop);
        [id(0x000000c0), propget, helpcontext(0x019200c0)]
        HRESULT Order([out, retval] long* prop);
        [id(0x000000c0), propput, helpcontext(0x019200c0)]
        HRESULT Order([in] long prop);
        [id(0x000000b8), propget, helpcontext(0x019200b8)]
        HRESULT Period([out, retval] long* prop);
        [id(0x000000b8), propput, helpcontext(0x019200b8)]
        HRESULT Period([in] long prop);
        [id(0x000000eb), helpcontext(0x019200eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x0000006c), propget, helpcontext(0x0192006c)]
        HRESULT Type([out, retval] XlTrendlineType* prop);
        [id(0x0000006c), propput, helpcontext(0x0192006c)]
        HRESULT Type([in] XlTrendlineType prop);
        [id(0x6002001d), propget, helpcontext(0x0192001d)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x01920094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x01920095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000a5a), propget, helpcontext(0x01920a5a)]
        HRESULT Backward2([out, retval] double* prop);
        [id(0x00000a5a), propput, helpcontext(0x01920a5a)]
        HRESULT Backward2([in] double prop);
        [id(0x00000a5b), propget, helpcontext(0x01920a5b)]
        HRESULT Forward2([out, retval] double* prop);
        [id(0x00000a5b), propput, helpcontext(0x01920a5b)]
        HRESULT Forward2([in] double prop);
    };

    [
      odl,
      uuid(54B7061A-D56C-40E5-B85B-58146446C782),
      version(8.6),
      helpcontext(0x0000061a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Trendlines : IDispatch {
        [id(0x00000096), propget, helpcontext(0x061a0096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x000000b5), helpcontext(0x061a00b5)]
        HRESULT Add(
                        [in, optional, defaultvalue(-4132)] XlTrendlineType Type, 
                        [in, optional] VARIANT Order, 
                        [in, optional] VARIANT Period, 
                        [in, optional] VARIANT Forward, 
                        [in, optional] VARIANT Backward, 
                        [in, optional] VARIANT Intercept, 
                        [in, optional] VARIANT DisplayEquation, 
                        [in, optional] VARIANT DisplayRSquared, 
                        [in, optional] VARIANT Name, 
                        [out, retval] Trendline** prop);
        [id(0x00000076), propget, helpcontext(0x061a0076)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x061a0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in, optional] VARIANT Index, 
                        [out, retval] Trendline** prop);
        [id(0xfffffffc), helpcontext(0x061afffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000094), propget, helpcontext(0x061a0094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x061a0095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x60020007), helpcontext(0x061a0007)]
        HRESULT _Default(
                        [in, optional] VARIANT Index, 
                        [out, retval] Trendline** prop);
    };

    [
      odl,
      uuid(D8252C5E-EB9F-4D74-AA72-C178B128FAC4),
      version(8.6),
      helpcontext(0x00000c5e),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DataLabels : IDispatch {
        [id(0x00000096), propget, helpcontext(0x0c5e0096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000006e), propget, helpcontext(0x0c5e006e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000000eb), helpcontext(0x0c5e00eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x00000080), propget, hidden, helpcontext(0x0c5e0080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x00000075), helpcontext(0x0c5e0075)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x00000081), propget, hidden, helpcontext(0x0c5e0081)]
        HRESULT Interior([out, retval] Interior** prop);
        [id(0x0000067f), propget, hidden, helpcontext(0x0c5e067f)]
        HRESULT Fill([out, retval] ChartFillFormat** prop);
        [id(0x00000092), propget, hidden, helpcontext(0x0c5e0092)]
        HRESULT Font([out, retval] ChartFont** prop);
        [id(0x00000088), propget, helpcontext(0x0c5e0088)]
        HRESULT HorizontalAlignment([out, retval] VARIANT* prop);
        [id(0x00000088), propput, helpcontext(0x0c5e0088)]
        HRESULT HorizontalAlignment([in] VARIANT prop);
        [id(0x00000086), propget, helpcontext(0x0c5e0086)]
        HRESULT Orientation([out, retval] VARIANT* prop);
        [id(0x00000086), propput, helpcontext(0x0c5e0086)]
        HRESULT Orientation([in] VARIANT prop);
        [id(0x00000067), propget, helpcontext(0x0c5e0067)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), propput, helpcontext(0x0c5e0067)]
        HRESULT Shadow([in] VARIANT_BOOL prop);
        [id(0x00000089), propget, helpcontext(0x0c5e0089)]
        HRESULT VerticalAlignment([out, retval] VARIANT* prop);
        [id(0x00000089), propput, helpcontext(0x0c5e0089)]
        HRESULT VerticalAlignment([in] VARIANT prop);
        [id(0x000003cf), propget, helpcontext(0x0c5e03cf)]
        HRESULT ReadingOrder([out, retval] long* prop);
        [id(0x000003cf), propput, helpcontext(0x0c5e03cf)]
        HRESULT ReadingOrder([in] long prop);
        [id(0x000005f5), propget, hidden, helpcontext(0x0c5e05f5)]
        HRESULT AutoScaleFont([out, retval] VARIANT* prop);
        [id(0x000005f5), propput, hidden, helpcontext(0x0c5e05f5)]
        HRESULT AutoScaleFont([in] VARIANT prop);
        [id(0x00000087), propget, helpcontext(0x0c5e0087)]
        HRESULT AutoText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000087), propput, helpcontext(0x0c5e0087)]
        HRESULT AutoText([in] VARIANT_BOOL prop);
        [id(0x000000c1), propget, helpcontext(0x0c5e00c1)]
        HRESULT NumberFormat([out, retval] BSTR* prop);
        [id(0x000000c1), propput, helpcontext(0x0c5e00c1)]
        HRESULT NumberFormat([in] BSTR prop);
        [id(0x000000c2), propget, helpcontext(0x0c5e00c2)]
        HRESULT NumberFormatLinked([out, retval] VARIANT_BOOL* prop);
        [id(0x000000c2), propput, helpcontext(0x0c5e00c2)]
        HRESULT NumberFormatLinked([in] VARIANT_BOOL prop);
        [id(0x00000449), propget, helpcontext(0x0c5e0449)]
        HRESULT NumberFormatLocal([out, retval] VARIANT* prop);
        [id(0x00000449), propput, helpcontext(0x0c5e0449)]
        HRESULT NumberFormatLocal([in] VARIANT prop);
        [id(0x000000ab), propget, helpcontext(0x0c5e00ab)]
        HRESULT ShowLegendKey([out, retval] VARIANT_BOOL* prop);
        [id(0x000000ab), propput, helpcontext(0x0c5e00ab)]
        HRESULT ShowLegendKey([in] VARIANT_BOOL prop);
        [id(0x0000006c), propget, hidden, helpcontext(0x0c5e006c)]
        HRESULT Type([out, retval] VARIANT* prop);
        [id(0x0000006c), propput, hidden, helpcontext(0x0c5e006c)]
        HRESULT Type([in] VARIANT prop);
        [id(0x00000085), propget, helpcontext(0x0c5e0085)]
        HRESULT Position([out, retval] XlDataLabelPosition* prop);
        [id(0x00000085), propput, helpcontext(0x0c5e0085)]
        HRESULT Position([in] XlDataLabelPosition prop);
        [id(0x000007e6), propget, helpcontext(0x0c5e07e6)]
        HRESULT ShowSeriesName([out, retval] VARIANT_BOOL* prop);
        [id(0x000007e6), propput, helpcontext(0x0c5e07e6)]
        HRESULT ShowSeriesName([in] VARIANT_BOOL prop);
        [id(0x000007e7), propget, helpcontext(0x0c5e07e7)]
        HRESULT ShowCategoryName([out, retval] VARIANT_BOOL* prop);
        [id(0x000007e7), propput, helpcontext(0x0c5e07e7)]
        HRESULT ShowCategoryName([in] VARIANT_BOOL prop);
        [id(0x000007e8), propget, helpcontext(0x0c5e07e8)]
        HRESULT ShowValue([out, retval] VARIANT_BOOL* prop);
        [id(0x000007e8), propput, helpcontext(0x0c5e07e8)]
        HRESULT ShowValue([in] VARIANT_BOOL prop);
        [id(0x000007e9), propget, helpcontext(0x0c5e07e9)]
        HRESULT ShowPercentage([out, retval] VARIANT_BOOL* prop);
        [id(0x000007e9), propput, helpcontext(0x0c5e07e9)]
        HRESULT ShowPercentage([in] VARIANT_BOOL prop);
        [id(0x000007ea), propget, helpcontext(0x0c5e07ea)]
        HRESULT ShowBubbleSize([out, retval] VARIANT_BOOL* prop);
        [id(0x000007ea), propput, helpcontext(0x0c5e07ea)]
        HRESULT ShowBubbleSize([in] VARIANT_BOOL prop);
        [id(0x000007eb), propget, helpcontext(0x0c5e07eb)]
        HRESULT Separator([out, retval] VARIANT* prop);
        [id(0x000007eb), propput, helpcontext(0x0c5e07eb)]
        HRESULT Separator([in] VARIANT prop);
        [id(0x00000076), propget, helpcontext(0x0c5e0076)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x0c5e0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] DataLabel** prop);
        [id(0xfffffffc), helpcontext(0x0c5efffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x60020032), propget, helpcontext(0x0c5e0032)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x0c5e0094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x0c5e0095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x60020035), helpcontext(0x0c5e0035)]
        HRESULT _Default(
                        [in] VARIANT Index, 
                        [out, retval] DataLabel** prop);
        [id(0x000007ec), helpcontext(0x0c5e07ec)]
        HRESULT Propagate([in] VARIANT Index);
        [id(0x000007ed), propget, helpcontext(0x0c5e07ed)]
        HRESULT ShowRange([out, retval] VARIANT_BOOL* prop);
        [id(0x000007ed), propput, helpcontext(0x0c5e07ed)]
        HRESULT ShowRange([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(1FD94DF1-3569-4465-94FF-E8B22D28EEB0),
      version(8.6),
      helpcontext(0x00000df1),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DataLabel : IDispatch {
        [id(0x00000096), propget, helpcontext(0x0df10096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000006e), propget, helpcontext(0x0df1006e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x000000eb), helpcontext(0x0df100eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x00000080), propget, hidden, helpcontext(0x0df10080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x00000075), helpcontext(0x0df10075)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x00000081), propget, hidden, helpcontext(0x0df10081)]
        HRESULT Interior([out, retval] Interior** prop);
        [id(0x0000067f), propget, hidden, helpcontext(0x0df1067f)]
        HRESULT Fill([out, retval] ChartFillFormat** prop);
        [id(0x0000008b), propget, helpcontext(0x0df1008b)]
        HRESULT Caption([out, retval] BSTR* prop);
        [id(0x0000008b), propput, helpcontext(0x0df1008b)]
        HRESULT Caption([in] BSTR prop);
        [id(0x0000025b), propget, helpcontext(0x0df1025b)]
        HRESULT Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] ChartCharacters** prop);
        [id(0x00000092), propget, hidden, helpcontext(0x0df10092)]
        HRESULT Font([out, retval] ChartFont** prop);
        [id(0x00000088), propget, helpcontext(0x0df10088)]
        HRESULT HorizontalAlignment([out, retval] VARIANT* prop);
        [id(0x00000088), propput, helpcontext(0x0df10088)]
        HRESULT HorizontalAlignment([in] VARIANT prop);
        [id(0x0000007f), propget, helpcontext(0x0df1007f)]
        HRESULT Left([out, retval] double* prop);
        [id(0x0000007f), propput, helpcontext(0x0df1007f)]
        HRESULT Left([in] double prop);
        [id(0x00000086), propget, helpcontext(0x0df10086)]
        HRESULT Orientation([out, retval] VARIANT* prop);
        [id(0x00000086), propput, helpcontext(0x0df10086)]
        HRESULT Orientation([in] VARIANT prop);
        [id(0x00000067), propget, helpcontext(0x0df10067)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), propput, helpcontext(0x0df10067)]
        HRESULT Shadow([in] VARIANT_BOOL prop);
        [id(0x0000008a), propget, helpcontext(0x0df1008a)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(0x0000008a), propput, helpcontext(0x0df1008a)]
        HRESULT Text([in] BSTR prop);
        [id(0x0000007e), propget, helpcontext(0x0df1007e)]
        HRESULT Top([out, retval] double* prop);
        [id(0x0000007e), propput, helpcontext(0x0df1007e)]
        HRESULT Top([in] double prop);
        [id(0x00000089), propget, helpcontext(0x0df10089)]
        HRESULT VerticalAlignment([out, retval] VARIANT* prop);
        [id(0x00000089), propput, helpcontext(0x0df10089)]
        HRESULT VerticalAlignment([in] VARIANT prop);
        [id(0x000003cf), propget, helpcontext(0x0df103cf)]
        HRESULT ReadingOrder([out, retval] long* prop);
        [id(0x000003cf), propput, helpcontext(0x0df103cf)]
        HRESULT ReadingOrder([in] long prop);
        [id(0x000005f5), propget, hidden, helpcontext(0x0df105f5)]
        HRESULT AutoScaleFont([out, retval] VARIANT* prop);
        [id(0x000005f5), propput, hidden, helpcontext(0x0df105f5)]
        HRESULT AutoScaleFont([in] VARIANT prop);
        [id(0x00000087), propget, helpcontext(0x0df10087)]
        HRESULT AutoText([out, retval] VARIANT_BOOL* prop);
        [id(0x00000087), propput, helpcontext(0x0df10087)]
        HRESULT AutoText([in] VARIANT_BOOL prop);
        [id(0x000000c1), propget, helpcontext(0x0df100c1)]
        HRESULT NumberFormat([out, retval] BSTR* prop);
        [id(0x000000c1), propput, helpcontext(0x0df100c1)]
        HRESULT NumberFormat([in] BSTR prop);
        [id(0x000000c2), propget, helpcontext(0x0df100c2)]
        HRESULT NumberFormatLinked([out, retval] VARIANT_BOOL* prop);
        [id(0x000000c2), propput, helpcontext(0x0df100c2)]
        HRESULT NumberFormatLinked([in] VARIANT_BOOL prop);
        [id(0x00000449), propget, helpcontext(0x0df10449)]
        HRESULT NumberFormatLocal([out, retval] VARIANT* prop);
        [id(0x00000449), propput, helpcontext(0x0df10449)]
        HRESULT NumberFormatLocal([in] VARIANT prop);
        [id(0x000000ab), propget, helpcontext(0x0df100ab)]
        HRESULT ShowLegendKey([out, retval] VARIANT_BOOL* prop);
        [id(0x000000ab), propput, helpcontext(0x0df100ab)]
        HRESULT ShowLegendKey([in] VARIANT_BOOL prop);
        [id(0x0000006c), propget, hidden, helpcontext(0x0df1006c)]
        HRESULT Type([out, retval] VARIANT* prop);
        [id(0x0000006c), propput, hidden, helpcontext(0x0df1006c)]
        HRESULT Type([in] VARIANT prop);
        [id(0x00000085), propget, helpcontext(0x0df10085)]
        HRESULT Position([out, retval] XlDataLabelPosition* prop);
        [id(0x00000085), propput, helpcontext(0x0df10085)]
        HRESULT Position([in] XlDataLabelPosition prop);
        [id(0x000007e6), propget, helpcontext(0x0df107e6)]
        HRESULT ShowSeriesName([out, retval] VARIANT_BOOL* prop);
        [id(0x000007e6), propput, helpcontext(0x0df107e6)]
        HRESULT ShowSeriesName([in] VARIANT_BOOL prop);
        [id(0x000007e7), propget, helpcontext(0x0df107e7)]
        HRESULT ShowCategoryName([out, retval] VARIANT_BOOL* prop);
        [id(0x000007e7), propput, helpcontext(0x0df107e7)]
        HRESULT ShowCategoryName([in] VARIANT_BOOL prop);
        [id(0x000007e8), propget, helpcontext(0x0df107e8)]
        HRESULT ShowValue([out, retval] VARIANT_BOOL* prop);
        [id(0x000007e8), propput, helpcontext(0x0df107e8)]
        HRESULT ShowValue([in] VARIANT_BOOL prop);
        [id(0x000007e9), propget, helpcontext(0x0df107e9)]
        HRESULT ShowPercentage([out, retval] VARIANT_BOOL* prop);
        [id(0x000007e9), propput, helpcontext(0x0df107e9)]
        HRESULT ShowPercentage([in] VARIANT_BOOL prop);
        [id(0x000007ea), propget, helpcontext(0x0df107ea)]
        HRESULT ShowBubbleSize([out, retval] VARIANT_BOOL* prop);
        [id(0x000007ea), propput, helpcontext(0x0df107ea)]
        HRESULT ShowBubbleSize([in] VARIANT_BOOL prop);
        [id(0x000007eb), propget, helpcontext(0x0df107eb)]
        HRESULT Separator([out, retval] VARIANT* prop);
        [id(0x000007eb), propput, helpcontext(0x0df107eb)]
        HRESULT Separator([in] VARIANT prop);
        [id(0x60020037), propget, helpcontext(0x0df10037)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x0df10094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x0df10095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x60020038), propget, hidden, helpcontext(0x0df10038)]
        HRESULT _Height([out, retval] double* prop);
        [id(0x000007ee), propget, hidden, helpcontext(0x0df107ee)]
        HRESULT _Width([out, retval] double* prop);
        [id(0x000007ef), propget, helpcontext(0x0df107ef)]
        HRESULT Formula([out, retval] BSTR* prop);
        [id(0x000007ef), propput, helpcontext(0x0df107ef)]
        HRESULT Formula([in] BSTR prop);
        [id(0x000007f0), propget, helpcontext(0x0df107f0)]
        HRESULT FormulaR1C1([out, retval] BSTR* prop);
        [id(0x000007f0), propput, helpcontext(0x0df107f0)]
        HRESULT FormulaR1C1([in] BSTR prop);
        [id(0x000007f1), propget, helpcontext(0x0df107f1)]
        HRESULT FormulaLocal([out, retval] BSTR* prop);
        [id(0x000007f1), propput, helpcontext(0x0df107f1)]
        HRESULT FormulaLocal([in] BSTR prop);
        [id(0x000007f2), propget, helpcontext(0x0df107f2)]
        HRESULT FormulaR1C1Local([out, retval] BSTR* prop);
        [id(0x000007f2), propput, helpcontext(0x0df107f2)]
        HRESULT FormulaR1C1Local([in] BSTR prop);
        [id(0x000007f3), propget, helpcontext(0x0df107f3)]
        HRESULT ShowRange([out, retval] VARIANT_BOOL* prop);
        [id(0x000007f3), propput, helpcontext(0x0df107f3)]
        HRESULT ShowRange([in] VARIANT_BOOL prop);
        [id(0x000007f4), propget, helpcontext(0x0df107f4)]
        HRESULT Height([out, retval] double* prop);
        [id(0x000007f4), propput, helpcontext(0x0df107f4)]
        HRESULT Height([in] double prop);
        [id(0x000007f5), propget, helpcontext(0x0df107f5)]
        HRESULT Width([out, retval] double* prop);
        [id(0x000007f5), propput, helpcontext(0x0df107f5)]
        HRESULT Width([in] double prop);
    };

    [
      odl,
      uuid(C1A870A0-850E-4D38-98A7-741CB8C3BCA4),
      version(8.6),
      helpcontext(0x000000a0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Points : IDispatch {
        [id(0x00000096), propget, helpcontext(0x00a00096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000076), propget, helpcontext(0x00a00076)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x00a00000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Point** prop);
        [id(0xfffffffc), helpcontext(0x00a0fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000094), propget, helpcontext(0x00a00094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x00a00095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x60020006), helpcontext(0x00a00006)]
        HRESULT _Default(
                        [in] long Index, 
                        [out, retval] Point** prop);
    };

    [
      odl,
      uuid(8A342FA0-5831-4B5E-82E1-003D0A0C635D),
      version(8.6),
      helpcontext(0x00000fa0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Point : IDispatch {
        [id(0x00000096), propget, helpcontext(0x0fa00096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000080), propget, hidden, helpcontext(0x0fa00080)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x00000070), helpcontext(0x0fa00070)]
        HRESULT ClearFormats([out, retval] VARIANT* prop);
        [id(0x00000227), helpcontext(0x0fa00227)]
        HRESULT Copy([out, retval] VARIANT* prop);
        [id(0x0000009e), propget, helpcontext(0x0fa0009e)]
        HRESULT DataLabel([out, retval] DataLabel** prop);
        [id(0x00000075), helpcontext(0x0fa00075)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x000000b6), propget, helpcontext(0x0fa000b6)]
        HRESULT Explosion([out, retval] long* prop);
        [id(0x000000b6), propput, helpcontext(0x0fa000b6)]
        HRESULT Explosion([in] long prop);
        [id(0x0000004d), propget, helpcontext(0x0fa0004d)]
        HRESULT HasDataLabel([out, retval] VARIANT_BOOL* prop);
        [id(0x0000004d), propput, helpcontext(0x0fa0004d)]
        HRESULT HasDataLabel([in] VARIANT_BOOL prop);
        [id(0x00000081), propget, hidden, helpcontext(0x0fa00081)]
        HRESULT Interior([out, retval] Interior** prop);
        [id(0x00000084), propget, helpcontext(0x0fa00084)]
        HRESULT InvertIfNegative([out, retval] VARIANT_BOOL* prop);
        [id(0x00000084), propput, helpcontext(0x0fa00084)]
        HRESULT InvertIfNegative([in] VARIANT_BOOL prop);
        [id(0x00000049), propget, helpcontext(0x0fa00049)]
        HRESULT MarkerBackgroundColor([out, retval] long* prop);
        [id(0x00000049), propput, helpcontext(0x0fa00049)]
        HRESULT MarkerBackgroundColor([in] long prop);
        [id(0x0000004a), propget, helpcontext(0x0fa0004a)]
        HRESULT MarkerBackgroundColorIndex([out, retval] XlColorIndex* prop);
        [id(0x0000004a), propput, helpcontext(0x0fa0004a)]
        HRESULT MarkerBackgroundColorIndex([in] XlColorIndex prop);
        [id(0x0000004b), propget, helpcontext(0x0fa0004b)]
        HRESULT MarkerForegroundColor([out, retval] long* prop);
        [id(0x0000004b), propput, helpcontext(0x0fa0004b)]
        HRESULT MarkerForegroundColor([in] long prop);
        [id(0x0000004c), propget, helpcontext(0x0fa0004c)]
        HRESULT MarkerForegroundColorIndex([out, retval] XlColorIndex* prop);
        [id(0x0000004c), propput, helpcontext(0x0fa0004c)]
        HRESULT MarkerForegroundColorIndex([in] XlColorIndex prop);
        [id(0x000000e7), propget, helpcontext(0x0fa000e7)]
        HRESULT MarkerSize([out, retval] long* prop);
        [id(0x000000e7), propput, helpcontext(0x0fa000e7)]
        HRESULT MarkerSize([in] long prop);
        [id(0x00000048), propget, helpcontext(0x0fa00048)]
        HRESULT MarkerStyle([out, retval] XlMarkerStyle* prop);
        [id(0x00000048), propput, helpcontext(0x0fa00048)]
        HRESULT MarkerStyle([in] XlMarkerStyle prop);
        [id(0x000000d3), helpcontext(0x0fa000d3)]
        HRESULT Paste([out, retval] VARIANT* prop);
        [id(0x000000a1), propget, helpcontext(0x0fa000a1)]
        HRESULT PictureType([out, retval] XlChartPictureType* prop);
        [id(0x000000a1), propput, helpcontext(0x0fa000a1)]
        HRESULT PictureType([in] XlChartPictureType prop);
        [id(0x000000a2), propget, hidden, helpcontext(0x0fa000a2)]
        HRESULT PictureUnit([out, retval] double* prop);
        [id(0x000000a2), propput, hidden, helpcontext(0x0fa000a2)]
        HRESULT PictureUnit([in] double prop);
        [id(0x000000eb), helpcontext(0x0fa000eb)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x0000067b), propget, helpcontext(0x0fa0067b)]
        HRESULT ApplyPictToSides([out, retval] VARIANT_BOOL* prop);
        [id(0x0000067b), propput, helpcontext(0x0fa0067b)]
        HRESULT ApplyPictToSides([in] VARIANT_BOOL prop);
        [id(0x0000067c), propget, helpcontext(0x0fa0067c)]
        HRESULT ApplyPictToFront([out, retval] VARIANT_BOOL* prop);
        [id(0x0000067c), propput, helpcontext(0x0fa0067c)]
        HRESULT ApplyPictToFront([in] VARIANT_BOOL prop);
        [id(0x0000067d), propget, helpcontext(0x0fa0067d)]
        HRESULT ApplyPictToEnd([out, retval] VARIANT_BOOL* prop);
        [id(0x0000067d), propput, helpcontext(0x0fa0067d)]
        HRESULT ApplyPictToEnd([in] VARIANT_BOOL prop);
        [id(0x00000067), propget, helpcontext(0x0fa00067)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* prop);
        [id(0x00000067), propput, helpcontext(0x0fa00067)]
        HRESULT Shadow([in] VARIANT_BOOL prop);
        [id(0x0000067e), propget, helpcontext(0x0fa0067e)]
        HRESULT SecondaryPlot([out, retval] VARIANT_BOOL* prop);
        [id(0x0000067e), propput, helpcontext(0x0fa0067e)]
        HRESULT SecondaryPlot([in] VARIANT_BOOL prop);
        [id(0x0000067f), propget, hidden, helpcontext(0x0fa0067f)]
        HRESULT Fill([out, retval] ChartFillFormat** prop);
        [id(0x00000782), helpcontext(0x0fa00782)]
        HRESULT ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                        [in, optional] VARIANT LegendKey, 
                        [in, optional] VARIANT AutoText, 
                        [in, optional] VARIANT HasLeaderLines, 
                        [in, optional] VARIANT ShowSeriesName, 
                        [in, optional] VARIANT ShowCategoryName, 
                        [in, optional] VARIANT ShowValue, 
                        [in, optional] VARIANT ShowPercentage, 
                        [in, optional] VARIANT ShowBubbleSize, 
                        [in, optional] VARIANT Separator, 
                        [out, retval] VARIANT* prop);
        [id(0x00000681), propget, helpcontext(0x0fa00681)]
        HRESULT Has3DEffect([out, retval] VARIANT_BOOL* prop);
        [id(0x00000681), propput, helpcontext(0x0fa00681)]
        HRESULT Has3DEffect([in] VARIANT_BOOL prop);
        [id(0x6002002e), propget, helpcontext(0x0fa0002e)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x0fa00094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x0fa00095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000a59), propget, helpcontext(0x0fa00a59)]
        HRESULT PictureUnit2([out, retval] double* prop);
        [id(0x00000a59), propput, helpcontext(0x0fa00a59)]
        HRESULT PictureUnit2([in] double prop);
        [id(0x00000a5c), propget, helpcontext(0x0fa00a5c)]
        HRESULT Height([out, retval] double* prop);
        [id(0x00000a5d), propget, helpcontext(0x0fa00a5d)]
        HRESULT Width([out, retval] double* prop);
        [id(0x00000a5f), propget, helpcontext(0x0fa00a5f)]
        HRESULT Top([out, retval] double* prop);
        [id(0x00000a5e), propget, helpcontext(0x0fa00a5e)]
        HRESULT Left([out, retval] double* prop);
        [id(0x00000a5b), propget, helpcontext(0x0fa00a5b)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000a60), helpcontext(0x0fa00a60)]
        HRESULT PieSliceLocation(
                        [in] XlPieSliceLocation loc, 
                        [in, optional, defaultvalue(2)] XlPieSliceIndex Index, 
                        [out, retval] double* prop);
    };

    [
      odl,
      uuid(354AB591-A217-48B4-99E4-14F58F15667D),
      version(8.6),
      helpcontext(0x00000591),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Axes : IDispatch {
        [id(0x60020000), propget, helpcontext(0x05910000)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x05910000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] XlAxisType Type, 
                        [in, optional, defaultvalue(1)] XlAxisGroup AxisGroup, 
                        [out, retval] Axis** prop);
        [id(0xfffffffc), helpcontext(0x0591fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000094), propget, helpcontext(0x05910094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x05910095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x60020005), helpcontext(0x05910005)]
        HRESULT _Default(
                        [in] XlAxisType Type, 
                        [in, optional, defaultvalue(1)] XlAxisGroup AxisGroup, 
                        [out, retval] Axis** prop);
        [id(0x00000096), propget, helpcontext(0x05910096)]
        HRESULT Parent([out, retval] IDispatch** prop);
    };

    [
      odl,
      uuid(7EBC66BD-F788-42C3-91F4-E8C841A69005),
      version(8.6),
      helpcontext(0x000006bd),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Axis : IDispatch {
        [id(0x60020000), propget, helpcontext(0x06bd0000)]
        HRESULT AxisBetweenCategories([out, retval] VARIANT_BOOL* prop);
        [id(0x60020000), propput, helpcontext(0x06bd0000)]
        HRESULT AxisBetweenCategories([in] VARIANT_BOOL prop);
        [id(0x60020002), propget, helpcontext(0x06bd0002)]
        HRESULT AxisGroup([out, retval] XlAxisGroup* prop);
        [id(0x60020003), propget, helpcontext(0x06bd0003)]
        HRESULT AxisTitle([out, retval] AxisTitle** prop);
        [id(0x60020004), propget, helpcontext(0x06bd0004)]
        HRESULT CategoryNames([out, retval] VARIANT* prop);
        [id(0x60020004), propput, helpcontext(0x06bd0004)]
        HRESULT CategoryNames([in] VARIANT prop);
        [id(0x60020006), propget, helpcontext(0x06bd0006)]
        HRESULT Crosses([out, retval] XlAxisCrosses* prop);
        [id(0x60020006), propput, helpcontext(0x06bd0006)]
        HRESULT Crosses([in] XlAxisCrosses prop);
        [id(0x60020008), propget, helpcontext(0x06bd0008)]
        HRESULT CrossesAt([out, retval] double* prop);
        [id(0x60020008), propput, helpcontext(0x06bd0008)]
        HRESULT CrossesAt([in] double prop);
        [id(0x6002000a), helpcontext(0x06bd000a)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x6002000b), propget, helpcontext(0x06bd000b)]
        HRESULT HasMajorGridlines([out, retval] VARIANT_BOOL* prop);
        [id(0x6002000b), propput, helpcontext(0x06bd000b)]
        HRESULT HasMajorGridlines([in] VARIANT_BOOL prop);
        [id(0x6002000d), propget, helpcontext(0x06bd000d)]
        HRESULT HasMinorGridlines([out, retval] VARIANT_BOOL* prop);
        [id(0x6002000d), propput, helpcontext(0x06bd000d)]
        HRESULT HasMinorGridlines([in] VARIANT_BOOL prop);
        [id(0x6002000f), propget, helpcontext(0x06bd000f)]
        HRESULT HasTitle([out, retval] VARIANT_BOOL* prop);

        [id(0x6002000f), propput, helpcontext(0x06bd000f)]
        HRESULT HasTitle([in] VARIANT_BOOL prop);
        [id(0x60020011), propget, helpcontext(0x06bd0011)]
        HRESULT MajorGridlines([out, retval] Gridlines** prop);
        [id(0x60020012), propget, helpcontext(0x06bd0012)]
        HRESULT MajorTickMark([out, retval] XlTickMark* prop);
        [id(0x60020012), propput, helpcontext(0x06bd0012)]
        HRESULT MajorTickMark([in] XlTickMark prop);
        [id(0x60020014), propget, helpcontext(0x06bd0014)]
        HRESULT MajorUnit([out, retval] double* prop);
        [id(0x60020014), propput, helpcontext(0x06bd0014)]
        HRESULT MajorUnit([in] double prop);
        [id(0x60020016), propget, helpcontext(0x06bd0016)]
        HRESULT LogBase([out, retval] double* prop);
        [id(0x60020016), propput, helpcontext(0x06bd0016)]
        HRESULT LogBase([in] double prop);
        [id(0x60020018), propget, helpcontext(0x06bd0018)]
        HRESULT TickLabelSpacingIsAuto([out, retval] VARIANT_BOOL* prop);
        [id(0x60020018), propput, helpcontext(0x06bd0018)]
        HRESULT TickLabelSpacingIsAuto([in] VARIANT_BOOL prop);
        [id(0x6002001a), propget, helpcontext(0x06bd001a)]
        HRESULT MajorUnitIsAuto([out, retval] VARIANT_BOOL* prop);
        [id(0x6002001a), propput, helpcontext(0x06bd001a)]
        HRESULT MajorUnitIsAuto([in] VARIANT_BOOL prop);
        [id(0x6002001c), propget, helpcontext(0x06bd001c)]
        HRESULT MaximumScale([out, retval] double* prop);
        [id(0x6002001c), propput, helpcontext(0x06bd001c)]
        HRESULT MaximumScale([in] double prop);
        [id(0x6002001e), propget, helpcontext(0x06bd001e)]
        HRESULT MaximumScaleIsAuto([out, retval] VARIANT_BOOL* prop);
        [id(0x6002001e), propput, helpcontext(0x06bd001e)]
        HRESULT MaximumScaleIsAuto([in] VARIANT_BOOL prop);
        [id(0x60020020), propget, helpcontext(0x06bd0020)]
        HRESULT MinimumScale([out, retval] double* prop);
        [id(0x60020020), propput, helpcontext(0x06bd0020)]
        HRESULT MinimumScale([in] double prop);
        [id(0x60020022), propget, helpcontext(0x06bd0022)]
        HRESULT MinimumScaleIsAuto([out, retval] VARIANT_BOOL* prop);
        [id(0x60020022), propput, helpcontext(0x06bd0022)]
        HRESULT MinimumScaleIsAuto([in] VARIANT_BOOL prop);
        [id(0x60020024), propget, helpcontext(0x06bd0024)]
        HRESULT MinorGridlines([out, retval] Gridlines** prop);
        [id(0x60020025), propget, helpcontext(0x06bd0025)]
        HRESULT MinorTickMark([out, retval] XlTickMark* prop);
        [id(0x60020025), propput, helpcontext(0x06bd0025)]
        HRESULT MinorTickMark([in] XlTickMark prop);
        [id(0x60020027), propget, helpcontext(0x06bd0027)]
        HRESULT MinorUnit([out, retval] double* prop);
        [id(0x60020027), propput, helpcontext(0x06bd0027)]
        HRESULT MinorUnit([in] double prop);
        [id(0x60020029), propget, helpcontext(0x06bd0029)]
        HRESULT MinorUnitIsAuto([out, retval] VARIANT_BOOL* prop);
        [id(0x60020029), propput, helpcontext(0x06bd0029)]
        HRESULT MinorUnitIsAuto([in] VARIANT_BOOL prop);
        [id(0x6002002b), propget, helpcontext(0x06bd002b)]
        HRESULT ReversePlotOrder([out, retval] VARIANT_BOOL* prop);
        [id(0x6002002b), propput, helpcontext(0x06bd002b)]
        HRESULT ReversePlotOrder([in] VARIANT_BOOL prop);
        [id(0x6002002d), propget, helpcontext(0x06bd002d)]
        HRESULT ScaleType([out, retval] XlScaleType* prop);
        [id(0x6002002d), propput, helpcontext(0x06bd002d)]
        HRESULT ScaleType([in] XlScaleType prop);
        [id(0x6002002f), helpcontext(0x06bd002f)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x60020030), propget, helpcontext(0x06bd0030)]
        HRESULT TickLabelPosition([out, retval] XlTickLabelPosition* prop);
        [id(0x60020030), propput, helpcontext(0x06bd0030)]
        HRESULT TickLabelPosition([in] XlTickLabelPosition prop);
        [id(0x60020032), propget, helpcontext(0x06bd0032)]
        HRESULT TickLabels([out, retval] TickLabels** prop);
        [id(0x60020033), propget, helpcontext(0x06bd0033)]
        HRESULT TickLabelSpacing([out, retval] long* prop);
        [id(0x60020033), propput, helpcontext(0x06bd0033)]
        HRESULT TickLabelSpacing([in] long prop);
        [id(0x60020035), propget, helpcontext(0x06bd0035)]
        HRESULT TickMarkSpacing([out, retval] long* prop);
        [id(0x60020035), propput, helpcontext(0x06bd0035)]
        HRESULT TickMarkSpacing([in] long prop);
        [id(0x60020037), propget, helpcontext(0x06bd0037)]
        HRESULT Type([out, retval] XlAxisType* prop);
        [id(0x60020037), propput, helpcontext(0x06bd0037)]
        HRESULT Type([in] XlAxisType prop);
        [id(0x60020039), propget, helpcontext(0x06bd0039)]
        HRESULT BaseUnit([out, retval] XlTimeUnit* prop);
        [id(0x60020039), propput, helpcontext(0x06bd0039)]
        HRESULT BaseUnit([in] XlTimeUnit prop);
        [id(0x6002003b), propget, helpcontext(0x06bd003b)]
        HRESULT BaseUnitIsAuto([out, retval] VARIANT_BOOL* prop);
        [id(0x6002003b), propput, helpcontext(0x06bd003b)]
        HRESULT BaseUnitIsAuto([in] VARIANT_BOOL prop);
        [id(0x6002003d), propget, helpcontext(0x06bd003d)]
        HRESULT MajorUnitScale([out, retval] XlTimeUnit* prop);
        [id(0x6002003d), propput, helpcontext(0x06bd003d)]
        HRESULT MajorUnitScale([in] XlTimeUnit prop);
        [id(0x6002003f), propget, helpcontext(0x06bd003f)]
        HRESULT MinorUnitScale([out, retval] XlTimeUnit* prop);
        [id(0x6002003f), propput, helpcontext(0x06bd003f)]
        HRESULT MinorUnitScale([in] XlTimeUnit prop);
        [id(0x60020041), propget, helpcontext(0x06bd0041)]
        HRESULT CategoryType([out, retval] XlCategoryType* prop);
        [id(0x60020041), propput, helpcontext(0x06bd0041)]
        HRESULT CategoryType([in] XlCategoryType prop);
        [id(0x60020043), propget, helpcontext(0x06bd0043)]
        HRESULT Left([out, retval] double* prop);
        [id(0x60020044), propget, helpcontext(0x06bd0044)]
        HRESULT Top([out, retval] double* prop);
        [id(0x60020045), propget, helpcontext(0x06bd0045)]
        HRESULT Width([out, retval] double* prop);
        [id(0x60020046), propget, helpcontext(0x06bd0046)]
        HRESULT Height([out, retval] double* prop);
        [id(0x60020047), propget, helpcontext(0x06bd0047)]
        HRESULT DisplayUnit([out, retval] XlDisplayUnit* prop);
        [id(0x60020047), propput, helpcontext(0x06bd0047)]
        HRESULT DisplayUnit([in] XlDisplayUnit prop);
        [id(0x60020049), propget, helpcontext(0x06bd0049)]
        HRESULT DisplayUnitCustom([out, retval] double* prop);
        [id(0x60020049), propput, helpcontext(0x06bd0049)]
        HRESULT DisplayUnitCustom([in] double prop);
        [id(0x6002004b), propget, helpcontext(0x06bd004b)]
        HRESULT HasDisplayUnitLabel([out, retval] VARIANT_BOOL* prop);
        [id(0x6002004b), propput, helpcontext(0x06bd004b)]
        HRESULT HasDisplayUnitLabel([in] VARIANT_BOOL prop);
        [id(0x6002004d), propget, helpcontext(0x06bd004d)]
        HRESULT DisplayUnitLabel([out, retval] DisplayUnitLabel** prop);
        [id(0x6002004e), propget, helpcontext(0x06bd004e)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x60020050), propget, helpcontext(0x06bd0050)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x06bd0094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x06bd0095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000096), propget, helpcontext(0x06bd0096)]
        HRESULT Parent([out, retval] IDispatch** prop);
    };

    [
      odl,
      uuid(DCE9F2C4-4C02-43BA-840E-B4276550EF79),
      version(8.6),
      helpcontext(0x000002c4),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DataTable : IDispatch {
        [id(0x60020000), propget, helpcontext(0x02c40000)]
        HRESULT ShowLegendKey([out, retval] VARIANT_BOOL* prop);
        [id(0x60020000), propput, helpcontext(0x02c40000)]
        HRESULT ShowLegendKey([in] VARIANT_BOOL prop);
        [id(0x60020002), propget, helpcontext(0x02c40002)]
        HRESULT HasBorderHorizontal([out, retval] VARIANT_BOOL* prop);
        [id(0x60020002), propput, helpcontext(0x02c40002)]
        HRESULT HasBorderHorizontal([in] VARIANT_BOOL prop);
        [id(0x60020004), propget, helpcontext(0x02c40004)]
        HRESULT HasBorderVertical([out, retval] VARIANT_BOOL* prop);
        [id(0x60020004), propput, helpcontext(0x02c40004)]
        HRESULT HasBorderVertical([in] VARIANT_BOOL prop);
        [id(0x60020006), propget, helpcontext(0x02c40006)]
        HRESULT HasBorderOutline([out, retval] VARIANT_BOOL* prop);
        [id(0x60020006), propput, helpcontext(0x02c40006)]
        HRESULT HasBorderOutline([in] VARIANT_BOOL prop);
        [id(0x60020008), propget, helpcontext(0x02c40008)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x60020009), propget, helpcontext(0x02c40009)]
        HRESULT Font([out, retval] ChartFont** prop);
        [id(0x6002000a), helpcontext(0x02c4000a)]
        HRESULT Select();
        [id(0x6002000b), helpcontext(0x02c4000b)]
        HRESULT Delete();
        [id(0x6002000c), propget, helpcontext(0x02c4000c)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x6002000d), propget, hidden, helpcontext(0x02c4000d)]
        HRESULT AutoScaleFont([out, retval] VARIANT* prop);
        [id(0x6002000d), propput, hidden, helpcontext(0x02c4000d)]
        HRESULT AutoScaleFont([in] VARIANT prop);
        [id(0x6002000f), propget, helpcontext(0x02c4000f)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x02c40094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x02c40095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(C1AD33E4-F088-40A9-9D2F-D94017D115C4),
      version(8.6),
      helpcontext(0x000003e4),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartTitle : IDispatch {
        [id(0x60020000), propget, helpcontext(0x03e40000)]
        HRESULT Caption([out, retval] BSTR* prop);
        [id(0x60020000), propput, helpcontext(0x03e40000)]
        HRESULT Caption([in] BSTR prop);
        [id(0x60020002), propget, helpcontext(0x03e40002)]
        HRESULT Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] ChartCharacters** prop);
        [id(0x60020003), propget, hidden, helpcontext(0x03e40003)]
        HRESULT Font([out, retval] ChartFont** prop);
        [id(0x60020004), propget, helpcontext(0x03e40004)]
        HRESULT HorizontalAlignment([out, retval] VARIANT* prop);
        [id(0x60020004), propput, helpcontext(0x03e40004)]
        HRESULT HorizontalAlignment([in] VARIANT prop);
        [id(0x60020006), propget, helpcontext(0x03e40006)]
        HRESULT Left([out, retval] double* prop);
        [id(0x60020006), propput, helpcontext(0x03e40006)]
        HRESULT Left([in] double prop);
        [id(0x60020008), propget, helpcontext(0x03e40008)]
        HRESULT Orientation([out, retval] VARIANT* prop);
        [id(0x60020008), propput, helpcontext(0x03e40008)]
        HRESULT Orientation([in] VARIANT prop);
        [id(0x6002000a), propget, helpcontext(0x03e4000a)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* prop);
        [id(0x6002000a), propput, helpcontext(0x03e4000a)]
        HRESULT Shadow([in] VARIANT_BOOL prop);
        [id(0x6002000c), propget, helpcontext(0x03e4000c)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(0x6002000c), propput, helpcontext(0x03e4000c)]
        HRESULT Text([in] BSTR prop);
        [id(0x6002000e), propget, helpcontext(0x03e4000e)]
        HRESULT Top([out, retval] double* prop);
        [id(0x6002000e), propput, helpcontext(0x03e4000e)]
        HRESULT Top([in] double prop);
        [id(0x60020010), propget, helpcontext(0x03e40010)]
        HRESULT VerticalAlignment([out, retval] VARIANT* prop);
        [id(0x60020010), propput, helpcontext(0x03e40010)]
        HRESULT VerticalAlignment([in] VARIANT prop);
        [id(0x60020012), propget, helpcontext(0x03e40012)]
        HRESULT ReadingOrder([out, retval] long* prop);
        [id(0x60020012), propput, helpcontext(0x03e40012)]
        HRESULT ReadingOrder([in] long prop);
        [id(0x60020014), propget, hidden, helpcontext(0x03e40014)]
        HRESULT AutoScaleFont([out, retval] VARIANT* prop);
        [id(0x60020014), propput, hidden, helpcontext(0x03e40014)]
        HRESULT AutoScaleFont([in] VARIANT prop);
        [id(0x60020016), propget, hidden, helpcontext(0x03e40016)]
        HRESULT Interior([out, retval] Interior** prop);
        [id(0x60020017), propget, hidden, helpcontext(0x03e40017)]
        HRESULT Fill([out, retval] ChartFillFormat** prop);
        [id(0x60020018), helpcontext(0x03e40018)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x60020019), propget, hidden, helpcontext(0x03e40019)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x6002001a), propget, helpcontext(0x03e4001a)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x6002001b), propget, helpcontext(0x03e4001b)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x6002001c), helpcontext(0x03e4001c)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x00000972), propget, helpcontext(0x03e40972)]
        HRESULT IncludeInLayout([out, retval] VARIANT_BOOL* prop);
        [id(0x00000972), propput, helpcontext(0x03e40972)]
        HRESULT IncludeInLayout([in] VARIANT_BOOL prop);
        [id(0x00000687), propget, helpcontext(0x03e40687)]
        HRESULT Position([out, retval] XlChartElementPosition* prop);
        [id(0x00000687), propput, helpcontext(0x03e40687)]
        HRESULT Position([in] XlChartElementPosition prop);
        [id(0x60020021), propget, helpcontext(0x03e40021)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x03e40094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x03e40095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x60020022), propget, helpcontext(0x03e40022)]
        HRESULT Height([out, retval] double* prop);
        [id(0x60020025), propget, helpcontext(0x03e40025)]
        HRESULT Width([out, retval] double* prop);
        [id(0x60020026), propget, helpcontext(0x03e40026)]
        HRESULT Formula([out, retval] BSTR* prop);
        [id(0x60020026), propput, helpcontext(0x03e40026)]
        HRESULT Formula([in] BSTR prop);
        [id(0x60020028), propget, helpcontext(0x03e40028)]
        HRESULT FormulaR1C1([out, retval] BSTR* prop);
        [id(0x60020028), propput, helpcontext(0x03e40028)]
        HRESULT FormulaR1C1([in] BSTR prop);
        [id(0x6002002a), propget, helpcontext(0x03e4002a)]
        HRESULT FormulaLocal([out, retval] BSTR* prop);
        [id(0x6002002a), propput, helpcontext(0x03e4002a)]
        HRESULT FormulaLocal([in] BSTR prop);
        [id(0x6002002c), propget, helpcontext(0x03e4002c)]
        HRESULT FormulaR1C1Local([out, retval] BSTR* prop);
        [id(0x6002002c), propput, helpcontext(0x03e4002c)]
        HRESULT FormulaR1C1Local([in] BSTR prop);
    };

    [
      odl,
      uuid(8B0E45DB-3A7B-42EE-9D17-A92AF69B79C1),
      version(8.6),
      helpcontext(0x000005db),
      dual,
      nonextensible,
      oleautomation
    ]
    interface AxisTitle : IDispatch {
        [id(0x60020000), propget, helpcontext(0x05db0000)]
        HRESULT Caption([out, retval] BSTR* prop);
        [id(0x60020000), propput, helpcontext(0x05db0000)]
        HRESULT Caption([in] BSTR prop);
        [id(0x60020002), propget, helpcontext(0x05db0002)]
        HRESULT Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] ChartCharacters** prop);
        [id(0x60020003), propget, hidden, helpcontext(0x05db0003)]
        HRESULT Font([out, retval] ChartFont** prop);
        [id(0x60020004), propget, helpcontext(0x05db0004)]
        HRESULT HorizontalAlignment([out, retval] VARIANT* prop);
        [id(0x60020004), propput, helpcontext(0x05db0004)]
        HRESULT HorizontalAlignment([in] VARIANT prop);
        [id(0x60020006), propget, helpcontext(0x05db0006)]
        HRESULT Left([out, retval] double* prop);
        [id(0x60020006), propput, helpcontext(0x05db0006)]
        HRESULT Left([in] double prop);
        [id(0x60020008), propget, helpcontext(0x05db0008)]
        HRESULT Orientation([out, retval] VARIANT* prop);
        [id(0x60020008), propput, helpcontext(0x05db0008)]
        HRESULT Orientation([in] VARIANT prop);
        [id(0x6002000a), propget, helpcontext(0x05db000a)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* prop);
        [id(0x6002000a), propput, helpcontext(0x05db000a)]
        HRESULT Shadow([in] VARIANT_BOOL prop);
        [id(0x6002000c), propget, helpcontext(0x05db000c)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(0x6002000c), propput, helpcontext(0x05db000c)]
        HRESULT Text([in] BSTR prop);
        [id(0x6002000e), propget, helpcontext(0x05db000e)]
        HRESULT Top([out, retval] double* prop);
        [id(0x6002000e), propput, helpcontext(0x05db000e)]
        HRESULT Top([in] double prop);
        [id(0x60020010), propget, helpcontext(0x05db0010)]
        HRESULT VerticalAlignment([out, retval] VARIANT* prop);
        [id(0x60020010), propput, helpcontext(0x05db0010)]
        HRESULT VerticalAlignment([in] VARIANT prop);
        [id(0x60020012), propget, helpcontext(0x05db0012)]
        HRESULT ReadingOrder([out, retval] long* prop);
        [id(0x60020012), propput, helpcontext(0x05db0012)]
        HRESULT ReadingOrder([in] long prop);
        [id(0x60020014), propget, hidden, helpcontext(0x05db0014)]
        HRESULT AutoScaleFont([out, retval] VARIANT* prop);
        [id(0x60020014), propput, hidden, helpcontext(0x05db0014)]
        HRESULT AutoScaleFont([in] VARIANT prop);
        [id(0x60020016), propget, hidden, helpcontext(0x05db0016)]
        HRESULT Interior([out, retval] Interior** prop);
        [id(0x60020017), propget, hidden, helpcontext(0x05db0017)]
        HRESULT Fill([out, retval] ChartFillFormat** prop);
        [id(0x60020018), helpcontext(0x05db0018)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x60020019), propget, hidden, helpcontext(0x05db0019)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x6002001a), propget, helpcontext(0x05db001a)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x6002001b), propget, helpcontext(0x05db001b)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x6002001c), helpcontext(0x05db001c)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x00000972), propget, helpcontext(0x05db0972)]
        HRESULT IncludeInLayout([out, retval] VARIANT_BOOL* prop);
        [id(0x00000972), propput, helpcontext(0x05db0972)]
        HRESULT IncludeInLayout([in] VARIANT_BOOL prop);
        [id(0x00000687), propget, helpcontext(0x05db0687)]
        HRESULT Position([out, retval] XlChartElementPosition* prop);
        [id(0x00000687), propput, helpcontext(0x05db0687)]
        HRESULT Position([in] XlChartElementPosition prop);
        [id(0x60020021), propget, helpcontext(0x05db0021)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x05db0094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x05db0095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x60020022), propget, helpcontext(0x05db0022)]
        HRESULT Height([out, retval] double* prop);
        [id(0x60020025), propget, helpcontext(0x05db0025)]
        HRESULT Width([out, retval] double* prop);
        [id(0x60020026), propget, helpcontext(0x05db0026)]
        HRESULT Formula([out, retval] BSTR* prop);
        [id(0x60020026), propput, helpcontext(0x05db0026)]
        HRESULT Formula([in] BSTR prop);
        [id(0x60020028), propget, helpcontext(0x05db0028)]
        HRESULT FormulaR1C1([out, retval] BSTR* prop);
        [id(0x60020028), propput, helpcontext(0x05db0028)]
        HRESULT FormulaR1C1([in] BSTR prop);
        [id(0x6002002a), propget, helpcontext(0x05db002a)]
        HRESULT FormulaLocal([out, retval] BSTR* prop);
        [id(0x6002002a), propput, helpcontext(0x05db002a)]
        HRESULT FormulaLocal([in] BSTR prop);
        [id(0x6002002c), propget, helpcontext(0x05db002c)]
        HRESULT FormulaR1C1Local([out, retval] BSTR* prop);
        [id(0x6002002c), propput, helpcontext(0x05db002c)]
        HRESULT FormulaR1C1Local([in] BSTR prop);
    };

    [
      odl,
      uuid(C04865A3-9F8A-486C-BB58-B4C3E6563136),
      version(8.6),
      helpcontext(0x000005a3),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DisplayUnitLabel : IDispatch {
        [id(0x60020000), propget, helpcontext(0x05a30000)]
        HRESULT Caption([out, retval] BSTR* prop);
        [id(0x60020000), propput, helpcontext(0x05a30000)]
        HRESULT Caption([in] BSTR prop);
        [id(0x60020002), propget, helpcontext(0x05a30002)]
        HRESULT Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] ChartCharacters** prop);
        [id(0x60020003), propget, hidden, helpcontext(0x05a30003)]
        HRESULT Font([out, retval] ChartFont** prop);
        [id(0x60020004), propget, helpcontext(0x05a30004)]
        HRESULT HorizontalAlignment([out, retval] VARIANT* prop);
        [id(0x60020004), propput, helpcontext(0x05a30004)]
        HRESULT HorizontalAlignment([in] VARIANT prop);
        [id(0x60020006), propget, helpcontext(0x05a30006)]
        HRESULT Left([out, retval] double* prop);
        [id(0x60020006), propput, helpcontext(0x05a30006)]
        HRESULT Left([in] double prop);
        [id(0x60020008), propget, helpcontext(0x05a30008)]
        HRESULT Orientation([out, retval] VARIANT* prop);
        [id(0x60020008), propput, helpcontext(0x05a30008)]
        HRESULT Orientation([in] VARIANT prop);
        [id(0x6002000a), propget, helpcontext(0x05a3000a)]
        HRESULT Shadow([out, retval] VARIANT_BOOL* prop);
        [id(0x6002000a), propput, helpcontext(0x05a3000a)]
        HRESULT Shadow([in] VARIANT_BOOL prop);
        [id(0x6002000c), propget, helpcontext(0x05a3000c)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(0x6002000c), propput, helpcontext(0x05a3000c)]
        HRESULT Text([in] BSTR prop);
        [id(0x6002000e), propget, helpcontext(0x05a3000e)]
        HRESULT Top([out, retval] double* prop);
        [id(0x6002000e), propput, helpcontext(0x05a3000e)]
        HRESULT Top([in] double prop);
        [id(0x60020010), propget, helpcontext(0x05a30010)]
        HRESULT VerticalAlignment([out, retval] VARIANT* prop);
        [id(0x60020010), propput, helpcontext(0x05a30010)]
        HRESULT VerticalAlignment([in] VARIANT prop);
        [id(0x60020012), propget, helpcontext(0x05a30012)]
        HRESULT ReadingOrder([out, retval] long* prop);
        [id(0x60020012), propput, helpcontext(0x05a30012)]
        HRESULT ReadingOrder([in] long prop);
        [id(0x60020014), propget, hidden, helpcontext(0x05a30014)]
        HRESULT AutoScaleFont([out, retval] VARIANT* prop);
        [id(0x60020014), propput, hidden, helpcontext(0x05a30014)]
        HRESULT AutoScaleFont([in] VARIANT prop);
        [id(0x60020016), propget, hidden, helpcontext(0x05a30016)]
        HRESULT Interior([out, retval] Interior** prop);
        [id(0x60020017), propget, hidden, helpcontext(0x05a30017)]
        HRESULT Fill([out, retval] ChartFillFormat** prop);
        [id(0x60020018), helpcontext(0x05a30018)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x60020019), propget, hidden, helpcontext(0x05a30019)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x6002001a), propget, helpcontext(0x05a3001a)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x6002001b), propget, helpcontext(0x05a3001b)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x6002001c), helpcontext(0x05a3001c)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x00000972), propget, helpcontext(0x05a30972)]
        HRESULT IncludeInLayout([out, retval] VARIANT_BOOL* prop);
        [id(0x00000972), propput, helpcontext(0x05a30972)]
        HRESULT IncludeInLayout([in] VARIANT_BOOL prop);
        [id(0x00000687), propget, helpcontext(0x05a30687)]
        HRESULT Position([out, retval] XlChartElementPosition* prop);
        [id(0x00000687), propput, helpcontext(0x05a30687)]
        HRESULT Position([in] XlChartElementPosition prop);
        [id(0x60020021), propget, helpcontext(0x05a30021)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x05a30094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x05a30095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x60020022), propget, helpcontext(0x05a30022)]
        HRESULT Height([out, retval] double* prop);
        [id(0x60020025), propget, helpcontext(0x05a30025)]
        HRESULT Width([out, retval] double* prop);
        [id(0x60020026), propget, helpcontext(0x05a30026)]
        HRESULT Formula([out, retval] BSTR* prop);
        [id(0x60020026), propput, helpcontext(0x05a30026)]
        HRESULT Formula([in] BSTR prop);
        [id(0x60020028), propget, helpcontext(0x05a30028)]
        HRESULT FormulaR1C1([out, retval] BSTR* prop);
        [id(0x60020028), propput, helpcontext(0x05a30028)]
        HRESULT FormulaR1C1([in] BSTR prop);
        [id(0x6002002a), propget, helpcontext(0x05a3002a)]
        HRESULT FormulaLocal([out, retval] BSTR* prop);
        [id(0x6002002a), propput, helpcontext(0x05a3002a)]
        HRESULT FormulaLocal([in] BSTR prop);
        [id(0x6002002c), propget, helpcontext(0x05a3002c)]
        HRESULT FormulaR1C1Local([out, retval] BSTR* prop);
        [id(0x6002002c), propput, helpcontext(0x05a3002c)]
        HRESULT FormulaR1C1Local([in] BSTR prop);
    };

    [
      odl,
      uuid(935D59F5-E365-4F92-B7F5-1C499A63ECA8),
      version(8.6),
      helpcontext(0x000009f5),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TickLabels : IDispatch {
        [id(0x60020000), propget, helpcontext(0x09f50000)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x60020001), helpcontext(0x09f50001)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x60020002), propget, helpcontext(0x09f50002)]
        HRESULT Font([out, retval] ChartFont** prop);
        [id(0x60020003), propget, helpcontext(0x09f50003)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x60020004), propget, helpcontext(0x09f50004)]
        HRESULT NumberFormat([out, retval] BSTR* prop);
        [id(0x60020004), propput, helpcontext(0x09f50004)]
        HRESULT NumberFormat([in] BSTR prop);
        [id(0x60020006), propget, helpcontext(0x09f50006)]
        HRESULT NumberFormatLinked([out, retval] VARIANT_BOOL* prop);
        [id(0x60020006), propput, helpcontext(0x09f50006)]
        HRESULT NumberFormatLinked([in] VARIANT_BOOL prop);
        [id(0x60020008), propget, helpcontext(0x09f50008)]
        HRESULT NumberFormatLocal([out, retval] VARIANT* prop);
        [id(0x60020008), propput, helpcontext(0x09f50008)]
        HRESULT NumberFormatLocal([in] VARIANT prop);
        [id(0x6002000a), propget, helpcontext(0x09f5000a)]
        HRESULT Orientation([out, retval] XlTickLabelOrientation* prop);
        [id(0x6002000a), propput, helpcontext(0x09f5000a)]
        HRESULT Orientation([in] XlTickLabelOrientation prop);
        [id(0x6002000c), helpcontext(0x09f5000c)]
        HRESULT Select([out, retval] VARIANT* prop);
        [id(0x6002000d), propget, helpcontext(0x09f5000d)]
        HRESULT ReadingOrder([out, retval] long* prop);
        [id(0x6002000d), propput, helpcontext(0x09f5000d)]
        HRESULT ReadingOrder([in] long prop);
        [id(0x6002000f), propget, hidden, helpcontext(0x09f5000f)]
        HRESULT AutoScaleFont([out, retval] VARIANT* prop);
        [id(0x6002000f), propput, hidden, helpcontext(0x09f5000f)]
        HRESULT AutoScaleFont([in] VARIANT prop);
        [id(0x60020011), propget, helpcontext(0x09f50011)]
        HRESULT Depth([out, retval] long* prop);
        [id(0x60020012), propget, helpcontext(0x09f50012)]
        HRESULT Offset([out, retval] long* prop);
        [id(0x60020012), propput, helpcontext(0x09f50012)]
        HRESULT Offset([in] long prop);
        [id(0x60020014), propget, helpcontext(0x09f50014)]
        HRESULT Alignment([out, retval] long* prop);
        [id(0x60020014), propput, helpcontext(0x09f50014)]
        HRESULT Alignment([in] long prop);
        [id(0x60020016), propget, helpcontext(0x09f50016)]
        HRESULT MultiLevel([out, retval] VARIANT_BOOL* prop);
        [id(0x60020016), propput, helpcontext(0x09f50016)]
        HRESULT MultiLevel([in] VARIANT_BOOL prop);
        [id(0x60020018), propget, helpcontext(0x09f50018)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x09f50094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x09f50095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(9F1DF642-3CCE-4D83-A770-D2634A05D278),
      version(8.6),
      helpcontext(0x00000642),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DropLines : IDispatch {
        [id(0x60020000), propget, helpcontext(0x06420000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x60020001), helpcontext(0x06420001)]
        HRESULT Select();
        [id(0x60020002), propget, helpcontext(0x06420002)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x60020003), propget, helpcontext(0x06420003)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x60020004), helpcontext(0x06420004)]
        HRESULT Delete();
        [id(0x60020005), propget, helpcontext(0x06420005)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x06420094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x06420095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(7A1BCE11-5783-4C7D-BD02-F3D84AB40E7F),
      version(8.6),
      helpcontext(0x00000e11),
      dual,
      nonextensible,
      oleautomation
    ]
    interface HiLoLines : IDispatch {
        [id(0x60020000), propget, helpcontext(0x0e110000)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x60020001), propget, helpcontext(0x0e110001)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x60020002), helpcontext(0x0e110002)]
        HRESULT Select();
        [id(0x60020003), propget, helpcontext(0x0e110003)]
        HRESULT Border([out, retval] ChartBorder** prop);
        [id(0x60020004), helpcontext(0x0e110004)]
        HRESULT Delete();
        [id(0x60020005), propget, helpcontext(0x0e110005)]
        HRESULT Format([out, retval] ChartFormat** prop);
        [id(0x00000094), propget, helpcontext(0x0e110094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x0e110095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(86488FB4-9633-4C93-8057-FC1FA7A847AE),
      version(8.6),
      helpcontext(0x00000fb4),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartGroup : IDispatch {
        [id(0x60020000), propget, helpcontext(0x0fb40000)]
        HRESULT AxisGroup([out, retval] XlAxisGroup* prop);
        [id(0x60020000), propput, helpcontext(0x0fb40000)]
        HRESULT AxisGroup([in] XlAxisGroup prop);
        [id(0x60020002), propget, helpcontext(0x0fb40002)]
        HRESULT DoughnutHoleSize([out, retval] long* prop);
        [id(0x60020002), propput, helpcontext(0x0fb40002)]
        HRESULT DoughnutHoleSize([in] long prop);
        [id(0x60020004), propget, helpcontext(0x0fb40004)]
        HRESULT DownBars([out, retval] DownBars** prop);
        [id(0x60020005), propget, helpcontext(0x0fb40005)]
        HRESULT DropLines([out, retval] DropLines** prop);
        [id(0x60020006), propget, helpcontext(0x0fb40006)]
        HRESULT FirstSliceAngle([out, retval] long* prop);
        [id(0x60020006), propput, helpcontext(0x0fb40006)]
        HRESULT FirstSliceAngle([in] long prop);
        [id(0x60020008), propget, helpcontext(0x0fb40008)]
        HRESULT GapWidth([out, retval] long* prop);
        [id(0x60020008), propput, helpcontext(0x0fb40008)]
        HRESULT GapWidth([in] long prop);
        [id(0x6002000a), propget, helpcontext(0x0fb4000a)]
        HRESULT HasDropLines([out, retval] VARIANT_BOOL* prop);
        [id(0x6002000a), propput, helpcontext(0x0fb4000a)]
        HRESULT HasDropLines([in] VARIANT_BOOL prop);
        [id(0x6002000c), propget, helpcontext(0x0fb4000c)]
        HRESULT HasHiLoLines([out, retval] VARIANT_BOOL* prop);
        [id(0x6002000c), propput, helpcontext(0x0fb4000c)]
        HRESULT HasHiLoLines([in] VARIANT_BOOL prop);
        [id(0x6002000e), propget, helpcontext(0x0fb4000e)]
        HRESULT HasRadarAxisLabels([out, retval] VARIANT_BOOL* prop);
        [id(0x6002000e), propput, helpcontext(0x0fb4000e)]
        HRESULT HasRadarAxisLabels([in] VARIANT_BOOL prop);
        [id(0x60020010), propget, helpcontext(0x0fb40010)]
        HRESULT HasSeriesLines([out, retval] VARIANT_BOOL* prop);
        [id(0x60020010), propput, helpcontext(0x0fb40010)]
        HRESULT HasSeriesLines([in] VARIANT_BOOL prop);
        [id(0x60020012), propget, helpcontext(0x0fb40012)]
        HRESULT HasUpDownBars([out, retval] VARIANT_BOOL* prop);
        [id(0x60020012), propput, helpcontext(0x0fb40012)]
        HRESULT HasUpDownBars([in] VARIANT_BOOL prop);
        [id(0x60020014), propget, helpcontext(0x0fb40014)]
        HRESULT HiLoLines([out, retval] HiLoLines** prop);
        [id(0x60020015), propget, helpcontext(0x0fb40015)]
        HRESULT Index([out, retval] long* prop);
        [id(0x60020016), propget, helpcontext(0x0fb40016)]
        HRESULT Overlap([out, retval] long* prop);
        [id(0x60020016), propput, helpcontext(0x0fb40016)]
        HRESULT Overlap([in] long prop);
        [id(0x60020018), propget, helpcontext(0x0fb40018)]
        HRESULT RadarAxisLabels([out, retval] TickLabels** prop);
        [id(0x60020019), helpcontext(0x0fb40019)]
        HRESULT SeriesCollection(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** prop);
        [id(0x6002001a), propget, helpcontext(0x0fb4001a)]
        HRESULT SeriesLines([out, retval] SeriesLines** prop);
        [id(0x6002001b), propget, hidden, helpcontext(0x0fb4001b)]
        HRESULT SubType([out, retval] long* prop);
        [id(0x6002001b), propput, hidden, helpcontext(0x0fb4001b)]
        HRESULT SubType([in] long prop);
        [id(0x6002001d), propget, hidden, helpcontext(0x0fb4001d)]
        HRESULT Type([out, retval] long* prop);
        [id(0x6002001d), propput, hidden, helpcontext(0x0fb4001d)]
        HRESULT Type([in] long prop);
        [id(0x6002001f), propget, helpcontext(0x0fb4001f)]
        HRESULT UpBars([out, retval] UpBars** prop);
        [id(0x60020020), propget, helpcontext(0x0fb40020)]
        HRESULT VaryByCategories([out, retval] VARIANT_BOOL* prop);
        [id(0x60020020), propput, helpcontext(0x0fb40020)]
        HRESULT VaryByCategories([in] VARIANT_BOOL prop);
        [id(0x60020022), propget, helpcontext(0x0fb40022)]
        HRESULT SizeRepresents([out, retval] XlSizeRepresents* prop);
        [id(0x60020022), propput, helpcontext(0x0fb40022)]
        HRESULT SizeRepresents([in] XlSizeRepresents prop);
        [id(0x60020024), propget, helpcontext(0x0fb40024)]
        HRESULT BubbleScale([out, retval] long* prop);
        [id(0x60020024), propput, helpcontext(0x0fb40024)]
        HRESULT BubbleScale([in] long prop);
        [id(0x60020026), propget, helpcontext(0x0fb40026)]
        HRESULT ShowNegativeBubbles([out, retval] VARIANT_BOOL* prop);
        [id(0x60020026), propput, helpcontext(0x0fb40026)]
        HRESULT ShowNegativeBubbles([in] VARIANT_BOOL prop);
        [id(0x60020028), propget, helpcontext(0x0fb40028)]
        HRESULT SplitType([out, retval] XlChartSplitType* prop);
        [id(0x60020028), propput, helpcontext(0x0fb40028)]
        HRESULT SplitType([in] XlChartSplitType prop);
        [id(0x6002002a), propget, helpcontext(0x0fb4002a)]
        HRESULT SplitValue([out, retval] VARIANT* prop);
        [id(0x6002002a), propput, helpcontext(0x0fb4002a)]
        HRESULT SplitValue([in] VARIANT prop);
        [id(0x6002002c), propget, helpcontext(0x0fb4002c)]
        HRESULT SecondPlotSize([out, retval] long* prop);
        [id(0x6002002c), propput, helpcontext(0x0fb4002c)]
        HRESULT SecondPlotSize([in] long prop);
        [id(0x6002002e), propget, helpcontext(0x0fb4002e)]
        HRESULT Has3DShading([out, retval] VARIANT_BOOL* prop);
        [id(0x6002002e), propput, helpcontext(0x0fb4002e)]
        HRESULT Has3DShading([in] VARIANT_BOOL prop);
        [id(0x00000094), propget, helpcontext(0x0fb40094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x0fb40095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x00000096), propget, helpcontext(0x0fb40096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000097), helpcontext(0x0fb40097)]
        HRESULT CategoryCollection(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** prop);
        [id(0x00000098), helpcontext(0x0fb40098)]
        HRESULT FullCategoryCollection(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** prop);
    };

    [
      odl,
      uuid(F8DDB497-CA6C-4711-9BA4-2718FA3BB6FE),
      version(8.6),
      helpcontext(0x00000497),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartGroups : IDispatch {
        [id(0x00000096), propget, helpcontext(0x04970096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000076), propget, helpcontext(0x04970076)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x04970000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] ChartGroup** prop);
        [id(0xfffffffc), helpcontext(0x0497fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000094), propget, helpcontext(0x04970094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x04970095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(FF06FEF2-DA89-41C0-A0A8-5CD434E210AD),
      version(8.6),
      helpcontext(0x00000ef2),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartCharacters : IDispatch {
        [id(0x00000096), propget, helpcontext(0x0ef20096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000008b), propget, helpcontext(0x0ef2008b)]
        HRESULT Caption([out, retval] BSTR* prop);
        [id(0x0000008b), propput, helpcontext(0x0ef2008b)]
        HRESULT Caption([in] BSTR prop);
        [id(0x00000076), propget, helpcontext(0x0ef20076)]
        HRESULT Count([out, retval] long* prop);
        [id(0x00000075), helpcontext(0x0ef20075)]
        HRESULT Delete([out, retval] VARIANT* prop);
        [id(0x00000092), propget, helpcontext(0x0ef20092)]
        HRESULT Font([out, retval] ChartFont** prop);
        [id(0x000000fc), helpcontext(0x0ef200fc)]
        HRESULT Insert(
                        [in] BSTR String, 
                        [out, retval] VARIANT* prop);
        [id(0x0000008a), propget, helpcontext(0x0ef2008a)]
        HRESULT Text([out, retval] BSTR* prop);
        [id(0x0000008a), propput, helpcontext(0x0ef2008a)]
        HRESULT Text([in] BSTR prop);
        [id(0x000005f2), propget, helpcontext(0x0ef205f2)]
        HRESULT PhoneticCharacters([out, retval] BSTR* prop);
        [id(0x000005f2), propput, helpcontext(0x0ef205f2)]
        HRESULT PhoneticCharacters([in] BSTR prop);
        [id(0x00000094), propget, helpcontext(0x0ef20094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x0ef20095)]
        HRESULT Creator([out, retval] long* prop);
    };

    [
      odl,
      uuid(B66D3C1A-4541-4961-B35B-A353C03F6A99),
      version(8.6),
      helpcontext(0x00000c1a),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartFormat : IDispatch {
        [id(0x60020000), propget, helpcontext(0x0c1a0000)]
        HRESULT Fill([out, retval] FillFormat** prop);
        [id(0x60020001), propget, helpcontext(0x0c1a0001)]
        HRESULT Glow([out, retval] GlowFormat** prop);
        [id(0x60020002), propget, helpcontext(0x0c1a0002)]
        HRESULT Line([out, retval] LineFormat** prop);
        [id(0x60020003), propget, helpcontext(0x0c1a0003)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x60020004), propget, helpcontext(0x0c1a0004)]
        HRESULT PictureFormat([out, retval] PictureFormat** prop);
        [id(0x60020005), propget, helpcontext(0x0c1a0005)]
        HRESULT Shadow([out, retval] ShadowFormat** prop);
        [id(0x60020006), propget, helpcontext(0x0c1a0006)]
        HRESULT SoftEdge([out, retval] SoftEdgeFormat** prop);
        [id(0x60020007), propget, helpcontext(0x0c1a0007)]
        HRESULT TextFrame2([out, retval] TextFrame2** prop);
        [id(0x60020008), propget, helpcontext(0x0c1a0008)]
        HRESULT ThreeD([out, retval] ThreeDFormat** prop);
        [id(0x00000094), propget, helpcontext(0x0c1a0094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x0c1a0095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000000c8), propget, helpcontext(0x0c1a00c8)]
        HRESULT Adjustments([out, retval] Adjustments** prop);
        [id(0x000000c9), propget, helpcontext(0x0c1a00c9)]
        HRESULT AutoShapeType([out, retval] MsoAutoShapeType* prop);
        [id(0x000000c9), propput, helpcontext(0x0c1a00c9)]
        HRESULT AutoShapeType([in] MsoAutoShapeType prop);
    };

    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    


    [
      odl,
      uuid(E598E358-2852-42D4-8775-160BD91B7244),
      version(8.6),
      helpcontext(0x00000358),
      dual,
      nonextensible,
      oleautomation
    ]
    interface UndoRecord : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x035803e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x035803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x035803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), helpcontext(0x03580001)]
        HRESULT StartCustomRecord([in, optional, defaultvalue("")] BSTR Name);
        [id(0x00000002), helpcontext(0x03580002)]
        HRESULT EndCustomRecord();
        [id(0x00000003), propget, helpcontext(0x03580003)]
        HRESULT IsRecordingCustomRecord([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propget, helpcontext(0x03580004)]
        HRESULT CustomRecordName([out, retval] BSTR* prop);
        [id(0x00000005), propget, helpcontext(0x03580005)]
        HRESULT CustomRecordLevel([out, retval] long* prop);
    };

    [
      odl,
      uuid(99755F80-FE96-4F7D-B636-B8E800E54F44),
      version(8.6),
      helpcontext(0x00000f80),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CoAuthLock : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0f8003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0f8003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0f8003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x0f800001)]
        HRESULT Type([out, retval] WdLockType* prop);
        [id(0x00000002), propget, helpcontext(0x0f800002)]
        HRESULT Owner([out, retval] CoAuthor** prop);
        [id(0x00000003), propget, helpcontext(0x0f800003)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000004), propget, helpcontext(0x0f800004)]
        HRESULT HeaderFooter([out, retval] VARIANT_BOOL* prop);
        [id(0x00000006), helpcontext(0x0f800006)]
        HRESULT Unlock();
    };

    [
      odl,
      uuid(DFF99AC2-CD2A-43AD-91B1-A2BE40BC7146),
      version(8.6),
      helpcontext(0x00000ac2),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CoAuthLocks : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0ac203e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0ac203e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0ac203ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x0ac20001)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x0ac2fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x0ac20000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] CoAuthLock** prop);
        [id(0x00000002), helpcontext(0x0ac20002)]
        HRESULT Add(
                        [in, optional] VARIANT Range, 
                        [in, optional, defaultvalue(1)] WdLockType Type, 
                        [out, retval] CoAuthLock** prop);
        [id(0x00000003), helpcontext(0x0ac20003)]
        HRESULT RemoveEphemeralLocks();
    };

    [
      odl,
      uuid(9E6B5EC5-E8E4-40AF-9540-6203F71E2823),
      version(8.6),
      helpcontext(0x00000ec5),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CoAuthUpdate : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0ec503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0ec503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0ec503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x0ec50001)]
        HRESULT Range([out, retval] Range** prop);
    };

    [
      odl,
      uuid(30225CFC-5A71-4FE6-B527-90A52C54AE77),
      version(8.6),
      helpcontext(0x00000cfc),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CoAuthUpdates : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0cfc03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0cfc03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0cfc03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x0cfc0001)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x0cfcfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x0cfc0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] CoAuthUpdate** prop);
    };

    [
      odl,
      uuid(E59544D5-C299-46A0-84C1-C51AB38F9759),
      version(8.6),
      helpcontext(0x000004d5),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CoAuthor : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x04d503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x04d503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x04d503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x04d50001)]
        HRESULT ID([out, retval] BSTR* prop);
        [id(00000000), propget, helpcontext(0x04d50000)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000003), propget, helpcontext(0x04d50003)]
        HRESULT IsMe([out, retval] VARIANT_BOOL* prop);
        [id(0x00000004), propget, helpcontext(0x04d50004)]
        HRESULT Locks([out, retval] CoAuthLocks** prop);
        [id(0x00000005), propget, helpcontext(0x04d50005)]
        HRESULT EmailAddress([out, retval] BSTR* prop);
    };

    [
      odl,
      uuid(256B6ABA-6A38-4D39-971C-91FDA9922814),
      version(8.6),
      helpcontext(0x00000aba),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CoAuthors : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0aba03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0aba03e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0aba03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x0aba0001)]
        HRESULT Count([out, retval] long* prop);
        [id(0xfffffffc), propget, helpcontext(0x0abafffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(00000000), helpcontext(0x0aba0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] CoAuthor** prop);
    };

    [
      odl,
      uuid(65DF9F31-B1E3-4651-87E8-51D55F302161),
      version(8.6),
      helpcontext(0x00000f31),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CoAuthoring : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0f3103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0f3103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0f3103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x0f310001)]
        HRESULT Authors([out, retval] CoAuthors** prop);
        [id(0x00000002), propget, helpcontext(0x0f310002)]
        HRESULT Me([out, retval] CoAuthor** prop);
        [id(0x00000003), propget, helpcontext(0x0f310003)]
        HRESULT PendingUpdates([out, retval] VARIANT_BOOL* prop);
        [id(0x00000005), propget, helpcontext(0x0f310005)]
        HRESULT Locks([out, retval] CoAuthLocks** prop);

        [id(0x00000006), propget, helpcontext(0x0f310006)]
        HRESULT Updates([out, retval] CoAuthUpdates** prop);
        [id(0x00000007), propget, helpcontext(0x0f310007)]
        HRESULT Conflicts([out, retval] Conflicts** prop);
        [id(0x00000008), propget, helpcontext(0x0f310008)]
        HRESULT CanShare([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propget, helpcontext(0x0f310009)]
        HRESULT CanMerge([out, retval] VARIANT_BOOL* prop);
    };

    [
      odl,
      uuid(C2B83A65-B061-4469-83B6-8877437CB8A0),
      version(8.6),
      helpcontext(0x00000a65),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Conflicts : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0a6503e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0a6503e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0a6503ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0a65fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000005), propget, helpcontext(0x0a650005)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x0a650000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] Conflict** prop);
        [id(0x00000065), helpcontext(0x0a650065)]
        HRESULT AcceptAll();
        [id(0x00000066), helpcontext(0x0a650066)]
        HRESULT RejectAll();
    };

    [
      odl,
      uuid(6215E4B1-545A-406E-9824-0A5B5AC8AD21),
      version(8.6),
      helpcontext(0x000004b1),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Conflict : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x04b103e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x04b103e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x04b103ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000003), propget, helpcontext(0x04b10003)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000004), propget, helpcontext(0x04b10004)]
        HRESULT Type([out, retval] WdRevisionType* prop);
        [id(0x00000005), propget, helpcontext(0x04b10005)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000065), helpcontext(0x04b10065)]
        HRESULT Accept();
        [id(0x00000066), helpcontext(0x04b10066)]
        HRESULT Reject();
    };

    [
      odl,
      uuid(FD0A74E8-C719-49F6-BA1B-F6D9839D1AB9),
      version(8.6),
      helpcontext(0x000004e8),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ProtectedViewWindows : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x04e803e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x04e803e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x04e803ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x04e8fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x04e80001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x04e80000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT* Index, 
                        [out, retval] ProtectedViewWindow** prop);
        [id(0x00000002), helpcontext(0x04e80002)]
        HRESULT Open(
                        [in] VARIANT* FileName, 
                        [in, optional] VARIANT* AddToRecentFiles, 
                        [in, optional] VARIANT* PasswordDocument, 
                        [in, optional] VARIANT* Visible, 
                        [in, optional] VARIANT* OpenAndRepair, 
                        [out, retval] ProtectedViewWindow** prop);
    };

    [
      odl,
      uuid(F743EDD0-9B97-4B09-89CC-77BE19B51481),
      version(8.6),
      helpcontext(0x00000dd0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ProtectedViewWindow : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0dd003e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0dd003e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0dd003ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(00000000), propget, helpcontext(0x0dd00000)]
        HRESULT Caption([out, retval] BSTR* prop);
        [id(00000000), propput, helpcontext(0x0dd00000)]
        HRESULT Caption([in] BSTR prop);
        [id(0x00000001), propget, helpcontext(0x0dd00001)]
        HRESULT Document([out, retval] _Document** prop);
        [id(0x00000002), propget, helpcontext(0x0dd00002)]
        HRESULT Left([out, retval] long* prop);
        [id(0x00000002), propput, helpcontext(0x0dd00002)]
        HRESULT Left([in] long prop);
        [id(0x00000003), propget, helpcontext(0x0dd00003)]
        HRESULT Top([out, retval] long* prop);
        [id(0x00000003), propput, helpcontext(0x0dd00003)]
        HRESULT Top([in] long prop);
        [id(0x00000004), propget, helpcontext(0x0dd00004)]
        HRESULT Width([out, retval] long* prop);
        [id(0x00000004), propput, helpcontext(0x0dd00004)]
        HRESULT Width([in] long prop);
        [id(0x00000005), propget, helpcontext(0x0dd00005)]
        HRESULT Height([out, retval] long* prop);
        [id(0x00000005), propput, helpcontext(0x0dd00005)]
        HRESULT Height([in] long prop);
        [id(0x00000006), propget, helpcontext(0x0dd00006)]
        HRESULT WindowState([out, retval] WdWindowState* prop);
        [id(0x00000006), propput, helpcontext(0x0dd00006)]
        HRESULT WindowState([in] WdWindowState prop);
        [id(0x00000007), propget, helpcontext(0x0dd00007)]
        HRESULT Active([out, retval] VARIANT_BOOL* prop);
        [id(0x00000008), propget, helpcontext(0x0dd00008)]
        HRESULT Index([out, retval] long* prop);
        [id(0x00000009), propget, helpcontext(0x0dd00009)]
        HRESULT Visible([out, retval] VARIANT_BOOL* prop);
        [id(0x00000009), propput, helpcontext(0x0dd00009)]
        HRESULT Visible([in] VARIANT_BOOL prop);
        [id(0x0000000a), propget, helpcontext(0x0dd0000a)]
        HRESULT SourceName([out, retval] BSTR* prop);
        [id(0x0000000b), propget, helpcontext(0x0dd0000b)]
        HRESULT SourcePath([out, retval] BSTR* prop);
        [id(0x00000064), helpcontext(0x0dd00064)]
        HRESULT Activate();
        [id(0x00000065), helpcontext(0x0dd00065)]
        HRESULT Edit(
                        [in, optional] VARIANT* PasswordTemplate, 
                        [in, optional] VARIANT* WritePasswordDocument, 
                        [in, optional] VARIANT* WritePasswordTemplate, 
                        [out, retval] _Document** prop);
        [id(0x00000066), helpcontext(0x0dd00066)]
        HRESULT Close();
        [id(0x00000067), helpcontext(0x0dd00067)]
        HRESULT ToggleRibbon();
    };

    


    


    


    


    


    


    


    


    


    


    


    


    


    [
      odl,
      uuid(53FACA33-DB22-473F-BB51-96C2C86C9304),
      version(8.6),
      helpcontext(0x00000a33),
      dual,
      nonextensible,
      oleautomation
    ]
    interface RepeatingSectionItemColl : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0a3303e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0a3303e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0a3303ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0xfffffffc), propget, helpcontext(0x0a33fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000001), propget, helpcontext(0x0a330001)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x0a330000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] RepeatingSectionItem** prop);
    };

    [
      odl,
      uuid(4265ED97-A922-4CA4-8CD8-99684CCA9CDB),
      version(8.6),
      helpcontext(0x00000d97),
      dual,
      nonextensible,
      oleautomation
    ]
    interface RepeatingSectionItem : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x0d9703e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003e9), propget, helpcontext(0x0d9703e9)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x000003ea), propget, helpcontext(0x0d9703ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x0d970001)]
        HRESULT Range([out, retval] Range** prop);
        [id(0x00000002), helpcontext(0x0d970002)]
        HRESULT InsertItemBefore([out, retval] RepeatingSectionItem** prop);
        [id(0x00000003), helpcontext(0x0d970003)]
        HRESULT InsertItemAfter([out, retval] RepeatingSectionItem** prop);
        [id(0x00000004), helpcontext(0x0d970004)]
        HRESULT Delete();
    };

    [
      odl,
      uuid(4DACC469-630B-457E-9C8F-08158D57FC7C),
      version(8.6),
      helpcontext(0x00000469),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FullSeriesCollection : IDispatch {
        [id(0x00000096), propget, helpcontext(0x04690096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000076), propget, helpcontext(0x04690076)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x04690000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] Series** prop);
        [id(0xfffffffc), helpcontext(0x0469fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000094), propget, helpcontext(0x04690094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x04690095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x6002000a), helpcontext(0x0469000a)]
        HRESULT _Default(
                        [in] VARIANT Index, 
                        [out, retval] Series** prop);
    };

    [
      odl,
      uuid(5A90588C-C066-4BD4-8FE5-722454A15553),
      version(8.6),
      helpcontext(0x0000088c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ChartCategory : IDispatch {
        [id(0x00000096), propget, helpcontext(0x088c0096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x0000006e), propget, helpcontext(0x088c006e)]
        HRESULT Name([out, retval] BSTR* prop);
        [id(0x00000b47), propget, helpcontext(0x088c0b47)]
        HRESULT IsFiltered([out, retval] VARIANT_BOOL* prop);
        [id(0x00000b47), propput, helpcontext(0x088c0b47)]
        HRESULT IsFiltered([in] VARIANT_BOOL prop);
    };

    [
      odl,
      uuid(04124C2D-039D-4442-9C68-8FA38D11DDD6),
      version(8.6),
      helpcontext(0x00000c2d),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CategoryCollection : IDispatch {
        [id(0x00000096), propget, helpcontext(0x0c2d0096)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000076), propget, helpcontext(0x0c2d0076)]
        HRESULT Count([out, retval] long* prop);
        [id(00000000), helpcontext(0x0c2d0000),
          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, "propget")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] ChartCategory** prop);
        [id(0xfffffffc), helpcontext(0x0c2dfffc)]
        HRESULT _NewEnum([out, retval] IUnknown** prop);
        [id(0x00000094), propget, helpcontext(0x0c2d0094)]
        HRESULT Application([out, retval] IDispatch** prop);
        [id(0x00000095), propget, helpcontext(0x0c2d0095)]
        HRESULT Creator([out, retval] long* prop);
        [id(0x6002000a), helpcontext(0x0c2d000a)]
        HRESULT _Default(
                        [in] VARIANT Index, 
                        [out, retval] ChartCategory** prop);
    };

    [
      odl,
      uuid(B67DE22C-BC01-4A73-A99B-070D1B5A795D),
      version(8.6),
      helpcontext(0x0000022c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Broadcast : IDispatch {
        [id(0x000003e8), propget, helpcontext(0x022c03e8)]
        HRESULT Application([out, retval] _Application** prop);
        [id(0x000003ea), propget, helpcontext(0x022c03ea)]
        HRESULT Parent([out, retval] IDispatch** prop);
        [id(0x00000001), propget, helpcontext(0x022c0001)]
        HRESULT AttendeeUrl([out, retval] BSTR* prop);
        [id(0x00000002), propget, helpcontext(0x022c0002)]
        HRESULT State([out, retval] MsoBroadcastState* prop);
        [id(0x00000003), propget, helpcontext(0x022c0003)]
        HRESULT Capabilities([out, retval] long* prop);
        [id(0x00000004), propget, helpcontext(0x022c0004)]
        HRESULT PresenterServiceUrl([out, retval] BSTR* prop);
        [id(0x00000005), propget, helpcontext(0x022c0005)]
        HRESULT SessionID([out, retval] BSTR* prop);
        [id(0x00000065), helpcontext(0x022c0065)]
        HRESULT Start([in] BSTR serverUrl);
        [id(0x00000066), helpcontext(0x022c0066)]
        HRESULT Pause();
        [id(0x00000067), helpcontext(0x022c0067)]
        HRESULT Resume();
        [id(0x00000068), helpcontext(0x022c0068)]
        HRESULT End();
        [id(0x00000069), helpcontext(0x022c0069)]
        HRESULT AddMeetingNotes(
                        [in] BSTR notesUrl, 
                        [in] BSTR notesWacUrl);
    };

    [
      odl,
      uuid(D523C26B-7278-4FA9-AA0B-0827DC8B41CE),
      version(8.6),
      helpcontext(0x0000026b),
      dual,
      nonextensible,
      oleautomation
    ]
    interface RevisionsFilter : IDispatch {
        [id(0x00000001), propget, helpcontext(0x026b0001)]
        HRESULT View([out, retval] WdRevisionsView* prop);
        [id(0x00000001), propput, helpcontext(0x026b0001)]
        HRESULT View([in] WdRevisionsView prop);
        [id(0x00000002), propget, helpcontext(0x026b0002)]
        HRESULT Markup([out, retval] WdRevisionsMarkup* prop);
        [id(0x00000002), propput, helpcontext(0x026b0002)]
        HRESULT Markup([in] WdRevisionsMarkup prop);
        [id(0x00000003), propget, helpcontext(0x026b0003)]
        HRESULT Reviewers([out, retval] Reviewers** prop);
        [id(0x00000065), helpcontext(0x026b0065)]
        HRESULT ToggleShowAllReviewers();
    };

    


    


    


    


    


    


    

};


